# Generated from fugue_sql.g4 by ANTLR 4.11.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,339,3840,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,
        2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,2,142,
        7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
        2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,
        7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
        2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,
        7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,
        2,170,7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,
        7,175,2,176,7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,
        2,181,7,181,2,182,7,182,2,183,7,183,2,184,7,184,2,185,7,185,2,186,
        7,186,2,187,7,187,2,188,7,188,2,189,7,189,2,190,7,190,2,191,7,191,
        2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,2,196,7,196,2,197,
        7,197,2,198,7,198,2,199,7,199,2,200,7,200,2,201,7,201,2,202,7,202,
        2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,2,207,7,207,2,208,
        7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,7,212,2,213,7,213,
        1,0,4,0,430,8,0,11,0,12,0,431,1,0,1,0,1,1,1,1,1,1,1,2,1,2,1,2,1,
        2,1,2,1,2,3,2,445,8,2,1,3,3,3,448,8,3,1,3,1,3,3,3,452,8,3,1,3,3,
        3,455,8,3,1,3,3,3,458,8,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,
        4,1,4,1,4,1,4,1,4,3,4,474,8,4,1,5,1,5,3,5,478,8,5,1,5,3,5,481,8,
        5,1,5,1,5,1,5,3,5,486,8,5,1,6,1,6,3,6,490,8,6,1,6,3,6,493,8,6,1,
        6,1,6,1,7,1,7,1,7,1,7,3,7,501,8,7,1,7,3,7,504,8,7,1,7,1,7,3,7,508,
        8,7,1,7,3,7,511,8,7,1,7,1,7,3,7,515,8,7,1,8,1,8,1,8,1,8,1,8,3,8,
        522,8,8,1,9,1,9,1,9,1,9,1,9,3,9,529,8,9,1,10,1,10,1,10,1,10,1,10,
        3,10,536,8,10,1,10,1,10,3,10,540,8,10,1,11,1,11,1,11,1,11,1,11,1,
        11,1,11,3,11,549,8,11,1,11,1,11,3,11,553,8,11,1,12,1,12,1,12,1,12,
        1,12,3,12,560,8,12,1,13,1,13,3,13,564,8,13,1,13,1,13,1,13,3,13,569,
        8,13,1,13,1,13,3,13,573,8,13,1,14,1,14,1,14,3,14,578,8,14,1,14,1,
        14,3,14,582,8,14,1,14,1,14,1,14,3,14,587,8,14,1,14,1,14,3,14,591,
        8,14,1,15,1,15,1,15,3,15,596,8,15,1,15,1,15,3,15,600,8,15,1,15,1,
        15,3,15,604,8,15,1,16,1,16,1,16,1,17,1,17,3,17,611,8,17,1,17,1,17,
        1,17,1,17,1,18,1,18,3,18,619,8,18,1,18,1,18,3,18,623,8,18,1,18,1,
        18,3,18,627,8,18,1,19,1,19,3,19,631,8,19,1,19,3,19,634,8,19,1,19,
        1,19,1,19,3,19,639,8,19,1,20,1,20,1,20,1,20,1,20,3,20,646,8,20,1,
        20,3,20,649,8,20,1,20,1,20,3,20,653,8,20,1,20,1,20,3,20,657,8,20,
        1,20,3,20,660,8,20,1,20,1,20,3,20,664,8,20,3,20,666,8,20,1,21,1,
        21,3,21,670,8,21,1,21,3,21,673,8,21,1,21,1,21,3,21,677,8,21,1,21,
        3,21,680,8,21,1,21,1,21,3,21,684,8,21,1,22,1,22,3,22,688,8,22,1,
        22,3,22,691,8,22,1,22,1,22,1,22,3,22,696,8,22,1,22,1,22,3,22,700,
        8,22,1,23,3,23,703,8,23,1,23,1,23,3,23,707,8,23,1,23,1,23,1,23,3,
        23,712,8,23,1,24,1,24,1,24,3,24,717,8,24,1,25,1,25,1,26,1,26,3,26,
        723,8,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,3,30,732,8,30,1,30,1,
        30,1,30,3,30,737,8,30,1,30,3,30,740,8,30,1,30,3,30,743,8,30,1,30,
        3,30,746,8,30,1,30,1,30,3,30,750,8,30,1,30,3,30,753,8,30,1,30,3,
        30,756,8,30,1,30,3,30,759,8,30,1,30,1,30,1,30,3,30,764,8,30,1,30,
        3,30,767,8,30,1,30,3,30,770,8,30,1,30,3,30,773,8,30,3,30,775,8,30,
        1,31,1,31,1,32,1,32,1,32,1,32,3,32,783,8,32,1,32,1,32,3,32,787,8,
        32,1,32,1,32,1,32,3,32,792,8,32,3,32,794,8,32,1,33,1,33,1,34,1,34,
        1,34,5,34,801,8,34,10,34,12,34,804,9,34,1,34,1,34,1,34,5,34,809,
        8,34,10,34,12,34,812,9,34,3,34,814,8,34,1,35,1,35,1,35,1,35,1,36,
        1,36,3,36,822,8,36,1,36,1,36,1,36,1,36,3,36,828,8,36,1,37,1,37,1,
        37,3,37,833,8,37,1,37,1,37,1,38,1,38,1,38,1,39,1,39,1,40,1,40,1,
        40,3,40,845,8,40,1,40,1,40,3,40,849,8,40,1,41,1,41,1,41,3,41,854,
        8,41,1,41,1,41,3,41,858,8,41,1,42,1,42,1,42,5,42,863,8,42,10,42,
        12,42,866,9,42,1,43,1,43,1,43,1,43,3,43,872,8,43,1,44,1,44,1,44,
        1,44,1,44,1,44,1,44,1,44,3,44,882,8,44,1,45,3,45,885,8,45,1,45,1,
        45,1,45,1,45,3,45,891,8,45,1,45,1,45,3,45,895,8,45,1,45,3,45,898,
        8,45,1,45,1,45,1,45,1,45,1,45,3,45,905,8,45,3,45,907,8,45,1,46,1,
        46,1,47,1,47,1,47,1,47,1,47,1,47,3,47,917,8,47,1,47,1,47,1,47,5,
        47,922,8,47,10,47,12,47,925,9,47,1,48,3,48,928,8,48,1,48,1,48,3,
        48,932,8,48,1,48,1,48,1,48,3,48,937,8,48,1,49,1,49,1,49,3,49,942,
        8,49,1,49,3,49,945,8,49,1,50,1,50,1,50,5,50,950,8,50,10,50,12,50,
        953,9,50,1,51,1,51,1,51,5,51,958,8,51,10,51,12,51,961,9,51,1,52,
        1,52,3,52,965,8,52,1,53,1,53,1,54,1,54,1,54,5,54,972,8,54,10,54,
        12,54,975,9,54,1,55,1,55,1,55,5,55,980,8,55,10,55,12,55,983,9,55,
        1,55,5,55,986,8,55,10,55,12,55,989,9,55,1,56,1,56,3,56,993,8,56,
        1,57,1,57,1,57,1,57,5,57,999,8,57,10,57,12,57,1002,9,57,1,57,1,57,
        3,57,1006,8,57,1,58,1,58,1,58,5,58,1011,8,58,10,58,12,58,1014,9,
        58,1,59,1,59,1,59,1,59,1,60,1,60,1,61,1,61,1,61,1,61,1,61,1,61,1,
        61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,3,61,1037,8,61,1,62,1,
        62,1,62,1,62,1,63,1,63,1,64,1,64,1,64,3,64,1048,8,64,1,64,1,64,1,
        64,1,64,1,64,1,64,1,64,3,64,1057,8,64,1,64,1,64,1,64,1,64,3,64,1063,
        8,64,1,65,1,65,1,65,5,65,1068,8,65,10,65,12,65,1071,9,65,1,66,1,
        66,1,66,1,66,1,67,1,67,3,67,1079,8,67,1,68,1,68,1,68,1,68,5,68,1085,
        8,68,10,68,12,68,1088,9,68,1,68,3,68,1091,8,68,1,68,1,68,1,68,1,
        68,3,68,1097,8,68,1,69,1,69,1,69,1,69,1,69,1,69,3,69,1105,8,69,1,
        70,1,70,1,71,1,71,1,72,1,72,1,73,1,73,1,74,1,74,1,75,1,75,5,75,1119,
        8,75,10,75,12,75,1122,9,75,1,75,1,75,1,76,1,76,1,76,1,77,1,77,1,
        77,1,78,1,78,1,78,1,79,1,79,1,79,1,80,1,80,1,80,1,81,1,81,1,81,1,
        82,1,82,3,82,1146,8,82,1,82,1,82,1,82,3,82,1151,8,82,1,82,1,82,1,
        82,1,82,1,82,1,82,3,82,1159,8,82,1,82,1,82,1,82,1,82,1,82,1,82,5,
        82,1167,8,82,10,82,12,82,1170,9,82,1,82,1,82,1,82,1,82,1,82,1,82,
        1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,3,82,1189,
        8,82,1,82,1,82,3,82,1193,8,82,1,82,1,82,1,82,1,82,3,82,1199,8,82,
        1,82,3,82,1202,8,82,1,82,3,82,1205,8,82,1,82,1,82,1,82,1,82,1,82,
        3,82,1212,8,82,1,82,1,82,1,82,3,82,1217,8,82,1,82,3,82,1220,8,82,
        1,82,1,82,1,82,1,82,1,82,3,82,1227,8,82,1,82,1,82,1,82,1,82,1,82,
        1,82,1,82,1,82,1,82,1,82,3,82,1239,8,82,1,82,1,82,1,82,1,82,1,82,
        1,82,1,82,5,82,1248,8,82,10,82,12,82,1251,9,82,1,82,3,82,1254,8,
        82,1,82,3,82,1257,8,82,1,82,1,82,1,82,1,82,1,82,3,82,1264,8,82,1,
        82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,5,82,1275,8,82,10,82,
        12,82,1278,9,82,1,82,1,82,1,82,1,82,1,82,3,82,1285,8,82,1,82,1,82,
        1,82,3,82,1290,8,82,1,82,3,82,1293,8,82,1,82,1,82,1,82,1,82,3,82,
        1299,8,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,3,82,1310,
        8,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,
        1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,
        1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,
        1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,
        1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,3,82,1374,
        8,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,3,82,1383,8,82,1,82,1,82,
        3,82,1387,8,82,1,82,1,82,1,82,1,82,3,82,1393,8,82,1,82,1,82,3,82,
        1397,8,82,1,82,1,82,1,82,3,82,1402,8,82,1,82,1,82,1,82,1,82,3,82,
        1408,8,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,3,82,
        1420,8,82,1,82,1,82,1,82,1,82,1,82,1,82,3,82,1428,8,82,1,82,1,82,
        1,82,1,82,3,82,1434,8,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,
        1,82,1,82,1,82,3,82,1447,8,82,1,82,4,82,1450,8,82,11,82,12,82,1451,
        1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,
        1,82,3,82,1468,8,82,1,82,1,82,1,82,5,82,1473,8,82,10,82,12,82,1476,
        9,82,1,82,3,82,1479,8,82,1,82,1,82,1,82,1,82,3,82,1485,8,82,1,82,
        1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,3,82,
        1500,8,82,1,82,1,82,3,82,1504,8,82,1,82,1,82,1,82,1,82,3,82,1510,
        8,82,1,82,1,82,1,82,1,82,3,82,1516,8,82,1,82,3,82,1519,8,82,1,82,
        3,82,1522,8,82,1,82,1,82,1,82,1,82,3,82,1528,8,82,1,82,1,82,3,82,
        1532,8,82,1,82,1,82,1,82,1,82,1,82,1,82,5,82,1540,8,82,10,82,12,
        82,1543,9,82,1,82,1,82,1,82,1,82,1,82,1,82,3,82,1551,8,82,1,82,3,
        82,1554,8,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,3,82,1563,8,82,1,
        82,1,82,1,82,3,82,1568,8,82,1,82,1,82,1,82,1,82,3,82,1574,8,82,1,
        82,1,82,1,82,1,82,1,82,3,82,1581,8,82,1,82,3,82,1584,8,82,1,82,1,
        82,1,82,1,82,3,82,1590,8,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,5,
        82,1599,8,82,10,82,12,82,1602,9,82,3,82,1604,8,82,1,82,1,82,3,82,
        1608,8,82,1,82,1,82,1,82,3,82,1613,8,82,1,82,1,82,1,82,3,82,1618,
        8,82,1,82,1,82,1,82,1,82,1,82,3,82,1625,8,82,1,82,3,82,1628,8,82,
        1,82,3,82,1631,8,82,1,82,1,82,1,82,1,82,1,82,3,82,1638,8,82,1,82,
        1,82,1,82,3,82,1643,8,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,3,82,
        1652,8,82,1,82,1,82,1,82,1,82,1,82,1,82,3,82,1660,8,82,1,82,1,82,
        1,82,1,82,3,82,1666,8,82,1,82,3,82,1669,8,82,1,82,3,82,1672,8,82,
        1,82,1,82,1,82,1,82,3,82,1678,8,82,1,82,1,82,3,82,1682,8,82,1,82,
        1,82,3,82,1686,8,82,1,82,1,82,3,82,1690,8,82,3,82,1692,8,82,1,82,
        1,82,1,82,1,82,1,82,1,82,3,82,1700,8,82,1,82,1,82,1,82,1,82,1,82,
        1,82,3,82,1708,8,82,1,82,1,82,1,82,1,82,3,82,1714,8,82,1,82,1,82,
        1,82,1,82,3,82,1720,8,82,1,82,3,82,1723,8,82,1,82,1,82,3,82,1727,
        8,82,1,82,3,82,1730,8,82,1,82,1,82,3,82,1734,8,82,1,82,1,82,1,82,
        1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,
        1,82,1,82,1,82,1,82,1,82,5,82,1757,8,82,10,82,12,82,1760,9,82,3,
        82,1762,8,82,1,82,1,82,3,82,1766,8,82,1,82,1,82,1,82,1,82,3,82,1772,
        8,82,1,82,3,82,1775,8,82,1,82,3,82,1778,8,82,1,82,1,82,1,82,1,82,
        3,82,1784,8,82,1,82,1,82,1,82,1,82,1,82,1,82,3,82,1792,8,82,1,82,
        1,82,1,82,3,82,1797,8,82,1,82,1,82,1,82,1,82,3,82,1803,8,82,1,82,
        1,82,1,82,1,82,3,82,1809,8,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,
        1,82,5,82,1819,8,82,10,82,12,82,1822,9,82,3,82,1824,8,82,1,82,1,
        82,1,82,5,82,1829,8,82,10,82,12,82,1832,9,82,1,82,1,82,5,82,1836,
        8,82,10,82,12,82,1839,9,82,1,82,1,82,1,82,5,82,1844,8,82,10,82,12,
        82,1847,9,82,3,82,1849,8,82,1,83,1,83,1,83,1,83,1,83,1,83,3,83,1857,
        8,83,1,83,1,83,3,83,1861,8,83,1,83,1,83,1,83,1,83,1,83,3,83,1868,
        8,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,
        1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,
        1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,
        1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,
        1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,
        1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,
        1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,
        1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,
        1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,3,83,1984,
        8,83,1,83,1,83,1,83,1,83,1,83,1,83,3,83,1992,8,83,1,83,1,83,1,83,
        1,83,1,83,1,83,3,83,2000,8,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,
        3,83,2009,8,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,3,83,2019,
        8,83,1,84,1,84,3,84,2023,8,84,1,84,3,84,2026,8,84,1,84,1,84,1,84,
        1,84,3,84,2032,8,84,1,84,1,84,1,85,1,85,3,85,2038,8,85,1,85,1,85,
        1,85,1,85,1,86,1,86,1,86,1,86,1,86,1,86,3,86,2050,8,86,1,86,1,86,
        1,86,1,86,1,87,1,87,1,87,1,87,1,87,1,87,3,87,2062,8,87,1,87,1,87,
        1,87,3,87,2067,8,87,1,88,1,88,1,88,1,89,1,89,1,89,1,90,3,90,2076,
        8,90,1,90,3,90,2079,8,90,1,90,1,90,1,90,1,91,1,91,1,91,3,91,2087,
        8,91,1,91,1,91,1,91,1,91,1,91,3,91,2094,8,91,3,91,2096,8,91,1,91,
        1,91,1,91,3,91,2101,8,91,1,91,1,91,3,91,2105,8,91,1,91,1,91,1,91,
        3,91,2110,8,91,1,91,1,91,1,91,3,91,2115,8,91,1,91,1,91,1,91,3,91,
        2120,8,91,1,91,3,91,2123,8,91,1,91,1,91,1,91,3,91,2128,8,91,1,91,
        1,91,3,91,2132,8,91,1,91,1,91,1,91,3,91,2137,8,91,3,91,2139,8,91,
        1,92,1,92,3,92,2143,8,92,1,93,1,93,1,93,1,93,1,93,5,93,2150,8,93,
        10,93,12,93,2153,9,93,1,93,1,93,1,94,1,94,1,94,3,94,2160,8,94,1,
        95,1,95,1,96,1,96,1,96,1,96,1,96,3,96,2169,8,96,1,97,1,97,1,97,5,
        97,2174,8,97,10,97,12,97,2177,9,97,1,98,1,98,1,98,1,98,5,98,2183,
        8,98,10,98,12,98,2186,9,98,1,99,1,99,3,99,2190,8,99,1,99,3,99,2193,
        8,99,1,99,1,99,1,99,1,99,1,100,1,100,1,100,1,101,1,101,1,101,1,101,
        1,101,1,101,1,101,1,101,1,101,1,101,5,101,2212,8,101,10,101,12,101,
        2215,9,101,1,102,1,102,1,102,1,102,5,102,2221,8,102,10,102,12,102,
        2224,9,102,1,102,1,102,1,103,1,103,3,103,2230,8,103,1,103,3,103,
        2233,8,103,1,104,1,104,1,104,5,104,2238,8,104,10,104,12,104,2241,
        9,104,1,104,3,104,2244,8,104,1,105,1,105,1,105,1,105,3,105,2250,
        8,105,1,106,1,106,1,106,1,106,5,106,2256,8,106,10,106,12,106,2259,
        9,106,1,106,1,106,1,107,1,107,1,107,1,107,5,107,2267,8,107,10,107,
        12,107,2270,9,107,1,107,1,107,1,108,1,108,1,108,1,108,1,108,1,108,
        3,108,2280,8,108,1,109,1,109,1,109,1,109,1,109,3,109,2287,8,109,
        1,110,1,110,1,110,1,110,3,110,2293,8,110,1,111,1,111,1,111,1,112,
        1,112,1,112,1,112,1,112,1,112,4,112,2304,8,112,11,112,12,112,2305,
        1,112,1,112,1,112,1,112,1,112,3,112,2313,8,112,1,112,1,112,1,112,
        1,112,1,112,3,112,2320,8,112,1,112,1,112,1,112,1,112,1,112,1,112,
        1,112,1,112,1,112,1,112,3,112,2332,8,112,1,112,1,112,1,112,1,112,
        5,112,2338,8,112,10,112,12,112,2341,9,112,1,112,5,112,2344,8,112,
        10,112,12,112,2347,9,112,3,112,2349,8,112,1,113,1,113,1,113,1,113,
        1,113,5,113,2356,8,113,10,113,12,113,2359,9,113,3,113,2361,8,113,
        1,113,1,113,1,113,1,113,1,113,5,113,2368,8,113,10,113,12,113,2371,
        9,113,3,113,2373,8,113,1,113,1,113,1,113,1,113,1,113,5,113,2380,
        8,113,10,113,12,113,2383,9,113,3,113,2385,8,113,1,113,1,113,1,113,
        1,113,1,113,5,113,2392,8,113,10,113,12,113,2395,9,113,3,113,2397,
        8,113,1,113,3,113,2400,8,113,1,113,1,113,1,113,3,113,2405,8,113,
        3,113,2407,8,113,1,114,1,114,1,114,1,115,1,115,1,115,3,115,2415,
        8,115,1,115,1,115,1,115,3,115,2420,8,115,1,115,1,115,1,115,1,115,
        3,115,2426,8,115,1,115,1,115,1,115,1,115,3,115,2432,8,115,1,115,
        5,115,2435,8,115,10,115,12,115,2438,9,115,1,116,1,116,1,116,1,116,
        1,116,3,116,2445,8,116,1,117,1,117,3,117,2449,8,117,1,117,1,117,
        3,117,2453,8,117,1,118,1,118,4,118,2457,8,118,11,118,12,118,2458,
        1,119,1,119,3,119,2463,8,119,1,119,1,119,1,119,1,119,5,119,2469,
        8,119,10,119,12,119,2472,9,119,1,119,3,119,2475,8,119,1,119,3,119,
        2478,8,119,1,119,3,119,2481,8,119,1,119,3,119,2484,8,119,1,119,1,
        119,3,119,2488,8,119,1,120,1,120,1,120,3,120,2493,8,120,1,120,1,
        120,1,120,5,120,2498,8,120,10,120,12,120,2501,9,120,1,120,3,120,
        2504,8,120,1,120,3,120,2507,8,120,1,120,3,120,2510,8,120,1,120,3,
        120,2513,8,120,3,120,2515,8,120,1,121,3,121,2518,8,121,1,122,1,122,
        1,122,1,122,1,122,1,122,1,122,1,122,1,122,1,122,3,122,2530,8,122,
        1,122,3,122,2533,8,122,1,122,1,122,3,122,2537,8,122,1,122,1,122,
        1,122,1,122,1,122,1,122,1,122,1,122,3,122,2547,8,122,1,122,1,122,
        3,122,2551,8,122,3,122,2553,8,122,1,122,3,122,2556,8,122,1,122,1,
        122,3,122,2560,8,122,1,123,1,123,5,123,2564,8,123,10,123,12,123,
        2567,9,123,1,123,3,123,2570,8,123,1,123,1,123,1,124,1,124,1,124,
        1,125,1,125,1,125,1,125,3,125,2581,8,125,1,125,1,125,1,125,1,126,
        1,126,1,126,1,126,1,126,3,126,2591,8,126,1,126,1,126,1,126,1,127,
        1,127,1,127,1,127,1,127,1,127,1,127,3,127,2603,8,127,1,128,1,128,
        1,128,1,128,1,128,1,128,1,128,1,128,1,128,1,128,1,128,5,128,2616,
        8,128,10,128,12,128,2619,9,128,1,128,1,128,3,128,2623,8,128,1,129,
        1,129,1,129,5,129,2628,8,129,10,129,12,129,2631,9,129,1,130,1,130,
        1,130,1,130,1,131,1,131,1,131,1,132,1,132,1,132,1,133,1,133,1,133,
        3,133,2646,8,133,1,133,5,133,2649,8,133,10,133,12,133,2652,9,133,
        1,133,1,133,1,134,1,134,1,134,1,134,1,134,1,134,5,134,2662,8,134,
        10,134,12,134,2665,9,134,1,134,1,134,3,134,2669,8,134,1,135,1,135,
        1,135,1,135,5,135,2675,8,135,10,135,12,135,2678,9,135,1,135,5,135,
        2681,8,135,10,135,12,135,2684,9,135,1,135,3,135,2687,8,135,1,136,
        1,136,1,136,1,136,1,136,5,136,2694,8,136,10,136,12,136,2697,9,136,
        1,136,1,136,1,136,1,136,1,136,1,136,1,136,1,136,1,136,1,136,5,136,
        2709,8,136,10,136,12,136,2712,9,136,1,136,1,136,3,136,2716,8,136,
        1,136,1,136,1,136,1,136,1,136,1,136,1,136,1,136,5,136,2726,8,136,
        10,136,12,136,2729,9,136,1,136,1,136,3,136,2733,8,136,1,137,1,137,
        1,137,1,137,5,137,2739,8,137,10,137,12,137,2742,9,137,3,137,2744,
        8,137,1,137,1,137,3,137,2748,8,137,1,138,1,138,1,138,1,138,1,138,
        1,138,1,138,1,138,1,138,1,138,5,138,2760,8,138,10,138,12,138,2763,
        9,138,1,138,1,138,1,138,1,139,1,139,1,139,1,139,1,139,5,139,2773,
        8,139,10,139,12,139,2776,9,139,1,139,1,139,3,139,2780,8,139,1,140,
        1,140,3,140,2784,8,140,1,140,3,140,2787,8,140,1,141,1,141,1,141,
        3,141,2792,8,141,1,141,1,141,1,141,1,141,1,141,5,141,2799,8,141,
        10,141,12,141,2802,9,141,3,141,2804,8,141,1,141,1,141,1,141,3,141,
        2809,8,141,1,141,1,141,1,141,5,141,2814,8,141,10,141,12,141,2817,
        9,141,3,141,2819,8,141,1,142,1,142,1,143,1,143,5,143,2825,8,143,
        10,143,12,143,2828,9,143,1,144,1,144,1,144,1,144,3,144,2834,8,144,
        1,144,1,144,1,144,1,144,1,144,3,144,2841,8,144,1,145,3,145,2844,
        8,145,1,145,1,145,1,145,3,145,2849,8,145,1,145,3,145,2852,8,145,
        1,145,1,145,1,145,3,145,2857,8,145,1,145,1,145,3,145,2861,8,145,
        1,145,3,145,2864,8,145,1,145,3,145,2867,8,145,1,146,1,146,1,146,
        1,146,3,146,2873,8,146,1,147,1,147,1,147,3,147,2878,8,147,1,147,
        1,147,1,148,3,148,2883,8,148,1,148,1,148,1,148,1,148,1,148,1,148,
        1,148,1,148,1,148,1,148,1,148,1,148,1,148,1,148,1,148,1,148,3,148,
        2901,8,148,3,148,2903,8,148,1,148,3,148,2906,8,148,1,149,1,149,1,
        149,1,149,1,150,1,150,1,150,5,150,2915,8,150,10,150,12,150,2918,
        9,150,1,151,1,151,1,151,1,151,5,151,2924,8,151,10,151,12,151,2927,
        9,151,1,151,1,151,1,152,1,152,3,152,2933,8,152,1,153,1,153,1,153,
        1,153,5,153,2939,8,153,10,153,12,153,2942,9,153,1,153,1,153,1,154,
        1,154,3,154,2948,8,154,1,155,1,155,3,155,2952,8,155,1,155,3,155,
        2955,8,155,1,155,1,155,1,155,1,155,1,155,1,155,3,155,2963,8,155,
        1,155,1,155,1,155,1,155,1,155,1,155,3,155,2971,8,155,1,155,1,155,
        1,155,1,155,3,155,2977,8,155,1,156,1,156,1,156,1,156,5,156,2983,
        8,156,10,156,12,156,2986,9,156,1,156,1,156,1,157,1,157,1,157,1,157,
        1,157,5,157,2995,8,157,10,157,12,157,2998,9,157,3,157,3000,8,157,
        1,157,1,157,1,157,1,158,3,158,3006,8,158,1,158,1,158,3,158,3010,
        8,158,3,158,3012,8,158,1,159,1,159,1,159,1,159,1,159,1,159,1,159,
        3,159,3021,8,159,1,159,1,159,1,159,1,159,1,159,1,159,1,159,1,159,
        1,159,1,159,3,159,3033,8,159,3,159,3035,8,159,1,159,1,159,1,159,
        1,159,1,159,3,159,3042,8,159,1,159,1,159,1,159,1,159,1,159,3,159,
        3049,8,159,1,159,1,159,1,159,1,159,3,159,3055,8,159,1,159,1,159,
        1,159,1,159,3,159,3061,8,159,3,159,3063,8,159,1,160,1,160,1,160,
        5,160,3068,8,160,10,160,12,160,3071,9,160,1,161,1,161,1,161,5,161,
        3076,8,161,10,161,12,161,3079,9,161,1,162,1,162,1,162,3,162,3084,
        8,162,1,162,1,162,1,163,1,163,1,163,3,163,3091,8,163,1,163,1,163,
        1,164,1,164,3,164,3097,8,164,1,164,1,164,3,164,3101,8,164,3,164,
        3103,8,164,1,165,1,165,1,165,5,165,3108,8,165,10,165,12,165,3111,
        9,165,1,166,1,166,1,166,1,166,5,166,3117,8,166,10,166,12,166,3120,
        9,166,1,166,1,166,1,167,1,167,1,167,1,167,1,167,1,167,5,167,3130,
        8,167,10,167,12,167,3133,9,167,1,167,1,167,3,167,3137,8,167,1,168,
        1,168,3,168,3141,8,168,1,169,1,169,1,170,1,170,1,170,1,170,1,170,
        1,170,1,170,1,170,1,170,1,170,3,170,3155,8,170,3,170,3157,8,170,
        1,170,1,170,1,170,1,170,1,170,1,170,5,170,3165,8,170,10,170,12,170,
        3168,9,170,1,171,3,171,3171,8,171,1,171,1,171,1,171,1,171,1,171,
        1,171,3,171,3179,8,171,1,171,1,171,1,171,1,171,1,171,5,171,3186,
        8,171,10,171,12,171,3189,9,171,1,171,1,171,1,171,3,171,3194,8,171,
        1,171,1,171,1,171,1,171,1,171,1,171,3,171,3202,8,171,1,171,1,171,
        1,171,3,171,3207,8,171,1,171,1,171,1,171,1,171,1,171,1,171,1,171,
        1,171,5,171,3217,8,171,10,171,12,171,3220,9,171,1,171,1,171,3,171,
        3224,8,171,1,171,3,171,3227,8,171,1,171,1,171,1,171,1,171,3,171,
        3233,8,171,1,171,1,171,3,171,3237,8,171,1,171,1,171,1,171,3,171,
        3242,8,171,1,171,1,171,1,171,3,171,3247,8,171,1,171,1,171,1,171,
        3,171,3252,8,171,1,172,1,172,1,172,1,172,3,172,3258,8,172,1,172,
        1,172,1,172,1,172,1,172,1,172,1,172,1,172,1,172,1,172,1,172,1,172,
        1,172,1,172,1,172,1,172,1,172,1,172,1,172,5,172,3279,8,172,10,172,
        12,172,3282,9,172,1,173,1,173,1,173,1,173,4,173,3288,8,173,11,173,
        12,173,3289,1,173,1,173,3,173,3294,8,173,1,173,1,173,1,173,1,173,
        1,173,4,173,3301,8,173,11,173,12,173,3302,1,173,1,173,3,173,3307,
        8,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,
        1,173,1,173,1,173,1,173,5,173,3323,8,173,10,173,12,173,3326,9,173,
        3,173,3328,8,173,1,173,1,173,1,173,1,173,1,173,1,173,3,173,3336,
        8,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,3,173,3345,8,173,
        1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,
        1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,4,173,3366,8,173,
        11,173,12,173,3367,1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,
        1,173,3,173,3379,8,173,1,173,1,173,1,173,5,173,3384,8,173,10,173,
        12,173,3387,9,173,3,173,3389,8,173,1,173,1,173,1,173,1,173,1,173,
        1,173,1,173,3,173,3398,8,173,1,173,1,173,3,173,3402,8,173,1,173,
        1,173,1,173,1,173,1,173,1,173,1,173,1,173,4,173,3412,8,173,11,173,
        12,173,3413,1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,
        1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,
        1,173,1,173,1,173,3,173,3439,8,173,1,173,1,173,1,173,1,173,1,173,
        3,173,3446,8,173,1,173,3,173,3449,8,173,1,173,1,173,1,173,1,173,
        1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,3,173,3464,
        8,173,1,173,1,173,3,173,3468,8,173,1,173,1,173,1,173,1,173,1,173,
        1,173,1,173,1,173,5,173,3478,8,173,10,173,12,173,3481,9,173,1,174,
        1,174,1,174,1,174,1,174,1,174,1,174,1,174,4,174,3491,8,174,11,174,
        12,174,3492,3,174,3495,8,174,1,175,1,175,1,175,1,175,1,175,1,175,
        1,175,1,175,3,175,3505,8,175,1,176,1,176,1,177,1,177,1,178,1,178,
        1,179,1,179,1,180,1,180,1,180,3,180,3518,8,180,1,181,1,181,3,181,
        3522,8,181,1,182,1,182,1,182,4,182,3527,8,182,11,182,12,182,3528,
        1,183,1,183,1,183,3,183,3534,8,183,1,184,1,184,1,184,1,184,1,184,
        1,185,3,185,3542,8,185,1,185,1,185,3,185,3546,8,185,1,186,1,186,
        1,186,1,186,1,186,1,186,1,186,3,186,3555,8,186,1,187,1,187,1,187,
        3,187,3560,8,187,1,188,1,188,1,188,1,188,1,188,1,188,1,188,1,188,
        1,188,1,188,1,188,1,188,1,188,1,188,1,188,3,188,3577,8,188,1,188,
        1,188,3,188,3581,8,188,1,188,1,188,1,188,1,188,1,188,5,188,3588,
        8,188,10,188,12,188,3591,9,188,1,188,3,188,3594,8,188,3,188,3596,
        8,188,1,189,1,189,1,189,5,189,3601,8,189,10,189,12,189,3604,9,189,
        1,190,1,190,1,190,1,190,3,190,3610,8,190,1,190,3,190,3613,8,190,
        1,190,3,190,3616,8,190,1,191,1,191,1,191,5,191,3621,8,191,10,191,
        12,191,3624,9,191,1,192,1,192,1,192,1,192,3,192,3630,8,192,1,192,
        3,192,3633,8,192,1,193,1,193,1,193,5,193,3638,8,193,10,193,12,193,
        3641,9,193,1,194,1,194,1,194,1,194,1,194,3,194,3648,8,194,1,194,
        3,194,3651,8,194,1,195,1,195,1,195,1,195,1,195,1,196,1,196,1,196,
        1,196,5,196,3662,8,196,10,196,12,196,3665,9,196,1,197,1,197,1,197,
        1,197,1,198,1,198,1,198,1,198,1,198,1,198,1,198,1,198,1,198,1,198,
        1,198,5,198,3682,8,198,10,198,12,198,3685,9,198,1,198,1,198,1,198,
        1,198,1,198,5,198,3692,8,198,10,198,12,198,3695,9,198,3,198,3697,
        8,198,1,198,1,198,1,198,1,198,1,198,5,198,3704,8,198,10,198,12,198,
        3707,9,198,3,198,3709,8,198,3,198,3711,8,198,1,198,3,198,3714,8,
        198,1,198,3,198,3717,8,198,1,199,1,199,1,199,1,199,1,199,1,199,1,
        199,1,199,1,199,1,199,1,199,1,199,1,199,1,199,1,199,1,199,3,199,
        3735,8,199,1,200,1,200,1,200,1,200,1,200,1,200,1,200,3,200,3744,
        8,200,1,201,1,201,1,201,5,201,3749,8,201,10,201,12,201,3752,9,201,
        1,202,1,202,1,202,1,202,3,202,3758,8,202,1,203,1,203,1,203,5,203,
        3763,8,203,10,203,12,203,3766,9,203,1,204,1,204,1,205,1,205,4,205,
        3772,8,205,11,205,12,205,3773,1,206,1,206,3,206,3778,8,206,1,207,
        1,207,1,207,3,207,3783,8,207,1,208,1,208,1,209,3,209,3788,8,209,
        1,209,1,209,3,209,3792,8,209,1,209,1,209,3,209,3796,8,209,1,209,
        1,209,3,209,3800,8,209,1,209,1,209,3,209,3804,8,209,1,209,1,209,
        3,209,3808,8,209,1,209,1,209,3,209,3812,8,209,1,209,1,209,3,209,
        3816,8,209,1,209,1,209,3,209,3820,8,209,1,209,3,209,3823,8,209,1,
        210,1,210,1,210,1,210,1,210,1,210,1,210,3,210,3832,8,210,1,211,1,
        211,1,212,1,212,1,213,1,213,1,213,5,1758,1820,1830,1837,1845,5,94,
        230,340,344,346,214,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,
        34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,
        78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,
        116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,
        148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,
        180,182,184,186,188,190,192,194,196,198,200,202,204,206,208,210,
        212,214,216,218,220,222,224,226,228,230,232,234,236,238,240,242,
        244,246,248,250,252,254,256,258,260,262,264,266,268,270,272,274,
        276,278,280,282,284,286,288,290,292,294,296,298,300,302,304,306,
        308,310,312,314,316,318,320,322,324,326,328,330,332,334,336,338,
        340,342,344,346,348,350,352,354,356,358,360,362,364,366,368,370,
        372,374,376,378,380,382,384,386,388,390,392,394,396,398,400,402,
        404,406,408,410,412,414,416,418,420,422,424,426,0,53,2,0,55,55,60,
        60,1,0,195,196,1,0,243,244,2,0,135,135,168,168,3,0,36,36,210,210,
        275,275,1,0,37,39,2,0,2,2,305,305,2,0,329,329,331,331,1,0,19,21,
        1,0,314,317,2,0,64,64,110,110,2,0,315,315,320,320,3,0,10,11,130,
        130,282,282,2,0,12,12,195,195,2,0,106,106,221,221,2,0,73,73,235,
        235,2,0,104,104,191,191,2,0,141,141,154,154,1,0,84,85,2,0,268,268,
        298,298,2,0,56,56,76,76,5,0,81,81,93,93,127,127,140,140,182,182,
        1,0,110,111,2,0,127,127,140,140,2,0,195,195,325,325,2,0,53,53,176,
        176,3,0,103,103,190,190,245,245,4,0,122,122,161,161,254,254,288,
        288,3,0,122,122,254,254,288,288,2,0,55,55,115,115,3,0,55,55,60,60,
        258,258,3,0,130,130,282,282,290,290,2,0,314,315,320,320,1,0,316,
        319,2,0,314,315,323,323,2,0,98,98,100,100,1,0,266,267,2,0,1,1,141,
        141,2,0,1,1,137,137,3,0,68,68,171,171,277,277,1,0,305,306,1,0,314,
        324,4,0,58,58,154,154,194,194,202,202,2,0,130,130,282,282,1,0,314,
        315,2,0,116,116,211,211,2,0,203,203,259,259,2,0,136,136,218,218,
        1,0,330,331,2,0,117,117,253,253,51,0,53,54,56,57,61,62,64,65,67,
        67,69,73,76,76,78,81,83,83,85,91,93,93,96,97,102,104,106,114,116,
        117,121,121,123,129,132,132,134,136,139,140,143,145,148,148,151,
        153,155,156,158,160,162,162,165,165,167,170,173,186,189,191,193,
        193,196,197,200,201,204,204,206,207,209,218,220,228,230,236,238,
        245,249,251,253,253,255,257,259,267,269,273,276,276,278,283,285,
        287,291,294,297,299,302,302,319,319,15,0,59,59,95,95,122,122,142,
        142,157,157,161,161,166,166,172,172,192,192,198,198,237,237,248,
        248,254,254,288,288,296,296,17,0,53,58,60,94,96,121,123,141,143,
        156,158,160,162,165,167,171,173,191,193,197,199,236,238,247,249,
        253,255,287,289,295,297,304,319,319,4393,0,429,1,0,0,0,2,435,1,0,
        0,0,4,444,1,0,0,0,6,447,1,0,0,0,8,473,1,0,0,0,10,475,1,0,0,0,12,
        487,1,0,0,0,14,496,1,0,0,0,16,516,1,0,0,0,18,523,1,0,0,0,20,530,
        1,0,0,0,22,541,1,0,0,0,24,554,1,0,0,0,26,561,1,0,0,0,28,574,1,0,
        0,0,30,592,1,0,0,0,32,605,1,0,0,0,34,608,1,0,0,0,36,616,1,0,0,0,
        38,628,1,0,0,0,40,665,1,0,0,0,42,667,1,0,0,0,44,685,1,0,0,0,46,702,
        1,0,0,0,48,713,1,0,0,0,50,718,1,0,0,0,52,722,1,0,0,0,54,724,1,0,
        0,0,56,726,1,0,0,0,58,728,1,0,0,0,60,774,1,0,0,0,62,776,1,0,0,0,
        64,793,1,0,0,0,66,795,1,0,0,0,68,813,1,0,0,0,70,815,1,0,0,0,72,827,
        1,0,0,0,74,829,1,0,0,0,76,836,1,0,0,0,78,839,1,0,0,0,80,841,1,0,
        0,0,82,850,1,0,0,0,84,859,1,0,0,0,86,871,1,0,0,0,88,881,1,0,0,0,
        90,906,1,0,0,0,92,908,1,0,0,0,94,916,1,0,0,0,96,936,1,0,0,0,98,944,
        1,0,0,0,100,946,1,0,0,0,102,954,1,0,0,0,104,962,1,0,0,0,106,966,
        1,0,0,0,108,968,1,0,0,0,110,976,1,0,0,0,112,992,1,0,0,0,114,1005,
        1,0,0,0,116,1007,1,0,0,0,118,1015,1,0,0,0,120,1019,1,0,0,0,122,1036,
        1,0,0,0,124,1038,1,0,0,0,126,1042,1,0,0,0,128,1062,1,0,0,0,130,1064,
        1,0,0,0,132,1072,1,0,0,0,134,1078,1,0,0,0,136,1096,1,0,0,0,138,1104,
        1,0,0,0,140,1106,1,0,0,0,142,1108,1,0,0,0,144,1110,1,0,0,0,146,1112,
        1,0,0,0,148,1114,1,0,0,0,150,1116,1,0,0,0,152,1125,1,0,0,0,154,1128,
        1,0,0,0,156,1131,1,0,0,0,158,1134,1,0,0,0,160,1137,1,0,0,0,162,1140,
        1,0,0,0,164,1848,1,0,0,0,166,2018,1,0,0,0,168,2020,1,0,0,0,170,2037,
        1,0,0,0,172,2043,1,0,0,0,174,2055,1,0,0,0,176,2068,1,0,0,0,178,2071,
        1,0,0,0,180,2075,1,0,0,0,182,2138,1,0,0,0,184,2140,1,0,0,0,186,2144,
        1,0,0,0,188,2156,1,0,0,0,190,2161,1,0,0,0,192,2168,1,0,0,0,194,2170,
        1,0,0,0,196,2178,1,0,0,0,198,2187,1,0,0,0,200,2198,1,0,0,0,202,2213,
        1,0,0,0,204,2216,1,0,0,0,206,2227,1,0,0,0,208,2243,1,0,0,0,210,2249,
        1,0,0,0,212,2251,1,0,0,0,214,2262,1,0,0,0,216,2279,1,0,0,0,218,2286,
        1,0,0,0,220,2288,1,0,0,0,222,2294,1,0,0,0,224,2348,1,0,0,0,226,2360,
        1,0,0,0,228,2408,1,0,0,0,230,2414,1,0,0,0,232,2444,1,0,0,0,234,2446,
        1,0,0,0,236,2454,1,0,0,0,238,2487,1,0,0,0,240,2514,1,0,0,0,242,2517,
        1,0,0,0,244,2529,1,0,0,0,246,2561,1,0,0,0,248,2573,1,0,0,0,250,2576,
        1,0,0,0,252,2585,1,0,0,0,254,2602,1,0,0,0,256,2622,1,0,0,0,258,2624,
        1,0,0,0,260,2632,1,0,0,0,262,2636,1,0,0,0,264,2639,1,0,0,0,266,2642,
        1,0,0,0,268,2668,1,0,0,0,270,2670,1,0,0,0,272,2732,1,0,0,0,274,2747,
        1,0,0,0,276,2749,1,0,0,0,278,2779,1,0,0,0,280,2781,1,0,0,0,282,2788,
        1,0,0,0,284,2820,1,0,0,0,286,2822,1,0,0,0,288,2840,1,0,0,0,290,2866,
        1,0,0,0,292,2872,1,0,0,0,294,2874,1,0,0,0,296,2905,1,0,0,0,298,2907,
        1,0,0,0,300,2911,1,0,0,0,302,2919,1,0,0,0,304,2930,1,0,0,0,306,2934,
        1,0,0,0,308,2945,1,0,0,0,310,2976,1,0,0,0,312,2978,1,0,0,0,314,2989,
        1,0,0,0,316,3011,1,0,0,0,318,3062,1,0,0,0,320,3064,1,0,0,0,322,3072,
        1,0,0,0,324,3083,1,0,0,0,326,3090,1,0,0,0,328,3094,1,0,0,0,330,3104,
        1,0,0,0,332,3112,1,0,0,0,334,3136,1,0,0,0,336,3140,1,0,0,0,338,3142,
        1,0,0,0,340,3156,1,0,0,0,342,3251,1,0,0,0,344,3257,1,0,0,0,346,3467,
        1,0,0,0,348,3494,1,0,0,0,350,3504,1,0,0,0,352,3506,1,0,0,0,354,3508,
        1,0,0,0,356,3510,1,0,0,0,358,3512,1,0,0,0,360,3514,1,0,0,0,362,3519,
        1,0,0,0,364,3526,1,0,0,0,366,3530,1,0,0,0,368,3535,1,0,0,0,370,3545,
        1,0,0,0,372,3554,1,0,0,0,374,3559,1,0,0,0,376,3595,1,0,0,0,378,3597,
        1,0,0,0,380,3605,1,0,0,0,382,3617,1,0,0,0,384,3625,1,0,0,0,386,3634,
        1,0,0,0,388,3642,1,0,0,0,390,3652,1,0,0,0,392,3657,1,0,0,0,394,3666,
        1,0,0,0,396,3716,1,0,0,0,398,3734,1,0,0,0,400,3743,1,0,0,0,402,3745,
        1,0,0,0,404,3757,1,0,0,0,406,3759,1,0,0,0,408,3767,1,0,0,0,410,3771,
        1,0,0,0,412,3777,1,0,0,0,414,3782,1,0,0,0,416,3784,1,0,0,0,418,3822,
        1,0,0,0,420,3831,1,0,0,0,422,3833,1,0,0,0,424,3835,1,0,0,0,426,3837,
        1,0,0,0,428,430,3,4,2,0,429,428,1,0,0,0,430,431,1,0,0,0,431,429,
        1,0,0,0,431,432,1,0,0,0,432,433,1,0,0,0,433,434,5,0,0,1,434,1,1,
        0,0,0,435,436,3,4,2,0,436,437,5,0,0,1,437,3,1,0,0,0,438,445,3,6,
        3,0,439,445,3,44,22,0,440,445,3,38,19,0,441,445,3,40,20,0,442,445,
        3,42,21,0,443,445,3,46,23,0,444,438,1,0,0,0,444,439,1,0,0,0,444,
        440,1,0,0,0,444,441,1,0,0,0,444,442,1,0,0,0,444,443,1,0,0,0,445,
        5,1,0,0,0,446,448,3,76,38,0,447,446,1,0,0,0,447,448,1,0,0,0,448,
        449,1,0,0,0,449,451,3,180,90,0,450,452,3,60,30,0,451,450,1,0,0,0,
        451,452,1,0,0,0,452,454,1,0,0,0,453,455,3,66,33,0,454,453,1,0,0,
        0,454,455,1,0,0,0,455,457,1,0,0,0,456,458,3,64,32,0,457,456,1,0,
        0,0,457,458,1,0,0,0,458,7,1,0,0,0,459,474,3,10,5,0,460,474,3,12,
        6,0,461,474,3,30,15,0,462,474,3,32,16,0,463,474,3,34,17,0,464,474,
        3,36,18,0,465,474,3,14,7,0,466,474,3,16,8,0,467,474,3,18,9,0,468,
        474,3,20,10,0,469,474,3,22,11,0,470,474,3,24,12,0,471,474,3,26,13,
        0,472,474,3,28,14,0,473,459,1,0,0,0,473,460,1,0,0,0,473,461,1,0,
        0,0,473,462,1,0,0,0,473,463,1,0,0,0,473,464,1,0,0,0,473,465,1,0,
        0,0,473,466,1,0,0,0,473,467,1,0,0,0,473,468,1,0,0,0,473,469,1,0,
        0,0,473,470,1,0,0,0,473,471,1,0,0,0,473,472,1,0,0,0,474,9,1,0,0,
        0,475,477,5,280,0,0,476,478,3,68,34,0,477,476,1,0,0,0,477,478,1,
        0,0,0,478,480,1,0,0,0,479,481,3,90,45,0,480,479,1,0,0,0,480,481,
        1,0,0,0,481,482,1,0,0,0,482,485,3,80,40,0,483,484,5,50,0,0,484,486,
        3,84,42,0,485,483,1,0,0,0,485,486,1,0,0,0,486,11,1,0,0,0,487,489,
        5,26,0,0,488,490,3,68,34,0,489,488,1,0,0,0,489,490,1,0,0,0,490,492,
        1,0,0,0,491,493,3,90,45,0,492,491,1,0,0,0,492,493,1,0,0,0,493,494,
        1,0,0,0,494,495,3,82,41,0,495,13,1,0,0,0,496,497,5,35,0,0,497,498,
        5,58,0,0,498,500,5,294,0,0,499,501,3,72,36,0,500,499,1,0,0,0,500,
        501,1,0,0,0,501,503,1,0,0,0,502,504,3,90,45,0,503,502,1,0,0,0,503,
        504,1,0,0,0,504,505,1,0,0,0,505,507,3,54,27,0,506,508,3,50,25,0,
        507,506,1,0,0,0,507,508,1,0,0,0,508,510,1,0,0,0,509,511,3,56,28,
        0,510,509,1,0,0,0,510,511,1,0,0,0,511,512,1,0,0,0,512,514,3,58,29,
        0,513,515,3,98,49,0,514,513,1,0,0,0,514,515,1,0,0,0,515,15,1,0,0,
        0,516,517,5,231,0,0,517,518,5,85,0,0,518,521,3,108,54,0,519,520,
        5,141,0,0,520,522,3,72,36,0,521,519,1,0,0,0,521,522,1,0,0,0,522,
        17,1,0,0,0,523,524,5,56,0,0,524,525,5,85,0,0,525,528,3,116,58,0,
        526,527,5,141,0,0,527,529,3,72,36,0,528,526,1,0,0,0,528,529,1,0,
        0,0,529,19,1,0,0,0,530,531,5,117,0,0,531,532,5,85,0,0,532,535,3,
        100,50,0,533,534,5,151,0,0,534,536,5,124,0,0,535,533,1,0,0,0,535,
        536,1,0,0,0,536,539,1,0,0,0,537,538,5,141,0,0,538,540,3,72,36,0,
        539,537,1,0,0,0,539,540,1,0,0,0,540,21,1,0,0,0,541,542,5,117,0,0,
        542,543,5,244,0,0,543,544,5,151,0,0,544,545,7,0,0,0,545,548,7,1,
        0,0,546,547,5,198,0,0,547,549,3,100,50,0,548,546,1,0,0,0,548,549,
        1,0,0,0,549,552,1,0,0,0,550,551,5,141,0,0,551,553,3,72,36,0,552,
        550,1,0,0,0,552,553,1,0,0,0,553,23,1,0,0,0,554,555,5,17,0,0,555,
        556,7,1,0,0,556,559,3,98,49,0,557,558,5,141,0,0,558,560,3,72,36,
        0,559,557,1,0,0,0,559,560,1,0,0,0,560,25,1,0,0,0,561,563,5,47,0,
        0,562,564,5,233,0,0,563,562,1,0,0,0,563,564,1,0,0,0,564,565,1,0,
        0,0,565,568,3,86,43,0,566,567,5,48,0,0,567,569,5,329,0,0,568,566,
        1,0,0,0,568,569,1,0,0,0,569,572,1,0,0,0,570,571,5,141,0,0,571,573,
        3,72,36,0,572,570,1,0,0,0,572,573,1,0,0,0,573,27,1,0,0,0,574,577,
        5,18,0,0,575,576,5,329,0,0,576,578,7,2,0,0,577,575,1,0,0,0,577,578,
        1,0,0,0,578,581,1,0,0,0,579,580,5,141,0,0,580,582,3,72,36,0,581,
        579,1,0,0,0,581,582,1,0,0,0,582,586,1,0,0,0,583,587,3,90,45,0,584,
        585,5,22,0,0,585,587,3,102,51,0,586,583,1,0,0,0,586,584,1,0,0,0,
        586,587,1,0,0,0,587,590,1,0,0,0,588,589,7,1,0,0,589,591,7,3,0,0,
        590,588,1,0,0,0,590,591,1,0,0,0,591,29,1,0,0,0,592,593,5,32,0,0,
        593,595,3,68,34,0,594,596,3,88,44,0,595,594,1,0,0,0,595,596,1,0,
        0,0,596,599,1,0,0,0,597,598,5,71,0,0,598,600,3,100,50,0,599,597,
        1,0,0,0,599,600,1,0,0,0,600,603,1,0,0,0,601,602,5,22,0,0,602,604,
        3,102,51,0,603,601,1,0,0,0,603,604,1,0,0,0,604,31,1,0,0,0,605,606,
        5,94,0,0,606,607,3,82,41,0,607,33,1,0,0,0,608,610,5,94,0,0,609,611,
        5,102,0,0,610,609,1,0,0,0,610,611,1,0,0,0,611,612,1,0,0,0,612,613,
        3,136,68,0,613,614,5,245,0,0,614,615,3,116,58,0,615,35,1,0,0,0,616,
        618,5,177,0,0,617,619,3,56,28,0,618,617,1,0,0,0,618,619,1,0,0,0,
        619,620,1,0,0,0,620,622,3,58,29,0,621,623,3,98,49,0,622,621,1,0,
        0,0,622,623,1,0,0,0,623,626,1,0,0,0,624,625,5,85,0,0,625,627,3,52,
        26,0,626,624,1,0,0,0,626,627,1,0,0,0,627,37,1,0,0,0,628,630,5,27,
        0,0,629,631,3,68,34,0,630,629,1,0,0,0,630,631,1,0,0,0,631,633,1,
        0,0,0,632,634,3,90,45,0,633,632,1,0,0,0,633,634,1,0,0,0,634,635,
        1,0,0,0,635,636,5,296,0,0,636,638,3,84,42,0,637,639,3,98,49,0,638,
        637,1,0,0,0,638,639,1,0,0,0,639,39,1,0,0,0,640,641,5,33,0,0,641,
        642,5,329,0,0,642,645,7,2,0,0,643,644,5,141,0,0,644,646,3,68,34,
        0,645,643,1,0,0,0,645,646,1,0,0,0,646,648,1,0,0,0,647,649,5,29,0,
        0,648,647,1,0,0,0,648,649,1,0,0,0,649,652,1,0,0,0,650,651,5,34,0,
        0,651,653,5,325,0,0,652,650,1,0,0,0,652,653,1,0,0,0,653,666,1,0,
        0,0,654,656,5,33,0,0,655,657,3,68,34,0,656,655,1,0,0,0,656,657,1,
        0,0,0,657,659,1,0,0,0,658,660,5,29,0,0,659,658,1,0,0,0,659,660,1,
        0,0,0,660,663,1,0,0,0,661,662,5,34,0,0,662,664,5,325,0,0,663,661,
        1,0,0,0,663,664,1,0,0,0,664,666,1,0,0,0,665,640,1,0,0,0,665,654,
        1,0,0,0,666,41,1,0,0,0,667,669,5,35,0,0,668,670,3,72,36,0,669,668,
        1,0,0,0,669,670,1,0,0,0,670,672,1,0,0,0,671,673,3,90,45,0,672,671,
        1,0,0,0,672,673,1,0,0,0,673,674,1,0,0,0,674,676,3,54,27,0,675,677,
        3,50,25,0,676,675,1,0,0,0,676,677,1,0,0,0,677,679,1,0,0,0,678,680,
        3,56,28,0,679,678,1,0,0,0,679,680,1,0,0,0,680,681,1,0,0,0,681,683,
        3,58,29,0,682,684,3,98,49,0,683,682,1,0,0,0,683,684,1,0,0,0,684,
        43,1,0,0,0,685,687,5,28,0,0,686,688,3,68,34,0,687,686,1,0,0,0,687,
        688,1,0,0,0,688,690,1,0,0,0,689,691,3,90,45,0,690,689,1,0,0,0,690,
        691,1,0,0,0,691,692,1,0,0,0,692,693,5,296,0,0,693,695,3,84,42,0,
        694,696,3,98,49,0,695,694,1,0,0,0,695,696,1,0,0,0,696,699,1,0,0,
        0,697,698,5,50,0,0,698,700,3,84,42,0,699,697,1,0,0,0,699,700,1,0,
        0,0,700,45,1,0,0,0,701,703,3,76,38,0,702,701,1,0,0,0,702,703,1,0,
        0,0,703,704,1,0,0,0,704,706,5,49,0,0,705,707,3,68,34,0,706,705,1,
        0,0,0,706,707,1,0,0,0,707,708,1,0,0,0,708,709,5,296,0,0,709,711,
        3,84,42,0,710,712,3,98,49,0,711,710,1,0,0,0,711,712,1,0,0,0,712,
        47,1,0,0,0,713,714,5,46,0,0,714,716,3,84,42,0,715,717,3,98,49,0,
        716,715,1,0,0,0,716,717,1,0,0,0,717,49,1,0,0,0,718,719,5,40,0,0,
        719,51,1,0,0,0,720,723,3,116,58,0,721,723,3,100,50,0,722,720,1,0,
        0,0,722,721,1,0,0,0,723,53,1,0,0,0,724,725,7,4,0,0,725,55,1,0,0,
        0,726,727,7,5,0,0,727,57,1,0,0,0,728,729,5,325,0,0,729,59,1,0,0,
        0,730,732,5,170,0,0,731,730,1,0,0,0,731,732,1,0,0,0,732,736,1,0,
        0,0,733,737,5,23,0,0,734,735,5,42,0,0,735,737,5,41,0,0,736,733,1,
        0,0,0,736,734,1,0,0,0,737,739,1,0,0,0,738,740,3,98,49,0,739,738,
        1,0,0,0,739,740,1,0,0,0,740,775,1,0,0,0,741,743,5,170,0,0,742,741,
        1,0,0,0,742,743,1,0,0,0,743,745,1,0,0,0,744,746,5,43,0,0,745,744,
        1,0,0,0,745,746,1,0,0,0,746,747,1,0,0,0,747,749,5,41,0,0,748,750,
        3,90,45,0,749,748,1,0,0,0,749,750,1,0,0,0,750,752,1,0,0,0,751,753,
        3,50,25,0,752,751,1,0,0,0,752,753,1,0,0,0,753,755,1,0,0,0,754,756,
        3,98,49,0,755,754,1,0,0,0,755,756,1,0,0,0,756,775,1,0,0,0,757,759,
        5,170,0,0,758,757,1,0,0,0,758,759,1,0,0,0,759,760,1,0,0,0,760,761,
        5,44,0,0,761,763,5,41,0,0,762,764,3,62,31,0,763,762,1,0,0,0,763,
        764,1,0,0,0,764,766,1,0,0,0,765,767,3,90,45,0,766,765,1,0,0,0,766,
        767,1,0,0,0,767,769,1,0,0,0,768,770,3,50,25,0,769,768,1,0,0,0,769,
        770,1,0,0,0,770,772,1,0,0,0,771,773,3,98,49,0,772,771,1,0,0,0,772,
        773,1,0,0,0,773,775,1,0,0,0,774,731,1,0,0,0,774,742,1,0,0,0,774,
        758,1,0,0,0,775,61,1,0,0,0,776,777,5,325,0,0,777,63,1,0,0,0,778,
        779,5,45,0,0,779,782,5,52,0,0,780,781,5,63,0,0,781,783,3,148,74,
        0,782,780,1,0,0,0,782,783,1,0,0,0,783,794,1,0,0,0,784,786,5,45,0,
        0,785,787,5,178,0,0,786,785,1,0,0,0,786,787,1,0,0,0,787,788,1,0,
        0,0,788,791,5,51,0,0,789,790,5,63,0,0,790,792,3,148,74,0,791,789,
        1,0,0,0,791,792,1,0,0,0,792,794,1,0,0,0,793,778,1,0,0,0,793,784,
        1,0,0,0,794,65,1,0,0,0,795,796,5,24,0,0,796,67,1,0,0,0,797,802,3,
        72,36,0,798,799,5,1,0,0,799,801,3,72,36,0,800,798,1,0,0,0,801,804,
        1,0,0,0,802,800,1,0,0,0,802,803,1,0,0,0,803,814,1,0,0,0,804,802,
        1,0,0,0,805,810,3,70,35,0,806,807,5,1,0,0,807,809,3,70,35,0,808,
        806,1,0,0,0,809,812,1,0,0,0,810,808,1,0,0,0,810,811,1,0,0,0,811,
        814,1,0,0,0,812,810,1,0,0,0,813,797,1,0,0,0,813,805,1,0,0,0,814,
        69,1,0,0,0,815,816,3,148,74,0,816,817,7,6,0,0,817,818,3,72,36,0,
        818,71,1,0,0,0,819,821,3,148,74,0,820,822,3,74,37,0,821,820,1,0,
        0,0,821,822,1,0,0,0,822,828,1,0,0,0,823,824,5,3,0,0,824,825,3,6,
        3,0,825,826,5,4,0,0,826,828,1,0,0,0,827,819,1,0,0,0,827,823,1,0,
        0,0,828,73,1,0,0,0,829,832,5,5,0,0,830,833,5,329,0,0,831,833,3,148,
        74,0,832,830,1,0,0,0,832,831,1,0,0,0,833,834,1,0,0,0,834,835,5,6,
        0,0,835,75,1,0,0,0,836,837,3,148,74,0,837,838,3,78,39,0,838,77,1,
        0,0,0,839,840,5,305,0,0,840,79,1,0,0,0,841,842,5,296,0,0,842,844,
        3,84,42,0,843,845,3,98,49,0,844,843,1,0,0,0,844,845,1,0,0,0,845,
        848,1,0,0,0,846,847,5,245,0,0,847,849,3,110,55,0,848,846,1,0,0,0,
        848,849,1,0,0,0,849,81,1,0,0,0,850,851,5,296,0,0,851,853,3,84,42,
        0,852,854,3,98,49,0,853,852,1,0,0,0,853,854,1,0,0,0,854,857,1,0,
        0,0,855,856,5,245,0,0,856,858,3,116,58,0,857,855,1,0,0,0,857,858,
        1,0,0,0,858,83,1,0,0,0,859,864,3,148,74,0,860,861,5,7,0,0,861,863,
        3,148,74,0,862,860,1,0,0,0,863,866,1,0,0,0,864,862,1,0,0,0,864,865,
        1,0,0,0,865,85,1,0,0,0,866,864,1,0,0,0,867,868,7,7,0,0,868,872,5,
        214,0,0,869,870,5,329,0,0,870,872,5,244,0,0,871,867,1,0,0,0,871,
        869,1,0,0,0,872,87,1,0,0,0,873,882,5,95,0,0,874,882,5,157,0,0,875,
        876,5,172,0,0,876,882,5,205,0,0,877,878,5,237,0,0,878,882,5,205,
        0,0,879,880,5,142,0,0,880,882,5,205,0,0,881,873,1,0,0,0,881,874,
        1,0,0,0,881,875,1,0,0,0,881,877,1,0,0,0,881,879,1,0,0,0,882,89,1,
        0,0,0,883,885,3,92,46,0,884,883,1,0,0,0,884,885,1,0,0,0,885,886,
        1,0,0,0,886,887,5,31,0,0,887,890,3,94,47,0,888,889,5,71,0,0,889,
        891,3,100,50,0,890,888,1,0,0,0,890,891,1,0,0,0,891,894,1,0,0,0,892,
        893,5,22,0,0,893,895,3,102,51,0,894,892,1,0,0,0,894,895,1,0,0,0,
        895,907,1,0,0,0,896,898,3,92,46,0,897,896,1,0,0,0,897,898,1,0,0,
        0,898,899,1,0,0,0,899,900,5,31,0,0,900,901,5,71,0,0,901,904,3,100,
        50,0,902,903,5,22,0,0,903,905,3,102,51,0,904,902,1,0,0,0,904,905,
        1,0,0,0,905,907,1,0,0,0,906,884,1,0,0,0,906,897,1,0,0,0,907,91,1,
        0,0,0,908,909,7,8,0,0,909,93,1,0,0,0,910,911,6,47,-1,0,911,917,3,
        96,48,0,912,913,5,3,0,0,913,914,3,94,47,0,914,915,5,4,0,0,915,917,
        1,0,0,0,916,910,1,0,0,0,916,912,1,0,0,0,917,923,1,0,0,0,918,919,
        10,1,0,0,919,920,7,9,0,0,920,922,3,94,47,2,921,918,1,0,0,0,922,925,
        1,0,0,0,923,921,1,0,0,0,923,924,1,0,0,0,924,95,1,0,0,0,925,923,1,
        0,0,0,926,928,5,315,0,0,927,926,1,0,0,0,927,928,1,0,0,0,928,929,
        1,0,0,0,929,937,5,331,0,0,930,932,5,315,0,0,931,930,1,0,0,0,931,
        932,1,0,0,0,932,933,1,0,0,0,933,937,5,329,0,0,934,937,5,29,0,0,935,
        937,5,30,0,0,936,927,1,0,0,0,936,931,1,0,0,0,936,934,1,0,0,0,936,
        935,1,0,0,0,937,97,1,0,0,0,938,939,5,25,0,0,939,945,3,130,65,0,940,
        942,5,25,0,0,941,940,1,0,0,0,941,942,1,0,0,0,942,943,1,0,0,0,943,
        945,3,128,64,0,944,938,1,0,0,0,944,941,1,0,0,0,945,99,1,0,0,0,946,
        951,3,106,53,0,947,948,5,1,0,0,948,950,3,106,53,0,949,947,1,0,0,
        0,950,953,1,0,0,0,951,949,1,0,0,0,951,952,1,0,0,0,952,101,1,0,0,
        0,953,951,1,0,0,0,954,959,3,104,52,0,955,956,5,1,0,0,956,958,3,104,
        52,0,957,955,1,0,0,0,958,961,1,0,0,0,959,957,1,0,0,0,959,960,1,0,
        0,0,960,103,1,0,0,0,961,959,1,0,0,0,962,964,3,106,53,0,963,965,7,
        10,0,0,964,963,1,0,0,0,964,965,1,0,0,0,965,105,1,0,0,0,966,967,3,
        148,74,0,967,107,1,0,0,0,968,973,3,124,62,0,969,970,5,1,0,0,970,
        972,3,124,62,0,971,969,1,0,0,0,972,975,1,0,0,0,973,971,1,0,0,0,973,
        974,1,0,0,0,974,109,1,0,0,0,975,973,1,0,0,0,976,981,3,112,56,0,977,
        978,5,1,0,0,978,980,3,112,56,0,979,977,1,0,0,0,980,983,1,0,0,0,981,
        979,1,0,0,0,981,982,1,0,0,0,982,987,1,0,0,0,983,981,1,0,0,0,984,
        986,3,114,57,0,985,984,1,0,0,0,986,989,1,0,0,0,987,985,1,0,0,0,987,
        988,1,0,0,0,988,111,1,0,0,0,989,987,1,0,0,0,990,993,3,118,59,0,991,
        993,5,316,0,0,992,990,1,0,0,0,992,991,1,0,0,0,993,113,1,0,0,0,994,
        995,7,11,0,0,995,1000,3,120,60,0,996,997,5,1,0,0,997,999,3,120,60,
        0,998,996,1,0,0,0,999,1002,1,0,0,0,1000,998,1,0,0,0,1000,1001,1,
        0,0,0,1001,1006,1,0,0,0,1002,1000,1,0,0,0,1003,1004,5,314,0,0,1004,
        1006,3,116,58,0,1005,994,1,0,0,0,1005,1003,1,0,0,0,1006,115,1,0,
        0,0,1007,1012,3,118,59,0,1008,1009,5,1,0,0,1009,1011,3,118,59,0,
        1010,1008,1,0,0,0,1011,1014,1,0,0,0,1012,1010,1,0,0,0,1012,1013,
        1,0,0,0,1013,117,1,0,0,0,1014,1012,1,0,0,0,1015,1016,3,120,60,0,
        1016,1017,5,2,0,0,1017,1018,3,122,61,0,1018,119,1,0,0,0,1019,1020,
        3,148,74,0,1020,121,1,0,0,0,1021,1037,3,148,74,0,1022,1023,5,5,0,
        0,1023,1024,3,122,61,0,1024,1025,5,6,0,0,1025,1037,1,0,0,0,1026,
        1027,5,8,0,0,1027,1028,3,116,58,0,1028,1029,5,9,0,0,1029,1037,1,
        0,0,0,1030,1031,5,310,0,0,1031,1032,3,122,61,0,1032,1033,5,1,0,0,
        1033,1034,3,122,61,0,1034,1035,5,312,0,0,1035,1037,1,0,0,0,1036,
        1021,1,0,0,0,1036,1022,1,0,0,0,1036,1026,1,0,0,0,1036,1030,1,0,0,
        0,1037,123,1,0,0,0,1038,1039,3,120,60,0,1039,1040,5,2,0,0,1040,1041,
        3,120,60,0,1041,125,1,0,0,0,1042,1043,3,138,69,0,1043,127,1,0,0,
        0,1044,1045,5,8,0,0,1045,1047,3,130,65,0,1046,1048,5,1,0,0,1047,
        1046,1,0,0,0,1047,1048,1,0,0,0,1048,1049,1,0,0,0,1049,1050,5,9,0,
        0,1050,1063,1,0,0,0,1051,1052,5,8,0,0,1052,1063,5,9,0,0,1053,1054,
        5,3,0,0,1054,1056,3,130,65,0,1055,1057,5,1,0,0,1056,1055,1,0,0,0,
        1056,1057,1,0,0,0,1057,1058,1,0,0,0,1058,1059,5,4,0,0,1059,1063,
        1,0,0,0,1060,1061,5,3,0,0,1061,1063,5,4,0,0,1062,1044,1,0,0,0,1062,
        1051,1,0,0,0,1062,1053,1,0,0,0,1062,1060,1,0,0,0,1063,129,1,0,0,
        0,1064,1069,3,132,66,0,1065,1066,5,1,0,0,1066,1068,3,132,66,0,1067,
        1065,1,0,0,0,1068,1071,1,0,0,0,1069,1067,1,0,0,0,1069,1070,1,0,0,
        0,1070,131,1,0,0,0,1071,1069,1,0,0,0,1072,1073,3,134,67,0,1073,1074,
        7,6,0,0,1074,1075,3,138,69,0,1075,133,1,0,0,0,1076,1079,3,148,74,
        0,1077,1079,3,142,71,0,1078,1076,1,0,0,0,1078,1077,1,0,0,0,1079,
        135,1,0,0,0,1080,1081,5,5,0,0,1081,1086,3,138,69,0,1082,1083,5,1,
        0,0,1083,1085,3,138,69,0,1084,1082,1,0,0,0,1085,1088,1,0,0,0,1086,
        1084,1,0,0,0,1086,1087,1,0,0,0,1087,1090,1,0,0,0,1088,1086,1,0,0,
        0,1089,1091,5,1,0,0,1090,1089,1,0,0,0,1090,1091,1,0,0,0,1091,1092,
        1,0,0,0,1092,1093,5,6,0,0,1093,1097,1,0,0,0,1094,1095,5,5,0,0,1095,
        1097,5,6,0,0,1096,1080,1,0,0,0,1096,1094,1,0,0,0,1097,137,1,0,0,
        0,1098,1105,3,142,71,0,1099,1105,3,140,70,0,1100,1105,3,128,64,0,
        1101,1105,3,136,68,0,1102,1105,3,144,72,0,1103,1105,3,146,73,0,1104,
        1098,1,0,0,0,1104,1099,1,0,0,0,1104,1100,1,0,0,0,1104,1101,1,0,0,
        0,1104,1102,1,0,0,0,1104,1103,1,0,0,0,1105,139,1,0,0,0,1106,1107,
        3,418,209,0,1107,141,1,0,0,0,1108,1109,5,325,0,0,1109,143,1,0,0,
        0,1110,1111,7,12,0,0,1111,145,1,0,0,0,1112,1113,7,13,0,0,1113,147,
        1,0,0,0,1114,1115,3,412,206,0,1115,149,1,0,0,0,1116,1120,3,164,82,
        0,1117,1119,5,13,0,0,1118,1117,1,0,0,0,1119,1122,1,0,0,0,1120,1118,
        1,0,0,0,1120,1121,1,0,0,0,1121,1123,1,0,0,0,1122,1120,1,0,0,0,1123,
        1124,5,0,0,1,1124,151,1,0,0,0,1125,1126,3,328,164,0,1126,1127,5,
        0,0,1,1127,153,1,0,0,0,1128,1129,3,324,162,0,1129,1130,5,0,0,1,1130,
        155,1,0,0,0,1131,1132,3,322,161,0,1132,1133,5,0,0,1,1133,157,1,0,
        0,0,1134,1135,3,326,163,0,1135,1136,5,0,0,1,1136,159,1,0,0,0,1137,
        1138,3,376,188,0,1138,1139,5,0,0,1,1139,161,1,0,0,0,1140,1141,3,
        382,191,0,1141,1142,5,0,0,1,1142,163,1,0,0,0,1143,1849,3,180,90,
        0,1144,1146,3,196,98,0,1145,1144,1,0,0,0,1145,1146,1,0,0,0,1146,
        1147,1,0,0,0,1147,1849,3,224,112,0,1148,1150,5,294,0,0,1149,1151,
        5,190,0,0,1150,1149,1,0,0,0,1150,1151,1,0,0,0,1151,1152,1,0,0,0,
        1152,1849,3,322,161,0,1153,1154,5,94,0,0,1154,1158,3,190,95,0,1155,
        1156,5,151,0,0,1156,1157,5,194,0,0,1157,1159,5,124,0,0,1158,1155,
        1,0,0,0,1158,1159,1,0,0,0,1159,1160,1,0,0,0,1160,1168,3,322,161,
        0,1161,1167,3,178,89,0,1162,1167,3,176,88,0,1163,1164,5,303,0,0,
        1164,1165,7,14,0,0,1165,1167,3,204,102,0,1166,1161,1,0,0,0,1166,
        1162,1,0,0,0,1166,1163,1,0,0,0,1167,1170,1,0,0,0,1168,1166,1,0,0,
        0,1168,1169,1,0,0,0,1169,1849,1,0,0,0,1170,1168,1,0,0,0,1171,1172,
        5,56,0,0,1172,1173,3,190,95,0,1173,1174,3,322,161,0,1174,1175,5,
        253,0,0,1175,1176,7,14,0,0,1176,1177,3,204,102,0,1177,1849,1,0,0,
        0,1178,1179,5,56,0,0,1179,1180,3,190,95,0,1180,1181,3,322,161,0,
        1181,1182,5,253,0,0,1182,1183,3,176,88,0,1183,1849,1,0,0,0,1184,
        1185,5,117,0,0,1185,1188,3,190,95,0,1186,1187,5,151,0,0,1187,1189,
        5,124,0,0,1188,1186,1,0,0,0,1188,1189,1,0,0,0,1189,1190,1,0,0,0,
        1190,1192,3,322,161,0,1191,1193,7,15,0,0,1192,1191,1,0,0,0,1192,
        1193,1,0,0,0,1193,1849,1,0,0,0,1194,1195,5,256,0,0,1195,1198,7,16,
        0,0,1196,1197,7,17,0,0,1197,1199,3,322,161,0,1198,1196,1,0,0,0,1198,
        1199,1,0,0,0,1199,1204,1,0,0,0,1200,1202,5,173,0,0,1201,1200,1,0,
        0,0,1201,1202,1,0,0,0,1202,1203,1,0,0,0,1203,1205,5,325,0,0,1204,
        1201,1,0,0,0,1204,1205,1,0,0,0,1205,1849,1,0,0,0,1206,1211,3,168,
        84,0,1207,1208,5,3,0,0,1208,1209,3,382,191,0,1209,1210,5,4,0,0,1210,
        1212,1,0,0,0,1211,1207,1,0,0,0,1211,1212,1,0,0,0,1212,1213,1,0,0,
        0,1213,1214,3,200,100,0,1214,1219,3,202,101,0,1215,1217,5,63,0,0,
        1216,1215,1,0,0,0,1216,1217,1,0,0,0,1217,1218,1,0,0,0,1218,1220,
        3,180,90,0,1219,1216,1,0,0,0,1219,1220,1,0,0,0,1220,1849,1,0,0,0,
        1221,1226,3,168,84,0,1222,1223,5,3,0,0,1223,1224,3,382,191,0,1224,
        1225,5,4,0,0,1225,1227,1,0,0,0,1226,1222,1,0,0,0,1226,1227,1,0,0,
        0,1227,1249,1,0,0,0,1228,1248,3,178,89,0,1229,1230,5,212,0,0,1230,
        1231,5,71,0,0,1231,1232,5,3,0,0,1232,1233,3,382,191,0,1233,1234,
        5,4,0,0,1234,1239,1,0,0,0,1235,1236,5,212,0,0,1236,1237,5,71,0,0,
        1237,1239,3,298,149,0,1238,1229,1,0,0,0,1238,1235,1,0,0,0,1239,1248,
        1,0,0,0,1240,1248,3,172,86,0,1241,1248,3,174,87,0,1242,1248,3,318,
        159,0,1243,1248,3,216,108,0,1244,1248,3,176,88,0,1245,1246,5,271,
        0,0,1246,1248,3,204,102,0,1247,1228,1,0,0,0,1247,1238,1,0,0,0,1247,
        1240,1,0,0,0,1247,1241,1,0,0,0,1247,1242,1,0,0,0,1247,1243,1,0,0,
        0,1247,1244,1,0,0,0,1247,1245,1,0,0,0,1248,1251,1,0,0,0,1249,1247,
        1,0,0,0,1249,1250,1,0,0,0,1250,1256,1,0,0,0,1251,1249,1,0,0,0,1252,
        1254,5,63,0,0,1253,1252,1,0,0,0,1253,1254,1,0,0,0,1254,1255,1,0,
        0,0,1255,1257,3,180,90,0,1256,1253,1,0,0,0,1256,1257,1,0,0,0,1257,
        1849,1,0,0,0,1258,1259,5,94,0,0,1259,1263,5,268,0,0,1260,1261,5,
        151,0,0,1261,1262,5,194,0,0,1262,1264,5,124,0,0,1263,1260,1,0,0,
        0,1263,1264,1,0,0,0,1264,1265,1,0,0,0,1265,1266,3,324,162,0,1266,
        1267,5,173,0,0,1267,1276,3,324,162,0,1268,1275,3,200,100,0,1269,
        1275,3,318,159,0,1270,1275,3,216,108,0,1271,1275,3,176,88,0,1272,
        1273,5,271,0,0,1273,1275,3,204,102,0,1274,1268,1,0,0,0,1274,1269,
        1,0,0,0,1274,1270,1,0,0,0,1274,1271,1,0,0,0,1274,1272,1,0,0,0,1275,
        1278,1,0,0,0,1276,1274,1,0,0,0,1276,1277,1,0,0,0,1277,1849,1,0,0,
        0,1278,1276,1,0,0,0,1279,1284,3,170,85,0,1280,1281,5,3,0,0,1281,
        1282,3,382,191,0,1282,1283,5,4,0,0,1283,1285,1,0,0,0,1284,1280,1,
        0,0,0,1284,1285,1,0,0,0,1285,1286,1,0,0,0,1286,1287,3,200,100,0,
        1287,1292,3,202,101,0,1288,1290,5,63,0,0,1289,1288,1,0,0,0,1289,
        1290,1,0,0,0,1290,1291,1,0,0,0,1291,1293,3,180,90,0,1292,1289,1,
        0,0,0,1292,1293,1,0,0,0,1293,1849,1,0,0,0,1294,1295,5,57,0,0,1295,
        1296,5,268,0,0,1296,1298,3,322,161,0,1297,1299,3,186,93,0,1298,1297,
        1,0,0,0,1298,1299,1,0,0,0,1299,1300,1,0,0,0,1300,1301,5,90,0,0,1301,
        1309,5,262,0,0,1302,1310,3,412,206,0,1303,1304,5,137,0,0,1304,1305,
        5,85,0,0,1305,1310,3,300,150,0,1306,1307,5,137,0,0,1307,1308,5,55,
        0,0,1308,1310,5,85,0,0,1309,1302,1,0,0,0,1309,1303,1,0,0,0,1309,
        1306,1,0,0,0,1309,1310,1,0,0,0,1310,1849,1,0,0,0,1311,1312,5,56,
        0,0,1312,1313,5,268,0,0,1313,1314,3,322,161,0,1314,1315,5,53,0,0,
        1315,1316,7,18,0,0,1316,1317,3,378,189,0,1317,1849,1,0,0,0,1318,
        1319,5,56,0,0,1319,1320,5,268,0,0,1320,1321,3,322,161,0,1321,1322,
        5,53,0,0,1322,1323,7,18,0,0,1323,1324,5,3,0,0,1324,1325,3,378,189,
        0,1325,1326,5,4,0,0,1326,1849,1,0,0,0,1327,1328,5,56,0,0,1328,1329,
        5,268,0,0,1329,1330,3,322,161,0,1330,1331,5,231,0,0,1331,1332,5,
        84,0,0,1332,1333,3,322,161,0,1333,1334,5,275,0,0,1334,1335,3,408,
        204,0,1335,1849,1,0,0,0,1336,1337,5,56,0,0,1337,1338,5,268,0,0,1338,
        1339,3,322,161,0,1339,1340,5,117,0,0,1340,1341,7,18,0,0,1341,1342,
        5,3,0,0,1342,1343,3,320,160,0,1343,1344,5,4,0,0,1344,1849,1,0,0,
        0,1345,1346,5,56,0,0,1346,1347,5,268,0,0,1347,1348,3,322,161,0,1348,
        1349,5,117,0,0,1349,1350,7,18,0,0,1350,1351,3,320,160,0,1351,1849,
        1,0,0,0,1352,1353,5,56,0,0,1353,1354,7,19,0,0,1354,1355,3,322,161,
        0,1355,1356,5,231,0,0,1356,1357,5,275,0,0,1357,1358,3,322,161,0,
        1358,1849,1,0,0,0,1359,1360,5,56,0,0,1360,1361,7,19,0,0,1361,1362,
        3,322,161,0,1362,1363,5,253,0,0,1363,1364,5,271,0,0,1364,1365,3,
        204,102,0,1365,1849,1,0,0,0,1366,1367,5,56,0,0,1367,1368,7,19,0,
        0,1368,1369,3,322,161,0,1369,1370,5,292,0,0,1370,1373,5,271,0,0,
        1371,1372,5,151,0,0,1372,1374,5,124,0,0,1373,1371,1,0,0,0,1373,1374,
        1,0,0,0,1374,1375,1,0,0,0,1375,1376,3,204,102,0,1376,1849,1,0,0,
        0,1377,1378,5,56,0,0,1378,1379,5,268,0,0,1379,1380,3,322,161,0,1380,
        1382,7,20,0,0,1381,1383,5,84,0,0,1382,1381,1,0,0,0,1382,1383,1,0,
        0,0,1383,1384,1,0,0,0,1384,1386,3,322,161,0,1385,1387,3,420,210,
        0,1386,1385,1,0,0,0,1386,1387,1,0,0,0,1387,1849,1,0,0,0,1388,1389,
        5,56,0,0,1389,1390,5,268,0,0,1390,1392,3,322,161,0,1391,1393,3,186,
        93,0,1392,1391,1,0,0,0,1392,1393,1,0,0,0,1393,1394,1,0,0,0,1394,
        1396,5,76,0,0,1395,1397,5,84,0,0,1396,1395,1,0,0,0,1396,1397,1,0,
        0,0,1397,1398,1,0,0,0,1398,1399,3,322,161,0,1399,1401,3,384,192,
        0,1400,1402,3,374,187,0,1401,1400,1,0,0,0,1401,1402,1,0,0,0,1402,
        1849,1,0,0,0,1403,1404,5,56,0,0,1404,1405,5,268,0,0,1405,1407,3,
        322,161,0,1406,1408,3,186,93,0,1407,1406,1,0,0,0,1407,1408,1,0,0,
        0,1408,1409,1,0,0,0,1409,1410,5,233,0,0,1410,1411,5,85,0,0,1411,
        1412,5,3,0,0,1412,1413,3,378,189,0,1413,1414,5,4,0,0,1414,1849,1,
        0,0,0,1415,1416,5,56,0,0,1416,1417,5,268,0,0,1417,1419,3,322,161,
        0,1418,1420,3,186,93,0,1419,1418,1,0,0,0,1419,1420,1,0,0,0,1420,
        1421,1,0,0,0,1421,1422,5,253,0,0,1422,1423,5,250,0,0,1423,1427,5,
        325,0,0,1424,1425,5,303,0,0,1425,1426,5,251,0,0,1426,1428,3,204,
        102,0,1427,1424,1,0,0,0,1427,1428,1,0,0,0,1428,1849,1,0,0,0,1429,
        1430,5,56,0,0,1430,1431,5,268,0,0,1431,1433,3,322,161,0,1432,1434,
        3,186,93,0,1433,1432,1,0,0,0,1433,1434,1,0,0,0,1434,1435,1,0,0,0,
        1435,1436,5,253,0,0,1436,1437,5,251,0,0,1437,1438,3,204,102,0,1438,
        1849,1,0,0,0,1439,1440,5,56,0,0,1440,1441,7,19,0,0,1441,1442,3,322,
        161,0,1442,1446,5,53,0,0,1443,1444,5,151,0,0,1444,1445,5,194,0,0,
        1445,1447,5,124,0,0,1446,1443,1,0,0,0,1446,1447,1,0,0,0,1447,1449,
        1,0,0,0,1448,1450,3,184,92,0,1449,1448,1,0,0,0,1450,1451,1,0,0,0,
        1451,1449,1,0,0,0,1451,1452,1,0,0,0,1452,1849,1,0,0,0,1453,1454,
        5,56,0,0,1454,1455,5,268,0,0,1455,1456,3,322,161,0,1456,1457,3,186,
        93,0,1457,1458,5,231,0,0,1458,1459,5,275,0,0,1459,1460,3,186,93,
        0,1460,1849,1,0,0,0,1461,1462,5,56,0,0,1462,1463,7,19,0,0,1463,1464,
        3,322,161,0,1464,1467,5,117,0,0,1465,1466,5,151,0,0,1466,1468,5,
        124,0,0,1467,1465,1,0,0,0,1467,1468,1,0,0,0,1468,1469,1,0,0,0,1469,
        1474,3,186,93,0,1470,1471,5,1,0,0,1471,1473,3,186,93,0,1472,1470,
        1,0,0,0,1473,1476,1,0,0,0,1474,1472,1,0,0,0,1474,1475,1,0,0,0,1475,
        1478,1,0,0,0,1476,1474,1,0,0,0,1477,1479,5,222,0,0,1478,1477,1,0,
        0,0,1478,1479,1,0,0,0,1479,1849,1,0,0,0,1480,1481,5,56,0,0,1481,
        1482,5,268,0,0,1482,1484,3,322,161,0,1483,1485,3,186,93,0,1484,1483,
        1,0,0,0,1484,1485,1,0,0,0,1485,1486,1,0,0,0,1486,1487,5,253,0,0,
        1487,1488,3,176,88,0,1488,1849,1,0,0,0,1489,1490,5,56,0,0,1490,1491,
        5,268,0,0,1491,1492,3,322,161,0,1492,1493,5,227,0,0,1493,1494,5,
        213,0,0,1494,1849,1,0,0,0,1495,1496,5,117,0,0,1496,1499,5,268,0,
        0,1497,1498,5,151,0,0,1498,1500,5,124,0,0,1499,1497,1,0,0,0,1499,
        1500,1,0,0,0,1500,1501,1,0,0,0,1501,1503,3,322,161,0,1502,1504,5,
        222,0,0,1503,1502,1,0,0,0,1503,1504,1,0,0,0,1504,1849,1,0,0,0,1505,
        1506,5,117,0,0,1506,1509,5,298,0,0,1507,1508,5,151,0,0,1508,1510,
        5,124,0,0,1509,1507,1,0,0,0,1509,1510,1,0,0,0,1510,1511,1,0,0,0,
        1511,1849,3,322,161,0,1512,1515,5,94,0,0,1513,1514,5,202,0,0,1514,
        1516,5,233,0,0,1515,1513,1,0,0,0,1515,1516,1,0,0,0,1516,1521,1,0,
        0,0,1517,1519,5,145,0,0,1518,1517,1,0,0,0,1518,1519,1,0,0,0,1519,
        1520,1,0,0,0,1520,1522,5,272,0,0,1521,1518,1,0,0,0,1521,1522,1,0,
        0,0,1522,1523,1,0,0,0,1523,1527,5,298,0,0,1524,1525,5,151,0,0,1525,
        1526,5,194,0,0,1526,1528,5,124,0,0,1527,1524,1,0,0,0,1527,1528,1,
        0,0,0,1528,1529,1,0,0,0,1529,1531,3,322,161,0,1530,1532,3,306,153,
        0,1531,1530,1,0,0,0,1531,1532,1,0,0,0,1532,1541,1,0,0,0,1533,1540,
        3,178,89,0,1534,1535,5,212,0,0,1535,1536,5,198,0,0,1536,1540,3,298,
        149,0,1537,1538,5,271,0,0,1538,1540,3,204,102,0,1539,1533,1,0,0,
        0,1539,1534,1,0,0,0,1539,1537,1,0,0,0,1540,1543,1,0,0,0,1541,1539,
        1,0,0,0,1541,1542,1,0,0,0,1542,1544,1,0,0,0,1543,1541,1,0,0,0,1544,
        1545,5,63,0,0,1545,1546,3,180,90,0,1546,1849,1,0,0,0,1547,1550,5,
        94,0,0,1548,1549,5,202,0,0,1549,1551,5,233,0,0,1550,1548,1,0,0,0,
        1550,1551,1,0,0,0,1551,1553,1,0,0,0,1552,1554,5,145,0,0,1553,1552,
        1,0,0,0,1553,1554,1,0,0,0,1554,1555,1,0,0,0,1555,1556,5,272,0,0,
        1556,1557,5,298,0,0,1557,1562,3,324,162,0,1558,1559,5,3,0,0,1559,
        1560,3,382,191,0,1560,1561,5,4,0,0,1561,1563,1,0,0,0,1562,1558,1,
        0,0,0,1562,1563,1,0,0,0,1563,1564,1,0,0,0,1564,1567,3,200,100,0,
        1565,1566,5,201,0,0,1566,1568,3,204,102,0,1567,1565,1,0,0,0,1567,
        1568,1,0,0,0,1568,1849,1,0,0,0,1569,1570,5,56,0,0,1570,1571,5,298,
        0,0,1571,1573,3,322,161,0,1572,1574,5,63,0,0,1573,1572,1,0,0,0,1573,
        1574,1,0,0,0,1574,1575,1,0,0,0,1575,1576,3,180,90,0,1576,1849,1,
        0,0,0,1577,1580,5,94,0,0,1578,1579,5,202,0,0,1579,1581,5,233,0,0,
        1580,1578,1,0,0,0,1580,1581,1,0,0,0,1581,1583,1,0,0,0,1582,1584,
        5,272,0,0,1583,1582,1,0,0,0,1583,1584,1,0,0,0,1584,1585,1,0,0,0,
        1585,1589,5,143,0,0,1586,1587,5,151,0,0,1587,1588,5,194,0,0,1588,
        1590,5,124,0,0,1589,1586,1,0,0,0,1589,1590,1,0,0,0,1590,1591,1,0,
        0,0,1591,1592,3,322,161,0,1592,1593,5,63,0,0,1593,1603,5,325,0,0,
        1594,1595,5,296,0,0,1595,1600,3,222,111,0,1596,1597,5,1,0,0,1597,
        1599,3,222,111,0,1598,1596,1,0,0,0,1599,1602,1,0,0,0,1600,1598,1,
        0,0,0,1600,1601,1,0,0,0,1601,1604,1,0,0,0,1602,1600,1,0,0,0,1603,
        1594,1,0,0,0,1603,1604,1,0,0,0,1604,1849,1,0,0,0,1605,1607,5,117,
        0,0,1606,1608,5,272,0,0,1607,1606,1,0,0,0,1607,1608,1,0,0,0,1608,
        1609,1,0,0,0,1609,1612,5,143,0,0,1610,1611,5,151,0,0,1611,1613,5,
        124,0,0,1612,1610,1,0,0,0,1612,1613,1,0,0,0,1613,1614,1,0,0,0,1614,
        1849,3,322,161,0,1615,1617,5,125,0,0,1616,1618,7,21,0,0,1617,1616,
        1,0,0,0,1617,1618,1,0,0,0,1618,1619,1,0,0,0,1619,1849,3,164,82,0,
        1620,1621,5,256,0,0,1621,1624,5,269,0,0,1622,1623,7,17,0,0,1623,
        1625,3,322,161,0,1624,1622,1,0,0,0,1624,1625,1,0,0,0,1625,1630,1,
        0,0,0,1626,1628,5,173,0,0,1627,1626,1,0,0,0,1627,1628,1,0,0,0,1628,
        1629,1,0,0,0,1629,1631,5,325,0,0,1630,1627,1,0,0,0,1630,1631,1,0,
        0,0,1631,1849,1,0,0,0,1632,1633,5,256,0,0,1633,1634,5,268,0,0,1634,
        1637,5,127,0,0,1635,1636,7,17,0,0,1636,1638,3,322,161,0,1637,1635,
        1,0,0,0,1637,1638,1,0,0,0,1638,1639,1,0,0,0,1639,1640,5,173,0,0,
        1640,1642,5,325,0,0,1641,1643,3,186,93,0,1642,1641,1,0,0,0,1642,
        1643,1,0,0,0,1643,1849,1,0,0,0,1644,1645,5,256,0,0,1645,1646,5,271,
        0,0,1646,1651,3,322,161,0,1647,1648,5,3,0,0,1648,1649,3,208,104,
        0,1649,1650,5,4,0,0,1650,1652,1,0,0,0,1651,1647,1,0,0,0,1651,1652,
        1,0,0,0,1652,1849,1,0,0,0,1653,1654,5,256,0,0,1654,1655,5,85,0,0,
        1655,1656,7,17,0,0,1656,1659,3,322,161,0,1657,1658,7,17,0,0,1658,
        1660,3,322,161,0,1659,1657,1,0,0,0,1659,1660,1,0,0,0,1660,1849,1,
        0,0,0,1661,1662,5,256,0,0,1662,1665,5,299,0,0,1663,1664,7,17,0,0,
        1664,1666,3,322,161,0,1665,1663,1,0,0,0,1665,1666,1,0,0,0,1666,1671,
        1,0,0,0,1667,1669,5,173,0,0,1668,1667,1,0,0,0,1668,1669,1,0,0,0,
        1669,1670,1,0,0,0,1670,1672,5,325,0,0,1671,1668,1,0,0,0,1671,1672,
        1,0,0,0,1672,1849,1,0,0,0,1673,1674,5,256,0,0,1674,1675,5,213,0,
        0,1675,1677,3,322,161,0,1676,1678,3,186,93,0,1677,1676,1,0,0,0,1677,
        1678,1,0,0,0,1678,1849,1,0,0,0,1679,1681,5,256,0,0,1680,1682,3,412,
        206,0,1681,1680,1,0,0,0,1681,1682,1,0,0,0,1682,1683,1,0,0,0,1683,
        1691,5,144,0,0,1684,1686,5,173,0,0,1685,1684,1,0,0,0,1685,1686,1,
        0,0,0,1686,1689,1,0,0,0,1687,1690,3,322,161,0,1688,1690,5,325,0,
        0,1689,1687,1,0,0,0,1689,1688,1,0,0,0,1690,1692,1,0,0,0,1691,1685,
        1,0,0,0,1691,1692,1,0,0,0,1692,1849,1,0,0,0,1693,1694,5,256,0,0,
        1694,1695,5,94,0,0,1695,1696,5,268,0,0,1696,1699,3,322,161,0,1697,
        1698,5,63,0,0,1698,1700,5,250,0,0,1699,1697,1,0,0,0,1699,1700,1,
        0,0,0,1700,1849,1,0,0,0,1701,1702,5,256,0,0,1702,1703,5,97,0,0,1703,
        1849,5,190,0,0,1704,1705,7,22,0,0,1705,1707,5,143,0,0,1706,1708,
        5,127,0,0,1707,1706,1,0,0,0,1707,1708,1,0,0,0,1708,1709,1,0,0,0,
        1709,1849,3,192,96,0,1710,1711,7,22,0,0,1711,1713,3,190,95,0,1712,
        1714,5,127,0,0,1713,1712,1,0,0,0,1713,1714,1,0,0,0,1714,1715,1,0,
        0,0,1715,1716,3,322,161,0,1716,1849,1,0,0,0,1717,1719,7,22,0,0,1718,
        1720,5,268,0,0,1719,1718,1,0,0,0,1719,1720,1,0,0,0,1720,1722,1,0,
        0,0,1721,1723,7,23,0,0,1722,1721,1,0,0,0,1722,1723,1,0,0,0,1723,
        1724,1,0,0,0,1724,1726,3,322,161,0,1725,1727,3,186,93,0,1726,1725,
        1,0,0,0,1726,1727,1,0,0,0,1727,1729,1,0,0,0,1728,1730,3,194,97,0,
        1729,1728,1,0,0,0,1729,1730,1,0,0,0,1730,1849,1,0,0,0,1731,1733,
        7,22,0,0,1732,1734,5,223,0,0,1733,1732,1,0,0,0,1733,1734,1,0,0,0,
        1734,1735,1,0,0,0,1735,1849,3,180,90,0,1736,1737,5,86,0,0,1737,1738,
        5,198,0,0,1738,1739,3,190,95,0,1739,1740,3,322,161,0,1740,1741,5,
        164,0,0,1741,1742,7,24,0,0,1742,1849,1,0,0,0,1743,1744,5,86,0,0,
        1744,1745,5,198,0,0,1745,1746,5,268,0,0,1746,1747,3,322,161,0,1747,
        1748,5,164,0,0,1748,1749,7,24,0,0,1749,1849,1,0,0,0,1750,1751,5,
        230,0,0,1751,1752,5,268,0,0,1752,1849,3,322,161,0,1753,1761,5,230,
        0,0,1754,1762,5,325,0,0,1755,1757,9,0,0,0,1756,1755,1,0,0,0,1757,
        1760,1,0,0,0,1758,1759,1,0,0,0,1758,1756,1,0,0,0,1759,1762,1,0,0,
        0,1760,1758,1,0,0,0,1761,1754,1,0,0,0,1761,1758,1,0,0,0,1762,1849,
        1,0,0,0,1763,1765,5,72,0,0,1764,1766,5,170,0,0,1765,1764,1,0,0,0,
        1765,1766,1,0,0,0,1766,1767,1,0,0,0,1767,1768,5,268,0,0,1768,1771,
        3,322,161,0,1769,1770,5,201,0,0,1770,1772,3,204,102,0,1771,1769,
        1,0,0,0,1771,1772,1,0,0,0,1772,1777,1,0,0,0,1773,1775,5,63,0,0,1774,
        1773,1,0,0,0,1774,1775,1,0,0,0,1775,1776,1,0,0,0,1776,1778,3,180,
        90,0,1777,1774,1,0,0,0,1777,1778,1,0,0,0,1778,1849,1,0,0,0,1779,
        1780,5,287,0,0,1780,1783,5,268,0,0,1781,1782,5,151,0,0,1782,1784,
        5,124,0,0,1783,1781,1,0,0,0,1783,1784,1,0,0,0,1784,1785,1,0,0,0,
        1785,1849,3,322,161,0,1786,1787,5,78,0,0,1787,1849,5,72,0,0,1788,
        1789,5,177,0,0,1789,1791,5,102,0,0,1790,1792,5,178,0,0,1791,1790,
        1,0,0,0,1791,1792,1,0,0,0,1792,1793,1,0,0,0,1793,1794,5,158,0,0,
        1794,1796,5,325,0,0,1795,1797,5,210,0,0,1796,1795,1,0,0,0,1796,1797,
        1,0,0,0,1797,1798,1,0,0,0,1798,1799,5,163,0,0,1799,1800,5,268,0,
        0,1800,1802,3,322,161,0,1801,1803,3,186,93,0,1802,1801,1,0,0,0,1802,
        1803,1,0,0,0,1803,1849,1,0,0,0,1804,1805,5,283,0,0,1805,1806,5,268,
        0,0,1806,1808,3,322,161,0,1807,1809,3,186,93,0,1808,1807,1,0,0,0,
        1808,1809,1,0,0,0,1809,1849,1,0,0,0,1810,1811,5,189,0,0,1811,1812,
        5,232,0,0,1812,1813,5,268,0,0,1813,1849,3,322,161,0,1814,1815,7,
        25,0,0,1815,1823,3,412,206,0,1816,1824,5,325,0,0,1817,1819,9,0,0,
        0,1818,1817,1,0,0,0,1819,1822,1,0,0,0,1820,1821,1,0,0,0,1820,1818,
        1,0,0,0,1821,1824,1,0,0,0,1822,1820,1,0,0,0,1823,1816,1,0,0,0,1823,
        1820,1,0,0,0,1824,1849,1,0,0,0,1825,1826,5,253,0,0,1826,1830,5,239,
        0,0,1827,1829,9,0,0,0,1828,1827,1,0,0,0,1829,1832,1,0,0,0,1830,1831,
        1,0,0,0,1830,1828,1,0,0,0,1831,1849,1,0,0,0,1832,1830,1,0,0,0,1833,
        1837,5,253,0,0,1834,1836,9,0,0,0,1835,1834,1,0,0,0,1836,1839,1,0,
        0,0,1837,1838,1,0,0,0,1837,1835,1,0,0,0,1838,1849,1,0,0,0,1839,1837,
        1,0,0,0,1840,1849,5,234,0,0,1841,1845,3,166,83,0,1842,1844,9,0,0,
        0,1843,1842,1,0,0,0,1844,1847,1,0,0,0,1845,1846,1,0,0,0,1845,1843,
        1,0,0,0,1846,1849,1,0,0,0,1847,1845,1,0,0,0,1848,1143,1,0,0,0,1848,
        1145,1,0,0,0,1848,1148,1,0,0,0,1848,1153,1,0,0,0,1848,1171,1,0,0,
        0,1848,1178,1,0,0,0,1848,1184,1,0,0,0,1848,1194,1,0,0,0,1848,1206,
        1,0,0,0,1848,1221,1,0,0,0,1848,1258,1,0,0,0,1848,1279,1,0,0,0,1848,
        1294,1,0,0,0,1848,1311,1,0,0,0,1848,1318,1,0,0,0,1848,1327,1,0,0,
        0,1848,1336,1,0,0,0,1848,1345,1,0,0,0,1848,1352,1,0,0,0,1848,1359,
        1,0,0,0,1848,1366,1,0,0,0,1848,1377,1,0,0,0,1848,1388,1,0,0,0,1848,
        1403,1,0,0,0,1848,1415,1,0,0,0,1848,1429,1,0,0,0,1848,1439,1,0,0,
        0,1848,1453,1,0,0,0,1848,1461,1,0,0,0,1848,1480,1,0,0,0,1848,1489,
        1,0,0,0,1848,1495,1,0,0,0,1848,1505,1,0,0,0,1848,1512,1,0,0,0,1848,
        1547,1,0,0,0,1848,1569,1,0,0,0,1848,1577,1,0,0,0,1848,1605,1,0,0,
        0,1848,1615,1,0,0,0,1848,1620,1,0,0,0,1848,1632,1,0,0,0,1848,1644,
        1,0,0,0,1848,1653,1,0,0,0,1848,1661,1,0,0,0,1848,1673,1,0,0,0,1848,
        1679,1,0,0,0,1848,1693,1,0,0,0,1848,1701,1,0,0,0,1848,1704,1,0,0,
        0,1848,1710,1,0,0,0,1848,1717,1,0,0,0,1848,1731,1,0,0,0,1848,1736,
        1,0,0,0,1848,1743,1,0,0,0,1848,1750,1,0,0,0,1848,1753,1,0,0,0,1848,
        1763,1,0,0,0,1848,1779,1,0,0,0,1848,1786,1,0,0,0,1848,1788,1,0,0,
        0,1848,1804,1,0,0,0,1848,1810,1,0,0,0,1848,1814,1,0,0,0,1848,1825,
        1,0,0,0,1848,1833,1,0,0,0,1848,1840,1,0,0,0,1848,1841,1,0,0,0,1849,
        165,1,0,0,0,1850,1851,5,94,0,0,1851,2019,5,239,0,0,1852,1853,5,117,
        0,0,1853,2019,5,239,0,0,1854,1856,5,146,0,0,1855,1857,5,239,0,0,
        1856,1855,1,0,0,0,1856,1857,1,0,0,0,1857,2019,1,0,0,0,1858,1860,
        5,236,0,0,1859,1861,5,239,0,0,1860,1859,1,0,0,0,1860,1861,1,0,0,
        0,1861,2019,1,0,0,0,1862,1863,5,256,0,0,1863,2019,5,146,0,0,1864,
        1865,5,256,0,0,1865,1867,5,239,0,0,1866,1868,5,146,0,0,1867,1866,
        1,0,0,0,1867,1868,1,0,0,0,1868,2019,1,0,0,0,1869,1870,5,256,0,0,
        1870,2019,5,220,0,0,1871,1872,5,256,0,0,1872,2019,5,240,0,0,1873,
        1874,5,256,0,0,1874,1875,5,97,0,0,1875,2019,5,240,0,0,1876,1877,
        5,126,0,0,1877,2019,5,268,0,0,1878,1879,5,153,0,0,1879,2019,5,268,
        0,0,1880,1881,5,256,0,0,1881,2019,5,89,0,0,1882,1883,5,256,0,0,1883,
        1884,5,94,0,0,1884,2019,5,268,0,0,1885,1886,5,256,0,0,1886,2019,
        5,279,0,0,1887,1888,5,256,0,0,1888,2019,5,156,0,0,1889,1890,5,256,
        0,0,1890,2019,5,181,0,0,1891,1892,5,94,0,0,1892,2019,5,155,0,0,1893,
        1894,5,117,0,0,1894,2019,5,155,0,0,1895,1896,5,56,0,0,1896,2019,
        5,155,0,0,1897,1898,5,180,0,0,1898,2019,5,268,0,0,1899,1900,5,180,
        0,0,1900,2019,5,103,0,0,1901,1902,5,291,0,0,1902,2019,5,268,0,0,
        1903,1904,5,291,0,0,1904,2019,5,103,0,0,1905,1906,5,94,0,0,1906,
        1907,5,272,0,0,1907,2019,5,183,0,0,1908,1909,5,117,0,0,1909,1910,
        5,272,0,0,1910,2019,5,183,0,0,1911,1912,5,56,0,0,1912,1913,5,268,
        0,0,1913,1914,3,324,162,0,1914,1915,5,194,0,0,1915,1916,5,80,0,0,
        1916,2019,1,0,0,0,1917,1918,5,56,0,0,1918,1919,5,268,0,0,1919,1920,
        3,324,162,0,1920,1921,5,80,0,0,1921,1922,5,71,0,0,1922,2019,1,0,
        0,0,1923,1924,5,56,0,0,1924,1925,5,268,0,0,1925,1926,3,324,162,0,
        1926,1927,5,194,0,0,1927,1928,5,260,0,0,1928,2019,1,0,0,0,1929,1930,
        5,56,0,0,1930,1931,5,268,0,0,1931,1932,3,324,162,0,1932,1933,5,257,
        0,0,1933,1934,5,71,0,0,1934,2019,1,0,0,0,1935,1936,5,56,0,0,1936,
        1937,5,268,0,0,1937,1938,3,324,162,0,1938,1939,5,194,0,0,1939,1940,
        5,257,0,0,1940,2019,1,0,0,0,1941,1942,5,56,0,0,1942,1943,5,268,0,
        0,1943,1944,3,324,162,0,1944,1945,5,194,0,0,1945,1946,5,263,0,0,
        1946,1947,5,63,0,0,1947,1948,5,113,0,0,1948,2019,1,0,0,0,1949,1950,
        5,56,0,0,1950,1951,5,268,0,0,1951,1952,3,324,162,0,1952,1953,5,253,
        0,0,1953,1954,5,257,0,0,1954,1955,5,179,0,0,1955,2019,1,0,0,0,1956,
        1957,5,56,0,0,1957,1958,5,268,0,0,1958,1959,3,324,162,0,1959,1960,
        5,123,0,0,1960,1961,5,211,0,0,1961,2019,1,0,0,0,1962,1963,5,56,0,
        0,1963,1964,5,268,0,0,1964,1965,3,324,162,0,1965,1966,5,61,0,0,1966,
        1967,5,211,0,0,1967,2019,1,0,0,0,1968,1969,5,56,0,0,1969,1970,5,
        268,0,0,1970,1971,3,324,162,0,1971,1972,5,285,0,0,1972,1973,5,211,
        0,0,1973,2019,1,0,0,0,1974,1975,5,56,0,0,1975,1976,5,268,0,0,1976,
        1977,3,324,162,0,1977,1978,5,276,0,0,1978,2019,1,0,0,0,1979,1980,
        5,56,0,0,1980,1981,5,268,0,0,1981,1983,3,324,162,0,1982,1984,3,186,
        93,0,1983,1982,1,0,0,0,1983,1984,1,0,0,0,1984,1985,1,0,0,0,1985,
        1986,5,88,0,0,1986,2019,1,0,0,0,1987,1988,5,56,0,0,1988,1989,5,268,
        0,0,1989,1991,3,324,162,0,1990,1992,3,186,93,0,1991,1990,1,0,0,0,
        1991,1992,1,0,0,0,1992,1993,1,0,0,0,1993,1994,5,91,0,0,1994,2019,
        1,0,0,0,1995,1996,5,56,0,0,1996,1997,5,268,0,0,1997,1999,3,324,162,
        0,1998,2000,3,186,93,0,1999,1998,1,0,0,0,1999,2000,1,0,0,0,2000,
        2001,1,0,0,0,2001,2002,5,253,0,0,2002,2003,5,134,0,0,2003,2019,1,
        0,0,0,2004,2005,5,56,0,0,2005,2006,5,268,0,0,2006,2008,3,324,162,
        0,2007,2009,3,186,93,0,2008,2007,1,0,0,0,2008,2009,1,0,0,0,2009,
        2010,1,0,0,0,2010,2011,5,233,0,0,2011,2012,5,85,0,0,2012,2019,1,
        0,0,0,2013,2014,5,261,0,0,2014,2019,5,278,0,0,2015,2019,5,87,0,0,
        2016,2019,5,241,0,0,2017,2019,5,112,0,0,2018,1850,1,0,0,0,2018,1852,
        1,0,0,0,2018,1854,1,0,0,0,2018,1858,1,0,0,0,2018,1862,1,0,0,0,2018,
        1864,1,0,0,0,2018,1869,1,0,0,0,2018,1871,1,0,0,0,2018,1873,1,0,0,
        0,2018,1876,1,0,0,0,2018,1878,1,0,0,0,2018,1880,1,0,0,0,2018,1882,
        1,0,0,0,2018,1885,1,0,0,0,2018,1887,1,0,0,0,2018,1889,1,0,0,0,2018,
        1891,1,0,0,0,2018,1893,1,0,0,0,2018,1895,1,0,0,0,2018,1897,1,0,0,
        0,2018,1899,1,0,0,0,2018,1901,1,0,0,0,2018,1903,1,0,0,0,2018,1905,
        1,0,0,0,2018,1908,1,0,0,0,2018,1911,1,0,0,0,2018,1917,1,0,0,0,2018,
        1923,1,0,0,0,2018,1929,1,0,0,0,2018,1935,1,0,0,0,2018,1941,1,0,0,
        0,2018,1949,1,0,0,0,2018,1956,1,0,0,0,2018,1962,1,0,0,0,2018,1968,
        1,0,0,0,2018,1974,1,0,0,0,2018,1979,1,0,0,0,2018,1987,1,0,0,0,2018,
        1995,1,0,0,0,2018,2004,1,0,0,0,2018,2013,1,0,0,0,2018,2015,1,0,0,
        0,2018,2016,1,0,0,0,2018,2017,1,0,0,0,2019,167,1,0,0,0,2020,2022,
        5,94,0,0,2021,2023,5,272,0,0,2022,2021,1,0,0,0,2022,2023,1,0,0,0,
        2023,2025,1,0,0,0,2024,2026,5,128,0,0,2025,2024,1,0,0,0,2025,2026,
        1,0,0,0,2026,2027,1,0,0,0,2027,2031,5,268,0,0,2028,2029,5,151,0,
        0,2029,2030,5,194,0,0,2030,2032,5,124,0,0,2031,2028,1,0,0,0,2031,
        2032,1,0,0,0,2032,2033,1,0,0,0,2033,2034,3,322,161,0,2034,169,1,
        0,0,0,2035,2036,5,94,0,0,2036,2038,5,202,0,0,2037,2035,1,0,0,0,2037,
        2038,1,0,0,0,2038,2039,1,0,0,0,2039,2040,5,233,0,0,2040,2041,5,268,
        0,0,2041,2042,3,322,161,0,2042,171,1,0,0,0,2043,2044,5,80,0,0,2044,
        2045,5,71,0,0,2045,2049,3,298,149,0,2046,2047,5,260,0,0,2047,2048,
        5,71,0,0,2048,2050,3,302,151,0,2049,2046,1,0,0,0,2049,2050,1,0,0,
        0,2050,2051,1,0,0,0,2051,2052,5,163,0,0,2052,2053,5,329,0,0,2053,
        2054,5,70,0,0,2054,173,1,0,0,0,2055,2056,5,257,0,0,2056,2057,5,71,
        0,0,2057,2058,3,298,149,0,2058,2061,5,198,0,0,2059,2062,3,212,106,
        0,2060,2062,3,214,107,0,2061,2059,1,0,0,0,2061,2060,1,0,0,0,2062,
        2066,1,0,0,0,2063,2064,5,263,0,0,2064,2065,5,63,0,0,2065,2067,5,
        113,0,0,2066,2063,1,0,0,0,2066,2067,1,0,0,0,2067,175,1,0,0,0,2068,
        2069,5,179,0,0,2069,2070,5,325,0,0,2070,177,1,0,0,0,2071,2072,5,
        86,0,0,2072,2073,5,325,0,0,2073,179,1,0,0,0,2074,2076,3,48,24,0,
        2075,2074,1,0,0,0,2075,2076,1,0,0,0,2076,2078,1,0,0,0,2077,2079,
        3,196,98,0,2078,2077,1,0,0,0,2078,2079,1,0,0,0,2079,2080,1,0,0,0,
        2080,2081,3,230,115,0,2081,2082,3,226,113,0,2082,181,1,0,0,0,2083,
        2084,5,160,0,0,2084,2086,5,210,0,0,2085,2087,5,268,0,0,2086,2085,
        1,0,0,0,2086,2087,1,0,0,0,2087,2088,1,0,0,0,2088,2095,3,322,161,
        0,2089,2093,3,186,93,0,2090,2091,5,151,0,0,2091,2092,5,194,0,0,2092,
        2094,5,124,0,0,2093,2090,1,0,0,0,2093,2094,1,0,0,0,2094,2096,1,0,
        0,0,2095,2089,1,0,0,0,2095,2096,1,0,0,0,2096,2139,1,0,0,0,2097,2098,
        5,160,0,0,2098,2100,5,163,0,0,2099,2101,5,268,0,0,2100,2099,1,0,
        0,0,2100,2101,1,0,0,0,2101,2102,1,0,0,0,2102,2104,3,322,161,0,2103,
        2105,3,186,93,0,2104,2103,1,0,0,0,2104,2105,1,0,0,0,2105,2109,1,
        0,0,0,2106,2107,5,151,0,0,2107,2108,5,194,0,0,2108,2110,5,124,0,
        0,2109,2106,1,0,0,0,2109,2110,1,0,0,0,2110,2139,1,0,0,0,2111,2112,
        5,160,0,0,2112,2114,5,210,0,0,2113,2115,5,178,0,0,2114,2113,1,0,
        0,0,2114,2115,1,0,0,0,2115,2116,1,0,0,0,2116,2117,5,114,0,0,2117,
        2119,5,325,0,0,2118,2120,3,318,159,0,2119,2118,1,0,0,0,2119,2120,
        1,0,0,0,2120,2122,1,0,0,0,2121,2123,3,216,108,0,2122,2121,1,0,0,
        0,2122,2123,1,0,0,0,2123,2139,1,0,0,0,2124,2125,5,160,0,0,2125,2127,
        5,210,0,0,2126,2128,5,178,0,0,2127,2126,1,0,0,0,2127,2128,1,0,0,
        0,2128,2129,1,0,0,0,2129,2131,5,114,0,0,2130,2132,5,325,0,0,2131,
        2130,1,0,0,0,2131,2132,1,0,0,0,2132,2133,1,0,0,0,2133,2136,3,200,
        100,0,2134,2135,5,201,0,0,2135,2137,3,204,102,0,2136,2134,1,0,0,
        0,2136,2137,1,0,0,0,2137,2139,1,0,0,0,2138,2083,1,0,0,0,2138,2097,
        1,0,0,0,2138,2111,1,0,0,0,2138,2124,1,0,0,0,2139,183,1,0,0,0,2140,
        2142,3,186,93,0,2141,2143,3,176,88,0,2142,2141,1,0,0,0,2142,2143,
        1,0,0,0,2143,185,1,0,0,0,2144,2145,5,211,0,0,2145,2146,5,3,0,0,2146,
        2151,3,188,94,0,2147,2148,5,1,0,0,2148,2150,3,188,94,0,2149,2147,
        1,0,0,0,2150,2153,1,0,0,0,2151,2149,1,0,0,0,2151,2152,1,0,0,0,2152,
        2154,1,0,0,0,2153,2151,1,0,0,0,2154,2155,5,4,0,0,2155,187,1,0,0,
        0,2156,2159,3,412,206,0,2157,2158,5,305,0,0,2158,2160,3,348,174,
        0,2159,2157,1,0,0,0,2159,2160,1,0,0,0,2160,189,1,0,0,0,2161,2162,
        7,26,0,0,2162,191,1,0,0,0,2163,2169,3,406,203,0,2164,2169,5,325,
        0,0,2165,2169,3,350,175,0,2166,2169,3,354,177,0,2167,2169,3,356,
        178,0,2168,2163,1,0,0,0,2168,2164,1,0,0,0,2168,2165,1,0,0,0,2168,
        2166,1,0,0,0,2168,2167,1,0,0,0,2169,193,1,0,0,0,2170,2175,3,412,
        206,0,2171,2172,5,7,0,0,2172,2174,3,412,206,0,2173,2171,1,0,0,0,
        2174,2177,1,0,0,0,2175,2173,1,0,0,0,2175,2176,1,0,0,0,2176,195,1,
        0,0,0,2177,2175,1,0,0,0,2178,2179,5,303,0,0,2179,2184,3,198,99,0,
        2180,2181,5,1,0,0,2181,2183,3,198,99,0,2182,2180,1,0,0,0,2183,2186,
        1,0,0,0,2184,2182,1,0,0,0,2184,2185,1,0,0,0,2185,197,1,0,0,0,2186,
        2184,1,0,0,0,2187,2189,3,408,204,0,2188,2190,3,298,149,0,2189,2188,
        1,0,0,0,2189,2190,1,0,0,0,2190,2192,1,0,0,0,2191,2193,5,63,0,0,2192,
        2191,1,0,0,0,2192,2193,1,0,0,0,2193,2194,1,0,0,0,2194,2195,5,3,0,
        0,2195,2196,3,180,90,0,2196,2197,5,4,0,0,2197,199,1,0,0,0,2198,2199,
        5,296,0,0,2199,2200,3,322,161,0,2200,201,1,0,0,0,2201,2202,5,201,
        0,0,2202,2212,3,204,102,0,2203,2204,5,212,0,0,2204,2205,5,71,0,0,
        2205,2212,3,332,166,0,2206,2212,3,172,86,0,2207,2212,3,176,88,0,
        2208,2212,3,178,89,0,2209,2210,5,271,0,0,2210,2212,3,204,102,0,2211,
        2201,1,0,0,0,2211,2203,1,0,0,0,2211,2206,1,0,0,0,2211,2207,1,0,0,
        0,2211,2208,1,0,0,0,2211,2209,1,0,0,0,2212,2215,1,0,0,0,2213,2211,
        1,0,0,0,2213,2214,1,0,0,0,2214,203,1,0,0,0,2215,2213,1,0,0,0,2216,
        2217,5,3,0,0,2217,2222,3,206,103,0,2218,2219,5,1,0,0,2219,2221,3,
        206,103,0,2220,2218,1,0,0,0,2221,2224,1,0,0,0,2222,2220,1,0,0,0,
        2222,2223,1,0,0,0,2223,2225,1,0,0,0,2224,2222,1,0,0,0,2225,2226,
        5,4,0,0,2226,205,1,0,0,0,2227,2232,3,208,104,0,2228,2230,5,305,0,
        0,2229,2228,1,0,0,0,2229,2230,1,0,0,0,2230,2231,1,0,0,0,2231,2233,
        3,210,105,0,2232,2229,1,0,0,0,2232,2233,1,0,0,0,2233,207,1,0,0,0,
        2234,2239,3,412,206,0,2235,2236,5,7,0,0,2236,2238,3,412,206,0,2237,
        2235,1,0,0,0,2238,2241,1,0,0,0,2239,2237,1,0,0,0,2239,2240,1,0,0,
        0,2240,2244,1,0,0,0,2241,2239,1,0,0,0,2242,2244,5,325,0,0,2243,2234,
        1,0,0,0,2243,2242,1,0,0,0,2244,209,1,0,0,0,2245,2250,5,329,0,0,2246,
        2250,5,331,0,0,2247,2250,3,358,179,0,2248,2250,5,325,0,0,2249,2245,
        1,0,0,0,2249,2246,1,0,0,0,2249,2247,1,0,0,0,2249,2248,1,0,0,0,2250,
        211,1,0,0,0,2251,2252,5,3,0,0,2252,2257,3,348,174,0,2253,2254,5,
        1,0,0,2254,2256,3,348,174,0,2255,2253,1,0,0,0,2256,2259,1,0,0,0,
        2257,2255,1,0,0,0,2257,2258,1,0,0,0,2258,2260,1,0,0,0,2259,2257,
        1,0,0,0,2260,2261,5,4,0,0,2261,213,1,0,0,0,2262,2263,5,3,0,0,2263,
        2268,3,212,106,0,2264,2265,5,1,0,0,2265,2267,3,212,106,0,2266,2264,
        1,0,0,0,2267,2270,1,0,0,0,2268,2266,1,0,0,0,2268,2269,1,0,0,0,2269,
        2271,1,0,0,0,2270,2268,1,0,0,0,2271,2272,5,4,0,0,2272,215,1,0,0,
        0,2273,2274,5,263,0,0,2274,2275,5,63,0,0,2275,2280,3,218,109,0,2276,
        2277,5,263,0,0,2277,2278,5,71,0,0,2278,2280,3,220,110,0,2279,2273,
        1,0,0,0,2279,2276,1,0,0,0,2280,217,1,0,0,0,2281,2282,5,159,0,0,2282,
        2283,5,325,0,0,2283,2284,5,206,0,0,2284,2287,5,325,0,0,2285,2287,
        3,412,206,0,2286,2281,1,0,0,0,2286,2285,1,0,0,0,2287,219,1,0,0,0,
        2288,2292,5,325,0,0,2289,2290,5,303,0,0,2290,2291,5,251,0,0,2291,
        2293,3,204,102,0,2292,2289,1,0,0,0,2292,2293,1,0,0,0,2293,221,1,
        0,0,0,2294,2295,3,412,206,0,2295,2296,5,325,0,0,2296,223,1,0,0,0,
        2297,2298,3,182,91,0,2298,2299,3,230,115,0,2299,2300,3,226,113,0,
        2300,2349,1,0,0,0,2301,2303,3,270,135,0,2302,2304,3,228,114,0,2303,
        2302,1,0,0,0,2304,2305,1,0,0,0,2305,2303,1,0,0,0,2305,2306,1,0,0,
        0,2306,2349,1,0,0,0,2307,2308,5,108,0,0,2308,2309,5,141,0,0,2309,
        2310,3,322,161,0,2310,2312,3,316,158,0,2311,2313,3,262,131,0,2312,
        2311,1,0,0,0,2312,2313,1,0,0,0,2313,2349,1,0,0,0,2314,2315,5,293,
        0,0,2315,2316,3,322,161,0,2316,2317,3,316,158,0,2317,2319,3,248,
        124,0,2318,2320,3,262,131,0,2319,2318,1,0,0,0,2319,2320,1,0,0,0,
        2320,2349,1,0,0,0,2321,2322,5,186,0,0,2322,2323,5,163,0,0,2323,2324,
        3,322,161,0,2324,2325,3,316,158,0,2325,2331,5,296,0,0,2326,2332,
        3,322,161,0,2327,2328,5,3,0,0,2328,2329,3,180,90,0,2329,2330,5,4,
        0,0,2330,2332,1,0,0,0,2331,2326,1,0,0,0,2331,2327,1,0,0,0,2332,2333,
        1,0,0,0,2333,2334,3,316,158,0,2334,2335,5,198,0,0,2335,2339,3,340,
        170,0,2336,2338,3,250,125,0,2337,2336,1,0,0,0,2338,2341,1,0,0,0,
        2339,2337,1,0,0,0,2339,2340,1,0,0,0,2340,2345,1,0,0,0,2341,2339,
        1,0,0,0,2342,2344,3,252,126,0,2343,2342,1,0,0,0,2344,2347,1,0,0,
        0,2345,2343,1,0,0,0,2345,2346,1,0,0,0,2346,2349,1,0,0,0,2347,2345,
        1,0,0,0,2348,2297,1,0,0,0,2348,2301,1,0,0,0,2348,2307,1,0,0,0,2348,
        2314,1,0,0,0,2348,2321,1,0,0,0,2349,225,1,0,0,0,2350,2351,5,203,
        0,0,2351,2352,5,71,0,0,2352,2357,3,234,117,0,2353,2354,5,1,0,0,2354,
        2356,3,234,117,0,2355,2353,1,0,0,0,2356,2359,1,0,0,0,2357,2355,1,
        0,0,0,2357,2358,1,0,0,0,2358,2361,1,0,0,0,2359,2357,1,0,0,0,2360,
        2350,1,0,0,0,2360,2361,1,0,0,0,2361,2372,1,0,0,0,2362,2363,5,79,
        0,0,2363,2364,5,71,0,0,2364,2369,3,338,169,0,2365,2366,5,1,0,0,2366,
        2368,3,338,169,0,2367,2365,1,0,0,0,2368,2371,1,0,0,0,2369,2367,1,
        0,0,0,2369,2370,1,0,0,0,2370,2373,1,0,0,0,2371,2369,1,0,0,0,2372,
        2362,1,0,0,0,2372,2373,1,0,0,0,2373,2384,1,0,0,0,2374,2375,5,116,
        0,0,2375,2376,5,71,0,0,2376,2381,3,338,169,0,2377,2378,5,1,0,0,2378,
        2380,3,338,169,0,2379,2377,1,0,0,0,2380,2383,1,0,0,0,2381,2379,1,
        0,0,0,2381,2382,1,0,0,0,2382,2385,1,0,0,0,2383,2381,1,0,0,0,2384,
        2374,1,0,0,0,2384,2385,1,0,0,0,2385,2396,1,0,0,0,2386,2387,5,259,
        0,0,2387,2388,5,71,0,0,2388,2393,3,234,117,0,2389,2390,5,1,0,0,2390,
        2392,3,234,117,0,2391,2389,1,0,0,0,2392,2395,1,0,0,0,2393,2391,1,
        0,0,0,2393,2394,1,0,0,0,2394,2397,1,0,0,0,2395,2393,1,0,0,0,2396,
        2386,1,0,0,0,2396,2397,1,0,0,0,2397,2399,1,0,0,0,2398,2400,3,392,
        196,0,2399,2398,1,0,0,0,2399,2400,1,0,0,0,2400,2406,1,0,0,0,2401,
        2404,5,174,0,0,2402,2405,5,55,0,0,2403,2405,3,338,169,0,2404,2402,
        1,0,0,0,2404,2403,1,0,0,0,2405,2407,1,0,0,0,2406,2401,1,0,0,0,2406,
        2407,1,0,0,0,2407,227,1,0,0,0,2408,2409,3,182,91,0,2409,2410,3,238,
        119,0,2410,229,1,0,0,0,2411,2412,6,115,-1,0,2412,2415,3,232,116,
        0,2413,2415,3,8,4,0,2414,2411,1,0,0,0,2414,2413,1,0,0,0,2415,2436,
        1,0,0,0,2416,2417,10,3,0,0,2417,2419,7,27,0,0,2418,2420,3,284,142,
        0,2419,2418,1,0,0,0,2419,2420,1,0,0,0,2420,2421,1,0,0,0,2421,2435,
        3,230,115,4,2422,2423,10,2,0,0,2423,2425,5,161,0,0,2424,2426,3,284,
        142,0,2425,2424,1,0,0,0,2425,2426,1,0,0,0,2426,2427,1,0,0,0,2427,
        2435,3,230,115,3,2428,2429,10,1,0,0,2429,2431,7,28,0,0,2430,2432,
        3,284,142,0,2431,2430,1,0,0,0,2431,2432,1,0,0,0,2432,2433,1,0,0,
        0,2433,2435,3,230,115,2,2434,2416,1,0,0,0,2434,2422,1,0,0,0,2434,
        2428,1,0,0,0,2435,2438,1,0,0,0,2436,2434,1,0,0,0,2436,2437,1,0,0,
        0,2437,231,1,0,0,0,2438,2436,1,0,0,0,2439,2445,3,240,120,0,2440,
        2445,3,236,118,0,2441,2442,5,268,0,0,2442,2445,3,322,161,0,2443,
        2445,3,312,156,0,2444,2439,1,0,0,0,2444,2440,1,0,0,0,2444,2441,1,
        0,0,0,2444,2443,1,0,0,0,2445,233,1,0,0,0,2446,2448,3,338,169,0,2447,
        2449,7,10,0,0,2448,2447,1,0,0,0,2448,2449,1,0,0,0,2449,2452,1,0,
        0,0,2450,2451,5,196,0,0,2451,2453,7,3,0,0,2452,2450,1,0,0,0,2452,
        2453,1,0,0,0,2453,235,1,0,0,0,2454,2456,3,270,135,0,2455,2457,3,
        238,119,0,2456,2455,1,0,0,0,2457,2458,1,0,0,0,2458,2456,1,0,0,0,
        2458,2459,1,0,0,0,2459,237,1,0,0,0,2460,2462,3,244,122,0,2461,2463,
        3,262,131,0,2462,2461,1,0,0,0,2462,2463,1,0,0,0,2463,2464,1,0,0,
        0,2464,2465,3,226,113,0,2465,2488,1,0,0,0,2466,2470,3,246,123,0,
        2467,2469,3,282,141,0,2468,2467,1,0,0,0,2469,2472,1,0,0,0,2470,2468,
        1,0,0,0,2470,2471,1,0,0,0,2471,2474,1,0,0,0,2472,2470,1,0,0,0,2473,
        2475,3,262,131,0,2474,2473,1,0,0,0,2474,2475,1,0,0,0,2475,2477,1,
        0,0,0,2476,2478,3,272,136,0,2477,2476,1,0,0,0,2477,2478,1,0,0,0,
        2478,2480,1,0,0,0,2479,2481,3,264,132,0,2480,2479,1,0,0,0,2480,2481,
        1,0,0,0,2481,2483,1,0,0,0,2482,2484,3,392,196,0,2483,2482,1,0,0,
        0,2483,2484,1,0,0,0,2484,2485,1,0,0,0,2485,2486,3,226,113,0,2486,
        2488,1,0,0,0,2487,2460,1,0,0,0,2487,2466,1,0,0,0,2488,239,1,0,0,
        0,2489,2490,3,244,122,0,2490,2492,3,242,121,0,2491,2493,3,262,131,
        0,2492,2491,1,0,0,0,2492,2493,1,0,0,0,2493,2515,1,0,0,0,2494,2495,
        3,246,123,0,2495,2499,3,242,121,0,2496,2498,3,282,141,0,2497,2496,
        1,0,0,0,2498,2501,1,0,0,0,2499,2497,1,0,0,0,2499,2500,1,0,0,0,2500,
        2503,1,0,0,0,2501,2499,1,0,0,0,2502,2504,3,262,131,0,2503,2502,1,
        0,0,0,2503,2504,1,0,0,0,2504,2506,1,0,0,0,2505,2507,3,272,136,0,
        2506,2505,1,0,0,0,2506,2507,1,0,0,0,2507,2509,1,0,0,0,2508,2510,
        3,264,132,0,2509,2508,1,0,0,0,2509,2510,1,0,0,0,2510,2512,1,0,0,
        0,2511,2513,3,392,196,0,2512,2511,1,0,0,0,2512,2513,1,0,0,0,2513,
        2515,1,0,0,0,2514,2489,1,0,0,0,2514,2494,1,0,0,0,2515,241,1,0,0,
        0,2516,2518,3,270,135,0,2517,2516,1,0,0,0,2517,2518,1,0,0,0,2518,
        243,1,0,0,0,2519,2520,5,247,0,0,2520,2521,5,280,0,0,2521,2522,5,
        3,0,0,2522,2523,3,330,165,0,2523,2524,5,4,0,0,2524,2530,1,0,0,0,
        2525,2526,5,184,0,0,2526,2530,3,330,165,0,2527,2528,5,228,0,0,2528,
        2530,3,330,165,0,2529,2519,1,0,0,0,2529,2525,1,0,0,0,2529,2527,1,
        0,0,0,2530,2532,1,0,0,0,2531,2533,3,318,159,0,2532,2531,1,0,0,0,
        2532,2533,1,0,0,0,2533,2536,1,0,0,0,2534,2535,5,226,0,0,2535,2537,
        5,325,0,0,2536,2534,1,0,0,0,2536,2537,1,0,0,0,2537,2538,1,0,0,0,
        2538,2539,5,296,0,0,2539,2552,5,325,0,0,2540,2550,5,63,0,0,2541,
        2551,3,300,150,0,2542,2551,3,382,191,0,2543,2546,5,3,0,0,2544,2547,
        3,300,150,0,2545,2547,3,382,191,0,2546,2544,1,0,0,0,2546,2545,1,
        0,0,0,2547,2548,1,0,0,0,2548,2549,5,4,0,0,2549,2551,1,0,0,0,2550,
        2541,1,0,0,0,2550,2542,1,0,0,0,2550,2543,1,0,0,0,2551,2553,1,0,0,
        0,2552,2540,1,0,0,0,2552,2553,1,0,0,0,2553,2555,1,0,0,0,2554,2556,
        3,318,159,0,2555,2554,1,0,0,0,2555,2556,1,0,0,0,2556,2559,1,0,0,
        0,2557,2558,5,225,0,0,2558,2560,5,325,0,0,2559,2557,1,0,0,0,2559,
        2560,1,0,0,0,2560,245,1,0,0,0,2561,2565,5,247,0,0,2562,2564,3,266,
        133,0,2563,2562,1,0,0,0,2564,2567,1,0,0,0,2565,2563,1,0,0,0,2565,
        2566,1,0,0,0,2566,2569,1,0,0,0,2567,2565,1,0,0,0,2568,2570,3,284,
        142,0,2569,2568,1,0,0,0,2569,2570,1,0,0,0,2570,2571,1,0,0,0,2571,
        2572,3,330,165,0,2572,247,1,0,0,0,2573,2574,5,253,0,0,2574,2575,
        3,258,129,0,2575,249,1,0,0,0,2576,2577,5,300,0,0,2577,2580,5,185,
        0,0,2578,2579,5,58,0,0,2579,2581,3,340,170,0,2580,2578,1,0,0,0,2580,
        2581,1,0,0,0,2581,2582,1,0,0,0,2582,2583,5,274,0,0,2583,2584,3,254,
        127,0,2584,251,1,0,0,0,2585,2586,5,300,0,0,2586,2587,5,194,0,0,2587,
        2590,5,185,0,0,2588,2589,5,58,0,0,2589,2591,3,340,170,0,2590,2588,
        1,0,0,0,2590,2591,1,0,0,0,2591,2592,1,0,0,0,2592,2593,5,274,0,0,
        2593,2594,3,256,128,0,2594,253,1,0,0,0,2595,2603,5,108,0,0,2596,
        2597,5,293,0,0,2597,2598,5,253,0,0,2598,2603,5,316,0,0,2599,2600,
        5,293,0,0,2600,2601,5,253,0,0,2601,2603,3,258,129,0,2602,2595,1,
        0,0,0,2602,2596,1,0,0,0,2602,2599,1,0,0,0,2603,255,1,0,0,0,2604,
        2605,5,160,0,0,2605,2623,5,316,0,0,2606,2607,5,160,0,0,2607,2608,
        5,3,0,0,2608,2609,3,320,160,0,2609,2610,5,4,0,0,2610,2611,5,297,
        0,0,2611,2612,5,3,0,0,2612,2617,3,338,169,0,2613,2614,5,1,0,0,2614,
        2616,3,338,169,0,2615,2613,1,0,0,0,2616,2619,1,0,0,0,2617,2615,1,
        0,0,0,2617,2618,1,0,0,0,2618,2620,1,0,0,0,2619,2617,1,0,0,0,2620,
        2621,5,4,0,0,2621,2623,1,0,0,0,2622,2604,1,0,0,0,2622,2606,1,0,0,
        0,2623,257,1,0,0,0,2624,2629,3,260,130,0,2625,2626,5,1,0,0,2626,
        2628,3,260,130,0,2627,2625,1,0,0,0,2628,2631,1,0,0,0,2629,2627,1,
        0,0,0,2629,2630,1,0,0,0,2630,259,1,0,0,0,2631,2629,1,0,0,0,2632,
        2633,3,322,161,0,2633,2634,5,305,0,0,2634,2635,3,338,169,0,2635,
        261,1,0,0,0,2636,2637,5,301,0,0,2637,2638,3,340,170,0,2638,263,1,
        0,0,0,2639,2640,5,149,0,0,2640,2641,3,340,170,0,2641,265,1,0,0,0,
        2642,2643,5,14,0,0,2643,2650,3,268,134,0,2644,2646,5,1,0,0,2645,
        2644,1,0,0,0,2645,2646,1,0,0,0,2646,2647,1,0,0,0,2647,2649,3,268,
        134,0,2648,2645,1,0,0,0,2649,2652,1,0,0,0,2650,2648,1,0,0,0,2650,
        2651,1,0,0,0,2651,2653,1,0,0,0,2652,2650,1,0,0,0,2653,2654,5,15,
        0,0,2654,267,1,0,0,0,2655,2669,3,412,206,0,2656,2657,3,412,206,0,
        2657,2658,5,3,0,0,2658,2663,3,346,173,0,2659,2660,5,1,0,0,2660,2662,
        3,346,173,0,2661,2659,1,0,0,0,2662,2665,1,0,0,0,2663,2661,1,0,0,
        0,2663,2664,1,0,0,0,2664,2666,1,0,0,0,2665,2663,1,0,0,0,2666,2667,
        5,4,0,0,2667,2669,1,0,0,0,2668,2655,1,0,0,0,2668,2656,1,0,0,0,2669,
        269,1,0,0,0,2670,2671,5,141,0,0,2671,2676,3,286,143,0,2672,2673,
        5,1,0,0,2673,2675,3,286,143,0,2674,2672,1,0,0,0,2675,2678,1,0,0,
        0,2676,2674,1,0,0,0,2676,2677,1,0,0,0,2677,2682,1,0,0,0,2678,2676,
        1,0,0,0,2679,2681,3,282,141,0,2680,2679,1,0,0,0,2681,2684,1,0,0,
        0,2682,2680,1,0,0,0,2682,2683,1,0,0,0,2683,2686,1,0,0,0,2684,2682,
        1,0,0,0,2685,2687,3,276,138,0,2686,2685,1,0,0,0,2686,2687,1,0,0,
        0,2687,271,1,0,0,0,2688,2689,5,147,0,0,2689,2690,5,71,0,0,2690,2695,
        3,338,169,0,2691,2692,5,1,0,0,2692,2694,3,338,169,0,2693,2691,1,
        0,0,0,2694,2697,1,0,0,0,2695,2693,1,0,0,0,2695,2696,1,0,0,0,2696,
        2715,1,0,0,0,2697,2695,1,0,0,0,2698,2699,5,303,0,0,2699,2716,5,242,
        0,0,2700,2701,5,303,0,0,2701,2716,5,96,0,0,2702,2703,5,148,0,0,2703,
        2704,5,255,0,0,2704,2705,5,3,0,0,2705,2710,3,274,137,0,2706,2707,
        5,1,0,0,2707,2709,3,274,137,0,2708,2706,1,0,0,0,2709,2712,1,0,0,
        0,2710,2708,1,0,0,0,2710,2711,1,0,0,0,2711,2713,1,0,0,0,2712,2710,
        1,0,0,0,2713,2714,5,4,0,0,2714,2716,1,0,0,0,2715,2698,1,0,0,0,2715,
        2700,1,0,0,0,2715,2702,1,0,0,0,2715,2716,1,0,0,0,2716,2733,1,0,0,
        0,2717,2718,5,147,0,0,2718,2719,5,71,0,0,2719,2720,5,148,0,0,2720,
        2721,5,255,0,0,2721,2722,5,3,0,0,2722,2727,3,274,137,0,2723,2724,
        5,1,0,0,2724,2726,3,274,137,0,2725,2723,1,0,0,0,2726,2729,1,0,0,
        0,2727,2725,1,0,0,0,2727,2728,1,0,0,0,2728,2730,1,0,0,0,2729,2727,
        1,0,0,0,2730,2731,5,4,0,0,2731,2733,1,0,0,0,2732,2688,1,0,0,0,2732,
        2717,1,0,0,0,2733,273,1,0,0,0,2734,2743,5,3,0,0,2735,2740,3,338,
        169,0,2736,2737,5,1,0,0,2737,2739,3,338,169,0,2738,2736,1,0,0,0,
        2739,2742,1,0,0,0,2740,2738,1,0,0,0,2740,2741,1,0,0,0,2741,2744,
        1,0,0,0,2742,2740,1,0,0,0,2743,2735,1,0,0,0,2743,2744,1,0,0,0,2744,
        2745,1,0,0,0,2745,2748,5,4,0,0,2746,2748,3,338,169,0,2747,2734,1,
        0,0,0,2747,2746,1,0,0,0,2748,275,1,0,0,0,2749,2750,5,215,0,0,2750,
        2751,5,3,0,0,2751,2752,3,330,165,0,2752,2753,5,137,0,0,2753,2754,
        3,278,139,0,2754,2755,5,154,0,0,2755,2756,5,3,0,0,2756,2761,3,280,
        140,0,2757,2758,5,1,0,0,2758,2760,3,280,140,0,2759,2757,1,0,0,0,
        2760,2763,1,0,0,0,2761,2759,1,0,0,0,2761,2762,1,0,0,0,2762,2764,
        1,0,0,0,2763,2761,1,0,0,0,2764,2765,5,4,0,0,2765,2766,5,4,0,0,2766,
        277,1,0,0,0,2767,2780,3,412,206,0,2768,2769,5,3,0,0,2769,2774,3,
        412,206,0,2770,2771,5,1,0,0,2771,2773,3,412,206,0,2772,2770,1,0,
        0,0,2773,2776,1,0,0,0,2774,2772,1,0,0,0,2774,2775,1,0,0,0,2775,2777,
        1,0,0,0,2776,2774,1,0,0,0,2777,2778,5,4,0,0,2778,2780,1,0,0,0,2779,
        2767,1,0,0,0,2779,2768,1,0,0,0,2780,279,1,0,0,0,2781,2786,3,338,
        169,0,2782,2784,5,63,0,0,2783,2782,1,0,0,0,2783,2784,1,0,0,0,2784,
        2785,1,0,0,0,2785,2787,3,412,206,0,2786,2783,1,0,0,0,2786,2787,1,
        0,0,0,2787,281,1,0,0,0,2788,2789,5,169,0,0,2789,2791,5,298,0,0,2790,
        2792,5,205,0,0,2791,2790,1,0,0,0,2791,2792,1,0,0,0,2792,2793,1,0,
        0,0,2793,2794,3,406,203,0,2794,2803,5,3,0,0,2795,2800,3,338,169,
        0,2796,2797,5,1,0,0,2797,2799,3,338,169,0,2798,2796,1,0,0,0,2799,
        2802,1,0,0,0,2800,2798,1,0,0,0,2800,2801,1,0,0,0,2801,2804,1,0,0,
        0,2802,2800,1,0,0,0,2803,2795,1,0,0,0,2803,2804,1,0,0,0,2804,2805,
        1,0,0,0,2805,2806,5,4,0,0,2806,2818,3,412,206,0,2807,2809,5,63,0,
        0,2808,2807,1,0,0,0,2808,2809,1,0,0,0,2809,2810,1,0,0,0,2810,2815,
        3,412,206,0,2811,2812,5,1,0,0,2812,2814,3,412,206,0,2813,2811,1,
        0,0,0,2814,2817,1,0,0,0,2815,2813,1,0,0,0,2815,2816,1,0,0,0,2816,
        2819,1,0,0,0,2817,2815,1,0,0,0,2818,2808,1,0,0,0,2818,2819,1,0,0,
        0,2819,283,1,0,0,0,2820,2821,7,29,0,0,2821,285,1,0,0,0,2822,2826,
        3,310,155,0,2823,2825,3,288,144,0,2824,2823,1,0,0,0,2825,2828,1,
        0,0,0,2826,2824,1,0,0,0,2826,2827,1,0,0,0,2827,287,1,0,0,0,2828,
        2826,1,0,0,0,2829,2830,3,290,145,0,2830,2831,5,166,0,0,2831,2833,
        3,310,155,0,2832,2834,3,292,146,0,2833,2832,1,0,0,0,2833,2834,1,
        0,0,0,2834,2841,1,0,0,0,2835,2836,5,192,0,0,2836,2837,3,290,145,
        0,2837,2838,5,166,0,0,2838,2839,3,310,155,0,2839,2841,1,0,0,0,2840,
        2829,1,0,0,0,2840,2835,1,0,0,0,2841,289,1,0,0,0,2842,2844,5,157,
        0,0,2843,2842,1,0,0,0,2843,2844,1,0,0,0,2844,2867,1,0,0,0,2845,2867,
        5,95,0,0,2846,2848,5,172,0,0,2847,2849,5,205,0,0,2848,2847,1,0,0,
        0,2848,2849,1,0,0,0,2849,2867,1,0,0,0,2850,2852,5,172,0,0,2851,2850,
        1,0,0,0,2851,2852,1,0,0,0,2852,2853,1,0,0,0,2853,2867,5,248,0,0,
        2854,2856,5,237,0,0,2855,2857,5,205,0,0,2856,2855,1,0,0,0,2856,2857,
        1,0,0,0,2857,2867,1,0,0,0,2858,2860,5,142,0,0,2859,2861,5,205,0,
        0,2860,2859,1,0,0,0,2860,2861,1,0,0,0,2861,2867,1,0,0,0,2862,2864,
        5,172,0,0,2863,2862,1,0,0,0,2863,2864,1,0,0,0,2864,2865,1,0,0,0,
        2865,2867,5,59,0,0,2866,2843,1,0,0,0,2866,2845,1,0,0,0,2866,2846,
        1,0,0,0,2866,2851,1,0,0,0,2866,2854,1,0,0,0,2866,2858,1,0,0,0,2866,
        2863,1,0,0,0,2867,291,1,0,0,0,2868,2869,5,198,0,0,2869,2873,3,340,
        170,0,2870,2871,5,296,0,0,2871,2873,3,298,149,0,2872,2868,1,0,0,
        0,2872,2870,1,0,0,0,2873,293,1,0,0,0,2874,2875,5,270,0,0,2875,2877,
        5,3,0,0,2876,2878,3,296,148,0,2877,2876,1,0,0,0,2877,2878,1,0,0,
        0,2878,2879,1,0,0,0,2879,2880,5,4,0,0,2880,295,1,0,0,0,2881,2883,
        5,315,0,0,2882,2881,1,0,0,0,2882,2883,1,0,0,0,2883,2884,1,0,0,0,
        2884,2885,7,7,0,0,2885,2906,5,214,0,0,2886,2887,3,338,169,0,2887,
        2888,5,244,0,0,2888,2906,1,0,0,0,2889,2890,5,69,0,0,2890,2891,5,
        329,0,0,2891,2892,5,204,0,0,2892,2893,5,197,0,0,2893,2902,5,329,
        0,0,2894,2900,5,198,0,0,2895,2901,3,412,206,0,2896,2897,3,406,203,
        0,2897,2898,5,3,0,0,2898,2899,5,4,0,0,2899,2901,1,0,0,0,2900,2895,
        1,0,0,0,2900,2896,1,0,0,0,2901,2903,1,0,0,0,2902,2894,1,0,0,0,2902,
        2903,1,0,0,0,2903,2906,1,0,0,0,2904,2906,3,338,169,0,2905,2882,1,
        0,0,0,2905,2886,1,0,0,0,2905,2889,1,0,0,0,2905,2904,1,0,0,0,2906,
        297,1,0,0,0,2907,2908,5,3,0,0,2908,2909,3,300,150,0,2909,2910,5,
        4,0,0,2910,299,1,0,0,0,2911,2916,3,408,204,0,2912,2913,5,1,0,0,2913,
        2915,3,408,204,0,2914,2912,1,0,0,0,2915,2918,1,0,0,0,2916,2914,1,
        0,0,0,2916,2917,1,0,0,0,2917,301,1,0,0,0,2918,2916,1,0,0,0,2919,
        2920,5,3,0,0,2920,2925,3,304,152,0,2921,2922,5,1,0,0,2922,2924,3,
        304,152,0,2923,2921,1,0,0,0,2924,2927,1,0,0,0,2925,2923,1,0,0,0,
        2925,2926,1,0,0,0,2926,2928,1,0,0,0,2927,2925,1,0,0,0,2928,2929,
        5,4,0,0,2929,303,1,0,0,0,2930,2932,3,408,204,0,2931,2933,7,10,0,
        0,2932,2931,1,0,0,0,2932,2933,1,0,0,0,2933,305,1,0,0,0,2934,2935,
        5,3,0,0,2935,2940,3,308,154,0,2936,2937,5,1,0,0,2937,2939,3,308,
        154,0,2938,2936,1,0,0,0,2939,2942,1,0,0,0,2940,2938,1,0,0,0,2940,
        2941,1,0,0,0,2941,2943,1,0,0,0,2942,2940,1,0,0,0,2943,2944,5,4,0,
        0,2944,307,1,0,0,0,2945,2947,3,412,206,0,2946,2948,3,178,89,0,2947,
        2946,1,0,0,0,2947,2948,1,0,0,0,2948,309,1,0,0,0,2949,2951,3,322,
        161,0,2950,2952,3,74,37,0,2951,2950,1,0,0,0,2951,2952,1,0,0,0,2952,
        2954,1,0,0,0,2953,2955,3,294,147,0,2954,2953,1,0,0,0,2954,2955,1,
        0,0,0,2955,2956,1,0,0,0,2956,2957,3,316,158,0,2957,2977,1,0,0,0,
        2958,2959,5,3,0,0,2959,2960,3,180,90,0,2960,2962,5,4,0,0,2961,2963,
        3,294,147,0,2962,2961,1,0,0,0,2962,2963,1,0,0,0,2963,2964,1,0,0,
        0,2964,2965,3,316,158,0,2965,2977,1,0,0,0,2966,2967,5,3,0,0,2967,
        2968,3,286,143,0,2968,2970,5,4,0,0,2969,2971,3,294,147,0,2970,2969,
        1,0,0,0,2970,2971,1,0,0,0,2971,2972,1,0,0,0,2972,2973,3,316,158,
        0,2973,2977,1,0,0,0,2974,2977,3,312,156,0,2975,2977,3,314,157,0,
        2976,2949,1,0,0,0,2976,2958,1,0,0,0,2976,2966,1,0,0,0,2976,2974,
        1,0,0,0,2976,2975,1,0,0,0,2977,311,1,0,0,0,2978,2979,5,297,0,0,2979,
        2984,3,338,169,0,2980,2981,5,1,0,0,2981,2983,3,338,169,0,2982,2980,
        1,0,0,0,2983,2986,1,0,0,0,2984,2982,1,0,0,0,2984,2985,1,0,0,0,2985,
        2987,1,0,0,0,2986,2984,1,0,0,0,2987,2988,3,316,158,0,2988,313,1,
        0,0,0,2989,2990,3,408,204,0,2990,2999,5,3,0,0,2991,2996,3,338,169,
        0,2992,2993,5,1,0,0,2993,2995,3,338,169,0,2994,2992,1,0,0,0,2995,
        2998,1,0,0,0,2996,2994,1,0,0,0,2996,2997,1,0,0,0,2997,3000,1,0,0,
        0,2998,2996,1,0,0,0,2999,2991,1,0,0,0,2999,3000,1,0,0,0,3000,3001,
        1,0,0,0,3001,3002,5,4,0,0,3002,3003,3,316,158,0,3003,315,1,0,0,0,
        3004,3006,5,63,0,0,3005,3004,1,0,0,0,3005,3006,1,0,0,0,3006,3007,
        1,0,0,0,3007,3009,3,414,207,0,3008,3010,3,298,149,0,3009,3008,1,
        0,0,0,3009,3010,1,0,0,0,3010,3012,1,0,0,0,3011,3005,1,0,0,0,3011,
        3012,1,0,0,0,3012,317,1,0,0,0,3013,3014,5,243,0,0,3014,3015,5,139,
        0,0,3015,3016,5,250,0,0,3016,3020,5,325,0,0,3017,3018,5,303,0,0,
        3018,3019,5,251,0,0,3019,3021,3,204,102,0,3020,3017,1,0,0,0,3020,
        3021,1,0,0,0,3021,3063,1,0,0,0,3022,3023,5,243,0,0,3023,3024,5,139,
        0,0,3024,3034,5,109,0,0,3025,3026,5,132,0,0,3026,3027,5,273,0,0,
        3027,3028,5,71,0,0,3028,3032,5,325,0,0,3029,3030,5,121,0,0,3030,
        3031,5,71,0,0,3031,3033,5,325,0,0,3032,3029,1,0,0,0,3032,3033,1,
        0,0,0,3033,3035,1,0,0,0,3034,3025,1,0,0,0,3034,3035,1,0,0,0,3035,
        3041,1,0,0,0,3036,3037,5,83,0,0,3037,3038,5,165,0,0,3038,3039,5,
        273,0,0,3039,3040,5,71,0,0,3040,3042,5,325,0,0,3041,3036,1,0,0,0,
        3041,3042,1,0,0,0,3042,3048,1,0,0,0,3043,3044,5,184,0,0,3044,3045,
        5,167,0,0,3045,3046,5,273,0,0,3046,3047,5,71,0,0,3047,3049,5,325,
        0,0,3048,3043,1,0,0,0,3048,3049,1,0,0,0,3049,3054,1,0,0,0,3050,3051,
        5,175,0,0,3051,3052,5,273,0,0,3052,3053,5,71,0,0,3053,3055,5,325,
        0,0,3054,3050,1,0,0,0,3054,3055,1,0,0,0,3055,3060,1,0,0,0,3056,3057,
        5,195,0,0,3057,3058,5,107,0,0,3058,3059,5,63,0,0,3059,3061,5,325,
        0,0,3060,3056,1,0,0,0,3060,3061,1,0,0,0,3061,3063,1,0,0,0,3062,3013,
        1,0,0,0,3062,3022,1,0,0,0,3063,319,1,0,0,0,3064,3069,3,322,161,0,
        3065,3066,5,1,0,0,3066,3068,3,322,161,0,3067,3065,1,0,0,0,3068,3071,
        1,0,0,0,3069,3067,1,0,0,0,3069,3070,1,0,0,0,3070,321,1,0,0,0,3071,
        3069,1,0,0,0,3072,3077,3,408,204,0,3073,3074,5,7,0,0,3074,3076,3,
        408,204,0,3075,3073,1,0,0,0,3076,3079,1,0,0,0,3077,3075,1,0,0,0,
        3077,3078,1,0,0,0,3078,323,1,0,0,0,3079,3077,1,0,0,0,3080,3081,3,
        408,204,0,3081,3082,5,7,0,0,3082,3084,1,0,0,0,3083,3080,1,0,0,0,
        3083,3084,1,0,0,0,3084,3085,1,0,0,0,3085,3086,3,408,204,0,3086,325,
        1,0,0,0,3087,3088,3,408,204,0,3088,3089,5,7,0,0,3089,3091,1,0,0,
        0,3090,3087,1,0,0,0,3090,3091,1,0,0,0,3091,3092,1,0,0,0,3092,3093,
        3,408,204,0,3093,327,1,0,0,0,3094,3102,3,338,169,0,3095,3097,5,63,
        0,0,3096,3095,1,0,0,0,3096,3097,1,0,0,0,3097,3100,1,0,0,0,3098,3101,
        3,408,204,0,3099,3101,3,298,149,0,3100,3098,1,0,0,0,3100,3099,1,
        0,0,0,3101,3103,1,0,0,0,3102,3096,1,0,0,0,3102,3103,1,0,0,0,3103,
        329,1,0,0,0,3104,3109,3,328,164,0,3105,3106,5,1,0,0,3106,3108,3,
        328,164,0,3107,3105,1,0,0,0,3108,3111,1,0,0,0,3109,3107,1,0,0,0,
        3109,3110,1,0,0,0,3110,331,1,0,0,0,3111,3109,1,0,0,0,3112,3113,5,
        3,0,0,3113,3118,3,334,167,0,3114,3115,5,1,0,0,3115,3117,3,334,167,
        0,3116,3114,1,0,0,0,3117,3120,1,0,0,0,3118,3116,1,0,0,0,3118,3119,
        1,0,0,0,3119,3121,1,0,0,0,3120,3118,1,0,0,0,3121,3122,5,4,0,0,3122,
        333,1,0,0,0,3123,3137,3,406,203,0,3124,3125,3,412,206,0,3125,3126,
        5,3,0,0,3126,3131,3,336,168,0,3127,3128,5,1,0,0,3128,3130,3,336,
        168,0,3129,3127,1,0,0,0,3130,3133,1,0,0,0,3131,3129,1,0,0,0,3131,
        3132,1,0,0,0,3132,3134,1,0,0,0,3133,3131,1,0,0,0,3134,3135,5,4,0,
        0,3135,3137,1,0,0,0,3136,3123,1,0,0,0,3136,3124,1,0,0,0,3137,335,
        1,0,0,0,3138,3141,3,406,203,0,3139,3141,3,348,174,0,3140,3138,1,
        0,0,0,3140,3139,1,0,0,0,3141,337,1,0,0,0,3142,3143,3,340,170,0,3143,
        339,1,0,0,0,3144,3145,6,170,-1,0,3145,3146,5,194,0,0,3146,3157,3,
        340,170,5,3147,3148,5,124,0,0,3148,3149,5,3,0,0,3149,3150,3,180,
        90,0,3150,3151,5,4,0,0,3151,3157,1,0,0,0,3152,3154,3,344,172,0,3153,
        3155,3,342,171,0,3154,3153,1,0,0,0,3154,3155,1,0,0,0,3155,3157,1,
        0,0,0,3156,3144,1,0,0,0,3156,3147,1,0,0,0,3156,3152,1,0,0,0,3157,
        3166,1,0,0,0,3158,3159,10,2,0,0,3159,3160,5,58,0,0,3160,3165,3,340,
        170,3,3161,3162,10,1,0,0,3162,3163,5,202,0,0,3163,3165,3,340,170,
        2,3164,3158,1,0,0,0,3164,3161,1,0,0,0,3165,3168,1,0,0,0,3166,3164,
        1,0,0,0,3166,3167,1,0,0,0,3167,341,1,0,0,0,3168,3166,1,0,0,0,3169,
        3171,5,194,0,0,3170,3169,1,0,0,0,3170,3171,1,0,0,0,3171,3172,1,0,
        0,0,3172,3173,5,67,0,0,3173,3174,3,344,172,0,3174,3175,5,58,0,0,
        3175,3176,3,344,172,0,3176,3252,1,0,0,0,3177,3179,5,194,0,0,3178,
        3177,1,0,0,0,3178,3179,1,0,0,0,3179,3180,1,0,0,0,3180,3181,5,154,
        0,0,3181,3182,5,3,0,0,3182,3187,3,338,169,0,3183,3184,5,1,0,0,3184,
        3186,3,338,169,0,3185,3183,1,0,0,0,3186,3189,1,0,0,0,3187,3185,1,
        0,0,0,3187,3188,1,0,0,0,3188,3190,1,0,0,0,3189,3187,1,0,0,0,3190,
        3191,5,4,0,0,3191,3252,1,0,0,0,3192,3194,5,194,0,0,3193,3192,1,0,
        0,0,3193,3194,1,0,0,0,3194,3195,1,0,0,0,3195,3196,5,154,0,0,3196,
        3197,5,3,0,0,3197,3198,3,180,90,0,3198,3199,5,4,0,0,3199,3252,1,
        0,0,0,3200,3202,5,194,0,0,3201,3200,1,0,0,0,3201,3202,1,0,0,0,3202,
        3203,1,0,0,0,3203,3204,5,238,0,0,3204,3252,3,344,172,0,3205,3207,
        5,194,0,0,3206,3205,1,0,0,0,3206,3207,1,0,0,0,3207,3208,1,0,0,0,
        3208,3209,5,173,0,0,3209,3223,7,30,0,0,3210,3211,5,3,0,0,3211,3224,
        5,4,0,0,3212,3213,5,3,0,0,3213,3218,3,338,169,0,3214,3215,5,1,0,
        0,3215,3217,3,338,169,0,3216,3214,1,0,0,0,3217,3220,1,0,0,0,3218,
        3216,1,0,0,0,3218,3219,1,0,0,0,3219,3221,1,0,0,0,3220,3218,1,0,0,
        0,3221,3222,5,4,0,0,3222,3224,1,0,0,0,3223,3210,1,0,0,0,3223,3212,
        1,0,0,0,3224,3252,1,0,0,0,3225,3227,5,194,0,0,3226,3225,1,0,0,0,
        3226,3227,1,0,0,0,3227,3228,1,0,0,0,3228,3229,5,173,0,0,3229,3232,
        3,344,172,0,3230,3231,5,120,0,0,3231,3233,5,325,0,0,3232,3230,1,
        0,0,0,3232,3233,1,0,0,0,3233,3252,1,0,0,0,3234,3236,5,164,0,0,3235,
        3237,5,194,0,0,3236,3235,1,0,0,0,3236,3237,1,0,0,0,3237,3238,1,0,
        0,0,3238,3252,5,195,0,0,3239,3241,5,164,0,0,3240,3242,5,194,0,0,
        3241,3240,1,0,0,0,3241,3242,1,0,0,0,3242,3243,1,0,0,0,3243,3252,
        7,31,0,0,3244,3246,5,164,0,0,3245,3247,5,194,0,0,3246,3245,1,0,0,
        0,3246,3247,1,0,0,0,3247,3248,1,0,0,0,3248,3249,5,115,0,0,3249,3250,
        5,141,0,0,3250,3252,3,344,172,0,3251,3170,1,0,0,0,3251,3178,1,0,
        0,0,3251,3193,1,0,0,0,3251,3201,1,0,0,0,3251,3206,1,0,0,0,3251,3226,
        1,0,0,0,3251,3234,1,0,0,0,3251,3239,1,0,0,0,3251,3244,1,0,0,0,3252,
        343,1,0,0,0,3253,3254,6,172,-1,0,3254,3258,3,346,173,0,3255,3256,
        7,32,0,0,3256,3258,3,344,172,7,3257,3253,1,0,0,0,3257,3255,1,0,0,
        0,3258,3280,1,0,0,0,3259,3260,10,6,0,0,3260,3261,7,33,0,0,3261,3279,
        3,344,172,7,3262,3263,10,5,0,0,3263,3264,7,34,0,0,3264,3279,3,344,
        172,6,3265,3266,10,4,0,0,3266,3267,5,321,0,0,3267,3279,3,344,172,
        5,3268,3269,10,3,0,0,3269,3270,5,324,0,0,3270,3279,3,344,172,4,3271,
        3272,10,2,0,0,3272,3273,5,322,0,0,3273,3279,3,344,172,3,3274,3275,
        10,1,0,0,3275,3276,3,350,175,0,3276,3277,3,344,172,2,3277,3279,1,
        0,0,0,3278,3259,1,0,0,0,3278,3262,1,0,0,0,3278,3265,1,0,0,0,3278,
        3268,1,0,0,0,3278,3271,1,0,0,0,3278,3274,1,0,0,0,3279,3282,1,0,0,
        0,3280,3278,1,0,0,0,3280,3281,1,0,0,0,3281,345,1,0,0,0,3282,3280,
        1,0,0,0,3283,3284,6,173,-1,0,3284,3468,7,35,0,0,3285,3287,5,74,0,
        0,3286,3288,3,390,195,0,3287,3286,1,0,0,0,3288,3289,1,0,0,0,3289,
        3287,1,0,0,0,3289,3290,1,0,0,0,3290,3293,1,0,0,0,3291,3292,5,118,
        0,0,3292,3294,3,338,169,0,3293,3291,1,0,0,0,3293,3294,1,0,0,0,3294,
        3295,1,0,0,0,3295,3296,5,119,0,0,3296,3468,1,0,0,0,3297,3298,5,74,
        0,0,3298,3300,3,338,169,0,3299,3301,3,390,195,0,3300,3299,1,0,0,
        0,3301,3302,1,0,0,0,3302,3300,1,0,0,0,3302,3303,1,0,0,0,3303,3306,
        1,0,0,0,3304,3305,5,118,0,0,3305,3307,3,338,169,0,3306,3304,1,0,
        0,0,3306,3307,1,0,0,0,3307,3308,1,0,0,0,3308,3309,5,119,0,0,3309,
        3468,1,0,0,0,3310,3311,5,75,0,0,3311,3312,5,3,0,0,3312,3313,3,338,
        169,0,3313,3314,5,63,0,0,3314,3315,3,376,188,0,3315,3316,5,4,0,0,
        3316,3468,1,0,0,0,3317,3318,5,265,0,0,3318,3327,5,3,0,0,3319,3324,
        3,328,164,0,3320,3321,5,1,0,0,3321,3323,3,328,164,0,3322,3320,1,
        0,0,0,3323,3326,1,0,0,0,3324,3322,1,0,0,0,3324,3325,1,0,0,0,3325,
        3328,1,0,0,0,3326,3324,1,0,0,0,3327,3319,1,0,0,0,3327,3328,1,0,0,
        0,3328,3329,1,0,0,0,3329,3468,5,4,0,0,3330,3331,5,135,0,0,3331,3332,
        5,3,0,0,3332,3335,3,338,169,0,3333,3334,5,152,0,0,3334,3336,5,196,
        0,0,3335,3333,1,0,0,0,3335,3336,1,0,0,0,3336,3337,1,0,0,0,3337,3338,
        5,4,0,0,3338,3468,1,0,0,0,3339,3340,5,168,0,0,3340,3341,5,3,0,0,
        3341,3344,3,338,169,0,3342,3343,5,152,0,0,3343,3345,5,196,0,0,3344,
        3342,1,0,0,0,3344,3345,1,0,0,0,3345,3346,1,0,0,0,3346,3347,5,4,0,
        0,3347,3468,1,0,0,0,3348,3349,5,217,0,0,3349,3350,5,3,0,0,3350,3351,
        3,344,172,0,3351,3352,5,154,0,0,3352,3353,3,344,172,0,3353,3354,
        5,4,0,0,3354,3468,1,0,0,0,3355,3468,3,348,174,0,3356,3468,5,316,
        0,0,3357,3358,3,406,203,0,3358,3359,5,7,0,0,3359,3360,5,316,0,0,
        3360,3468,1,0,0,0,3361,3362,5,3,0,0,3362,3365,3,328,164,0,3363,3364,
        5,1,0,0,3364,3366,3,328,164,0,3365,3363,1,0,0,0,3366,3367,1,0,0,
        0,3367,3365,1,0,0,0,3367,3368,1,0,0,0,3368,3369,1,0,0,0,3369,3370,
        5,4,0,0,3370,3468,1,0,0,0,3371,3372,5,3,0,0,3372,3373,3,180,90,0,
        3373,3374,5,4,0,0,3374,3468,1,0,0,0,3375,3376,3,404,202,0,3376,3388,
        5,3,0,0,3377,3379,3,284,142,0,3378,3377,1,0,0,0,3378,3379,1,0,0,
        0,3379,3380,1,0,0,0,3380,3385,3,338,169,0,3381,3382,5,1,0,0,3382,
        3384,3,338,169,0,3383,3381,1,0,0,0,3384,3387,1,0,0,0,3385,3383,1,
        0,0,0,3385,3386,1,0,0,0,3386,3389,1,0,0,0,3387,3385,1,0,0,0,3388,
        3378,1,0,0,0,3388,3389,1,0,0,0,3389,3390,1,0,0,0,3390,3397,5,4,0,
        0,3391,3392,5,133,0,0,3392,3393,5,3,0,0,3393,3394,5,301,0,0,3394,
        3395,3,340,170,0,3395,3396,5,4,0,0,3396,3398,1,0,0,0,3397,3391,1,
        0,0,0,3397,3398,1,0,0,0,3398,3401,1,0,0,0,3399,3400,5,207,0,0,3400,
        3402,3,396,198,0,3401,3399,1,0,0,0,3401,3402,1,0,0,0,3402,3468,1,
        0,0,0,3403,3404,3,412,206,0,3404,3405,5,16,0,0,3405,3406,3,338,169,
        0,3406,3468,1,0,0,0,3407,3408,5,3,0,0,3408,3411,3,412,206,0,3409,
        3410,5,1,0,0,3410,3412,3,412,206,0,3411,3409,1,0,0,0,3412,3413,1,
        0,0,0,3413,3411,1,0,0,0,3413,3414,1,0,0,0,3414,3415,1,0,0,0,3415,
        3416,5,4,0,0,3416,3417,5,16,0,0,3417,3418,3,338,169,0,3418,3468,
        1,0,0,0,3419,3468,3,412,206,0,3420,3421,5,3,0,0,3421,3422,3,338,
        169,0,3422,3423,5,4,0,0,3423,3468,1,0,0,0,3424,3425,5,129,0,0,3425,
        3426,5,3,0,0,3426,3427,3,412,206,0,3427,3428,5,141,0,0,3428,3429,
        3,344,172,0,3429,3430,5,4,0,0,3430,3468,1,0,0,0,3431,3432,7,36,0,
        0,3432,3433,5,3,0,0,3433,3434,3,344,172,0,3434,3435,7,37,0,0,3435,
        3438,3,344,172,0,3436,3437,7,38,0,0,3437,3439,3,344,172,0,3438,3436,
        1,0,0,0,3438,3439,1,0,0,0,3439,3440,1,0,0,0,3440,3441,5,4,0,0,3441,
        3468,1,0,0,0,3442,3443,5,281,0,0,3443,3445,5,3,0,0,3444,3446,7,39,
        0,0,3445,3444,1,0,0,0,3445,3446,1,0,0,0,3446,3448,1,0,0,0,3447,3449,
        3,344,172,0,3448,3447,1,0,0,0,3448,3449,1,0,0,0,3449,3450,1,0,0,
        0,3450,3451,5,141,0,0,3451,3452,3,344,172,0,3452,3453,5,4,0,0,3453,
        3468,1,0,0,0,3454,3455,5,209,0,0,3455,3456,5,3,0,0,3456,3457,3,344,
        172,0,3457,3458,5,216,0,0,3458,3459,3,344,172,0,3459,3460,5,141,
        0,0,3460,3463,3,344,172,0,3461,3462,5,137,0,0,3462,3464,3,344,172,
        0,3463,3461,1,0,0,0,3463,3464,1,0,0,0,3464,3465,1,0,0,0,3465,3466,
        5,4,0,0,3466,3468,1,0,0,0,3467,3283,1,0,0,0,3467,3285,1,0,0,0,3467,
        3297,1,0,0,0,3467,3310,1,0,0,0,3467,3317,1,0,0,0,3467,3330,1,0,0,
        0,3467,3339,1,0,0,0,3467,3348,1,0,0,0,3467,3355,1,0,0,0,3467,3356,
        1,0,0,0,3467,3357,1,0,0,0,3467,3361,1,0,0,0,3467,3371,1,0,0,0,3467,
        3375,1,0,0,0,3467,3403,1,0,0,0,3467,3407,1,0,0,0,3467,3419,1,0,0,
        0,3467,3420,1,0,0,0,3467,3424,1,0,0,0,3467,3431,1,0,0,0,3467,3442,
        1,0,0,0,3467,3454,1,0,0,0,3468,3479,1,0,0,0,3469,3470,10,8,0,0,3470,
        3471,5,5,0,0,3471,3472,3,344,172,0,3472,3473,5,6,0,0,3473,3478,1,
        0,0,0,3474,3475,10,6,0,0,3475,3476,5,7,0,0,3476,3478,3,412,206,0,
        3477,3469,1,0,0,0,3477,3474,1,0,0,0,3478,3481,1,0,0,0,3479,3477,
        1,0,0,0,3479,3480,1,0,0,0,3480,347,1,0,0,0,3481,3479,1,0,0,0,3482,
        3495,5,195,0,0,3483,3495,3,360,180,0,3484,3485,3,412,206,0,3485,
        3486,5,325,0,0,3486,3495,1,0,0,0,3487,3495,3,418,209,0,3488,3495,
        3,358,179,0,3489,3491,5,325,0,0,3490,3489,1,0,0,0,3491,3492,1,0,
        0,0,3492,3490,1,0,0,0,3492,3493,1,0,0,0,3493,3495,1,0,0,0,3494,3482,
        1,0,0,0,3494,3483,1,0,0,0,3494,3484,1,0,0,0,3494,3487,1,0,0,0,3494,
        3488,1,0,0,0,3494,3490,1,0,0,0,3495,349,1,0,0,0,3496,3505,3,352,
        176,0,3497,3505,5,308,0,0,3498,3505,5,309,0,0,3499,3505,5,310,0,
        0,3500,3505,5,311,0,0,3501,3505,5,312,0,0,3502,3505,5,313,0,0,3503,
        3505,5,307,0,0,3504,3496,1,0,0,0,3504,3497,1,0,0,0,3504,3498,1,0,
        0,0,3504,3499,1,0,0,0,3504,3500,1,0,0,0,3504,3501,1,0,0,0,3504,3502,
        1,0,0,0,3504,3503,1,0,0,0,3505,351,1,0,0,0,3506,3507,7,40,0,0,3507,
        353,1,0,0,0,3508,3509,7,41,0,0,3509,355,1,0,0,0,3510,3511,7,42,0,
        0,3511,357,1,0,0,0,3512,3513,7,43,0,0,3513,359,1,0,0,0,3514,3517,
        5,162,0,0,3515,3518,3,362,181,0,3516,3518,3,366,183,0,3517,3515,
        1,0,0,0,3517,3516,1,0,0,0,3517,3518,1,0,0,0,3518,361,1,0,0,0,3519,
        3521,3,364,182,0,3520,3522,3,368,184,0,3521,3520,1,0,0,0,3521,3522,
        1,0,0,0,3522,363,1,0,0,0,3523,3524,3,370,185,0,3524,3525,3,372,186,
        0,3525,3527,1,0,0,0,3526,3523,1,0,0,0,3527,3528,1,0,0,0,3528,3526,
        1,0,0,0,3528,3529,1,0,0,0,3529,365,1,0,0,0,3530,3533,3,368,184,0,
        3531,3534,3,364,182,0,3532,3534,3,368,184,0,3533,3531,1,0,0,0,3533,
        3532,1,0,0,0,3533,3534,1,0,0,0,3534,367,1,0,0,0,3535,3536,3,370,
        185,0,3536,3537,3,372,186,0,3537,3538,5,275,0,0,3538,3539,3,372,
        186,0,3539,369,1,0,0,0,3540,3542,7,44,0,0,3541,3540,1,0,0,0,3541,
        3542,1,0,0,0,3542,3543,1,0,0,0,3543,3546,7,7,0,0,3544,3546,5,325,
        0,0,3545,3541,1,0,0,0,3545,3544,1,0,0,0,3546,371,1,0,0,0,3547,3555,
        5,105,0,0,3548,3555,5,150,0,0,3549,3555,5,187,0,0,3550,3555,5,188,
        0,0,3551,3555,5,246,0,0,3552,3555,5,304,0,0,3553,3555,3,412,206,
        0,3554,3547,1,0,0,0,3554,3548,1,0,0,0,3554,3549,1,0,0,0,3554,3550,
        1,0,0,0,3554,3551,1,0,0,0,3554,3552,1,0,0,0,3554,3553,1,0,0,0,3555,
        373,1,0,0,0,3556,3560,5,135,0,0,3557,3558,5,54,0,0,3558,3560,3,408,
        204,0,3559,3556,1,0,0,0,3559,3557,1,0,0,0,3560,375,1,0,0,0,3561,
        3562,5,62,0,0,3562,3563,5,310,0,0,3563,3564,3,376,188,0,3564,3565,
        5,312,0,0,3565,3596,1,0,0,0,3566,3567,5,184,0,0,3567,3568,5,310,
        0,0,3568,3569,3,376,188,0,3569,3570,5,1,0,0,3570,3571,3,376,188,
        0,3571,3572,5,312,0,0,3572,3596,1,0,0,0,3573,3580,5,265,0,0,3574,
        3576,5,310,0,0,3575,3577,3,386,193,0,3576,3575,1,0,0,0,3576,3577,
        1,0,0,0,3577,3578,1,0,0,0,3578,3581,5,312,0,0,3579,3581,5,308,0,
        0,3580,3574,1,0,0,0,3580,3579,1,0,0,0,3581,3596,1,0,0,0,3582,3593,
        3,412,206,0,3583,3584,5,3,0,0,3584,3589,5,329,0,0,3585,3586,5,1,
        0,0,3586,3588,5,329,0,0,3587,3585,1,0,0,0,3588,3591,1,0,0,0,3589,
        3587,1,0,0,0,3589,3590,1,0,0,0,3590,3592,1,0,0,0,3591,3589,1,0,0,
        0,3592,3594,5,4,0,0,3593,3583,1,0,0,0,3593,3594,1,0,0,0,3594,3596,
        1,0,0,0,3595,3561,1,0,0,0,3595,3566,1,0,0,0,3595,3573,1,0,0,0,3595,
        3582,1,0,0,0,3596,377,1,0,0,0,3597,3602,3,380,190,0,3598,3599,5,
        1,0,0,3599,3601,3,380,190,0,3600,3598,1,0,0,0,3601,3604,1,0,0,0,
        3602,3600,1,0,0,0,3602,3603,1,0,0,0,3603,379,1,0,0,0,3604,3602,1,
        0,0,0,3605,3606,3,322,161,0,3606,3609,3,376,188,0,3607,3608,5,194,
        0,0,3608,3610,5,195,0,0,3609,3607,1,0,0,0,3609,3610,1,0,0,0,3610,
        3612,1,0,0,0,3611,3613,3,178,89,0,3612,3611,1,0,0,0,3612,3613,1,
        0,0,0,3613,3615,1,0,0,0,3614,3616,3,374,187,0,3615,3614,1,0,0,0,
        3615,3616,1,0,0,0,3616,381,1,0,0,0,3617,3622,3,384,192,0,3618,3619,
        5,1,0,0,3619,3621,3,384,192,0,3620,3618,1,0,0,0,3621,3624,1,0,0,
        0,3622,3620,1,0,0,0,3622,3623,1,0,0,0,3623,383,1,0,0,0,3624,3622,
        1,0,0,0,3625,3626,3,408,204,0,3626,3629,3,376,188,0,3627,3628,5,
        194,0,0,3628,3630,5,195,0,0,3629,3627,1,0,0,0,3629,3630,1,0,0,0,
        3630,3632,1,0,0,0,3631,3633,3,178,89,0,3632,3631,1,0,0,0,3632,3633,
        1,0,0,0,3633,385,1,0,0,0,3634,3639,3,388,194,0,3635,3636,5,1,0,0,
        3636,3638,3,388,194,0,3637,3635,1,0,0,0,3638,3641,1,0,0,0,3639,3637,
        1,0,0,0,3639,3640,1,0,0,0,3640,387,1,0,0,0,3641,3639,1,0,0,0,3642,
        3643,3,412,206,0,3643,3644,5,2,0,0,3644,3647,3,376,188,0,3645,3646,
        5,194,0,0,3646,3648,5,195,0,0,3647,3645,1,0,0,0,3647,3648,1,0,0,
        0,3648,3650,1,0,0,0,3649,3651,3,178,89,0,3650,3649,1,0,0,0,3650,
        3651,1,0,0,0,3651,389,1,0,0,0,3652,3653,5,300,0,0,3653,3654,3,338,
        169,0,3654,3655,5,274,0,0,3655,3656,3,338,169,0,3656,391,1,0,0,0,
        3657,3658,5,302,0,0,3658,3663,3,394,197,0,3659,3660,5,1,0,0,3660,
        3662,3,394,197,0,3661,3659,1,0,0,0,3662,3665,1,0,0,0,3663,3661,1,
        0,0,0,3663,3664,1,0,0,0,3664,393,1,0,0,0,3665,3663,1,0,0,0,3666,
        3667,3,408,204,0,3667,3668,5,63,0,0,3668,3669,3,396,198,0,3669,395,
        1,0,0,0,3670,3717,3,408,204,0,3671,3672,5,3,0,0,3672,3673,3,408,
        204,0,3673,3674,5,4,0,0,3674,3717,1,0,0,0,3675,3710,5,3,0,0,3676,
        3677,5,79,0,0,3677,3678,5,71,0,0,3678,3683,3,338,169,0,3679,3680,
        5,1,0,0,3680,3682,3,338,169,0,3681,3679,1,0,0,0,3682,3685,1,0,0,
        0,3683,3681,1,0,0,0,3683,3684,1,0,0,0,3684,3711,1,0,0,0,3685,3683,
        1,0,0,0,3686,3687,7,45,0,0,3687,3688,5,71,0,0,3688,3693,3,338,169,
        0,3689,3690,5,1,0,0,3690,3692,3,338,169,0,3691,3689,1,0,0,0,3692,
        3695,1,0,0,0,3693,3691,1,0,0,0,3693,3694,1,0,0,0,3694,3697,1,0,0,
        0,3695,3693,1,0,0,0,3696,3686,1,0,0,0,3696,3697,1,0,0,0,3697,3708,
        1,0,0,0,3698,3699,7,46,0,0,3699,3700,5,71,0,0,3700,3705,3,234,117,
        0,3701,3702,5,1,0,0,3702,3704,3,234,117,0,3703,3701,1,0,0,0,3704,
        3707,1,0,0,0,3705,3703,1,0,0,0,3705,3706,1,0,0,0,3706,3709,1,0,0,
        0,3707,3705,1,0,0,0,3708,3698,1,0,0,0,3708,3709,1,0,0,0,3709,3711,
        1,0,0,0,3710,3676,1,0,0,0,3710,3696,1,0,0,0,3711,3713,1,0,0,0,3712,
        3714,3,398,199,0,3713,3712,1,0,0,0,3713,3714,1,0,0,0,3714,3715,1,
        0,0,0,3715,3717,5,4,0,0,3716,3670,1,0,0,0,3716,3671,1,0,0,0,3716,
        3675,1,0,0,0,3717,397,1,0,0,0,3718,3719,5,224,0,0,3719,3735,3,400,
        200,0,3720,3721,5,244,0,0,3721,3735,3,400,200,0,3722,3723,5,224,
        0,0,3723,3724,5,67,0,0,3724,3725,3,400,200,0,3725,3726,5,58,0,0,
        3726,3727,3,400,200,0,3727,3735,1,0,0,0,3728,3729,5,244,0,0,3729,
        3730,5,67,0,0,3730,3731,3,400,200,0,3731,3732,5,58,0,0,3732,3733,
        3,400,200,0,3733,3735,1,0,0,0,3734,3718,1,0,0,0,3734,3720,1,0,0,
        0,3734,3722,1,0,0,0,3734,3728,1,0,0,0,3735,399,1,0,0,0,3736,3737,
        5,286,0,0,3737,3744,7,47,0,0,3738,3739,5,97,0,0,3739,3744,5,243,
        0,0,3740,3741,3,338,169,0,3741,3742,7,47,0,0,3742,3744,1,0,0,0,3743,
        3736,1,0,0,0,3743,3738,1,0,0,0,3743,3740,1,0,0,0,3744,401,1,0,0,
        0,3745,3750,3,406,203,0,3746,3747,5,1,0,0,3747,3749,3,406,203,0,
        3748,3746,1,0,0,0,3749,3752,1,0,0,0,3750,3748,1,0,0,0,3750,3751,
        1,0,0,0,3751,403,1,0,0,0,3752,3750,1,0,0,0,3753,3758,3,406,203,0,
        3754,3758,5,133,0,0,3755,3758,5,172,0,0,3756,3758,5,237,0,0,3757,
        3753,1,0,0,0,3757,3754,1,0,0,0,3757,3755,1,0,0,0,3757,3756,1,0,0,
        0,3758,405,1,0,0,0,3759,3764,3,412,206,0,3760,3761,5,7,0,0,3761,
        3763,3,412,206,0,3762,3760,1,0,0,0,3763,3766,1,0,0,0,3764,3762,1,
        0,0,0,3764,3765,1,0,0,0,3765,407,1,0,0,0,3766,3764,1,0,0,0,3767,
        3768,3,412,206,0,3768,409,1,0,0,0,3769,3770,5,315,0,0,3770,3772,
        3,412,206,0,3771,3769,1,0,0,0,3772,3773,1,0,0,0,3773,3771,1,0,0,
        0,3773,3774,1,0,0,0,3774,411,1,0,0,0,3775,3778,3,414,207,0,3776,
        3778,3,424,212,0,3777,3775,1,0,0,0,3777,3776,1,0,0,0,3778,413,1,
        0,0,0,3779,3783,5,334,0,0,3780,3783,3,416,208,0,3781,3783,3,426,
        213,0,3782,3779,1,0,0,0,3782,3780,1,0,0,0,3782,3781,1,0,0,0,3783,
        415,1,0,0,0,3784,3785,5,335,0,0,3785,417,1,0,0,0,3786,3788,5,315,
        0,0,3787,3786,1,0,0,0,3787,3788,1,0,0,0,3788,3789,1,0,0,0,3789,3823,
        5,330,0,0,3790,3792,5,315,0,0,3791,3790,1,0,0,0,3791,3792,1,0,0,
        0,3792,3793,1,0,0,0,3793,3823,5,331,0,0,3794,3796,5,315,0,0,3795,
        3794,1,0,0,0,3795,3796,1,0,0,0,3796,3797,1,0,0,0,3797,3823,7,48,
        0,0,3798,3800,5,315,0,0,3799,3798,1,0,0,0,3799,3800,1,0,0,0,3800,
        3801,1,0,0,0,3801,3823,5,329,0,0,3802,3804,5,315,0,0,3803,3802,1,
        0,0,0,3803,3804,1,0,0,0,3804,3805,1,0,0,0,3805,3823,5,326,0,0,3806,
        3808,5,315,0,0,3807,3806,1,0,0,0,3807,3808,1,0,0,0,3808,3809,1,0,
        0,0,3809,3823,5,327,0,0,3810,3812,5,315,0,0,3811,3810,1,0,0,0,3811,
        3812,1,0,0,0,3812,3813,1,0,0,0,3813,3823,5,328,0,0,3814,3816,5,315,
        0,0,3815,3814,1,0,0,0,3815,3816,1,0,0,0,3816,3817,1,0,0,0,3817,3823,
        5,332,0,0,3818,3820,5,315,0,0,3819,3818,1,0,0,0,3819,3820,1,0,0,
        0,3820,3821,1,0,0,0,3821,3823,5,333,0,0,3822,3787,1,0,0,0,3822,3791,
        1,0,0,0,3822,3795,1,0,0,0,3822,3799,1,0,0,0,3822,3803,1,0,0,0,3822,
        3807,1,0,0,0,3822,3811,1,0,0,0,3822,3815,1,0,0,0,3822,3819,1,0,0,
        0,3823,419,1,0,0,0,3824,3825,5,284,0,0,3825,3832,3,376,188,0,3826,
        3832,3,178,89,0,3827,3832,3,374,187,0,3828,3829,7,49,0,0,3829,3830,
        5,194,0,0,3830,3832,5,195,0,0,3831,3824,1,0,0,0,3831,3826,1,0,0,
        0,3831,3827,1,0,0,0,3831,3828,1,0,0,0,3832,421,1,0,0,0,3833,3834,
        7,50,0,0,3834,423,1,0,0,0,3835,3836,7,51,0,0,3836,425,1,0,0,0,3837,
        3838,7,52,0,0,3838,427,1,0,0,0,518,431,444,447,451,454,457,473,477,
        480,485,489,492,500,503,507,510,514,521,528,535,539,548,552,559,
        563,568,572,577,581,586,590,595,599,603,610,618,622,626,630,633,
        638,645,648,652,656,659,663,665,669,672,676,679,683,687,690,695,
        699,702,706,711,716,722,731,736,739,742,745,749,752,755,758,763,
        766,769,772,774,782,786,791,793,802,810,813,821,827,832,844,848,
        853,857,864,871,881,884,890,894,897,904,906,916,923,927,931,936,
        941,944,951,959,964,973,981,987,992,1000,1005,1012,1036,1047,1056,
        1062,1069,1078,1086,1090,1096,1104,1120,1145,1150,1158,1166,1168,
        1188,1192,1198,1201,1204,1211,1216,1219,1226,1238,1247,1249,1253,
        1256,1263,1274,1276,1284,1289,1292,1298,1309,1373,1382,1386,1392,
        1396,1401,1407,1419,1427,1433,1446,1451,1467,1474,1478,1484,1499,
        1503,1509,1515,1518,1521,1527,1531,1539,1541,1550,1553,1562,1567,
        1573,1580,1583,1589,1600,1603,1607,1612,1617,1624,1627,1630,1637,
        1642,1651,1659,1665,1668,1671,1677,1681,1685,1689,1691,1699,1707,
        1713,1719,1722,1726,1729,1733,1758,1761,1765,1771,1774,1777,1783,
        1791,1796,1802,1808,1820,1823,1830,1837,1845,1848,1856,1860,1867,
        1983,1991,1999,2008,2018,2022,2025,2031,2037,2049,2061,2066,2075,
        2078,2086,2093,2095,2100,2104,2109,2114,2119,2122,2127,2131,2136,
        2138,2142,2151,2159,2168,2175,2184,2189,2192,2211,2213,2222,2229,
        2232,2239,2243,2249,2257,2268,2279,2286,2292,2305,2312,2319,2331,
        2339,2345,2348,2357,2360,2369,2372,2381,2384,2393,2396,2399,2404,
        2406,2414,2419,2425,2431,2434,2436,2444,2448,2452,2458,2462,2470,
        2474,2477,2480,2483,2487,2492,2499,2503,2506,2509,2512,2514,2517,
        2529,2532,2536,2546,2550,2552,2555,2559,2565,2569,2580,2590,2602,
        2617,2622,2629,2645,2650,2663,2668,2676,2682,2686,2695,2710,2715,
        2727,2732,2740,2743,2747,2761,2774,2779,2783,2786,2791,2800,2803,
        2808,2815,2818,2826,2833,2840,2843,2848,2851,2856,2860,2863,2866,
        2872,2877,2882,2900,2902,2905,2916,2925,2932,2940,2947,2951,2954,
        2962,2970,2976,2984,2996,2999,3005,3009,3011,3020,3032,3034,3041,
        3048,3054,3060,3062,3069,3077,3083,3090,3096,3100,3102,3109,3118,
        3131,3136,3140,3154,3156,3164,3166,3170,3178,3187,3193,3201,3206,
        3218,3223,3226,3232,3236,3241,3246,3251,3257,3278,3280,3289,3293,
        3302,3306,3324,3327,3335,3344,3367,3378,3385,3388,3397,3401,3413,
        3438,3445,3448,3463,3467,3477,3479,3492,3494,3504,3517,3521,3528,
        3533,3541,3545,3554,3559,3576,3580,3589,3593,3595,3602,3609,3612,
        3615,3622,3629,3632,3639,3647,3650,3663,3683,3693,3696,3705,3708,
        3710,3713,3716,3734,3743,3750,3757,3764,3773,3777,3782,3787,3791,
        3795,3799,3803,3807,3811,3815,3819,3822,3831
    ]

class fugue_sqlParser ( Parser ):

    grammarFileName = "fugue_sql.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "','", "':'", "'('", "')'", "'['", "']'", 
                     "'.'", "'{'", "'}'", "'true'", "'false'", "'null'", 
                     "';'", "'/*+'", "'*/'", "'->'", "'FILL'", "'TAKE'", 
                     "'HASH'", "'RAND'", "'EVEN'", "'PRESORT'", "'PERSIST'", 
                     "'BROADCAST'", "'PARAMS'", "'PROCESS'", "'OUTPUT'", 
                     "'OUTTRANSFORM'", "'ROWCOUNT'", "'CONCURRENCY'", "'PREPARTITION'", 
                     "'ZIP'", "'PRINT'", "'TITLE'", "'SAVE'", "'APPEND'", 
                     "'PARQUET'", "'CSV'", "'JSON'", "'SINGLE'", "'CHECKPOINT'", 
                     "'WEAK'", "'STRONG'", "'DETERMINISTIC'", "'YIELD'", 
                     "'CONNECT'", "'SAMPLE'", "'SEED'", "'SUB'", "'CALLBACK'", 
                     "'DATAFRAME'", "'FILE'", "'ADD'", "'AFTER'", "'ALL'", 
                     "'ALTER'", "'ANALYZE'", "'AND'", "'ANTI'", "'ANY'", 
                     "'ARCHIVE'", "'ARRAY'", "'AS'", "'ASC'", "'AT'", "'AUTHORIZATION'", 
                     "'BETWEEN'", "'BOTH'", "'BUCKET'", "'BUCKETS'", "'BY'", 
                     "'CACHE'", "'CASCADE'", "'CASE'", "<INVALID>", "'CHANGE'", 
                     "'CHECK'", "'CLEAR'", "'CLUSTER'", "'CLUSTERED'", "'CODEGEN'", 
                     "'COLLATE'", "'COLLECTION'", "'COLUMN'", "'COLUMNS'", 
                     "'COMMENT'", "'COMMIT'", "'COMPACT'", "'COMPACTIONS'", 
                     "'COMPUTE'", "'CONCATENATE'", "'CONSTRAINT'", "'COST'", 
                     "'CREATE'", "'CROSS'", "'CUBE'", "'CURRENT'", "'CURRENT_DATE'", 
                     "'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", "'CURRENT_USER'", 
                     "'DATA'", "'DATABASE'", "<INVALID>", "'DAY'", "'DBPROPERTIES'", 
                     "'DEFINED'", "'DELETE'", "'DELIMITED'", "'DESC'", "'DESCRIBE'", 
                     "'DFS'", "'DIRECTORIES'", "'DIRECTORY'", "'DISTINCT'", 
                     "'DISTRIBUTE'", "'DROP'", "'ELSE'", "'END'", "'ESCAPE'", 
                     "'ESCAPED'", "'EXCEPT'", "'EXCHANGE'", "'EXISTS'", 
                     "'EXPLAIN'", "'EXPORT'", "'EXTENDED'", "'EXTERNAL'", 
                     "'EXTRACT'", "'FALSE'", "'FETCH'", "'FIELDS'", "'FILTER'", 
                     "'FILEFORMAT'", "'FIRST'", "'FOLLOWING'", "'FOR'", 
                     "'FOREIGN'", "'FORMAT'", "'FORMATTED'", "'FROM'", "'FULL'", 
                     "'FUNCTION'", "'FUNCTIONS'", "'GLOBAL'", "'GRANT'", 
                     "'GROUP'", "'GROUPING'", "'HAVING'", "'HOUR'", "'IF'", 
                     "'IGNORE'", "'IMPORT'", "'IN'", "'INDEX'", "'INDEXES'", 
                     "'INNER'", "'INPATH'", "'INPUTFORMAT'", "'INSERT'", 
                     "'INTERSECT'", "'INTERVAL'", "'INTO'", "'IS'", "'ITEMS'", 
                     "'JOIN'", "'KEYS'", "'LAST'", "'LATERAL'", "'LAZY'", 
                     "'LEADING'", "'LEFT'", "'LIKE'", "'LIMIT'", "'LINES'", 
                     "'LIST'", "'LOAD'", "'LOCAL'", "'LOCATION'", "'LOCK'", 
                     "'LOCKS'", "'LOGICAL'", "'MACRO'", "'MAP'", "'MATCHED'", 
                     "'MERGE'", "'MINUTE'", "'MONTH'", "'MSCK'", "'NAMESPACE'", 
                     "'NAMESPACES'", "'NATURAL'", "'NO'", "<INVALID>", "'NULL'", 
                     "'NULLS'", "'OF'", "'ON'", "'ONLY'", "'OPTION'", "'OPTIONS'", 
                     "'OR'", "'ORDER'", "'OUT'", "'OUTER'", "'OUTPUTFORMAT'", 
                     "'OVER'", "'OVERLAPS'", "'OVERLAY'", "'OVERWRITE'", 
                     "'PARTITION'", "'PARTITIONED'", "'PARTITIONS'", "'PERCENT'", 
                     "'PIVOT'", "'PLACING'", "'POSITION'", "'PRECEDING'", 
                     "'PRIMARY'", "'PRINCIPALS'", "'PROPERTIES'", "'PURGE'", 
                     "'QUERY'", "'RANGE'", "'RECORDREADER'", "'RECORDWRITER'", 
                     "'RECOVER'", "'REDUCE'", "'REFERENCES'", "'REFRESH'", 
                     "'RENAME'", "'REPAIR'", "'REPLACE'", "'RESET'", "'RESTRICT'", 
                     "'REVOKE'", "'RIGHT'", "<INVALID>", "'ROLE'", "'ROLES'", 
                     "'ROLLBACK'", "'ROLLUP'", "'ROW'", "'ROWS'", "'SCHEMA'", 
                     "'SECOND'", "'SELECT'", "'SEMI'", "'SEPARATED'", "'SERDE'", 
                     "'SERDEPROPERTIES'", "'SESSION_USER'", "'SET'", "'MINUS'", 
                     "'SETS'", "'SHOW'", "'SKEWED'", "'SOME'", "'SORT'", 
                     "'SORTED'", "'START'", "'STATISTICS'", "'STORED'", 
                     "'STRATIFY'", "'STRUCT'", "'SUBSTR'", "'SUBSTRING'", 
                     "'TABLE'", "'TABLES'", "'TABLESAMPLE'", "'TBLPROPERTIES'", 
                     "<INVALID>", "'TERMINATED'", "'THEN'", "'TO'", "'TOUCH'", 
                     "'TRAILING'", "'TRANSACTION'", "'TRANSACTIONS'", "'TRANSFORM'", 
                     "'TRIM'", "'TRUE'", "'TRUNCATE'", "'TYPE'", "'UNARCHIVE'", 
                     "'UNBOUNDED'", "'UNCACHE'", "'UNION'", "'UNIQUE'", 
                     "'UNKNOWN'", "'UNLOCK'", "'UNSET'", "'UPDATE'", "'USE'", 
                     "'USER'", "'USING'", "'VALUES'", "'VIEW'", "'VIEWS'", 
                     "'WHEN'", "'WHERE'", "'WINDOW'", "'WITH'", "'YEAR'", 
                     "'='", "'=='", "'<=>'", "'<>'", "'!='", "'<'", "<INVALID>", 
                     "'>'", "<INVALID>", "'+'", "'-'", "'*'", "'/'", "'%'", 
                     "'DIV'", "'~'", "'&'", "'|'", "'||'", "'^'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "FILL", "TAKE", "HASH", "RAND", "EVEN", 
                      "PRESORT", "PERSIST", "BROADCAST", "PARAMS", "PROCESS", 
                      "OUTPUT", "OUTTRANSFORM", "ROWCOUNT", "CONCURRENCY", 
                      "PREPARTITION", "ZIP", "PRINT", "TITLE", "SAVE", "APPEND", 
                      "PARQUET", "CSV", "JSON", "SINGLE", "CHECKPOINT", 
                      "WEAK", "STRONG", "DETERMINISTIC", "YIELD", "CONNECT", 
                      "SAMPLE", "SEED", "SUB", "CALLBACK", "DATAFRAME", 
                      "FILE", "ADD", "AFTER", "ALL", "ALTER", "ANALYZE", 
                      "AND", "ANTI", "ANY", "ARCHIVE", "ARRAY", "AS", "ASC", 
                      "AT", "AUTHORIZATION", "BETWEEN", "BOTH", "BUCKET", 
                      "BUCKETS", "BY", "CACHE", "CASCADE", "CASE", "CAST", 
                      "CHANGE", "CHECK", "CLEAR", "CLUSTER", "CLUSTERED", 
                      "CODEGEN", "COLLATE", "COLLECTION", "COLUMN", "COLUMNS", 
                      "COMMENT", "COMMIT", "COMPACT", "COMPACTIONS", "COMPUTE", 
                      "CONCATENATE", "CONSTRAINT", "COST", "CREATE", "CROSS", 
                      "CUBE", "CURRENT", "CURRENT_DATE", "CURRENT_TIME", 
                      "CURRENT_TIMESTAMP", "CURRENT_USER", "DATA", "DATABASE", 
                      "DATABASES", "DAY", "DBPROPERTIES", "DEFINED", "DELETE", 
                      "DELIMITED", "DESC", "DESCRIBE", "DFS", "DIRECTORIES", 
                      "DIRECTORY", "DISTINCT", "DISTRIBUTE", "DROP", "ELSE", 
                      "END", "ESCAPE", "ESCAPED", "EXCEPT", "EXCHANGE", 
                      "EXISTS", "EXPLAIN", "EXPORT", "EXTENDED", "EXTERNAL", 
                      "EXTRACT", "FALSE", "FETCH", "FIELDS", "FILTER", "FILEFORMAT", 
                      "FIRST", "FOLLOWING", "FOR", "FOREIGN", "FORMAT", 
                      "FORMATTED", "FROM", "FULL", "FUNCTION", "FUNCTIONS", 
                      "GLOBAL", "GRANT", "GROUP", "GROUPING", "HAVING", 
                      "HOUR", "IF", "IGNORE", "IMPORT", "IN", "INDEX", "INDEXES", 
                      "INNER", "INPATH", "INPUTFORMAT", "INSERT", "INTERSECT", 
                      "INTERVAL", "INTO", "IS", "ITEMS", "JOIN", "KEYS", 
                      "LAST", "LATERAL", "LAZY", "LEADING", "LEFT", "LIKE", 
                      "LIMIT", "LINES", "LIST", "LOAD", "LOCAL", "LOCATION", 
                      "LOCK", "LOCKS", "LOGICAL", "MACRO", "MAP", "MATCHED", 
                      "MERGE", "MINUTE", "MONTH", "MSCK", "NAMESPACE", "NAMESPACES", 
                      "NATURAL", "NO", "NOT", "THENULL", "THENULLS", "OF", 
                      "ON", "ONLY", "OPTION", "OPTIONS", "OR", "ORDER", 
                      "OUT", "OUTER", "OUTPUTFORMAT", "OVER", "OVERLAPS", 
                      "OVERLAY", "OVERWRITE", "PARTITION", "PARTITIONED", 
                      "PARTITIONS", "PERCENTLIT", "PIVOT", "PLACING", "POSITION", 
                      "PRECEDING", "PRIMARY", "PRINCIPALS", "PROPERTIES", 
                      "PURGE", "QUERY", "RANGE", "RECORDREADER", "RECORDWRITER", 
                      "RECOVER", "REDUCE", "REFERENCES", "REFRESH", "RENAME", 
                      "REPAIR", "REPLACE", "RESET", "RESTRICT", "REVOKE", 
                      "RIGHT", "RLIKE", "ROLE", "ROLES", "ROLLBACK", "ROLLUP", 
                      "ROW", "ROWS", "SCHEMA", "SECOND", "SELECT", "SEMI", 
                      "SEPARATED", "SERDE", "SERDEPROPERTIES", "SESSION_USER", 
                      "SET", "SETMINUS", "SETS", "SHOW", "SKEWED", "SOME", 
                      "SORT", "SORTED", "START", "STATISTICS", "STORED", 
                      "STRATIFY", "STRUCT", "SUBSTR", "SUBSTRING", "TABLE", 
                      "TABLES", "TABLESAMPLE", "TBLPROPERTIES", "TEMPORARY", 
                      "TERMINATED", "THEN", "TO", "TOUCH", "TRAILING", "TRANSACTION", 
                      "TRANSACTIONS", "TRANSFORM", "TRIM", "TRUE", "TRUNCATE", 
                      "TYPE", "UNARCHIVE", "UNBOUNDED", "UNCACHE", "UNION", 
                      "UNIQUE", "UNKNOWN", "UNLOCK", "UNSET", "UPDATE", 
                      "USE", "USER", "USING", "VALUES", "VIEW", "VIEWS", 
                      "WHEN", "WHERE", "WINDOW", "WITH", "YEAR", "EQUAL", 
                      "DOUBLEEQUAL", "NSEQ", "NEQ", "NEQJ", "LT", "LTE", 
                      "GT", "GTE", "PLUS", "MINUS", "ASTERISK", "SLASH", 
                      "PERCENT", "DIV", "TILDE", "AMPERSAND", "PIPE", "CONCAT_PIPE", 
                      "HAT", "STRING", "BIGINT_LITERAL", "SMALLINT_LITERAL", 
                      "TINYINT_LITERAL", "INTEGER_VALUE", "EXPONENT_VALUE", 
                      "DECIMAL_VALUE", "DOUBLE_LITERAL", "BIGDECIMAL_LITERAL", 
                      "IDENTIFIER", "BACKQUOTED_IDENTIFIER", "SIMPLE_COMMENT", 
                      "BRACKETED_COMMENT", "WS", "UNRECOGNIZED" ]

    RULE_fugueLanguage = 0
    RULE_fugueSingleStatement = 1
    RULE_fugueSingleTask = 2
    RULE_fugueNestableTask = 3
    RULE_fugueNestableTaskCollectionNoSelect = 4
    RULE_fugueTransformTask = 5
    RULE_fugueProcessTask = 6
    RULE_fugueSaveAndUseTask = 7
    RULE_fugueRenameColumnsTask = 8
    RULE_fugueAlterColumnsTask = 9
    RULE_fugueDropColumnsTask = 10
    RULE_fugueDropnaTask = 11
    RULE_fugueFillnaTask = 12
    RULE_fugueSampleTask = 13
    RULE_fugueTakeTask = 14
    RULE_fugueZipTask = 15
    RULE_fugueCreateTask = 16
    RULE_fugueCreateDataTask = 17
    RULE_fugueLoadTask = 18
    RULE_fugueOutputTask = 19
    RULE_fuguePrintTask = 20
    RULE_fugueSaveTask = 21
    RULE_fugueOutputTransformTask = 22
    RULE_fugueModuleTask = 23
    RULE_fugueSqlEngine = 24
    RULE_fugueSingleFile = 25
    RULE_fugueLoadColumns = 26
    RULE_fugueSaveMode = 27
    RULE_fugueFileFormat = 28
    RULE_fuguePath = 29
    RULE_fugueCheckpoint = 30
    RULE_fugueCheckpointNamespace = 31
    RULE_fugueYield = 32
    RULE_fugueBroadcast = 33
    RULE_fugueDataFrames = 34
    RULE_fugueDataFramePair = 35
    RULE_fugueDataFrame = 36
    RULE_fugueDataFrameMember = 37
    RULE_fugueAssignment = 38
    RULE_fugueAssignmentSign = 39
    RULE_fugueSingleOutputExtensionCommonWild = 40
    RULE_fugueSingleOutputExtensionCommon = 41
    RULE_fugueExtension = 42
    RULE_fugueSampleMethod = 43
    RULE_fugueZipType = 44
    RULE_fuguePrepartition = 45
    RULE_fuguePartitionAlgo = 46
    RULE_fuguePartitionNum = 47
    RULE_fuguePartitionNumber = 48
    RULE_fugueParams = 49
    RULE_fugueCols = 50
    RULE_fugueColsSort = 51
    RULE_fugueColSort = 52
    RULE_fugueColumnIdentifier = 53
    RULE_fugueRenameExpression = 54
    RULE_fugueWildSchema = 55
    RULE_fugueWildSchemaPair = 56
    RULE_fugueSchemaOp = 57
    RULE_fugueSchema = 58
    RULE_fugueSchemaPair = 59
    RULE_fugueSchemaKey = 60
    RULE_fugueSchemaType = 61
    RULE_fugueRenamePair = 62
    RULE_fugueJson = 63
    RULE_fugueJsonObj = 64
    RULE_fugueJsonPairs = 65
    RULE_fugueJsonPair = 66
    RULE_fugueJsonKey = 67
    RULE_fugueJsonArray = 68
    RULE_fugueJsonValue = 69
    RULE_fugueJsonNumber = 70
    RULE_fugueJsonString = 71
    RULE_fugueJsonBool = 72
    RULE_fugueJsonNull = 73
    RULE_fugueIdentifier = 74
    RULE_singleStatement = 75
    RULE_singleExpression = 76
    RULE_singleTableIdentifier = 77
    RULE_singleMultipartIdentifier = 78
    RULE_singleFunctionIdentifier = 79
    RULE_singleDataType = 80
    RULE_singleTableSchema = 81
    RULE_statement = 82
    RULE_unsupportedHiveNativeCommands = 83
    RULE_createTableHeader = 84
    RULE_replaceTableHeader = 85
    RULE_bucketSpec = 86
    RULE_skewSpec = 87
    RULE_locationSpec = 88
    RULE_commentSpec = 89
    RULE_query = 90
    RULE_insertInto = 91
    RULE_partitionSpecLocation = 92
    RULE_partitionSpec = 93
    RULE_partitionVal = 94
    RULE_theNamespace = 95
    RULE_describeFuncName = 96
    RULE_describeColName = 97
    RULE_ctes = 98
    RULE_namedQuery = 99
    RULE_tableProvider = 100
    RULE_createTableClauses = 101
    RULE_tablePropertyList = 102
    RULE_tableProperty = 103
    RULE_tablePropertyKey = 104
    RULE_tablePropertyValue = 105
    RULE_constantList = 106
    RULE_nestedConstantList = 107
    RULE_createFileFormat = 108
    RULE_fileFormat = 109
    RULE_storageHandler = 110
    RULE_resource = 111
    RULE_dmlStatementNoWith = 112
    RULE_queryOrganization = 113
    RULE_multiInsertQueryBody = 114
    RULE_queryTerm = 115
    RULE_queryPrimary = 116
    RULE_sortItem = 117
    RULE_fromStatement = 118
    RULE_fromStatementBody = 119
    RULE_querySpecification = 120
    RULE_optionalFromClause = 121
    RULE_transformClause = 122
    RULE_selectClause = 123
    RULE_setClause = 124
    RULE_matchedClause = 125
    RULE_notMatchedClause = 126
    RULE_matchedAction = 127
    RULE_notMatchedAction = 128
    RULE_assignmentList = 129
    RULE_assignment = 130
    RULE_whereClause = 131
    RULE_havingClause = 132
    RULE_hint = 133
    RULE_hintStatement = 134
    RULE_fromClause = 135
    RULE_aggregationClause = 136
    RULE_groupingSet = 137
    RULE_pivotClause = 138
    RULE_pivotColumn = 139
    RULE_pivotValue = 140
    RULE_lateralView = 141
    RULE_setQuantifier = 142
    RULE_relation = 143
    RULE_joinRelation = 144
    RULE_joinType = 145
    RULE_joinCriteria = 146
    RULE_sample = 147
    RULE_sampleMethod = 148
    RULE_identifierList = 149
    RULE_identifierSeq = 150
    RULE_orderedIdentifierList = 151
    RULE_orderedIdentifier = 152
    RULE_identifierCommentList = 153
    RULE_identifierComment = 154
    RULE_relationPrimary = 155
    RULE_inlineTable = 156
    RULE_functionTable = 157
    RULE_tableAlias = 158
    RULE_rowFormat = 159
    RULE_multipartIdentifierList = 160
    RULE_multipartIdentifier = 161
    RULE_tableIdentifier = 162
    RULE_functionIdentifier = 163
    RULE_namedExpression = 164
    RULE_namedExpressionSeq = 165
    RULE_transformList = 166
    RULE_transform = 167
    RULE_transformArgument = 168
    RULE_expression = 169
    RULE_booleanExpression = 170
    RULE_predicate = 171
    RULE_valueExpression = 172
    RULE_primaryExpression = 173
    RULE_constant = 174
    RULE_comparisonOperator = 175
    RULE_comparisonEqualOperator = 176
    RULE_arithmeticOperator = 177
    RULE_predicateOperator = 178
    RULE_booleanValue = 179
    RULE_interval = 180
    RULE_errorCapturingMultiUnitsInterval = 181
    RULE_multiUnitsInterval = 182
    RULE_errorCapturingUnitToUnitInterval = 183
    RULE_unitToUnitInterval = 184
    RULE_intervalValue = 185
    RULE_intervalUnit = 186
    RULE_colPosition = 187
    RULE_dataType = 188
    RULE_qualifiedColTypeWithPositionList = 189
    RULE_qualifiedColTypeWithPosition = 190
    RULE_colTypeList = 191
    RULE_colType = 192
    RULE_complexColTypeList = 193
    RULE_complexColType = 194
    RULE_whenClause = 195
    RULE_windowClause = 196
    RULE_namedWindow = 197
    RULE_windowSpec = 198
    RULE_windowFrame = 199
    RULE_frameBound = 200
    RULE_qualifiedNameList = 201
    RULE_functionName = 202
    RULE_qualifiedName = 203
    RULE_errorCapturingIdentifier = 204
    RULE_errorCapturingIdentifierExtra = 205
    RULE_identifier = 206
    RULE_strictIdentifier = 207
    RULE_quotedIdentifier = 208
    RULE_number = 209
    RULE_alterColumnAction = 210
    RULE_ansiNonReserved = 211
    RULE_strictNonReserved = 212
    RULE_nonReserved = 213

    ruleNames =  [ "fugueLanguage", "fugueSingleStatement", "fugueSingleTask", 
                   "fugueNestableTask", "fugueNestableTaskCollectionNoSelect", 
                   "fugueTransformTask", "fugueProcessTask", "fugueSaveAndUseTask", 
                   "fugueRenameColumnsTask", "fugueAlterColumnsTask", "fugueDropColumnsTask", 
                   "fugueDropnaTask", "fugueFillnaTask", "fugueSampleTask", 
                   "fugueTakeTask", "fugueZipTask", "fugueCreateTask", "fugueCreateDataTask", 
                   "fugueLoadTask", "fugueOutputTask", "fuguePrintTask", 
                   "fugueSaveTask", "fugueOutputTransformTask", "fugueModuleTask", 
                   "fugueSqlEngine", "fugueSingleFile", "fugueLoadColumns", 
                   "fugueSaveMode", "fugueFileFormat", "fuguePath", "fugueCheckpoint", 
                   "fugueCheckpointNamespace", "fugueYield", "fugueBroadcast", 
                   "fugueDataFrames", "fugueDataFramePair", "fugueDataFrame", 
                   "fugueDataFrameMember", "fugueAssignment", "fugueAssignmentSign", 
                   "fugueSingleOutputExtensionCommonWild", "fugueSingleOutputExtensionCommon", 
                   "fugueExtension", "fugueSampleMethod", "fugueZipType", 
                   "fuguePrepartition", "fuguePartitionAlgo", "fuguePartitionNum", 
                   "fuguePartitionNumber", "fugueParams", "fugueCols", "fugueColsSort", 
                   "fugueColSort", "fugueColumnIdentifier", "fugueRenameExpression", 
                   "fugueWildSchema", "fugueWildSchemaPair", "fugueSchemaOp", 
                   "fugueSchema", "fugueSchemaPair", "fugueSchemaKey", "fugueSchemaType", 
                   "fugueRenamePair", "fugueJson", "fugueJsonObj", "fugueJsonPairs", 
                   "fugueJsonPair", "fugueJsonKey", "fugueJsonArray", "fugueJsonValue", 
                   "fugueJsonNumber", "fugueJsonString", "fugueJsonBool", 
                   "fugueJsonNull", "fugueIdentifier", "singleStatement", 
                   "singleExpression", "singleTableIdentifier", "singleMultipartIdentifier", 
                   "singleFunctionIdentifier", "singleDataType", "singleTableSchema", 
                   "statement", "unsupportedHiveNativeCommands", "createTableHeader", 
                   "replaceTableHeader", "bucketSpec", "skewSpec", "locationSpec", 
                   "commentSpec", "query", "insertInto", "partitionSpecLocation", 
                   "partitionSpec", "partitionVal", "theNamespace", "describeFuncName", 
                   "describeColName", "ctes", "namedQuery", "tableProvider", 
                   "createTableClauses", "tablePropertyList", "tableProperty", 
                   "tablePropertyKey", "tablePropertyValue", "constantList", 
                   "nestedConstantList", "createFileFormat", "fileFormat", 
                   "storageHandler", "resource", "dmlStatementNoWith", "queryOrganization", 
                   "multiInsertQueryBody", "queryTerm", "queryPrimary", 
                   "sortItem", "fromStatement", "fromStatementBody", "querySpecification", 
                   "optionalFromClause", "transformClause", "selectClause", 
                   "setClause", "matchedClause", "notMatchedClause", "matchedAction", 
                   "notMatchedAction", "assignmentList", "assignment", "whereClause", 
                   "havingClause", "hint", "hintStatement", "fromClause", 
                   "aggregationClause", "groupingSet", "pivotClause", "pivotColumn", 
                   "pivotValue", "lateralView", "setQuantifier", "relation", 
                   "joinRelation", "joinType", "joinCriteria", "sample", 
                   "sampleMethod", "identifierList", "identifierSeq", "orderedIdentifierList", 
                   "orderedIdentifier", "identifierCommentList", "identifierComment", 
                   "relationPrimary", "inlineTable", "functionTable", "tableAlias", 
                   "rowFormat", "multipartIdentifierList", "multipartIdentifier", 
                   "tableIdentifier", "functionIdentifier", "namedExpression", 
                   "namedExpressionSeq", "transformList", "transform", "transformArgument", 
                   "expression", "booleanExpression", "predicate", "valueExpression", 
                   "primaryExpression", "constant", "comparisonOperator", 
                   "comparisonEqualOperator", "arithmeticOperator", "predicateOperator", 
                   "booleanValue", "interval", "errorCapturingMultiUnitsInterval", 
                   "multiUnitsInterval", "errorCapturingUnitToUnitInterval", 
                   "unitToUnitInterval", "intervalValue", "intervalUnit", 
                   "colPosition", "dataType", "qualifiedColTypeWithPositionList", 
                   "qualifiedColTypeWithPosition", "colTypeList", "colType", 
                   "complexColTypeList", "complexColType", "whenClause", 
                   "windowClause", "namedWindow", "windowSpec", "windowFrame", 
                   "frameBound", "qualifiedNameList", "functionName", "qualifiedName", 
                   "errorCapturingIdentifier", "errorCapturingIdentifierExtra", 
                   "identifier", "strictIdentifier", "quotedIdentifier", 
                   "number", "alterColumnAction", "ansiNonReserved", "strictNonReserved", 
                   "nonReserved" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    FILL=17
    TAKE=18
    HASH=19
    RAND=20
    EVEN=21
    PRESORT=22
    PERSIST=23
    BROADCAST=24
    PARAMS=25
    PROCESS=26
    OUTPUT=27
    OUTTRANSFORM=28
    ROWCOUNT=29
    CONCURRENCY=30
    PREPARTITION=31
    ZIP=32
    PRINT=33
    TITLE=34
    SAVE=35
    APPEND=36
    PARQUET=37
    CSV=38
    JSON=39
    SINGLE=40
    CHECKPOINT=41
    WEAK=42
    STRONG=43
    DETERMINISTIC=44
    YIELD=45
    CONNECT=46
    SAMPLE=47
    SEED=48
    SUB=49
    CALLBACK=50
    DATAFRAME=51
    FILE=52
    ADD=53
    AFTER=54
    ALL=55
    ALTER=56
    ANALYZE=57
    AND=58
    ANTI=59
    ANY=60
    ARCHIVE=61
    ARRAY=62
    AS=63
    ASC=64
    AT=65
    AUTHORIZATION=66
    BETWEEN=67
    BOTH=68
    BUCKET=69
    BUCKETS=70
    BY=71
    CACHE=72
    CASCADE=73
    CASE=74
    CAST=75
    CHANGE=76
    CHECK=77
    CLEAR=78
    CLUSTER=79
    CLUSTERED=80
    CODEGEN=81
    COLLATE=82
    COLLECTION=83
    COLUMN=84
    COLUMNS=85
    COMMENT=86
    COMMIT=87
    COMPACT=88
    COMPACTIONS=89
    COMPUTE=90
    CONCATENATE=91
    CONSTRAINT=92
    COST=93
    CREATE=94
    CROSS=95
    CUBE=96
    CURRENT=97
    CURRENT_DATE=98
    CURRENT_TIME=99
    CURRENT_TIMESTAMP=100
    CURRENT_USER=101
    DATA=102
    DATABASE=103
    DATABASES=104
    DAY=105
    DBPROPERTIES=106
    DEFINED=107
    DELETE=108
    DELIMITED=109
    DESC=110
    DESCRIBE=111
    DFS=112
    DIRECTORIES=113
    DIRECTORY=114
    DISTINCT=115
    DISTRIBUTE=116
    DROP=117
    ELSE=118
    END=119
    ESCAPE=120
    ESCAPED=121
    EXCEPT=122
    EXCHANGE=123
    EXISTS=124
    EXPLAIN=125
    EXPORT=126
    EXTENDED=127
    EXTERNAL=128
    EXTRACT=129
    FALSE=130
    FETCH=131
    FIELDS=132
    FILTER=133
    FILEFORMAT=134
    FIRST=135
    FOLLOWING=136
    FOR=137
    FOREIGN=138
    FORMAT=139
    FORMATTED=140
    FROM=141
    FULL=142
    FUNCTION=143
    FUNCTIONS=144
    GLOBAL=145
    GRANT=146
    GROUP=147
    GROUPING=148
    HAVING=149
    HOUR=150
    IF=151
    IGNORE=152
    IMPORT=153
    IN=154
    INDEX=155
    INDEXES=156
    INNER=157
    INPATH=158
    INPUTFORMAT=159
    INSERT=160
    INTERSECT=161
    INTERVAL=162
    INTO=163
    IS=164
    ITEMS=165
    JOIN=166
    KEYS=167
    LAST=168
    LATERAL=169
    LAZY=170
    LEADING=171
    LEFT=172
    LIKE=173
    LIMIT=174
    LINES=175
    LIST=176
    LOAD=177
    LOCAL=178
    LOCATION=179
    LOCK=180
    LOCKS=181
    LOGICAL=182
    MACRO=183
    MAP=184
    MATCHED=185
    MERGE=186
    MINUTE=187
    MONTH=188
    MSCK=189
    NAMESPACE=190
    NAMESPACES=191
    NATURAL=192
    NO=193
    NOT=194
    THENULL=195
    THENULLS=196
    OF=197
    ON=198
    ONLY=199
    OPTION=200
    OPTIONS=201
    OR=202
    ORDER=203
    OUT=204
    OUTER=205
    OUTPUTFORMAT=206
    OVER=207
    OVERLAPS=208
    OVERLAY=209
    OVERWRITE=210
    PARTITION=211
    PARTITIONED=212
    PARTITIONS=213
    PERCENTLIT=214
    PIVOT=215
    PLACING=216
    POSITION=217
    PRECEDING=218
    PRIMARY=219
    PRINCIPALS=220
    PROPERTIES=221
    PURGE=222
    QUERY=223
    RANGE=224
    RECORDREADER=225
    RECORDWRITER=226
    RECOVER=227
    REDUCE=228
    REFERENCES=229
    REFRESH=230
    RENAME=231
    REPAIR=232
    REPLACE=233
    RESET=234
    RESTRICT=235
    REVOKE=236
    RIGHT=237
    RLIKE=238
    ROLE=239
    ROLES=240
    ROLLBACK=241
    ROLLUP=242
    ROW=243
    ROWS=244
    SCHEMA=245
    SECOND=246
    SELECT=247
    SEMI=248
    SEPARATED=249
    SERDE=250
    SERDEPROPERTIES=251
    SESSION_USER=252
    SET=253
    SETMINUS=254
    SETS=255
    SHOW=256
    SKEWED=257
    SOME=258
    SORT=259
    SORTED=260
    START=261
    STATISTICS=262
    STORED=263
    STRATIFY=264
    STRUCT=265
    SUBSTR=266
    SUBSTRING=267
    TABLE=268
    TABLES=269
    TABLESAMPLE=270
    TBLPROPERTIES=271
    TEMPORARY=272
    TERMINATED=273
    THEN=274
    TO=275
    TOUCH=276
    TRAILING=277
    TRANSACTION=278
    TRANSACTIONS=279
    TRANSFORM=280
    TRIM=281
    TRUE=282
    TRUNCATE=283
    TYPE=284
    UNARCHIVE=285
    UNBOUNDED=286
    UNCACHE=287
    UNION=288
    UNIQUE=289
    UNKNOWN=290
    UNLOCK=291
    UNSET=292
    UPDATE=293
    USE=294
    USER=295
    USING=296
    VALUES=297
    VIEW=298
    VIEWS=299
    WHEN=300
    WHERE=301
    WINDOW=302
    WITH=303
    YEAR=304
    EQUAL=305
    DOUBLEEQUAL=306
    NSEQ=307
    NEQ=308
    NEQJ=309
    LT=310
    LTE=311
    GT=312
    GTE=313
    PLUS=314
    MINUS=315
    ASTERISK=316
    SLASH=317
    PERCENT=318
    DIV=319
    TILDE=320
    AMPERSAND=321
    PIPE=322
    CONCAT_PIPE=323
    HAT=324
    STRING=325
    BIGINT_LITERAL=326
    SMALLINT_LITERAL=327
    TINYINT_LITERAL=328
    INTEGER_VALUE=329
    EXPONENT_VALUE=330
    DECIMAL_VALUE=331
    DOUBLE_LITERAL=332
    BIGDECIMAL_LITERAL=333
    IDENTIFIER=334
    BACKQUOTED_IDENTIFIER=335
    SIMPLE_COMMENT=336
    BRACKETED_COMMENT=337
    WS=338
    UNRECOGNIZED=339

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class FugueLanguageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(fugue_sqlParser.EOF, 0)

        def fugueSingleTask(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.FugueSingleTaskContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.FugueSingleTaskContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueLanguage

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueLanguage" ):
                return visitor.visitFugueLanguage(self)
            else:
                return visitor.visitChildren(self)




    def fugueLanguage(self):

        localctx = fugue_sqlParser.FugueLanguageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_fugueLanguage)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 429 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 428
                self.fugueSingleTask()
                self.state = 431 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la - 17)) & ~0x3f) == 0 and ((1 << (_la - 17)) & -62813532669) != 0 or (((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & -1) != 0 or (((_la - 145)) & ~0x3f) == 0 and ((1 << (_la - 145)) & -1) != 0 or (((_la - 209)) & ~0x3f) == 0 and ((1 << (_la - 209)) & -1) != 0 or (((_la - 273)) & ~0x3f) == 0 and ((1 << (_la - 273)) & 6917599400680226815) != 0):
                    break

            self.state = 433
            self.match(fugue_sqlParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueSingleStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fugueSingleTask(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSingleTaskContext,0)


        def EOF(self):
            return self.getToken(fugue_sqlParser.EOF, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueSingleStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueSingleStatement" ):
                return visitor.visitFugueSingleStatement(self)
            else:
                return visitor.visitChildren(self)




    def fugueSingleStatement(self):

        localctx = fugue_sqlParser.FugueSingleStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_fugueSingleStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 435
            self.fugueSingleTask()
            self.state = 436
            self.match(fugue_sqlParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueSingleTaskContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fugueNestableTask(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueNestableTaskContext,0)


        def fugueOutputTransformTask(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueOutputTransformTaskContext,0)


        def fugueOutputTask(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueOutputTaskContext,0)


        def fuguePrintTask(self):
            return self.getTypedRuleContext(fugue_sqlParser.FuguePrintTaskContext,0)


        def fugueSaveTask(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSaveTaskContext,0)


        def fugueModuleTask(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueModuleTaskContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueSingleTask

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueSingleTask" ):
                return visitor.visitFugueSingleTask(self)
            else:
                return visitor.visitChildren(self)




    def fugueSingleTask(self):

        localctx = fugue_sqlParser.FugueSingleTaskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_fugueSingleTask)
        try:
            self.state = 444
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 438
                self.fugueNestableTask()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 439
                self.fugueOutputTransformTask()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 440
                self.fugueOutputTask()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 441
                self.fuguePrintTask()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 442
                self.fugueSaveTask()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 443
                self.fugueModuleTask()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueNestableTaskContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.assign = None # FugueAssignmentContext
            self.q = None # QueryContext
            self.checkpoint = None # FugueCheckpointContext
            self.broadcast = None # FugueBroadcastContext
            self.y = None # FugueYieldContext

        def query(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryContext,0)


        def fugueAssignment(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueAssignmentContext,0)


        def fugueCheckpoint(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueCheckpointContext,0)


        def fugueBroadcast(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueBroadcastContext,0)


        def fugueYield(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueYieldContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueNestableTask

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueNestableTask" ):
                return visitor.visitFugueNestableTask(self)
            else:
                return visitor.visitChildren(self)




    def fugueNestableTask(self):

        localctx = fugue_sqlParser.FugueNestableTaskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_fugueNestableTask)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 447
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.state = 446
                localctx.assign = self.fugueAssignment()


            self.state = 449
            localctx.q = self.query()
            self.state = 451
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
            if la_ == 1:
                self.state = 450
                localctx.checkpoint = self.fugueCheckpoint()


            self.state = 454
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==24:
                self.state = 453
                localctx.broadcast = self.fugueBroadcast()


            self.state = 457
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==45:
                self.state = 456
                localctx.y = self.fugueYield()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueNestableTaskCollectionNoSelectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fugueTransformTask(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueTransformTaskContext,0)


        def fugueProcessTask(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueProcessTaskContext,0)


        def fugueZipTask(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueZipTaskContext,0)


        def fugueCreateTask(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueCreateTaskContext,0)


        def fugueCreateDataTask(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueCreateDataTaskContext,0)


        def fugueLoadTask(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueLoadTaskContext,0)


        def fugueSaveAndUseTask(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSaveAndUseTaskContext,0)


        def fugueRenameColumnsTask(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueRenameColumnsTaskContext,0)


        def fugueAlterColumnsTask(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueAlterColumnsTaskContext,0)


        def fugueDropColumnsTask(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueDropColumnsTaskContext,0)


        def fugueDropnaTask(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueDropnaTaskContext,0)


        def fugueFillnaTask(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueFillnaTaskContext,0)


        def fugueSampleTask(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSampleTaskContext,0)


        def fugueTakeTask(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueTakeTaskContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueNestableTaskCollectionNoSelect

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueNestableTaskCollectionNoSelect" ):
                return visitor.visitFugueNestableTaskCollectionNoSelect(self)
            else:
                return visitor.visitChildren(self)




    def fugueNestableTaskCollectionNoSelect(self):

        localctx = fugue_sqlParser.FugueNestableTaskCollectionNoSelectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_fugueNestableTaskCollectionNoSelect)
        try:
            self.state = 473
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 459
                self.fugueTransformTask()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 460
                self.fugueProcessTask()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 461
                self.fugueZipTask()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 462
                self.fugueCreateTask()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 463
                self.fugueCreateDataTask()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 464
                self.fugueLoadTask()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 465
                self.fugueSaveAndUseTask()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 466
                self.fugueRenameColumnsTask()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 467
                self.fugueAlterColumnsTask()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 468
                self.fugueDropColumnsTask()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 469
                self.fugueDropnaTask()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 470
                self.fugueFillnaTask()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 471
                self.fugueSampleTask()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 472
                self.fugueTakeTask()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueTransformTaskContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.dfs = None # FugueDataFramesContext
            self.partition = None # FuguePrepartitionContext
            self.params = None # FugueSingleOutputExtensionCommonWildContext
            self.callback = None # FugueExtensionContext

        def TRANSFORM(self):
            return self.getToken(fugue_sqlParser.TRANSFORM, 0)

        def fugueSingleOutputExtensionCommonWild(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSingleOutputExtensionCommonWildContext,0)


        def CALLBACK(self):
            return self.getToken(fugue_sqlParser.CALLBACK, 0)

        def fugueDataFrames(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueDataFramesContext,0)


        def fuguePrepartition(self):
            return self.getTypedRuleContext(fugue_sqlParser.FuguePrepartitionContext,0)


        def fugueExtension(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueExtensionContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueTransformTask

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueTransformTask" ):
                return visitor.visitFugueTransformTask(self)
            else:
                return visitor.visitChildren(self)




    def fugueTransformTask(self):

        localctx = fugue_sqlParser.FugueTransformTaskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_fugueTransformTask)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 475
            self.match(fugue_sqlParser.TRANSFORM)
            self.state = 477
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.state = 476
                localctx.dfs = self.fugueDataFrames()


            self.state = 480
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 2151153664) != 0:
                self.state = 479
                localctx.partition = self.fuguePrepartition()


            self.state = 482
            localctx.params = self.fugueSingleOutputExtensionCommonWild()
            self.state = 485
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
            if la_ == 1:
                self.state = 483
                self.match(fugue_sqlParser.CALLBACK)
                self.state = 484
                localctx.callback = self.fugueExtension()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueProcessTaskContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.dfs = None # FugueDataFramesContext
            self.partition = None # FuguePrepartitionContext
            self.params = None # FugueSingleOutputExtensionCommonContext

        def PROCESS(self):
            return self.getToken(fugue_sqlParser.PROCESS, 0)

        def fugueSingleOutputExtensionCommon(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSingleOutputExtensionCommonContext,0)


        def fugueDataFrames(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueDataFramesContext,0)


        def fuguePrepartition(self):
            return self.getTypedRuleContext(fugue_sqlParser.FuguePrepartitionContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueProcessTask

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueProcessTask" ):
                return visitor.visitFugueProcessTask(self)
            else:
                return visitor.visitChildren(self)




    def fugueProcessTask(self):

        localctx = fugue_sqlParser.FugueProcessTaskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_fugueProcessTask)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 487
            self.match(fugue_sqlParser.PROCESS)
            self.state = 489
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.state = 488
                localctx.dfs = self.fugueDataFrames()


            self.state = 492
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 2151153664) != 0:
                self.state = 491
                localctx.partition = self.fuguePrepartition()


            self.state = 494
            localctx.params = self.fugueSingleOutputExtensionCommon()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueSaveAndUseTaskContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.df = None # FugueDataFrameContext
            self.partition = None # FuguePrepartitionContext
            self.m = None # FugueSaveModeContext
            self.single = None # FugueSingleFileContext
            self.fmt = None # FugueFileFormatContext
            self.path = None # FuguePathContext
            self.params = None # FugueParamsContext

        def SAVE(self):
            return self.getToken(fugue_sqlParser.SAVE, 0)

        def AND(self):
            return self.getToken(fugue_sqlParser.AND, 0)

        def USE(self):
            return self.getToken(fugue_sqlParser.USE, 0)

        def fugueSaveMode(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSaveModeContext,0)


        def fuguePath(self):
            return self.getTypedRuleContext(fugue_sqlParser.FuguePathContext,0)


        def fugueDataFrame(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueDataFrameContext,0)


        def fuguePrepartition(self):
            return self.getTypedRuleContext(fugue_sqlParser.FuguePrepartitionContext,0)


        def fugueSingleFile(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSingleFileContext,0)


        def fugueFileFormat(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueFileFormatContext,0)


        def fugueParams(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueParamsContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueSaveAndUseTask

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueSaveAndUseTask" ):
                return visitor.visitFugueSaveAndUseTask(self)
            else:
                return visitor.visitChildren(self)




    def fugueSaveAndUseTask(self):

        localctx = fugue_sqlParser.FugueSaveAndUseTaskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_fugueSaveAndUseTask)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 496
            self.match(fugue_sqlParser.SAVE)
            self.state = 497
            self.match(fugue_sqlParser.AND)
            self.state = 498
            self.match(fugue_sqlParser.USE)
            self.state = 500
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                self.state = 499
                localctx.df = self.fugueDataFrame()


            self.state = 503
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 2151153664) != 0:
                self.state = 502
                localctx.partition = self.fuguePrepartition()


            self.state = 505
            localctx.m = self.fugueSaveMode()
            self.state = 507
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==40:
                self.state = 506
                localctx.single = self.fugueSingleFile()


            self.state = 510
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 962072674304) != 0:
                self.state = 509
                localctx.fmt = self.fugueFileFormat()


            self.state = 512
            localctx.path = self.fuguePath()
            self.state = 514
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
            if la_ == 1:
                self.state = 513
                localctx.params = self.fugueParams()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueRenameColumnsTaskContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.cols = None # FugueRenameExpressionContext
            self.df = None # FugueDataFrameContext

        def RENAME(self):
            return self.getToken(fugue_sqlParser.RENAME, 0)

        def COLUMNS(self):
            return self.getToken(fugue_sqlParser.COLUMNS, 0)

        def fugueRenameExpression(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueRenameExpressionContext,0)


        def FROM(self):
            return self.getToken(fugue_sqlParser.FROM, 0)

        def fugueDataFrame(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueDataFrameContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueRenameColumnsTask

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueRenameColumnsTask" ):
                return visitor.visitFugueRenameColumnsTask(self)
            else:
                return visitor.visitChildren(self)




    def fugueRenameColumnsTask(self):

        localctx = fugue_sqlParser.FugueRenameColumnsTaskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_fugueRenameColumnsTask)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 516
            self.match(fugue_sqlParser.RENAME)
            self.state = 517
            self.match(fugue_sqlParser.COLUMNS)
            self.state = 518
            localctx.cols = self.fugueRenameExpression()
            self.state = 521
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
            if la_ == 1:
                self.state = 519
                self.match(fugue_sqlParser.FROM)
                self.state = 520
                localctx.df = self.fugueDataFrame()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueAlterColumnsTaskContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.cols = None # FugueSchemaContext
            self.df = None # FugueDataFrameContext

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)

        def COLUMNS(self):
            return self.getToken(fugue_sqlParser.COLUMNS, 0)

        def fugueSchema(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSchemaContext,0)


        def FROM(self):
            return self.getToken(fugue_sqlParser.FROM, 0)

        def fugueDataFrame(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueDataFrameContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueAlterColumnsTask

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueAlterColumnsTask" ):
                return visitor.visitFugueAlterColumnsTask(self)
            else:
                return visitor.visitChildren(self)




    def fugueAlterColumnsTask(self):

        localctx = fugue_sqlParser.FugueAlterColumnsTaskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_fugueAlterColumnsTask)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 523
            self.match(fugue_sqlParser.ALTER)
            self.state = 524
            self.match(fugue_sqlParser.COLUMNS)
            self.state = 525
            localctx.cols = self.fugueSchema()
            self.state = 528
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
            if la_ == 1:
                self.state = 526
                self.match(fugue_sqlParser.FROM)
                self.state = 527
                localctx.df = self.fugueDataFrame()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueDropColumnsTaskContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.cols = None # FugueColsContext
            self.df = None # FugueDataFrameContext

        def DROP(self):
            return self.getToken(fugue_sqlParser.DROP, 0)

        def COLUMNS(self):
            return self.getToken(fugue_sqlParser.COLUMNS, 0)

        def fugueCols(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueColsContext,0)


        def IF(self):
            return self.getToken(fugue_sqlParser.IF, 0)

        def EXISTS(self):
            return self.getToken(fugue_sqlParser.EXISTS, 0)

        def FROM(self):
            return self.getToken(fugue_sqlParser.FROM, 0)

        def fugueDataFrame(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueDataFrameContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueDropColumnsTask

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueDropColumnsTask" ):
                return visitor.visitFugueDropColumnsTask(self)
            else:
                return visitor.visitChildren(self)




    def fugueDropColumnsTask(self):

        localctx = fugue_sqlParser.FugueDropColumnsTaskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_fugueDropColumnsTask)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 530
            self.match(fugue_sqlParser.DROP)
            self.state = 531
            self.match(fugue_sqlParser.COLUMNS)
            self.state = 532
            localctx.cols = self.fugueCols()
            self.state = 535
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,19,self._ctx)
            if la_ == 1:
                self.state = 533
                self.match(fugue_sqlParser.IF)
                self.state = 534
                self.match(fugue_sqlParser.EXISTS)


            self.state = 539
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,20,self._ctx)
            if la_ == 1:
                self.state = 537
                self.match(fugue_sqlParser.FROM)
                self.state = 538
                localctx.df = self.fugueDataFrame()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueDropnaTaskContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.how = None # Token
            self.cols = None # FugueColsContext
            self.df = None # FugueDataFrameContext

        def DROP(self):
            return self.getToken(fugue_sqlParser.DROP, 0)

        def ROWS(self):
            return self.getToken(fugue_sqlParser.ROWS, 0)

        def IF(self):
            return self.getToken(fugue_sqlParser.IF, 0)

        def THENULL(self):
            return self.getToken(fugue_sqlParser.THENULL, 0)

        def THENULLS(self):
            return self.getToken(fugue_sqlParser.THENULLS, 0)

        def ALL(self):
            return self.getToken(fugue_sqlParser.ALL, 0)

        def ANY(self):
            return self.getToken(fugue_sqlParser.ANY, 0)

        def ON(self):
            return self.getToken(fugue_sqlParser.ON, 0)

        def FROM(self):
            return self.getToken(fugue_sqlParser.FROM, 0)

        def fugueCols(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueColsContext,0)


        def fugueDataFrame(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueDataFrameContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueDropnaTask

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueDropnaTask" ):
                return visitor.visitFugueDropnaTask(self)
            else:
                return visitor.visitChildren(self)




    def fugueDropnaTask(self):

        localctx = fugue_sqlParser.FugueDropnaTaskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_fugueDropnaTask)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 541
            self.match(fugue_sqlParser.DROP)
            self.state = 542
            self.match(fugue_sqlParser.ROWS)
            self.state = 543
            self.match(fugue_sqlParser.IF)
            self.state = 544
            localctx.how = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==55 or _la==60):
                localctx.how = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 545
            _la = self._input.LA(1)
            if not(_la==195 or _la==196):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 548
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,21,self._ctx)
            if la_ == 1:
                self.state = 546
                self.match(fugue_sqlParser.ON)
                self.state = 547
                localctx.cols = self.fugueCols()


            self.state = 552
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
            if la_ == 1:
                self.state = 550
                self.match(fugue_sqlParser.FROM)
                self.state = 551
                localctx.df = self.fugueDataFrame()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueFillnaTaskContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.params = None # FugueParamsContext
            self.df = None # FugueDataFrameContext

        def FILL(self):
            return self.getToken(fugue_sqlParser.FILL, 0)

        def THENULL(self):
            return self.getToken(fugue_sqlParser.THENULL, 0)

        def THENULLS(self):
            return self.getToken(fugue_sqlParser.THENULLS, 0)

        def fugueParams(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueParamsContext,0)


        def FROM(self):
            return self.getToken(fugue_sqlParser.FROM, 0)

        def fugueDataFrame(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueDataFrameContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueFillnaTask

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueFillnaTask" ):
                return visitor.visitFugueFillnaTask(self)
            else:
                return visitor.visitChildren(self)




    def fugueFillnaTask(self):

        localctx = fugue_sqlParser.FugueFillnaTaskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_fugueFillnaTask)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 554
            self.match(fugue_sqlParser.FILL)
            self.state = 555
            _la = self._input.LA(1)
            if not(_la==195 or _la==196):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 556
            localctx.params = self.fugueParams()
            self.state = 559
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
            if la_ == 1:
                self.state = 557
                self.match(fugue_sqlParser.FROM)
                self.state = 558
                localctx.df = self.fugueDataFrame()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueSampleTaskContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.method = None # FugueSampleMethodContext
            self.seed = None # Token
            self.df = None # FugueDataFrameContext

        def SAMPLE(self):
            return self.getToken(fugue_sqlParser.SAMPLE, 0)

        def fugueSampleMethod(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSampleMethodContext,0)


        def REPLACE(self):
            return self.getToken(fugue_sqlParser.REPLACE, 0)

        def SEED(self):
            return self.getToken(fugue_sqlParser.SEED, 0)

        def FROM(self):
            return self.getToken(fugue_sqlParser.FROM, 0)

        def INTEGER_VALUE(self):
            return self.getToken(fugue_sqlParser.INTEGER_VALUE, 0)

        def fugueDataFrame(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueDataFrameContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueSampleTask

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueSampleTask" ):
                return visitor.visitFugueSampleTask(self)
            else:
                return visitor.visitChildren(self)




    def fugueSampleTask(self):

        localctx = fugue_sqlParser.FugueSampleTaskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_fugueSampleTask)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 561
            self.match(fugue_sqlParser.SAMPLE)
            self.state = 563
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==233:
                self.state = 562
                self.match(fugue_sqlParser.REPLACE)


            self.state = 565
            localctx.method = self.fugueSampleMethod()
            self.state = 568
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
            if la_ == 1:
                self.state = 566
                self.match(fugue_sqlParser.SEED)
                self.state = 567
                localctx.seed = self.match(fugue_sqlParser.INTEGER_VALUE)


            self.state = 572
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,26,self._ctx)
            if la_ == 1:
                self.state = 570
                self.match(fugue_sqlParser.FROM)
                self.state = 571
                localctx.df = self.fugueDataFrame()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueTakeTaskContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.rows = None # Token
            self.df = None # FugueDataFrameContext
            self.partition = None # FuguePrepartitionContext
            self.presort = None # FugueColsSortContext
            self.na_position = None # Token

        def TAKE(self):
            return self.getToken(fugue_sqlParser.TAKE, 0)

        def FROM(self):
            return self.getToken(fugue_sqlParser.FROM, 0)

        def INTEGER_VALUE(self):
            return self.getToken(fugue_sqlParser.INTEGER_VALUE, 0)

        def ROW(self):
            return self.getToken(fugue_sqlParser.ROW, 0)

        def ROWS(self):
            return self.getToken(fugue_sqlParser.ROWS, 0)

        def fugueDataFrame(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueDataFrameContext,0)


        def THENULL(self):
            return self.getToken(fugue_sqlParser.THENULL, 0)

        def THENULLS(self):
            return self.getToken(fugue_sqlParser.THENULLS, 0)

        def PRESORT(self):
            return self.getToken(fugue_sqlParser.PRESORT, 0)

        def FIRST(self):
            return self.getToken(fugue_sqlParser.FIRST, 0)

        def LAST(self):
            return self.getToken(fugue_sqlParser.LAST, 0)

        def fuguePrepartition(self):
            return self.getTypedRuleContext(fugue_sqlParser.FuguePrepartitionContext,0)


        def fugueColsSort(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueColsSortContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueTakeTask

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueTakeTask" ):
                return visitor.visitFugueTakeTask(self)
            else:
                return visitor.visitChildren(self)




    def fugueTakeTask(self):

        localctx = fugue_sqlParser.FugueTakeTaskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_fugueTakeTask)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 574
            self.match(fugue_sqlParser.TAKE)
            self.state = 577
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
            if la_ == 1:
                self.state = 575
                localctx.rows = self.match(fugue_sqlParser.INTEGER_VALUE)
                self.state = 576
                _la = self._input.LA(1)
                if not(_la==243 or _la==244):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 581
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
            if la_ == 1:
                self.state = 579
                self.match(fugue_sqlParser.FROM)
                self.state = 580
                localctx.df = self.fugueDataFrame()


            self.state = 586
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
            if la_ == 1:
                self.state = 583
                localctx.partition = self.fuguePrepartition()

            elif la_ == 2:
                self.state = 584
                self.match(fugue_sqlParser.PRESORT)
                self.state = 585
                localctx.presort = self.fugueColsSort()


            self.state = 590
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                self.state = 588
                _la = self._input.LA(1)
                if not(_la==195 or _la==196):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 589
                localctx.na_position = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==135 or _la==168):
                    localctx.na_position = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueZipTaskContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.dfs = None # FugueDataFramesContext
            self.how = None # FugueZipTypeContext
            self.by = None # FugueColsContext
            self.presort = None # FugueColsSortContext

        def ZIP(self):
            return self.getToken(fugue_sqlParser.ZIP, 0)

        def fugueDataFrames(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueDataFramesContext,0)


        def BY(self):
            return self.getToken(fugue_sqlParser.BY, 0)

        def PRESORT(self):
            return self.getToken(fugue_sqlParser.PRESORT, 0)

        def fugueZipType(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueZipTypeContext,0)


        def fugueCols(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueColsContext,0)


        def fugueColsSort(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueColsSortContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueZipTask

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueZipTask" ):
                return visitor.visitFugueZipTask(self)
            else:
                return visitor.visitChildren(self)




    def fugueZipTask(self):

        localctx = fugue_sqlParser.FugueZipTaskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_fugueZipTask)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 592
            self.match(fugue_sqlParser.ZIP)
            self.state = 593
            localctx.dfs = self.fugueDataFrames()
            self.state = 595
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
            if la_ == 1:
                self.state = 594
                localctx.how = self.fugueZipType()


            self.state = 599
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,32,self._ctx)
            if la_ == 1:
                self.state = 597
                self.match(fugue_sqlParser.BY)
                self.state = 598
                localctx.by = self.fugueCols()


            self.state = 603
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
            if la_ == 1:
                self.state = 601
                self.match(fugue_sqlParser.PRESORT)
                self.state = 602
                localctx.presort = self.fugueColsSort()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueCreateTaskContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.params = None # FugueSingleOutputExtensionCommonContext

        def CREATE(self):
            return self.getToken(fugue_sqlParser.CREATE, 0)

        def fugueSingleOutputExtensionCommon(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSingleOutputExtensionCommonContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueCreateTask

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueCreateTask" ):
                return visitor.visitFugueCreateTask(self)
            else:
                return visitor.visitChildren(self)




    def fugueCreateTask(self):

        localctx = fugue_sqlParser.FugueCreateTaskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_fugueCreateTask)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 605
            self.match(fugue_sqlParser.CREATE)
            self.state = 606
            localctx.params = self.fugueSingleOutputExtensionCommon()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueCreateDataTaskContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.data = None # FugueJsonArrayContext
            self.schema = None # FugueSchemaContext

        def CREATE(self):
            return self.getToken(fugue_sqlParser.CREATE, 0)

        def SCHEMA(self):
            return self.getToken(fugue_sqlParser.SCHEMA, 0)

        def fugueJsonArray(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueJsonArrayContext,0)


        def fugueSchema(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSchemaContext,0)


        def DATA(self):
            return self.getToken(fugue_sqlParser.DATA, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueCreateDataTask

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueCreateDataTask" ):
                return visitor.visitFugueCreateDataTask(self)
            else:
                return visitor.visitChildren(self)




    def fugueCreateDataTask(self):

        localctx = fugue_sqlParser.FugueCreateDataTaskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_fugueCreateDataTask)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 608
            self.match(fugue_sqlParser.CREATE)
            self.state = 610
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==102:
                self.state = 609
                self.match(fugue_sqlParser.DATA)


            self.state = 612
            localctx.data = self.fugueJsonArray()
            self.state = 613
            self.match(fugue_sqlParser.SCHEMA)
            self.state = 614
            localctx.schema = self.fugueSchema()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueLoadTaskContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.fmt = None # FugueFileFormatContext
            self.path = None # FuguePathContext
            self.params = None # FugueParamsContext
            self.columns = None # FugueLoadColumnsContext

        def LOAD(self):
            return self.getToken(fugue_sqlParser.LOAD, 0)

        def fuguePath(self):
            return self.getTypedRuleContext(fugue_sqlParser.FuguePathContext,0)


        def COLUMNS(self):
            return self.getToken(fugue_sqlParser.COLUMNS, 0)

        def fugueFileFormat(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueFileFormatContext,0)


        def fugueParams(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueParamsContext,0)


        def fugueLoadColumns(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueLoadColumnsContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueLoadTask

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueLoadTask" ):
                return visitor.visitFugueLoadTask(self)
            else:
                return visitor.visitChildren(self)




    def fugueLoadTask(self):

        localctx = fugue_sqlParser.FugueLoadTaskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_fugueLoadTask)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 616
            self.match(fugue_sqlParser.LOAD)
            self.state = 618
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 962072674304) != 0:
                self.state = 617
                localctx.fmt = self.fugueFileFormat()


            self.state = 620
            localctx.path = self.fuguePath()
            self.state = 622
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
            if la_ == 1:
                self.state = 621
                localctx.params = self.fugueParams()


            self.state = 626
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,37,self._ctx)
            if la_ == 1:
                self.state = 624
                self.match(fugue_sqlParser.COLUMNS)
                self.state = 625
                localctx.columns = self.fugueLoadColumns()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueOutputTaskContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.dfs = None # FugueDataFramesContext
            self.partition = None # FuguePrepartitionContext
            self.fugueUsing = None # FugueExtensionContext
            self.params = None # FugueParamsContext

        def OUTPUT(self):
            return self.getToken(fugue_sqlParser.OUTPUT, 0)

        def USING(self):
            return self.getToken(fugue_sqlParser.USING, 0)

        def fugueExtension(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueExtensionContext,0)


        def fugueDataFrames(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueDataFramesContext,0)


        def fuguePrepartition(self):
            return self.getTypedRuleContext(fugue_sqlParser.FuguePrepartitionContext,0)


        def fugueParams(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueParamsContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueOutputTask

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueOutputTask" ):
                return visitor.visitFugueOutputTask(self)
            else:
                return visitor.visitChildren(self)




    def fugueOutputTask(self):

        localctx = fugue_sqlParser.FugueOutputTaskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_fugueOutputTask)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 628
            self.match(fugue_sqlParser.OUTPUT)
            self.state = 630
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
            if la_ == 1:
                self.state = 629
                localctx.dfs = self.fugueDataFrames()


            self.state = 633
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 2151153664) != 0:
                self.state = 632
                localctx.partition = self.fuguePrepartition()


            self.state = 635
            self.match(fugue_sqlParser.USING)
            self.state = 636
            localctx.fugueUsing = self.fugueExtension()
            self.state = 638
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 33554696) != 0:
                self.state = 637
                localctx.params = self.fugueParams()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FuguePrintTaskContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.rows = None # Token
            self.dfs = None # FugueDataFramesContext
            self.count = None # Token
            self.title = None # Token

        def PRINT(self):
            return self.getToken(fugue_sqlParser.PRINT, 0)

        def INTEGER_VALUE(self):
            return self.getToken(fugue_sqlParser.INTEGER_VALUE, 0)

        def ROW(self):
            return self.getToken(fugue_sqlParser.ROW, 0)

        def ROWS(self):
            return self.getToken(fugue_sqlParser.ROWS, 0)

        def FROM(self):
            return self.getToken(fugue_sqlParser.FROM, 0)

        def TITLE(self):
            return self.getToken(fugue_sqlParser.TITLE, 0)

        def fugueDataFrames(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueDataFramesContext,0)


        def ROWCOUNT(self):
            return self.getToken(fugue_sqlParser.ROWCOUNT, 0)

        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fuguePrintTask

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFuguePrintTask" ):
                return visitor.visitFuguePrintTask(self)
            else:
                return visitor.visitChildren(self)




    def fuguePrintTask(self):

        localctx = fugue_sqlParser.FuguePrintTaskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_fuguePrintTask)
        self._la = 0 # Token type
        try:
            self.state = 665
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 640
                self.match(fugue_sqlParser.PRINT)
                self.state = 641
                localctx.rows = self.match(fugue_sqlParser.INTEGER_VALUE)
                self.state = 642
                _la = self._input.LA(1)
                if not(_la==243 or _la==244):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 645
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
                if la_ == 1:
                    self.state = 643
                    self.match(fugue_sqlParser.FROM)
                    self.state = 644
                    localctx.dfs = self.fugueDataFrames()


                self.state = 648
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==29:
                    self.state = 647
                    localctx.count = self.match(fugue_sqlParser.ROWCOUNT)


                self.state = 652
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==34:
                    self.state = 650
                    self.match(fugue_sqlParser.TITLE)
                    self.state = 651
                    localctx.title = self.match(fugue_sqlParser.STRING)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 654
                self.match(fugue_sqlParser.PRINT)
                self.state = 656
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
                if la_ == 1:
                    self.state = 655
                    localctx.dfs = self.fugueDataFrames()


                self.state = 659
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==29:
                    self.state = 658
                    localctx.count = self.match(fugue_sqlParser.ROWCOUNT)


                self.state = 663
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==34:
                    self.state = 661
                    self.match(fugue_sqlParser.TITLE)
                    self.state = 662
                    localctx.title = self.match(fugue_sqlParser.STRING)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueSaveTaskContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.df = None # FugueDataFrameContext
            self.partition = None # FuguePrepartitionContext
            self.m = None # FugueSaveModeContext
            self.single = None # FugueSingleFileContext
            self.fmt = None # FugueFileFormatContext
            self.path = None # FuguePathContext
            self.params = None # FugueParamsContext

        def SAVE(self):
            return self.getToken(fugue_sqlParser.SAVE, 0)

        def fugueSaveMode(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSaveModeContext,0)


        def fuguePath(self):
            return self.getTypedRuleContext(fugue_sqlParser.FuguePathContext,0)


        def fugueDataFrame(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueDataFrameContext,0)


        def fuguePrepartition(self):
            return self.getTypedRuleContext(fugue_sqlParser.FuguePrepartitionContext,0)


        def fugueSingleFile(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSingleFileContext,0)


        def fugueFileFormat(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueFileFormatContext,0)


        def fugueParams(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueParamsContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueSaveTask

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueSaveTask" ):
                return visitor.visitFugueSaveTask(self)
            else:
                return visitor.visitChildren(self)




    def fugueSaveTask(self):

        localctx = fugue_sqlParser.FugueSaveTaskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_fugueSaveTask)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 667
            self.match(fugue_sqlParser.SAVE)
            self.state = 669
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
            if la_ == 1:
                self.state = 668
                localctx.df = self.fugueDataFrame()


            self.state = 672
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 2151153664) != 0:
                self.state = 671
                localctx.partition = self.fuguePrepartition()


            self.state = 674
            localctx.m = self.fugueSaveMode()
            self.state = 676
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==40:
                self.state = 675
                localctx.single = self.fugueSingleFile()


            self.state = 679
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 962072674304) != 0:
                self.state = 678
                localctx.fmt = self.fugueFileFormat()


            self.state = 681
            localctx.path = self.fuguePath()
            self.state = 683
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 33554696) != 0:
                self.state = 682
                localctx.params = self.fugueParams()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueOutputTransformTaskContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.dfs = None # FugueDataFramesContext
            self.partition = None # FuguePrepartitionContext
            self.fugueUsing = None # FugueExtensionContext
            self.params = None # FugueParamsContext
            self.callback = None # FugueExtensionContext

        def OUTTRANSFORM(self):
            return self.getToken(fugue_sqlParser.OUTTRANSFORM, 0)

        def USING(self):
            return self.getToken(fugue_sqlParser.USING, 0)

        def fugueExtension(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.FugueExtensionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.FugueExtensionContext,i)


        def CALLBACK(self):
            return self.getToken(fugue_sqlParser.CALLBACK, 0)

        def fugueDataFrames(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueDataFramesContext,0)


        def fuguePrepartition(self):
            return self.getTypedRuleContext(fugue_sqlParser.FuguePrepartitionContext,0)


        def fugueParams(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueParamsContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueOutputTransformTask

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueOutputTransformTask" ):
                return visitor.visitFugueOutputTransformTask(self)
            else:
                return visitor.visitChildren(self)




    def fugueOutputTransformTask(self):

        localctx = fugue_sqlParser.FugueOutputTransformTaskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_fugueOutputTransformTask)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 685
            self.match(fugue_sqlParser.OUTTRANSFORM)
            self.state = 687
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
            if la_ == 1:
                self.state = 686
                localctx.dfs = self.fugueDataFrames()


            self.state = 690
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 2151153664) != 0:
                self.state = 689
                localctx.partition = self.fuguePrepartition()


            self.state = 692
            self.match(fugue_sqlParser.USING)
            self.state = 693
            localctx.fugueUsing = self.fugueExtension()
            self.state = 695
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 33554696) != 0:
                self.state = 694
                localctx.params = self.fugueParams()


            self.state = 699
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==50:
                self.state = 697
                self.match(fugue_sqlParser.CALLBACK)
                self.state = 698
                localctx.callback = self.fugueExtension()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueModuleTaskContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.assign = None # FugueAssignmentContext
            self.dfs = None # FugueDataFramesContext
            self.fugueUsing = None # FugueExtensionContext
            self.params = None # FugueParamsContext

        def SUB(self):
            return self.getToken(fugue_sqlParser.SUB, 0)

        def USING(self):
            return self.getToken(fugue_sqlParser.USING, 0)

        def fugueExtension(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueExtensionContext,0)


        def fugueAssignment(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueAssignmentContext,0)


        def fugueDataFrames(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueDataFramesContext,0)


        def fugueParams(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueParamsContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueModuleTask

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueModuleTask" ):
                return visitor.visitFugueModuleTask(self)
            else:
                return visitor.visitChildren(self)




    def fugueModuleTask(self):

        localctx = fugue_sqlParser.FugueModuleTaskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_fugueModuleTask)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 702
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 53)) & ~0x3f) == 0 and ((1 << (_la - 53)) & -1) != 0 or (((_la - 117)) & ~0x3f) == 0 and ((1 << (_la - 117)) & -1) != 0 or (((_la - 181)) & ~0x3f) == 0 and ((1 << (_la - 181)) & -1) != 0 or (((_la - 245)) & ~0x3f) == 0 and ((1 << (_la - 245)) & 1152921504606846975) != 0 or (((_la - 319)) & ~0x3f) == 0 and ((1 << (_la - 319)) & 98305) != 0:
                self.state = 701
                localctx.assign = self.fugueAssignment()


            self.state = 704
            self.match(fugue_sqlParser.SUB)
            self.state = 706
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
            if la_ == 1:
                self.state = 705
                localctx.dfs = self.fugueDataFrames()


            self.state = 708
            self.match(fugue_sqlParser.USING)
            self.state = 709
            localctx.fugueUsing = self.fugueExtension()
            self.state = 711
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 33554696) != 0:
                self.state = 710
                localctx.params = self.fugueParams()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueSqlEngineContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.fugueUsing = None # FugueExtensionContext
            self.params = None # FugueParamsContext

        def CONNECT(self):
            return self.getToken(fugue_sqlParser.CONNECT, 0)

        def fugueExtension(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueExtensionContext,0)


        def fugueParams(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueParamsContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueSqlEngine

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueSqlEngine" ):
                return visitor.visitFugueSqlEngine(self)
            else:
                return visitor.visitChildren(self)




    def fugueSqlEngine(self):

        localctx = fugue_sqlParser.FugueSqlEngineContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_fugueSqlEngine)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 713
            self.match(fugue_sqlParser.CONNECT)
            self.state = 714
            localctx.fugueUsing = self.fugueExtension()
            self.state = 716
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 33554696) != 0:
                self.state = 715
                localctx.params = self.fugueParams()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueSingleFileContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.single = None # Token

        def SINGLE(self):
            return self.getToken(fugue_sqlParser.SINGLE, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueSingleFile

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueSingleFile" ):
                return visitor.visitFugueSingleFile(self)
            else:
                return visitor.visitChildren(self)




    def fugueSingleFile(self):

        localctx = fugue_sqlParser.FugueSingleFileContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_fugueSingleFile)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 718
            localctx.single = self.match(fugue_sqlParser.SINGLE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueLoadColumnsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.schema = None # FugueSchemaContext
            self.cols = None # FugueColsContext

        def fugueSchema(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSchemaContext,0)


        def fugueCols(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueColsContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueLoadColumns

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueLoadColumns" ):
                return visitor.visitFugueLoadColumns(self)
            else:
                return visitor.visitChildren(self)




    def fugueLoadColumns(self):

        localctx = fugue_sqlParser.FugueLoadColumnsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_fugueLoadColumns)
        try:
            self.state = 722
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 720
                localctx.schema = self.fugueSchema()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 721
                localctx.cols = self.fugueCols()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueSaveModeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TO(self):
            return self.getToken(fugue_sqlParser.TO, 0)

        def OVERWRITE(self):
            return self.getToken(fugue_sqlParser.OVERWRITE, 0)

        def APPEND(self):
            return self.getToken(fugue_sqlParser.APPEND, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueSaveMode

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueSaveMode" ):
                return visitor.visitFugueSaveMode(self)
            else:
                return visitor.visitChildren(self)




    def fugueSaveMode(self):

        localctx = fugue_sqlParser.FugueSaveModeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_fugueSaveMode)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 724
            _la = self._input.LA(1)
            if not(_la==36 or _la==210 or _la==275):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueFileFormatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARQUET(self):
            return self.getToken(fugue_sqlParser.PARQUET, 0)

        def CSV(self):
            return self.getToken(fugue_sqlParser.CSV, 0)

        def JSON(self):
            return self.getToken(fugue_sqlParser.JSON, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueFileFormat

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueFileFormat" ):
                return visitor.visitFugueFileFormat(self)
            else:
                return visitor.visitChildren(self)




    def fugueFileFormat(self):

        localctx = fugue_sqlParser.FugueFileFormatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_fugueFileFormat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 726
            _la = self._input.LA(1)
            if not(((_la) & ~0x3f) == 0 and ((1 << _la) & 962072674304) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FuguePathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fuguePath

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFuguePath" ):
                return visitor.visitFuguePath(self)
            else:
                return visitor.visitChildren(self)




    def fuguePath(self):

        localctx = fugue_sqlParser.FuguePathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_fuguePath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 728
            self.match(fugue_sqlParser.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueCheckpointContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueCheckpoint

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class FugueCheckpointDeterministicContext(FugueCheckpointContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.FugueCheckpointContext
            super().__init__(parser)
            self.ns = None # FugueCheckpointNamespaceContext
            self.partition = None # FuguePrepartitionContext
            self.single = None # FugueSingleFileContext
            self.params = None # FugueParamsContext
            self.copyFrom(ctx)

        def DETERMINISTIC(self):
            return self.getToken(fugue_sqlParser.DETERMINISTIC, 0)
        def CHECKPOINT(self):
            return self.getToken(fugue_sqlParser.CHECKPOINT, 0)
        def LAZY(self):
            return self.getToken(fugue_sqlParser.LAZY, 0)
        def fugueCheckpointNamespace(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueCheckpointNamespaceContext,0)

        def fuguePrepartition(self):
            return self.getTypedRuleContext(fugue_sqlParser.FuguePrepartitionContext,0)

        def fugueSingleFile(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSingleFileContext,0)

        def fugueParams(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueParamsContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueCheckpointDeterministic" ):
                return visitor.visitFugueCheckpointDeterministic(self)
            else:
                return visitor.visitChildren(self)


    class FugueCheckpointWeakContext(FugueCheckpointContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.FugueCheckpointContext
            super().__init__(parser)
            self.params = None # FugueParamsContext
            self.copyFrom(ctx)

        def PERSIST(self):
            return self.getToken(fugue_sqlParser.PERSIST, 0)
        def WEAK(self):
            return self.getToken(fugue_sqlParser.WEAK, 0)
        def CHECKPOINT(self):
            return self.getToken(fugue_sqlParser.CHECKPOINT, 0)
        def LAZY(self):
            return self.getToken(fugue_sqlParser.LAZY, 0)
        def fugueParams(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueParamsContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueCheckpointWeak" ):
                return visitor.visitFugueCheckpointWeak(self)
            else:
                return visitor.visitChildren(self)


    class FugueCheckpointStrongContext(FugueCheckpointContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.FugueCheckpointContext
            super().__init__(parser)
            self.partition = None # FuguePrepartitionContext
            self.single = None # FugueSingleFileContext
            self.params = None # FugueParamsContext
            self.copyFrom(ctx)

        def CHECKPOINT(self):
            return self.getToken(fugue_sqlParser.CHECKPOINT, 0)
        def LAZY(self):
            return self.getToken(fugue_sqlParser.LAZY, 0)
        def STRONG(self):
            return self.getToken(fugue_sqlParser.STRONG, 0)
        def fuguePrepartition(self):
            return self.getTypedRuleContext(fugue_sqlParser.FuguePrepartitionContext,0)

        def fugueSingleFile(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSingleFileContext,0)

        def fugueParams(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueParamsContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueCheckpointStrong" ):
                return visitor.visitFugueCheckpointStrong(self)
            else:
                return visitor.visitChildren(self)



    def fugueCheckpoint(self):

        localctx = fugue_sqlParser.FugueCheckpointContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_fugueCheckpoint)
        self._la = 0 # Token type
        try:
            self.state = 774
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.FugueCheckpointWeakContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 731
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==170:
                    self.state = 730
                    self.match(fugue_sqlParser.LAZY)


                self.state = 736
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [23]:
                    self.state = 733
                    self.match(fugue_sqlParser.PERSIST)
                    pass
                elif token in [42]:
                    self.state = 734
                    self.match(fugue_sqlParser.WEAK)
                    self.state = 735
                    self.match(fugue_sqlParser.CHECKPOINT)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 739
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((_la) & ~0x3f) == 0 and ((1 << _la) & 33554696) != 0:
                    self.state = 738
                    localctx.params = self.fugueParams()


                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.FugueCheckpointStrongContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 742
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==170:
                    self.state = 741
                    self.match(fugue_sqlParser.LAZY)


                self.state = 745
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==43:
                    self.state = 744
                    self.match(fugue_sqlParser.STRONG)


                self.state = 747
                self.match(fugue_sqlParser.CHECKPOINT)
                self.state = 749
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((_la) & ~0x3f) == 0 and ((1 << _la) & 2151153664) != 0:
                    self.state = 748
                    localctx.partition = self.fuguePrepartition()


                self.state = 752
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==40:
                    self.state = 751
                    localctx.single = self.fugueSingleFile()


                self.state = 755
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((_la) & ~0x3f) == 0 and ((1 << _la) & 33554696) != 0:
                    self.state = 754
                    localctx.params = self.fugueParams()


                pass

            elif la_ == 3:
                localctx = fugue_sqlParser.FugueCheckpointDeterministicContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 758
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==170:
                    self.state = 757
                    self.match(fugue_sqlParser.LAZY)


                self.state = 760
                self.match(fugue_sqlParser.DETERMINISTIC)
                self.state = 761
                self.match(fugue_sqlParser.CHECKPOINT)
                self.state = 763
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==325:
                    self.state = 762
                    localctx.ns = self.fugueCheckpointNamespace()


                self.state = 766
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((_la) & ~0x3f) == 0 and ((1 << _la) & 2151153664) != 0:
                    self.state = 765
                    localctx.partition = self.fuguePrepartition()


                self.state = 769
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==40:
                    self.state = 768
                    localctx.single = self.fugueSingleFile()


                self.state = 772
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((_la) & ~0x3f) == 0 and ((1 << _la) & 33554696) != 0:
                    self.state = 771
                    localctx.params = self.fugueParams()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueCheckpointNamespaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueCheckpointNamespace

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueCheckpointNamespace" ):
                return visitor.visitFugueCheckpointNamespace(self)
            else:
                return visitor.visitChildren(self)




    def fugueCheckpointNamespace(self):

        localctx = fugue_sqlParser.FugueCheckpointNamespaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_fugueCheckpointNamespace)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 776
            self.match(fugue_sqlParser.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueYieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # FugueIdentifierContext

        def YIELD(self):
            return self.getToken(fugue_sqlParser.YIELD, 0)

        def FILE(self):
            return self.getToken(fugue_sqlParser.FILE, 0)

        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)

        def fugueIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueIdentifierContext,0)


        def DATAFRAME(self):
            return self.getToken(fugue_sqlParser.DATAFRAME, 0)

        def LOCAL(self):
            return self.getToken(fugue_sqlParser.LOCAL, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueYield

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueYield" ):
                return visitor.visitFugueYield(self)
            else:
                return visitor.visitChildren(self)




    def fugueYield(self):

        localctx = fugue_sqlParser.FugueYieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_fugueYield)
        self._la = 0 # Token type
        try:
            self.state = 793
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,79,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 778
                self.match(fugue_sqlParser.YIELD)
                self.state = 779
                self.match(fugue_sqlParser.FILE)
                self.state = 782
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
                if la_ == 1:
                    self.state = 780
                    self.match(fugue_sqlParser.AS)
                    self.state = 781
                    localctx.name = self.fugueIdentifier()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 784
                self.match(fugue_sqlParser.YIELD)
                self.state = 786
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==178:
                    self.state = 785
                    self.match(fugue_sqlParser.LOCAL)


                self.state = 788
                self.match(fugue_sqlParser.DATAFRAME)
                self.state = 791
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
                if la_ == 1:
                    self.state = 789
                    self.match(fugue_sqlParser.AS)
                    self.state = 790
                    localctx.name = self.fugueIdentifier()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueBroadcastContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BROADCAST(self):
            return self.getToken(fugue_sqlParser.BROADCAST, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueBroadcast

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueBroadcast" ):
                return visitor.visitFugueBroadcast(self)
            else:
                return visitor.visitChildren(self)




    def fugueBroadcast(self):

        localctx = fugue_sqlParser.FugueBroadcastContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_fugueBroadcast)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 795
            self.match(fugue_sqlParser.BROADCAST)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueDataFramesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueDataFrames

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class FugueDataFramesDictContext(FugueDataFramesContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.FugueDataFramesContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def fugueDataFramePair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.FugueDataFramePairContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.FugueDataFramePairContext,i)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueDataFramesDict" ):
                return visitor.visitFugueDataFramesDict(self)
            else:
                return visitor.visitChildren(self)


    class FugueDataFramesListContext(FugueDataFramesContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.FugueDataFramesContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def fugueDataFrame(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.FugueDataFrameContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.FugueDataFrameContext,i)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueDataFramesList" ):
                return visitor.visitFugueDataFramesList(self)
            else:
                return visitor.visitChildren(self)



    def fugueDataFrames(self):

        localctx = fugue_sqlParser.FugueDataFramesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_fugueDataFrames)
        try:
            self.state = 813
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.FugueDataFramesListContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 797
                self.fugueDataFrame()
                self.state = 802
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,80,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 798
                        self.match(fugue_sqlParser.T__0)
                        self.state = 799
                        self.fugueDataFrame() 
                    self.state = 804
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,80,self._ctx)

                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.FugueDataFramesDictContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 805
                self.fugueDataFramePair()
                self.state = 810
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,81,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 806
                        self.match(fugue_sqlParser.T__0)
                        self.state = 807
                        self.fugueDataFramePair() 
                    self.state = 812
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,81,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueDataFramePairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.key = None # FugueIdentifierContext
            self.value = None # FugueDataFrameContext

        def fugueIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueIdentifierContext,0)


        def EQUAL(self):
            return self.getToken(fugue_sqlParser.EQUAL, 0)

        def fugueDataFrame(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueDataFrameContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueDataFramePair

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueDataFramePair" ):
                return visitor.visitFugueDataFramePair(self)
            else:
                return visitor.visitChildren(self)




    def fugueDataFramePair(self):

        localctx = fugue_sqlParser.FugueDataFramePairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_fugueDataFramePair)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 815
            localctx.key = self.fugueIdentifier()
            self.state = 816
            _la = self._input.LA(1)
            if not(_la==2 or _la==305):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 817
            localctx.value = self.fugueDataFrame()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueDataFrameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueDataFrame

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class FugueDataFrameSourceContext(FugueDataFrameContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.FugueDataFrameContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def fugueIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueIdentifierContext,0)

        def fugueDataFrameMember(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueDataFrameMemberContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueDataFrameSource" ):
                return visitor.visitFugueDataFrameSource(self)
            else:
                return visitor.visitChildren(self)


    class FugueDataFrameNestedContext(FugueDataFrameContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.FugueDataFrameContext
            super().__init__(parser)
            self.task = None # FugueNestableTaskContext
            self.copyFrom(ctx)

        def fugueNestableTask(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueNestableTaskContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueDataFrameNested" ):
                return visitor.visitFugueDataFrameNested(self)
            else:
                return visitor.visitChildren(self)



    def fugueDataFrame(self):

        localctx = fugue_sqlParser.FugueDataFrameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_fugueDataFrame)
        try:
            self.state = 827
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 319, 334, 335]:
                localctx = fugue_sqlParser.FugueDataFrameSourceContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 819
                self.fugueIdentifier()
                self.state = 821
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
                if la_ == 1:
                    self.state = 820
                    self.fugueDataFrameMember()


                pass
            elif token in [3]:
                localctx = fugue_sqlParser.FugueDataFrameNestedContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 823
                self.match(fugue_sqlParser.T__2)
                self.state = 824
                localctx.task = self.fugueNestableTask()
                self.state = 825
                self.match(fugue_sqlParser.T__3)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueDataFrameMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.index = None # Token
            self.key = None # FugueIdentifierContext

        def INTEGER_VALUE(self):
            return self.getToken(fugue_sqlParser.INTEGER_VALUE, 0)

        def fugueIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueIdentifierContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueDataFrameMember

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueDataFrameMember" ):
                return visitor.visitFugueDataFrameMember(self)
            else:
                return visitor.visitChildren(self)




    def fugueDataFrameMember(self):

        localctx = fugue_sqlParser.FugueDataFrameMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_fugueDataFrameMember)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 829
            self.match(fugue_sqlParser.T__4)
            self.state = 832
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [329]:
                self.state = 830
                localctx.index = self.match(fugue_sqlParser.INTEGER_VALUE)
                pass
            elif token in [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 319, 334, 335]:
                self.state = 831
                localctx.key = self.fugueIdentifier()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 834
            self.match(fugue_sqlParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueAssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.varname = None # FugueIdentifierContext
            self.sign = None # FugueAssignmentSignContext

        def fugueIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueIdentifierContext,0)


        def fugueAssignmentSign(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueAssignmentSignContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueAssignment

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueAssignment" ):
                return visitor.visitFugueAssignment(self)
            else:
                return visitor.visitChildren(self)




    def fugueAssignment(self):

        localctx = fugue_sqlParser.FugueAssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_fugueAssignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 836
            localctx.varname = self.fugueIdentifier()
            self.state = 837
            localctx.sign = self.fugueAssignmentSign()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueAssignmentSignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUAL(self):
            return self.getToken(fugue_sqlParser.EQUAL, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueAssignmentSign

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueAssignmentSign" ):
                return visitor.visitFugueAssignmentSign(self)
            else:
                return visitor.visitChildren(self)




    def fugueAssignmentSign(self):

        localctx = fugue_sqlParser.FugueAssignmentSignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_fugueAssignmentSign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 839
            self.match(fugue_sqlParser.EQUAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueSingleOutputExtensionCommonWildContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.fugueUsing = None # FugueExtensionContext
            self.params = None # FugueParamsContext
            self.schema = None # FugueWildSchemaContext

        def USING(self):
            return self.getToken(fugue_sqlParser.USING, 0)

        def fugueExtension(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueExtensionContext,0)


        def SCHEMA(self):
            return self.getToken(fugue_sqlParser.SCHEMA, 0)

        def fugueParams(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueParamsContext,0)


        def fugueWildSchema(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueWildSchemaContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueSingleOutputExtensionCommonWild

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueSingleOutputExtensionCommonWild" ):
                return visitor.visitFugueSingleOutputExtensionCommonWild(self)
            else:
                return visitor.visitChildren(self)




    def fugueSingleOutputExtensionCommonWild(self):

        localctx = fugue_sqlParser.FugueSingleOutputExtensionCommonWildContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_fugueSingleOutputExtensionCommonWild)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 841
            self.match(fugue_sqlParser.USING)
            self.state = 842
            localctx.fugueUsing = self.fugueExtension()
            self.state = 844
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
            if la_ == 1:
                self.state = 843
                localctx.params = self.fugueParams()


            self.state = 848
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
            if la_ == 1:
                self.state = 846
                self.match(fugue_sqlParser.SCHEMA)
                self.state = 847
                localctx.schema = self.fugueWildSchema()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueSingleOutputExtensionCommonContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.fugueUsing = None # FugueExtensionContext
            self.params = None # FugueParamsContext
            self.schema = None # FugueSchemaContext

        def USING(self):
            return self.getToken(fugue_sqlParser.USING, 0)

        def fugueExtension(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueExtensionContext,0)


        def SCHEMA(self):
            return self.getToken(fugue_sqlParser.SCHEMA, 0)

        def fugueParams(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueParamsContext,0)


        def fugueSchema(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSchemaContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueSingleOutputExtensionCommon

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueSingleOutputExtensionCommon" ):
                return visitor.visitFugueSingleOutputExtensionCommon(self)
            else:
                return visitor.visitChildren(self)




    def fugueSingleOutputExtensionCommon(self):

        localctx = fugue_sqlParser.FugueSingleOutputExtensionCommonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_fugueSingleOutputExtensionCommon)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 850
            self.match(fugue_sqlParser.USING)
            self.state = 851
            localctx.fugueUsing = self.fugueExtension()
            self.state = 853
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
            if la_ == 1:
                self.state = 852
                localctx.params = self.fugueParams()


            self.state = 857
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
            if la_ == 1:
                self.state = 855
                self.match(fugue_sqlParser.SCHEMA)
                self.state = 856
                localctx.schema = self.fugueSchema()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueExtensionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fugueIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.FugueIdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.FugueIdentifierContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueExtension

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueExtension" ):
                return visitor.visitFugueExtension(self)
            else:
                return visitor.visitChildren(self)




    def fugueExtension(self):

        localctx = fugue_sqlParser.FugueExtensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_fugueExtension)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 859
            self.fugueIdentifier()
            self.state = 864
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,90,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 860
                    self.match(fugue_sqlParser.T__6)
                    self.state = 861
                    self.fugueIdentifier() 
                self.state = 866
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,90,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueSampleMethodContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.percentage = None # Token
            self.rows = None # Token

        def PERCENTLIT(self):
            return self.getToken(fugue_sqlParser.PERCENTLIT, 0)

        def INTEGER_VALUE(self):
            return self.getToken(fugue_sqlParser.INTEGER_VALUE, 0)

        def DECIMAL_VALUE(self):
            return self.getToken(fugue_sqlParser.DECIMAL_VALUE, 0)

        def ROWS(self):
            return self.getToken(fugue_sqlParser.ROWS, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueSampleMethod

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueSampleMethod" ):
                return visitor.visitFugueSampleMethod(self)
            else:
                return visitor.visitChildren(self)




    def fugueSampleMethod(self):

        localctx = fugue_sqlParser.FugueSampleMethodContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_fugueSampleMethod)
        self._la = 0 # Token type
        try:
            self.state = 871
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,91,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 867
                localctx.percentage = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==329 or _la==331):
                    localctx.percentage = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 868
                self.match(fugue_sqlParser.PERCENTLIT)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 869
                localctx.rows = self.match(fugue_sqlParser.INTEGER_VALUE)
                self.state = 870
                self.match(fugue_sqlParser.ROWS)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueZipTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CROSS(self):
            return self.getToken(fugue_sqlParser.CROSS, 0)

        def INNER(self):
            return self.getToken(fugue_sqlParser.INNER, 0)

        def LEFT(self):
            return self.getToken(fugue_sqlParser.LEFT, 0)

        def OUTER(self):
            return self.getToken(fugue_sqlParser.OUTER, 0)

        def RIGHT(self):
            return self.getToken(fugue_sqlParser.RIGHT, 0)

        def FULL(self):
            return self.getToken(fugue_sqlParser.FULL, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueZipType

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueZipType" ):
                return visitor.visitFugueZipType(self)
            else:
                return visitor.visitChildren(self)




    def fugueZipType(self):

        localctx = fugue_sqlParser.FugueZipTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_fugueZipType)
        try:
            self.state = 881
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [95]:
                self.enterOuterAlt(localctx, 1)
                self.state = 873
                self.match(fugue_sqlParser.CROSS)
                pass
            elif token in [157]:
                self.enterOuterAlt(localctx, 2)
                self.state = 874
                self.match(fugue_sqlParser.INNER)
                pass
            elif token in [172]:
                self.enterOuterAlt(localctx, 3)
                self.state = 875
                self.match(fugue_sqlParser.LEFT)
                self.state = 876
                self.match(fugue_sqlParser.OUTER)
                pass
            elif token in [237]:
                self.enterOuterAlt(localctx, 4)
                self.state = 877
                self.match(fugue_sqlParser.RIGHT)
                self.state = 878
                self.match(fugue_sqlParser.OUTER)
                pass
            elif token in [142]:
                self.enterOuterAlt(localctx, 5)
                self.state = 879
                self.match(fugue_sqlParser.FULL)
                self.state = 880
                self.match(fugue_sqlParser.OUTER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FuguePrepartitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.algo = None # FuguePartitionAlgoContext
            self.num = None # FuguePartitionNumContext
            self.by = None # FugueColsContext
            self.presort = None # FugueColsSortContext

        def PREPARTITION(self):
            return self.getToken(fugue_sqlParser.PREPARTITION, 0)

        def fuguePartitionNum(self):
            return self.getTypedRuleContext(fugue_sqlParser.FuguePartitionNumContext,0)


        def BY(self):
            return self.getToken(fugue_sqlParser.BY, 0)

        def PRESORT(self):
            return self.getToken(fugue_sqlParser.PRESORT, 0)

        def fuguePartitionAlgo(self):
            return self.getTypedRuleContext(fugue_sqlParser.FuguePartitionAlgoContext,0)


        def fugueCols(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueColsContext,0)


        def fugueColsSort(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueColsSortContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fuguePrepartition

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFuguePrepartition" ):
                return visitor.visitFuguePrepartition(self)
            else:
                return visitor.visitChildren(self)




    def fuguePrepartition(self):

        localctx = fugue_sqlParser.FuguePrepartitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_fuguePrepartition)
        self._la = 0 # Token type
        try:
            self.state = 906
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,98,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 884
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((_la) & ~0x3f) == 0 and ((1 << _la) & 3670016) != 0:
                    self.state = 883
                    localctx.algo = self.fuguePartitionAlgo()


                self.state = 886
                self.match(fugue_sqlParser.PREPARTITION)
                self.state = 887
                localctx.num = self.fuguePartitionNum(0)
                self.state = 890
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
                if la_ == 1:
                    self.state = 888
                    self.match(fugue_sqlParser.BY)
                    self.state = 889
                    localctx.by = self.fugueCols()


                self.state = 894
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
                if la_ == 1:
                    self.state = 892
                    self.match(fugue_sqlParser.PRESORT)
                    self.state = 893
                    localctx.presort = self.fugueColsSort()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 897
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((_la) & ~0x3f) == 0 and ((1 << _la) & 3670016) != 0:
                    self.state = 896
                    localctx.algo = self.fuguePartitionAlgo()


                self.state = 899
                self.match(fugue_sqlParser.PREPARTITION)
                self.state = 900
                self.match(fugue_sqlParser.BY)
                self.state = 901
                localctx.by = self.fugueCols()
                self.state = 904
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
                if la_ == 1:
                    self.state = 902
                    self.match(fugue_sqlParser.PRESORT)
                    self.state = 903
                    localctx.presort = self.fugueColsSort()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FuguePartitionAlgoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HASH(self):
            return self.getToken(fugue_sqlParser.HASH, 0)

        def RAND(self):
            return self.getToken(fugue_sqlParser.RAND, 0)

        def EVEN(self):
            return self.getToken(fugue_sqlParser.EVEN, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fuguePartitionAlgo

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFuguePartitionAlgo" ):
                return visitor.visitFuguePartitionAlgo(self)
            else:
                return visitor.visitChildren(self)




    def fuguePartitionAlgo(self):

        localctx = fugue_sqlParser.FuguePartitionAlgoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_fuguePartitionAlgo)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 908
            _la = self._input.LA(1)
            if not(((_la) & ~0x3f) == 0 and ((1 << _la) & 3670016) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FuguePartitionNumContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fuguePartitionNumber(self):
            return self.getTypedRuleContext(fugue_sqlParser.FuguePartitionNumberContext,0)


        def fuguePartitionNum(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.FuguePartitionNumContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.FuguePartitionNumContext,i)


        def PLUS(self):
            return self.getToken(fugue_sqlParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(fugue_sqlParser.MINUS, 0)

        def ASTERISK(self):
            return self.getToken(fugue_sqlParser.ASTERISK, 0)

        def SLASH(self):
            return self.getToken(fugue_sqlParser.SLASH, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fuguePartitionNum

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFuguePartitionNum" ):
                return visitor.visitFuguePartitionNum(self)
            else:
                return visitor.visitChildren(self)



    def fuguePartitionNum(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = fugue_sqlParser.FuguePartitionNumContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 94
        self.enterRecursionRule(localctx, 94, self.RULE_fuguePartitionNum, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 916
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [29, 30, 315, 329, 331]:
                self.state = 911
                self.fuguePartitionNumber()
                pass
            elif token in [3]:
                self.state = 912
                self.match(fugue_sqlParser.T__2)
                self.state = 913
                self.fuguePartitionNum(0)
                self.state = 914
                self.match(fugue_sqlParser.T__3)
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 923
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,100,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = fugue_sqlParser.FuguePartitionNumContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_fuguePartitionNum)
                    self.state = 918
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 919
                    _la = self._input.LA(1)
                    if not((((_la - 314)) & ~0x3f) == 0 and ((1 << (_la - 314)) & 15) != 0):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 920
                    self.fuguePartitionNum(2) 
                self.state = 925
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,100,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class FuguePartitionNumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECIMAL_VALUE(self):
            return self.getToken(fugue_sqlParser.DECIMAL_VALUE, 0)

        def MINUS(self):
            return self.getToken(fugue_sqlParser.MINUS, 0)

        def INTEGER_VALUE(self):
            return self.getToken(fugue_sqlParser.INTEGER_VALUE, 0)

        def ROWCOUNT(self):
            return self.getToken(fugue_sqlParser.ROWCOUNT, 0)

        def CONCURRENCY(self):
            return self.getToken(fugue_sqlParser.CONCURRENCY, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fuguePartitionNumber

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFuguePartitionNumber" ):
                return visitor.visitFuguePartitionNumber(self)
            else:
                return visitor.visitChildren(self)




    def fuguePartitionNumber(self):

        localctx = fugue_sqlParser.FuguePartitionNumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_fuguePartitionNumber)
        self._la = 0 # Token type
        try:
            self.state = 936
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 927
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==315:
                    self.state = 926
                    self.match(fugue_sqlParser.MINUS)


                self.state = 929
                self.match(fugue_sqlParser.DECIMAL_VALUE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 931
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==315:
                    self.state = 930
                    self.match(fugue_sqlParser.MINUS)


                self.state = 933
                self.match(fugue_sqlParser.INTEGER_VALUE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 934
                self.match(fugue_sqlParser.ROWCOUNT)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 935
                self.match(fugue_sqlParser.CONCURRENCY)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueParamsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueParams

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class FugueParamsPairsContext(FugueParamsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.FugueParamsContext
            super().__init__(parser)
            self.pairs = None # FugueJsonPairsContext
            self.copyFrom(ctx)

        def PARAMS(self):
            return self.getToken(fugue_sqlParser.PARAMS, 0)
        def fugueJsonPairs(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueJsonPairsContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueParamsPairs" ):
                return visitor.visitFugueParamsPairs(self)
            else:
                return visitor.visitChildren(self)


    class FugueParamsObjContext(FugueParamsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.FugueParamsContext
            super().__init__(parser)
            self.obj = None # FugueJsonObjContext
            self.copyFrom(ctx)

        def fugueJsonObj(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueJsonObjContext,0)

        def PARAMS(self):
            return self.getToken(fugue_sqlParser.PARAMS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueParamsObj" ):
                return visitor.visitFugueParamsObj(self)
            else:
                return visitor.visitChildren(self)



    def fugueParams(self):

        localctx = fugue_sqlParser.FugueParamsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_fugueParams)
        self._la = 0 # Token type
        try:
            self.state = 944
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.FugueParamsPairsContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 938
                self.match(fugue_sqlParser.PARAMS)
                self.state = 939
                localctx.pairs = self.fugueJsonPairs()
                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.FugueParamsObjContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 941
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==25:
                    self.state = 940
                    self.match(fugue_sqlParser.PARAMS)


                self.state = 943
                localctx.obj = self.fugueJsonObj()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueColsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fugueColumnIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.FugueColumnIdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.FugueColumnIdentifierContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueCols

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueCols" ):
                return visitor.visitFugueCols(self)
            else:
                return visitor.visitChildren(self)




    def fugueCols(self):

        localctx = fugue_sqlParser.FugueColsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_fugueCols)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 946
            self.fugueColumnIdentifier()
            self.state = 951
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,106,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 947
                    self.match(fugue_sqlParser.T__0)
                    self.state = 948
                    self.fugueColumnIdentifier() 
                self.state = 953
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,106,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueColsSortContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fugueColSort(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.FugueColSortContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.FugueColSortContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueColsSort

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueColsSort" ):
                return visitor.visitFugueColsSort(self)
            else:
                return visitor.visitChildren(self)




    def fugueColsSort(self):

        localctx = fugue_sqlParser.FugueColsSortContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_fugueColsSort)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 954
            self.fugueColSort()
            self.state = 959
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,107,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 955
                    self.match(fugue_sqlParser.T__0)
                    self.state = 956
                    self.fugueColSort() 
                self.state = 961
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,107,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueColSortContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fugueColumnIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueColumnIdentifierContext,0)


        def ASC(self):
            return self.getToken(fugue_sqlParser.ASC, 0)

        def DESC(self):
            return self.getToken(fugue_sqlParser.DESC, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueColSort

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueColSort" ):
                return visitor.visitFugueColSort(self)
            else:
                return visitor.visitChildren(self)




    def fugueColSort(self):

        localctx = fugue_sqlParser.FugueColSortContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_fugueColSort)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 962
            self.fugueColumnIdentifier()
            self.state = 964
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
            if la_ == 1:
                self.state = 963
                _la = self._input.LA(1)
                if not(_la==64 or _la==110):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueColumnIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fugueIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueIdentifierContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueColumnIdentifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueColumnIdentifier" ):
                return visitor.visitFugueColumnIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def fugueColumnIdentifier(self):

        localctx = fugue_sqlParser.FugueColumnIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_fugueColumnIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 966
            self.fugueIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueRenameExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fugueRenamePair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.FugueRenamePairContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.FugueRenamePairContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueRenameExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueRenameExpression" ):
                return visitor.visitFugueRenameExpression(self)
            else:
                return visitor.visitChildren(self)




    def fugueRenameExpression(self):

        localctx = fugue_sqlParser.FugueRenameExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_fugueRenameExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 968
            self.fugueRenamePair()
            self.state = 973
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,109,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 969
                    self.match(fugue_sqlParser.T__0)
                    self.state = 970
                    self.fugueRenamePair() 
                self.state = 975
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,109,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueWildSchemaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fugueWildSchemaPair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.FugueWildSchemaPairContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.FugueWildSchemaPairContext,i)


        def fugueSchemaOp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.FugueSchemaOpContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.FugueSchemaOpContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueWildSchema

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueWildSchema" ):
                return visitor.visitFugueWildSchema(self)
            else:
                return visitor.visitChildren(self)




    def fugueWildSchema(self):

        localctx = fugue_sqlParser.FugueWildSchemaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_fugueWildSchema)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 976
            self.fugueWildSchemaPair()
            self.state = 981
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,110,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 977
                    self.match(fugue_sqlParser.T__0)
                    self.state = 978
                    self.fugueWildSchemaPair() 
                self.state = 983
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,110,self._ctx)

            self.state = 987
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,111,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 984
                    self.fugueSchemaOp() 
                self.state = 989
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,111,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueWildSchemaPairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.pair = None # FugueSchemaPairContext

        def fugueSchemaPair(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSchemaPairContext,0)


        def ASTERISK(self):
            return self.getToken(fugue_sqlParser.ASTERISK, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueWildSchemaPair

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueWildSchemaPair" ):
                return visitor.visitFugueWildSchemaPair(self)
            else:
                return visitor.visitChildren(self)




    def fugueWildSchemaPair(self):

        localctx = fugue_sqlParser.FugueWildSchemaPairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_fugueWildSchemaPair)
        try:
            self.state = 992
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 319, 334, 335]:
                self.enterOuterAlt(localctx, 1)
                self.state = 990
                localctx.pair = self.fugueSchemaPair()
                pass
            elif token in [316]:
                self.enterOuterAlt(localctx, 2)
                self.state = 991
                self.match(fugue_sqlParser.ASTERISK)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueSchemaOpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fugueSchemaKey(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.FugueSchemaKeyContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.FugueSchemaKeyContext,i)


        def MINUS(self):
            return self.getToken(fugue_sqlParser.MINUS, 0)

        def TILDE(self):
            return self.getToken(fugue_sqlParser.TILDE, 0)

        def PLUS(self):
            return self.getToken(fugue_sqlParser.PLUS, 0)

        def fugueSchema(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSchemaContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueSchemaOp

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueSchemaOp" ):
                return visitor.visitFugueSchemaOp(self)
            else:
                return visitor.visitChildren(self)




    def fugueSchemaOp(self):

        localctx = fugue_sqlParser.FugueSchemaOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_fugueSchemaOp)
        self._la = 0 # Token type
        try:
            self.state = 1005
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [315, 320]:
                self.enterOuterAlt(localctx, 1)
                self.state = 994
                _la = self._input.LA(1)
                if not(_la==315 or _la==320):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 995
                self.fugueSchemaKey()
                self.state = 1000
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,113,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 996
                        self.match(fugue_sqlParser.T__0)
                        self.state = 997
                        self.fugueSchemaKey() 
                    self.state = 1002
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,113,self._ctx)

                pass
            elif token in [314]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1003
                self.match(fugue_sqlParser.PLUS)
                self.state = 1004
                self.fugueSchema()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueSchemaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fugueSchemaPair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.FugueSchemaPairContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.FugueSchemaPairContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueSchema

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueSchema" ):
                return visitor.visitFugueSchema(self)
            else:
                return visitor.visitChildren(self)




    def fugueSchema(self):

        localctx = fugue_sqlParser.FugueSchemaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_fugueSchema)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1007
            self.fugueSchemaPair()
            self.state = 1012
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,115,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1008
                    self.match(fugue_sqlParser.T__0)
                    self.state = 1009
                    self.fugueSchemaPair() 
                self.state = 1014
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,115,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueSchemaPairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.key = None # FugueSchemaKeyContext
            self.value = None # FugueSchemaTypeContext

        def fugueSchemaKey(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSchemaKeyContext,0)


        def fugueSchemaType(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSchemaTypeContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueSchemaPair

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueSchemaPair" ):
                return visitor.visitFugueSchemaPair(self)
            else:
                return visitor.visitChildren(self)




    def fugueSchemaPair(self):

        localctx = fugue_sqlParser.FugueSchemaPairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_fugueSchemaPair)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1015
            localctx.key = self.fugueSchemaKey()
            self.state = 1016
            self.match(fugue_sqlParser.T__1)
            self.state = 1017
            localctx.value = self.fugueSchemaType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueSchemaKeyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fugueIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueIdentifierContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueSchemaKey

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueSchemaKey" ):
                return visitor.visitFugueSchemaKey(self)
            else:
                return visitor.visitChildren(self)




    def fugueSchemaKey(self):

        localctx = fugue_sqlParser.FugueSchemaKeyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_fugueSchemaKey)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1019
            self.fugueIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueSchemaTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueSchemaType

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class FugueSchemaSimpleTypeContext(FugueSchemaTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.FugueSchemaTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def fugueIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueIdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueSchemaSimpleType" ):
                return visitor.visitFugueSchemaSimpleType(self)
            else:
                return visitor.visitChildren(self)


    class FugueSchemaMapTypeContext(FugueSchemaTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.FugueSchemaTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LT(self):
            return self.getToken(fugue_sqlParser.LT, 0)
        def fugueSchemaType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.FugueSchemaTypeContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.FugueSchemaTypeContext,i)

        def GT(self):
            return self.getToken(fugue_sqlParser.GT, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueSchemaMapType" ):
                return visitor.visitFugueSchemaMapType(self)
            else:
                return visitor.visitChildren(self)


    class FugueSchemaStructTypeContext(FugueSchemaTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.FugueSchemaTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def fugueSchema(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSchemaContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueSchemaStructType" ):
                return visitor.visitFugueSchemaStructType(self)
            else:
                return visitor.visitChildren(self)


    class FugueSchemaListTypeContext(FugueSchemaTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.FugueSchemaTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def fugueSchemaType(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSchemaTypeContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueSchemaListType" ):
                return visitor.visitFugueSchemaListType(self)
            else:
                return visitor.visitChildren(self)



    def fugueSchemaType(self):

        localctx = fugue_sqlParser.FugueSchemaTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_fugueSchemaType)
        try:
            self.state = 1036
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 319, 334, 335]:
                localctx = fugue_sqlParser.FugueSchemaSimpleTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1021
                self.fugueIdentifier()
                pass
            elif token in [5]:
                localctx = fugue_sqlParser.FugueSchemaListTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1022
                self.match(fugue_sqlParser.T__4)
                self.state = 1023
                self.fugueSchemaType()
                self.state = 1024
                self.match(fugue_sqlParser.T__5)
                pass
            elif token in [8]:
                localctx = fugue_sqlParser.FugueSchemaStructTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1026
                self.match(fugue_sqlParser.T__7)
                self.state = 1027
                self.fugueSchema()
                self.state = 1028
                self.match(fugue_sqlParser.T__8)
                pass
            elif token in [310]:
                localctx = fugue_sqlParser.FugueSchemaMapTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1030
                self.match(fugue_sqlParser.LT)
                self.state = 1031
                self.fugueSchemaType()
                self.state = 1032
                self.match(fugue_sqlParser.T__0)
                self.state = 1033
                self.fugueSchemaType()
                self.state = 1034
                self.match(fugue_sqlParser.GT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueRenamePairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.key = None # FugueSchemaKeyContext
            self.value = None # FugueSchemaKeyContext

        def fugueSchemaKey(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.FugueSchemaKeyContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.FugueSchemaKeyContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueRenamePair

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueRenamePair" ):
                return visitor.visitFugueRenamePair(self)
            else:
                return visitor.visitChildren(self)




    def fugueRenamePair(self):

        localctx = fugue_sqlParser.FugueRenamePairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_fugueRenamePair)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1038
            localctx.key = self.fugueSchemaKey()
            self.state = 1039
            self.match(fugue_sqlParser.T__1)
            self.state = 1040
            localctx.value = self.fugueSchemaKey()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueJsonContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fugueJsonValue(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueJsonValueContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueJson

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueJson" ):
                return visitor.visitFugueJson(self)
            else:
                return visitor.visitChildren(self)




    def fugueJson(self):

        localctx = fugue_sqlParser.FugueJsonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_fugueJson)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1042
            self.fugueJsonValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueJsonObjContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fugueJsonPairs(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueJsonPairsContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueJsonObj

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueJsonObj" ):
                return visitor.visitFugueJsonObj(self)
            else:
                return visitor.visitChildren(self)




    def fugueJsonObj(self):

        localctx = fugue_sqlParser.FugueJsonObjContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_fugueJsonObj)
        self._la = 0 # Token type
        try:
            self.state = 1062
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1044
                self.match(fugue_sqlParser.T__7)
                self.state = 1045
                self.fugueJsonPairs()
                self.state = 1047
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 1046
                    self.match(fugue_sqlParser.T__0)


                self.state = 1049
                self.match(fugue_sqlParser.T__8)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1051
                self.match(fugue_sqlParser.T__7)
                self.state = 1052
                self.match(fugue_sqlParser.T__8)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1053
                self.match(fugue_sqlParser.T__2)
                self.state = 1054
                self.fugueJsonPairs()
                self.state = 1056
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 1055
                    self.match(fugue_sqlParser.T__0)


                self.state = 1058
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1060
                self.match(fugue_sqlParser.T__2)
                self.state = 1061
                self.match(fugue_sqlParser.T__3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueJsonPairsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fugueJsonPair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.FugueJsonPairContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.FugueJsonPairContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueJsonPairs

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueJsonPairs" ):
                return visitor.visitFugueJsonPairs(self)
            else:
                return visitor.visitChildren(self)




    def fugueJsonPairs(self):

        localctx = fugue_sqlParser.FugueJsonPairsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_fugueJsonPairs)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1064
            self.fugueJsonPair()
            self.state = 1069
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,120,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1065
                    self.match(fugue_sqlParser.T__0)
                    self.state = 1066
                    self.fugueJsonPair() 
                self.state = 1071
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,120,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueJsonPairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.key = None # FugueJsonKeyContext
            self.value = None # FugueJsonValueContext

        def fugueJsonKey(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueJsonKeyContext,0)


        def EQUAL(self):
            return self.getToken(fugue_sqlParser.EQUAL, 0)

        def fugueJsonValue(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueJsonValueContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueJsonPair

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueJsonPair" ):
                return visitor.visitFugueJsonPair(self)
            else:
                return visitor.visitChildren(self)




    def fugueJsonPair(self):

        localctx = fugue_sqlParser.FugueJsonPairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_fugueJsonPair)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1072
            localctx.key = self.fugueJsonKey()
            self.state = 1073
            _la = self._input.LA(1)
            if not(_la==2 or _la==305):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1074
            localctx.value = self.fugueJsonValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueJsonKeyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fugueIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueIdentifierContext,0)


        def fugueJsonString(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueJsonStringContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueJsonKey

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueJsonKey" ):
                return visitor.visitFugueJsonKey(self)
            else:
                return visitor.visitChildren(self)




    def fugueJsonKey(self):

        localctx = fugue_sqlParser.FugueJsonKeyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_fugueJsonKey)
        try:
            self.state = 1078
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 319, 334, 335]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1076
                self.fugueIdentifier()
                pass
            elif token in [325]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1077
                self.fugueJsonString()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueJsonArrayContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fugueJsonValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.FugueJsonValueContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.FugueJsonValueContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueJsonArray

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueJsonArray" ):
                return visitor.visitFugueJsonArray(self)
            else:
                return visitor.visitChildren(self)




    def fugueJsonArray(self):

        localctx = fugue_sqlParser.FugueJsonArrayContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_fugueJsonArray)
        self._la = 0 # Token type
        try:
            self.state = 1096
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,124,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1080
                self.match(fugue_sqlParser.T__4)
                self.state = 1081
                self.fugueJsonValue()
                self.state = 1086
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,122,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1082
                        self.match(fugue_sqlParser.T__0)
                        self.state = 1083
                        self.fugueJsonValue() 
                    self.state = 1088
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,122,self._ctx)

                self.state = 1090
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 1089
                    self.match(fugue_sqlParser.T__0)


                self.state = 1092
                self.match(fugue_sqlParser.T__5)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1094
                self.match(fugue_sqlParser.T__4)
                self.state = 1095
                self.match(fugue_sqlParser.T__5)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueJsonValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fugueJsonString(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueJsonStringContext,0)


        def fugueJsonNumber(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueJsonNumberContext,0)


        def fugueJsonObj(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueJsonObjContext,0)


        def fugueJsonArray(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueJsonArrayContext,0)


        def fugueJsonBool(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueJsonBoolContext,0)


        def fugueJsonNull(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueJsonNullContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueJsonValue

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueJsonValue" ):
                return visitor.visitFugueJsonValue(self)
            else:
                return visitor.visitChildren(self)




    def fugueJsonValue(self):

        localctx = fugue_sqlParser.FugueJsonValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_fugueJsonValue)
        try:
            self.state = 1104
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [325]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1098
                self.fugueJsonString()
                pass
            elif token in [315, 326, 327, 328, 329, 330, 331, 332, 333]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1099
                self.fugueJsonNumber()
                pass
            elif token in [3, 8]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1100
                self.fugueJsonObj()
                pass
            elif token in [5]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1101
                self.fugueJsonArray()
                pass
            elif token in [10, 11, 130, 282]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1102
                self.fugueJsonBool()
                pass
            elif token in [12, 195]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1103
                self.fugueJsonNull()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueJsonNumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def number(self):
            return self.getTypedRuleContext(fugue_sqlParser.NumberContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueJsonNumber

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueJsonNumber" ):
                return visitor.visitFugueJsonNumber(self)
            else:
                return visitor.visitChildren(self)




    def fugueJsonNumber(self):

        localctx = fugue_sqlParser.FugueJsonNumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_fugueJsonNumber)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1106
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueJsonStringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueJsonString

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueJsonString" ):
                return visitor.visitFugueJsonString(self)
            else:
                return visitor.visitChildren(self)




    def fugueJsonString(self):

        localctx = fugue_sqlParser.FugueJsonStringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_fugueJsonString)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1108
            self.match(fugue_sqlParser.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueJsonBoolContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(fugue_sqlParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(fugue_sqlParser.FALSE, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueJsonBool

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueJsonBool" ):
                return visitor.visitFugueJsonBool(self)
            else:
                return visitor.visitChildren(self)




    def fugueJsonBool(self):

        localctx = fugue_sqlParser.FugueJsonBoolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_fugueJsonBool)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1110
            _la = self._input.LA(1)
            if not(_la==10 or _la==11 or _la==130 or _la==282):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueJsonNullContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def THENULL(self):
            return self.getToken(fugue_sqlParser.THENULL, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueJsonNull

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueJsonNull" ):
                return visitor.visitFugueJsonNull(self)
            else:
                return visitor.visitChildren(self)




    def fugueJsonNull(self):

        localctx = fugue_sqlParser.FugueJsonNullContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_fugueJsonNull)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1112
            _la = self._input.LA(1)
            if not(_la==12 or _la==195):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueIdentifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueIdentifier" ):
                return visitor.visitFugueIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def fugueIdentifier(self):

        localctx = fugue_sqlParser.FugueIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_fugueIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1114
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(fugue_sqlParser.StatementContext,0)


        def EOF(self):
            return self.getToken(fugue_sqlParser.EOF, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_singleStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleStatement" ):
                return visitor.visitSingleStatement(self)
            else:
                return visitor.visitChildren(self)




    def singleStatement(self):

        localctx = fugue_sqlParser.SingleStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_singleStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1116
            self.statement()
            self.state = 1120
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==13:
                self.state = 1117
                self.match(fugue_sqlParser.T__12)
                self.state = 1122
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1123
            self.match(fugue_sqlParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namedExpression(self):
            return self.getTypedRuleContext(fugue_sqlParser.NamedExpressionContext,0)


        def EOF(self):
            return self.getToken(fugue_sqlParser.EOF, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_singleExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleExpression" ):
                return visitor.visitSingleExpression(self)
            else:
                return visitor.visitChildren(self)




    def singleExpression(self):

        localctx = fugue_sqlParser.SingleExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_singleExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1125
            self.namedExpression()
            self.state = 1126
            self.match(fugue_sqlParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleTableIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.TableIdentifierContext,0)


        def EOF(self):
            return self.getToken(fugue_sqlParser.EOF, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_singleTableIdentifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleTableIdentifier" ):
                return visitor.visitSingleTableIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def singleTableIdentifier(self):

        localctx = fugue_sqlParser.SingleTableIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_singleTableIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1128
            self.tableIdentifier()
            self.state = 1129
            self.match(fugue_sqlParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleMultipartIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)


        def EOF(self):
            return self.getToken(fugue_sqlParser.EOF, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_singleMultipartIdentifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleMultipartIdentifier" ):
                return visitor.visitSingleMultipartIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def singleMultipartIdentifier(self):

        localctx = fugue_sqlParser.SingleMultipartIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_singleMultipartIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1131
            self.multipartIdentifier()
            self.state = 1132
            self.match(fugue_sqlParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleFunctionIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.FunctionIdentifierContext,0)


        def EOF(self):
            return self.getToken(fugue_sqlParser.EOF, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_singleFunctionIdentifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleFunctionIdentifier" ):
                return visitor.visitSingleFunctionIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def singleFunctionIdentifier(self):

        localctx = fugue_sqlParser.SingleFunctionIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_singleFunctionIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1134
            self.functionIdentifier()
            self.state = 1135
            self.match(fugue_sqlParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleDataTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dataType(self):
            return self.getTypedRuleContext(fugue_sqlParser.DataTypeContext,0)


        def EOF(self):
            return self.getToken(fugue_sqlParser.EOF, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_singleDataType

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleDataType" ):
                return visitor.visitSingleDataType(self)
            else:
                return visitor.visitChildren(self)




    def singleDataType(self):

        localctx = fugue_sqlParser.SingleDataTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_singleDataType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1137
            self.dataType()
            self.state = 1138
            self.match(fugue_sqlParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleTableSchemaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colTypeList(self):
            return self.getTypedRuleContext(fugue_sqlParser.ColTypeListContext,0)


        def EOF(self):
            return self.getToken(fugue_sqlParser.EOF, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_singleTableSchema

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleTableSchema" ):
                return visitor.visitSingleTableSchema(self)
            else:
                return visitor.visitChildren(self)




    def singleTableSchema(self):

        localctx = fugue_sqlParser.SingleTableSchemaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_singleTableSchema)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1140
            self.colTypeList()
            self.state = 1141
            self.match(fugue_sqlParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_statement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ExplainContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXPLAIN(self):
            return self.getToken(fugue_sqlParser.EXPLAIN, 0)
        def statement(self):
            return self.getTypedRuleContext(fugue_sqlParser.StatementContext,0)

        def LOGICAL(self):
            return self.getToken(fugue_sqlParser.LOGICAL, 0)
        def FORMATTED(self):
            return self.getToken(fugue_sqlParser.FORMATTED, 0)
        def EXTENDED(self):
            return self.getToken(fugue_sqlParser.EXTENDED, 0)
        def CODEGEN(self):
            return self.getToken(fugue_sqlParser.CODEGEN, 0)
        def COST(self):
            return self.getToken(fugue_sqlParser.COST, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExplain" ):
                return visitor.visitExplain(self)
            else:
                return visitor.visitChildren(self)


    class ResetConfigurationContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def RESET(self):
            return self.getToken(fugue_sqlParser.RESET, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitResetConfiguration" ):
                return visitor.visitResetConfiguration(self)
            else:
                return visitor.visitChildren(self)


    class AlterViewQueryContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)
        def VIEW(self):
            return self.getToken(fugue_sqlParser.VIEW, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def query(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryContext,0)

        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterViewQuery" ):
                return visitor.visitAlterViewQuery(self)
            else:
                return visitor.visitChildren(self)


    class UseContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def USE(self):
            return self.getToken(fugue_sqlParser.USE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def NAMESPACE(self):
            return self.getToken(fugue_sqlParser.NAMESPACE, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUse" ):
                return visitor.visitUse(self)
            else:
                return visitor.visitChildren(self)


    class DropNamespaceContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(fugue_sqlParser.DROP, 0)
        def theNamespace(self):
            return self.getTypedRuleContext(fugue_sqlParser.TheNamespaceContext,0)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def IF(self):
            return self.getToken(fugue_sqlParser.IF, 0)
        def EXISTS(self):
            return self.getToken(fugue_sqlParser.EXISTS, 0)
        def RESTRICT(self):
            return self.getToken(fugue_sqlParser.RESTRICT, 0)
        def CASCADE(self):
            return self.getToken(fugue_sqlParser.CASCADE, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropNamespace" ):
                return visitor.visitDropNamespace(self)
            else:
                return visitor.visitChildren(self)


    class CreateTempViewUsingContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(fugue_sqlParser.CREATE, 0)
        def TEMPORARY(self):
            return self.getToken(fugue_sqlParser.TEMPORARY, 0)
        def VIEW(self):
            return self.getToken(fugue_sqlParser.VIEW, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.TableIdentifierContext,0)

        def tableProvider(self):
            return self.getTypedRuleContext(fugue_sqlParser.TableProviderContext,0)

        def OR(self):
            return self.getToken(fugue_sqlParser.OR, 0)
        def REPLACE(self):
            return self.getToken(fugue_sqlParser.REPLACE, 0)
        def GLOBAL(self):
            return self.getToken(fugue_sqlParser.GLOBAL, 0)
        def colTypeList(self):
            return self.getTypedRuleContext(fugue_sqlParser.ColTypeListContext,0)

        def OPTIONS(self):
            return self.getToken(fugue_sqlParser.OPTIONS, 0)
        def tablePropertyList(self):
            return self.getTypedRuleContext(fugue_sqlParser.TablePropertyListContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateTempViewUsing" ):
                return visitor.visitCreateTempViewUsing(self)
            else:
                return visitor.visitChildren(self)


    class RenameTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.ifrom = None # MultipartIdentifierContext
            self.to = None # MultipartIdentifierContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)
        def RENAME(self):
            return self.getToken(fugue_sqlParser.RENAME, 0)
        def TO(self):
            return self.getToken(fugue_sqlParser.TO, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def VIEW(self):
            return self.getToken(fugue_sqlParser.VIEW, 0)
        def multipartIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.MultipartIdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,i)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRenameTable" ):
                return visitor.visitRenameTable(self)
            else:
                return visitor.visitChildren(self)


    class FailNativeCommandContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SET(self):
            return self.getToken(fugue_sqlParser.SET, 0)
        def ROLE(self):
            return self.getToken(fugue_sqlParser.ROLE, 0)
        def unsupportedHiveNativeCommands(self):
            return self.getTypedRuleContext(fugue_sqlParser.UnsupportedHiveNativeCommandsContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFailNativeCommand" ):
                return visitor.visitFailNativeCommand(self)
            else:
                return visitor.visitChildren(self)


    class ClearCacheContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CLEAR(self):
            return self.getToken(fugue_sqlParser.CLEAR, 0)
        def CACHE(self):
            return self.getToken(fugue_sqlParser.CACHE, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClearCache" ):
                return visitor.visitClearCache(self)
            else:
                return visitor.visitChildren(self)


    class DropViewContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(fugue_sqlParser.DROP, 0)
        def VIEW(self):
            return self.getToken(fugue_sqlParser.VIEW, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def IF(self):
            return self.getToken(fugue_sqlParser.IF, 0)
        def EXISTS(self):
            return self.getToken(fugue_sqlParser.EXISTS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropView" ):
                return visitor.visitDropView(self)
            else:
                return visitor.visitChildren(self)


    class ShowTablesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.pattern = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(fugue_sqlParser.SHOW, 0)
        def TABLES(self):
            return self.getToken(fugue_sqlParser.TABLES, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def FROM(self):
            return self.getToken(fugue_sqlParser.FROM, 0)
        def IN(self):
            return self.getToken(fugue_sqlParser.IN, 0)
        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)
        def LIKE(self):
            return self.getToken(fugue_sqlParser.LIKE, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowTables" ):
                return visitor.visitShowTables(self)
            else:
                return visitor.visitChildren(self)


    class RecoverPartitionsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def RECOVER(self):
            return self.getToken(fugue_sqlParser.RECOVER, 0)
        def PARTITIONS(self):
            return self.getToken(fugue_sqlParser.PARTITIONS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRecoverPartitions" ):
                return visitor.visitRecoverPartitions(self)
            else:
                return visitor.visitChildren(self)


    class ShowCurrentNamespaceContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(fugue_sqlParser.SHOW, 0)
        def CURRENT(self):
            return self.getToken(fugue_sqlParser.CURRENT, 0)
        def NAMESPACE(self):
            return self.getToken(fugue_sqlParser.NAMESPACE, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowCurrentNamespace" ):
                return visitor.visitShowCurrentNamespace(self)
            else:
                return visitor.visitChildren(self)


    class RenameTablePartitionContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.ifrom = None # PartitionSpecContext
            self.to = None # PartitionSpecContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def RENAME(self):
            return self.getToken(fugue_sqlParser.RENAME, 0)
        def TO(self):
            return self.getToken(fugue_sqlParser.TO, 0)
        def partitionSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.PartitionSpecContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.PartitionSpecContext,i)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRenameTablePartition" ):
                return visitor.visitRenameTablePartition(self)
            else:
                return visitor.visitChildren(self)


    class RepairTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MSCK(self):
            return self.getToken(fugue_sqlParser.MSCK, 0)
        def REPAIR(self):
            return self.getToken(fugue_sqlParser.REPAIR, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRepairTable" ):
                return visitor.visitRepairTable(self)
            else:
                return visitor.visitChildren(self)


    class RefreshResourceContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REFRESH(self):
            return self.getToken(fugue_sqlParser.REFRESH, 0)
        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRefreshResource" ):
                return visitor.visitRefreshResource(self)
            else:
                return visitor.visitChildren(self)


    class ShowCreateTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(fugue_sqlParser.SHOW, 0)
        def CREATE(self):
            return self.getToken(fugue_sqlParser.CREATE, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)
        def SERDE(self):
            return self.getToken(fugue_sqlParser.SERDE, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowCreateTable" ):
                return visitor.visitShowCreateTable(self)
            else:
                return visitor.visitChildren(self)


    class ShowNamespacesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.pattern = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(fugue_sqlParser.SHOW, 0)
        def DATABASES(self):
            return self.getToken(fugue_sqlParser.DATABASES, 0)
        def NAMESPACES(self):
            return self.getToken(fugue_sqlParser.NAMESPACES, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def FROM(self):
            return self.getToken(fugue_sqlParser.FROM, 0)
        def IN(self):
            return self.getToken(fugue_sqlParser.IN, 0)
        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)
        def LIKE(self):
            return self.getToken(fugue_sqlParser.LIKE, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowNamespaces" ):
                return visitor.visitShowNamespaces(self)
            else:
                return visitor.visitChildren(self)


    class ShowColumnsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.table = None # MultipartIdentifierContext
            self.ns = None # MultipartIdentifierContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(fugue_sqlParser.SHOW, 0)
        def COLUMNS(self):
            return self.getToken(fugue_sqlParser.COLUMNS, 0)
        def FROM(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.FROM)
            else:
                return self.getToken(fugue_sqlParser.FROM, i)
        def IN(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.IN)
            else:
                return self.getToken(fugue_sqlParser.IN, i)
        def multipartIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.MultipartIdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,i)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowColumns" ):
                return visitor.visitShowColumns(self)
            else:
                return visitor.visitChildren(self)


    class ReplaceTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def replaceTableHeader(self):
            return self.getTypedRuleContext(fugue_sqlParser.ReplaceTableHeaderContext,0)

        def tableProvider(self):
            return self.getTypedRuleContext(fugue_sqlParser.TableProviderContext,0)

        def createTableClauses(self):
            return self.getTypedRuleContext(fugue_sqlParser.CreateTableClausesContext,0)

        def colTypeList(self):
            return self.getTypedRuleContext(fugue_sqlParser.ColTypeListContext,0)

        def query(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryContext,0)

        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReplaceTable" ):
                return visitor.visitReplaceTable(self)
            else:
                return visitor.visitChildren(self)


    class AddTablePartitionContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def ADD(self):
            return self.getToken(fugue_sqlParser.ADD, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def VIEW(self):
            return self.getToken(fugue_sqlParser.VIEW, 0)
        def IF(self):
            return self.getToken(fugue_sqlParser.IF, 0)
        def NOT(self):
            return self.getToken(fugue_sqlParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(fugue_sqlParser.EXISTS, 0)
        def partitionSpecLocation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.PartitionSpecLocationContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.PartitionSpecLocationContext,i)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAddTablePartition" ):
                return visitor.visitAddTablePartition(self)
            else:
                return visitor.visitChildren(self)


    class SetNamespaceLocationContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)
        def theNamespace(self):
            return self.getTypedRuleContext(fugue_sqlParser.TheNamespaceContext,0)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def SET(self):
            return self.getToken(fugue_sqlParser.SET, 0)
        def locationSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.LocationSpecContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetNamespaceLocation" ):
                return visitor.visitSetNamespaceLocation(self)
            else:
                return visitor.visitChildren(self)


    class RefreshTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REFRESH(self):
            return self.getToken(fugue_sqlParser.REFRESH, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRefreshTable" ):
                return visitor.visitRefreshTable(self)
            else:
                return visitor.visitChildren(self)


    class SetNamespacePropertiesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)
        def theNamespace(self):
            return self.getTypedRuleContext(fugue_sqlParser.TheNamespaceContext,0)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def SET(self):
            return self.getToken(fugue_sqlParser.SET, 0)
        def tablePropertyList(self):
            return self.getTypedRuleContext(fugue_sqlParser.TablePropertyListContext,0)

        def DBPROPERTIES(self):
            return self.getToken(fugue_sqlParser.DBPROPERTIES, 0)
        def PROPERTIES(self):
            return self.getToken(fugue_sqlParser.PROPERTIES, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetNamespaceProperties" ):
                return visitor.visitSetNamespaceProperties(self)
            else:
                return visitor.visitChildren(self)


    class ManageResourceContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)

        def ADD(self):
            return self.getToken(fugue_sqlParser.ADD, 0)
        def LIST(self):
            return self.getToken(fugue_sqlParser.LIST, 0)
        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitManageResource" ):
                return visitor.visitManageResource(self)
            else:
                return visitor.visitChildren(self)


    class AnalyzeContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ANALYZE(self):
            return self.getToken(fugue_sqlParser.ANALYZE, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def COMPUTE(self):
            return self.getToken(fugue_sqlParser.COMPUTE, 0)
        def STATISTICS(self):
            return self.getToken(fugue_sqlParser.STATISTICS, 0)
        def partitionSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.PartitionSpecContext,0)

        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)

        def FOR(self):
            return self.getToken(fugue_sqlParser.FOR, 0)
        def COLUMNS(self):
            return self.getToken(fugue_sqlParser.COLUMNS, 0)
        def identifierSeq(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierSeqContext,0)

        def ALL(self):
            return self.getToken(fugue_sqlParser.ALL, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnalyze" ):
                return visitor.visitAnalyze(self)
            else:
                return visitor.visitChildren(self)


    class CreateHiveTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.columns = None # ColTypeListContext
            self.partitionColumns = None # ColTypeListContext
            self.partitionColumnNames = None # IdentifierListContext
            self.tableProps = None # TablePropertyListContext
            self.copyFrom(ctx)

        def createTableHeader(self):
            return self.getTypedRuleContext(fugue_sqlParser.CreateTableHeaderContext,0)

        def commentSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.CommentSpecContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.CommentSpecContext,i)

        def bucketSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.BucketSpecContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.BucketSpecContext,i)

        def skewSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.SkewSpecContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.SkewSpecContext,i)

        def rowFormat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.RowFormatContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.RowFormatContext,i)

        def createFileFormat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.CreateFileFormatContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.CreateFileFormatContext,i)

        def locationSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.LocationSpecContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.LocationSpecContext,i)

        def query(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryContext,0)

        def colTypeList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ColTypeListContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ColTypeListContext,i)

        def PARTITIONED(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.PARTITIONED)
            else:
                return self.getToken(fugue_sqlParser.PARTITIONED, i)
        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.BY)
            else:
                return self.getToken(fugue_sqlParser.BY, i)
        def TBLPROPERTIES(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.TBLPROPERTIES)
            else:
                return self.getToken(fugue_sqlParser.TBLPROPERTIES, i)
        def identifierList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.IdentifierListContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.IdentifierListContext,i)

        def tablePropertyList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.TablePropertyListContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.TablePropertyListContext,i)

        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateHiveTable" ):
                return visitor.visitCreateHiveTable(self)
            else:
                return visitor.visitChildren(self)


    class CreateFunctionContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.className = None # Token
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(fugue_sqlParser.CREATE, 0)
        def FUNCTION(self):
            return self.getToken(fugue_sqlParser.FUNCTION, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)
        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)
        def OR(self):
            return self.getToken(fugue_sqlParser.OR, 0)
        def REPLACE(self):
            return self.getToken(fugue_sqlParser.REPLACE, 0)
        def TEMPORARY(self):
            return self.getToken(fugue_sqlParser.TEMPORARY, 0)
        def IF(self):
            return self.getToken(fugue_sqlParser.IF, 0)
        def NOT(self):
            return self.getToken(fugue_sqlParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(fugue_sqlParser.EXISTS, 0)
        def USING(self):
            return self.getToken(fugue_sqlParser.USING, 0)
        def resource(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ResourceContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ResourceContext,i)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateFunction" ):
                return visitor.visitCreateFunction(self)
            else:
                return visitor.visitChildren(self)


    class ShowTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.ns = None # MultipartIdentifierContext
            self.pattern = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(fugue_sqlParser.SHOW, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def EXTENDED(self):
            return self.getToken(fugue_sqlParser.EXTENDED, 0)
        def LIKE(self):
            return self.getToken(fugue_sqlParser.LIKE, 0)
        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)
        def partitionSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.PartitionSpecContext,0)

        def FROM(self):
            return self.getToken(fugue_sqlParser.FROM, 0)
        def IN(self):
            return self.getToken(fugue_sqlParser.IN, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowTable" ):
                return visitor.visitShowTable(self)
            else:
                return visitor.visitChildren(self)


    class HiveReplaceColumnsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.table = None # MultipartIdentifierContext
            self.columns = None # QualifiedColTypeWithPositionListContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def REPLACE(self):
            return self.getToken(fugue_sqlParser.REPLACE, 0)
        def COLUMNS(self):
            return self.getToken(fugue_sqlParser.COLUMNS, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def qualifiedColTypeWithPositionList(self):
            return self.getTypedRuleContext(fugue_sqlParser.QualifiedColTypeWithPositionListContext,0)

        def partitionSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.PartitionSpecContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHiveReplaceColumns" ):
                return visitor.visitHiveReplaceColumns(self)
            else:
                return visitor.visitChildren(self)


    class CommentNamespaceContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.comment = None # Token
            self.copyFrom(ctx)

        def COMMENT(self):
            return self.getToken(fugue_sqlParser.COMMENT, 0)
        def ON(self):
            return self.getToken(fugue_sqlParser.ON, 0)
        def theNamespace(self):
            return self.getTypedRuleContext(fugue_sqlParser.TheNamespaceContext,0)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def IS(self):
            return self.getToken(fugue_sqlParser.IS, 0)
        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)
        def THENULL(self):
            return self.getToken(fugue_sqlParser.THENULL, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCommentNamespace" ):
                return visitor.visitCommentNamespace(self)
            else:
                return visitor.visitChildren(self)


    class CreateTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def createTableHeader(self):
            return self.getTypedRuleContext(fugue_sqlParser.CreateTableHeaderContext,0)

        def tableProvider(self):
            return self.getTypedRuleContext(fugue_sqlParser.TableProviderContext,0)

        def createTableClauses(self):
            return self.getTypedRuleContext(fugue_sqlParser.CreateTableClausesContext,0)

        def colTypeList(self):
            return self.getTypedRuleContext(fugue_sqlParser.ColTypeListContext,0)

        def query(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryContext,0)

        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateTable" ):
                return visitor.visitCreateTable(self)
            else:
                return visitor.visitChildren(self)


    class DmlStatementContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def dmlStatementNoWith(self):
            return self.getTypedRuleContext(fugue_sqlParser.DmlStatementNoWithContext,0)

        def ctes(self):
            return self.getTypedRuleContext(fugue_sqlParser.CtesContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDmlStatement" ):
                return visitor.visitDmlStatement(self)
            else:
                return visitor.visitChildren(self)


    class CreateTableLikeContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.target = None # TableIdentifierContext
            self.source = None # TableIdentifierContext
            self.tableProps = None # TablePropertyListContext
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(fugue_sqlParser.CREATE, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def LIKE(self):
            return self.getToken(fugue_sqlParser.LIKE, 0)
        def tableIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.TableIdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.TableIdentifierContext,i)

        def IF(self):
            return self.getToken(fugue_sqlParser.IF, 0)
        def NOT(self):
            return self.getToken(fugue_sqlParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(fugue_sqlParser.EXISTS, 0)
        def tableProvider(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.TableProviderContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.TableProviderContext,i)

        def rowFormat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.RowFormatContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.RowFormatContext,i)

        def createFileFormat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.CreateFileFormatContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.CreateFileFormatContext,i)

        def locationSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.LocationSpecContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.LocationSpecContext,i)

        def TBLPROPERTIES(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.TBLPROPERTIES)
            else:
                return self.getToken(fugue_sqlParser.TBLPROPERTIES, i)
        def tablePropertyList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.TablePropertyListContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.TablePropertyListContext,i)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateTableLike" ):
                return visitor.visitCreateTableLike(self)
            else:
                return visitor.visitChildren(self)


    class UncacheTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def UNCACHE(self):
            return self.getToken(fugue_sqlParser.UNCACHE, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def IF(self):
            return self.getToken(fugue_sqlParser.IF, 0)
        def EXISTS(self):
            return self.getToken(fugue_sqlParser.EXISTS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUncacheTable" ):
                return visitor.visitUncacheTable(self)
            else:
                return visitor.visitChildren(self)


    class DropFunctionContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(fugue_sqlParser.DROP, 0)
        def FUNCTION(self):
            return self.getToken(fugue_sqlParser.FUNCTION, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def TEMPORARY(self):
            return self.getToken(fugue_sqlParser.TEMPORARY, 0)
        def IF(self):
            return self.getToken(fugue_sqlParser.IF, 0)
        def EXISTS(self):
            return self.getToken(fugue_sqlParser.EXISTS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropFunction" ):
                return visitor.visitDropFunction(self)
            else:
                return visitor.visitChildren(self)


    class DescribeRelationContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.option = None # Token
            self.copyFrom(ctx)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def DESC(self):
            return self.getToken(fugue_sqlParser.DESC, 0)
        def DESCRIBE(self):
            return self.getToken(fugue_sqlParser.DESCRIBE, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def partitionSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.PartitionSpecContext,0)

        def describeColName(self):
            return self.getTypedRuleContext(fugue_sqlParser.DescribeColNameContext,0)

        def EXTENDED(self):
            return self.getToken(fugue_sqlParser.EXTENDED, 0)
        def FORMATTED(self):
            return self.getToken(fugue_sqlParser.FORMATTED, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDescribeRelation" ):
                return visitor.visitDescribeRelation(self)
            else:
                return visitor.visitChildren(self)


    class LoadDataContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.path = None # Token
            self.copyFrom(ctx)

        def LOAD(self):
            return self.getToken(fugue_sqlParser.LOAD, 0)
        def DATA(self):
            return self.getToken(fugue_sqlParser.DATA, 0)
        def INPATH(self):
            return self.getToken(fugue_sqlParser.INPATH, 0)
        def INTO(self):
            return self.getToken(fugue_sqlParser.INTO, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)
        def LOCAL(self):
            return self.getToken(fugue_sqlParser.LOCAL, 0)
        def OVERWRITE(self):
            return self.getToken(fugue_sqlParser.OVERWRITE, 0)
        def partitionSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.PartitionSpecContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLoadData" ):
                return visitor.visitLoadData(self)
            else:
                return visitor.visitChildren(self)


    class ShowPartitionsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(fugue_sqlParser.SHOW, 0)
        def PARTITIONS(self):
            return self.getToken(fugue_sqlParser.PARTITIONS, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def partitionSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.PartitionSpecContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowPartitions" ):
                return visitor.visitShowPartitions(self)
            else:
                return visitor.visitChildren(self)


    class DescribeFunctionContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FUNCTION(self):
            return self.getToken(fugue_sqlParser.FUNCTION, 0)
        def describeFuncName(self):
            return self.getTypedRuleContext(fugue_sqlParser.DescribeFuncNameContext,0)

        def DESC(self):
            return self.getToken(fugue_sqlParser.DESC, 0)
        def DESCRIBE(self):
            return self.getToken(fugue_sqlParser.DESCRIBE, 0)
        def EXTENDED(self):
            return self.getToken(fugue_sqlParser.EXTENDED, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDescribeFunction" ):
                return visitor.visitDescribeFunction(self)
            else:
                return visitor.visitChildren(self)


    class RenameTableColumnContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.table = None # MultipartIdentifierContext
            self.ifrom = None # MultipartIdentifierContext
            self.to = None # ErrorCapturingIdentifierContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def RENAME(self):
            return self.getToken(fugue_sqlParser.RENAME, 0)
        def COLUMN(self):
            return self.getToken(fugue_sqlParser.COLUMN, 0)
        def TO(self):
            return self.getToken(fugue_sqlParser.TO, 0)
        def multipartIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.MultipartIdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,i)

        def errorCapturingIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.ErrorCapturingIdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRenameTableColumn" ):
                return visitor.visitRenameTableColumn(self)
            else:
                return visitor.visitChildren(self)


    class StatementDefaultContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def query(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatementDefault" ):
                return visitor.visitStatementDefault(self)
            else:
                return visitor.visitChildren(self)


    class HiveChangeColumnContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.table = None # MultipartIdentifierContext
            self.colName = None # MultipartIdentifierContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def CHANGE(self):
            return self.getToken(fugue_sqlParser.CHANGE, 0)
        def colType(self):
            return self.getTypedRuleContext(fugue_sqlParser.ColTypeContext,0)

        def multipartIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.MultipartIdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,i)

        def partitionSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.PartitionSpecContext,0)

        def COLUMN(self):
            return self.getToken(fugue_sqlParser.COLUMN, 0)
        def colPosition(self):
            return self.getTypedRuleContext(fugue_sqlParser.ColPositionContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHiveChangeColumn" ):
                return visitor.visitHiveChangeColumn(self)
            else:
                return visitor.visitChildren(self)


    class DescribeQueryContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def query(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryContext,0)

        def DESC(self):
            return self.getToken(fugue_sqlParser.DESC, 0)
        def DESCRIBE(self):
            return self.getToken(fugue_sqlParser.DESCRIBE, 0)
        def QUERY(self):
            return self.getToken(fugue_sqlParser.QUERY, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDescribeQuery" ):
                return visitor.visitDescribeQuery(self)
            else:
                return visitor.visitChildren(self)


    class TruncateTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TRUNCATE(self):
            return self.getToken(fugue_sqlParser.TRUNCATE, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def partitionSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.PartitionSpecContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTruncateTable" ):
                return visitor.visitTruncateTable(self)
            else:
                return visitor.visitChildren(self)


    class SetTableSerDeContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def SET(self):
            return self.getToken(fugue_sqlParser.SET, 0)
        def SERDE(self):
            return self.getToken(fugue_sqlParser.SERDE, 0)
        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)
        def partitionSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.PartitionSpecContext,0)

        def WITH(self):
            return self.getToken(fugue_sqlParser.WITH, 0)
        def SERDEPROPERTIES(self):
            return self.getToken(fugue_sqlParser.SERDEPROPERTIES, 0)
        def tablePropertyList(self):
            return self.getTypedRuleContext(fugue_sqlParser.TablePropertyListContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetTableSerDe" ):
                return visitor.visitSetTableSerDe(self)
            else:
                return visitor.visitChildren(self)


    class CreateViewContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(fugue_sqlParser.CREATE, 0)
        def VIEW(self):
            return self.getToken(fugue_sqlParser.VIEW, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)
        def query(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryContext,0)

        def OR(self):
            return self.getToken(fugue_sqlParser.OR, 0)
        def REPLACE(self):
            return self.getToken(fugue_sqlParser.REPLACE, 0)
        def TEMPORARY(self):
            return self.getToken(fugue_sqlParser.TEMPORARY, 0)
        def IF(self):
            return self.getToken(fugue_sqlParser.IF, 0)
        def NOT(self):
            return self.getToken(fugue_sqlParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(fugue_sqlParser.EXISTS, 0)
        def identifierCommentList(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierCommentListContext,0)

        def commentSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.CommentSpecContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.CommentSpecContext,i)

        def PARTITIONED(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.PARTITIONED)
            else:
                return self.getToken(fugue_sqlParser.PARTITIONED, i)
        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.ON)
            else:
                return self.getToken(fugue_sqlParser.ON, i)
        def identifierList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.IdentifierListContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.IdentifierListContext,i)

        def TBLPROPERTIES(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.TBLPROPERTIES)
            else:
                return self.getToken(fugue_sqlParser.TBLPROPERTIES, i)
        def tablePropertyList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.TablePropertyListContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.TablePropertyListContext,i)

        def GLOBAL(self):
            return self.getToken(fugue_sqlParser.GLOBAL, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateView" ):
                return visitor.visitCreateView(self)
            else:
                return visitor.visitChildren(self)


    class DropTablePartitionsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def DROP(self):
            return self.getToken(fugue_sqlParser.DROP, 0)
        def partitionSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.PartitionSpecContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.PartitionSpecContext,i)

        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def VIEW(self):
            return self.getToken(fugue_sqlParser.VIEW, 0)
        def IF(self):
            return self.getToken(fugue_sqlParser.IF, 0)
        def EXISTS(self):
            return self.getToken(fugue_sqlParser.EXISTS, 0)
        def PURGE(self):
            return self.getToken(fugue_sqlParser.PURGE, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropTablePartitions" ):
                return visitor.visitDropTablePartitions(self)
            else:
                return visitor.visitChildren(self)


    class SetConfigurationContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SET(self):
            return self.getToken(fugue_sqlParser.SET, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetConfiguration" ):
                return visitor.visitSetConfiguration(self)
            else:
                return visitor.visitChildren(self)


    class DropTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(fugue_sqlParser.DROP, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def IF(self):
            return self.getToken(fugue_sqlParser.IF, 0)
        def EXISTS(self):
            return self.getToken(fugue_sqlParser.EXISTS, 0)
        def PURGE(self):
            return self.getToken(fugue_sqlParser.PURGE, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropTable" ):
                return visitor.visitDropTable(self)
            else:
                return visitor.visitChildren(self)


    class DescribeNamespaceContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def theNamespace(self):
            return self.getTypedRuleContext(fugue_sqlParser.TheNamespaceContext,0)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def DESC(self):
            return self.getToken(fugue_sqlParser.DESC, 0)
        def DESCRIBE(self):
            return self.getToken(fugue_sqlParser.DESCRIBE, 0)
        def EXTENDED(self):
            return self.getToken(fugue_sqlParser.EXTENDED, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDescribeNamespace" ):
                return visitor.visitDescribeNamespace(self)
            else:
                return visitor.visitChildren(self)


    class AlterTableAlterColumnContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.table = None # MultipartIdentifierContext
            self.column = None # MultipartIdentifierContext
            self.copyFrom(ctx)

        def ALTER(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.ALTER)
            else:
                return self.getToken(fugue_sqlParser.ALTER, i)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def multipartIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.MultipartIdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,i)

        def CHANGE(self):
            return self.getToken(fugue_sqlParser.CHANGE, 0)
        def COLUMN(self):
            return self.getToken(fugue_sqlParser.COLUMN, 0)
        def alterColumnAction(self):
            return self.getTypedRuleContext(fugue_sqlParser.AlterColumnActionContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterTableAlterColumn" ):
                return visitor.visitAlterTableAlterColumn(self)
            else:
                return visitor.visitChildren(self)


    class CommentTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.comment = None # Token
            self.copyFrom(ctx)

        def COMMENT(self):
            return self.getToken(fugue_sqlParser.COMMENT, 0)
        def ON(self):
            return self.getToken(fugue_sqlParser.ON, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def IS(self):
            return self.getToken(fugue_sqlParser.IS, 0)
        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)
        def THENULL(self):
            return self.getToken(fugue_sqlParser.THENULL, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCommentTable" ):
                return visitor.visitCommentTable(self)
            else:
                return visitor.visitChildren(self)


    class CreateNamespaceContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(fugue_sqlParser.CREATE, 0)
        def theNamespace(self):
            return self.getTypedRuleContext(fugue_sqlParser.TheNamespaceContext,0)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def IF(self):
            return self.getToken(fugue_sqlParser.IF, 0)
        def NOT(self):
            return self.getToken(fugue_sqlParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(fugue_sqlParser.EXISTS, 0)
        def commentSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.CommentSpecContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.CommentSpecContext,i)

        def locationSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.LocationSpecContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.LocationSpecContext,i)

        def WITH(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.WITH)
            else:
                return self.getToken(fugue_sqlParser.WITH, i)
        def tablePropertyList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.TablePropertyListContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.TablePropertyListContext,i)

        def DBPROPERTIES(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.DBPROPERTIES)
            else:
                return self.getToken(fugue_sqlParser.DBPROPERTIES, i)
        def PROPERTIES(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.PROPERTIES)
            else:
                return self.getToken(fugue_sqlParser.PROPERTIES, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateNamespace" ):
                return visitor.visitCreateNamespace(self)
            else:
                return visitor.visitChildren(self)


    class ShowTblPropertiesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.table = None # MultipartIdentifierContext
            self.key = None # TablePropertyKeyContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(fugue_sqlParser.SHOW, 0)
        def TBLPROPERTIES(self):
            return self.getToken(fugue_sqlParser.TBLPROPERTIES, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def tablePropertyKey(self):
            return self.getTypedRuleContext(fugue_sqlParser.TablePropertyKeyContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowTblProperties" ):
                return visitor.visitShowTblProperties(self)
            else:
                return visitor.visitChildren(self)


    class UnsetTablePropertiesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def UNSET(self):
            return self.getToken(fugue_sqlParser.UNSET, 0)
        def TBLPROPERTIES(self):
            return self.getToken(fugue_sqlParser.TBLPROPERTIES, 0)
        def tablePropertyList(self):
            return self.getTypedRuleContext(fugue_sqlParser.TablePropertyListContext,0)

        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def VIEW(self):
            return self.getToken(fugue_sqlParser.VIEW, 0)
        def IF(self):
            return self.getToken(fugue_sqlParser.IF, 0)
        def EXISTS(self):
            return self.getToken(fugue_sqlParser.EXISTS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnsetTableProperties" ):
                return visitor.visitUnsetTableProperties(self)
            else:
                return visitor.visitChildren(self)


    class SetTableLocationContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def SET(self):
            return self.getToken(fugue_sqlParser.SET, 0)
        def locationSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.LocationSpecContext,0)

        def partitionSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.PartitionSpecContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetTableLocation" ):
                return visitor.visitSetTableLocation(self)
            else:
                return visitor.visitChildren(self)


    class DropTableColumnsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.columns = None # MultipartIdentifierListContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def DROP(self):
            return self.getToken(fugue_sqlParser.DROP, 0)
        def COLUMN(self):
            return self.getToken(fugue_sqlParser.COLUMN, 0)
        def COLUMNS(self):
            return self.getToken(fugue_sqlParser.COLUMNS, 0)
        def multipartIdentifierList(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierListContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropTableColumns" ):
                return visitor.visitDropTableColumns(self)
            else:
                return visitor.visitChildren(self)


    class ShowViewsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.pattern = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(fugue_sqlParser.SHOW, 0)
        def VIEWS(self):
            return self.getToken(fugue_sqlParser.VIEWS, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def FROM(self):
            return self.getToken(fugue_sqlParser.FROM, 0)
        def IN(self):
            return self.getToken(fugue_sqlParser.IN, 0)
        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)
        def LIKE(self):
            return self.getToken(fugue_sqlParser.LIKE, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowViews" ):
                return visitor.visitShowViews(self)
            else:
                return visitor.visitChildren(self)


    class ShowFunctionsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.pattern = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(fugue_sqlParser.SHOW, 0)
        def FUNCTIONS(self):
            return self.getToken(fugue_sqlParser.FUNCTIONS, 0)
        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def LIKE(self):
            return self.getToken(fugue_sqlParser.LIKE, 0)
        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowFunctions" ):
                return visitor.visitShowFunctions(self)
            else:
                return visitor.visitChildren(self)


    class CacheTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.options = None # TablePropertyListContext
            self.copyFrom(ctx)

        def CACHE(self):
            return self.getToken(fugue_sqlParser.CACHE, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def LAZY(self):
            return self.getToken(fugue_sqlParser.LAZY, 0)
        def OPTIONS(self):
            return self.getToken(fugue_sqlParser.OPTIONS, 0)
        def query(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryContext,0)

        def tablePropertyList(self):
            return self.getTypedRuleContext(fugue_sqlParser.TablePropertyListContext,0)

        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCacheTable" ):
                return visitor.visitCacheTable(self)
            else:
                return visitor.visitChildren(self)


    class AddTableColumnsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.columns = None # QualifiedColTypeWithPositionListContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def ADD(self):
            return self.getToken(fugue_sqlParser.ADD, 0)
        def COLUMN(self):
            return self.getToken(fugue_sqlParser.COLUMN, 0)
        def COLUMNS(self):
            return self.getToken(fugue_sqlParser.COLUMNS, 0)
        def qualifiedColTypeWithPositionList(self):
            return self.getTypedRuleContext(fugue_sqlParser.QualifiedColTypeWithPositionListContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAddTableColumns" ):
                return visitor.visitAddTableColumns(self)
            else:
                return visitor.visitChildren(self)


    class SetTablePropertiesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def SET(self):
            return self.getToken(fugue_sqlParser.SET, 0)
        def TBLPROPERTIES(self):
            return self.getToken(fugue_sqlParser.TBLPROPERTIES, 0)
        def tablePropertyList(self):
            return self.getTypedRuleContext(fugue_sqlParser.TablePropertyListContext,0)

        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def VIEW(self):
            return self.getToken(fugue_sqlParser.VIEW, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetTableProperties" ):
                return visitor.visitSetTableProperties(self)
            else:
                return visitor.visitChildren(self)



    def statement(self):

        localctx = fugue_sqlParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_statement)
        self._la = 0 # Token type
        try:
            self.state = 1848
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,232,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.StatementDefaultContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1143
                self.query()
                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.DmlStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1145
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==303:
                    self.state = 1144
                    self.ctes()


                self.state = 1147
                self.dmlStatementNoWith()
                pass

            elif la_ == 3:
                localctx = fugue_sqlParser.UseContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1148
                self.match(fugue_sqlParser.USE)
                self.state = 1150
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,128,self._ctx)
                if la_ == 1:
                    self.state = 1149
                    self.match(fugue_sqlParser.NAMESPACE)


                self.state = 1152
                self.multipartIdentifier()
                pass

            elif la_ == 4:
                localctx = fugue_sqlParser.CreateNamespaceContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1153
                self.match(fugue_sqlParser.CREATE)
                self.state = 1154
                self.theNamespace()
                self.state = 1158
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,129,self._ctx)
                if la_ == 1:
                    self.state = 1155
                    self.match(fugue_sqlParser.IF)
                    self.state = 1156
                    self.match(fugue_sqlParser.NOT)
                    self.state = 1157
                    self.match(fugue_sqlParser.EXISTS)


                self.state = 1160
                self.multipartIdentifier()
                self.state = 1168
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==86 or _la==179 or _la==303:
                    self.state = 1166
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [86]:
                        self.state = 1161
                        self.commentSpec()
                        pass
                    elif token in [179]:
                        self.state = 1162
                        self.locationSpec()
                        pass
                    elif token in [303]:
                        self.state = 1163
                        self.match(fugue_sqlParser.WITH)
                        self.state = 1164
                        _la = self._input.LA(1)
                        if not(_la==106 or _la==221):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1165
                        self.tablePropertyList()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1170
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 5:
                localctx = fugue_sqlParser.SetNamespacePropertiesContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1171
                self.match(fugue_sqlParser.ALTER)
                self.state = 1172
                self.theNamespace()
                self.state = 1173
                self.multipartIdentifier()
                self.state = 1174
                self.match(fugue_sqlParser.SET)
                self.state = 1175
                _la = self._input.LA(1)
                if not(_la==106 or _la==221):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1176
                self.tablePropertyList()
                pass

            elif la_ == 6:
                localctx = fugue_sqlParser.SetNamespaceLocationContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 1178
                self.match(fugue_sqlParser.ALTER)
                self.state = 1179
                self.theNamespace()
                self.state = 1180
                self.multipartIdentifier()
                self.state = 1181
                self.match(fugue_sqlParser.SET)
                self.state = 1182
                self.locationSpec()
                pass

            elif la_ == 7:
                localctx = fugue_sqlParser.DropNamespaceContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 1184
                self.match(fugue_sqlParser.DROP)
                self.state = 1185
                self.theNamespace()
                self.state = 1188
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,132,self._ctx)
                if la_ == 1:
                    self.state = 1186
                    self.match(fugue_sqlParser.IF)
                    self.state = 1187
                    self.match(fugue_sqlParser.EXISTS)


                self.state = 1190
                self.multipartIdentifier()
                self.state = 1192
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==73 or _la==235:
                    self.state = 1191
                    _la = self._input.LA(1)
                    if not(_la==73 or _la==235):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass

            elif la_ == 8:
                localctx = fugue_sqlParser.ShowNamespacesContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 1194
                self.match(fugue_sqlParser.SHOW)
                self.state = 1195
                _la = self._input.LA(1)
                if not(_la==104 or _la==191):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1198
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==141 or _la==154:
                    self.state = 1196
                    _la = self._input.LA(1)
                    if not(_la==141 or _la==154):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1197
                    self.multipartIdentifier()


                self.state = 1204
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==173 or _la==325:
                    self.state = 1201
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==173:
                        self.state = 1200
                        self.match(fugue_sqlParser.LIKE)


                    self.state = 1203
                    localctx.pattern = self.match(fugue_sqlParser.STRING)


                pass

            elif la_ == 9:
                localctx = fugue_sqlParser.CreateTableContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 1206
                self.createTableHeader()
                self.state = 1211
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==3:
                    self.state = 1207
                    self.match(fugue_sqlParser.T__2)
                    self.state = 1208
                    self.colTypeList()
                    self.state = 1209
                    self.match(fugue_sqlParser.T__3)


                self.state = 1213
                self.tableProvider()
                self.state = 1214
                self.createTableClauses()
                self.state = 1219
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((_la) & ~0x3f) == 0 and ((1 << _la) & -9151103297862107136) != 0 or (((_la - 94)) & ~0x3f) == 0 and ((1 << (_la - 94)) & 140737496743937) != 0 or (((_la - 177)) & ~0x3f) == 0 and ((1 << (_la - 177)) & 20266198323167361) != 0 or (((_la - 247)) & ~0x3f) == 0 and ((1 << (_la - 247)) & 73183502536802305) != 0:
                    self.state = 1216
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==63:
                        self.state = 1215
                        self.match(fugue_sqlParser.AS)


                    self.state = 1218
                    self.query()


                pass

            elif la_ == 10:
                localctx = fugue_sqlParser.CreateHiveTableContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 1221
                self.createTableHeader()
                self.state = 1226
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==3:
                    self.state = 1222
                    self.match(fugue_sqlParser.T__2)
                    self.state = 1223
                    localctx.columns = self.colTypeList()
                    self.state = 1224
                    self.match(fugue_sqlParser.T__3)


                self.state = 1249
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==80 or _la==86 or _la==179 or _la==212 or (((_la - 243)) & ~0x3f) == 0 and ((1 << (_la - 243)) & 269500417) != 0:
                    self.state = 1247
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [86]:
                        self.state = 1228
                        self.commentSpec()
                        pass
                    elif token in [212]:
                        self.state = 1238
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,141,self._ctx)
                        if la_ == 1:
                            self.state = 1229
                            self.match(fugue_sqlParser.PARTITIONED)
                            self.state = 1230
                            self.match(fugue_sqlParser.BY)
                            self.state = 1231
                            self.match(fugue_sqlParser.T__2)
                            self.state = 1232
                            localctx.partitionColumns = self.colTypeList()
                            self.state = 1233
                            self.match(fugue_sqlParser.T__3)
                            pass

                        elif la_ == 2:
                            self.state = 1235
                            self.match(fugue_sqlParser.PARTITIONED)
                            self.state = 1236
                            self.match(fugue_sqlParser.BY)
                            self.state = 1237
                            localctx.partitionColumnNames = self.identifierList()
                            pass


                        pass
                    elif token in [80]:
                        self.state = 1240
                        self.bucketSpec()
                        pass
                    elif token in [257]:
                        self.state = 1241
                        self.skewSpec()
                        pass
                    elif token in [243]:
                        self.state = 1242
                        self.rowFormat()
                        pass
                    elif token in [263]:
                        self.state = 1243
                        self.createFileFormat()
                        pass
                    elif token in [179]:
                        self.state = 1244
                        self.locationSpec()
                        pass
                    elif token in [271]:
                        self.state = 1245
                        self.match(fugue_sqlParser.TBLPROPERTIES)
                        self.state = 1246
                        localctx.tableProps = self.tablePropertyList()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1251
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1256
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((_la) & ~0x3f) == 0 and ((1 << _la) & -9151103297862107136) != 0 or (((_la - 94)) & ~0x3f) == 0 and ((1 << (_la - 94)) & 140737496743937) != 0 or (((_la - 177)) & ~0x3f) == 0 and ((1 << (_la - 177)) & 20266198323167361) != 0 or (((_la - 247)) & ~0x3f) == 0 and ((1 << (_la - 247)) & 73183502536802305) != 0:
                    self.state = 1253
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==63:
                        self.state = 1252
                        self.match(fugue_sqlParser.AS)


                    self.state = 1255
                    self.query()


                pass

            elif la_ == 11:
                localctx = fugue_sqlParser.CreateTableLikeContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 1258
                self.match(fugue_sqlParser.CREATE)
                self.state = 1259
                self.match(fugue_sqlParser.TABLE)
                self.state = 1263
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,146,self._ctx)
                if la_ == 1:
                    self.state = 1260
                    self.match(fugue_sqlParser.IF)
                    self.state = 1261
                    self.match(fugue_sqlParser.NOT)
                    self.state = 1262
                    self.match(fugue_sqlParser.EXISTS)


                self.state = 1265
                localctx.target = self.tableIdentifier()
                self.state = 1266
                self.match(fugue_sqlParser.LIKE)
                self.state = 1267
                localctx.source = self.tableIdentifier()
                self.state = 1276
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==179 or (((_la - 243)) & ~0x3f) == 0 and ((1 << (_la - 243)) & 9007199524225025) != 0:
                    self.state = 1274
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [296]:
                        self.state = 1268
                        self.tableProvider()
                        pass
                    elif token in [243]:
                        self.state = 1269
                        self.rowFormat()
                        pass
                    elif token in [263]:
                        self.state = 1270
                        self.createFileFormat()
                        pass
                    elif token in [179]:
                        self.state = 1271
                        self.locationSpec()
                        pass
                    elif token in [271]:
                        self.state = 1272
                        self.match(fugue_sqlParser.TBLPROPERTIES)
                        self.state = 1273
                        localctx.tableProps = self.tablePropertyList()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1278
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 12:
                localctx = fugue_sqlParser.ReplaceTableContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 1279
                self.replaceTableHeader()
                self.state = 1284
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==3:
                    self.state = 1280
                    self.match(fugue_sqlParser.T__2)
                    self.state = 1281
                    self.colTypeList()
                    self.state = 1282
                    self.match(fugue_sqlParser.T__3)


                self.state = 1286
                self.tableProvider()
                self.state = 1287
                self.createTableClauses()
                self.state = 1292
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((_la) & ~0x3f) == 0 and ((1 << _la) & -9151103297862107136) != 0 or (((_la - 94)) & ~0x3f) == 0 and ((1 << (_la - 94)) & 140737496743937) != 0 or (((_la - 177)) & ~0x3f) == 0 and ((1 << (_la - 177)) & 20266198323167361) != 0 or (((_la - 247)) & ~0x3f) == 0 and ((1 << (_la - 247)) & 73183502536802305) != 0:
                    self.state = 1289
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==63:
                        self.state = 1288
                        self.match(fugue_sqlParser.AS)


                    self.state = 1291
                    self.query()


                pass

            elif la_ == 13:
                localctx = fugue_sqlParser.AnalyzeContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 1294
                self.match(fugue_sqlParser.ANALYZE)
                self.state = 1295
                self.match(fugue_sqlParser.TABLE)
                self.state = 1296
                self.multipartIdentifier()
                self.state = 1298
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==211:
                    self.state = 1297
                    self.partitionSpec()


                self.state = 1300
                self.match(fugue_sqlParser.COMPUTE)
                self.state = 1301
                self.match(fugue_sqlParser.STATISTICS)
                self.state = 1309
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,153,self._ctx)
                if la_ == 1:
                    self.state = 1302
                    self.identifier()

                elif la_ == 2:
                    self.state = 1303
                    self.match(fugue_sqlParser.FOR)
                    self.state = 1304
                    self.match(fugue_sqlParser.COLUMNS)
                    self.state = 1305
                    self.identifierSeq()

                elif la_ == 3:
                    self.state = 1306
                    self.match(fugue_sqlParser.FOR)
                    self.state = 1307
                    self.match(fugue_sqlParser.ALL)
                    self.state = 1308
                    self.match(fugue_sqlParser.COLUMNS)


                pass

            elif la_ == 14:
                localctx = fugue_sqlParser.AddTableColumnsContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 1311
                self.match(fugue_sqlParser.ALTER)
                self.state = 1312
                self.match(fugue_sqlParser.TABLE)
                self.state = 1313
                self.multipartIdentifier()
                self.state = 1314
                self.match(fugue_sqlParser.ADD)
                self.state = 1315
                _la = self._input.LA(1)
                if not(_la==84 or _la==85):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1316
                localctx.columns = self.qualifiedColTypeWithPositionList()
                pass

            elif la_ == 15:
                localctx = fugue_sqlParser.AddTableColumnsContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 1318
                self.match(fugue_sqlParser.ALTER)
                self.state = 1319
                self.match(fugue_sqlParser.TABLE)
                self.state = 1320
                self.multipartIdentifier()
                self.state = 1321
                self.match(fugue_sqlParser.ADD)
                self.state = 1322
                _la = self._input.LA(1)
                if not(_la==84 or _la==85):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1323
                self.match(fugue_sqlParser.T__2)
                self.state = 1324
                localctx.columns = self.qualifiedColTypeWithPositionList()
                self.state = 1325
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 16:
                localctx = fugue_sqlParser.RenameTableColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 1327
                self.match(fugue_sqlParser.ALTER)
                self.state = 1328
                self.match(fugue_sqlParser.TABLE)
                self.state = 1329
                localctx.table = self.multipartIdentifier()
                self.state = 1330
                self.match(fugue_sqlParser.RENAME)
                self.state = 1331
                self.match(fugue_sqlParser.COLUMN)
                self.state = 1332
                localctx.ifrom = self.multipartIdentifier()
                self.state = 1333
                self.match(fugue_sqlParser.TO)
                self.state = 1334
                localctx.to = self.errorCapturingIdentifier()
                pass

            elif la_ == 17:
                localctx = fugue_sqlParser.DropTableColumnsContext(self, localctx)
                self.enterOuterAlt(localctx, 17)
                self.state = 1336
                self.match(fugue_sqlParser.ALTER)
                self.state = 1337
                self.match(fugue_sqlParser.TABLE)
                self.state = 1338
                self.multipartIdentifier()
                self.state = 1339
                self.match(fugue_sqlParser.DROP)
                self.state = 1340
                _la = self._input.LA(1)
                if not(_la==84 or _la==85):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1341
                self.match(fugue_sqlParser.T__2)
                self.state = 1342
                localctx.columns = self.multipartIdentifierList()
                self.state = 1343
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 18:
                localctx = fugue_sqlParser.DropTableColumnsContext(self, localctx)
                self.enterOuterAlt(localctx, 18)
                self.state = 1345
                self.match(fugue_sqlParser.ALTER)
                self.state = 1346
                self.match(fugue_sqlParser.TABLE)
                self.state = 1347
                self.multipartIdentifier()
                self.state = 1348
                self.match(fugue_sqlParser.DROP)
                self.state = 1349
                _la = self._input.LA(1)
                if not(_la==84 or _la==85):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1350
                localctx.columns = self.multipartIdentifierList()
                pass

            elif la_ == 19:
                localctx = fugue_sqlParser.RenameTableContext(self, localctx)
                self.enterOuterAlt(localctx, 19)
                self.state = 1352
                self.match(fugue_sqlParser.ALTER)
                self.state = 1353
                _la = self._input.LA(1)
                if not(_la==268 or _la==298):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1354
                localctx.ifrom = self.multipartIdentifier()
                self.state = 1355
                self.match(fugue_sqlParser.RENAME)
                self.state = 1356
                self.match(fugue_sqlParser.TO)
                self.state = 1357
                localctx.to = self.multipartIdentifier()
                pass

            elif la_ == 20:
                localctx = fugue_sqlParser.SetTablePropertiesContext(self, localctx)
                self.enterOuterAlt(localctx, 20)
                self.state = 1359
                self.match(fugue_sqlParser.ALTER)
                self.state = 1360
                _la = self._input.LA(1)
                if not(_la==268 or _la==298):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1361
                self.multipartIdentifier()
                self.state = 1362
                self.match(fugue_sqlParser.SET)
                self.state = 1363
                self.match(fugue_sqlParser.TBLPROPERTIES)
                self.state = 1364
                self.tablePropertyList()
                pass

            elif la_ == 21:
                localctx = fugue_sqlParser.UnsetTablePropertiesContext(self, localctx)
                self.enterOuterAlt(localctx, 21)
                self.state = 1366
                self.match(fugue_sqlParser.ALTER)
                self.state = 1367
                _la = self._input.LA(1)
                if not(_la==268 or _la==298):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1368
                self.multipartIdentifier()
                self.state = 1369
                self.match(fugue_sqlParser.UNSET)
                self.state = 1370
                self.match(fugue_sqlParser.TBLPROPERTIES)
                self.state = 1373
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==151:
                    self.state = 1371
                    self.match(fugue_sqlParser.IF)
                    self.state = 1372
                    self.match(fugue_sqlParser.EXISTS)


                self.state = 1375
                self.tablePropertyList()
                pass

            elif la_ == 22:
                localctx = fugue_sqlParser.AlterTableAlterColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 22)
                self.state = 1377
                self.match(fugue_sqlParser.ALTER)
                self.state = 1378
                self.match(fugue_sqlParser.TABLE)
                self.state = 1379
                localctx.table = self.multipartIdentifier()
                self.state = 1380
                _la = self._input.LA(1)
                if not(_la==56 or _la==76):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1382
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,155,self._ctx)
                if la_ == 1:
                    self.state = 1381
                    self.match(fugue_sqlParser.COLUMN)


                self.state = 1384
                localctx.column = self.multipartIdentifier()
                self.state = 1386
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==54 or (((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & 562952100904961) != 0 or _la==253 or _la==284:
                    self.state = 1385
                    self.alterColumnAction()


                pass

            elif la_ == 23:
                localctx = fugue_sqlParser.HiveChangeColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 23)
                self.state = 1388
                self.match(fugue_sqlParser.ALTER)
                self.state = 1389
                self.match(fugue_sqlParser.TABLE)
                self.state = 1390
                localctx.table = self.multipartIdentifier()
                self.state = 1392
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==211:
                    self.state = 1391
                    self.partitionSpec()


                self.state = 1394
                self.match(fugue_sqlParser.CHANGE)
                self.state = 1396
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,158,self._ctx)
                if la_ == 1:
                    self.state = 1395
                    self.match(fugue_sqlParser.COLUMN)


                self.state = 1398
                localctx.colName = self.multipartIdentifier()
                self.state = 1399
                self.colType()
                self.state = 1401
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==54 or _la==135:
                    self.state = 1400
                    self.colPosition()


                pass

            elif la_ == 24:
                localctx = fugue_sqlParser.HiveReplaceColumnsContext(self, localctx)
                self.enterOuterAlt(localctx, 24)
                self.state = 1403
                self.match(fugue_sqlParser.ALTER)
                self.state = 1404
                self.match(fugue_sqlParser.TABLE)
                self.state = 1405
                localctx.table = self.multipartIdentifier()
                self.state = 1407
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==211:
                    self.state = 1406
                    self.partitionSpec()


                self.state = 1409
                self.match(fugue_sqlParser.REPLACE)
                self.state = 1410
                self.match(fugue_sqlParser.COLUMNS)
                self.state = 1411
                self.match(fugue_sqlParser.T__2)
                self.state = 1412
                localctx.columns = self.qualifiedColTypeWithPositionList()
                self.state = 1413
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 25:
                localctx = fugue_sqlParser.SetTableSerDeContext(self, localctx)
                self.enterOuterAlt(localctx, 25)
                self.state = 1415
                self.match(fugue_sqlParser.ALTER)
                self.state = 1416
                self.match(fugue_sqlParser.TABLE)
                self.state = 1417
                self.multipartIdentifier()
                self.state = 1419
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==211:
                    self.state = 1418
                    self.partitionSpec()


                self.state = 1421
                self.match(fugue_sqlParser.SET)
                self.state = 1422
                self.match(fugue_sqlParser.SERDE)
                self.state = 1423
                self.match(fugue_sqlParser.STRING)
                self.state = 1427
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==303:
                    self.state = 1424
                    self.match(fugue_sqlParser.WITH)
                    self.state = 1425
                    self.match(fugue_sqlParser.SERDEPROPERTIES)
                    self.state = 1426
                    self.tablePropertyList()


                pass

            elif la_ == 26:
                localctx = fugue_sqlParser.SetTableSerDeContext(self, localctx)
                self.enterOuterAlt(localctx, 26)
                self.state = 1429
                self.match(fugue_sqlParser.ALTER)
                self.state = 1430
                self.match(fugue_sqlParser.TABLE)
                self.state = 1431
                self.multipartIdentifier()
                self.state = 1433
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==211:
                    self.state = 1432
                    self.partitionSpec()


                self.state = 1435
                self.match(fugue_sqlParser.SET)
                self.state = 1436
                self.match(fugue_sqlParser.SERDEPROPERTIES)
                self.state = 1437
                self.tablePropertyList()
                pass

            elif la_ == 27:
                localctx = fugue_sqlParser.AddTablePartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 27)
                self.state = 1439
                self.match(fugue_sqlParser.ALTER)
                self.state = 1440
                _la = self._input.LA(1)
                if not(_la==268 or _la==298):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1441
                self.multipartIdentifier()
                self.state = 1442
                self.match(fugue_sqlParser.ADD)
                self.state = 1446
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==151:
                    self.state = 1443
                    self.match(fugue_sqlParser.IF)
                    self.state = 1444
                    self.match(fugue_sqlParser.NOT)
                    self.state = 1445
                    self.match(fugue_sqlParser.EXISTS)


                self.state = 1449 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1448
                    self.partitionSpecLocation()
                    self.state = 1451 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==211):
                        break

                pass

            elif la_ == 28:
                localctx = fugue_sqlParser.RenameTablePartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 28)
                self.state = 1453
                self.match(fugue_sqlParser.ALTER)
                self.state = 1454
                self.match(fugue_sqlParser.TABLE)
                self.state = 1455
                self.multipartIdentifier()
                self.state = 1456
                localctx.ifrom = self.partitionSpec()
                self.state = 1457
                self.match(fugue_sqlParser.RENAME)
                self.state = 1458
                self.match(fugue_sqlParser.TO)
                self.state = 1459
                localctx.to = self.partitionSpec()
                pass

            elif la_ == 29:
                localctx = fugue_sqlParser.DropTablePartitionsContext(self, localctx)
                self.enterOuterAlt(localctx, 29)
                self.state = 1461
                self.match(fugue_sqlParser.ALTER)
                self.state = 1462
                _la = self._input.LA(1)
                if not(_la==268 or _la==298):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1463
                self.multipartIdentifier()
                self.state = 1464
                self.match(fugue_sqlParser.DROP)
                self.state = 1467
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==151:
                    self.state = 1465
                    self.match(fugue_sqlParser.IF)
                    self.state = 1466
                    self.match(fugue_sqlParser.EXISTS)


                self.state = 1469
                self.partitionSpec()
                self.state = 1474
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1:
                    self.state = 1470
                    self.match(fugue_sqlParser.T__0)
                    self.state = 1471
                    self.partitionSpec()
                    self.state = 1476
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1478
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==222:
                    self.state = 1477
                    self.match(fugue_sqlParser.PURGE)


                pass

            elif la_ == 30:
                localctx = fugue_sqlParser.SetTableLocationContext(self, localctx)
                self.enterOuterAlt(localctx, 30)
                self.state = 1480
                self.match(fugue_sqlParser.ALTER)
                self.state = 1481
                self.match(fugue_sqlParser.TABLE)
                self.state = 1482
                self.multipartIdentifier()
                self.state = 1484
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==211:
                    self.state = 1483
                    self.partitionSpec()


                self.state = 1486
                self.match(fugue_sqlParser.SET)
                self.state = 1487
                self.locationSpec()
                pass

            elif la_ == 31:
                localctx = fugue_sqlParser.RecoverPartitionsContext(self, localctx)
                self.enterOuterAlt(localctx, 31)
                self.state = 1489
                self.match(fugue_sqlParser.ALTER)
                self.state = 1490
                self.match(fugue_sqlParser.TABLE)
                self.state = 1491
                self.multipartIdentifier()
                self.state = 1492
                self.match(fugue_sqlParser.RECOVER)
                self.state = 1493
                self.match(fugue_sqlParser.PARTITIONS)
                pass

            elif la_ == 32:
                localctx = fugue_sqlParser.DropTableContext(self, localctx)
                self.enterOuterAlt(localctx, 32)
                self.state = 1495
                self.match(fugue_sqlParser.DROP)
                self.state = 1496
                self.match(fugue_sqlParser.TABLE)
                self.state = 1499
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,170,self._ctx)
                if la_ == 1:
                    self.state = 1497
                    self.match(fugue_sqlParser.IF)
                    self.state = 1498
                    self.match(fugue_sqlParser.EXISTS)


                self.state = 1501
                self.multipartIdentifier()
                self.state = 1503
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==222:
                    self.state = 1502
                    self.match(fugue_sqlParser.PURGE)


                pass

            elif la_ == 33:
                localctx = fugue_sqlParser.DropViewContext(self, localctx)
                self.enterOuterAlt(localctx, 33)
                self.state = 1505
                self.match(fugue_sqlParser.DROP)
                self.state = 1506
                self.match(fugue_sqlParser.VIEW)
                self.state = 1509
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,172,self._ctx)
                if la_ == 1:
                    self.state = 1507
                    self.match(fugue_sqlParser.IF)
                    self.state = 1508
                    self.match(fugue_sqlParser.EXISTS)


                self.state = 1511
                self.multipartIdentifier()
                pass

            elif la_ == 34:
                localctx = fugue_sqlParser.CreateViewContext(self, localctx)
                self.enterOuterAlt(localctx, 34)
                self.state = 1512
                self.match(fugue_sqlParser.CREATE)
                self.state = 1515
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==202:
                    self.state = 1513
                    self.match(fugue_sqlParser.OR)
                    self.state = 1514
                    self.match(fugue_sqlParser.REPLACE)


                self.state = 1521
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==145 or _la==272:
                    self.state = 1518
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==145:
                        self.state = 1517
                        self.match(fugue_sqlParser.GLOBAL)


                    self.state = 1520
                    self.match(fugue_sqlParser.TEMPORARY)


                self.state = 1523
                self.match(fugue_sqlParser.VIEW)
                self.state = 1527
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,176,self._ctx)
                if la_ == 1:
                    self.state = 1524
                    self.match(fugue_sqlParser.IF)
                    self.state = 1525
                    self.match(fugue_sqlParser.NOT)
                    self.state = 1526
                    self.match(fugue_sqlParser.EXISTS)


                self.state = 1529
                self.multipartIdentifier()
                self.state = 1531
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==3:
                    self.state = 1530
                    self.identifierCommentList()


                self.state = 1541
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==86 or _la==212 or _la==271:
                    self.state = 1539
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [86]:
                        self.state = 1533
                        self.commentSpec()
                        pass
                    elif token in [212]:
                        self.state = 1534
                        self.match(fugue_sqlParser.PARTITIONED)
                        self.state = 1535
                        self.match(fugue_sqlParser.ON)
                        self.state = 1536
                        self.identifierList()
                        pass
                    elif token in [271]:
                        self.state = 1537
                        self.match(fugue_sqlParser.TBLPROPERTIES)
                        self.state = 1538
                        self.tablePropertyList()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1543
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1544
                self.match(fugue_sqlParser.AS)
                self.state = 1545
                self.query()
                pass

            elif la_ == 35:
                localctx = fugue_sqlParser.CreateTempViewUsingContext(self, localctx)
                self.enterOuterAlt(localctx, 35)
                self.state = 1547
                self.match(fugue_sqlParser.CREATE)
                self.state = 1550
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==202:
                    self.state = 1548
                    self.match(fugue_sqlParser.OR)
                    self.state = 1549
                    self.match(fugue_sqlParser.REPLACE)


                self.state = 1553
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==145:
                    self.state = 1552
                    self.match(fugue_sqlParser.GLOBAL)


                self.state = 1555
                self.match(fugue_sqlParser.TEMPORARY)
                self.state = 1556
                self.match(fugue_sqlParser.VIEW)
                self.state = 1557
                self.tableIdentifier()
                self.state = 1562
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==3:
                    self.state = 1558
                    self.match(fugue_sqlParser.T__2)
                    self.state = 1559
                    self.colTypeList()
                    self.state = 1560
                    self.match(fugue_sqlParser.T__3)


                self.state = 1564
                self.tableProvider()
                self.state = 1567
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==201:
                    self.state = 1565
                    self.match(fugue_sqlParser.OPTIONS)
                    self.state = 1566
                    self.tablePropertyList()


                pass

            elif la_ == 36:
                localctx = fugue_sqlParser.AlterViewQueryContext(self, localctx)
                self.enterOuterAlt(localctx, 36)
                self.state = 1569
                self.match(fugue_sqlParser.ALTER)
                self.state = 1570
                self.match(fugue_sqlParser.VIEW)
                self.state = 1571
                self.multipartIdentifier()
                self.state = 1573
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==63:
                    self.state = 1572
                    self.match(fugue_sqlParser.AS)


                self.state = 1575
                self.query()
                pass

            elif la_ == 37:
                localctx = fugue_sqlParser.CreateFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 37)
                self.state = 1577
                self.match(fugue_sqlParser.CREATE)
                self.state = 1580
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==202:
                    self.state = 1578
                    self.match(fugue_sqlParser.OR)
                    self.state = 1579
                    self.match(fugue_sqlParser.REPLACE)


                self.state = 1583
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272:
                    self.state = 1582
                    self.match(fugue_sqlParser.TEMPORARY)


                self.state = 1585
                self.match(fugue_sqlParser.FUNCTION)
                self.state = 1589
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,187,self._ctx)
                if la_ == 1:
                    self.state = 1586
                    self.match(fugue_sqlParser.IF)
                    self.state = 1587
                    self.match(fugue_sqlParser.NOT)
                    self.state = 1588
                    self.match(fugue_sqlParser.EXISTS)


                self.state = 1591
                self.multipartIdentifier()
                self.state = 1592
                self.match(fugue_sqlParser.AS)
                self.state = 1593
                localctx.className = self.match(fugue_sqlParser.STRING)
                self.state = 1603
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==296:
                    self.state = 1594
                    self.match(fugue_sqlParser.USING)
                    self.state = 1595
                    self.resource()
                    self.state = 1600
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1:
                        self.state = 1596
                        self.match(fugue_sqlParser.T__0)
                        self.state = 1597
                        self.resource()
                        self.state = 1602
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                pass

            elif la_ == 38:
                localctx = fugue_sqlParser.DropFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 38)
                self.state = 1605
                self.match(fugue_sqlParser.DROP)
                self.state = 1607
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==272:
                    self.state = 1606
                    self.match(fugue_sqlParser.TEMPORARY)


                self.state = 1609
                self.match(fugue_sqlParser.FUNCTION)
                self.state = 1612
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,191,self._ctx)
                if la_ == 1:
                    self.state = 1610
                    self.match(fugue_sqlParser.IF)
                    self.state = 1611
                    self.match(fugue_sqlParser.EXISTS)


                self.state = 1614
                self.multipartIdentifier()
                pass

            elif la_ == 39:
                localctx = fugue_sqlParser.ExplainContext(self, localctx)
                self.enterOuterAlt(localctx, 39)
                self.state = 1615
                self.match(fugue_sqlParser.EXPLAIN)
                self.state = 1617
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & 576531121047605249) != 0 or _la==182:
                    self.state = 1616
                    _la = self._input.LA(1)
                    if not((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & 576531121047605249) != 0 or _la==182):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1619
                self.statement()
                pass

            elif la_ == 40:
                localctx = fugue_sqlParser.ShowTablesContext(self, localctx)
                self.enterOuterAlt(localctx, 40)
                self.state = 1620
                self.match(fugue_sqlParser.SHOW)
                self.state = 1621
                self.match(fugue_sqlParser.TABLES)
                self.state = 1624
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==141 or _la==154:
                    self.state = 1622
                    _la = self._input.LA(1)
                    if not(_la==141 or _la==154):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1623
                    self.multipartIdentifier()


                self.state = 1630
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==173 or _la==325:
                    self.state = 1627
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==173:
                        self.state = 1626
                        self.match(fugue_sqlParser.LIKE)


                    self.state = 1629
                    localctx.pattern = self.match(fugue_sqlParser.STRING)


                pass

            elif la_ == 41:
                localctx = fugue_sqlParser.ShowTableContext(self, localctx)
                self.enterOuterAlt(localctx, 41)
                self.state = 1632
                self.match(fugue_sqlParser.SHOW)
                self.state = 1633
                self.match(fugue_sqlParser.TABLE)
                self.state = 1634
                self.match(fugue_sqlParser.EXTENDED)
                self.state = 1637
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==141 or _la==154:
                    self.state = 1635
                    _la = self._input.LA(1)
                    if not(_la==141 or _la==154):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1636
                    localctx.ns = self.multipartIdentifier()


                self.state = 1639
                self.match(fugue_sqlParser.LIKE)
                self.state = 1640
                localctx.pattern = self.match(fugue_sqlParser.STRING)
                self.state = 1642
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==211:
                    self.state = 1641
                    self.partitionSpec()


                pass

            elif la_ == 42:
                localctx = fugue_sqlParser.ShowTblPropertiesContext(self, localctx)
                self.enterOuterAlt(localctx, 42)
                self.state = 1644
                self.match(fugue_sqlParser.SHOW)
                self.state = 1645
                self.match(fugue_sqlParser.TBLPROPERTIES)
                self.state = 1646
                localctx.table = self.multipartIdentifier()
                self.state = 1651
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==3:
                    self.state = 1647
                    self.match(fugue_sqlParser.T__2)
                    self.state = 1648
                    localctx.key = self.tablePropertyKey()
                    self.state = 1649
                    self.match(fugue_sqlParser.T__3)


                pass

            elif la_ == 43:
                localctx = fugue_sqlParser.ShowColumnsContext(self, localctx)
                self.enterOuterAlt(localctx, 43)
                self.state = 1653
                self.match(fugue_sqlParser.SHOW)
                self.state = 1654
                self.match(fugue_sqlParser.COLUMNS)
                self.state = 1655
                _la = self._input.LA(1)
                if not(_la==141 or _la==154):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1656
                localctx.table = self.multipartIdentifier()
                self.state = 1659
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==141 or _la==154:
                    self.state = 1657
                    _la = self._input.LA(1)
                    if not(_la==141 or _la==154):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1658
                    localctx.ns = self.multipartIdentifier()


                pass

            elif la_ == 44:
                localctx = fugue_sqlParser.ShowViewsContext(self, localctx)
                self.enterOuterAlt(localctx, 44)
                self.state = 1661
                self.match(fugue_sqlParser.SHOW)
                self.state = 1662
                self.match(fugue_sqlParser.VIEWS)
                self.state = 1665
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==141 or _la==154:
                    self.state = 1663
                    _la = self._input.LA(1)
                    if not(_la==141 or _la==154):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1664
                    self.multipartIdentifier()


                self.state = 1671
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==173 or _la==325:
                    self.state = 1668
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==173:
                        self.state = 1667
                        self.match(fugue_sqlParser.LIKE)


                    self.state = 1670
                    localctx.pattern = self.match(fugue_sqlParser.STRING)


                pass

            elif la_ == 45:
                localctx = fugue_sqlParser.ShowPartitionsContext(self, localctx)
                self.enterOuterAlt(localctx, 45)
                self.state = 1673
                self.match(fugue_sqlParser.SHOW)
                self.state = 1674
                self.match(fugue_sqlParser.PARTITIONS)
                self.state = 1675
                self.multipartIdentifier()
                self.state = 1677
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==211:
                    self.state = 1676
                    self.partitionSpec()


                pass

            elif la_ == 46:
                localctx = fugue_sqlParser.ShowFunctionsContext(self, localctx)
                self.enterOuterAlt(localctx, 46)
                self.state = 1679
                self.match(fugue_sqlParser.SHOW)
                self.state = 1681
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,204,self._ctx)
                if la_ == 1:
                    self.state = 1680
                    self.identifier()


                self.state = 1683
                self.match(fugue_sqlParser.FUNCTIONS)
                self.state = 1691
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la - 53)) & ~0x3f) == 0 and ((1 << (_la - 53)) & -1) != 0 or (((_la - 117)) & ~0x3f) == 0 and ((1 << (_la - 117)) & -1) != 0 or (((_la - 181)) & ~0x3f) == 0 and ((1 << (_la - 181)) & -1) != 0 or (((_la - 245)) & ~0x3f) == 0 and ((1 << (_la - 245)) & 1152921504606846975) != 0 or (((_la - 319)) & ~0x3f) == 0 and ((1 << (_la - 319)) & 98369) != 0:
                    self.state = 1685
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,205,self._ctx)
                    if la_ == 1:
                        self.state = 1684
                        self.match(fugue_sqlParser.LIKE)


                    self.state = 1689
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 319, 334, 335]:
                        self.state = 1687
                        self.multipartIdentifier()
                        pass
                    elif token in [325]:
                        self.state = 1688
                        localctx.pattern = self.match(fugue_sqlParser.STRING)
                        pass
                    else:
                        raise NoViableAltException(self)



                pass

            elif la_ == 47:
                localctx = fugue_sqlParser.ShowCreateTableContext(self, localctx)
                self.enterOuterAlt(localctx, 47)
                self.state = 1693
                self.match(fugue_sqlParser.SHOW)
                self.state = 1694
                self.match(fugue_sqlParser.CREATE)
                self.state = 1695
                self.match(fugue_sqlParser.TABLE)
                self.state = 1696
                self.multipartIdentifier()
                self.state = 1699
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==63:
                    self.state = 1697
                    self.match(fugue_sqlParser.AS)
                    self.state = 1698
                    self.match(fugue_sqlParser.SERDE)


                pass

            elif la_ == 48:
                localctx = fugue_sqlParser.ShowCurrentNamespaceContext(self, localctx)
                self.enterOuterAlt(localctx, 48)
                self.state = 1701
                self.match(fugue_sqlParser.SHOW)
                self.state = 1702
                self.match(fugue_sqlParser.CURRENT)
                self.state = 1703
                self.match(fugue_sqlParser.NAMESPACE)
                pass

            elif la_ == 49:
                localctx = fugue_sqlParser.DescribeFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 49)
                self.state = 1704
                _la = self._input.LA(1)
                if not(_la==110 or _la==111):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1705
                self.match(fugue_sqlParser.FUNCTION)
                self.state = 1707
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,209,self._ctx)
                if la_ == 1:
                    self.state = 1706
                    self.match(fugue_sqlParser.EXTENDED)


                self.state = 1709
                self.describeFuncName()
                pass

            elif la_ == 50:
                localctx = fugue_sqlParser.DescribeNamespaceContext(self, localctx)
                self.enterOuterAlt(localctx, 50)
                self.state = 1710
                _la = self._input.LA(1)
                if not(_la==110 or _la==111):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1711
                self.theNamespace()
                self.state = 1713
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,210,self._ctx)
                if la_ == 1:
                    self.state = 1712
                    self.match(fugue_sqlParser.EXTENDED)


                self.state = 1715
                self.multipartIdentifier()
                pass

            elif la_ == 51:
                localctx = fugue_sqlParser.DescribeRelationContext(self, localctx)
                self.enterOuterAlt(localctx, 51)
                self.state = 1717
                _la = self._input.LA(1)
                if not(_la==110 or _la==111):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1719
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,211,self._ctx)
                if la_ == 1:
                    self.state = 1718
                    self.match(fugue_sqlParser.TABLE)


                self.state = 1722
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,212,self._ctx)
                if la_ == 1:
                    self.state = 1721
                    localctx.option = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==127 or _la==140):
                        localctx.option = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1724
                self.multipartIdentifier()
                self.state = 1726
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,213,self._ctx)
                if la_ == 1:
                    self.state = 1725
                    self.partitionSpec()


                self.state = 1729
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la - 53)) & ~0x3f) == 0 and ((1 << (_la - 53)) & -1) != 0 or (((_la - 117)) & ~0x3f) == 0 and ((1 << (_la - 117)) & -1) != 0 or (((_la - 181)) & ~0x3f) == 0 and ((1 << (_la - 181)) & -1) != 0 or (((_la - 245)) & ~0x3f) == 0 and ((1 << (_la - 245)) & 1152921504606846975) != 0 or (((_la - 319)) & ~0x3f) == 0 and ((1 << (_la - 319)) & 98305) != 0:
                    self.state = 1728
                    self.describeColName()


                pass

            elif la_ == 52:
                localctx = fugue_sqlParser.DescribeQueryContext(self, localctx)
                self.enterOuterAlt(localctx, 52)
                self.state = 1731
                _la = self._input.LA(1)
                if not(_la==110 or _la==111):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1733
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==223:
                    self.state = 1732
                    self.match(fugue_sqlParser.QUERY)


                self.state = 1735
                self.query()
                pass

            elif la_ == 53:
                localctx = fugue_sqlParser.CommentNamespaceContext(self, localctx)
                self.enterOuterAlt(localctx, 53)
                self.state = 1736
                self.match(fugue_sqlParser.COMMENT)
                self.state = 1737
                self.match(fugue_sqlParser.ON)
                self.state = 1738
                self.theNamespace()
                self.state = 1739
                self.multipartIdentifier()
                self.state = 1740
                self.match(fugue_sqlParser.IS)
                self.state = 1741
                localctx.comment = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==195 or _la==325):
                    localctx.comment = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 54:
                localctx = fugue_sqlParser.CommentTableContext(self, localctx)
                self.enterOuterAlt(localctx, 54)
                self.state = 1743
                self.match(fugue_sqlParser.COMMENT)
                self.state = 1744
                self.match(fugue_sqlParser.ON)
                self.state = 1745
                self.match(fugue_sqlParser.TABLE)
                self.state = 1746
                self.multipartIdentifier()
                self.state = 1747
                self.match(fugue_sqlParser.IS)
                self.state = 1748
                localctx.comment = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==195 or _la==325):
                    localctx.comment = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 55:
                localctx = fugue_sqlParser.RefreshTableContext(self, localctx)
                self.enterOuterAlt(localctx, 55)
                self.state = 1750
                self.match(fugue_sqlParser.REFRESH)
                self.state = 1751
                self.match(fugue_sqlParser.TABLE)
                self.state = 1752
                self.multipartIdentifier()
                pass

            elif la_ == 56:
                localctx = fugue_sqlParser.RefreshResourceContext(self, localctx)
                self.enterOuterAlt(localctx, 56)
                self.state = 1753
                self.match(fugue_sqlParser.REFRESH)
                self.state = 1761
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,217,self._ctx)
                if la_ == 1:
                    self.state = 1754
                    self.match(fugue_sqlParser.STRING)
                    pass

                elif la_ == 2:
                    self.state = 1758
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,216,self._ctx)
                    while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1+1:
                            self.state = 1755
                            self.matchWildcard() 
                        self.state = 1760
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,216,self._ctx)

                    pass


                pass

            elif la_ == 57:
                localctx = fugue_sqlParser.CacheTableContext(self, localctx)
                self.enterOuterAlt(localctx, 57)
                self.state = 1763
                self.match(fugue_sqlParser.CACHE)
                self.state = 1765
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==170:
                    self.state = 1764
                    self.match(fugue_sqlParser.LAZY)


                self.state = 1767
                self.match(fugue_sqlParser.TABLE)
                self.state = 1768
                self.multipartIdentifier()
                self.state = 1771
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==201:
                    self.state = 1769
                    self.match(fugue_sqlParser.OPTIONS)
                    self.state = 1770
                    localctx.options = self.tablePropertyList()


                self.state = 1777
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((_la) & ~0x3f) == 0 and ((1 << _la) & -9151103297862107136) != 0 or (((_la - 94)) & ~0x3f) == 0 and ((1 << (_la - 94)) & 140737496743937) != 0 or (((_la - 177)) & ~0x3f) == 0 and ((1 << (_la - 177)) & 20266198323167361) != 0 or (((_la - 247)) & ~0x3f) == 0 and ((1 << (_la - 247)) & 73183502536802305) != 0:
                    self.state = 1774
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==63:
                        self.state = 1773
                        self.match(fugue_sqlParser.AS)


                    self.state = 1776
                    self.query()


                pass

            elif la_ == 58:
                localctx = fugue_sqlParser.UncacheTableContext(self, localctx)
                self.enterOuterAlt(localctx, 58)
                self.state = 1779
                self.match(fugue_sqlParser.UNCACHE)
                self.state = 1780
                self.match(fugue_sqlParser.TABLE)
                self.state = 1783
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,222,self._ctx)
                if la_ == 1:
                    self.state = 1781
                    self.match(fugue_sqlParser.IF)
                    self.state = 1782
                    self.match(fugue_sqlParser.EXISTS)


                self.state = 1785
                self.multipartIdentifier()
                pass

            elif la_ == 59:
                localctx = fugue_sqlParser.ClearCacheContext(self, localctx)
                self.enterOuterAlt(localctx, 59)
                self.state = 1786
                self.match(fugue_sqlParser.CLEAR)
                self.state = 1787
                self.match(fugue_sqlParser.CACHE)
                pass

            elif la_ == 60:
                localctx = fugue_sqlParser.LoadDataContext(self, localctx)
                self.enterOuterAlt(localctx, 60)
                self.state = 1788
                self.match(fugue_sqlParser.LOAD)
                self.state = 1789
                self.match(fugue_sqlParser.DATA)
                self.state = 1791
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==178:
                    self.state = 1790
                    self.match(fugue_sqlParser.LOCAL)


                self.state = 1793
                self.match(fugue_sqlParser.INPATH)
                self.state = 1794
                localctx.path = self.match(fugue_sqlParser.STRING)
                self.state = 1796
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==210:
                    self.state = 1795
                    self.match(fugue_sqlParser.OVERWRITE)


                self.state = 1798
                self.match(fugue_sqlParser.INTO)
                self.state = 1799
                self.match(fugue_sqlParser.TABLE)
                self.state = 1800
                self.multipartIdentifier()
                self.state = 1802
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==211:
                    self.state = 1801
                    self.partitionSpec()


                pass

            elif la_ == 61:
                localctx = fugue_sqlParser.TruncateTableContext(self, localctx)
                self.enterOuterAlt(localctx, 61)
                self.state = 1804
                self.match(fugue_sqlParser.TRUNCATE)
                self.state = 1805
                self.match(fugue_sqlParser.TABLE)
                self.state = 1806
                self.multipartIdentifier()
                self.state = 1808
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==211:
                    self.state = 1807
                    self.partitionSpec()


                pass

            elif la_ == 62:
                localctx = fugue_sqlParser.RepairTableContext(self, localctx)
                self.enterOuterAlt(localctx, 62)
                self.state = 1810
                self.match(fugue_sqlParser.MSCK)
                self.state = 1811
                self.match(fugue_sqlParser.REPAIR)
                self.state = 1812
                self.match(fugue_sqlParser.TABLE)
                self.state = 1813
                self.multipartIdentifier()
                pass

            elif la_ == 63:
                localctx = fugue_sqlParser.ManageResourceContext(self, localctx)
                self.enterOuterAlt(localctx, 63)
                self.state = 1814
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==53 or _la==176):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1815
                self.identifier()
                self.state = 1823
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,228,self._ctx)
                if la_ == 1:
                    self.state = 1816
                    self.match(fugue_sqlParser.STRING)
                    pass

                elif la_ == 2:
                    self.state = 1820
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,227,self._ctx)
                    while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1+1:
                            self.state = 1817
                            self.matchWildcard() 
                        self.state = 1822
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,227,self._ctx)

                    pass


                pass

            elif la_ == 64:
                localctx = fugue_sqlParser.FailNativeCommandContext(self, localctx)
                self.enterOuterAlt(localctx, 64)
                self.state = 1825
                self.match(fugue_sqlParser.SET)
                self.state = 1826
                self.match(fugue_sqlParser.ROLE)
                self.state = 1830
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,229,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 1827
                        self.matchWildcard() 
                    self.state = 1832
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,229,self._ctx)

                pass

            elif la_ == 65:
                localctx = fugue_sqlParser.SetConfigurationContext(self, localctx)
                self.enterOuterAlt(localctx, 65)
                self.state = 1833
                self.match(fugue_sqlParser.SET)
                self.state = 1837
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,230,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 1834
                        self.matchWildcard() 
                    self.state = 1839
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,230,self._ctx)

                pass

            elif la_ == 66:
                localctx = fugue_sqlParser.ResetConfigurationContext(self, localctx)
                self.enterOuterAlt(localctx, 66)
                self.state = 1840
                self.match(fugue_sqlParser.RESET)
                pass

            elif la_ == 67:
                localctx = fugue_sqlParser.FailNativeCommandContext(self, localctx)
                self.enterOuterAlt(localctx, 67)
                self.state = 1841
                self.unsupportedHiveNativeCommands()
                self.state = 1845
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,231,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 1842
                        self.matchWildcard() 
                    self.state = 1847
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,231,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnsupportedHiveNativeCommandsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.kw1 = None # Token
            self.kw2 = None # Token
            self.kw3 = None # Token
            self.kw4 = None # Token
            self.kw5 = None # Token
            self.kw6 = None # Token

        def CREATE(self):
            return self.getToken(fugue_sqlParser.CREATE, 0)

        def ROLE(self):
            return self.getToken(fugue_sqlParser.ROLE, 0)

        def DROP(self):
            return self.getToken(fugue_sqlParser.DROP, 0)

        def GRANT(self):
            return self.getToken(fugue_sqlParser.GRANT, 0)

        def REVOKE(self):
            return self.getToken(fugue_sqlParser.REVOKE, 0)

        def SHOW(self):
            return self.getToken(fugue_sqlParser.SHOW, 0)

        def PRINCIPALS(self):
            return self.getToken(fugue_sqlParser.PRINCIPALS, 0)

        def ROLES(self):
            return self.getToken(fugue_sqlParser.ROLES, 0)

        def CURRENT(self):
            return self.getToken(fugue_sqlParser.CURRENT, 0)

        def EXPORT(self):
            return self.getToken(fugue_sqlParser.EXPORT, 0)

        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)

        def IMPORT(self):
            return self.getToken(fugue_sqlParser.IMPORT, 0)

        def COMPACTIONS(self):
            return self.getToken(fugue_sqlParser.COMPACTIONS, 0)

        def TRANSACTIONS(self):
            return self.getToken(fugue_sqlParser.TRANSACTIONS, 0)

        def INDEXES(self):
            return self.getToken(fugue_sqlParser.INDEXES, 0)

        def LOCKS(self):
            return self.getToken(fugue_sqlParser.LOCKS, 0)

        def INDEX(self):
            return self.getToken(fugue_sqlParser.INDEX, 0)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)

        def LOCK(self):
            return self.getToken(fugue_sqlParser.LOCK, 0)

        def DATABASE(self):
            return self.getToken(fugue_sqlParser.DATABASE, 0)

        def UNLOCK(self):
            return self.getToken(fugue_sqlParser.UNLOCK, 0)

        def TEMPORARY(self):
            return self.getToken(fugue_sqlParser.TEMPORARY, 0)

        def MACRO(self):
            return self.getToken(fugue_sqlParser.MACRO, 0)

        def tableIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.TableIdentifierContext,0)


        def NOT(self):
            return self.getToken(fugue_sqlParser.NOT, 0)

        def CLUSTERED(self):
            return self.getToken(fugue_sqlParser.CLUSTERED, 0)

        def BY(self):
            return self.getToken(fugue_sqlParser.BY, 0)

        def SORTED(self):
            return self.getToken(fugue_sqlParser.SORTED, 0)

        def SKEWED(self):
            return self.getToken(fugue_sqlParser.SKEWED, 0)

        def STORED(self):
            return self.getToken(fugue_sqlParser.STORED, 0)

        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)

        def DIRECTORIES(self):
            return self.getToken(fugue_sqlParser.DIRECTORIES, 0)

        def SET(self):
            return self.getToken(fugue_sqlParser.SET, 0)

        def LOCATION(self):
            return self.getToken(fugue_sqlParser.LOCATION, 0)

        def EXCHANGE(self):
            return self.getToken(fugue_sqlParser.EXCHANGE, 0)

        def PARTITION(self):
            return self.getToken(fugue_sqlParser.PARTITION, 0)

        def ARCHIVE(self):
            return self.getToken(fugue_sqlParser.ARCHIVE, 0)

        def UNARCHIVE(self):
            return self.getToken(fugue_sqlParser.UNARCHIVE, 0)

        def TOUCH(self):
            return self.getToken(fugue_sqlParser.TOUCH, 0)

        def COMPACT(self):
            return self.getToken(fugue_sqlParser.COMPACT, 0)

        def partitionSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.PartitionSpecContext,0)


        def CONCATENATE(self):
            return self.getToken(fugue_sqlParser.CONCATENATE, 0)

        def FILEFORMAT(self):
            return self.getToken(fugue_sqlParser.FILEFORMAT, 0)

        def REPLACE(self):
            return self.getToken(fugue_sqlParser.REPLACE, 0)

        def COLUMNS(self):
            return self.getToken(fugue_sqlParser.COLUMNS, 0)

        def START(self):
            return self.getToken(fugue_sqlParser.START, 0)

        def TRANSACTION(self):
            return self.getToken(fugue_sqlParser.TRANSACTION, 0)

        def COMMIT(self):
            return self.getToken(fugue_sqlParser.COMMIT, 0)

        def ROLLBACK(self):
            return self.getToken(fugue_sqlParser.ROLLBACK, 0)

        def DFS(self):
            return self.getToken(fugue_sqlParser.DFS, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_unsupportedHiveNativeCommands

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnsupportedHiveNativeCommands" ):
                return visitor.visitUnsupportedHiveNativeCommands(self)
            else:
                return visitor.visitChildren(self)




    def unsupportedHiveNativeCommands(self):

        localctx = fugue_sqlParser.UnsupportedHiveNativeCommandsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_unsupportedHiveNativeCommands)
        self._la = 0 # Token type
        try:
            self.state = 2018
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,240,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1850
                localctx.kw1 = self.match(fugue_sqlParser.CREATE)
                self.state = 1851
                localctx.kw2 = self.match(fugue_sqlParser.ROLE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1852
                localctx.kw1 = self.match(fugue_sqlParser.DROP)
                self.state = 1853
                localctx.kw2 = self.match(fugue_sqlParser.ROLE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1854
                localctx.kw1 = self.match(fugue_sqlParser.GRANT)
                self.state = 1856
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,233,self._ctx)
                if la_ == 1:
                    self.state = 1855
                    localctx.kw2 = self.match(fugue_sqlParser.ROLE)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1858
                localctx.kw1 = self.match(fugue_sqlParser.REVOKE)
                self.state = 1860
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,234,self._ctx)
                if la_ == 1:
                    self.state = 1859
                    localctx.kw2 = self.match(fugue_sqlParser.ROLE)


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1862
                localctx.kw1 = self.match(fugue_sqlParser.SHOW)
                self.state = 1863
                localctx.kw2 = self.match(fugue_sqlParser.GRANT)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1864
                localctx.kw1 = self.match(fugue_sqlParser.SHOW)
                self.state = 1865
                localctx.kw2 = self.match(fugue_sqlParser.ROLE)
                self.state = 1867
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,235,self._ctx)
                if la_ == 1:
                    self.state = 1866
                    localctx.kw3 = self.match(fugue_sqlParser.GRANT)


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1869
                localctx.kw1 = self.match(fugue_sqlParser.SHOW)
                self.state = 1870
                localctx.kw2 = self.match(fugue_sqlParser.PRINCIPALS)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1871
                localctx.kw1 = self.match(fugue_sqlParser.SHOW)
                self.state = 1872
                localctx.kw2 = self.match(fugue_sqlParser.ROLES)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1873
                localctx.kw1 = self.match(fugue_sqlParser.SHOW)
                self.state = 1874
                localctx.kw2 = self.match(fugue_sqlParser.CURRENT)
                self.state = 1875
                localctx.kw3 = self.match(fugue_sqlParser.ROLES)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1876
                localctx.kw1 = self.match(fugue_sqlParser.EXPORT)
                self.state = 1877
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1878
                localctx.kw1 = self.match(fugue_sqlParser.IMPORT)
                self.state = 1879
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1880
                localctx.kw1 = self.match(fugue_sqlParser.SHOW)
                self.state = 1881
                localctx.kw2 = self.match(fugue_sqlParser.COMPACTIONS)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1882
                localctx.kw1 = self.match(fugue_sqlParser.SHOW)
                self.state = 1883
                localctx.kw2 = self.match(fugue_sqlParser.CREATE)
                self.state = 1884
                localctx.kw3 = self.match(fugue_sqlParser.TABLE)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1885
                localctx.kw1 = self.match(fugue_sqlParser.SHOW)
                self.state = 1886
                localctx.kw2 = self.match(fugue_sqlParser.TRANSACTIONS)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1887
                localctx.kw1 = self.match(fugue_sqlParser.SHOW)
                self.state = 1888
                localctx.kw2 = self.match(fugue_sqlParser.INDEXES)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1889
                localctx.kw1 = self.match(fugue_sqlParser.SHOW)
                self.state = 1890
                localctx.kw2 = self.match(fugue_sqlParser.LOCKS)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 1891
                localctx.kw1 = self.match(fugue_sqlParser.CREATE)
                self.state = 1892
                localctx.kw2 = self.match(fugue_sqlParser.INDEX)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 1893
                localctx.kw1 = self.match(fugue_sqlParser.DROP)
                self.state = 1894
                localctx.kw2 = self.match(fugue_sqlParser.INDEX)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 1895
                localctx.kw1 = self.match(fugue_sqlParser.ALTER)
                self.state = 1896
                localctx.kw2 = self.match(fugue_sqlParser.INDEX)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 1897
                localctx.kw1 = self.match(fugue_sqlParser.LOCK)
                self.state = 1898
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 1899
                localctx.kw1 = self.match(fugue_sqlParser.LOCK)
                self.state = 1900
                localctx.kw2 = self.match(fugue_sqlParser.DATABASE)
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 1901
                localctx.kw1 = self.match(fugue_sqlParser.UNLOCK)
                self.state = 1902
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 1903
                localctx.kw1 = self.match(fugue_sqlParser.UNLOCK)
                self.state = 1904
                localctx.kw2 = self.match(fugue_sqlParser.DATABASE)
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 1905
                localctx.kw1 = self.match(fugue_sqlParser.CREATE)
                self.state = 1906
                localctx.kw2 = self.match(fugue_sqlParser.TEMPORARY)
                self.state = 1907
                localctx.kw3 = self.match(fugue_sqlParser.MACRO)
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 1908
                localctx.kw1 = self.match(fugue_sqlParser.DROP)
                self.state = 1909
                localctx.kw2 = self.match(fugue_sqlParser.TEMPORARY)
                self.state = 1910
                localctx.kw3 = self.match(fugue_sqlParser.MACRO)
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 1911
                localctx.kw1 = self.match(fugue_sqlParser.ALTER)
                self.state = 1912
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                self.state = 1913
                self.tableIdentifier()
                self.state = 1914
                localctx.kw3 = self.match(fugue_sqlParser.NOT)
                self.state = 1915
                localctx.kw4 = self.match(fugue_sqlParser.CLUSTERED)
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 1917
                localctx.kw1 = self.match(fugue_sqlParser.ALTER)
                self.state = 1918
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                self.state = 1919
                self.tableIdentifier()
                self.state = 1920
                localctx.kw3 = self.match(fugue_sqlParser.CLUSTERED)
                self.state = 1921
                localctx.kw4 = self.match(fugue_sqlParser.BY)
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 1923
                localctx.kw1 = self.match(fugue_sqlParser.ALTER)
                self.state = 1924
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                self.state = 1925
                self.tableIdentifier()
                self.state = 1926
                localctx.kw3 = self.match(fugue_sqlParser.NOT)
                self.state = 1927
                localctx.kw4 = self.match(fugue_sqlParser.SORTED)
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 1929
                localctx.kw1 = self.match(fugue_sqlParser.ALTER)
                self.state = 1930
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                self.state = 1931
                self.tableIdentifier()
                self.state = 1932
                localctx.kw3 = self.match(fugue_sqlParser.SKEWED)
                self.state = 1933
                localctx.kw4 = self.match(fugue_sqlParser.BY)
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 1935
                localctx.kw1 = self.match(fugue_sqlParser.ALTER)
                self.state = 1936
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                self.state = 1937
                self.tableIdentifier()
                self.state = 1938
                localctx.kw3 = self.match(fugue_sqlParser.NOT)
                self.state = 1939
                localctx.kw4 = self.match(fugue_sqlParser.SKEWED)
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 1941
                localctx.kw1 = self.match(fugue_sqlParser.ALTER)
                self.state = 1942
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                self.state = 1943
                self.tableIdentifier()
                self.state = 1944
                localctx.kw3 = self.match(fugue_sqlParser.NOT)
                self.state = 1945
                localctx.kw4 = self.match(fugue_sqlParser.STORED)
                self.state = 1946
                localctx.kw5 = self.match(fugue_sqlParser.AS)
                self.state = 1947
                localctx.kw6 = self.match(fugue_sqlParser.DIRECTORIES)
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 1949
                localctx.kw1 = self.match(fugue_sqlParser.ALTER)
                self.state = 1950
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                self.state = 1951
                self.tableIdentifier()
                self.state = 1952
                localctx.kw3 = self.match(fugue_sqlParser.SET)
                self.state = 1953
                localctx.kw4 = self.match(fugue_sqlParser.SKEWED)
                self.state = 1954
                localctx.kw5 = self.match(fugue_sqlParser.LOCATION)
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 1956
                localctx.kw1 = self.match(fugue_sqlParser.ALTER)
                self.state = 1957
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                self.state = 1958
                self.tableIdentifier()
                self.state = 1959
                localctx.kw3 = self.match(fugue_sqlParser.EXCHANGE)
                self.state = 1960
                localctx.kw4 = self.match(fugue_sqlParser.PARTITION)
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 1962
                localctx.kw1 = self.match(fugue_sqlParser.ALTER)
                self.state = 1963
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                self.state = 1964
                self.tableIdentifier()
                self.state = 1965
                localctx.kw3 = self.match(fugue_sqlParser.ARCHIVE)
                self.state = 1966
                localctx.kw4 = self.match(fugue_sqlParser.PARTITION)
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 1968
                localctx.kw1 = self.match(fugue_sqlParser.ALTER)
                self.state = 1969
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                self.state = 1970
                self.tableIdentifier()
                self.state = 1971
                localctx.kw3 = self.match(fugue_sqlParser.UNARCHIVE)
                self.state = 1972
                localctx.kw4 = self.match(fugue_sqlParser.PARTITION)
                pass

            elif la_ == 36:
                self.enterOuterAlt(localctx, 36)
                self.state = 1974
                localctx.kw1 = self.match(fugue_sqlParser.ALTER)
                self.state = 1975
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                self.state = 1976
                self.tableIdentifier()
                self.state = 1977
                localctx.kw3 = self.match(fugue_sqlParser.TOUCH)
                pass

            elif la_ == 37:
                self.enterOuterAlt(localctx, 37)
                self.state = 1979
                localctx.kw1 = self.match(fugue_sqlParser.ALTER)
                self.state = 1980
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                self.state = 1981
                self.tableIdentifier()
                self.state = 1983
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==211:
                    self.state = 1982
                    self.partitionSpec()


                self.state = 1985
                localctx.kw3 = self.match(fugue_sqlParser.COMPACT)
                pass

            elif la_ == 38:
                self.enterOuterAlt(localctx, 38)
                self.state = 1987
                localctx.kw1 = self.match(fugue_sqlParser.ALTER)
                self.state = 1988
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                self.state = 1989
                self.tableIdentifier()
                self.state = 1991
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==211:
                    self.state = 1990
                    self.partitionSpec()


                self.state = 1993
                localctx.kw3 = self.match(fugue_sqlParser.CONCATENATE)
                pass

            elif la_ == 39:
                self.enterOuterAlt(localctx, 39)
                self.state = 1995
                localctx.kw1 = self.match(fugue_sqlParser.ALTER)
                self.state = 1996
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                self.state = 1997
                self.tableIdentifier()
                self.state = 1999
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==211:
                    self.state = 1998
                    self.partitionSpec()


                self.state = 2001
                localctx.kw3 = self.match(fugue_sqlParser.SET)
                self.state = 2002
                localctx.kw4 = self.match(fugue_sqlParser.FILEFORMAT)
                pass

            elif la_ == 40:
                self.enterOuterAlt(localctx, 40)
                self.state = 2004
                localctx.kw1 = self.match(fugue_sqlParser.ALTER)
                self.state = 2005
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                self.state = 2006
                self.tableIdentifier()
                self.state = 2008
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==211:
                    self.state = 2007
                    self.partitionSpec()


                self.state = 2010
                localctx.kw3 = self.match(fugue_sqlParser.REPLACE)
                self.state = 2011
                localctx.kw4 = self.match(fugue_sqlParser.COLUMNS)
                pass

            elif la_ == 41:
                self.enterOuterAlt(localctx, 41)
                self.state = 2013
                localctx.kw1 = self.match(fugue_sqlParser.START)
                self.state = 2014
                localctx.kw2 = self.match(fugue_sqlParser.TRANSACTION)
                pass

            elif la_ == 42:
                self.enterOuterAlt(localctx, 42)
                self.state = 2015
                localctx.kw1 = self.match(fugue_sqlParser.COMMIT)
                pass

            elif la_ == 43:
                self.enterOuterAlt(localctx, 43)
                self.state = 2016
                localctx.kw1 = self.match(fugue_sqlParser.ROLLBACK)
                pass

            elif la_ == 44:
                self.enterOuterAlt(localctx, 44)
                self.state = 2017
                localctx.kw1 = self.match(fugue_sqlParser.DFS)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateTableHeaderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(fugue_sqlParser.CREATE, 0)

        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)


        def TEMPORARY(self):
            return self.getToken(fugue_sqlParser.TEMPORARY, 0)

        def EXTERNAL(self):
            return self.getToken(fugue_sqlParser.EXTERNAL, 0)

        def IF(self):
            return self.getToken(fugue_sqlParser.IF, 0)

        def NOT(self):
            return self.getToken(fugue_sqlParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(fugue_sqlParser.EXISTS, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_createTableHeader

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateTableHeader" ):
                return visitor.visitCreateTableHeader(self)
            else:
                return visitor.visitChildren(self)




    def createTableHeader(self):

        localctx = fugue_sqlParser.CreateTableHeaderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_createTableHeader)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2020
            self.match(fugue_sqlParser.CREATE)
            self.state = 2022
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==272:
                self.state = 2021
                self.match(fugue_sqlParser.TEMPORARY)


            self.state = 2025
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==128:
                self.state = 2024
                self.match(fugue_sqlParser.EXTERNAL)


            self.state = 2027
            self.match(fugue_sqlParser.TABLE)
            self.state = 2031
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,243,self._ctx)
            if la_ == 1:
                self.state = 2028
                self.match(fugue_sqlParser.IF)
                self.state = 2029
                self.match(fugue_sqlParser.NOT)
                self.state = 2030
                self.match(fugue_sqlParser.EXISTS)


            self.state = 2033
            self.multipartIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReplaceTableHeaderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REPLACE(self):
            return self.getToken(fugue_sqlParser.REPLACE, 0)

        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)


        def CREATE(self):
            return self.getToken(fugue_sqlParser.CREATE, 0)

        def OR(self):
            return self.getToken(fugue_sqlParser.OR, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_replaceTableHeader

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReplaceTableHeader" ):
                return visitor.visitReplaceTableHeader(self)
            else:
                return visitor.visitChildren(self)




    def replaceTableHeader(self):

        localctx = fugue_sqlParser.ReplaceTableHeaderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_replaceTableHeader)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2037
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==94:
                self.state = 2035
                self.match(fugue_sqlParser.CREATE)
                self.state = 2036
                self.match(fugue_sqlParser.OR)


            self.state = 2039
            self.match(fugue_sqlParser.REPLACE)
            self.state = 2040
            self.match(fugue_sqlParser.TABLE)
            self.state = 2041
            self.multipartIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BucketSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLUSTERED(self):
            return self.getToken(fugue_sqlParser.CLUSTERED, 0)

        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.BY)
            else:
                return self.getToken(fugue_sqlParser.BY, i)

        def identifierList(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierListContext,0)


        def INTO(self):
            return self.getToken(fugue_sqlParser.INTO, 0)

        def INTEGER_VALUE(self):
            return self.getToken(fugue_sqlParser.INTEGER_VALUE, 0)

        def BUCKETS(self):
            return self.getToken(fugue_sqlParser.BUCKETS, 0)

        def SORTED(self):
            return self.getToken(fugue_sqlParser.SORTED, 0)

        def orderedIdentifierList(self):
            return self.getTypedRuleContext(fugue_sqlParser.OrderedIdentifierListContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_bucketSpec

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBucketSpec" ):
                return visitor.visitBucketSpec(self)
            else:
                return visitor.visitChildren(self)




    def bucketSpec(self):

        localctx = fugue_sqlParser.BucketSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_bucketSpec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2043
            self.match(fugue_sqlParser.CLUSTERED)
            self.state = 2044
            self.match(fugue_sqlParser.BY)
            self.state = 2045
            self.identifierList()
            self.state = 2049
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==260:
                self.state = 2046
                self.match(fugue_sqlParser.SORTED)
                self.state = 2047
                self.match(fugue_sqlParser.BY)
                self.state = 2048
                self.orderedIdentifierList()


            self.state = 2051
            self.match(fugue_sqlParser.INTO)
            self.state = 2052
            self.match(fugue_sqlParser.INTEGER_VALUE)
            self.state = 2053
            self.match(fugue_sqlParser.BUCKETS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SkewSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SKEWED(self):
            return self.getToken(fugue_sqlParser.SKEWED, 0)

        def BY(self):
            return self.getToken(fugue_sqlParser.BY, 0)

        def identifierList(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierListContext,0)


        def ON(self):
            return self.getToken(fugue_sqlParser.ON, 0)

        def constantList(self):
            return self.getTypedRuleContext(fugue_sqlParser.ConstantListContext,0)


        def nestedConstantList(self):
            return self.getTypedRuleContext(fugue_sqlParser.NestedConstantListContext,0)


        def STORED(self):
            return self.getToken(fugue_sqlParser.STORED, 0)

        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)

        def DIRECTORIES(self):
            return self.getToken(fugue_sqlParser.DIRECTORIES, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_skewSpec

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSkewSpec" ):
                return visitor.visitSkewSpec(self)
            else:
                return visitor.visitChildren(self)




    def skewSpec(self):

        localctx = fugue_sqlParser.SkewSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_skewSpec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2055
            self.match(fugue_sqlParser.SKEWED)
            self.state = 2056
            self.match(fugue_sqlParser.BY)
            self.state = 2057
            self.identifierList()
            self.state = 2058
            self.match(fugue_sqlParser.ON)
            self.state = 2061
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,246,self._ctx)
            if la_ == 1:
                self.state = 2059
                self.constantList()
                pass

            elif la_ == 2:
                self.state = 2060
                self.nestedConstantList()
                pass


            self.state = 2066
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,247,self._ctx)
            if la_ == 1:
                self.state = 2063
                self.match(fugue_sqlParser.STORED)
                self.state = 2064
                self.match(fugue_sqlParser.AS)
                self.state = 2065
                self.match(fugue_sqlParser.DIRECTORIES)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LocationSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCATION(self):
            return self.getToken(fugue_sqlParser.LOCATION, 0)

        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_locationSpec

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLocationSpec" ):
                return visitor.visitLocationSpec(self)
            else:
                return visitor.visitChildren(self)




    def locationSpec(self):

        localctx = fugue_sqlParser.LocationSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_locationSpec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2068
            self.match(fugue_sqlParser.LOCATION)
            self.state = 2069
            self.match(fugue_sqlParser.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommentSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMENT(self):
            return self.getToken(fugue_sqlParser.COMMENT, 0)

        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_commentSpec

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCommentSpec" ):
                return visitor.visitCommentSpec(self)
            else:
                return visitor.visitChildren(self)




    def commentSpec(self):

        localctx = fugue_sqlParser.CommentSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_commentSpec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2071
            self.match(fugue_sqlParser.COMMENT)
            self.state = 2072
            self.match(fugue_sqlParser.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def queryTerm(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryTermContext,0)


        def queryOrganization(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryOrganizationContext,0)


        def fugueSqlEngine(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSqlEngineContext,0)


        def ctes(self):
            return self.getTypedRuleContext(fugue_sqlParser.CtesContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_query

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuery" ):
                return visitor.visitQuery(self)
            else:
                return visitor.visitChildren(self)




    def query(self):

        localctx = fugue_sqlParser.QueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_query)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2075
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==46:
                self.state = 2074
                self.fugueSqlEngine()


            self.state = 2078
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==303:
                self.state = 2077
                self.ctes()


            self.state = 2080
            self.queryTerm(0)
            self.state = 2081
            self.queryOrganization()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InsertIntoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_insertInto

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class InsertOverwriteHiveDirContext(InsertIntoContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.InsertIntoContext
            super().__init__(parser)
            self.path = None # Token
            self.copyFrom(ctx)

        def INSERT(self):
            return self.getToken(fugue_sqlParser.INSERT, 0)
        def OVERWRITE(self):
            return self.getToken(fugue_sqlParser.OVERWRITE, 0)
        def DIRECTORY(self):
            return self.getToken(fugue_sqlParser.DIRECTORY, 0)
        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)
        def LOCAL(self):
            return self.getToken(fugue_sqlParser.LOCAL, 0)
        def rowFormat(self):
            return self.getTypedRuleContext(fugue_sqlParser.RowFormatContext,0)

        def createFileFormat(self):
            return self.getTypedRuleContext(fugue_sqlParser.CreateFileFormatContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsertOverwriteHiveDir" ):
                return visitor.visitInsertOverwriteHiveDir(self)
            else:
                return visitor.visitChildren(self)


    class InsertOverwriteDirContext(InsertIntoContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.InsertIntoContext
            super().__init__(parser)
            self.path = None # Token
            self.options = None # TablePropertyListContext
            self.copyFrom(ctx)

        def INSERT(self):
            return self.getToken(fugue_sqlParser.INSERT, 0)
        def OVERWRITE(self):
            return self.getToken(fugue_sqlParser.OVERWRITE, 0)
        def DIRECTORY(self):
            return self.getToken(fugue_sqlParser.DIRECTORY, 0)
        def tableProvider(self):
            return self.getTypedRuleContext(fugue_sqlParser.TableProviderContext,0)

        def LOCAL(self):
            return self.getToken(fugue_sqlParser.LOCAL, 0)
        def OPTIONS(self):
            return self.getToken(fugue_sqlParser.OPTIONS, 0)
        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)
        def tablePropertyList(self):
            return self.getTypedRuleContext(fugue_sqlParser.TablePropertyListContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsertOverwriteDir" ):
                return visitor.visitInsertOverwriteDir(self)
            else:
                return visitor.visitChildren(self)


    class InsertOverwriteTableContext(InsertIntoContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.InsertIntoContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INSERT(self):
            return self.getToken(fugue_sqlParser.INSERT, 0)
        def OVERWRITE(self):
            return self.getToken(fugue_sqlParser.OVERWRITE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def partitionSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.PartitionSpecContext,0)

        def IF(self):
            return self.getToken(fugue_sqlParser.IF, 0)
        def NOT(self):
            return self.getToken(fugue_sqlParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(fugue_sqlParser.EXISTS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsertOverwriteTable" ):
                return visitor.visitInsertOverwriteTable(self)
            else:
                return visitor.visitChildren(self)


    class InsertIntoTableContext(InsertIntoContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.InsertIntoContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INSERT(self):
            return self.getToken(fugue_sqlParser.INSERT, 0)
        def INTO(self):
            return self.getToken(fugue_sqlParser.INTO, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def partitionSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.PartitionSpecContext,0)

        def IF(self):
            return self.getToken(fugue_sqlParser.IF, 0)
        def NOT(self):
            return self.getToken(fugue_sqlParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(fugue_sqlParser.EXISTS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsertIntoTable" ):
                return visitor.visitInsertIntoTable(self)
            else:
                return visitor.visitChildren(self)



    def insertInto(self):

        localctx = fugue_sqlParser.InsertIntoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_insertInto)
        self._la = 0 # Token type
        try:
            self.state = 2138
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,262,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.InsertOverwriteTableContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2083
                self.match(fugue_sqlParser.INSERT)
                self.state = 2084
                self.match(fugue_sqlParser.OVERWRITE)
                self.state = 2086
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,250,self._ctx)
                if la_ == 1:
                    self.state = 2085
                    self.match(fugue_sqlParser.TABLE)


                self.state = 2088
                self.multipartIdentifier()
                self.state = 2095
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==211:
                    self.state = 2089
                    self.partitionSpec()
                    self.state = 2093
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==151:
                        self.state = 2090
                        self.match(fugue_sqlParser.IF)
                        self.state = 2091
                        self.match(fugue_sqlParser.NOT)
                        self.state = 2092
                        self.match(fugue_sqlParser.EXISTS)




                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.InsertIntoTableContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2097
                self.match(fugue_sqlParser.INSERT)
                self.state = 2098
                self.match(fugue_sqlParser.INTO)
                self.state = 2100
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,253,self._ctx)
                if la_ == 1:
                    self.state = 2099
                    self.match(fugue_sqlParser.TABLE)


                self.state = 2102
                self.multipartIdentifier()
                self.state = 2104
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==211:
                    self.state = 2103
                    self.partitionSpec()


                self.state = 2109
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==151:
                    self.state = 2106
                    self.match(fugue_sqlParser.IF)
                    self.state = 2107
                    self.match(fugue_sqlParser.NOT)
                    self.state = 2108
                    self.match(fugue_sqlParser.EXISTS)


                pass

            elif la_ == 3:
                localctx = fugue_sqlParser.InsertOverwriteHiveDirContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2111
                self.match(fugue_sqlParser.INSERT)
                self.state = 2112
                self.match(fugue_sqlParser.OVERWRITE)
                self.state = 2114
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==178:
                    self.state = 2113
                    self.match(fugue_sqlParser.LOCAL)


                self.state = 2116
                self.match(fugue_sqlParser.DIRECTORY)
                self.state = 2117
                localctx.path = self.match(fugue_sqlParser.STRING)
                self.state = 2119
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==243:
                    self.state = 2118
                    self.rowFormat()


                self.state = 2122
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==263:
                    self.state = 2121
                    self.createFileFormat()


                pass

            elif la_ == 4:
                localctx = fugue_sqlParser.InsertOverwriteDirContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2124
                self.match(fugue_sqlParser.INSERT)
                self.state = 2125
                self.match(fugue_sqlParser.OVERWRITE)
                self.state = 2127
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==178:
                    self.state = 2126
                    self.match(fugue_sqlParser.LOCAL)


                self.state = 2129
                self.match(fugue_sqlParser.DIRECTORY)
                self.state = 2131
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==325:
                    self.state = 2130
                    localctx.path = self.match(fugue_sqlParser.STRING)


                self.state = 2133
                self.tableProvider()
                self.state = 2136
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==201:
                    self.state = 2134
                    self.match(fugue_sqlParser.OPTIONS)
                    self.state = 2135
                    localctx.options = self.tablePropertyList()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionSpecLocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def partitionSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.PartitionSpecContext,0)


        def locationSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.LocationSpecContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_partitionSpecLocation

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartitionSpecLocation" ):
                return visitor.visitPartitionSpecLocation(self)
            else:
                return visitor.visitChildren(self)




    def partitionSpecLocation(self):

        localctx = fugue_sqlParser.PartitionSpecLocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_partitionSpecLocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2140
            self.partitionSpec()
            self.state = 2142
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==179:
                self.state = 2141
                self.locationSpec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION(self):
            return self.getToken(fugue_sqlParser.PARTITION, 0)

        def partitionVal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.PartitionValContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.PartitionValContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_partitionSpec

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartitionSpec" ):
                return visitor.visitPartitionSpec(self)
            else:
                return visitor.visitChildren(self)




    def partitionSpec(self):

        localctx = fugue_sqlParser.PartitionSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_partitionSpec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2144
            self.match(fugue_sqlParser.PARTITION)
            self.state = 2145
            self.match(fugue_sqlParser.T__2)
            self.state = 2146
            self.partitionVal()
            self.state = 2151
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1:
                self.state = 2147
                self.match(fugue_sqlParser.T__0)
                self.state = 2148
                self.partitionVal()
                self.state = 2153
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2154
            self.match(fugue_sqlParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionValContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)


        def EQUAL(self):
            return self.getToken(fugue_sqlParser.EQUAL, 0)

        def constant(self):
            return self.getTypedRuleContext(fugue_sqlParser.ConstantContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_partitionVal

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartitionVal" ):
                return visitor.visitPartitionVal(self)
            else:
                return visitor.visitChildren(self)




    def partitionVal(self):

        localctx = fugue_sqlParser.PartitionValContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_partitionVal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2156
            self.identifier()
            self.state = 2159
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==305:
                self.state = 2157
                self.match(fugue_sqlParser.EQUAL)
                self.state = 2158
                self.constant()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TheNamespaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAMESPACE(self):
            return self.getToken(fugue_sqlParser.NAMESPACE, 0)

        def DATABASE(self):
            return self.getToken(fugue_sqlParser.DATABASE, 0)

        def SCHEMA(self):
            return self.getToken(fugue_sqlParser.SCHEMA, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_theNamespace

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTheNamespace" ):
                return visitor.visitTheNamespace(self)
            else:
                return visitor.visitChildren(self)




    def theNamespace(self):

        localctx = fugue_sqlParser.TheNamespaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_theNamespace)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2161
            _la = self._input.LA(1)
            if not(_la==103 or _la==190 or _la==245):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DescribeFuncNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedName(self):
            return self.getTypedRuleContext(fugue_sqlParser.QualifiedNameContext,0)


        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)

        def comparisonOperator(self):
            return self.getTypedRuleContext(fugue_sqlParser.ComparisonOperatorContext,0)


        def arithmeticOperator(self):
            return self.getTypedRuleContext(fugue_sqlParser.ArithmeticOperatorContext,0)


        def predicateOperator(self):
            return self.getTypedRuleContext(fugue_sqlParser.PredicateOperatorContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_describeFuncName

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDescribeFuncName" ):
                return visitor.visitDescribeFuncName(self)
            else:
                return visitor.visitChildren(self)




    def describeFuncName(self):

        localctx = fugue_sqlParser.DescribeFuncNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_describeFuncName)
        try:
            self.state = 2168
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,266,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2163
                self.qualifiedName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2164
                self.match(fugue_sqlParser.STRING)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2165
                self.comparisonOperator()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2166
                self.arithmeticOperator()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2167
                self.predicateOperator()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DescribeColNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._identifier = None # IdentifierContext
            self.nameParts = list() # of IdentifierContexts

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_describeColName

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDescribeColName" ):
                return visitor.visitDescribeColName(self)
            else:
                return visitor.visitChildren(self)




    def describeColName(self):

        localctx = fugue_sqlParser.DescribeColNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_describeColName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2170
            localctx._identifier = self.identifier()
            localctx.nameParts.append(localctx._identifier)
            self.state = 2175
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==7:
                self.state = 2171
                self.match(fugue_sqlParser.T__6)
                self.state = 2172
                localctx._identifier = self.identifier()
                localctx.nameParts.append(localctx._identifier)
                self.state = 2177
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CtesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(fugue_sqlParser.WITH, 0)

        def namedQuery(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.NamedQueryContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.NamedQueryContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_ctes

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCtes" ):
                return visitor.visitCtes(self)
            else:
                return visitor.visitChildren(self)




    def ctes(self):

        localctx = fugue_sqlParser.CtesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_ctes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2178
            self.match(fugue_sqlParser.WITH)
            self.state = 2179
            self.namedQuery()
            self.state = 2184
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1:
                self.state = 2180
                self.match(fugue_sqlParser.T__0)
                self.state = 2181
                self.namedQuery()
                self.state = 2186
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # ErrorCapturingIdentifierContext
            self.columnAliases = None # IdentifierListContext

        def query(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryContext,0)


        def errorCapturingIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.ErrorCapturingIdentifierContext,0)


        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)

        def identifierList(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierListContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_namedQuery

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamedQuery" ):
                return visitor.visitNamedQuery(self)
            else:
                return visitor.visitChildren(self)




    def namedQuery(self):

        localctx = fugue_sqlParser.NamedQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_namedQuery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2187
            localctx.name = self.errorCapturingIdentifier()
            self.state = 2189
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,269,self._ctx)
            if la_ == 1:
                self.state = 2188
                localctx.columnAliases = self.identifierList()


            self.state = 2192
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==63:
                self.state = 2191
                self.match(fugue_sqlParser.AS)


            self.state = 2194
            self.match(fugue_sqlParser.T__2)
            self.state = 2195
            self.query()
            self.state = 2196
            self.match(fugue_sqlParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableProviderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(fugue_sqlParser.USING, 0)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_tableProvider

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableProvider" ):
                return visitor.visitTableProvider(self)
            else:
                return visitor.visitChildren(self)




    def tableProvider(self):

        localctx = fugue_sqlParser.TableProviderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_tableProvider)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2198
            self.match(fugue_sqlParser.USING)
            self.state = 2199
            self.multipartIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateTableClausesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.options = None # TablePropertyListContext
            self.partitioning = None # TransformListContext
            self.tableProps = None # TablePropertyListContext

        def bucketSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.BucketSpecContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.BucketSpecContext,i)


        def locationSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.LocationSpecContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.LocationSpecContext,i)


        def commentSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.CommentSpecContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.CommentSpecContext,i)


        def OPTIONS(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.OPTIONS)
            else:
                return self.getToken(fugue_sqlParser.OPTIONS, i)

        def PARTITIONED(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.PARTITIONED)
            else:
                return self.getToken(fugue_sqlParser.PARTITIONED, i)

        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.BY)
            else:
                return self.getToken(fugue_sqlParser.BY, i)

        def TBLPROPERTIES(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.TBLPROPERTIES)
            else:
                return self.getToken(fugue_sqlParser.TBLPROPERTIES, i)

        def tablePropertyList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.TablePropertyListContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.TablePropertyListContext,i)


        def transformList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.TransformListContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.TransformListContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_createTableClauses

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateTableClauses" ):
                return visitor.visitCreateTableClauses(self)
            else:
                return visitor.visitChildren(self)




    def createTableClauses(self):

        localctx = fugue_sqlParser.CreateTableClausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_createTableClauses)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2213
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==80 or _la==86 or (((_la - 179)) & ~0x3f) == 0 and ((1 << (_la - 179)) & 8594128897) != 0 or _la==271:
                self.state = 2211
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [201]:
                    self.state = 2201
                    self.match(fugue_sqlParser.OPTIONS)
                    self.state = 2202
                    localctx.options = self.tablePropertyList()
                    pass
                elif token in [212]:
                    self.state = 2203
                    self.match(fugue_sqlParser.PARTITIONED)
                    self.state = 2204
                    self.match(fugue_sqlParser.BY)
                    self.state = 2205
                    localctx.partitioning = self.transformList()
                    pass
                elif token in [80]:
                    self.state = 2206
                    self.bucketSpec()
                    pass
                elif token in [179]:
                    self.state = 2207
                    self.locationSpec()
                    pass
                elif token in [86]:
                    self.state = 2208
                    self.commentSpec()
                    pass
                elif token in [271]:
                    self.state = 2209
                    self.match(fugue_sqlParser.TBLPROPERTIES)
                    self.state = 2210
                    localctx.tableProps = self.tablePropertyList()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2215
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TablePropertyListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableProperty(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.TablePropertyContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.TablePropertyContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_tablePropertyList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTablePropertyList" ):
                return visitor.visitTablePropertyList(self)
            else:
                return visitor.visitChildren(self)




    def tablePropertyList(self):

        localctx = fugue_sqlParser.TablePropertyListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_tablePropertyList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2216
            self.match(fugue_sqlParser.T__2)
            self.state = 2217
            self.tableProperty()
            self.state = 2222
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1:
                self.state = 2218
                self.match(fugue_sqlParser.T__0)
                self.state = 2219
                self.tableProperty()
                self.state = 2224
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2225
            self.match(fugue_sqlParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TablePropertyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.key = None # TablePropertyKeyContext
            self.value = None # TablePropertyValueContext

        def tablePropertyKey(self):
            return self.getTypedRuleContext(fugue_sqlParser.TablePropertyKeyContext,0)


        def tablePropertyValue(self):
            return self.getTypedRuleContext(fugue_sqlParser.TablePropertyValueContext,0)


        def EQUAL(self):
            return self.getToken(fugue_sqlParser.EQUAL, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_tableProperty

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableProperty" ):
                return visitor.visitTableProperty(self)
            else:
                return visitor.visitChildren(self)




    def tableProperty(self):

        localctx = fugue_sqlParser.TablePropertyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_tableProperty)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2227
            localctx.key = self.tablePropertyKey()
            self.state = 2232
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==130 or (((_la - 282)) & ~0x3f) == 0 and ((1 << (_la - 282)) & 712483543187457) != 0:
                self.state = 2229
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==305:
                    self.state = 2228
                    self.match(fugue_sqlParser.EQUAL)


                self.state = 2231
                localctx.value = self.tablePropertyValue()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TablePropertyKeyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,i)


        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_tablePropertyKey

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTablePropertyKey" ):
                return visitor.visitTablePropertyKey(self)
            else:
                return visitor.visitChildren(self)




    def tablePropertyKey(self):

        localctx = fugue_sqlParser.TablePropertyKeyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_tablePropertyKey)
        self._la = 0 # Token type
        try:
            self.state = 2243
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 319, 334, 335]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2234
                self.identifier()
                self.state = 2239
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==7:
                    self.state = 2235
                    self.match(fugue_sqlParser.T__6)
                    self.state = 2236
                    self.identifier()
                    self.state = 2241
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [325]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2242
                self.match(fugue_sqlParser.STRING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TablePropertyValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGER_VALUE(self):
            return self.getToken(fugue_sqlParser.INTEGER_VALUE, 0)

        def DECIMAL_VALUE(self):
            return self.getToken(fugue_sqlParser.DECIMAL_VALUE, 0)

        def booleanValue(self):
            return self.getTypedRuleContext(fugue_sqlParser.BooleanValueContext,0)


        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_tablePropertyValue

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTablePropertyValue" ):
                return visitor.visitTablePropertyValue(self)
            else:
                return visitor.visitChildren(self)




    def tablePropertyValue(self):

        localctx = fugue_sqlParser.TablePropertyValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_tablePropertyValue)
        try:
            self.state = 2249
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [329]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2245
                self.match(fugue_sqlParser.INTEGER_VALUE)
                pass
            elif token in [331]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2246
                self.match(fugue_sqlParser.DECIMAL_VALUE)
                pass
            elif token in [130, 282]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2247
                self.booleanValue()
                pass
            elif token in [325]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2248
                self.match(fugue_sqlParser.STRING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ConstantContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ConstantContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_constantList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstantList" ):
                return visitor.visitConstantList(self)
            else:
                return visitor.visitChildren(self)




    def constantList(self):

        localctx = fugue_sqlParser.ConstantListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_constantList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2251
            self.match(fugue_sqlParser.T__2)
            self.state = 2252
            self.constant()
            self.state = 2257
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1:
                self.state = 2253
                self.match(fugue_sqlParser.T__0)
                self.state = 2254
                self.constant()
                self.state = 2259
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2260
            self.match(fugue_sqlParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NestedConstantListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constantList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ConstantListContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ConstantListContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_nestedConstantList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNestedConstantList" ):
                return visitor.visitNestedConstantList(self)
            else:
                return visitor.visitChildren(self)




    def nestedConstantList(self):

        localctx = fugue_sqlParser.NestedConstantListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_nestedConstantList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2262
            self.match(fugue_sqlParser.T__2)
            self.state = 2263
            self.constantList()
            self.state = 2268
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1:
                self.state = 2264
                self.match(fugue_sqlParser.T__0)
                self.state = 2265
                self.constantList()
                self.state = 2270
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2271
            self.match(fugue_sqlParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateFileFormatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STORED(self):
            return self.getToken(fugue_sqlParser.STORED, 0)

        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)

        def fileFormat(self):
            return self.getTypedRuleContext(fugue_sqlParser.FileFormatContext,0)


        def BY(self):
            return self.getToken(fugue_sqlParser.BY, 0)

        def storageHandler(self):
            return self.getTypedRuleContext(fugue_sqlParser.StorageHandlerContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_createFileFormat

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateFileFormat" ):
                return visitor.visitCreateFileFormat(self)
            else:
                return visitor.visitChildren(self)




    def createFileFormat(self):

        localctx = fugue_sqlParser.CreateFileFormatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_createFileFormat)
        try:
            self.state = 2279
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,281,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2273
                self.match(fugue_sqlParser.STORED)
                self.state = 2274
                self.match(fugue_sqlParser.AS)
                self.state = 2275
                self.fileFormat()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2276
                self.match(fugue_sqlParser.STORED)
                self.state = 2277
                self.match(fugue_sqlParser.BY)
                self.state = 2278
                self.storageHandler()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FileFormatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fileFormat

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TableFileFormatContext(FileFormatContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.FileFormatContext
            super().__init__(parser)
            self.inFmt = None # Token
            self.outFmt = None # Token
            self.copyFrom(ctx)

        def INPUTFORMAT(self):
            return self.getToken(fugue_sqlParser.INPUTFORMAT, 0)
        def OUTPUTFORMAT(self):
            return self.getToken(fugue_sqlParser.OUTPUTFORMAT, 0)
        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.STRING)
            else:
                return self.getToken(fugue_sqlParser.STRING, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableFileFormat" ):
                return visitor.visitTableFileFormat(self)
            else:
                return visitor.visitChildren(self)


    class GenericFileFormatContext(FileFormatContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.FileFormatContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGenericFileFormat" ):
                return visitor.visitGenericFileFormat(self)
            else:
                return visitor.visitChildren(self)



    def fileFormat(self):

        localctx = fugue_sqlParser.FileFormatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_fileFormat)
        try:
            self.state = 2286
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,282,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.TableFileFormatContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2281
                self.match(fugue_sqlParser.INPUTFORMAT)
                self.state = 2282
                localctx.inFmt = self.match(fugue_sqlParser.STRING)
                self.state = 2283
                self.match(fugue_sqlParser.OUTPUTFORMAT)
                self.state = 2284
                localctx.outFmt = self.match(fugue_sqlParser.STRING)
                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.GenericFileFormatContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2285
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StorageHandlerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)

        def WITH(self):
            return self.getToken(fugue_sqlParser.WITH, 0)

        def SERDEPROPERTIES(self):
            return self.getToken(fugue_sqlParser.SERDEPROPERTIES, 0)

        def tablePropertyList(self):
            return self.getTypedRuleContext(fugue_sqlParser.TablePropertyListContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_storageHandler

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStorageHandler" ):
                return visitor.visitStorageHandler(self)
            else:
                return visitor.visitChildren(self)




    def storageHandler(self):

        localctx = fugue_sqlParser.StorageHandlerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_storageHandler)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2288
            self.match(fugue_sqlParser.STRING)
            self.state = 2292
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,283,self._ctx)
            if la_ == 1:
                self.state = 2289
                self.match(fugue_sqlParser.WITH)
                self.state = 2290
                self.match(fugue_sqlParser.SERDEPROPERTIES)
                self.state = 2291
                self.tablePropertyList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResourceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)


        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_resource

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitResource" ):
                return visitor.visitResource(self)
            else:
                return visitor.visitChildren(self)




    def resource(self):

        localctx = fugue_sqlParser.ResourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_resource)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2294
            self.identifier()
            self.state = 2295
            self.match(fugue_sqlParser.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DmlStatementNoWithContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_dmlStatementNoWith

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class DeleteFromTableContext(DmlStatementNoWithContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.DmlStatementNoWithContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DELETE(self):
            return self.getToken(fugue_sqlParser.DELETE, 0)
        def FROM(self):
            return self.getToken(fugue_sqlParser.FROM, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def tableAlias(self):
            return self.getTypedRuleContext(fugue_sqlParser.TableAliasContext,0)

        def whereClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.WhereClauseContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeleteFromTable" ):
                return visitor.visitDeleteFromTable(self)
            else:
                return visitor.visitChildren(self)


    class SingleInsertQueryContext(DmlStatementNoWithContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.DmlStatementNoWithContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def insertInto(self):
            return self.getTypedRuleContext(fugue_sqlParser.InsertIntoContext,0)

        def queryTerm(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryTermContext,0)

        def queryOrganization(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryOrganizationContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleInsertQuery" ):
                return visitor.visitSingleInsertQuery(self)
            else:
                return visitor.visitChildren(self)


    class MultiInsertQueryContext(DmlStatementNoWithContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.DmlStatementNoWithContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def fromClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.FromClauseContext,0)

        def multiInsertQueryBody(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.MultiInsertQueryBodyContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.MultiInsertQueryBodyContext,i)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiInsertQuery" ):
                return visitor.visitMultiInsertQuery(self)
            else:
                return visitor.visitChildren(self)


    class UpdateTableContext(DmlStatementNoWithContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.DmlStatementNoWithContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def UPDATE(self):
            return self.getToken(fugue_sqlParser.UPDATE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def tableAlias(self):
            return self.getTypedRuleContext(fugue_sqlParser.TableAliasContext,0)

        def setClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.SetClauseContext,0)

        def whereClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.WhereClauseContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUpdateTable" ):
                return visitor.visitUpdateTable(self)
            else:
                return visitor.visitChildren(self)


    class MergeIntoTableContext(DmlStatementNoWithContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.DmlStatementNoWithContext
            super().__init__(parser)
            self.target = None # MultipartIdentifierContext
            self.targetAlias = None # TableAliasContext
            self.source = None # MultipartIdentifierContext
            self.sourceQuery = None # QueryContext
            self.sourceAlias = None # TableAliasContext
            self.mergeCondition = None # BooleanExpressionContext
            self.copyFrom(ctx)

        def MERGE(self):
            return self.getToken(fugue_sqlParser.MERGE, 0)
        def INTO(self):
            return self.getToken(fugue_sqlParser.INTO, 0)
        def USING(self):
            return self.getToken(fugue_sqlParser.USING, 0)
        def ON(self):
            return self.getToken(fugue_sqlParser.ON, 0)
        def multipartIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.MultipartIdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,i)

        def tableAlias(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.TableAliasContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.TableAliasContext,i)

        def booleanExpression(self):
            return self.getTypedRuleContext(fugue_sqlParser.BooleanExpressionContext,0)

        def query(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryContext,0)

        def matchedClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.MatchedClauseContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.MatchedClauseContext,i)

        def notMatchedClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.NotMatchedClauseContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.NotMatchedClauseContext,i)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMergeIntoTable" ):
                return visitor.visitMergeIntoTable(self)
            else:
                return visitor.visitChildren(self)



    def dmlStatementNoWith(self):

        localctx = fugue_sqlParser.DmlStatementNoWithContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_dmlStatementNoWith)
        self._la = 0 # Token type
        try:
            self.state = 2348
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [160]:
                localctx = fugue_sqlParser.SingleInsertQueryContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2297
                self.insertInto()
                self.state = 2298
                self.queryTerm(0)
                self.state = 2299
                self.queryOrganization()
                pass
            elif token in [141]:
                localctx = fugue_sqlParser.MultiInsertQueryContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2301
                self.fromClause()
                self.state = 2303 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2302
                    self.multiInsertQueryBody()
                    self.state = 2305 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==160):
                        break

                pass
            elif token in [108]:
                localctx = fugue_sqlParser.DeleteFromTableContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2307
                self.match(fugue_sqlParser.DELETE)
                self.state = 2308
                self.match(fugue_sqlParser.FROM)
                self.state = 2309
                self.multipartIdentifier()
                self.state = 2310
                self.tableAlias()
                self.state = 2312
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==301:
                    self.state = 2311
                    self.whereClause()


                pass
            elif token in [293]:
                localctx = fugue_sqlParser.UpdateTableContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2314
                self.match(fugue_sqlParser.UPDATE)
                self.state = 2315
                self.multipartIdentifier()
                self.state = 2316
                self.tableAlias()
                self.state = 2317
                self.setClause()
                self.state = 2319
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==301:
                    self.state = 2318
                    self.whereClause()


                pass
            elif token in [186]:
                localctx = fugue_sqlParser.MergeIntoTableContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2321
                self.match(fugue_sqlParser.MERGE)
                self.state = 2322
                self.match(fugue_sqlParser.INTO)
                self.state = 2323
                localctx.target = self.multipartIdentifier()
                self.state = 2324
                localctx.targetAlias = self.tableAlias()
                self.state = 2325
                self.match(fugue_sqlParser.USING)
                self.state = 2331
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 319, 334, 335]:
                    self.state = 2326
                    localctx.source = self.multipartIdentifier()
                    pass
                elif token in [3]:
                    self.state = 2327
                    self.match(fugue_sqlParser.T__2)
                    self.state = 2328
                    localctx.sourceQuery = self.query()
                    self.state = 2329
                    self.match(fugue_sqlParser.T__3)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2333
                localctx.sourceAlias = self.tableAlias()
                self.state = 2334
                self.match(fugue_sqlParser.ON)
                self.state = 2335
                localctx.mergeCondition = self.booleanExpression(0)
                self.state = 2339
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,288,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2336
                        self.matchedClause() 
                    self.state = 2341
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,288,self._ctx)

                self.state = 2345
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==300:
                    self.state = 2342
                    self.notMatchedClause()
                    self.state = 2347
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryOrganizationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._sortItem = None # SortItemContext
            self.order = list() # of SortItemContexts
            self._expression = None # ExpressionContext
            self.clusterBy = list() # of ExpressionContexts
            self.distributeBy = list() # of ExpressionContexts
            self.sort = list() # of SortItemContexts
            self.limit = None # ExpressionContext

        def ORDER(self):
            return self.getToken(fugue_sqlParser.ORDER, 0)

        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.BY)
            else:
                return self.getToken(fugue_sqlParser.BY, i)

        def CLUSTER(self):
            return self.getToken(fugue_sqlParser.CLUSTER, 0)

        def DISTRIBUTE(self):
            return self.getToken(fugue_sqlParser.DISTRIBUTE, 0)

        def SORT(self):
            return self.getToken(fugue_sqlParser.SORT, 0)

        def windowClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.WindowClauseContext,0)


        def LIMIT(self):
            return self.getToken(fugue_sqlParser.LIMIT, 0)

        def sortItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.SortItemContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.SortItemContext,i)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,i)


        def ALL(self):
            return self.getToken(fugue_sqlParser.ALL, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_queryOrganization

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQueryOrganization" ):
                return visitor.visitQueryOrganization(self)
            else:
                return visitor.visitChildren(self)




    def queryOrganization(self):

        localctx = fugue_sqlParser.QueryOrganizationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_queryOrganization)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2360
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,292,self._ctx)
            if la_ == 1:
                self.state = 2350
                self.match(fugue_sqlParser.ORDER)
                self.state = 2351
                self.match(fugue_sqlParser.BY)
                self.state = 2352
                localctx._sortItem = self.sortItem()
                localctx.order.append(localctx._sortItem)
                self.state = 2357
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,291,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2353
                        self.match(fugue_sqlParser.T__0)
                        self.state = 2354
                        localctx._sortItem = self.sortItem()
                        localctx.order.append(localctx._sortItem) 
                    self.state = 2359
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,291,self._ctx)



            self.state = 2372
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,294,self._ctx)
            if la_ == 1:
                self.state = 2362
                self.match(fugue_sqlParser.CLUSTER)
                self.state = 2363
                self.match(fugue_sqlParser.BY)
                self.state = 2364
                localctx._expression = self.expression()
                localctx.clusterBy.append(localctx._expression)
                self.state = 2369
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,293,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2365
                        self.match(fugue_sqlParser.T__0)
                        self.state = 2366
                        localctx._expression = self.expression()
                        localctx.clusterBy.append(localctx._expression) 
                    self.state = 2371
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,293,self._ctx)



            self.state = 2384
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,296,self._ctx)
            if la_ == 1:
                self.state = 2374
                self.match(fugue_sqlParser.DISTRIBUTE)
                self.state = 2375
                self.match(fugue_sqlParser.BY)
                self.state = 2376
                localctx._expression = self.expression()
                localctx.distributeBy.append(localctx._expression)
                self.state = 2381
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,295,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2377
                        self.match(fugue_sqlParser.T__0)
                        self.state = 2378
                        localctx._expression = self.expression()
                        localctx.distributeBy.append(localctx._expression) 
                    self.state = 2383
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,295,self._ctx)



            self.state = 2396
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,298,self._ctx)
            if la_ == 1:
                self.state = 2386
                self.match(fugue_sqlParser.SORT)
                self.state = 2387
                self.match(fugue_sqlParser.BY)
                self.state = 2388
                localctx._sortItem = self.sortItem()
                localctx.sort.append(localctx._sortItem)
                self.state = 2393
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,297,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2389
                        self.match(fugue_sqlParser.T__0)
                        self.state = 2390
                        localctx._sortItem = self.sortItem()
                        localctx.sort.append(localctx._sortItem) 
                    self.state = 2395
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,297,self._ctx)



            self.state = 2399
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,299,self._ctx)
            if la_ == 1:
                self.state = 2398
                self.windowClause()


            self.state = 2406
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,301,self._ctx)
            if la_ == 1:
                self.state = 2401
                self.match(fugue_sqlParser.LIMIT)
                self.state = 2404
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,300,self._ctx)
                if la_ == 1:
                    self.state = 2402
                    self.match(fugue_sqlParser.ALL)
                    pass

                elif la_ == 2:
                    self.state = 2403
                    localctx.limit = self.expression()
                    pass




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiInsertQueryBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def insertInto(self):
            return self.getTypedRuleContext(fugue_sqlParser.InsertIntoContext,0)


        def fromStatementBody(self):
            return self.getTypedRuleContext(fugue_sqlParser.FromStatementBodyContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_multiInsertQueryBody

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiInsertQueryBody" ):
                return visitor.visitMultiInsertQueryBody(self)
            else:
                return visitor.visitChildren(self)




    def multiInsertQueryBody(self):

        localctx = fugue_sqlParser.MultiInsertQueryBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_multiInsertQueryBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2408
            self.insertInto()
            self.state = 2409
            self.fromStatementBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryTermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_queryTerm

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class QueryTermDefaultContext(QueryTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.QueryTermContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def queryPrimary(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryPrimaryContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQueryTermDefault" ):
                return visitor.visitQueryTermDefault(self)
            else:
                return visitor.visitChildren(self)


    class FugueTermContext(QueryTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.QueryTermContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def fugueNestableTaskCollectionNoSelect(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueNestableTaskCollectionNoSelectContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueTerm" ):
                return visitor.visitFugueTerm(self)
            else:
                return visitor.visitChildren(self)


    class SetOperationContext(QueryTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.QueryTermContext
            super().__init__(parser)
            self.left = None # QueryTermContext
            self.theOperator = None # Token
            self.right = None # QueryTermContext
            self.copyFrom(ctx)

        def queryTerm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.QueryTermContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.QueryTermContext,i)

        def INTERSECT(self):
            return self.getToken(fugue_sqlParser.INTERSECT, 0)
        def UNION(self):
            return self.getToken(fugue_sqlParser.UNION, 0)
        def EXCEPT(self):
            return self.getToken(fugue_sqlParser.EXCEPT, 0)
        def SETMINUS(self):
            return self.getToken(fugue_sqlParser.SETMINUS, 0)
        def setQuantifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.SetQuantifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetOperation" ):
                return visitor.visitSetOperation(self)
            else:
                return visitor.visitChildren(self)



    def queryTerm(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = fugue_sqlParser.QueryTermContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 230
        self.enterRecursionRule(localctx, 230, self.RULE_queryTerm, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2414
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [141, 184, 228, 247, 268, 297]:
                localctx = fugue_sqlParser.QueryTermDefaultContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 2412
                self.queryPrimary()
                pass
            elif token in [17, 18, 26, 32, 35, 47, 56, 94, 117, 177, 231, 280]:
                localctx = fugue_sqlParser.FugueTermContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2413
                self.fugueNestableTaskCollectionNoSelect()
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 2436
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,307,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 2434
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,306,self._ctx)
                    if la_ == 1:
                        localctx = fugue_sqlParser.SetOperationContext(self, fugue_sqlParser.QueryTermContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_queryTerm)
                        self.state = 2416
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 2417
                        localctx.theOperator = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==122 or _la==161 or _la==254 or _la==288):
                            localctx.theOperator = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 2419
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==55 or _la==115:
                            self.state = 2418
                            self.setQuantifier()


                        self.state = 2421
                        localctx.right = self.queryTerm(4)
                        pass

                    elif la_ == 2:
                        localctx = fugue_sqlParser.SetOperationContext(self, fugue_sqlParser.QueryTermContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_queryTerm)
                        self.state = 2422
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 2423
                        localctx.theOperator = self.match(fugue_sqlParser.INTERSECT)
                        self.state = 2425
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==55 or _la==115:
                            self.state = 2424
                            self.setQuantifier()


                        self.state = 2427
                        localctx.right = self.queryTerm(3)
                        pass

                    elif la_ == 3:
                        localctx = fugue_sqlParser.SetOperationContext(self, fugue_sqlParser.QueryTermContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_queryTerm)
                        self.state = 2428
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 2429
                        localctx.theOperator = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==122 or _la==254 or _la==288):
                            localctx.theOperator = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 2431
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==55 or _la==115:
                            self.state = 2430
                            self.setQuantifier()


                        self.state = 2433
                        localctx.right = self.queryTerm(2)
                        pass

             
                self.state = 2438
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,307,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class QueryPrimaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_queryPrimary

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class QueryPrimaryDefaultContext(QueryPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.QueryPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def querySpecification(self):
            return self.getTypedRuleContext(fugue_sqlParser.QuerySpecificationContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQueryPrimaryDefault" ):
                return visitor.visitQueryPrimaryDefault(self)
            else:
                return visitor.visitChildren(self)


    class InlineTableDefault1Context(QueryPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.QueryPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def inlineTable(self):
            return self.getTypedRuleContext(fugue_sqlParser.InlineTableContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInlineTableDefault1" ):
                return visitor.visitInlineTableDefault1(self)
            else:
                return visitor.visitChildren(self)


    class FromStmtContext(QueryPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.QueryPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def fromStatement(self):
            return self.getTypedRuleContext(fugue_sqlParser.FromStatementContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFromStmt" ):
                return visitor.visitFromStmt(self)
            else:
                return visitor.visitChildren(self)


    class TableContext(QueryPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.QueryPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable" ):
                return visitor.visitTable(self)
            else:
                return visitor.visitChildren(self)



    def queryPrimary(self):

        localctx = fugue_sqlParser.QueryPrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_queryPrimary)
        try:
            self.state = 2444
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [184, 228, 247]:
                localctx = fugue_sqlParser.QueryPrimaryDefaultContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2439
                self.querySpecification()
                pass
            elif token in [141]:
                localctx = fugue_sqlParser.FromStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2440
                self.fromStatement()
                pass
            elif token in [268]:
                localctx = fugue_sqlParser.TableContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2441
                self.match(fugue_sqlParser.TABLE)
                self.state = 2442
                self.multipartIdentifier()
                pass
            elif token in [297]:
                localctx = fugue_sqlParser.InlineTableDefault1Context(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2443
                self.inlineTable()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SortItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ordering = None # Token
            self.nullOrder = None # Token

        def expression(self):
            return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,0)


        def THENULLS(self):
            return self.getToken(fugue_sqlParser.THENULLS, 0)

        def ASC(self):
            return self.getToken(fugue_sqlParser.ASC, 0)

        def DESC(self):
            return self.getToken(fugue_sqlParser.DESC, 0)

        def LAST(self):
            return self.getToken(fugue_sqlParser.LAST, 0)

        def FIRST(self):
            return self.getToken(fugue_sqlParser.FIRST, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_sortItem

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSortItem" ):
                return visitor.visitSortItem(self)
            else:
                return visitor.visitChildren(self)




    def sortItem(self):

        localctx = fugue_sqlParser.SortItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_sortItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2446
            self.expression()
            self.state = 2448
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,309,self._ctx)
            if la_ == 1:
                self.state = 2447
                localctx.ordering = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==64 or _la==110):
                    localctx.ordering = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2452
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,310,self._ctx)
            if la_ == 1:
                self.state = 2450
                self.match(fugue_sqlParser.THENULLS)
                self.state = 2451
                localctx.nullOrder = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==135 or _la==168):
                    localctx.nullOrder = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FromStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fromClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.FromClauseContext,0)


        def fromStatementBody(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.FromStatementBodyContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.FromStatementBodyContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fromStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFromStatement" ):
                return visitor.visitFromStatement(self)
            else:
                return visitor.visitChildren(self)




    def fromStatement(self):

        localctx = fugue_sqlParser.FromStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_fromStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2454
            self.fromClause()
            self.state = 2456 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2455
                    self.fromStatementBody()

                else:
                    raise NoViableAltException(self)
                self.state = 2458 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,311,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FromStatementBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def transformClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.TransformClauseContext,0)


        def queryOrganization(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryOrganizationContext,0)


        def whereClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.WhereClauseContext,0)


        def selectClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.SelectClauseContext,0)


        def lateralView(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.LateralViewContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.LateralViewContext,i)


        def aggregationClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.AggregationClauseContext,0)


        def havingClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.HavingClauseContext,0)


        def windowClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.WindowClauseContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fromStatementBody

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFromStatementBody" ):
                return visitor.visitFromStatementBody(self)
            else:
                return visitor.visitChildren(self)




    def fromStatementBody(self):

        localctx = fugue_sqlParser.FromStatementBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_fromStatementBody)
        try:
            self.state = 2487
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,318,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2460
                self.transformClause()
                self.state = 2462
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,312,self._ctx)
                if la_ == 1:
                    self.state = 2461
                    self.whereClause()


                self.state = 2464
                self.queryOrganization()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2466
                self.selectClause()
                self.state = 2470
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,313,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2467
                        self.lateralView() 
                    self.state = 2472
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,313,self._ctx)

                self.state = 2474
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,314,self._ctx)
                if la_ == 1:
                    self.state = 2473
                    self.whereClause()


                self.state = 2477
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,315,self._ctx)
                if la_ == 1:
                    self.state = 2476
                    self.aggregationClause()


                self.state = 2480
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,316,self._ctx)
                if la_ == 1:
                    self.state = 2479
                    self.havingClause()


                self.state = 2483
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,317,self._ctx)
                if la_ == 1:
                    self.state = 2482
                    self.windowClause()


                self.state = 2485
                self.queryOrganization()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuerySpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_querySpecification

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RegularQuerySpecificationContext(QuerySpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.QuerySpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def selectClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.SelectClauseContext,0)

        def optionalFromClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.OptionalFromClauseContext,0)

        def lateralView(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.LateralViewContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.LateralViewContext,i)

        def whereClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.WhereClauseContext,0)

        def aggregationClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.AggregationClauseContext,0)

        def havingClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.HavingClauseContext,0)

        def windowClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.WindowClauseContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRegularQuerySpecification" ):
                return visitor.visitRegularQuerySpecification(self)
            else:
                return visitor.visitChildren(self)


    class TransformQuerySpecificationContext(QuerySpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.QuerySpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def transformClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.TransformClauseContext,0)

        def optionalFromClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.OptionalFromClauseContext,0)

        def whereClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.WhereClauseContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTransformQuerySpecification" ):
                return visitor.visitTransformQuerySpecification(self)
            else:
                return visitor.visitChildren(self)



    def querySpecification(self):

        localctx = fugue_sqlParser.QuerySpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_querySpecification)
        try:
            self.state = 2514
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,325,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.TransformQuerySpecificationContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2489
                self.transformClause()
                self.state = 2490
                self.optionalFromClause()
                self.state = 2492
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,319,self._ctx)
                if la_ == 1:
                    self.state = 2491
                    self.whereClause()


                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.RegularQuerySpecificationContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2494
                self.selectClause()
                self.state = 2495
                self.optionalFromClause()
                self.state = 2499
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,320,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2496
                        self.lateralView() 
                    self.state = 2501
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,320,self._ctx)

                self.state = 2503
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,321,self._ctx)
                if la_ == 1:
                    self.state = 2502
                    self.whereClause()


                self.state = 2506
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,322,self._ctx)
                if la_ == 1:
                    self.state = 2505
                    self.aggregationClause()


                self.state = 2509
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,323,self._ctx)
                if la_ == 1:
                    self.state = 2508
                    self.havingClause()


                self.state = 2512
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,324,self._ctx)
                if la_ == 1:
                    self.state = 2511
                    self.windowClause()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptionalFromClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fromClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.FromClauseContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_optionalFromClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOptionalFromClause" ):
                return visitor.visitOptionalFromClause(self)
            else:
                return visitor.visitChildren(self)




    def optionalFromClause(self):

        localctx = fugue_sqlParser.OptionalFromClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_optionalFromClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2517
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,326,self._ctx)
            if la_ == 1:
                self.state = 2516
                self.fromClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransformClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.kind = None # Token
            self.inRowFormat = None # RowFormatContext
            self.recordWriter = None # Token
            self.script = None # Token
            self.outRowFormat = None # RowFormatContext
            self.recordReader = None # Token

        def USING(self):
            return self.getToken(fugue_sqlParser.USING, 0)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.STRING)
            else:
                return self.getToken(fugue_sqlParser.STRING, i)

        def SELECT(self):
            return self.getToken(fugue_sqlParser.SELECT, 0)

        def namedExpressionSeq(self):
            return self.getTypedRuleContext(fugue_sqlParser.NamedExpressionSeqContext,0)


        def TRANSFORM(self):
            return self.getToken(fugue_sqlParser.TRANSFORM, 0)

        def MAP(self):
            return self.getToken(fugue_sqlParser.MAP, 0)

        def REDUCE(self):
            return self.getToken(fugue_sqlParser.REDUCE, 0)

        def RECORDWRITER(self):
            return self.getToken(fugue_sqlParser.RECORDWRITER, 0)

        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)

        def RECORDREADER(self):
            return self.getToken(fugue_sqlParser.RECORDREADER, 0)

        def rowFormat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.RowFormatContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.RowFormatContext,i)


        def identifierSeq(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierSeqContext,0)


        def colTypeList(self):
            return self.getTypedRuleContext(fugue_sqlParser.ColTypeListContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_transformClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTransformClause" ):
                return visitor.visitTransformClause(self)
            else:
                return visitor.visitChildren(self)




    def transformClause(self):

        localctx = fugue_sqlParser.TransformClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_transformClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2529
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [247]:
                self.state = 2519
                self.match(fugue_sqlParser.SELECT)
                self.state = 2520
                localctx.kind = self.match(fugue_sqlParser.TRANSFORM)
                self.state = 2521
                self.match(fugue_sqlParser.T__2)
                self.state = 2522
                self.namedExpressionSeq()
                self.state = 2523
                self.match(fugue_sqlParser.T__3)
                pass
            elif token in [184]:
                self.state = 2525
                localctx.kind = self.match(fugue_sqlParser.MAP)
                self.state = 2526
                self.namedExpressionSeq()
                pass
            elif token in [228]:
                self.state = 2527
                localctx.kind = self.match(fugue_sqlParser.REDUCE)
                self.state = 2528
                self.namedExpressionSeq()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2532
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==243:
                self.state = 2531
                localctx.inRowFormat = self.rowFormat()


            self.state = 2536
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==226:
                self.state = 2534
                self.match(fugue_sqlParser.RECORDWRITER)
                self.state = 2535
                localctx.recordWriter = self.match(fugue_sqlParser.STRING)


            self.state = 2538
            self.match(fugue_sqlParser.USING)
            self.state = 2539
            localctx.script = self.match(fugue_sqlParser.STRING)
            self.state = 2552
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,332,self._ctx)
            if la_ == 1:
                self.state = 2540
                self.match(fugue_sqlParser.AS)
                self.state = 2550
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,331,self._ctx)
                if la_ == 1:
                    self.state = 2541
                    self.identifierSeq()
                    pass

                elif la_ == 2:
                    self.state = 2542
                    self.colTypeList()
                    pass

                elif la_ == 3:
                    self.state = 2543
                    self.match(fugue_sqlParser.T__2)
                    self.state = 2546
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,330,self._ctx)
                    if la_ == 1:
                        self.state = 2544
                        self.identifierSeq()
                        pass

                    elif la_ == 2:
                        self.state = 2545
                        self.colTypeList()
                        pass


                    self.state = 2548
                    self.match(fugue_sqlParser.T__3)
                    pass




            self.state = 2555
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,333,self._ctx)
            if la_ == 1:
                self.state = 2554
                localctx.outRowFormat = self.rowFormat()


            self.state = 2559
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,334,self._ctx)
            if la_ == 1:
                self.state = 2557
                self.match(fugue_sqlParser.RECORDREADER)
                self.state = 2558
                localctx.recordReader = self.match(fugue_sqlParser.STRING)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._hint = None # HintContext
            self.hints = list() # of HintContexts

        def SELECT(self):
            return self.getToken(fugue_sqlParser.SELECT, 0)

        def namedExpressionSeq(self):
            return self.getTypedRuleContext(fugue_sqlParser.NamedExpressionSeqContext,0)


        def setQuantifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.SetQuantifierContext,0)


        def hint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.HintContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.HintContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_selectClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectClause" ):
                return visitor.visitSelectClause(self)
            else:
                return visitor.visitChildren(self)




    def selectClause(self):

        localctx = fugue_sqlParser.SelectClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_selectClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2561
            self.match(fugue_sqlParser.SELECT)
            self.state = 2565
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==14:
                self.state = 2562
                localctx._hint = self.hint()
                localctx.hints.append(localctx._hint)
                self.state = 2567
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2569
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,336,self._ctx)
            if la_ == 1:
                self.state = 2568
                self.setQuantifier()


            self.state = 2571
            self.namedExpressionSeq()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(fugue_sqlParser.SET, 0)

        def assignmentList(self):
            return self.getTypedRuleContext(fugue_sqlParser.AssignmentListContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_setClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetClause" ):
                return visitor.visitSetClause(self)
            else:
                return visitor.visitChildren(self)




    def setClause(self):

        localctx = fugue_sqlParser.SetClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_setClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2573
            self.match(fugue_sqlParser.SET)
            self.state = 2574
            self.assignmentList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatchedClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.matchedCond = None # BooleanExpressionContext

        def WHEN(self):
            return self.getToken(fugue_sqlParser.WHEN, 0)

        def MATCHED(self):
            return self.getToken(fugue_sqlParser.MATCHED, 0)

        def THEN(self):
            return self.getToken(fugue_sqlParser.THEN, 0)

        def matchedAction(self):
            return self.getTypedRuleContext(fugue_sqlParser.MatchedActionContext,0)


        def AND(self):
            return self.getToken(fugue_sqlParser.AND, 0)

        def booleanExpression(self):
            return self.getTypedRuleContext(fugue_sqlParser.BooleanExpressionContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_matchedClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMatchedClause" ):
                return visitor.visitMatchedClause(self)
            else:
                return visitor.visitChildren(self)




    def matchedClause(self):

        localctx = fugue_sqlParser.MatchedClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_matchedClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2576
            self.match(fugue_sqlParser.WHEN)
            self.state = 2577
            self.match(fugue_sqlParser.MATCHED)
            self.state = 2580
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==58:
                self.state = 2578
                self.match(fugue_sqlParser.AND)
                self.state = 2579
                localctx.matchedCond = self.booleanExpression(0)


            self.state = 2582
            self.match(fugue_sqlParser.THEN)
            self.state = 2583
            self.matchedAction()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NotMatchedClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.notMatchedCond = None # BooleanExpressionContext

        def WHEN(self):
            return self.getToken(fugue_sqlParser.WHEN, 0)

        def NOT(self):
            return self.getToken(fugue_sqlParser.NOT, 0)

        def MATCHED(self):
            return self.getToken(fugue_sqlParser.MATCHED, 0)

        def THEN(self):
            return self.getToken(fugue_sqlParser.THEN, 0)

        def notMatchedAction(self):
            return self.getTypedRuleContext(fugue_sqlParser.NotMatchedActionContext,0)


        def AND(self):
            return self.getToken(fugue_sqlParser.AND, 0)

        def booleanExpression(self):
            return self.getTypedRuleContext(fugue_sqlParser.BooleanExpressionContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_notMatchedClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNotMatchedClause" ):
                return visitor.visitNotMatchedClause(self)
            else:
                return visitor.visitChildren(self)




    def notMatchedClause(self):

        localctx = fugue_sqlParser.NotMatchedClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_notMatchedClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2585
            self.match(fugue_sqlParser.WHEN)
            self.state = 2586
            self.match(fugue_sqlParser.NOT)
            self.state = 2587
            self.match(fugue_sqlParser.MATCHED)
            self.state = 2590
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==58:
                self.state = 2588
                self.match(fugue_sqlParser.AND)
                self.state = 2589
                localctx.notMatchedCond = self.booleanExpression(0)


            self.state = 2592
            self.match(fugue_sqlParser.THEN)
            self.state = 2593
            self.notMatchedAction()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatchedActionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE(self):
            return self.getToken(fugue_sqlParser.DELETE, 0)

        def UPDATE(self):
            return self.getToken(fugue_sqlParser.UPDATE, 0)

        def SET(self):
            return self.getToken(fugue_sqlParser.SET, 0)

        def ASTERISK(self):
            return self.getToken(fugue_sqlParser.ASTERISK, 0)

        def assignmentList(self):
            return self.getTypedRuleContext(fugue_sqlParser.AssignmentListContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_matchedAction

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMatchedAction" ):
                return visitor.visitMatchedAction(self)
            else:
                return visitor.visitChildren(self)




    def matchedAction(self):

        localctx = fugue_sqlParser.MatchedActionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_matchedAction)
        try:
            self.state = 2602
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,339,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2595
                self.match(fugue_sqlParser.DELETE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2596
                self.match(fugue_sqlParser.UPDATE)
                self.state = 2597
                self.match(fugue_sqlParser.SET)
                self.state = 2598
                self.match(fugue_sqlParser.ASTERISK)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2599
                self.match(fugue_sqlParser.UPDATE)
                self.state = 2600
                self.match(fugue_sqlParser.SET)
                self.state = 2601
                self.assignmentList()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NotMatchedActionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.columns = None # MultipartIdentifierListContext

        def INSERT(self):
            return self.getToken(fugue_sqlParser.INSERT, 0)

        def ASTERISK(self):
            return self.getToken(fugue_sqlParser.ASTERISK, 0)

        def VALUES(self):
            return self.getToken(fugue_sqlParser.VALUES, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,i)


        def multipartIdentifierList(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierListContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_notMatchedAction

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNotMatchedAction" ):
                return visitor.visitNotMatchedAction(self)
            else:
                return visitor.visitChildren(self)




    def notMatchedAction(self):

        localctx = fugue_sqlParser.NotMatchedActionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_notMatchedAction)
        self._la = 0 # Token type
        try:
            self.state = 2622
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,341,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2604
                self.match(fugue_sqlParser.INSERT)
                self.state = 2605
                self.match(fugue_sqlParser.ASTERISK)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2606
                self.match(fugue_sqlParser.INSERT)
                self.state = 2607
                self.match(fugue_sqlParser.T__2)
                self.state = 2608
                localctx.columns = self.multipartIdentifierList()
                self.state = 2609
                self.match(fugue_sqlParser.T__3)
                self.state = 2610
                self.match(fugue_sqlParser.VALUES)
                self.state = 2611
                self.match(fugue_sqlParser.T__2)
                self.state = 2612
                self.expression()
                self.state = 2617
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1:
                    self.state = 2613
                    self.match(fugue_sqlParser.T__0)
                    self.state = 2614
                    self.expression()
                    self.state = 2619
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2620
                self.match(fugue_sqlParser.T__3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.AssignmentContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.AssignmentContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_assignmentList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignmentList" ):
                return visitor.visitAssignmentList(self)
            else:
                return visitor.visitChildren(self)




    def assignmentList(self):

        localctx = fugue_sqlParser.AssignmentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_assignmentList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2624
            self.assignment()
            self.state = 2629
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1:
                self.state = 2625
                self.match(fugue_sqlParser.T__0)
                self.state = 2626
                self.assignment()
                self.state = 2631
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.key = None # MultipartIdentifierContext
            self.value = None # ExpressionContext

        def EQUAL(self):
            return self.getToken(fugue_sqlParser.EQUAL, 0)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)


        def expression(self):
            return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_assignment

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignment" ):
                return visitor.visitAssignment(self)
            else:
                return visitor.visitChildren(self)




    def assignment(self):

        localctx = fugue_sqlParser.AssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_assignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2632
            localctx.key = self.multipartIdentifier()
            self.state = 2633
            self.match(fugue_sqlParser.EQUAL)
            self.state = 2634
            localctx.value = self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhereClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(fugue_sqlParser.WHERE, 0)

        def booleanExpression(self):
            return self.getTypedRuleContext(fugue_sqlParser.BooleanExpressionContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_whereClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhereClause" ):
                return visitor.visitWhereClause(self)
            else:
                return visitor.visitChildren(self)




    def whereClause(self):

        localctx = fugue_sqlParser.WhereClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_whereClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2636
            self.match(fugue_sqlParser.WHERE)
            self.state = 2637
            self.booleanExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HavingClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HAVING(self):
            return self.getToken(fugue_sqlParser.HAVING, 0)

        def booleanExpression(self):
            return self.getTypedRuleContext(fugue_sqlParser.BooleanExpressionContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_havingClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHavingClause" ):
                return visitor.visitHavingClause(self)
            else:
                return visitor.visitChildren(self)




    def havingClause(self):

        localctx = fugue_sqlParser.HavingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_havingClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2639
            self.match(fugue_sqlParser.HAVING)
            self.state = 2640
            self.booleanExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._hintStatement = None # HintStatementContext
            self.hintStatements = list() # of HintStatementContexts

        def hintStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.HintStatementContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.HintStatementContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_hint

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHint" ):
                return visitor.visitHint(self)
            else:
                return visitor.visitChildren(self)




    def hint(self):

        localctx = fugue_sqlParser.HintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_hint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2642
            self.match(fugue_sqlParser.T__13)
            self.state = 2643
            localctx._hintStatement = self.hintStatement()
            localctx.hintStatements.append(localctx._hintStatement)
            self.state = 2650
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((_la) & ~0x3f) == 0 and ((1 << _la) & -9007199254740990) != 0 or (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1) != 0 or (((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -1) != 0 or (((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & -1) != 0 or (((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & -9222809086901354497) != 0 or _la==334 or _la==335:
                self.state = 2645
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 2644
                    self.match(fugue_sqlParser.T__0)


                self.state = 2647
                localctx._hintStatement = self.hintStatement()
                localctx.hintStatements.append(localctx._hintStatement)
                self.state = 2652
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2653
            self.match(fugue_sqlParser.T__14)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HintStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.hintName = None # IdentifierContext
            self._primaryExpression = None # PrimaryExpressionContext
            self.parameters = list() # of PrimaryExpressionContexts

        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)


        def primaryExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.PrimaryExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.PrimaryExpressionContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_hintStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHintStatement" ):
                return visitor.visitHintStatement(self)
            else:
                return visitor.visitChildren(self)




    def hintStatement(self):

        localctx = fugue_sqlParser.HintStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_hintStatement)
        self._la = 0 # Token type
        try:
            self.state = 2668
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,346,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2655
                localctx.hintName = self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2656
                localctx.hintName = self.identifier()
                self.state = 2657
                self.match(fugue_sqlParser.T__2)
                self.state = 2658
                localctx._primaryExpression = self.primaryExpression(0)
                localctx.parameters.append(localctx._primaryExpression)
                self.state = 2663
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1:
                    self.state = 2659
                    self.match(fugue_sqlParser.T__0)
                    self.state = 2660
                    localctx._primaryExpression = self.primaryExpression(0)
                    localctx.parameters.append(localctx._primaryExpression)
                    self.state = 2665
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2666
                self.match(fugue_sqlParser.T__3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FromClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(fugue_sqlParser.FROM, 0)

        def relation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.RelationContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.RelationContext,i)


        def lateralView(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.LateralViewContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.LateralViewContext,i)


        def pivotClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.PivotClauseContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fromClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFromClause" ):
                return visitor.visitFromClause(self)
            else:
                return visitor.visitChildren(self)




    def fromClause(self):

        localctx = fugue_sqlParser.FromClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_fromClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2670
            self.match(fugue_sqlParser.FROM)
            self.state = 2671
            self.relation()
            self.state = 2676
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,347,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2672
                    self.match(fugue_sqlParser.T__0)
                    self.state = 2673
                    self.relation() 
                self.state = 2678
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,347,self._ctx)

            self.state = 2682
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,348,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2679
                    self.lateralView() 
                self.state = 2684
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,348,self._ctx)

            self.state = 2686
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,349,self._ctx)
            if la_ == 1:
                self.state = 2685
                self.pivotClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AggregationClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._expression = None # ExpressionContext
            self.groupingExpressions = list() # of ExpressionContexts
            self.kind = None # Token

        def GROUP(self):
            return self.getToken(fugue_sqlParser.GROUP, 0)

        def BY(self):
            return self.getToken(fugue_sqlParser.BY, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,i)


        def WITH(self):
            return self.getToken(fugue_sqlParser.WITH, 0)

        def SETS(self):
            return self.getToken(fugue_sqlParser.SETS, 0)

        def groupingSet(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.GroupingSetContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.GroupingSetContext,i)


        def ROLLUP(self):
            return self.getToken(fugue_sqlParser.ROLLUP, 0)

        def CUBE(self):
            return self.getToken(fugue_sqlParser.CUBE, 0)

        def GROUPING(self):
            return self.getToken(fugue_sqlParser.GROUPING, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_aggregationClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAggregationClause" ):
                return visitor.visitAggregationClause(self)
            else:
                return visitor.visitChildren(self)




    def aggregationClause(self):

        localctx = fugue_sqlParser.AggregationClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_aggregationClause)
        self._la = 0 # Token type
        try:
            self.state = 2732
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,354,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2688
                self.match(fugue_sqlParser.GROUP)
                self.state = 2689
                self.match(fugue_sqlParser.BY)
                self.state = 2690
                localctx._expression = self.expression()
                localctx.groupingExpressions.append(localctx._expression)
                self.state = 2695
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,350,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2691
                        self.match(fugue_sqlParser.T__0)
                        self.state = 2692
                        localctx._expression = self.expression()
                        localctx.groupingExpressions.append(localctx._expression) 
                    self.state = 2697
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,350,self._ctx)

                self.state = 2715
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,352,self._ctx)
                if la_ == 1:
                    self.state = 2698
                    self.match(fugue_sqlParser.WITH)
                    self.state = 2699
                    localctx.kind = self.match(fugue_sqlParser.ROLLUP)

                elif la_ == 2:
                    self.state = 2700
                    self.match(fugue_sqlParser.WITH)
                    self.state = 2701
                    localctx.kind = self.match(fugue_sqlParser.CUBE)

                elif la_ == 3:
                    self.state = 2702
                    localctx.kind = self.match(fugue_sqlParser.GROUPING)
                    self.state = 2703
                    self.match(fugue_sqlParser.SETS)
                    self.state = 2704
                    self.match(fugue_sqlParser.T__2)
                    self.state = 2705
                    self.groupingSet()
                    self.state = 2710
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1:
                        self.state = 2706
                        self.match(fugue_sqlParser.T__0)
                        self.state = 2707
                        self.groupingSet()
                        self.state = 2712
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2713
                    self.match(fugue_sqlParser.T__3)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2717
                self.match(fugue_sqlParser.GROUP)
                self.state = 2718
                self.match(fugue_sqlParser.BY)
                self.state = 2719
                localctx.kind = self.match(fugue_sqlParser.GROUPING)
                self.state = 2720
                self.match(fugue_sqlParser.SETS)
                self.state = 2721
                self.match(fugue_sqlParser.T__2)
                self.state = 2722
                self.groupingSet()
                self.state = 2727
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1:
                    self.state = 2723
                    self.match(fugue_sqlParser.T__0)
                    self.state = 2724
                    self.groupingSet()
                    self.state = 2729
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2730
                self.match(fugue_sqlParser.T__3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupingSetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_groupingSet

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroupingSet" ):
                return visitor.visitGroupingSet(self)
            else:
                return visitor.visitChildren(self)




    def groupingSet(self):

        localctx = fugue_sqlParser.GroupingSetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_groupingSet)
        self._la = 0 # Token type
        try:
            self.state = 2747
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,357,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2734
                self.match(fugue_sqlParser.T__2)
                self.state = 2743
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((_la) & ~0x3f) == 0 and ((1 << _la) & -9007199254740984) != 0 or (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1) != 0 or (((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -1) != 0 or (((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & -1) != 0 or (((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & -7205196453839372289) != 0 or (((_la - 320)) & ~0x3f) == 0 and ((1 << (_la - 320)) & 65505) != 0:
                    self.state = 2735
                    self.expression()
                    self.state = 2740
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1:
                        self.state = 2736
                        self.match(fugue_sqlParser.T__0)
                        self.state = 2737
                        self.expression()
                        self.state = 2742
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 2745
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2746
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PivotClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.aggregates = None # NamedExpressionSeqContext
            self._pivotValue = None # PivotValueContext
            self.pivotValues = list() # of PivotValueContexts

        def PIVOT(self):
            return self.getToken(fugue_sqlParser.PIVOT, 0)

        def FOR(self):
            return self.getToken(fugue_sqlParser.FOR, 0)

        def pivotColumn(self):
            return self.getTypedRuleContext(fugue_sqlParser.PivotColumnContext,0)


        def IN(self):
            return self.getToken(fugue_sqlParser.IN, 0)

        def namedExpressionSeq(self):
            return self.getTypedRuleContext(fugue_sqlParser.NamedExpressionSeqContext,0)


        def pivotValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.PivotValueContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.PivotValueContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_pivotClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPivotClause" ):
                return visitor.visitPivotClause(self)
            else:
                return visitor.visitChildren(self)




    def pivotClause(self):

        localctx = fugue_sqlParser.PivotClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_pivotClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2749
            self.match(fugue_sqlParser.PIVOT)
            self.state = 2750
            self.match(fugue_sqlParser.T__2)
            self.state = 2751
            localctx.aggregates = self.namedExpressionSeq()
            self.state = 2752
            self.match(fugue_sqlParser.FOR)
            self.state = 2753
            self.pivotColumn()
            self.state = 2754
            self.match(fugue_sqlParser.IN)
            self.state = 2755
            self.match(fugue_sqlParser.T__2)
            self.state = 2756
            localctx._pivotValue = self.pivotValue()
            localctx.pivotValues.append(localctx._pivotValue)
            self.state = 2761
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1:
                self.state = 2757
                self.match(fugue_sqlParser.T__0)
                self.state = 2758
                localctx._pivotValue = self.pivotValue()
                localctx.pivotValues.append(localctx._pivotValue)
                self.state = 2763
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2764
            self.match(fugue_sqlParser.T__3)
            self.state = 2765
            self.match(fugue_sqlParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PivotColumnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._identifier = None # IdentifierContext
            self.identifiers = list() # of IdentifierContexts

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_pivotColumn

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPivotColumn" ):
                return visitor.visitPivotColumn(self)
            else:
                return visitor.visitChildren(self)




    def pivotColumn(self):

        localctx = fugue_sqlParser.PivotColumnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_pivotColumn)
        self._la = 0 # Token type
        try:
            self.state = 2779
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 319, 334, 335]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2767
                localctx._identifier = self.identifier()
                localctx.identifiers.append(localctx._identifier)
                pass
            elif token in [3]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2768
                self.match(fugue_sqlParser.T__2)
                self.state = 2769
                localctx._identifier = self.identifier()
                localctx.identifiers.append(localctx._identifier)
                self.state = 2774
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1:
                    self.state = 2770
                    self.match(fugue_sqlParser.T__0)
                    self.state = 2771
                    localctx._identifier = self.identifier()
                    localctx.identifiers.append(localctx._identifier)
                    self.state = 2776
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2777
                self.match(fugue_sqlParser.T__3)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PivotValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,0)


        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)


        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_pivotValue

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPivotValue" ):
                return visitor.visitPivotValue(self)
            else:
                return visitor.visitChildren(self)




    def pivotValue(self):

        localctx = fugue_sqlParser.PivotValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_pivotValue)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2781
            self.expression()
            self.state = 2786
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 53)) & ~0x3f) == 0 and ((1 << (_la - 53)) & -1) != 0 or (((_la - 117)) & ~0x3f) == 0 and ((1 << (_la - 117)) & -1) != 0 or (((_la - 181)) & ~0x3f) == 0 and ((1 << (_la - 181)) & -1) != 0 or (((_la - 245)) & ~0x3f) == 0 and ((1 << (_la - 245)) & 1152921504606846975) != 0 or (((_la - 319)) & ~0x3f) == 0 and ((1 << (_la - 319)) & 98305) != 0:
                self.state = 2783
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,361,self._ctx)
                if la_ == 1:
                    self.state = 2782
                    self.match(fugue_sqlParser.AS)


                self.state = 2785
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LateralViewContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.tblName = None # IdentifierContext
            self._identifier = None # IdentifierContext
            self.colName = list() # of IdentifierContexts

        def LATERAL(self):
            return self.getToken(fugue_sqlParser.LATERAL, 0)

        def VIEW(self):
            return self.getToken(fugue_sqlParser.VIEW, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(fugue_sqlParser.QualifiedNameContext,0)


        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,i)


        def OUTER(self):
            return self.getToken(fugue_sqlParser.OUTER, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,i)


        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_lateralView

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLateralView" ):
                return visitor.visitLateralView(self)
            else:
                return visitor.visitChildren(self)




    def lateralView(self):

        localctx = fugue_sqlParser.LateralViewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_lateralView)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2788
            self.match(fugue_sqlParser.LATERAL)
            self.state = 2789
            self.match(fugue_sqlParser.VIEW)
            self.state = 2791
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,363,self._ctx)
            if la_ == 1:
                self.state = 2790
                self.match(fugue_sqlParser.OUTER)


            self.state = 2793
            self.qualifiedName()
            self.state = 2794
            self.match(fugue_sqlParser.T__2)
            self.state = 2803
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & -9007199254740984) != 0 or (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1) != 0 or (((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -1) != 0 or (((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & -1) != 0 or (((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & -7205196453839372289) != 0 or (((_la - 320)) & ~0x3f) == 0 and ((1 << (_la - 320)) & 65505) != 0:
                self.state = 2795
                self.expression()
                self.state = 2800
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1:
                    self.state = 2796
                    self.match(fugue_sqlParser.T__0)
                    self.state = 2797
                    self.expression()
                    self.state = 2802
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2805
            self.match(fugue_sqlParser.T__3)
            self.state = 2806
            localctx.tblName = self.identifier()
            self.state = 2818
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,368,self._ctx)
            if la_ == 1:
                self.state = 2808
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,366,self._ctx)
                if la_ == 1:
                    self.state = 2807
                    self.match(fugue_sqlParser.AS)


                self.state = 2810
                localctx._identifier = self.identifier()
                localctx.colName.append(localctx._identifier)
                self.state = 2815
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,367,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2811
                        self.match(fugue_sqlParser.T__0)
                        self.state = 2812
                        localctx._identifier = self.identifier()
                        localctx.colName.append(localctx._identifier) 
                    self.state = 2817
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,367,self._ctx)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetQuantifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DISTINCT(self):
            return self.getToken(fugue_sqlParser.DISTINCT, 0)

        def ALL(self):
            return self.getToken(fugue_sqlParser.ALL, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_setQuantifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetQuantifier" ):
                return visitor.visitSetQuantifier(self)
            else:
                return visitor.visitChildren(self)




    def setQuantifier(self):

        localctx = fugue_sqlParser.SetQuantifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_setQuantifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2820
            _la = self._input.LA(1)
            if not(_la==55 or _la==115):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relationPrimary(self):
            return self.getTypedRuleContext(fugue_sqlParser.RelationPrimaryContext,0)


        def joinRelation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.JoinRelationContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.JoinRelationContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_relation

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelation" ):
                return visitor.visitRelation(self)
            else:
                return visitor.visitChildren(self)




    def relation(self):

        localctx = fugue_sqlParser.RelationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_relation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2822
            self.relationPrimary()
            self.state = 2826
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,369,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2823
                    self.joinRelation() 
                self.state = 2828
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,369,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinRelationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.right = None # RelationPrimaryContext

        def joinType(self):
            return self.getTypedRuleContext(fugue_sqlParser.JoinTypeContext,0)


        def JOIN(self):
            return self.getToken(fugue_sqlParser.JOIN, 0)

        def relationPrimary(self):
            return self.getTypedRuleContext(fugue_sqlParser.RelationPrimaryContext,0)


        def joinCriteria(self):
            return self.getTypedRuleContext(fugue_sqlParser.JoinCriteriaContext,0)


        def NATURAL(self):
            return self.getToken(fugue_sqlParser.NATURAL, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_joinRelation

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinRelation" ):
                return visitor.visitJoinRelation(self)
            else:
                return visitor.visitChildren(self)




    def joinRelation(self):

        localctx = fugue_sqlParser.JoinRelationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_joinRelation)
        try:
            self.state = 2840
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [59, 95, 142, 157, 166, 172, 237, 248]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2829
                self.joinType()
                self.state = 2830
                self.match(fugue_sqlParser.JOIN)
                self.state = 2831
                localctx.right = self.relationPrimary()
                self.state = 2833
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,370,self._ctx)
                if la_ == 1:
                    self.state = 2832
                    self.joinCriteria()


                pass
            elif token in [192]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2835
                self.match(fugue_sqlParser.NATURAL)
                self.state = 2836
                self.joinType()
                self.state = 2837
                self.match(fugue_sqlParser.JOIN)
                self.state = 2838
                localctx.right = self.relationPrimary()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INNER(self):
            return self.getToken(fugue_sqlParser.INNER, 0)

        def CROSS(self):
            return self.getToken(fugue_sqlParser.CROSS, 0)

        def LEFT(self):
            return self.getToken(fugue_sqlParser.LEFT, 0)

        def OUTER(self):
            return self.getToken(fugue_sqlParser.OUTER, 0)

        def SEMI(self):
            return self.getToken(fugue_sqlParser.SEMI, 0)

        def RIGHT(self):
            return self.getToken(fugue_sqlParser.RIGHT, 0)

        def FULL(self):
            return self.getToken(fugue_sqlParser.FULL, 0)

        def ANTI(self):
            return self.getToken(fugue_sqlParser.ANTI, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_joinType

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinType" ):
                return visitor.visitJoinType(self)
            else:
                return visitor.visitChildren(self)




    def joinType(self):

        localctx = fugue_sqlParser.JoinTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_joinType)
        self._la = 0 # Token type
        try:
            self.state = 2866
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,378,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2843
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==157:
                    self.state = 2842
                    self.match(fugue_sqlParser.INNER)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2845
                self.match(fugue_sqlParser.CROSS)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2846
                self.match(fugue_sqlParser.LEFT)
                self.state = 2848
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==205:
                    self.state = 2847
                    self.match(fugue_sqlParser.OUTER)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2851
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==172:
                    self.state = 2850
                    self.match(fugue_sqlParser.LEFT)


                self.state = 2853
                self.match(fugue_sqlParser.SEMI)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2854
                self.match(fugue_sqlParser.RIGHT)
                self.state = 2856
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==205:
                    self.state = 2855
                    self.match(fugue_sqlParser.OUTER)


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2858
                self.match(fugue_sqlParser.FULL)
                self.state = 2860
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==205:
                    self.state = 2859
                    self.match(fugue_sqlParser.OUTER)


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2863
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==172:
                    self.state = 2862
                    self.match(fugue_sqlParser.LEFT)


                self.state = 2865
                self.match(fugue_sqlParser.ANTI)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinCriteriaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(fugue_sqlParser.ON, 0)

        def booleanExpression(self):
            return self.getTypedRuleContext(fugue_sqlParser.BooleanExpressionContext,0)


        def USING(self):
            return self.getToken(fugue_sqlParser.USING, 0)

        def identifierList(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierListContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_joinCriteria

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinCriteria" ):
                return visitor.visitJoinCriteria(self)
            else:
                return visitor.visitChildren(self)




    def joinCriteria(self):

        localctx = fugue_sqlParser.JoinCriteriaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_joinCriteria)
        try:
            self.state = 2872
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [198]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2868
                self.match(fugue_sqlParser.ON)
                self.state = 2869
                self.booleanExpression(0)
                pass
            elif token in [296]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2870
                self.match(fugue_sqlParser.USING)
                self.state = 2871
                self.identifierList()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SampleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLESAMPLE(self):
            return self.getToken(fugue_sqlParser.TABLESAMPLE, 0)

        def sampleMethod(self):
            return self.getTypedRuleContext(fugue_sqlParser.SampleMethodContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_sample

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSample" ):
                return visitor.visitSample(self)
            else:
                return visitor.visitChildren(self)




    def sample(self):

        localctx = fugue_sqlParser.SampleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_sample)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2874
            self.match(fugue_sqlParser.TABLESAMPLE)
            self.state = 2875
            self.match(fugue_sqlParser.T__2)
            self.state = 2877
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & -9007199254740984) != 0 or (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1) != 0 or (((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -1) != 0 or (((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & -1) != 0 or (((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & -7205196453839372289) != 0 or (((_la - 320)) & ~0x3f) == 0 and ((1 << (_la - 320)) & 65505) != 0:
                self.state = 2876
                self.sampleMethod()


            self.state = 2879
            self.match(fugue_sqlParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SampleMethodContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_sampleMethod

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SampleByRowsContext(SampleMethodContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.SampleMethodContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,0)

        def ROWS(self):
            return self.getToken(fugue_sqlParser.ROWS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSampleByRows" ):
                return visitor.visitSampleByRows(self)
            else:
                return visitor.visitChildren(self)


    class SampleByPercentileContext(SampleMethodContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.SampleMethodContext
            super().__init__(parser)
            self.negativeSign = None # Token
            self.percentage = None # Token
            self.copyFrom(ctx)

        def PERCENTLIT(self):
            return self.getToken(fugue_sqlParser.PERCENTLIT, 0)
        def INTEGER_VALUE(self):
            return self.getToken(fugue_sqlParser.INTEGER_VALUE, 0)
        def DECIMAL_VALUE(self):
            return self.getToken(fugue_sqlParser.DECIMAL_VALUE, 0)
        def MINUS(self):
            return self.getToken(fugue_sqlParser.MINUS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSampleByPercentile" ):
                return visitor.visitSampleByPercentile(self)
            else:
                return visitor.visitChildren(self)


    class SampleByBucketContext(SampleMethodContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.SampleMethodContext
            super().__init__(parser)
            self.sampleType = None # Token
            self.numerator = None # Token
            self.denominator = None # Token
            self.copyFrom(ctx)

        def OUT(self):
            return self.getToken(fugue_sqlParser.OUT, 0)
        def OF(self):
            return self.getToken(fugue_sqlParser.OF, 0)
        def BUCKET(self):
            return self.getToken(fugue_sqlParser.BUCKET, 0)
        def INTEGER_VALUE(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.INTEGER_VALUE)
            else:
                return self.getToken(fugue_sqlParser.INTEGER_VALUE, i)
        def ON(self):
            return self.getToken(fugue_sqlParser.ON, 0)
        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)

        def qualifiedName(self):
            return self.getTypedRuleContext(fugue_sqlParser.QualifiedNameContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSampleByBucket" ):
                return visitor.visitSampleByBucket(self)
            else:
                return visitor.visitChildren(self)


    class SampleByBytesContext(SampleMethodContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.SampleMethodContext
            super().__init__(parser)
            self.bytes = None # ExpressionContext
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSampleByBytes" ):
                return visitor.visitSampleByBytes(self)
            else:
                return visitor.visitChildren(self)



    def sampleMethod(self):

        localctx = fugue_sqlParser.SampleMethodContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_sampleMethod)
        self._la = 0 # Token type
        try:
            self.state = 2905
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,384,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.SampleByPercentileContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2882
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==315:
                    self.state = 2881
                    localctx.negativeSign = self.match(fugue_sqlParser.MINUS)


                self.state = 2884
                localctx.percentage = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==329 or _la==331):
                    localctx.percentage = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2885
                self.match(fugue_sqlParser.PERCENTLIT)
                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.SampleByRowsContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2886
                self.expression()
                self.state = 2887
                self.match(fugue_sqlParser.ROWS)
                pass

            elif la_ == 3:
                localctx = fugue_sqlParser.SampleByBucketContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2889
                localctx.sampleType = self.match(fugue_sqlParser.BUCKET)
                self.state = 2890
                localctx.numerator = self.match(fugue_sqlParser.INTEGER_VALUE)
                self.state = 2891
                self.match(fugue_sqlParser.OUT)
                self.state = 2892
                self.match(fugue_sqlParser.OF)
                self.state = 2893
                localctx.denominator = self.match(fugue_sqlParser.INTEGER_VALUE)
                self.state = 2902
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==198:
                    self.state = 2894
                    self.match(fugue_sqlParser.ON)
                    self.state = 2900
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,382,self._ctx)
                    if la_ == 1:
                        self.state = 2895
                        self.identifier()
                        pass

                    elif la_ == 2:
                        self.state = 2896
                        self.qualifiedName()
                        self.state = 2897
                        self.match(fugue_sqlParser.T__2)
                        self.state = 2898
                        self.match(fugue_sqlParser.T__3)
                        pass




                pass

            elif la_ == 4:
                localctx = fugue_sqlParser.SampleByBytesContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2904
                localctx.bytes = self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifierSeq(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierSeqContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_identifierList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifierList" ):
                return visitor.visitIdentifierList(self)
            else:
                return visitor.visitChildren(self)




    def identifierList(self):

        localctx = fugue_sqlParser.IdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_identifierList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2907
            self.match(fugue_sqlParser.T__2)
            self.state = 2908
            self.identifierSeq()
            self.state = 2909
            self.match(fugue_sqlParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierSeqContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._errorCapturingIdentifier = None # ErrorCapturingIdentifierContext
            self.ident = list() # of ErrorCapturingIdentifierContexts

        def errorCapturingIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ErrorCapturingIdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ErrorCapturingIdentifierContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_identifierSeq

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifierSeq" ):
                return visitor.visitIdentifierSeq(self)
            else:
                return visitor.visitChildren(self)




    def identifierSeq(self):

        localctx = fugue_sqlParser.IdentifierSeqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_identifierSeq)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2911
            localctx._errorCapturingIdentifier = self.errorCapturingIdentifier()
            localctx.ident.append(localctx._errorCapturingIdentifier)
            self.state = 2916
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,385,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2912
                    self.match(fugue_sqlParser.T__0)
                    self.state = 2913
                    localctx._errorCapturingIdentifier = self.errorCapturingIdentifier()
                    localctx.ident.append(localctx._errorCapturingIdentifier) 
                self.state = 2918
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,385,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderedIdentifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def orderedIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.OrderedIdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.OrderedIdentifierContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_orderedIdentifierList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrderedIdentifierList" ):
                return visitor.visitOrderedIdentifierList(self)
            else:
                return visitor.visitChildren(self)




    def orderedIdentifierList(self):

        localctx = fugue_sqlParser.OrderedIdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_orderedIdentifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2919
            self.match(fugue_sqlParser.T__2)
            self.state = 2920
            self.orderedIdentifier()
            self.state = 2925
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1:
                self.state = 2921
                self.match(fugue_sqlParser.T__0)
                self.state = 2922
                self.orderedIdentifier()
                self.state = 2927
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2928
            self.match(fugue_sqlParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderedIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ident = None # ErrorCapturingIdentifierContext
            self.ordering = None # Token

        def errorCapturingIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.ErrorCapturingIdentifierContext,0)


        def ASC(self):
            return self.getToken(fugue_sqlParser.ASC, 0)

        def DESC(self):
            return self.getToken(fugue_sqlParser.DESC, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_orderedIdentifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrderedIdentifier" ):
                return visitor.visitOrderedIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def orderedIdentifier(self):

        localctx = fugue_sqlParser.OrderedIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_orderedIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2930
            localctx.ident = self.errorCapturingIdentifier()
            self.state = 2932
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==64 or _la==110:
                self.state = 2931
                localctx.ordering = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==64 or _la==110):
                    localctx.ordering = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierCommentListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifierComment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.IdentifierCommentContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.IdentifierCommentContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_identifierCommentList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifierCommentList" ):
                return visitor.visitIdentifierCommentList(self)
            else:
                return visitor.visitChildren(self)




    def identifierCommentList(self):

        localctx = fugue_sqlParser.IdentifierCommentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_identifierCommentList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2934
            self.match(fugue_sqlParser.T__2)
            self.state = 2935
            self.identifierComment()
            self.state = 2940
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1:
                self.state = 2936
                self.match(fugue_sqlParser.T__0)
                self.state = 2937
                self.identifierComment()
                self.state = 2942
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2943
            self.match(fugue_sqlParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierCommentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)


        def commentSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.CommentSpecContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_identifierComment

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifierComment" ):
                return visitor.visitIdentifierComment(self)
            else:
                return visitor.visitChildren(self)




    def identifierComment(self):

        localctx = fugue_sqlParser.IdentifierCommentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_identifierComment)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2945
            self.identifier()
            self.state = 2947
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==86:
                self.state = 2946
                self.commentSpec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelationPrimaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_relationPrimary

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TableValuedFunctionContext(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def functionTable(self):
            return self.getTypedRuleContext(fugue_sqlParser.FunctionTableContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableValuedFunction" ):
                return visitor.visitTableValuedFunction(self)
            else:
                return visitor.visitChildren(self)


    class InlineTableDefault2Context(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def inlineTable(self):
            return self.getTypedRuleContext(fugue_sqlParser.InlineTableContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInlineTableDefault2" ):
                return visitor.visitInlineTableDefault2(self)
            else:
                return visitor.visitChildren(self)


    class AliasedRelationContext(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def relation(self):
            return self.getTypedRuleContext(fugue_sqlParser.RelationContext,0)

        def tableAlias(self):
            return self.getTypedRuleContext(fugue_sqlParser.TableAliasContext,0)

        def sample(self):
            return self.getTypedRuleContext(fugue_sqlParser.SampleContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAliasedRelation" ):
                return visitor.visitAliasedRelation(self)
            else:
                return visitor.visitChildren(self)


    class AliasedQueryContext(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def query(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryContext,0)

        def tableAlias(self):
            return self.getTypedRuleContext(fugue_sqlParser.TableAliasContext,0)

        def sample(self):
            return self.getTypedRuleContext(fugue_sqlParser.SampleContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAliasedQuery" ):
                return visitor.visitAliasedQuery(self)
            else:
                return visitor.visitChildren(self)


    class TableNameContext(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def tableAlias(self):
            return self.getTypedRuleContext(fugue_sqlParser.TableAliasContext,0)

        def fugueDataFrameMember(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueDataFrameMemberContext,0)

        def sample(self):
            return self.getTypedRuleContext(fugue_sqlParser.SampleContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableName" ):
                return visitor.visitTableName(self)
            else:
                return visitor.visitChildren(self)



    def relationPrimary(self):

        localctx = fugue_sqlParser.RelationPrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_relationPrimary)
        try:
            self.state = 2976
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,394,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.TableNameContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2949
                self.multipartIdentifier()
                self.state = 2951
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,390,self._ctx)
                if la_ == 1:
                    self.state = 2950
                    self.fugueDataFrameMember()


                self.state = 2954
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,391,self._ctx)
                if la_ == 1:
                    self.state = 2953
                    self.sample()


                self.state = 2956
                self.tableAlias()
                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.AliasedQueryContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2958
                self.match(fugue_sqlParser.T__2)
                self.state = 2959
                self.query()
                self.state = 2960
                self.match(fugue_sqlParser.T__3)
                self.state = 2962
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,392,self._ctx)
                if la_ == 1:
                    self.state = 2961
                    self.sample()


                self.state = 2964
                self.tableAlias()
                pass

            elif la_ == 3:
                localctx = fugue_sqlParser.AliasedRelationContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2966
                self.match(fugue_sqlParser.T__2)
                self.state = 2967
                self.relation()
                self.state = 2968
                self.match(fugue_sqlParser.T__3)
                self.state = 2970
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,393,self._ctx)
                if la_ == 1:
                    self.state = 2969
                    self.sample()


                self.state = 2972
                self.tableAlias()
                pass

            elif la_ == 4:
                localctx = fugue_sqlParser.InlineTableDefault2Context(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2974
                self.inlineTable()
                pass

            elif la_ == 5:
                localctx = fugue_sqlParser.TableValuedFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2975
                self.functionTable()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InlineTableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VALUES(self):
            return self.getToken(fugue_sqlParser.VALUES, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,i)


        def tableAlias(self):
            return self.getTypedRuleContext(fugue_sqlParser.TableAliasContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_inlineTable

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInlineTable" ):
                return visitor.visitInlineTable(self)
            else:
                return visitor.visitChildren(self)




    def inlineTable(self):

        localctx = fugue_sqlParser.InlineTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_inlineTable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2978
            self.match(fugue_sqlParser.VALUES)
            self.state = 2979
            self.expression()
            self.state = 2984
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,395,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2980
                    self.match(fugue_sqlParser.T__0)
                    self.state = 2981
                    self.expression() 
                self.state = 2986
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,395,self._ctx)

            self.state = 2987
            self.tableAlias()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionTableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.funcName = None # ErrorCapturingIdentifierContext

        def tableAlias(self):
            return self.getTypedRuleContext(fugue_sqlParser.TableAliasContext,0)


        def errorCapturingIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.ErrorCapturingIdentifierContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_functionTable

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionTable" ):
                return visitor.visitFunctionTable(self)
            else:
                return visitor.visitChildren(self)




    def functionTable(self):

        localctx = fugue_sqlParser.FunctionTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_functionTable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2989
            localctx.funcName = self.errorCapturingIdentifier()
            self.state = 2990
            self.match(fugue_sqlParser.T__2)
            self.state = 2999
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & -9007199254740984) != 0 or (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1) != 0 or (((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -1) != 0 or (((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & -1) != 0 or (((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & -7205196453839372289) != 0 or (((_la - 320)) & ~0x3f) == 0 and ((1 << (_la - 320)) & 65505) != 0:
                self.state = 2991
                self.expression()
                self.state = 2996
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1:
                    self.state = 2992
                    self.match(fugue_sqlParser.T__0)
                    self.state = 2993
                    self.expression()
                    self.state = 2998
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 3001
            self.match(fugue_sqlParser.T__3)
            self.state = 3002
            self.tableAlias()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableAliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def strictIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.StrictIdentifierContext,0)


        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)

        def identifierList(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierListContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_tableAlias

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableAlias" ):
                return visitor.visitTableAlias(self)
            else:
                return visitor.visitChildren(self)




    def tableAlias(self):

        localctx = fugue_sqlParser.TableAliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_tableAlias)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3011
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,400,self._ctx)
            if la_ == 1:
                self.state = 3005
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,398,self._ctx)
                if la_ == 1:
                    self.state = 3004
                    self.match(fugue_sqlParser.AS)


                self.state = 3007
                self.strictIdentifier()
                self.state = 3009
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,399,self._ctx)
                if la_ == 1:
                    self.state = 3008
                    self.identifierList()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RowFormatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_rowFormat

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RowFormatSerdeContext(RowFormatContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.RowFormatContext
            super().__init__(parser)
            self.name = None # Token
            self.props = None # TablePropertyListContext
            self.copyFrom(ctx)

        def ROW(self):
            return self.getToken(fugue_sqlParser.ROW, 0)
        def FORMAT(self):
            return self.getToken(fugue_sqlParser.FORMAT, 0)
        def SERDE(self):
            return self.getToken(fugue_sqlParser.SERDE, 0)
        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)
        def WITH(self):
            return self.getToken(fugue_sqlParser.WITH, 0)
        def SERDEPROPERTIES(self):
            return self.getToken(fugue_sqlParser.SERDEPROPERTIES, 0)
        def tablePropertyList(self):
            return self.getTypedRuleContext(fugue_sqlParser.TablePropertyListContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRowFormatSerde" ):
                return visitor.visitRowFormatSerde(self)
            else:
                return visitor.visitChildren(self)


    class RowFormatDelimitedContext(RowFormatContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.RowFormatContext
            super().__init__(parser)
            self.fieldsTerminatedBy = None # Token
            self.escapedBy = None # Token
            self.collectionItemsTerminatedBy = None # Token
            self.keysTerminatedBy = None # Token
            self.linesSeparatedBy = None # Token
            self.nullDefinedAs = None # Token
            self.copyFrom(ctx)

        def ROW(self):
            return self.getToken(fugue_sqlParser.ROW, 0)
        def FORMAT(self):
            return self.getToken(fugue_sqlParser.FORMAT, 0)
        def DELIMITED(self):
            return self.getToken(fugue_sqlParser.DELIMITED, 0)
        def FIELDS(self):
            return self.getToken(fugue_sqlParser.FIELDS, 0)
        def TERMINATED(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.TERMINATED)
            else:
                return self.getToken(fugue_sqlParser.TERMINATED, i)
        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.BY)
            else:
                return self.getToken(fugue_sqlParser.BY, i)
        def COLLECTION(self):
            return self.getToken(fugue_sqlParser.COLLECTION, 0)
        def ITEMS(self):
            return self.getToken(fugue_sqlParser.ITEMS, 0)
        def MAP(self):
            return self.getToken(fugue_sqlParser.MAP, 0)
        def KEYS(self):
            return self.getToken(fugue_sqlParser.KEYS, 0)
        def LINES(self):
            return self.getToken(fugue_sqlParser.LINES, 0)
        def THENULL(self):
            return self.getToken(fugue_sqlParser.THENULL, 0)
        def DEFINED(self):
            return self.getToken(fugue_sqlParser.DEFINED, 0)
        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)
        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.STRING)
            else:
                return self.getToken(fugue_sqlParser.STRING, i)
        def ESCAPED(self):
            return self.getToken(fugue_sqlParser.ESCAPED, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRowFormatDelimited" ):
                return visitor.visitRowFormatDelimited(self)
            else:
                return visitor.visitChildren(self)



    def rowFormat(self):

        localctx = fugue_sqlParser.RowFormatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_rowFormat)
        try:
            self.state = 3062
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,408,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.RowFormatSerdeContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3013
                self.match(fugue_sqlParser.ROW)
                self.state = 3014
                self.match(fugue_sqlParser.FORMAT)
                self.state = 3015
                self.match(fugue_sqlParser.SERDE)
                self.state = 3016
                localctx.name = self.match(fugue_sqlParser.STRING)
                self.state = 3020
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,401,self._ctx)
                if la_ == 1:
                    self.state = 3017
                    self.match(fugue_sqlParser.WITH)
                    self.state = 3018
                    self.match(fugue_sqlParser.SERDEPROPERTIES)
                    self.state = 3019
                    localctx.props = self.tablePropertyList()


                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.RowFormatDelimitedContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3022
                self.match(fugue_sqlParser.ROW)
                self.state = 3023
                self.match(fugue_sqlParser.FORMAT)
                self.state = 3024
                self.match(fugue_sqlParser.DELIMITED)
                self.state = 3034
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,403,self._ctx)
                if la_ == 1:
                    self.state = 3025
                    self.match(fugue_sqlParser.FIELDS)
                    self.state = 3026
                    self.match(fugue_sqlParser.TERMINATED)
                    self.state = 3027
                    self.match(fugue_sqlParser.BY)
                    self.state = 3028
                    localctx.fieldsTerminatedBy = self.match(fugue_sqlParser.STRING)
                    self.state = 3032
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,402,self._ctx)
                    if la_ == 1:
                        self.state = 3029
                        self.match(fugue_sqlParser.ESCAPED)
                        self.state = 3030
                        self.match(fugue_sqlParser.BY)
                        self.state = 3031
                        localctx.escapedBy = self.match(fugue_sqlParser.STRING)




                self.state = 3041
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,404,self._ctx)
                if la_ == 1:
                    self.state = 3036
                    self.match(fugue_sqlParser.COLLECTION)
                    self.state = 3037
                    self.match(fugue_sqlParser.ITEMS)
                    self.state = 3038
                    self.match(fugue_sqlParser.TERMINATED)
                    self.state = 3039
                    self.match(fugue_sqlParser.BY)
                    self.state = 3040
                    localctx.collectionItemsTerminatedBy = self.match(fugue_sqlParser.STRING)


                self.state = 3048
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,405,self._ctx)
                if la_ == 1:
                    self.state = 3043
                    self.match(fugue_sqlParser.MAP)
                    self.state = 3044
                    self.match(fugue_sqlParser.KEYS)
                    self.state = 3045
                    self.match(fugue_sqlParser.TERMINATED)
                    self.state = 3046
                    self.match(fugue_sqlParser.BY)
                    self.state = 3047
                    localctx.keysTerminatedBy = self.match(fugue_sqlParser.STRING)


                self.state = 3054
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,406,self._ctx)
                if la_ == 1:
                    self.state = 3050
                    self.match(fugue_sqlParser.LINES)
                    self.state = 3051
                    self.match(fugue_sqlParser.TERMINATED)
                    self.state = 3052
                    self.match(fugue_sqlParser.BY)
                    self.state = 3053
                    localctx.linesSeparatedBy = self.match(fugue_sqlParser.STRING)


                self.state = 3060
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,407,self._ctx)
                if la_ == 1:
                    self.state = 3056
                    self.match(fugue_sqlParser.THENULL)
                    self.state = 3057
                    self.match(fugue_sqlParser.DEFINED)
                    self.state = 3058
                    self.match(fugue_sqlParser.AS)
                    self.state = 3059
                    localctx.nullDefinedAs = self.match(fugue_sqlParser.STRING)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultipartIdentifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multipartIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.MultipartIdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_multipartIdentifierList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultipartIdentifierList" ):
                return visitor.visitMultipartIdentifierList(self)
            else:
                return visitor.visitChildren(self)




    def multipartIdentifierList(self):

        localctx = fugue_sqlParser.MultipartIdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_multipartIdentifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3064
            self.multipartIdentifier()
            self.state = 3069
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1:
                self.state = 3065
                self.match(fugue_sqlParser.T__0)
                self.state = 3066
                self.multipartIdentifier()
                self.state = 3071
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultipartIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._errorCapturingIdentifier = None # ErrorCapturingIdentifierContext
            self.parts = list() # of ErrorCapturingIdentifierContexts

        def errorCapturingIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ErrorCapturingIdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ErrorCapturingIdentifierContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_multipartIdentifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultipartIdentifier" ):
                return visitor.visitMultipartIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def multipartIdentifier(self):

        localctx = fugue_sqlParser.MultipartIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_multipartIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3072
            localctx._errorCapturingIdentifier = self.errorCapturingIdentifier()
            localctx.parts.append(localctx._errorCapturingIdentifier)
            self.state = 3077
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,410,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3073
                    self.match(fugue_sqlParser.T__6)
                    self.state = 3074
                    localctx._errorCapturingIdentifier = self.errorCapturingIdentifier()
                    localctx.parts.append(localctx._errorCapturingIdentifier) 
                self.state = 3079
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,410,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.db = None # ErrorCapturingIdentifierContext
            self.table = None # ErrorCapturingIdentifierContext

        def errorCapturingIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ErrorCapturingIdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ErrorCapturingIdentifierContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_tableIdentifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableIdentifier" ):
                return visitor.visitTableIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def tableIdentifier(self):

        localctx = fugue_sqlParser.TableIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_tableIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3083
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,411,self._ctx)
            if la_ == 1:
                self.state = 3080
                localctx.db = self.errorCapturingIdentifier()
                self.state = 3081
                self.match(fugue_sqlParser.T__6)


            self.state = 3085
            localctx.table = self.errorCapturingIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.db = None # ErrorCapturingIdentifierContext
            self.function = None # ErrorCapturingIdentifierContext

        def errorCapturingIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ErrorCapturingIdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ErrorCapturingIdentifierContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_functionIdentifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionIdentifier" ):
                return visitor.visitFunctionIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def functionIdentifier(self):

        localctx = fugue_sqlParser.FunctionIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_functionIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3090
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,412,self._ctx)
            if la_ == 1:
                self.state = 3087
                localctx.db = self.errorCapturingIdentifier()
                self.state = 3088
                self.match(fugue_sqlParser.T__6)


            self.state = 3092
            localctx.function = self.errorCapturingIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # ErrorCapturingIdentifierContext

        def expression(self):
            return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,0)


        def identifierList(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierListContext,0)


        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)

        def errorCapturingIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.ErrorCapturingIdentifierContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_namedExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamedExpression" ):
                return visitor.visitNamedExpression(self)
            else:
                return visitor.visitChildren(self)




    def namedExpression(self):

        localctx = fugue_sqlParser.NamedExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_namedExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3094
            self.expression()
            self.state = 3102
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,415,self._ctx)
            if la_ == 1:
                self.state = 3096
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,413,self._ctx)
                if la_ == 1:
                    self.state = 3095
                    self.match(fugue_sqlParser.AS)


                self.state = 3100
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 319, 334, 335]:
                    self.state = 3098
                    localctx.name = self.errorCapturingIdentifier()
                    pass
                elif token in [3]:
                    self.state = 3099
                    self.identifierList()
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedExpressionSeqContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namedExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.NamedExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.NamedExpressionContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_namedExpressionSeq

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamedExpressionSeq" ):
                return visitor.visitNamedExpressionSeq(self)
            else:
                return visitor.visitChildren(self)




    def namedExpressionSeq(self):

        localctx = fugue_sqlParser.NamedExpressionSeqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_namedExpressionSeq)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3104
            self.namedExpression()
            self.state = 3109
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,416,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3105
                    self.match(fugue_sqlParser.T__0)
                    self.state = 3106
                    self.namedExpression() 
                self.state = 3111
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,416,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransformListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._transform = None # TransformContext
            self.transforms = list() # of TransformContexts

        def transform(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.TransformContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.TransformContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_transformList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTransformList" ):
                return visitor.visitTransformList(self)
            else:
                return visitor.visitChildren(self)




    def transformList(self):

        localctx = fugue_sqlParser.TransformListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_transformList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3112
            self.match(fugue_sqlParser.T__2)
            self.state = 3113
            localctx._transform = self.transform()
            localctx.transforms.append(localctx._transform)
            self.state = 3118
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1:
                self.state = 3114
                self.match(fugue_sqlParser.T__0)
                self.state = 3115
                localctx._transform = self.transform()
                localctx.transforms.append(localctx._transform)
                self.state = 3120
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3121
            self.match(fugue_sqlParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransformContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_transform

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class IdentityTransformContext(TransformContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.TransformContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def qualifiedName(self):
            return self.getTypedRuleContext(fugue_sqlParser.QualifiedNameContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentityTransform" ):
                return visitor.visitIdentityTransform(self)
            else:
                return visitor.visitChildren(self)


    class ApplyTransformContext(TransformContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.TransformContext
            super().__init__(parser)
            self.transformName = None # IdentifierContext
            self._transformArgument = None # TransformArgumentContext
            self.argument = list() # of TransformArgumentContexts
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)

        def transformArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.TransformArgumentContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.TransformArgumentContext,i)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitApplyTransform" ):
                return visitor.visitApplyTransform(self)
            else:
                return visitor.visitChildren(self)



    def transform(self):

        localctx = fugue_sqlParser.TransformContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_transform)
        self._la = 0 # Token type
        try:
            self.state = 3136
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,419,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.IdentityTransformContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3123
                self.qualifiedName()
                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.ApplyTransformContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3124
                localctx.transformName = self.identifier()
                self.state = 3125
                self.match(fugue_sqlParser.T__2)
                self.state = 3126
                localctx._transformArgument = self.transformArgument()
                localctx.argument.append(localctx._transformArgument)
                self.state = 3131
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1:
                    self.state = 3127
                    self.match(fugue_sqlParser.T__0)
                    self.state = 3128
                    localctx._transformArgument = self.transformArgument()
                    localctx.argument.append(localctx._transformArgument)
                    self.state = 3133
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3134
                self.match(fugue_sqlParser.T__3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransformArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedName(self):
            return self.getTypedRuleContext(fugue_sqlParser.QualifiedNameContext,0)


        def constant(self):
            return self.getTypedRuleContext(fugue_sqlParser.ConstantContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_transformArgument

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTransformArgument" ):
                return visitor.visitTransformArgument(self)
            else:
                return visitor.visitChildren(self)




    def transformArgument(self):

        localctx = fugue_sqlParser.TransformArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_transformArgument)
        try:
            self.state = 3140
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,420,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3138
                self.qualifiedName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3139
                self.constant()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def booleanExpression(self):
            return self.getTypedRuleContext(fugue_sqlParser.BooleanExpressionContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_expression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)




    def expression(self):

        localctx = fugue_sqlParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3142
            self.booleanExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_booleanExpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class LogicalNotContext(BooleanExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.BooleanExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NOT(self):
            return self.getToken(fugue_sqlParser.NOT, 0)
        def booleanExpression(self):
            return self.getTypedRuleContext(fugue_sqlParser.BooleanExpressionContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogicalNot" ):
                return visitor.visitLogicalNot(self)
            else:
                return visitor.visitChildren(self)


    class PredicatedContext(BooleanExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.BooleanExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueExpression(self):
            return self.getTypedRuleContext(fugue_sqlParser.ValueExpressionContext,0)

        def predicate(self):
            return self.getTypedRuleContext(fugue_sqlParser.PredicateContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPredicated" ):
                return visitor.visitPredicated(self)
            else:
                return visitor.visitChildren(self)


    class ExistsContext(BooleanExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.BooleanExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXISTS(self):
            return self.getToken(fugue_sqlParser.EXISTS, 0)
        def query(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExists" ):
                return visitor.visitExists(self)
            else:
                return visitor.visitChildren(self)


    class LogicalBinaryContext(BooleanExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.BooleanExpressionContext
            super().__init__(parser)
            self.left = None # BooleanExpressionContext
            self.theOperator = None # Token
            self.right = None # BooleanExpressionContext
            self.copyFrom(ctx)

        def booleanExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.BooleanExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.BooleanExpressionContext,i)

        def AND(self):
            return self.getToken(fugue_sqlParser.AND, 0)
        def OR(self):
            return self.getToken(fugue_sqlParser.OR, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogicalBinary" ):
                return visitor.visitLogicalBinary(self)
            else:
                return visitor.visitChildren(self)



    def booleanExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = fugue_sqlParser.BooleanExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 340
        self.enterRecursionRule(localctx, 340, self.RULE_booleanExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3156
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,422,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.LogicalNotContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 3145
                self.match(fugue_sqlParser.NOT)
                self.state = 3146
                self.booleanExpression(5)
                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.ExistsContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3147
                self.match(fugue_sqlParser.EXISTS)
                self.state = 3148
                self.match(fugue_sqlParser.T__2)
                self.state = 3149
                self.query()
                self.state = 3150
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 3:
                localctx = fugue_sqlParser.PredicatedContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3152
                self.valueExpression(0)
                self.state = 3154
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,421,self._ctx)
                if la_ == 1:
                    self.state = 3153
                    self.predicate()


                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 3166
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,424,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 3164
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,423,self._ctx)
                    if la_ == 1:
                        localctx = fugue_sqlParser.LogicalBinaryContext(self, fugue_sqlParser.BooleanExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_booleanExpression)
                        self.state = 3158
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 3159
                        localctx.theOperator = self.match(fugue_sqlParser.AND)
                        self.state = 3160
                        localctx.right = self.booleanExpression(3)
                        pass

                    elif la_ == 2:
                        localctx = fugue_sqlParser.LogicalBinaryContext(self, fugue_sqlParser.BooleanExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_booleanExpression)
                        self.state = 3161
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 3162
                        localctx.theOperator = self.match(fugue_sqlParser.OR)
                        self.state = 3163
                        localctx.right = self.booleanExpression(2)
                        pass

             
                self.state = 3168
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,424,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class PredicateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.kind = None # Token
            self.lower = None # ValueExpressionContext
            self.upper = None # ValueExpressionContext
            self.pattern = None # ValueExpressionContext
            self.quantifier = None # Token
            self.escapeChar = None # Token
            self.right = None # ValueExpressionContext

        def AND(self):
            return self.getToken(fugue_sqlParser.AND, 0)

        def BETWEEN(self):
            return self.getToken(fugue_sqlParser.BETWEEN, 0)

        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ValueExpressionContext,i)


        def NOT(self):
            return self.getToken(fugue_sqlParser.NOT, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,i)


        def IN(self):
            return self.getToken(fugue_sqlParser.IN, 0)

        def query(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryContext,0)


        def RLIKE(self):
            return self.getToken(fugue_sqlParser.RLIKE, 0)

        def LIKE(self):
            return self.getToken(fugue_sqlParser.LIKE, 0)

        def ANY(self):
            return self.getToken(fugue_sqlParser.ANY, 0)

        def SOME(self):
            return self.getToken(fugue_sqlParser.SOME, 0)

        def ALL(self):
            return self.getToken(fugue_sqlParser.ALL, 0)

        def ESCAPE(self):
            return self.getToken(fugue_sqlParser.ESCAPE, 0)

        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)

        def IS(self):
            return self.getToken(fugue_sqlParser.IS, 0)

        def THENULL(self):
            return self.getToken(fugue_sqlParser.THENULL, 0)

        def TRUE(self):
            return self.getToken(fugue_sqlParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(fugue_sqlParser.FALSE, 0)

        def UNKNOWN(self):
            return self.getToken(fugue_sqlParser.UNKNOWN, 0)

        def FROM(self):
            return self.getToken(fugue_sqlParser.FROM, 0)

        def DISTINCT(self):
            return self.getToken(fugue_sqlParser.DISTINCT, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_predicate

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPredicate" ):
                return visitor.visitPredicate(self)
            else:
                return visitor.visitChildren(self)




    def predicate(self):

        localctx = fugue_sqlParser.PredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 342, self.RULE_predicate)
        self._la = 0 # Token type
        try:
            self.state = 3251
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,438,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3170
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==194:
                    self.state = 3169
                    self.match(fugue_sqlParser.NOT)


                self.state = 3172
                localctx.kind = self.match(fugue_sqlParser.BETWEEN)
                self.state = 3173
                localctx.lower = self.valueExpression(0)
                self.state = 3174
                self.match(fugue_sqlParser.AND)
                self.state = 3175
                localctx.upper = self.valueExpression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3178
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==194:
                    self.state = 3177
                    self.match(fugue_sqlParser.NOT)


                self.state = 3180
                localctx.kind = self.match(fugue_sqlParser.IN)
                self.state = 3181
                self.match(fugue_sqlParser.T__2)
                self.state = 3182
                self.expression()
                self.state = 3187
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1:
                    self.state = 3183
                    self.match(fugue_sqlParser.T__0)
                    self.state = 3184
                    self.expression()
                    self.state = 3189
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3190
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3193
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==194:
                    self.state = 3192
                    self.match(fugue_sqlParser.NOT)


                self.state = 3195
                localctx.kind = self.match(fugue_sqlParser.IN)
                self.state = 3196
                self.match(fugue_sqlParser.T__2)
                self.state = 3197
                self.query()
                self.state = 3198
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3201
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==194:
                    self.state = 3200
                    self.match(fugue_sqlParser.NOT)


                self.state = 3203
                localctx.kind = self.match(fugue_sqlParser.RLIKE)
                self.state = 3204
                localctx.pattern = self.valueExpression(0)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3206
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==194:
                    self.state = 3205
                    self.match(fugue_sqlParser.NOT)


                self.state = 3208
                localctx.kind = self.match(fugue_sqlParser.LIKE)
                self.state = 3209
                localctx.quantifier = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==55 or _la==60 or _la==258):
                    localctx.quantifier = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3223
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,432,self._ctx)
                if la_ == 1:
                    self.state = 3210
                    self.match(fugue_sqlParser.T__2)
                    self.state = 3211
                    self.match(fugue_sqlParser.T__3)
                    pass

                elif la_ == 2:
                    self.state = 3212
                    self.match(fugue_sqlParser.T__2)
                    self.state = 3213
                    self.expression()
                    self.state = 3218
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1:
                        self.state = 3214
                        self.match(fugue_sqlParser.T__0)
                        self.state = 3215
                        self.expression()
                        self.state = 3220
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 3221
                    self.match(fugue_sqlParser.T__3)
                    pass


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3226
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==194:
                    self.state = 3225
                    self.match(fugue_sqlParser.NOT)


                self.state = 3228
                localctx.kind = self.match(fugue_sqlParser.LIKE)
                self.state = 3229
                localctx.pattern = self.valueExpression(0)
                self.state = 3232
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,434,self._ctx)
                if la_ == 1:
                    self.state = 3230
                    self.match(fugue_sqlParser.ESCAPE)
                    self.state = 3231
                    localctx.escapeChar = self.match(fugue_sqlParser.STRING)


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 3234
                self.match(fugue_sqlParser.IS)
                self.state = 3236
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==194:
                    self.state = 3235
                    self.match(fugue_sqlParser.NOT)


                self.state = 3238
                localctx.kind = self.match(fugue_sqlParser.THENULL)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 3239
                self.match(fugue_sqlParser.IS)
                self.state = 3241
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==194:
                    self.state = 3240
                    self.match(fugue_sqlParser.NOT)


                self.state = 3243
                localctx.kind = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==130 or _la==282 or _la==290):
                    localctx.kind = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 3244
                self.match(fugue_sqlParser.IS)
                self.state = 3246
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==194:
                    self.state = 3245
                    self.match(fugue_sqlParser.NOT)


                self.state = 3248
                localctx.kind = self.match(fugue_sqlParser.DISTINCT)
                self.state = 3249
                self.match(fugue_sqlParser.FROM)
                self.state = 3250
                localctx.right = self.valueExpression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValueExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_valueExpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class ValueExpressionDefaultContext(ValueExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.ValueExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def primaryExpression(self):
            return self.getTypedRuleContext(fugue_sqlParser.PrimaryExpressionContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitValueExpressionDefault" ):
                return visitor.visitValueExpressionDefault(self)
            else:
                return visitor.visitChildren(self)


    class ComparisonContext(ValueExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.ValueExpressionContext
            super().__init__(parser)
            self.left = None # ValueExpressionContext
            self.right = None # ValueExpressionContext
            self.copyFrom(ctx)

        def comparisonOperator(self):
            return self.getTypedRuleContext(fugue_sqlParser.ComparisonOperatorContext,0)

        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ValueExpressionContext,i)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparison" ):
                return visitor.visitComparison(self)
            else:
                return visitor.visitChildren(self)


    class ArithmeticBinaryContext(ValueExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.ValueExpressionContext
            super().__init__(parser)
            self.left = None # ValueExpressionContext
            self.theOperator = None # Token
            self.right = None # ValueExpressionContext
            self.copyFrom(ctx)

        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ValueExpressionContext,i)

        def ASTERISK(self):
            return self.getToken(fugue_sqlParser.ASTERISK, 0)
        def SLASH(self):
            return self.getToken(fugue_sqlParser.SLASH, 0)
        def PERCENT(self):
            return self.getToken(fugue_sqlParser.PERCENT, 0)
        def DIV(self):
            return self.getToken(fugue_sqlParser.DIV, 0)
        def PLUS(self):
            return self.getToken(fugue_sqlParser.PLUS, 0)
        def MINUS(self):
            return self.getToken(fugue_sqlParser.MINUS, 0)
        def CONCAT_PIPE(self):
            return self.getToken(fugue_sqlParser.CONCAT_PIPE, 0)
        def AMPERSAND(self):
            return self.getToken(fugue_sqlParser.AMPERSAND, 0)
        def HAT(self):
            return self.getToken(fugue_sqlParser.HAT, 0)
        def PIPE(self):
            return self.getToken(fugue_sqlParser.PIPE, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArithmeticBinary" ):
                return visitor.visitArithmeticBinary(self)
            else:
                return visitor.visitChildren(self)


    class ArithmeticUnaryContext(ValueExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.ValueExpressionContext
            super().__init__(parser)
            self.theOperator = None # Token
            self.copyFrom(ctx)

        def valueExpression(self):
            return self.getTypedRuleContext(fugue_sqlParser.ValueExpressionContext,0)

        def MINUS(self):
            return self.getToken(fugue_sqlParser.MINUS, 0)
        def PLUS(self):
            return self.getToken(fugue_sqlParser.PLUS, 0)
        def TILDE(self):
            return self.getToken(fugue_sqlParser.TILDE, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArithmeticUnary" ):
                return visitor.visitArithmeticUnary(self)
            else:
                return visitor.visitChildren(self)



    def valueExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = fugue_sqlParser.ValueExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 344
        self.enterRecursionRule(localctx, 344, self.RULE_valueExpression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3257
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,439,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.ValueExpressionDefaultContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 3254
                self.primaryExpression(0)
                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.ArithmeticUnaryContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3255
                localctx.theOperator = self._input.LT(1)
                _la = self._input.LA(1)
                if not((((_la - 314)) & ~0x3f) == 0 and ((1 << (_la - 314)) & 67) != 0):
                    localctx.theOperator = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3256
                self.valueExpression(7)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 3280
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,441,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 3278
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,440,self._ctx)
                    if la_ == 1:
                        localctx = fugue_sqlParser.ArithmeticBinaryContext(self, fugue_sqlParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 3259
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 3260
                        localctx.theOperator = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not((((_la - 316)) & ~0x3f) == 0 and ((1 << (_la - 316)) & 15) != 0):
                            localctx.theOperator = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 3261
                        localctx.right = self.valueExpression(7)
                        pass

                    elif la_ == 2:
                        localctx = fugue_sqlParser.ArithmeticBinaryContext(self, fugue_sqlParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 3262
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 3263
                        localctx.theOperator = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not((((_la - 314)) & ~0x3f) == 0 and ((1 << (_la - 314)) & 515) != 0):
                            localctx.theOperator = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 3264
                        localctx.right = self.valueExpression(6)
                        pass

                    elif la_ == 3:
                        localctx = fugue_sqlParser.ArithmeticBinaryContext(self, fugue_sqlParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 3265
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 3266
                        localctx.theOperator = self.match(fugue_sqlParser.AMPERSAND)
                        self.state = 3267
                        localctx.right = self.valueExpression(5)
                        pass

                    elif la_ == 4:
                        localctx = fugue_sqlParser.ArithmeticBinaryContext(self, fugue_sqlParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 3268
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 3269
                        localctx.theOperator = self.match(fugue_sqlParser.HAT)
                        self.state = 3270
                        localctx.right = self.valueExpression(4)
                        pass

                    elif la_ == 5:
                        localctx = fugue_sqlParser.ArithmeticBinaryContext(self, fugue_sqlParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 3271
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 3272
                        localctx.theOperator = self.match(fugue_sqlParser.PIPE)
                        self.state = 3273
                        localctx.right = self.valueExpression(3)
                        pass

                    elif la_ == 6:
                        localctx = fugue_sqlParser.ComparisonContext(self, fugue_sqlParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 3274
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 3275
                        self.comparisonOperator()
                        self.state = 3276
                        localctx.right = self.valueExpression(2)
                        pass

             
                self.state = 3282
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,441,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class PrimaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_primaryExpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class StructContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self._namedExpression = None # NamedExpressionContext
            self.argument = list() # of NamedExpressionContexts
            self.copyFrom(ctx)

        def STRUCT(self):
            return self.getToken(fugue_sqlParser.STRUCT, 0)
        def namedExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.NamedExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.NamedExpressionContext,i)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStruct" ):
                return visitor.visitStruct(self)
            else:
                return visitor.visitChildren(self)


    class DereferenceContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.base = None # PrimaryExpressionContext
            self.fieldName = None # IdentifierContext
            self.copyFrom(ctx)

        def primaryExpression(self):
            return self.getTypedRuleContext(fugue_sqlParser.PrimaryExpressionContext,0)

        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDereference" ):
                return visitor.visitDereference(self)
            else:
                return visitor.visitChildren(self)


    class SimpleCaseContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.value = None # ExpressionContext
            self.elseExpression = None # ExpressionContext
            self.copyFrom(ctx)

        def CASE(self):
            return self.getToken(fugue_sqlParser.CASE, 0)
        def END(self):
            return self.getToken(fugue_sqlParser.END, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,i)

        def whenClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.WhenClauseContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.WhenClauseContext,i)

        def ELSE(self):
            return self.getToken(fugue_sqlParser.ELSE, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleCase" ):
                return visitor.visitSimpleCase(self)
            else:
                return visitor.visitChildren(self)


    class ColumnReferenceContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnReference" ):
                return visitor.visitColumnReference(self)
            else:
                return visitor.visitChildren(self)


    class RowConstructorContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def namedExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.NamedExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.NamedExpressionContext,i)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRowConstructor" ):
                return visitor.visitRowConstructor(self)
            else:
                return visitor.visitChildren(self)


    class LastContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LAST(self):
            return self.getToken(fugue_sqlParser.LAST, 0)
        def expression(self):
            return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,0)

        def IGNORE(self):
            return self.getToken(fugue_sqlParser.IGNORE, 0)
        def THENULLS(self):
            return self.getToken(fugue_sqlParser.THENULLS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLast" ):
                return visitor.visitLast(self)
            else:
                return visitor.visitChildren(self)


    class StarContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ASTERISK(self):
            return self.getToken(fugue_sqlParser.ASTERISK, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(fugue_sqlParser.QualifiedNameContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStar" ):
                return visitor.visitStar(self)
            else:
                return visitor.visitChildren(self)


    class OverlayContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.iinput = None # ValueExpressionContext
            self.replace = None # ValueExpressionContext
            self.position = None # ValueExpressionContext
            self.length = None # ValueExpressionContext
            self.copyFrom(ctx)

        def OVERLAY(self):
            return self.getToken(fugue_sqlParser.OVERLAY, 0)
        def PLACING(self):
            return self.getToken(fugue_sqlParser.PLACING, 0)
        def FROM(self):
            return self.getToken(fugue_sqlParser.FROM, 0)
        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ValueExpressionContext,i)

        def FOR(self):
            return self.getToken(fugue_sqlParser.FOR, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOverlay" ):
                return visitor.visitOverlay(self)
            else:
                return visitor.visitChildren(self)


    class SubscriptContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.value = None # PrimaryExpressionContext
            self.index = None # ValueExpressionContext
            self.copyFrom(ctx)

        def primaryExpression(self):
            return self.getTypedRuleContext(fugue_sqlParser.PrimaryExpressionContext,0)

        def valueExpression(self):
            return self.getTypedRuleContext(fugue_sqlParser.ValueExpressionContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubscript" ):
                return visitor.visitSubscript(self)
            else:
                return visitor.visitChildren(self)


    class SubqueryExpressionContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def query(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubqueryExpression" ):
                return visitor.visitSubqueryExpression(self)
            else:
                return visitor.visitChildren(self)


    class SubstringContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.istr = None # ValueExpressionContext
            self.pos = None # ValueExpressionContext
            self.ilen = None # ValueExpressionContext
            self.copyFrom(ctx)

        def SUBSTR(self):
            return self.getToken(fugue_sqlParser.SUBSTR, 0)
        def SUBSTRING(self):
            return self.getToken(fugue_sqlParser.SUBSTRING, 0)
        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ValueExpressionContext,i)

        def FROM(self):
            return self.getToken(fugue_sqlParser.FROM, 0)
        def FOR(self):
            return self.getToken(fugue_sqlParser.FOR, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubstring" ):
                return visitor.visitSubstring(self)
            else:
                return visitor.visitChildren(self)


    class CurrentDatetimeContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.name = None # Token
            self.copyFrom(ctx)

        def CURRENT_DATE(self):
            return self.getToken(fugue_sqlParser.CURRENT_DATE, 0)
        def CURRENT_TIMESTAMP(self):
            return self.getToken(fugue_sqlParser.CURRENT_TIMESTAMP, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCurrentDatetime" ):
                return visitor.visitCurrentDatetime(self)
            else:
                return visitor.visitChildren(self)


    class CastContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CAST(self):
            return self.getToken(fugue_sqlParser.CAST, 0)
        def expression(self):
            return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,0)

        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)
        def dataType(self):
            return self.getTypedRuleContext(fugue_sqlParser.DataTypeContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCast" ):
                return visitor.visitCast(self)
            else:
                return visitor.visitChildren(self)


    class ConstantDefaultContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def constant(self):
            return self.getTypedRuleContext(fugue_sqlParser.ConstantContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstantDefault" ):
                return visitor.visitConstantDefault(self)
            else:
                return visitor.visitChildren(self)


    class LambdaContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,i)

        def expression(self):
            return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambda" ):
                return visitor.visitLambda(self)
            else:
                return visitor.visitChildren(self)


    class ParenthesizedExpressionContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParenthesizedExpression" ):
                return visitor.visitParenthesizedExpression(self)
            else:
                return visitor.visitChildren(self)


    class ExtractContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.field = None # IdentifierContext
            self.source = None # ValueExpressionContext
            self.copyFrom(ctx)

        def EXTRACT(self):
            return self.getToken(fugue_sqlParser.EXTRACT, 0)
        def FROM(self):
            return self.getToken(fugue_sqlParser.FROM, 0)
        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)

        def valueExpression(self):
            return self.getTypedRuleContext(fugue_sqlParser.ValueExpressionContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExtract" ):
                return visitor.visitExtract(self)
            else:
                return visitor.visitChildren(self)


    class TrimContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.trimOption = None # Token
            self.trimStr = None # ValueExpressionContext
            self.srcStr = None # ValueExpressionContext
            self.copyFrom(ctx)

        def TRIM(self):
            return self.getToken(fugue_sqlParser.TRIM, 0)
        def FROM(self):
            return self.getToken(fugue_sqlParser.FROM, 0)
        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ValueExpressionContext,i)

        def BOTH(self):
            return self.getToken(fugue_sqlParser.BOTH, 0)
        def LEADING(self):
            return self.getToken(fugue_sqlParser.LEADING, 0)
        def TRAILING(self):
            return self.getToken(fugue_sqlParser.TRAILING, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTrim" ):
                return visitor.visitTrim(self)
            else:
                return visitor.visitChildren(self)


    class FunctionCallContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self._expression = None # ExpressionContext
            self.argument = list() # of ExpressionContexts
            self.where = None # BooleanExpressionContext
            self.copyFrom(ctx)

        def functionName(self):
            return self.getTypedRuleContext(fugue_sqlParser.FunctionNameContext,0)

        def FILTER(self):
            return self.getToken(fugue_sqlParser.FILTER, 0)
        def WHERE(self):
            return self.getToken(fugue_sqlParser.WHERE, 0)
        def OVER(self):
            return self.getToken(fugue_sqlParser.OVER, 0)
        def windowSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.WindowSpecContext,0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,i)

        def booleanExpression(self):
            return self.getTypedRuleContext(fugue_sqlParser.BooleanExpressionContext,0)

        def setQuantifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.SetQuantifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionCall" ):
                return visitor.visitFunctionCall(self)
            else:
                return visitor.visitChildren(self)


    class SearchedCaseContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.elseExpression = None # ExpressionContext
            self.copyFrom(ctx)

        def CASE(self):
            return self.getToken(fugue_sqlParser.CASE, 0)
        def END(self):
            return self.getToken(fugue_sqlParser.END, 0)
        def whenClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.WhenClauseContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.WhenClauseContext,i)

        def ELSE(self):
            return self.getToken(fugue_sqlParser.ELSE, 0)
        def expression(self):
            return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSearchedCase" ):
                return visitor.visitSearchedCase(self)
            else:
                return visitor.visitChildren(self)


    class PositionContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.substr = None # ValueExpressionContext
            self.istr = None # ValueExpressionContext
            self.copyFrom(ctx)

        def POSITION(self):
            return self.getToken(fugue_sqlParser.POSITION, 0)
        def IN(self):
            return self.getToken(fugue_sqlParser.IN, 0)
        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ValueExpressionContext,i)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPosition" ):
                return visitor.visitPosition(self)
            else:
                return visitor.visitChildren(self)


    class FirstContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FIRST(self):
            return self.getToken(fugue_sqlParser.FIRST, 0)
        def expression(self):
            return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,0)

        def IGNORE(self):
            return self.getToken(fugue_sqlParser.IGNORE, 0)
        def THENULLS(self):
            return self.getToken(fugue_sqlParser.THENULLS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFirst" ):
                return visitor.visitFirst(self)
            else:
                return visitor.visitChildren(self)



    def primaryExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = fugue_sqlParser.PrimaryExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 346
        self.enterRecursionRule(localctx, 346, self.RULE_primaryExpression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3467
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,461,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.CurrentDatetimeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 3284
                localctx.name = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==98 or _la==100):
                    localctx.name = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.SearchedCaseContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3285
                self.match(fugue_sqlParser.CASE)
                self.state = 3287 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 3286
                    self.whenClause()
                    self.state = 3289 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==300):
                        break

                self.state = 3293
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==118:
                    self.state = 3291
                    self.match(fugue_sqlParser.ELSE)
                    self.state = 3292
                    localctx.elseExpression = self.expression()


                self.state = 3295
                self.match(fugue_sqlParser.END)
                pass

            elif la_ == 3:
                localctx = fugue_sqlParser.SimpleCaseContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3297
                self.match(fugue_sqlParser.CASE)
                self.state = 3298
                localctx.value = self.expression()
                self.state = 3300 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 3299
                    self.whenClause()
                    self.state = 3302 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==300):
                        break

                self.state = 3306
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==118:
                    self.state = 3304
                    self.match(fugue_sqlParser.ELSE)
                    self.state = 3305
                    localctx.elseExpression = self.expression()


                self.state = 3308
                self.match(fugue_sqlParser.END)
                pass

            elif la_ == 4:
                localctx = fugue_sqlParser.CastContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3310
                self.match(fugue_sqlParser.CAST)
                self.state = 3311
                self.match(fugue_sqlParser.T__2)
                self.state = 3312
                self.expression()
                self.state = 3313
                self.match(fugue_sqlParser.AS)
                self.state = 3314
                self.dataType()
                self.state = 3315
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 5:
                localctx = fugue_sqlParser.StructContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3317
                self.match(fugue_sqlParser.STRUCT)
                self.state = 3318
                self.match(fugue_sqlParser.T__2)
                self.state = 3327
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((_la) & ~0x3f) == 0 and ((1 << _la) & -9007199254740984) != 0 or (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1) != 0 or (((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -1) != 0 or (((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & -1) != 0 or (((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & -7205196453839372289) != 0 or (((_la - 320)) & ~0x3f) == 0 and ((1 << (_la - 320)) & 65505) != 0:
                    self.state = 3319
                    localctx._namedExpression = self.namedExpression()
                    localctx.argument.append(localctx._namedExpression)
                    self.state = 3324
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1:
                        self.state = 3320
                        self.match(fugue_sqlParser.T__0)
                        self.state = 3321
                        localctx._namedExpression = self.namedExpression()
                        localctx.argument.append(localctx._namedExpression)
                        self.state = 3326
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 3329
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 6:
                localctx = fugue_sqlParser.FirstContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3330
                self.match(fugue_sqlParser.FIRST)
                self.state = 3331
                self.match(fugue_sqlParser.T__2)
                self.state = 3332
                self.expression()
                self.state = 3335
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==152:
                    self.state = 3333
                    self.match(fugue_sqlParser.IGNORE)
                    self.state = 3334
                    self.match(fugue_sqlParser.THENULLS)


                self.state = 3337
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 7:
                localctx = fugue_sqlParser.LastContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3339
                self.match(fugue_sqlParser.LAST)
                self.state = 3340
                self.match(fugue_sqlParser.T__2)
                self.state = 3341
                self.expression()
                self.state = 3344
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==152:
                    self.state = 3342
                    self.match(fugue_sqlParser.IGNORE)
                    self.state = 3343
                    self.match(fugue_sqlParser.THENULLS)


                self.state = 3346
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 8:
                localctx = fugue_sqlParser.PositionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3348
                self.match(fugue_sqlParser.POSITION)
                self.state = 3349
                self.match(fugue_sqlParser.T__2)
                self.state = 3350
                localctx.substr = self.valueExpression(0)
                self.state = 3351
                self.match(fugue_sqlParser.IN)
                self.state = 3352
                localctx.istr = self.valueExpression(0)
                self.state = 3353
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 9:
                localctx = fugue_sqlParser.ConstantDefaultContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3355
                self.constant()
                pass

            elif la_ == 10:
                localctx = fugue_sqlParser.StarContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3356
                self.match(fugue_sqlParser.ASTERISK)
                pass

            elif la_ == 11:
                localctx = fugue_sqlParser.StarContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3357
                self.qualifiedName()
                self.state = 3358
                self.match(fugue_sqlParser.T__6)
                self.state = 3359
                self.match(fugue_sqlParser.ASTERISK)
                pass

            elif la_ == 12:
                localctx = fugue_sqlParser.RowConstructorContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3361
                self.match(fugue_sqlParser.T__2)
                self.state = 3362
                self.namedExpression()
                self.state = 3365 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 3363
                    self.match(fugue_sqlParser.T__0)
                    self.state = 3364
                    self.namedExpression()
                    self.state = 3367 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==1):
                        break

                self.state = 3369
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 13:
                localctx = fugue_sqlParser.SubqueryExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3371
                self.match(fugue_sqlParser.T__2)
                self.state = 3372
                self.query()
                self.state = 3373
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 14:
                localctx = fugue_sqlParser.FunctionCallContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3375
                self.functionName()
                self.state = 3376
                self.match(fugue_sqlParser.T__2)
                self.state = 3388
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((_la) & ~0x3f) == 0 and ((1 << _la) & -9007199254740984) != 0 or (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1) != 0 or (((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -1) != 0 or (((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & -1) != 0 or (((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & -7205196453839372289) != 0 or (((_la - 320)) & ~0x3f) == 0 and ((1 << (_la - 320)) & 65505) != 0:
                    self.state = 3378
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,451,self._ctx)
                    if la_ == 1:
                        self.state = 3377
                        self.setQuantifier()


                    self.state = 3380
                    localctx._expression = self.expression()
                    localctx.argument.append(localctx._expression)
                    self.state = 3385
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1:
                        self.state = 3381
                        self.match(fugue_sqlParser.T__0)
                        self.state = 3382
                        localctx._expression = self.expression()
                        localctx.argument.append(localctx._expression)
                        self.state = 3387
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 3390
                self.match(fugue_sqlParser.T__3)
                self.state = 3397
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,454,self._ctx)
                if la_ == 1:
                    self.state = 3391
                    self.match(fugue_sqlParser.FILTER)
                    self.state = 3392
                    self.match(fugue_sqlParser.T__2)
                    self.state = 3393
                    self.match(fugue_sqlParser.WHERE)
                    self.state = 3394
                    localctx.where = self.booleanExpression(0)
                    self.state = 3395
                    self.match(fugue_sqlParser.T__3)


                self.state = 3401
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,455,self._ctx)
                if la_ == 1:
                    self.state = 3399
                    self.match(fugue_sqlParser.OVER)
                    self.state = 3400
                    self.windowSpec()


                pass

            elif la_ == 15:
                localctx = fugue_sqlParser.LambdaContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3403
                self.identifier()
                self.state = 3404
                self.match(fugue_sqlParser.T__15)
                self.state = 3405
                self.expression()
                pass

            elif la_ == 16:
                localctx = fugue_sqlParser.LambdaContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3407
                self.match(fugue_sqlParser.T__2)
                self.state = 3408
                self.identifier()
                self.state = 3411 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 3409
                    self.match(fugue_sqlParser.T__0)
                    self.state = 3410
                    self.identifier()
                    self.state = 3413 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==1):
                        break

                self.state = 3415
                self.match(fugue_sqlParser.T__3)
                self.state = 3416
                self.match(fugue_sqlParser.T__15)
                self.state = 3417
                self.expression()
                pass

            elif la_ == 17:
                localctx = fugue_sqlParser.ColumnReferenceContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3419
                self.identifier()
                pass

            elif la_ == 18:
                localctx = fugue_sqlParser.ParenthesizedExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3420
                self.match(fugue_sqlParser.T__2)
                self.state = 3421
                self.expression()
                self.state = 3422
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 19:
                localctx = fugue_sqlParser.ExtractContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3424
                self.match(fugue_sqlParser.EXTRACT)
                self.state = 3425
                self.match(fugue_sqlParser.T__2)
                self.state = 3426
                localctx.field = self.identifier()
                self.state = 3427
                self.match(fugue_sqlParser.FROM)
                self.state = 3428
                localctx.source = self.valueExpression(0)
                self.state = 3429
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 20:
                localctx = fugue_sqlParser.SubstringContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3431
                _la = self._input.LA(1)
                if not(_la==266 or _la==267):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3432
                self.match(fugue_sqlParser.T__2)
                self.state = 3433
                localctx.istr = self.valueExpression(0)
                self.state = 3434
                _la = self._input.LA(1)
                if not(_la==1 or _la==141):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3435
                localctx.pos = self.valueExpression(0)
                self.state = 3438
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1 or _la==137:
                    self.state = 3436
                    _la = self._input.LA(1)
                    if not(_la==1 or _la==137):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 3437
                    localctx.ilen = self.valueExpression(0)


                self.state = 3440
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 21:
                localctx = fugue_sqlParser.TrimContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3442
                self.match(fugue_sqlParser.TRIM)
                self.state = 3443
                self.match(fugue_sqlParser.T__2)
                self.state = 3445
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,458,self._ctx)
                if la_ == 1:
                    self.state = 3444
                    localctx.trimOption = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==68 or _la==171 or _la==277):
                        localctx.trimOption = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 3448
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,459,self._ctx)
                if la_ == 1:
                    self.state = 3447
                    localctx.trimStr = self.valueExpression(0)


                self.state = 3450
                self.match(fugue_sqlParser.FROM)
                self.state = 3451
                localctx.srcStr = self.valueExpression(0)
                self.state = 3452
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 22:
                localctx = fugue_sqlParser.OverlayContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3454
                self.match(fugue_sqlParser.OVERLAY)
                self.state = 3455
                self.match(fugue_sqlParser.T__2)
                self.state = 3456
                localctx.iinput = self.valueExpression(0)
                self.state = 3457
                self.match(fugue_sqlParser.PLACING)
                self.state = 3458
                localctx.replace = self.valueExpression(0)
                self.state = 3459
                self.match(fugue_sqlParser.FROM)
                self.state = 3460
                localctx.position = self.valueExpression(0)
                self.state = 3463
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==137:
                    self.state = 3461
                    self.match(fugue_sqlParser.FOR)
                    self.state = 3462
                    localctx.length = self.valueExpression(0)


                self.state = 3465
                self.match(fugue_sqlParser.T__3)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 3479
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,463,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 3477
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,462,self._ctx)
                    if la_ == 1:
                        localctx = fugue_sqlParser.SubscriptContext(self, fugue_sqlParser.PrimaryExpressionContext(self, _parentctx, _parentState))
                        localctx.value = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_primaryExpression)
                        self.state = 3469
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 3470
                        self.match(fugue_sqlParser.T__4)
                        self.state = 3471
                        localctx.index = self.valueExpression(0)
                        self.state = 3472
                        self.match(fugue_sqlParser.T__5)
                        pass

                    elif la_ == 2:
                        localctx = fugue_sqlParser.DereferenceContext(self, fugue_sqlParser.PrimaryExpressionContext(self, _parentctx, _parentState))
                        localctx.base = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_primaryExpression)
                        self.state = 3474
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 3475
                        self.match(fugue_sqlParser.T__6)
                        self.state = 3476
                        localctx.fieldName = self.identifier()
                        pass

             
                self.state = 3481
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,463,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ConstantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_constant

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class NullLiteralContext(ConstantContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.ConstantContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def THENULL(self):
            return self.getToken(fugue_sqlParser.THENULL, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNullLiteral" ):
                return visitor.visitNullLiteral(self)
            else:
                return visitor.visitChildren(self)


    class StringLiteralContext(ConstantContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.ConstantContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.STRING)
            else:
                return self.getToken(fugue_sqlParser.STRING, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringLiteral" ):
                return visitor.visitStringLiteral(self)
            else:
                return visitor.visitChildren(self)


    class TypeConstructorContext(ConstantContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.ConstantContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)

        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeConstructor" ):
                return visitor.visitTypeConstructor(self)
            else:
                return visitor.visitChildren(self)


    class IntervalLiteralContext(ConstantContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.ConstantContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def interval(self):
            return self.getTypedRuleContext(fugue_sqlParser.IntervalContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntervalLiteral" ):
                return visitor.visitIntervalLiteral(self)
            else:
                return visitor.visitChildren(self)


    class NumericLiteralContext(ConstantContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.ConstantContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def number(self):
            return self.getTypedRuleContext(fugue_sqlParser.NumberContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumericLiteral" ):
                return visitor.visitNumericLiteral(self)
            else:
                return visitor.visitChildren(self)


    class BooleanLiteralContext(ConstantContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.ConstantContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def booleanValue(self):
            return self.getTypedRuleContext(fugue_sqlParser.BooleanValueContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBooleanLiteral" ):
                return visitor.visitBooleanLiteral(self)
            else:
                return visitor.visitChildren(self)



    def constant(self):

        localctx = fugue_sqlParser.ConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 348, self.RULE_constant)
        try:
            self.state = 3494
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,465,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.NullLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3482
                self.match(fugue_sqlParser.THENULL)
                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.IntervalLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3483
                self.interval()
                pass

            elif la_ == 3:
                localctx = fugue_sqlParser.TypeConstructorContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3484
                self.identifier()
                self.state = 3485
                self.match(fugue_sqlParser.STRING)
                pass

            elif la_ == 4:
                localctx = fugue_sqlParser.NumericLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 3487
                self.number()
                pass

            elif la_ == 5:
                localctx = fugue_sqlParser.BooleanLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 3488
                self.booleanValue()
                pass

            elif la_ == 6:
                localctx = fugue_sqlParser.StringLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 3490 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 3489
                        self.match(fugue_sqlParser.STRING)

                    else:
                        raise NoViableAltException(self)
                    self.state = 3492 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,464,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComparisonOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comparisonEqualOperator(self):
            return self.getTypedRuleContext(fugue_sqlParser.ComparisonEqualOperatorContext,0)


        def NEQ(self):
            return self.getToken(fugue_sqlParser.NEQ, 0)

        def NEQJ(self):
            return self.getToken(fugue_sqlParser.NEQJ, 0)

        def LT(self):
            return self.getToken(fugue_sqlParser.LT, 0)

        def LTE(self):
            return self.getToken(fugue_sqlParser.LTE, 0)

        def GT(self):
            return self.getToken(fugue_sqlParser.GT, 0)

        def GTE(self):
            return self.getToken(fugue_sqlParser.GTE, 0)

        def NSEQ(self):
            return self.getToken(fugue_sqlParser.NSEQ, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_comparisonOperator

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparisonOperator" ):
                return visitor.visitComparisonOperator(self)
            else:
                return visitor.visitChildren(self)




    def comparisonOperator(self):

        localctx = fugue_sqlParser.ComparisonOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 350, self.RULE_comparisonOperator)
        try:
            self.state = 3504
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [305, 306]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3496
                self.comparisonEqualOperator()
                pass
            elif token in [308]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3497
                self.match(fugue_sqlParser.NEQ)
                pass
            elif token in [309]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3498
                self.match(fugue_sqlParser.NEQJ)
                pass
            elif token in [310]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3499
                self.match(fugue_sqlParser.LT)
                pass
            elif token in [311]:
                self.enterOuterAlt(localctx, 5)
                self.state = 3500
                self.match(fugue_sqlParser.LTE)
                pass
            elif token in [312]:
                self.enterOuterAlt(localctx, 6)
                self.state = 3501
                self.match(fugue_sqlParser.GT)
                pass
            elif token in [313]:
                self.enterOuterAlt(localctx, 7)
                self.state = 3502
                self.match(fugue_sqlParser.GTE)
                pass
            elif token in [307]:
                self.enterOuterAlt(localctx, 8)
                self.state = 3503
                self.match(fugue_sqlParser.NSEQ)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComparisonEqualOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOUBLEEQUAL(self):
            return self.getToken(fugue_sqlParser.DOUBLEEQUAL, 0)

        def EQUAL(self):
            return self.getToken(fugue_sqlParser.EQUAL, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_comparisonEqualOperator

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparisonEqualOperator" ):
                return visitor.visitComparisonEqualOperator(self)
            else:
                return visitor.visitChildren(self)




    def comparisonEqualOperator(self):

        localctx = fugue_sqlParser.ComparisonEqualOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 352, self.RULE_comparisonEqualOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3506
            _la = self._input.LA(1)
            if not(_la==305 or _la==306):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArithmeticOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLUS(self):
            return self.getToken(fugue_sqlParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(fugue_sqlParser.MINUS, 0)

        def ASTERISK(self):
            return self.getToken(fugue_sqlParser.ASTERISK, 0)

        def SLASH(self):
            return self.getToken(fugue_sqlParser.SLASH, 0)

        def PERCENT(self):
            return self.getToken(fugue_sqlParser.PERCENT, 0)

        def DIV(self):
            return self.getToken(fugue_sqlParser.DIV, 0)

        def TILDE(self):
            return self.getToken(fugue_sqlParser.TILDE, 0)

        def AMPERSAND(self):
            return self.getToken(fugue_sqlParser.AMPERSAND, 0)

        def PIPE(self):
            return self.getToken(fugue_sqlParser.PIPE, 0)

        def CONCAT_PIPE(self):
            return self.getToken(fugue_sqlParser.CONCAT_PIPE, 0)

        def HAT(self):
            return self.getToken(fugue_sqlParser.HAT, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_arithmeticOperator

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArithmeticOperator" ):
                return visitor.visitArithmeticOperator(self)
            else:
                return visitor.visitChildren(self)




    def arithmeticOperator(self):

        localctx = fugue_sqlParser.ArithmeticOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 354, self.RULE_arithmeticOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3508
            _la = self._input.LA(1)
            if not((((_la - 314)) & ~0x3f) == 0 and ((1 << (_la - 314)) & 2047) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PredicateOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OR(self):
            return self.getToken(fugue_sqlParser.OR, 0)

        def AND(self):
            return self.getToken(fugue_sqlParser.AND, 0)

        def IN(self):
            return self.getToken(fugue_sqlParser.IN, 0)

        def NOT(self):
            return self.getToken(fugue_sqlParser.NOT, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_predicateOperator

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPredicateOperator" ):
                return visitor.visitPredicateOperator(self)
            else:
                return visitor.visitChildren(self)




    def predicateOperator(self):

        localctx = fugue_sqlParser.PredicateOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 356, self.RULE_predicateOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3510
            _la = self._input.LA(1)
            if not(_la==58 or (((_la - 154)) & ~0x3f) == 0 and ((1 << (_la - 154)) & 282574488338433) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(fugue_sqlParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(fugue_sqlParser.FALSE, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_booleanValue

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBooleanValue" ):
                return visitor.visitBooleanValue(self)
            else:
                return visitor.visitChildren(self)




    def booleanValue(self):

        localctx = fugue_sqlParser.BooleanValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 358, self.RULE_booleanValue)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3512
            _la = self._input.LA(1)
            if not(_la==130 or _la==282):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTERVAL(self):
            return self.getToken(fugue_sqlParser.INTERVAL, 0)

        def errorCapturingMultiUnitsInterval(self):
            return self.getTypedRuleContext(fugue_sqlParser.ErrorCapturingMultiUnitsIntervalContext,0)


        def errorCapturingUnitToUnitInterval(self):
            return self.getTypedRuleContext(fugue_sqlParser.ErrorCapturingUnitToUnitIntervalContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_interval

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterval" ):
                return visitor.visitInterval(self)
            else:
                return visitor.visitChildren(self)




    def interval(self):

        localctx = fugue_sqlParser.IntervalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 360, self.RULE_interval)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3514
            self.match(fugue_sqlParser.INTERVAL)
            self.state = 3517
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,467,self._ctx)
            if la_ == 1:
                self.state = 3515
                self.errorCapturingMultiUnitsInterval()

            elif la_ == 2:
                self.state = 3516
                self.errorCapturingUnitToUnitInterval()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ErrorCapturingMultiUnitsIntervalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multiUnitsInterval(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultiUnitsIntervalContext,0)


        def unitToUnitInterval(self):
            return self.getTypedRuleContext(fugue_sqlParser.UnitToUnitIntervalContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_errorCapturingMultiUnitsInterval

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitErrorCapturingMultiUnitsInterval" ):
                return visitor.visitErrorCapturingMultiUnitsInterval(self)
            else:
                return visitor.visitChildren(self)




    def errorCapturingMultiUnitsInterval(self):

        localctx = fugue_sqlParser.ErrorCapturingMultiUnitsIntervalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 362, self.RULE_errorCapturingMultiUnitsInterval)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3519
            self.multiUnitsInterval()
            self.state = 3521
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,468,self._ctx)
            if la_ == 1:
                self.state = 3520
                self.unitToUnitInterval()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiUnitsIntervalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def intervalValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.IntervalValueContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.IntervalValueContext,i)


        def intervalUnit(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.IntervalUnitContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.IntervalUnitContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_multiUnitsInterval

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiUnitsInterval" ):
                return visitor.visitMultiUnitsInterval(self)
            else:
                return visitor.visitChildren(self)




    def multiUnitsInterval(self):

        localctx = fugue_sqlParser.MultiUnitsIntervalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 364, self.RULE_multiUnitsInterval)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3526 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 3523
                    self.intervalValue()
                    self.state = 3524
                    self.intervalUnit()

                else:
                    raise NoViableAltException(self)
                self.state = 3528 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,469,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ErrorCapturingUnitToUnitIntervalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.body = None # UnitToUnitIntervalContext
            self.error1 = None # MultiUnitsIntervalContext
            self.error2 = None # UnitToUnitIntervalContext

        def unitToUnitInterval(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.UnitToUnitIntervalContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.UnitToUnitIntervalContext,i)


        def multiUnitsInterval(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultiUnitsIntervalContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_errorCapturingUnitToUnitInterval

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitErrorCapturingUnitToUnitInterval" ):
                return visitor.visitErrorCapturingUnitToUnitInterval(self)
            else:
                return visitor.visitChildren(self)




    def errorCapturingUnitToUnitInterval(self):

        localctx = fugue_sqlParser.ErrorCapturingUnitToUnitIntervalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 366, self.RULE_errorCapturingUnitToUnitInterval)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3530
            localctx.body = self.unitToUnitInterval()
            self.state = 3533
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,470,self._ctx)
            if la_ == 1:
                self.state = 3531
                localctx.error1 = self.multiUnitsInterval()

            elif la_ == 2:
                self.state = 3532
                localctx.error2 = self.unitToUnitInterval()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnitToUnitIntervalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.value = None # IntervalValueContext
            self.ifrom = None # IntervalUnitContext
            self.to = None # IntervalUnitContext

        def TO(self):
            return self.getToken(fugue_sqlParser.TO, 0)

        def intervalValue(self):
            return self.getTypedRuleContext(fugue_sqlParser.IntervalValueContext,0)


        def intervalUnit(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.IntervalUnitContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.IntervalUnitContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_unitToUnitInterval

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnitToUnitInterval" ):
                return visitor.visitUnitToUnitInterval(self)
            else:
                return visitor.visitChildren(self)




    def unitToUnitInterval(self):

        localctx = fugue_sqlParser.UnitToUnitIntervalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 368, self.RULE_unitToUnitInterval)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3535
            localctx.value = self.intervalValue()
            self.state = 3536
            localctx.ifrom = self.intervalUnit()
            self.state = 3537
            self.match(fugue_sqlParser.TO)
            self.state = 3538
            localctx.to = self.intervalUnit()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGER_VALUE(self):
            return self.getToken(fugue_sqlParser.INTEGER_VALUE, 0)

        def DECIMAL_VALUE(self):
            return self.getToken(fugue_sqlParser.DECIMAL_VALUE, 0)

        def PLUS(self):
            return self.getToken(fugue_sqlParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(fugue_sqlParser.MINUS, 0)

        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_intervalValue

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntervalValue" ):
                return visitor.visitIntervalValue(self)
            else:
                return visitor.visitChildren(self)




    def intervalValue(self):

        localctx = fugue_sqlParser.IntervalValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 370, self.RULE_intervalValue)
        self._la = 0 # Token type
        try:
            self.state = 3545
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [314, 315, 329, 331]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3541
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==314 or _la==315:
                    self.state = 3540
                    _la = self._input.LA(1)
                    if not(_la==314 or _la==315):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 3543
                _la = self._input.LA(1)
                if not(_la==329 or _la==331):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [325]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3544
                self.match(fugue_sqlParser.STRING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalUnitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DAY(self):
            return self.getToken(fugue_sqlParser.DAY, 0)

        def HOUR(self):
            return self.getToken(fugue_sqlParser.HOUR, 0)

        def MINUTE(self):
            return self.getToken(fugue_sqlParser.MINUTE, 0)

        def MONTH(self):
            return self.getToken(fugue_sqlParser.MONTH, 0)

        def SECOND(self):
            return self.getToken(fugue_sqlParser.SECOND, 0)

        def YEAR(self):
            return self.getToken(fugue_sqlParser.YEAR, 0)

        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_intervalUnit

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntervalUnit" ):
                return visitor.visitIntervalUnit(self)
            else:
                return visitor.visitChildren(self)




    def intervalUnit(self):

        localctx = fugue_sqlParser.IntervalUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 372, self.RULE_intervalUnit)
        try:
            self.state = 3554
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,473,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3547
                self.match(fugue_sqlParser.DAY)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3548
                self.match(fugue_sqlParser.HOUR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3549
                self.match(fugue_sqlParser.MINUTE)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3550
                self.match(fugue_sqlParser.MONTH)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3551
                self.match(fugue_sqlParser.SECOND)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3552
                self.match(fugue_sqlParser.YEAR)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 3553
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColPositionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.position = None # Token
            self.afterCol = None # ErrorCapturingIdentifierContext

        def FIRST(self):
            return self.getToken(fugue_sqlParser.FIRST, 0)

        def AFTER(self):
            return self.getToken(fugue_sqlParser.AFTER, 0)

        def errorCapturingIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.ErrorCapturingIdentifierContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_colPosition

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColPosition" ):
                return visitor.visitColPosition(self)
            else:
                return visitor.visitChildren(self)




    def colPosition(self):

        localctx = fugue_sqlParser.ColPositionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 374, self.RULE_colPosition)
        try:
            self.state = 3559
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [135]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3556
                localctx.position = self.match(fugue_sqlParser.FIRST)
                pass
            elif token in [54]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3557
                localctx.position = self.match(fugue_sqlParser.AFTER)
                self.state = 3558
                localctx.afterCol = self.errorCapturingIdentifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_dataType

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ComplexDataTypeContext(DataTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.DataTypeContext
            super().__init__(parser)
            self.icomplex = None # Token
            self.copyFrom(ctx)

        def LT(self):
            return self.getToken(fugue_sqlParser.LT, 0)
        def dataType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.DataTypeContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.DataTypeContext,i)

        def GT(self):
            return self.getToken(fugue_sqlParser.GT, 0)
        def ARRAY(self):
            return self.getToken(fugue_sqlParser.ARRAY, 0)
        def MAP(self):
            return self.getToken(fugue_sqlParser.MAP, 0)
        def STRUCT(self):
            return self.getToken(fugue_sqlParser.STRUCT, 0)
        def NEQ(self):
            return self.getToken(fugue_sqlParser.NEQ, 0)
        def complexColTypeList(self):
            return self.getTypedRuleContext(fugue_sqlParser.ComplexColTypeListContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComplexDataType" ):
                return visitor.visitComplexDataType(self)
            else:
                return visitor.visitChildren(self)


    class PrimitiveDataTypeContext(DataTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.DataTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)

        def INTEGER_VALUE(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.INTEGER_VALUE)
            else:
                return self.getToken(fugue_sqlParser.INTEGER_VALUE, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimitiveDataType" ):
                return visitor.visitPrimitiveDataType(self)
            else:
                return visitor.visitChildren(self)



    def dataType(self):

        localctx = fugue_sqlParser.DataTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 376, self.RULE_dataType)
        self._la = 0 # Token type
        try:
            self.state = 3595
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,479,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.ComplexDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3561
                localctx.icomplex = self.match(fugue_sqlParser.ARRAY)
                self.state = 3562
                self.match(fugue_sqlParser.LT)
                self.state = 3563
                self.dataType()
                self.state = 3564
                self.match(fugue_sqlParser.GT)
                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.ComplexDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3566
                localctx.icomplex = self.match(fugue_sqlParser.MAP)
                self.state = 3567
                self.match(fugue_sqlParser.LT)
                self.state = 3568
                self.dataType()
                self.state = 3569
                self.match(fugue_sqlParser.T__0)
                self.state = 3570
                self.dataType()
                self.state = 3571
                self.match(fugue_sqlParser.GT)
                pass

            elif la_ == 3:
                localctx = fugue_sqlParser.ComplexDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3573
                localctx.icomplex = self.match(fugue_sqlParser.STRUCT)
                self.state = 3580
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [310]:
                    self.state = 3574
                    self.match(fugue_sqlParser.LT)
                    self.state = 3576
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la - 53)) & ~0x3f) == 0 and ((1 << (_la - 53)) & -1) != 0 or (((_la - 117)) & ~0x3f) == 0 and ((1 << (_la - 117)) & -1) != 0 or (((_la - 181)) & ~0x3f) == 0 and ((1 << (_la - 181)) & -1) != 0 or (((_la - 245)) & ~0x3f) == 0 and ((1 << (_la - 245)) & 1152921504606846975) != 0 or (((_la - 319)) & ~0x3f) == 0 and ((1 << (_la - 319)) & 98305) != 0:
                        self.state = 3575
                        self.complexColTypeList()


                    self.state = 3578
                    self.match(fugue_sqlParser.GT)
                    pass
                elif token in [308]:
                    self.state = 3579
                    self.match(fugue_sqlParser.NEQ)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 4:
                localctx = fugue_sqlParser.PrimitiveDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 3582
                self.identifier()
                self.state = 3593
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,478,self._ctx)
                if la_ == 1:
                    self.state = 3583
                    self.match(fugue_sqlParser.T__2)
                    self.state = 3584
                    self.match(fugue_sqlParser.INTEGER_VALUE)
                    self.state = 3589
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1:
                        self.state = 3585
                        self.match(fugue_sqlParser.T__0)
                        self.state = 3586
                        self.match(fugue_sqlParser.INTEGER_VALUE)
                        self.state = 3591
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 3592
                    self.match(fugue_sqlParser.T__3)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedColTypeWithPositionListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedColTypeWithPosition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.QualifiedColTypeWithPositionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.QualifiedColTypeWithPositionContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_qualifiedColTypeWithPositionList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualifiedColTypeWithPositionList" ):
                return visitor.visitQualifiedColTypeWithPositionList(self)
            else:
                return visitor.visitChildren(self)




    def qualifiedColTypeWithPositionList(self):

        localctx = fugue_sqlParser.QualifiedColTypeWithPositionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 378, self.RULE_qualifiedColTypeWithPositionList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3597
            self.qualifiedColTypeWithPosition()
            self.state = 3602
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1:
                self.state = 3598
                self.match(fugue_sqlParser.T__0)
                self.state = 3599
                self.qualifiedColTypeWithPosition()
                self.state = 3604
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedColTypeWithPositionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # MultipartIdentifierContext

        def dataType(self):
            return self.getTypedRuleContext(fugue_sqlParser.DataTypeContext,0)


        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)


        def NOT(self):
            return self.getToken(fugue_sqlParser.NOT, 0)

        def THENULL(self):
            return self.getToken(fugue_sqlParser.THENULL, 0)

        def commentSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.CommentSpecContext,0)


        def colPosition(self):
            return self.getTypedRuleContext(fugue_sqlParser.ColPositionContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_qualifiedColTypeWithPosition

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualifiedColTypeWithPosition" ):
                return visitor.visitQualifiedColTypeWithPosition(self)
            else:
                return visitor.visitChildren(self)




    def qualifiedColTypeWithPosition(self):

        localctx = fugue_sqlParser.QualifiedColTypeWithPositionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 380, self.RULE_qualifiedColTypeWithPosition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3605
            localctx.name = self.multipartIdentifier()
            self.state = 3606
            self.dataType()
            self.state = 3609
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==194:
                self.state = 3607
                self.match(fugue_sqlParser.NOT)
                self.state = 3608
                self.match(fugue_sqlParser.THENULL)


            self.state = 3612
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==86:
                self.state = 3611
                self.commentSpec()


            self.state = 3615
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==54 or _la==135:
                self.state = 3614
                self.colPosition()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColTypeListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ColTypeContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ColTypeContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_colTypeList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColTypeList" ):
                return visitor.visitColTypeList(self)
            else:
                return visitor.visitChildren(self)




    def colTypeList(self):

        localctx = fugue_sqlParser.ColTypeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 382, self.RULE_colTypeList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3617
            self.colType()
            self.state = 3622
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,484,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3618
                    self.match(fugue_sqlParser.T__0)
                    self.state = 3619
                    self.colType() 
                self.state = 3624
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,484,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.colName = None # ErrorCapturingIdentifierContext

        def dataType(self):
            return self.getTypedRuleContext(fugue_sqlParser.DataTypeContext,0)


        def errorCapturingIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.ErrorCapturingIdentifierContext,0)


        def NOT(self):
            return self.getToken(fugue_sqlParser.NOT, 0)

        def THENULL(self):
            return self.getToken(fugue_sqlParser.THENULL, 0)

        def commentSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.CommentSpecContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_colType

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColType" ):
                return visitor.visitColType(self)
            else:
                return visitor.visitChildren(self)




    def colType(self):

        localctx = fugue_sqlParser.ColTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 384, self.RULE_colType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3625
            localctx.colName = self.errorCapturingIdentifier()
            self.state = 3626
            self.dataType()
            self.state = 3629
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,485,self._ctx)
            if la_ == 1:
                self.state = 3627
                self.match(fugue_sqlParser.NOT)
                self.state = 3628
                self.match(fugue_sqlParser.THENULL)


            self.state = 3632
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,486,self._ctx)
            if la_ == 1:
                self.state = 3631
                self.commentSpec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComplexColTypeListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def complexColType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ComplexColTypeContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ComplexColTypeContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_complexColTypeList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComplexColTypeList" ):
                return visitor.visitComplexColTypeList(self)
            else:
                return visitor.visitChildren(self)




    def complexColTypeList(self):

        localctx = fugue_sqlParser.ComplexColTypeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 386, self.RULE_complexColTypeList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3634
            self.complexColType()
            self.state = 3639
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1:
                self.state = 3635
                self.match(fugue_sqlParser.T__0)
                self.state = 3636
                self.complexColType()
                self.state = 3641
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComplexColTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)


        def dataType(self):
            return self.getTypedRuleContext(fugue_sqlParser.DataTypeContext,0)


        def NOT(self):
            return self.getToken(fugue_sqlParser.NOT, 0)

        def THENULL(self):
            return self.getToken(fugue_sqlParser.THENULL, 0)

        def commentSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.CommentSpecContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_complexColType

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComplexColType" ):
                return visitor.visitComplexColType(self)
            else:
                return visitor.visitChildren(self)




    def complexColType(self):

        localctx = fugue_sqlParser.ComplexColTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 388, self.RULE_complexColType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3642
            self.identifier()
            self.state = 3643
            self.match(fugue_sqlParser.T__1)
            self.state = 3644
            self.dataType()
            self.state = 3647
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==194:
                self.state = 3645
                self.match(fugue_sqlParser.NOT)
                self.state = 3646
                self.match(fugue_sqlParser.THENULL)


            self.state = 3650
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==86:
                self.state = 3649
                self.commentSpec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhenClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.condition = None # ExpressionContext
            self.result = None # ExpressionContext

        def WHEN(self):
            return self.getToken(fugue_sqlParser.WHEN, 0)

        def THEN(self):
            return self.getToken(fugue_sqlParser.THEN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_whenClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhenClause" ):
                return visitor.visitWhenClause(self)
            else:
                return visitor.visitChildren(self)




    def whenClause(self):

        localctx = fugue_sqlParser.WhenClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 390, self.RULE_whenClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3652
            self.match(fugue_sqlParser.WHEN)
            self.state = 3653
            localctx.condition = self.expression()
            self.state = 3654
            self.match(fugue_sqlParser.THEN)
            self.state = 3655
            localctx.result = self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WINDOW(self):
            return self.getToken(fugue_sqlParser.WINDOW, 0)

        def namedWindow(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.NamedWindowContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.NamedWindowContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_windowClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindowClause" ):
                return visitor.visitWindowClause(self)
            else:
                return visitor.visitChildren(self)




    def windowClause(self):

        localctx = fugue_sqlParser.WindowClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 392, self.RULE_windowClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3657
            self.match(fugue_sqlParser.WINDOW)
            self.state = 3658
            self.namedWindow()
            self.state = 3663
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,490,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3659
                    self.match(fugue_sqlParser.T__0)
                    self.state = 3660
                    self.namedWindow() 
                self.state = 3665
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,490,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedWindowContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # ErrorCapturingIdentifierContext

        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)

        def windowSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.WindowSpecContext,0)


        def errorCapturingIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.ErrorCapturingIdentifierContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_namedWindow

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamedWindow" ):
                return visitor.visitNamedWindow(self)
            else:
                return visitor.visitChildren(self)




    def namedWindow(self):

        localctx = fugue_sqlParser.NamedWindowContext(self, self._ctx, self.state)
        self.enterRule(localctx, 394, self.RULE_namedWindow)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3666
            localctx.name = self.errorCapturingIdentifier()
            self.state = 3667
            self.match(fugue_sqlParser.AS)
            self.state = 3668
            self.windowSpec()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_windowSpec

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class WindowRefContext(WindowSpecContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.WindowSpecContext
            super().__init__(parser)
            self.name = None # ErrorCapturingIdentifierContext
            self.copyFrom(ctx)

        def errorCapturingIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.ErrorCapturingIdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindowRef" ):
                return visitor.visitWindowRef(self)
            else:
                return visitor.visitChildren(self)


    class WindowDefContext(WindowSpecContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.WindowSpecContext
            super().__init__(parser)
            self._expression = None # ExpressionContext
            self.partition = list() # of ExpressionContexts
            self.copyFrom(ctx)

        def CLUSTER(self):
            return self.getToken(fugue_sqlParser.CLUSTER, 0)
        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.BY)
            else:
                return self.getToken(fugue_sqlParser.BY, i)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,i)

        def windowFrame(self):
            return self.getTypedRuleContext(fugue_sqlParser.WindowFrameContext,0)

        def sortItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.SortItemContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.SortItemContext,i)

        def PARTITION(self):
            return self.getToken(fugue_sqlParser.PARTITION, 0)
        def DISTRIBUTE(self):
            return self.getToken(fugue_sqlParser.DISTRIBUTE, 0)
        def ORDER(self):
            return self.getToken(fugue_sqlParser.ORDER, 0)
        def SORT(self):
            return self.getToken(fugue_sqlParser.SORT, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindowDef" ):
                return visitor.visitWindowDef(self)
            else:
                return visitor.visitChildren(self)



    def windowSpec(self):

        localctx = fugue_sqlParser.WindowSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 396, self.RULE_windowSpec)
        self._la = 0 # Token type
        try:
            self.state = 3716
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,498,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.WindowRefContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3670
                localctx.name = self.errorCapturingIdentifier()
                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.WindowRefContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3671
                self.match(fugue_sqlParser.T__2)
                self.state = 3672
                localctx.name = self.errorCapturingIdentifier()
                self.state = 3673
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 3:
                localctx = fugue_sqlParser.WindowDefContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3675
                self.match(fugue_sqlParser.T__2)
                self.state = 3710
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [79]:
                    self.state = 3676
                    self.match(fugue_sqlParser.CLUSTER)
                    self.state = 3677
                    self.match(fugue_sqlParser.BY)
                    self.state = 3678
                    localctx._expression = self.expression()
                    localctx.partition.append(localctx._expression)
                    self.state = 3683
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1:
                        self.state = 3679
                        self.match(fugue_sqlParser.T__0)
                        self.state = 3680
                        localctx._expression = self.expression()
                        localctx.partition.append(localctx._expression)
                        self.state = 3685
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [4, 116, 203, 211, 224, 244, 259]:
                    self.state = 3696
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==116 or _la==211:
                        self.state = 3686
                        _la = self._input.LA(1)
                        if not(_la==116 or _la==211):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 3687
                        self.match(fugue_sqlParser.BY)
                        self.state = 3688
                        localctx._expression = self.expression()
                        localctx.partition.append(localctx._expression)
                        self.state = 3693
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==1:
                            self.state = 3689
                            self.match(fugue_sqlParser.T__0)
                            self.state = 3690
                            localctx._expression = self.expression()
                            localctx.partition.append(localctx._expression)
                            self.state = 3695
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)



                    self.state = 3708
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==203 or _la==259:
                        self.state = 3698
                        _la = self._input.LA(1)
                        if not(_la==203 or _la==259):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 3699
                        self.match(fugue_sqlParser.BY)
                        self.state = 3700
                        self.sortItem()
                        self.state = 3705
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==1:
                            self.state = 3701
                            self.match(fugue_sqlParser.T__0)
                            self.state = 3702
                            self.sortItem()
                            self.state = 3707
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)



                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 3713
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==224 or _la==244:
                    self.state = 3712
                    self.windowFrame()


                self.state = 3715
                self.match(fugue_sqlParser.T__3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowFrameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.frameType = None # Token
            self.start = None # FrameBoundContext
            self.end = None # FrameBoundContext

        def RANGE(self):
            return self.getToken(fugue_sqlParser.RANGE, 0)

        def frameBound(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.FrameBoundContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.FrameBoundContext,i)


        def ROWS(self):
            return self.getToken(fugue_sqlParser.ROWS, 0)

        def BETWEEN(self):
            return self.getToken(fugue_sqlParser.BETWEEN, 0)

        def AND(self):
            return self.getToken(fugue_sqlParser.AND, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_windowFrame

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindowFrame" ):
                return visitor.visitWindowFrame(self)
            else:
                return visitor.visitChildren(self)




    def windowFrame(self):

        localctx = fugue_sqlParser.WindowFrameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 398, self.RULE_windowFrame)
        try:
            self.state = 3734
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,499,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3718
                localctx.frameType = self.match(fugue_sqlParser.RANGE)
                self.state = 3719
                localctx.start = self.frameBound()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3720
                localctx.frameType = self.match(fugue_sqlParser.ROWS)
                self.state = 3721
                localctx.start = self.frameBound()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3722
                localctx.frameType = self.match(fugue_sqlParser.RANGE)
                self.state = 3723
                self.match(fugue_sqlParser.BETWEEN)
                self.state = 3724
                localctx.start = self.frameBound()
                self.state = 3725
                self.match(fugue_sqlParser.AND)
                self.state = 3726
                localctx.end = self.frameBound()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3728
                localctx.frameType = self.match(fugue_sqlParser.ROWS)
                self.state = 3729
                self.match(fugue_sqlParser.BETWEEN)
                self.state = 3730
                localctx.start = self.frameBound()
                self.state = 3731
                self.match(fugue_sqlParser.AND)
                self.state = 3732
                localctx.end = self.frameBound()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FrameBoundContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.boundType = None # Token

        def UNBOUNDED(self):
            return self.getToken(fugue_sqlParser.UNBOUNDED, 0)

        def PRECEDING(self):
            return self.getToken(fugue_sqlParser.PRECEDING, 0)

        def FOLLOWING(self):
            return self.getToken(fugue_sqlParser.FOLLOWING, 0)

        def ROW(self):
            return self.getToken(fugue_sqlParser.ROW, 0)

        def CURRENT(self):
            return self.getToken(fugue_sqlParser.CURRENT, 0)

        def expression(self):
            return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_frameBound

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFrameBound" ):
                return visitor.visitFrameBound(self)
            else:
                return visitor.visitChildren(self)




    def frameBound(self):

        localctx = fugue_sqlParser.FrameBoundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 400, self.RULE_frameBound)
        self._la = 0 # Token type
        try:
            self.state = 3743
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,500,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3736
                self.match(fugue_sqlParser.UNBOUNDED)
                self.state = 3737
                localctx.boundType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==136 or _la==218):
                    localctx.boundType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3738
                localctx.boundType = self.match(fugue_sqlParser.CURRENT)
                self.state = 3739
                self.match(fugue_sqlParser.ROW)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3740
                self.expression()
                self.state = 3741
                localctx.boundType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==136 or _la==218):
                    localctx.boundType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedNameListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.QualifiedNameContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.QualifiedNameContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_qualifiedNameList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualifiedNameList" ):
                return visitor.visitQualifiedNameList(self)
            else:
                return visitor.visitChildren(self)




    def qualifiedNameList(self):

        localctx = fugue_sqlParser.QualifiedNameListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 402, self.RULE_qualifiedNameList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3745
            self.qualifiedName()
            self.state = 3750
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1:
                self.state = 3746
                self.match(fugue_sqlParser.T__0)
                self.state = 3747
                self.qualifiedName()
                self.state = 3752
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedName(self):
            return self.getTypedRuleContext(fugue_sqlParser.QualifiedNameContext,0)


        def FILTER(self):
            return self.getToken(fugue_sqlParser.FILTER, 0)

        def LEFT(self):
            return self.getToken(fugue_sqlParser.LEFT, 0)

        def RIGHT(self):
            return self.getToken(fugue_sqlParser.RIGHT, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_functionName

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionName" ):
                return visitor.visitFunctionName(self)
            else:
                return visitor.visitChildren(self)




    def functionName(self):

        localctx = fugue_sqlParser.FunctionNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 404, self.RULE_functionName)
        try:
            self.state = 3757
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,502,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3753
                self.qualifiedName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3754
                self.match(fugue_sqlParser.FILTER)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3755
                self.match(fugue_sqlParser.LEFT)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3756
                self.match(fugue_sqlParser.RIGHT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_qualifiedName

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualifiedName" ):
                return visitor.visitQualifiedName(self)
            else:
                return visitor.visitChildren(self)




    def qualifiedName(self):

        localctx = fugue_sqlParser.QualifiedNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 406, self.RULE_qualifiedName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3759
            self.identifier()
            self.state = 3764
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,503,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3760
                    self.match(fugue_sqlParser.T__6)
                    self.state = 3761
                    self.identifier() 
                self.state = 3766
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,503,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ErrorCapturingIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_errorCapturingIdentifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitErrorCapturingIdentifier" ):
                return visitor.visitErrorCapturingIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def errorCapturingIdentifier(self):

        localctx = fugue_sqlParser.ErrorCapturingIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 408, self.RULE_errorCapturingIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3767
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ErrorCapturingIdentifierExtraContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_errorCapturingIdentifierExtra

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ErrorIdentContext(ErrorCapturingIdentifierExtraContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.ErrorCapturingIdentifierExtraContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MINUS(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.MINUS)
            else:
                return self.getToken(fugue_sqlParser.MINUS, i)
        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,i)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitErrorIdent" ):
                return visitor.visitErrorIdent(self)
            else:
                return visitor.visitChildren(self)



    def errorCapturingIdentifierExtra(self):

        localctx = fugue_sqlParser.ErrorCapturingIdentifierExtraContext(self, self._ctx, self.state)
        self.enterRule(localctx, 410, self.RULE_errorCapturingIdentifierExtra)
        self._la = 0 # Token type
        try:
            localctx = fugue_sqlParser.ErrorIdentContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 3771 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3769
                self.match(fugue_sqlParser.MINUS)
                self.state = 3770
                self.identifier()
                self.state = 3773 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==315):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def strictIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.StrictIdentifierContext,0)


        def strictNonReserved(self):
            return self.getTypedRuleContext(fugue_sqlParser.StrictNonReservedContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_identifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifier" ):
                return visitor.visitIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def identifier(self):

        localctx = fugue_sqlParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 412, self.RULE_identifier)
        try:
            self.state = 3777
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 162, 163, 164, 165, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 319, 334, 335]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3775
                self.strictIdentifier()
                pass
            elif token in [59, 95, 122, 142, 157, 161, 166, 172, 192, 198, 237, 248, 254, 288, 296]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3776
                self.strictNonReserved()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StrictIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_strictIdentifier

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class QuotedIdentifierAlternativeContext(StrictIdentifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StrictIdentifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def quotedIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.QuotedIdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuotedIdentifierAlternative" ):
                return visitor.visitQuotedIdentifierAlternative(self)
            else:
                return visitor.visitChildren(self)


    class UnquotedIdentifierContext(StrictIdentifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StrictIdentifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IDENTIFIER(self):
            return self.getToken(fugue_sqlParser.IDENTIFIER, 0)
        def nonReserved(self):
            return self.getTypedRuleContext(fugue_sqlParser.NonReservedContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnquotedIdentifier" ):
                return visitor.visitUnquotedIdentifier(self)
            else:
                return visitor.visitChildren(self)



    def strictIdentifier(self):

        localctx = fugue_sqlParser.StrictIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 414, self.RULE_strictIdentifier)
        try:
            self.state = 3782
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [334]:
                localctx = fugue_sqlParser.UnquotedIdentifierContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3779
                self.match(fugue_sqlParser.IDENTIFIER)
                pass
            elif token in [335]:
                localctx = fugue_sqlParser.QuotedIdentifierAlternativeContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3780
                self.quotedIdentifier()
                pass
            elif token in [53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 162, 163, 164, 165, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 319]:
                localctx = fugue_sqlParser.UnquotedIdentifierContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3781
                self.nonReserved()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuotedIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BACKQUOTED_IDENTIFIER(self):
            return self.getToken(fugue_sqlParser.BACKQUOTED_IDENTIFIER, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_quotedIdentifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuotedIdentifier" ):
                return visitor.visitQuotedIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def quotedIdentifier(self):

        localctx = fugue_sqlParser.QuotedIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 416, self.RULE_quotedIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3784
            self.match(fugue_sqlParser.BACKQUOTED_IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_number

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class DecimalLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DECIMAL_VALUE(self):
            return self.getToken(fugue_sqlParser.DECIMAL_VALUE, 0)
        def MINUS(self):
            return self.getToken(fugue_sqlParser.MINUS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecimalLiteral" ):
                return visitor.visitDecimalLiteral(self)
            else:
                return visitor.visitChildren(self)


    class BigIntLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BIGINT_LITERAL(self):
            return self.getToken(fugue_sqlParser.BIGINT_LITERAL, 0)
        def MINUS(self):
            return self.getToken(fugue_sqlParser.MINUS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBigIntLiteral" ):
                return visitor.visitBigIntLiteral(self)
            else:
                return visitor.visitChildren(self)


    class TinyIntLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TINYINT_LITERAL(self):
            return self.getToken(fugue_sqlParser.TINYINT_LITERAL, 0)
        def MINUS(self):
            return self.getToken(fugue_sqlParser.MINUS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTinyIntLiteral" ):
                return visitor.visitTinyIntLiteral(self)
            else:
                return visitor.visitChildren(self)


    class LegacyDecimalLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXPONENT_VALUE(self):
            return self.getToken(fugue_sqlParser.EXPONENT_VALUE, 0)
        def DECIMAL_VALUE(self):
            return self.getToken(fugue_sqlParser.DECIMAL_VALUE, 0)
        def MINUS(self):
            return self.getToken(fugue_sqlParser.MINUS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLegacyDecimalLiteral" ):
                return visitor.visitLegacyDecimalLiteral(self)
            else:
                return visitor.visitChildren(self)


    class BigDecimalLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BIGDECIMAL_LITERAL(self):
            return self.getToken(fugue_sqlParser.BIGDECIMAL_LITERAL, 0)
        def MINUS(self):
            return self.getToken(fugue_sqlParser.MINUS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBigDecimalLiteral" ):
                return visitor.visitBigDecimalLiteral(self)
            else:
                return visitor.visitChildren(self)


    class ExponentLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXPONENT_VALUE(self):
            return self.getToken(fugue_sqlParser.EXPONENT_VALUE, 0)
        def MINUS(self):
            return self.getToken(fugue_sqlParser.MINUS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExponentLiteral" ):
                return visitor.visitExponentLiteral(self)
            else:
                return visitor.visitChildren(self)


    class DoubleLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DOUBLE_LITERAL(self):
            return self.getToken(fugue_sqlParser.DOUBLE_LITERAL, 0)
        def MINUS(self):
            return self.getToken(fugue_sqlParser.MINUS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDoubleLiteral" ):
                return visitor.visitDoubleLiteral(self)
            else:
                return visitor.visitChildren(self)


    class IntegerLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INTEGER_VALUE(self):
            return self.getToken(fugue_sqlParser.INTEGER_VALUE, 0)
        def MINUS(self):
            return self.getToken(fugue_sqlParser.MINUS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntegerLiteral" ):
                return visitor.visitIntegerLiteral(self)
            else:
                return visitor.visitChildren(self)


    class SmallIntLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SMALLINT_LITERAL(self):
            return self.getToken(fugue_sqlParser.SMALLINT_LITERAL, 0)
        def MINUS(self):
            return self.getToken(fugue_sqlParser.MINUS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSmallIntLiteral" ):
                return visitor.visitSmallIntLiteral(self)
            else:
                return visitor.visitChildren(self)



    def number(self):

        localctx = fugue_sqlParser.NumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 418, self.RULE_number)
        self._la = 0 # Token type
        try:
            self.state = 3822
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,516,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.ExponentLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3787
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==315:
                    self.state = 3786
                    self.match(fugue_sqlParser.MINUS)


                self.state = 3789
                self.match(fugue_sqlParser.EXPONENT_VALUE)
                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.DecimalLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3791
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==315:
                    self.state = 3790
                    self.match(fugue_sqlParser.MINUS)


                self.state = 3793
                self.match(fugue_sqlParser.DECIMAL_VALUE)
                pass

            elif la_ == 3:
                localctx = fugue_sqlParser.LegacyDecimalLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3795
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==315:
                    self.state = 3794
                    self.match(fugue_sqlParser.MINUS)


                self.state = 3797
                _la = self._input.LA(1)
                if not(_la==330 or _la==331):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 4:
                localctx = fugue_sqlParser.IntegerLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 3799
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==315:
                    self.state = 3798
                    self.match(fugue_sqlParser.MINUS)


                self.state = 3801
                self.match(fugue_sqlParser.INTEGER_VALUE)
                pass

            elif la_ == 5:
                localctx = fugue_sqlParser.BigIntLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 3803
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==315:
                    self.state = 3802
                    self.match(fugue_sqlParser.MINUS)


                self.state = 3805
                self.match(fugue_sqlParser.BIGINT_LITERAL)
                pass

            elif la_ == 6:
                localctx = fugue_sqlParser.SmallIntLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 3807
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==315:
                    self.state = 3806
                    self.match(fugue_sqlParser.MINUS)


                self.state = 3809
                self.match(fugue_sqlParser.SMALLINT_LITERAL)
                pass

            elif la_ == 7:
                localctx = fugue_sqlParser.TinyIntLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 3811
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==315:
                    self.state = 3810
                    self.match(fugue_sqlParser.MINUS)


                self.state = 3813
                self.match(fugue_sqlParser.TINYINT_LITERAL)
                pass

            elif la_ == 8:
                localctx = fugue_sqlParser.DoubleLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 3815
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==315:
                    self.state = 3814
                    self.match(fugue_sqlParser.MINUS)


                self.state = 3817
                self.match(fugue_sqlParser.DOUBLE_LITERAL)
                pass

            elif la_ == 9:
                localctx = fugue_sqlParser.BigDecimalLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 3819
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==315:
                    self.state = 3818
                    self.match(fugue_sqlParser.MINUS)


                self.state = 3821
                self.match(fugue_sqlParser.BIGDECIMAL_LITERAL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterColumnActionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.setOrDrop = None # Token

        def TYPE(self):
            return self.getToken(fugue_sqlParser.TYPE, 0)

        def dataType(self):
            return self.getTypedRuleContext(fugue_sqlParser.DataTypeContext,0)


        def commentSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.CommentSpecContext,0)


        def colPosition(self):
            return self.getTypedRuleContext(fugue_sqlParser.ColPositionContext,0)


        def NOT(self):
            return self.getToken(fugue_sqlParser.NOT, 0)

        def THENULL(self):
            return self.getToken(fugue_sqlParser.THENULL, 0)

        def SET(self):
            return self.getToken(fugue_sqlParser.SET, 0)

        def DROP(self):
            return self.getToken(fugue_sqlParser.DROP, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_alterColumnAction

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterColumnAction" ):
                return visitor.visitAlterColumnAction(self)
            else:
                return visitor.visitChildren(self)




    def alterColumnAction(self):

        localctx = fugue_sqlParser.AlterColumnActionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 420, self.RULE_alterColumnAction)
        self._la = 0 # Token type
        try:
            self.state = 3831
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [284]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3824
                self.match(fugue_sqlParser.TYPE)
                self.state = 3825
                self.dataType()
                pass
            elif token in [86]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3826
                self.commentSpec()
                pass
            elif token in [54, 135]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3827
                self.colPosition()
                pass
            elif token in [117, 253]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3828
                localctx.setOrDrop = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==117 or _la==253):
                    localctx.setOrDrop = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3829
                self.match(fugue_sqlParser.NOT)
                self.state = 3830
                self.match(fugue_sqlParser.THENULL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnsiNonReservedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(fugue_sqlParser.ADD, 0)

        def AFTER(self):
            return self.getToken(fugue_sqlParser.AFTER, 0)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)

        def ANALYZE(self):
            return self.getToken(fugue_sqlParser.ANALYZE, 0)

        def ARCHIVE(self):
            return self.getToken(fugue_sqlParser.ARCHIVE, 0)

        def ARRAY(self):
            return self.getToken(fugue_sqlParser.ARRAY, 0)

        def ASC(self):
            return self.getToken(fugue_sqlParser.ASC, 0)

        def AT(self):
            return self.getToken(fugue_sqlParser.AT, 0)

        def BETWEEN(self):
            return self.getToken(fugue_sqlParser.BETWEEN, 0)

        def BUCKET(self):
            return self.getToken(fugue_sqlParser.BUCKET, 0)

        def BUCKETS(self):
            return self.getToken(fugue_sqlParser.BUCKETS, 0)

        def BY(self):
            return self.getToken(fugue_sqlParser.BY, 0)

        def CACHE(self):
            return self.getToken(fugue_sqlParser.CACHE, 0)

        def CASCADE(self):
            return self.getToken(fugue_sqlParser.CASCADE, 0)

        def CHANGE(self):
            return self.getToken(fugue_sqlParser.CHANGE, 0)

        def CLEAR(self):
            return self.getToken(fugue_sqlParser.CLEAR, 0)

        def CLUSTER(self):
            return self.getToken(fugue_sqlParser.CLUSTER, 0)

        def CLUSTERED(self):
            return self.getToken(fugue_sqlParser.CLUSTERED, 0)

        def CODEGEN(self):
            return self.getToken(fugue_sqlParser.CODEGEN, 0)

        def COLLECTION(self):
            return self.getToken(fugue_sqlParser.COLLECTION, 0)

        def COLUMNS(self):
            return self.getToken(fugue_sqlParser.COLUMNS, 0)

        def COMMENT(self):
            return self.getToken(fugue_sqlParser.COMMENT, 0)

        def COMMIT(self):
            return self.getToken(fugue_sqlParser.COMMIT, 0)

        def COMPACT(self):
            return self.getToken(fugue_sqlParser.COMPACT, 0)

        def COMPACTIONS(self):
            return self.getToken(fugue_sqlParser.COMPACTIONS, 0)

        def COMPUTE(self):
            return self.getToken(fugue_sqlParser.COMPUTE, 0)

        def CONCATENATE(self):
            return self.getToken(fugue_sqlParser.CONCATENATE, 0)

        def COST(self):
            return self.getToken(fugue_sqlParser.COST, 0)

        def CUBE(self):
            return self.getToken(fugue_sqlParser.CUBE, 0)

        def CURRENT(self):
            return self.getToken(fugue_sqlParser.CURRENT, 0)

        def DATA(self):
            return self.getToken(fugue_sqlParser.DATA, 0)

        def DATABASE(self):
            return self.getToken(fugue_sqlParser.DATABASE, 0)

        def DATABASES(self):
            return self.getToken(fugue_sqlParser.DATABASES, 0)

        def DBPROPERTIES(self):
            return self.getToken(fugue_sqlParser.DBPROPERTIES, 0)

        def DEFINED(self):
            return self.getToken(fugue_sqlParser.DEFINED, 0)

        def DELETE(self):
            return self.getToken(fugue_sqlParser.DELETE, 0)

        def DELIMITED(self):
            return self.getToken(fugue_sqlParser.DELIMITED, 0)

        def DESC(self):
            return self.getToken(fugue_sqlParser.DESC, 0)

        def DESCRIBE(self):
            return self.getToken(fugue_sqlParser.DESCRIBE, 0)

        def DFS(self):
            return self.getToken(fugue_sqlParser.DFS, 0)

        def DIRECTORIES(self):
            return self.getToken(fugue_sqlParser.DIRECTORIES, 0)

        def DIRECTORY(self):
            return self.getToken(fugue_sqlParser.DIRECTORY, 0)

        def DISTRIBUTE(self):
            return self.getToken(fugue_sqlParser.DISTRIBUTE, 0)

        def DIV(self):
            return self.getToken(fugue_sqlParser.DIV, 0)

        def DROP(self):
            return self.getToken(fugue_sqlParser.DROP, 0)

        def ESCAPED(self):
            return self.getToken(fugue_sqlParser.ESCAPED, 0)

        def EXCHANGE(self):
            return self.getToken(fugue_sqlParser.EXCHANGE, 0)

        def EXISTS(self):
            return self.getToken(fugue_sqlParser.EXISTS, 0)

        def EXPLAIN(self):
            return self.getToken(fugue_sqlParser.EXPLAIN, 0)

        def EXPORT(self):
            return self.getToken(fugue_sqlParser.EXPORT, 0)

        def EXTENDED(self):
            return self.getToken(fugue_sqlParser.EXTENDED, 0)

        def EXTERNAL(self):
            return self.getToken(fugue_sqlParser.EXTERNAL, 0)

        def EXTRACT(self):
            return self.getToken(fugue_sqlParser.EXTRACT, 0)

        def FIELDS(self):
            return self.getToken(fugue_sqlParser.FIELDS, 0)

        def FILEFORMAT(self):
            return self.getToken(fugue_sqlParser.FILEFORMAT, 0)

        def FIRST(self):
            return self.getToken(fugue_sqlParser.FIRST, 0)

        def FOLLOWING(self):
            return self.getToken(fugue_sqlParser.FOLLOWING, 0)

        def FORMAT(self):
            return self.getToken(fugue_sqlParser.FORMAT, 0)

        def FORMATTED(self):
            return self.getToken(fugue_sqlParser.FORMATTED, 0)

        def FUNCTION(self):
            return self.getToken(fugue_sqlParser.FUNCTION, 0)

        def FUNCTIONS(self):
            return self.getToken(fugue_sqlParser.FUNCTIONS, 0)

        def GLOBAL(self):
            return self.getToken(fugue_sqlParser.GLOBAL, 0)

        def GROUPING(self):
            return self.getToken(fugue_sqlParser.GROUPING, 0)

        def IF(self):
            return self.getToken(fugue_sqlParser.IF, 0)

        def IGNORE(self):
            return self.getToken(fugue_sqlParser.IGNORE, 0)

        def IMPORT(self):
            return self.getToken(fugue_sqlParser.IMPORT, 0)

        def INDEX(self):
            return self.getToken(fugue_sqlParser.INDEX, 0)

        def INDEXES(self):
            return self.getToken(fugue_sqlParser.INDEXES, 0)

        def INPATH(self):
            return self.getToken(fugue_sqlParser.INPATH, 0)

        def INPUTFORMAT(self):
            return self.getToken(fugue_sqlParser.INPUTFORMAT, 0)

        def INSERT(self):
            return self.getToken(fugue_sqlParser.INSERT, 0)

        def INTERVAL(self):
            return self.getToken(fugue_sqlParser.INTERVAL, 0)

        def ITEMS(self):
            return self.getToken(fugue_sqlParser.ITEMS, 0)

        def KEYS(self):
            return self.getToken(fugue_sqlParser.KEYS, 0)

        def LAST(self):
            return self.getToken(fugue_sqlParser.LAST, 0)

        def LATERAL(self):
            return self.getToken(fugue_sqlParser.LATERAL, 0)

        def LAZY(self):
            return self.getToken(fugue_sqlParser.LAZY, 0)

        def LIKE(self):
            return self.getToken(fugue_sqlParser.LIKE, 0)

        def LIMIT(self):
            return self.getToken(fugue_sqlParser.LIMIT, 0)

        def LINES(self):
            return self.getToken(fugue_sqlParser.LINES, 0)

        def LIST(self):
            return self.getToken(fugue_sqlParser.LIST, 0)

        def LOAD(self):
            return self.getToken(fugue_sqlParser.LOAD, 0)

        def LOCAL(self):
            return self.getToken(fugue_sqlParser.LOCAL, 0)

        def LOCATION(self):
            return self.getToken(fugue_sqlParser.LOCATION, 0)

        def LOCK(self):
            return self.getToken(fugue_sqlParser.LOCK, 0)

        def LOCKS(self):
            return self.getToken(fugue_sqlParser.LOCKS, 0)

        def LOGICAL(self):
            return self.getToken(fugue_sqlParser.LOGICAL, 0)

        def MACRO(self):
            return self.getToken(fugue_sqlParser.MACRO, 0)

        def MAP(self):
            return self.getToken(fugue_sqlParser.MAP, 0)

        def MATCHED(self):
            return self.getToken(fugue_sqlParser.MATCHED, 0)

        def MERGE(self):
            return self.getToken(fugue_sqlParser.MERGE, 0)

        def MSCK(self):
            return self.getToken(fugue_sqlParser.MSCK, 0)

        def NAMESPACE(self):
            return self.getToken(fugue_sqlParser.NAMESPACE, 0)

        def NAMESPACES(self):
            return self.getToken(fugue_sqlParser.NAMESPACES, 0)

        def NO(self):
            return self.getToken(fugue_sqlParser.NO, 0)

        def THENULLS(self):
            return self.getToken(fugue_sqlParser.THENULLS, 0)

        def OF(self):
            return self.getToken(fugue_sqlParser.OF, 0)

        def OPTION(self):
            return self.getToken(fugue_sqlParser.OPTION, 0)

        def OPTIONS(self):
            return self.getToken(fugue_sqlParser.OPTIONS, 0)

        def OUT(self):
            return self.getToken(fugue_sqlParser.OUT, 0)

        def OUTPUTFORMAT(self):
            return self.getToken(fugue_sqlParser.OUTPUTFORMAT, 0)

        def OVER(self):
            return self.getToken(fugue_sqlParser.OVER, 0)

        def OVERLAY(self):
            return self.getToken(fugue_sqlParser.OVERLAY, 0)

        def OVERWRITE(self):
            return self.getToken(fugue_sqlParser.OVERWRITE, 0)

        def PARTITION(self):
            return self.getToken(fugue_sqlParser.PARTITION, 0)

        def PARTITIONED(self):
            return self.getToken(fugue_sqlParser.PARTITIONED, 0)

        def PARTITIONS(self):
            return self.getToken(fugue_sqlParser.PARTITIONS, 0)

        def PERCENTLIT(self):
            return self.getToken(fugue_sqlParser.PERCENTLIT, 0)

        def PIVOT(self):
            return self.getToken(fugue_sqlParser.PIVOT, 0)

        def PLACING(self):
            return self.getToken(fugue_sqlParser.PLACING, 0)

        def POSITION(self):
            return self.getToken(fugue_sqlParser.POSITION, 0)

        def PRECEDING(self):
            return self.getToken(fugue_sqlParser.PRECEDING, 0)

        def PRINCIPALS(self):
            return self.getToken(fugue_sqlParser.PRINCIPALS, 0)

        def PROPERTIES(self):
            return self.getToken(fugue_sqlParser.PROPERTIES, 0)

        def PURGE(self):
            return self.getToken(fugue_sqlParser.PURGE, 0)

        def QUERY(self):
            return self.getToken(fugue_sqlParser.QUERY, 0)

        def RANGE(self):
            return self.getToken(fugue_sqlParser.RANGE, 0)

        def RECORDREADER(self):
            return self.getToken(fugue_sqlParser.RECORDREADER, 0)

        def RECORDWRITER(self):
            return self.getToken(fugue_sqlParser.RECORDWRITER, 0)

        def RECOVER(self):
            return self.getToken(fugue_sqlParser.RECOVER, 0)

        def REDUCE(self):
            return self.getToken(fugue_sqlParser.REDUCE, 0)

        def REFRESH(self):
            return self.getToken(fugue_sqlParser.REFRESH, 0)

        def RENAME(self):
            return self.getToken(fugue_sqlParser.RENAME, 0)

        def REPAIR(self):
            return self.getToken(fugue_sqlParser.REPAIR, 0)

        def REPLACE(self):
            return self.getToken(fugue_sqlParser.REPLACE, 0)

        def RESET(self):
            return self.getToken(fugue_sqlParser.RESET, 0)

        def RESTRICT(self):
            return self.getToken(fugue_sqlParser.RESTRICT, 0)

        def REVOKE(self):
            return self.getToken(fugue_sqlParser.REVOKE, 0)

        def RLIKE(self):
            return self.getToken(fugue_sqlParser.RLIKE, 0)

        def ROLE(self):
            return self.getToken(fugue_sqlParser.ROLE, 0)

        def ROLES(self):
            return self.getToken(fugue_sqlParser.ROLES, 0)

        def ROLLBACK(self):
            return self.getToken(fugue_sqlParser.ROLLBACK, 0)

        def ROLLUP(self):
            return self.getToken(fugue_sqlParser.ROLLUP, 0)

        def ROW(self):
            return self.getToken(fugue_sqlParser.ROW, 0)

        def ROWS(self):
            return self.getToken(fugue_sqlParser.ROWS, 0)

        def SCHEMA(self):
            return self.getToken(fugue_sqlParser.SCHEMA, 0)

        def SEPARATED(self):
            return self.getToken(fugue_sqlParser.SEPARATED, 0)

        def SERDE(self):
            return self.getToken(fugue_sqlParser.SERDE, 0)

        def SERDEPROPERTIES(self):
            return self.getToken(fugue_sqlParser.SERDEPROPERTIES, 0)

        def SET(self):
            return self.getToken(fugue_sqlParser.SET, 0)

        def SETS(self):
            return self.getToken(fugue_sqlParser.SETS, 0)

        def SHOW(self):
            return self.getToken(fugue_sqlParser.SHOW, 0)

        def SKEWED(self):
            return self.getToken(fugue_sqlParser.SKEWED, 0)

        def SORT(self):
            return self.getToken(fugue_sqlParser.SORT, 0)

        def SORTED(self):
            return self.getToken(fugue_sqlParser.SORTED, 0)

        def START(self):
            return self.getToken(fugue_sqlParser.START, 0)

        def STATISTICS(self):
            return self.getToken(fugue_sqlParser.STATISTICS, 0)

        def STORED(self):
            return self.getToken(fugue_sqlParser.STORED, 0)

        def STRATIFY(self):
            return self.getToken(fugue_sqlParser.STRATIFY, 0)

        def STRUCT(self):
            return self.getToken(fugue_sqlParser.STRUCT, 0)

        def SUBSTR(self):
            return self.getToken(fugue_sqlParser.SUBSTR, 0)

        def SUBSTRING(self):
            return self.getToken(fugue_sqlParser.SUBSTRING, 0)

        def TABLES(self):
            return self.getToken(fugue_sqlParser.TABLES, 0)

        def TABLESAMPLE(self):
            return self.getToken(fugue_sqlParser.TABLESAMPLE, 0)

        def TBLPROPERTIES(self):
            return self.getToken(fugue_sqlParser.TBLPROPERTIES, 0)

        def TEMPORARY(self):
            return self.getToken(fugue_sqlParser.TEMPORARY, 0)

        def TERMINATED(self):
            return self.getToken(fugue_sqlParser.TERMINATED, 0)

        def TOUCH(self):
            return self.getToken(fugue_sqlParser.TOUCH, 0)

        def TRANSACTION(self):
            return self.getToken(fugue_sqlParser.TRANSACTION, 0)

        def TRANSACTIONS(self):
            return self.getToken(fugue_sqlParser.TRANSACTIONS, 0)

        def TRANSFORM(self):
            return self.getToken(fugue_sqlParser.TRANSFORM, 0)

        def TRIM(self):
            return self.getToken(fugue_sqlParser.TRIM, 0)

        def TRUE(self):
            return self.getToken(fugue_sqlParser.TRUE, 0)

        def TRUNCATE(self):
            return self.getToken(fugue_sqlParser.TRUNCATE, 0)

        def UNARCHIVE(self):
            return self.getToken(fugue_sqlParser.UNARCHIVE, 0)

        def UNBOUNDED(self):
            return self.getToken(fugue_sqlParser.UNBOUNDED, 0)

        def UNCACHE(self):
            return self.getToken(fugue_sqlParser.UNCACHE, 0)

        def UNLOCK(self):
            return self.getToken(fugue_sqlParser.UNLOCK, 0)

        def UNSET(self):
            return self.getToken(fugue_sqlParser.UNSET, 0)

        def UPDATE(self):
            return self.getToken(fugue_sqlParser.UPDATE, 0)

        def USE(self):
            return self.getToken(fugue_sqlParser.USE, 0)

        def VALUES(self):
            return self.getToken(fugue_sqlParser.VALUES, 0)

        def VIEW(self):
            return self.getToken(fugue_sqlParser.VIEW, 0)

        def VIEWS(self):
            return self.getToken(fugue_sqlParser.VIEWS, 0)

        def WINDOW(self):
            return self.getToken(fugue_sqlParser.WINDOW, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_ansiNonReserved

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnsiNonReserved" ):
                return visitor.visitAnsiNonReserved(self)
            else:
                return visitor.visitChildren(self)




    def ansiNonReserved(self):

        localctx = fugue_sqlParser.AnsiNonReservedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 422, self.RULE_ansiNonReserved)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3833
            _la = self._input.LA(1)
            if not(((_la) & ~0x3f) == 0 and ((1 << _la) & 7160723407519088640) != 0 or (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -416585425744047125) != 0 or (((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -1729409032347477549) != 0 or (((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & -2945371817272972903) != 0 or (((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & 4611729159090731005) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StrictNonReservedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANTI(self):
            return self.getToken(fugue_sqlParser.ANTI, 0)

        def CROSS(self):
            return self.getToken(fugue_sqlParser.CROSS, 0)

        def EXCEPT(self):
            return self.getToken(fugue_sqlParser.EXCEPT, 0)

        def FULL(self):
            return self.getToken(fugue_sqlParser.FULL, 0)

        def INNER(self):
            return self.getToken(fugue_sqlParser.INNER, 0)

        def INTERSECT(self):
            return self.getToken(fugue_sqlParser.INTERSECT, 0)

        def JOIN(self):
            return self.getToken(fugue_sqlParser.JOIN, 0)

        def LEFT(self):
            return self.getToken(fugue_sqlParser.LEFT, 0)

        def NATURAL(self):
            return self.getToken(fugue_sqlParser.NATURAL, 0)

        def ON(self):
            return self.getToken(fugue_sqlParser.ON, 0)

        def RIGHT(self):
            return self.getToken(fugue_sqlParser.RIGHT, 0)

        def SEMI(self):
            return self.getToken(fugue_sqlParser.SEMI, 0)

        def SETMINUS(self):
            return self.getToken(fugue_sqlParser.SETMINUS, 0)

        def UNION(self):
            return self.getToken(fugue_sqlParser.UNION, 0)

        def USING(self):
            return self.getToken(fugue_sqlParser.USING, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_strictNonReserved

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStrictNonReserved" ):
                return visitor.visitStrictNonReserved(self)
            else:
                return visitor.visitChildren(self)




    def strictNonReserved(self):

        localctx = fugue_sqlParser.StrictNonReservedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 424, self.RULE_strictNonReserved)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3835
            _la = self._input.LA(1)
            if not((((_la - 59)) & ~0x3f) == 0 and ((1 << (_la - 59)) & -9223371968135299071) != 0 or (((_la - 142)) & ~0x3f) == 0 and ((1 << (_la - 142)) & 73183495035846657) != 0 or (((_la - 237)) & ~0x3f) == 0 and ((1 << (_la - 237)) & 578712552117241857) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NonReservedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(fugue_sqlParser.ADD, 0)

        def AFTER(self):
            return self.getToken(fugue_sqlParser.AFTER, 0)

        def ALL(self):
            return self.getToken(fugue_sqlParser.ALL, 0)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)

        def ANALYZE(self):
            return self.getToken(fugue_sqlParser.ANALYZE, 0)

        def AND(self):
            return self.getToken(fugue_sqlParser.AND, 0)

        def ANY(self):
            return self.getToken(fugue_sqlParser.ANY, 0)

        def ARCHIVE(self):
            return self.getToken(fugue_sqlParser.ARCHIVE, 0)

        def ARRAY(self):
            return self.getToken(fugue_sqlParser.ARRAY, 0)

        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)

        def ASC(self):
            return self.getToken(fugue_sqlParser.ASC, 0)

        def AT(self):
            return self.getToken(fugue_sqlParser.AT, 0)

        def AUTHORIZATION(self):
            return self.getToken(fugue_sqlParser.AUTHORIZATION, 0)

        def BETWEEN(self):
            return self.getToken(fugue_sqlParser.BETWEEN, 0)

        def BOTH(self):
            return self.getToken(fugue_sqlParser.BOTH, 0)

        def BUCKET(self):
            return self.getToken(fugue_sqlParser.BUCKET, 0)

        def BUCKETS(self):
            return self.getToken(fugue_sqlParser.BUCKETS, 0)

        def BY(self):
            return self.getToken(fugue_sqlParser.BY, 0)

        def CACHE(self):
            return self.getToken(fugue_sqlParser.CACHE, 0)

        def CASCADE(self):
            return self.getToken(fugue_sqlParser.CASCADE, 0)

        def CASE(self):
            return self.getToken(fugue_sqlParser.CASE, 0)

        def CAST(self):
            return self.getToken(fugue_sqlParser.CAST, 0)

        def CHANGE(self):
            return self.getToken(fugue_sqlParser.CHANGE, 0)

        def CHECK(self):
            return self.getToken(fugue_sqlParser.CHECK, 0)

        def CLEAR(self):
            return self.getToken(fugue_sqlParser.CLEAR, 0)

        def CLUSTER(self):
            return self.getToken(fugue_sqlParser.CLUSTER, 0)

        def CLUSTERED(self):
            return self.getToken(fugue_sqlParser.CLUSTERED, 0)

        def CODEGEN(self):
            return self.getToken(fugue_sqlParser.CODEGEN, 0)

        def COLLATE(self):
            return self.getToken(fugue_sqlParser.COLLATE, 0)

        def COLLECTION(self):
            return self.getToken(fugue_sqlParser.COLLECTION, 0)

        def COLUMN(self):
            return self.getToken(fugue_sqlParser.COLUMN, 0)

        def COLUMNS(self):
            return self.getToken(fugue_sqlParser.COLUMNS, 0)

        def COMMENT(self):
            return self.getToken(fugue_sqlParser.COMMENT, 0)

        def COMMIT(self):
            return self.getToken(fugue_sqlParser.COMMIT, 0)

        def COMPACT(self):
            return self.getToken(fugue_sqlParser.COMPACT, 0)

        def COMPACTIONS(self):
            return self.getToken(fugue_sqlParser.COMPACTIONS, 0)

        def COMPUTE(self):
            return self.getToken(fugue_sqlParser.COMPUTE, 0)

        def CONCATENATE(self):
            return self.getToken(fugue_sqlParser.CONCATENATE, 0)

        def CONSTRAINT(self):
            return self.getToken(fugue_sqlParser.CONSTRAINT, 0)

        def COST(self):
            return self.getToken(fugue_sqlParser.COST, 0)

        def CREATE(self):
            return self.getToken(fugue_sqlParser.CREATE, 0)

        def CUBE(self):
            return self.getToken(fugue_sqlParser.CUBE, 0)

        def CURRENT(self):
            return self.getToken(fugue_sqlParser.CURRENT, 0)

        def CURRENT_DATE(self):
            return self.getToken(fugue_sqlParser.CURRENT_DATE, 0)

        def CURRENT_TIME(self):
            return self.getToken(fugue_sqlParser.CURRENT_TIME, 0)

        def CURRENT_TIMESTAMP(self):
            return self.getToken(fugue_sqlParser.CURRENT_TIMESTAMP, 0)

        def CURRENT_USER(self):
            return self.getToken(fugue_sqlParser.CURRENT_USER, 0)

        def DATA(self):
            return self.getToken(fugue_sqlParser.DATA, 0)

        def DATABASE(self):
            return self.getToken(fugue_sqlParser.DATABASE, 0)

        def DATABASES(self):
            return self.getToken(fugue_sqlParser.DATABASES, 0)

        def DAY(self):
            return self.getToken(fugue_sqlParser.DAY, 0)

        def DBPROPERTIES(self):
            return self.getToken(fugue_sqlParser.DBPROPERTIES, 0)

        def DEFINED(self):
            return self.getToken(fugue_sqlParser.DEFINED, 0)

        def DELETE(self):
            return self.getToken(fugue_sqlParser.DELETE, 0)

        def DELIMITED(self):
            return self.getToken(fugue_sqlParser.DELIMITED, 0)

        def DESC(self):
            return self.getToken(fugue_sqlParser.DESC, 0)

        def DESCRIBE(self):
            return self.getToken(fugue_sqlParser.DESCRIBE, 0)

        def DFS(self):
            return self.getToken(fugue_sqlParser.DFS, 0)

        def DIRECTORIES(self):
            return self.getToken(fugue_sqlParser.DIRECTORIES, 0)

        def DIRECTORY(self):
            return self.getToken(fugue_sqlParser.DIRECTORY, 0)

        def DISTINCT(self):
            return self.getToken(fugue_sqlParser.DISTINCT, 0)

        def DISTRIBUTE(self):
            return self.getToken(fugue_sqlParser.DISTRIBUTE, 0)

        def DIV(self):
            return self.getToken(fugue_sqlParser.DIV, 0)

        def DROP(self):
            return self.getToken(fugue_sqlParser.DROP, 0)

        def ELSE(self):
            return self.getToken(fugue_sqlParser.ELSE, 0)

        def END(self):
            return self.getToken(fugue_sqlParser.END, 0)

        def ESCAPE(self):
            return self.getToken(fugue_sqlParser.ESCAPE, 0)

        def ESCAPED(self):
            return self.getToken(fugue_sqlParser.ESCAPED, 0)

        def EXCHANGE(self):
            return self.getToken(fugue_sqlParser.EXCHANGE, 0)

        def EXISTS(self):
            return self.getToken(fugue_sqlParser.EXISTS, 0)

        def EXPLAIN(self):
            return self.getToken(fugue_sqlParser.EXPLAIN, 0)

        def EXPORT(self):
            return self.getToken(fugue_sqlParser.EXPORT, 0)

        def EXTENDED(self):
            return self.getToken(fugue_sqlParser.EXTENDED, 0)

        def EXTERNAL(self):
            return self.getToken(fugue_sqlParser.EXTERNAL, 0)

        def EXTRACT(self):
            return self.getToken(fugue_sqlParser.EXTRACT, 0)

        def FALSE(self):
            return self.getToken(fugue_sqlParser.FALSE, 0)

        def FETCH(self):
            return self.getToken(fugue_sqlParser.FETCH, 0)

        def FILTER(self):
            return self.getToken(fugue_sqlParser.FILTER, 0)

        def FIELDS(self):
            return self.getToken(fugue_sqlParser.FIELDS, 0)

        def FILEFORMAT(self):
            return self.getToken(fugue_sqlParser.FILEFORMAT, 0)

        def FIRST(self):
            return self.getToken(fugue_sqlParser.FIRST, 0)

        def FOLLOWING(self):
            return self.getToken(fugue_sqlParser.FOLLOWING, 0)

        def FOR(self):
            return self.getToken(fugue_sqlParser.FOR, 0)

        def FOREIGN(self):
            return self.getToken(fugue_sqlParser.FOREIGN, 0)

        def FORMAT(self):
            return self.getToken(fugue_sqlParser.FORMAT, 0)

        def FORMATTED(self):
            return self.getToken(fugue_sqlParser.FORMATTED, 0)

        def FROM(self):
            return self.getToken(fugue_sqlParser.FROM, 0)

        def FUNCTION(self):
            return self.getToken(fugue_sqlParser.FUNCTION, 0)

        def FUNCTIONS(self):
            return self.getToken(fugue_sqlParser.FUNCTIONS, 0)

        def GLOBAL(self):
            return self.getToken(fugue_sqlParser.GLOBAL, 0)

        def GRANT(self):
            return self.getToken(fugue_sqlParser.GRANT, 0)

        def GROUP(self):
            return self.getToken(fugue_sqlParser.GROUP, 0)

        def GROUPING(self):
            return self.getToken(fugue_sqlParser.GROUPING, 0)

        def HAVING(self):
            return self.getToken(fugue_sqlParser.HAVING, 0)

        def HOUR(self):
            return self.getToken(fugue_sqlParser.HOUR, 0)

        def IF(self):
            return self.getToken(fugue_sqlParser.IF, 0)

        def IGNORE(self):
            return self.getToken(fugue_sqlParser.IGNORE, 0)

        def IMPORT(self):
            return self.getToken(fugue_sqlParser.IMPORT, 0)

        def IN(self):
            return self.getToken(fugue_sqlParser.IN, 0)

        def INDEX(self):
            return self.getToken(fugue_sqlParser.INDEX, 0)

        def INDEXES(self):
            return self.getToken(fugue_sqlParser.INDEXES, 0)

        def INPATH(self):
            return self.getToken(fugue_sqlParser.INPATH, 0)

        def INPUTFORMAT(self):
            return self.getToken(fugue_sqlParser.INPUTFORMAT, 0)

        def INSERT(self):
            return self.getToken(fugue_sqlParser.INSERT, 0)

        def INTERVAL(self):
            return self.getToken(fugue_sqlParser.INTERVAL, 0)

        def INTO(self):
            return self.getToken(fugue_sqlParser.INTO, 0)

        def IS(self):
            return self.getToken(fugue_sqlParser.IS, 0)

        def ITEMS(self):
            return self.getToken(fugue_sqlParser.ITEMS, 0)

        def KEYS(self):
            return self.getToken(fugue_sqlParser.KEYS, 0)

        def LAST(self):
            return self.getToken(fugue_sqlParser.LAST, 0)

        def LATERAL(self):
            return self.getToken(fugue_sqlParser.LATERAL, 0)

        def LAZY(self):
            return self.getToken(fugue_sqlParser.LAZY, 0)

        def LEADING(self):
            return self.getToken(fugue_sqlParser.LEADING, 0)

        def LIKE(self):
            return self.getToken(fugue_sqlParser.LIKE, 0)

        def LIMIT(self):
            return self.getToken(fugue_sqlParser.LIMIT, 0)

        def LINES(self):
            return self.getToken(fugue_sqlParser.LINES, 0)

        def LIST(self):
            return self.getToken(fugue_sqlParser.LIST, 0)

        def LOAD(self):
            return self.getToken(fugue_sqlParser.LOAD, 0)

        def LOCAL(self):
            return self.getToken(fugue_sqlParser.LOCAL, 0)

        def LOCATION(self):
            return self.getToken(fugue_sqlParser.LOCATION, 0)

        def LOCK(self):
            return self.getToken(fugue_sqlParser.LOCK, 0)

        def LOCKS(self):
            return self.getToken(fugue_sqlParser.LOCKS, 0)

        def LOGICAL(self):
            return self.getToken(fugue_sqlParser.LOGICAL, 0)

        def MACRO(self):
            return self.getToken(fugue_sqlParser.MACRO, 0)

        def MAP(self):
            return self.getToken(fugue_sqlParser.MAP, 0)

        def MATCHED(self):
            return self.getToken(fugue_sqlParser.MATCHED, 0)

        def MERGE(self):
            return self.getToken(fugue_sqlParser.MERGE, 0)

        def MINUTE(self):
            return self.getToken(fugue_sqlParser.MINUTE, 0)

        def MONTH(self):
            return self.getToken(fugue_sqlParser.MONTH, 0)

        def MSCK(self):
            return self.getToken(fugue_sqlParser.MSCK, 0)

        def NAMESPACE(self):
            return self.getToken(fugue_sqlParser.NAMESPACE, 0)

        def NAMESPACES(self):
            return self.getToken(fugue_sqlParser.NAMESPACES, 0)

        def NO(self):
            return self.getToken(fugue_sqlParser.NO, 0)

        def NOT(self):
            return self.getToken(fugue_sqlParser.NOT, 0)

        def THENULL(self):
            return self.getToken(fugue_sqlParser.THENULL, 0)

        def THENULLS(self):
            return self.getToken(fugue_sqlParser.THENULLS, 0)

        def OF(self):
            return self.getToken(fugue_sqlParser.OF, 0)

        def ONLY(self):
            return self.getToken(fugue_sqlParser.ONLY, 0)

        def OPTION(self):
            return self.getToken(fugue_sqlParser.OPTION, 0)

        def OPTIONS(self):
            return self.getToken(fugue_sqlParser.OPTIONS, 0)

        def OR(self):
            return self.getToken(fugue_sqlParser.OR, 0)

        def ORDER(self):
            return self.getToken(fugue_sqlParser.ORDER, 0)

        def OUT(self):
            return self.getToken(fugue_sqlParser.OUT, 0)

        def OUTER(self):
            return self.getToken(fugue_sqlParser.OUTER, 0)

        def OUTPUTFORMAT(self):
            return self.getToken(fugue_sqlParser.OUTPUTFORMAT, 0)

        def OVER(self):
            return self.getToken(fugue_sqlParser.OVER, 0)

        def OVERLAPS(self):
            return self.getToken(fugue_sqlParser.OVERLAPS, 0)

        def OVERLAY(self):
            return self.getToken(fugue_sqlParser.OVERLAY, 0)

        def OVERWRITE(self):
            return self.getToken(fugue_sqlParser.OVERWRITE, 0)

        def PARTITION(self):
            return self.getToken(fugue_sqlParser.PARTITION, 0)

        def PARTITIONED(self):
            return self.getToken(fugue_sqlParser.PARTITIONED, 0)

        def PARTITIONS(self):
            return self.getToken(fugue_sqlParser.PARTITIONS, 0)

        def PERCENTLIT(self):
            return self.getToken(fugue_sqlParser.PERCENTLIT, 0)

        def PIVOT(self):
            return self.getToken(fugue_sqlParser.PIVOT, 0)

        def PLACING(self):
            return self.getToken(fugue_sqlParser.PLACING, 0)

        def POSITION(self):
            return self.getToken(fugue_sqlParser.POSITION, 0)

        def PRECEDING(self):
            return self.getToken(fugue_sqlParser.PRECEDING, 0)

        def PRIMARY(self):
            return self.getToken(fugue_sqlParser.PRIMARY, 0)

        def PRINCIPALS(self):
            return self.getToken(fugue_sqlParser.PRINCIPALS, 0)

        def PROPERTIES(self):
            return self.getToken(fugue_sqlParser.PROPERTIES, 0)

        def PURGE(self):
            return self.getToken(fugue_sqlParser.PURGE, 0)

        def QUERY(self):
            return self.getToken(fugue_sqlParser.QUERY, 0)

        def RANGE(self):
            return self.getToken(fugue_sqlParser.RANGE, 0)

        def RECORDREADER(self):
            return self.getToken(fugue_sqlParser.RECORDREADER, 0)

        def RECORDWRITER(self):
            return self.getToken(fugue_sqlParser.RECORDWRITER, 0)

        def RECOVER(self):
            return self.getToken(fugue_sqlParser.RECOVER, 0)

        def REDUCE(self):
            return self.getToken(fugue_sqlParser.REDUCE, 0)

        def REFERENCES(self):
            return self.getToken(fugue_sqlParser.REFERENCES, 0)

        def REFRESH(self):
            return self.getToken(fugue_sqlParser.REFRESH, 0)

        def RENAME(self):
            return self.getToken(fugue_sqlParser.RENAME, 0)

        def REPAIR(self):
            return self.getToken(fugue_sqlParser.REPAIR, 0)

        def REPLACE(self):
            return self.getToken(fugue_sqlParser.REPLACE, 0)

        def RESET(self):
            return self.getToken(fugue_sqlParser.RESET, 0)

        def RESTRICT(self):
            return self.getToken(fugue_sqlParser.RESTRICT, 0)

        def REVOKE(self):
            return self.getToken(fugue_sqlParser.REVOKE, 0)

        def RLIKE(self):
            return self.getToken(fugue_sqlParser.RLIKE, 0)

        def ROLE(self):
            return self.getToken(fugue_sqlParser.ROLE, 0)

        def ROLES(self):
            return self.getToken(fugue_sqlParser.ROLES, 0)

        def ROLLBACK(self):
            return self.getToken(fugue_sqlParser.ROLLBACK, 0)

        def ROLLUP(self):
            return self.getToken(fugue_sqlParser.ROLLUP, 0)

        def ROW(self):
            return self.getToken(fugue_sqlParser.ROW, 0)

        def ROWS(self):
            return self.getToken(fugue_sqlParser.ROWS, 0)

        def SCHEMA(self):
            return self.getToken(fugue_sqlParser.SCHEMA, 0)

        def SECOND(self):
            return self.getToken(fugue_sqlParser.SECOND, 0)

        def SELECT(self):
            return self.getToken(fugue_sqlParser.SELECT, 0)

        def SEPARATED(self):
            return self.getToken(fugue_sqlParser.SEPARATED, 0)

        def SERDE(self):
            return self.getToken(fugue_sqlParser.SERDE, 0)

        def SERDEPROPERTIES(self):
            return self.getToken(fugue_sqlParser.SERDEPROPERTIES, 0)

        def SESSION_USER(self):
            return self.getToken(fugue_sqlParser.SESSION_USER, 0)

        def SET(self):
            return self.getToken(fugue_sqlParser.SET, 0)

        def SETS(self):
            return self.getToken(fugue_sqlParser.SETS, 0)

        def SHOW(self):
            return self.getToken(fugue_sqlParser.SHOW, 0)

        def SKEWED(self):
            return self.getToken(fugue_sqlParser.SKEWED, 0)

        def SOME(self):
            return self.getToken(fugue_sqlParser.SOME, 0)

        def SORT(self):
            return self.getToken(fugue_sqlParser.SORT, 0)

        def SORTED(self):
            return self.getToken(fugue_sqlParser.SORTED, 0)

        def START(self):
            return self.getToken(fugue_sqlParser.START, 0)

        def STATISTICS(self):
            return self.getToken(fugue_sqlParser.STATISTICS, 0)

        def STORED(self):
            return self.getToken(fugue_sqlParser.STORED, 0)

        def STRATIFY(self):
            return self.getToken(fugue_sqlParser.STRATIFY, 0)

        def STRUCT(self):
            return self.getToken(fugue_sqlParser.STRUCT, 0)

        def SUBSTR(self):
            return self.getToken(fugue_sqlParser.SUBSTR, 0)

        def SUBSTRING(self):
            return self.getToken(fugue_sqlParser.SUBSTRING, 0)

        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)

        def TABLES(self):
            return self.getToken(fugue_sqlParser.TABLES, 0)

        def TABLESAMPLE(self):
            return self.getToken(fugue_sqlParser.TABLESAMPLE, 0)

        def TBLPROPERTIES(self):
            return self.getToken(fugue_sqlParser.TBLPROPERTIES, 0)

        def TEMPORARY(self):
            return self.getToken(fugue_sqlParser.TEMPORARY, 0)

        def TERMINATED(self):
            return self.getToken(fugue_sqlParser.TERMINATED, 0)

        def THEN(self):
            return self.getToken(fugue_sqlParser.THEN, 0)

        def TO(self):
            return self.getToken(fugue_sqlParser.TO, 0)

        def TOUCH(self):
            return self.getToken(fugue_sqlParser.TOUCH, 0)

        def TRAILING(self):
            return self.getToken(fugue_sqlParser.TRAILING, 0)

        def TRANSACTION(self):
            return self.getToken(fugue_sqlParser.TRANSACTION, 0)

        def TRANSACTIONS(self):
            return self.getToken(fugue_sqlParser.TRANSACTIONS, 0)

        def TRANSFORM(self):
            return self.getToken(fugue_sqlParser.TRANSFORM, 0)

        def TRIM(self):
            return self.getToken(fugue_sqlParser.TRIM, 0)

        def TRUE(self):
            return self.getToken(fugue_sqlParser.TRUE, 0)

        def TRUNCATE(self):
            return self.getToken(fugue_sqlParser.TRUNCATE, 0)

        def TYPE(self):
            return self.getToken(fugue_sqlParser.TYPE, 0)

        def UNARCHIVE(self):
            return self.getToken(fugue_sqlParser.UNARCHIVE, 0)

        def UNBOUNDED(self):
            return self.getToken(fugue_sqlParser.UNBOUNDED, 0)

        def UNCACHE(self):
            return self.getToken(fugue_sqlParser.UNCACHE, 0)

        def UNIQUE(self):
            return self.getToken(fugue_sqlParser.UNIQUE, 0)

        def UNKNOWN(self):
            return self.getToken(fugue_sqlParser.UNKNOWN, 0)

        def UNLOCK(self):
            return self.getToken(fugue_sqlParser.UNLOCK, 0)

        def UNSET(self):
            return self.getToken(fugue_sqlParser.UNSET, 0)

        def UPDATE(self):
            return self.getToken(fugue_sqlParser.UPDATE, 0)

        def USE(self):
            return self.getToken(fugue_sqlParser.USE, 0)

        def USER(self):
            return self.getToken(fugue_sqlParser.USER, 0)

        def VALUES(self):
            return self.getToken(fugue_sqlParser.VALUES, 0)

        def VIEW(self):
            return self.getToken(fugue_sqlParser.VIEW, 0)

        def VIEWS(self):
            return self.getToken(fugue_sqlParser.VIEWS, 0)

        def WHEN(self):
            return self.getToken(fugue_sqlParser.WHEN, 0)

        def WHERE(self):
            return self.getToken(fugue_sqlParser.WHERE, 0)

        def WINDOW(self):
            return self.getToken(fugue_sqlParser.WINDOW, 0)

        def WITH(self):
            return self.getToken(fugue_sqlParser.WITH, 0)

        def YEAR(self):
            return self.getToken(fugue_sqlParser.YEAR, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_nonReserved

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNonReserved" ):
                return visitor.visitNonReserved(self)
            else:
                return visitor.visitChildren(self)




    def nonReserved(self):

        localctx = fugue_sqlParser.NonReservedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 426, self.RULE_nonReserved)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3837
            _la = self._input.LA(1)
            if not(((_la) & ~0x3f) == 0 and ((1 << _la) & -585467951558164480) != 0 or (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -288230378299195393) != 0 or (((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -17876190773249) != 0 or (((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & -2341889398418702369) != 0 or (((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & 4611966941500801023) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[47] = self.fuguePartitionNum_sempred
        self._predicates[115] = self.queryTerm_sempred
        self._predicates[170] = self.booleanExpression_sempred
        self._predicates[172] = self.valueExpression_sempred
        self._predicates[173] = self.primaryExpression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def fuguePartitionNum_sempred(self, localctx:FuguePartitionNumContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 1)
         

    def queryTerm_sempred(self, localctx:QueryTermContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 1)
         

    def booleanExpression_sempred(self, localctx:BooleanExpressionContext, predIndex:int):
            if predIndex == 4:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 1)
         

    def valueExpression_sempred(self, localctx:ValueExpressionContext, predIndex:int):
            if predIndex == 6:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 1)
         

    def primaryExpression_sempred(self, localctx:PrimaryExpressionContext, predIndex:int):
            if predIndex == 12:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 6)
         




