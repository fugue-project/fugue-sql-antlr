# Generated from fugue_sql.g4 by ANTLR 4.10.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,339,3834,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,
        2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,2,142,
        7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
        2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,
        7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
        2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,
        7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,
        2,170,7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,
        7,175,2,176,7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,
        2,181,7,181,2,182,7,182,2,183,7,183,2,184,7,184,2,185,7,185,2,186,
        7,186,2,187,7,187,2,188,7,188,2,189,7,189,2,190,7,190,2,191,7,191,
        2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,2,196,7,196,2,197,
        7,197,2,198,7,198,2,199,7,199,2,200,7,200,2,201,7,201,2,202,7,202,
        2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,2,207,7,207,2,208,
        7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,7,212,2,213,7,213,
        1,0,4,0,430,8,0,11,0,12,0,431,1,0,1,0,1,1,1,1,1,1,1,2,1,2,1,2,1,
        2,1,2,1,2,3,2,445,8,2,1,3,3,3,448,8,3,1,3,1,3,3,3,452,8,3,1,3,3,
        3,455,8,3,1,3,3,3,458,8,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,
        4,1,4,1,4,1,4,1,4,3,4,474,8,4,1,5,1,5,3,5,478,8,5,1,5,3,5,481,8,
        5,1,5,1,5,1,5,3,5,486,8,5,1,6,1,6,3,6,490,8,6,1,6,3,6,493,8,6,1,
        6,1,6,1,7,1,7,1,7,1,7,3,7,501,8,7,1,7,3,7,504,8,7,1,7,1,7,3,7,508,
        8,7,1,7,3,7,511,8,7,1,7,1,7,3,7,515,8,7,1,8,1,8,1,8,1,8,1,8,3,8,
        522,8,8,1,9,1,9,1,9,1,9,1,9,3,9,529,8,9,1,10,1,10,1,10,1,10,1,10,
        3,10,536,8,10,1,10,1,10,3,10,540,8,10,1,11,1,11,1,11,1,11,1,11,1,
        11,1,11,3,11,549,8,11,1,11,1,11,3,11,553,8,11,1,12,1,12,1,12,1,12,
        1,12,3,12,560,8,12,1,13,1,13,3,13,564,8,13,1,13,1,13,1,13,3,13,569,
        8,13,1,13,1,13,3,13,573,8,13,1,14,1,14,1,14,3,14,578,8,14,1,14,1,
        14,3,14,582,8,14,1,14,1,14,1,14,3,14,587,8,14,1,14,1,14,3,14,591,
        8,14,1,15,1,15,1,15,3,15,596,8,15,1,15,1,15,3,15,600,8,15,1,15,1,
        15,3,15,604,8,15,1,16,1,16,1,16,1,17,1,17,3,17,611,8,17,1,17,1,17,
        1,17,1,17,1,18,1,18,3,18,619,8,18,1,18,1,18,3,18,623,8,18,1,18,1,
        18,3,18,627,8,18,1,19,1,19,3,19,631,8,19,1,19,3,19,634,8,19,1,19,
        1,19,1,19,3,19,639,8,19,1,20,1,20,1,20,1,20,1,20,3,20,646,8,20,1,
        20,3,20,649,8,20,1,20,1,20,3,20,653,8,20,1,20,1,20,3,20,657,8,20,
        1,20,3,20,660,8,20,1,20,1,20,3,20,664,8,20,3,20,666,8,20,1,21,1,
        21,3,21,670,8,21,1,21,3,21,673,8,21,1,21,1,21,3,21,677,8,21,1,21,
        3,21,680,8,21,1,21,1,21,3,21,684,8,21,1,22,1,22,3,22,688,8,22,1,
        22,3,22,691,8,22,1,22,1,22,1,22,3,22,696,8,22,1,22,1,22,3,22,700,
        8,22,1,23,3,23,703,8,23,1,23,1,23,3,23,707,8,23,1,23,1,23,1,23,3,
        23,712,8,23,1,24,1,24,1,24,3,24,717,8,24,1,25,1,25,1,26,1,26,3,26,
        723,8,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,3,30,732,8,30,1,30,1,
        30,1,30,3,30,737,8,30,1,30,3,30,740,8,30,1,30,3,30,743,8,30,1,30,
        3,30,746,8,30,1,30,1,30,3,30,750,8,30,1,30,3,30,753,8,30,1,30,3,
        30,756,8,30,1,30,3,30,759,8,30,1,30,1,30,1,30,3,30,764,8,30,1,30,
        3,30,767,8,30,1,30,3,30,770,8,30,1,30,3,30,773,8,30,3,30,775,8,30,
        1,31,1,31,1,32,1,32,1,32,1,32,3,32,783,8,32,1,32,1,32,3,32,787,8,
        32,1,32,1,32,1,32,3,32,792,8,32,3,32,794,8,32,1,33,1,33,1,34,1,34,
        1,34,5,34,801,8,34,10,34,12,34,804,9,34,1,34,1,34,1,34,5,34,809,
        8,34,10,34,12,34,812,9,34,3,34,814,8,34,1,35,1,35,1,35,1,35,1,36,
        1,36,3,36,822,8,36,1,36,1,36,1,36,1,36,3,36,828,8,36,1,37,1,37,1,
        37,3,37,833,8,37,1,37,1,37,1,38,1,38,1,38,1,39,1,39,1,40,1,40,1,
        40,3,40,845,8,40,1,40,1,40,3,40,849,8,40,1,41,1,41,1,41,3,41,854,
        8,41,1,41,1,41,3,41,858,8,41,1,42,1,42,1,42,5,42,863,8,42,10,42,
        12,42,866,9,42,1,43,1,43,1,43,1,43,3,43,872,8,43,1,44,1,44,1,44,
        1,44,1,44,1,44,1,44,1,44,3,44,882,8,44,1,45,3,45,885,8,45,1,45,1,
        45,1,45,1,45,3,45,891,8,45,1,45,1,45,3,45,895,8,45,1,45,3,45,898,
        8,45,1,45,1,45,1,45,1,45,1,45,3,45,905,8,45,3,45,907,8,45,1,46,1,
        46,1,47,1,47,1,47,1,47,1,47,1,47,3,47,917,8,47,1,47,1,47,1,47,5,
        47,922,8,47,10,47,12,47,925,9,47,1,48,3,48,928,8,48,1,48,1,48,3,
        48,932,8,48,1,48,1,48,1,48,3,48,937,8,48,1,49,1,49,1,49,3,49,942,
        8,49,1,49,3,49,945,8,49,1,50,1,50,1,50,5,50,950,8,50,10,50,12,50,
        953,9,50,1,51,1,51,1,51,5,51,958,8,51,10,51,12,51,961,9,51,1,52,
        1,52,3,52,965,8,52,1,53,1,53,1,54,1,54,1,54,5,54,972,8,54,10,54,
        12,54,975,9,54,1,55,1,55,1,55,5,55,980,8,55,10,55,12,55,983,9,55,
        1,55,5,55,986,8,55,10,55,12,55,989,9,55,1,56,1,56,3,56,993,8,56,
        1,57,1,57,1,57,1,57,5,57,999,8,57,10,57,12,57,1002,9,57,1,57,1,57,
        3,57,1006,8,57,1,58,1,58,1,58,5,58,1011,8,58,10,58,12,58,1014,9,
        58,1,59,1,59,1,59,1,59,1,60,1,60,1,61,1,61,1,61,1,61,1,61,1,61,1,
        61,1,61,1,61,3,61,1031,8,61,1,62,1,62,1,62,1,62,1,63,1,63,1,64,1,
        64,1,64,3,64,1042,8,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,3,64,1051,
        8,64,1,64,1,64,1,64,1,64,3,64,1057,8,64,1,65,1,65,1,65,5,65,1062,
        8,65,10,65,12,65,1065,9,65,1,66,1,66,1,66,1,66,1,67,1,67,3,67,1073,
        8,67,1,68,1,68,1,68,1,68,5,68,1079,8,68,10,68,12,68,1082,9,68,1,
        68,3,68,1085,8,68,1,68,1,68,1,68,1,68,3,68,1091,8,68,1,69,1,69,1,
        69,1,69,1,69,1,69,3,69,1099,8,69,1,70,1,70,1,71,1,71,1,72,1,72,1,
        73,1,73,1,74,1,74,1,75,1,75,5,75,1113,8,75,10,75,12,75,1116,9,75,
        1,75,1,75,1,76,1,76,1,76,1,77,1,77,1,77,1,78,1,78,1,78,1,79,1,79,
        1,79,1,80,1,80,1,80,1,81,1,81,1,81,1,82,1,82,3,82,1140,8,82,1,82,
        1,82,1,82,3,82,1145,8,82,1,82,1,82,1,82,1,82,1,82,1,82,3,82,1153,
        8,82,1,82,1,82,1,82,1,82,1,82,1,82,5,82,1161,8,82,10,82,12,82,1164,
        9,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,
        1,82,1,82,1,82,1,82,1,82,3,82,1183,8,82,1,82,1,82,3,82,1187,8,82,
        1,82,1,82,1,82,1,82,3,82,1193,8,82,1,82,3,82,1196,8,82,1,82,3,82,
        1199,8,82,1,82,1,82,1,82,1,82,1,82,3,82,1206,8,82,1,82,1,82,1,82,
        3,82,1211,8,82,1,82,3,82,1214,8,82,1,82,1,82,1,82,1,82,1,82,3,82,
        1221,8,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,3,82,
        1233,8,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,5,82,1242,8,82,10,82,
        12,82,1245,9,82,1,82,3,82,1248,8,82,1,82,3,82,1251,8,82,1,82,1,82,
        1,82,1,82,1,82,3,82,1258,8,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,
        1,82,1,82,5,82,1269,8,82,10,82,12,82,1272,9,82,1,82,1,82,1,82,1,
        82,1,82,3,82,1279,8,82,1,82,1,82,1,82,3,82,1284,8,82,1,82,3,82,1287,
        8,82,1,82,1,82,1,82,1,82,3,82,1293,8,82,1,82,1,82,1,82,1,82,1,82,
        1,82,1,82,1,82,1,82,3,82,1304,8,82,1,82,1,82,1,82,1,82,1,82,1,82,
        1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,
        1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,
        1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,
        1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,
        1,82,1,82,1,82,1,82,3,82,1368,8,82,1,82,1,82,1,82,1,82,1,82,1,82,
        1,82,3,82,1377,8,82,1,82,1,82,3,82,1381,8,82,1,82,1,82,1,82,1,82,
        3,82,1387,8,82,1,82,1,82,3,82,1391,8,82,1,82,1,82,1,82,3,82,1396,
        8,82,1,82,1,82,1,82,1,82,3,82,1402,8,82,1,82,1,82,1,82,1,82,1,82,
        1,82,1,82,1,82,1,82,1,82,3,82,1414,8,82,1,82,1,82,1,82,1,82,1,82,
        1,82,3,82,1422,8,82,1,82,1,82,1,82,1,82,3,82,1428,8,82,1,82,1,82,
        1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,3,82,1441,8,82,1,82,
        4,82,1444,8,82,11,82,12,82,1445,1,82,1,82,1,82,1,82,1,82,1,82,1,
        82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,3,82,1462,8,82,1,82,1,82,1,
        82,5,82,1467,8,82,10,82,12,82,1470,9,82,1,82,3,82,1473,8,82,1,82,
        1,82,1,82,1,82,3,82,1479,8,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,
        1,82,1,82,1,82,1,82,1,82,1,82,3,82,1494,8,82,1,82,1,82,3,82,1498,
        8,82,1,82,1,82,1,82,1,82,3,82,1504,8,82,1,82,1,82,1,82,1,82,3,82,
        1510,8,82,1,82,3,82,1513,8,82,1,82,3,82,1516,8,82,1,82,1,82,1,82,
        1,82,3,82,1522,8,82,1,82,1,82,3,82,1526,8,82,1,82,1,82,1,82,1,82,
        1,82,1,82,5,82,1534,8,82,10,82,12,82,1537,9,82,1,82,1,82,1,82,1,
        82,1,82,1,82,3,82,1545,8,82,1,82,3,82,1548,8,82,1,82,1,82,1,82,1,
        82,1,82,1,82,1,82,3,82,1557,8,82,1,82,1,82,1,82,3,82,1562,8,82,1,
        82,1,82,1,82,1,82,3,82,1568,8,82,1,82,1,82,1,82,1,82,1,82,3,82,1575,
        8,82,1,82,3,82,1578,8,82,1,82,1,82,1,82,1,82,3,82,1584,8,82,1,82,
        1,82,1,82,1,82,1,82,1,82,1,82,5,82,1593,8,82,10,82,12,82,1596,9,
        82,3,82,1598,8,82,1,82,1,82,3,82,1602,8,82,1,82,1,82,1,82,3,82,1607,
        8,82,1,82,1,82,1,82,3,82,1612,8,82,1,82,1,82,1,82,1,82,1,82,3,82,
        1619,8,82,1,82,3,82,1622,8,82,1,82,3,82,1625,8,82,1,82,1,82,1,82,
        1,82,1,82,3,82,1632,8,82,1,82,1,82,1,82,3,82,1637,8,82,1,82,1,82,
        1,82,1,82,1,82,1,82,1,82,3,82,1646,8,82,1,82,1,82,1,82,1,82,1,82,
        1,82,3,82,1654,8,82,1,82,1,82,1,82,1,82,3,82,1660,8,82,1,82,3,82,
        1663,8,82,1,82,3,82,1666,8,82,1,82,1,82,1,82,1,82,3,82,1672,8,82,
        1,82,1,82,3,82,1676,8,82,1,82,1,82,3,82,1680,8,82,1,82,1,82,3,82,
        1684,8,82,3,82,1686,8,82,1,82,1,82,1,82,1,82,1,82,1,82,3,82,1694,
        8,82,1,82,1,82,1,82,1,82,1,82,1,82,3,82,1702,8,82,1,82,1,82,1,82,
        1,82,3,82,1708,8,82,1,82,1,82,1,82,1,82,3,82,1714,8,82,1,82,3,82,
        1717,8,82,1,82,1,82,3,82,1721,8,82,1,82,3,82,1724,8,82,1,82,1,82,
        3,82,1728,8,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,
        1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,5,82,1751,
        8,82,10,82,12,82,1754,9,82,3,82,1756,8,82,1,82,1,82,3,82,1760,8,
        82,1,82,1,82,1,82,1,82,3,82,1766,8,82,1,82,3,82,1769,8,82,1,82,3,
        82,1772,8,82,1,82,1,82,1,82,1,82,3,82,1778,8,82,1,82,1,82,1,82,1,
        82,1,82,1,82,3,82,1786,8,82,1,82,1,82,1,82,3,82,1791,8,82,1,82,1,
        82,1,82,1,82,3,82,1797,8,82,1,82,1,82,1,82,1,82,3,82,1803,8,82,1,
        82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,5,82,1813,8,82,10,82,12,82,
        1816,9,82,3,82,1818,8,82,1,82,1,82,1,82,5,82,1823,8,82,10,82,12,
        82,1826,9,82,1,82,1,82,5,82,1830,8,82,10,82,12,82,1833,9,82,1,82,
        1,82,1,82,5,82,1838,8,82,10,82,12,82,1841,9,82,3,82,1843,8,82,1,
        83,1,83,1,83,1,83,1,83,1,83,3,83,1851,8,83,1,83,1,83,3,83,1855,8,
        83,1,83,1,83,1,83,1,83,1,83,3,83,1862,8,83,1,83,1,83,1,83,1,83,1,
        83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,
        83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,
        83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,
        83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,
        83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,
        83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,
        83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,
        83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,
        83,1,83,1,83,1,83,1,83,1,83,3,83,1978,8,83,1,83,1,83,1,83,1,83,1,
        83,1,83,3,83,1986,8,83,1,83,1,83,1,83,1,83,1,83,1,83,3,83,1994,8,
        83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,3,83,2003,8,83,1,83,1,83,1,
        83,1,83,1,83,1,83,1,83,1,83,3,83,2013,8,83,1,84,1,84,3,84,2017,8,
        84,1,84,3,84,2020,8,84,1,84,1,84,1,84,1,84,3,84,2026,8,84,1,84,1,
        84,1,85,1,85,3,85,2032,8,85,1,85,1,85,1,85,1,85,1,86,1,86,1,86,1,
        86,1,86,1,86,3,86,2044,8,86,1,86,1,86,1,86,1,86,1,87,1,87,1,87,1,
        87,1,87,1,87,3,87,2056,8,87,1,87,1,87,1,87,3,87,2061,8,87,1,88,1,
        88,1,88,1,89,1,89,1,89,1,90,3,90,2070,8,90,1,90,3,90,2073,8,90,1,
        90,1,90,1,90,1,91,1,91,1,91,3,91,2081,8,91,1,91,1,91,1,91,1,91,1,
        91,3,91,2088,8,91,3,91,2090,8,91,1,91,1,91,1,91,3,91,2095,8,91,1,
        91,1,91,3,91,2099,8,91,1,91,1,91,1,91,3,91,2104,8,91,1,91,1,91,1,
        91,3,91,2109,8,91,1,91,1,91,1,91,3,91,2114,8,91,1,91,3,91,2117,8,
        91,1,91,1,91,1,91,3,91,2122,8,91,1,91,1,91,3,91,2126,8,91,1,91,1,
        91,1,91,3,91,2131,8,91,3,91,2133,8,91,1,92,1,92,3,92,2137,8,92,1,
        93,1,93,1,93,1,93,1,93,5,93,2144,8,93,10,93,12,93,2147,9,93,1,93,
        1,93,1,94,1,94,1,94,3,94,2154,8,94,1,95,1,95,1,96,1,96,1,96,1,96,
        1,96,3,96,2163,8,96,1,97,1,97,1,97,5,97,2168,8,97,10,97,12,97,2171,
        9,97,1,98,1,98,1,98,1,98,5,98,2177,8,98,10,98,12,98,2180,9,98,1,
        99,1,99,3,99,2184,8,99,1,99,3,99,2187,8,99,1,99,1,99,1,99,1,99,1,
        100,1,100,1,100,1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,
        1,101,1,101,5,101,2206,8,101,10,101,12,101,2209,9,101,1,102,1,102,
        1,102,1,102,5,102,2215,8,102,10,102,12,102,2218,9,102,1,102,1,102,
        1,103,1,103,3,103,2224,8,103,1,103,3,103,2227,8,103,1,104,1,104,
        1,104,5,104,2232,8,104,10,104,12,104,2235,9,104,1,104,3,104,2238,
        8,104,1,105,1,105,1,105,1,105,3,105,2244,8,105,1,106,1,106,1,106,
        1,106,5,106,2250,8,106,10,106,12,106,2253,9,106,1,106,1,106,1,107,
        1,107,1,107,1,107,5,107,2261,8,107,10,107,12,107,2264,9,107,1,107,
        1,107,1,108,1,108,1,108,1,108,1,108,1,108,3,108,2274,8,108,1,109,
        1,109,1,109,1,109,1,109,3,109,2281,8,109,1,110,1,110,1,110,1,110,
        3,110,2287,8,110,1,111,1,111,1,111,1,112,1,112,1,112,1,112,1,112,
        1,112,4,112,2298,8,112,11,112,12,112,2299,1,112,1,112,1,112,1,112,
        1,112,3,112,2307,8,112,1,112,1,112,1,112,1,112,1,112,3,112,2314,
        8,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,
        3,112,2326,8,112,1,112,1,112,1,112,1,112,5,112,2332,8,112,10,112,
        12,112,2335,9,112,1,112,5,112,2338,8,112,10,112,12,112,2341,9,112,
        3,112,2343,8,112,1,113,1,113,1,113,1,113,1,113,5,113,2350,8,113,
        10,113,12,113,2353,9,113,3,113,2355,8,113,1,113,1,113,1,113,1,113,
        1,113,5,113,2362,8,113,10,113,12,113,2365,9,113,3,113,2367,8,113,
        1,113,1,113,1,113,1,113,1,113,5,113,2374,8,113,10,113,12,113,2377,
        9,113,3,113,2379,8,113,1,113,1,113,1,113,1,113,1,113,5,113,2386,
        8,113,10,113,12,113,2389,9,113,3,113,2391,8,113,1,113,3,113,2394,
        8,113,1,113,1,113,1,113,3,113,2399,8,113,3,113,2401,8,113,1,114,
        1,114,1,114,1,115,1,115,1,115,3,115,2409,8,115,1,115,1,115,1,115,
        3,115,2414,8,115,1,115,1,115,1,115,1,115,3,115,2420,8,115,1,115,
        1,115,1,115,1,115,3,115,2426,8,115,1,115,5,115,2429,8,115,10,115,
        12,115,2432,9,115,1,116,1,116,1,116,1,116,1,116,3,116,2439,8,116,
        1,117,1,117,3,117,2443,8,117,1,117,1,117,3,117,2447,8,117,1,118,
        1,118,4,118,2451,8,118,11,118,12,118,2452,1,119,1,119,3,119,2457,
        8,119,1,119,1,119,1,119,1,119,5,119,2463,8,119,10,119,12,119,2466,
        9,119,1,119,3,119,2469,8,119,1,119,3,119,2472,8,119,1,119,3,119,
        2475,8,119,1,119,3,119,2478,8,119,1,119,1,119,3,119,2482,8,119,1,
        120,1,120,1,120,3,120,2487,8,120,1,120,1,120,1,120,5,120,2492,8,
        120,10,120,12,120,2495,9,120,1,120,3,120,2498,8,120,1,120,3,120,
        2501,8,120,1,120,3,120,2504,8,120,1,120,3,120,2507,8,120,3,120,2509,
        8,120,1,121,3,121,2512,8,121,1,122,1,122,1,122,1,122,1,122,1,122,
        1,122,1,122,1,122,1,122,3,122,2524,8,122,1,122,3,122,2527,8,122,
        1,122,1,122,3,122,2531,8,122,1,122,1,122,1,122,1,122,1,122,1,122,
        1,122,1,122,3,122,2541,8,122,1,122,1,122,3,122,2545,8,122,3,122,
        2547,8,122,1,122,3,122,2550,8,122,1,122,1,122,3,122,2554,8,122,1,
        123,1,123,5,123,2558,8,123,10,123,12,123,2561,9,123,1,123,3,123,
        2564,8,123,1,123,1,123,1,124,1,124,1,124,1,125,1,125,1,125,1,125,
        3,125,2575,8,125,1,125,1,125,1,125,1,126,1,126,1,126,1,126,1,126,
        3,126,2585,8,126,1,126,1,126,1,126,1,127,1,127,1,127,1,127,1,127,
        1,127,1,127,3,127,2597,8,127,1,128,1,128,1,128,1,128,1,128,1,128,
        1,128,1,128,1,128,1,128,1,128,5,128,2610,8,128,10,128,12,128,2613,
        9,128,1,128,1,128,3,128,2617,8,128,1,129,1,129,1,129,5,129,2622,
        8,129,10,129,12,129,2625,9,129,1,130,1,130,1,130,1,130,1,131,1,131,
        1,131,1,132,1,132,1,132,1,133,1,133,1,133,3,133,2640,8,133,1,133,
        5,133,2643,8,133,10,133,12,133,2646,9,133,1,133,1,133,1,134,1,134,
        1,134,1,134,1,134,1,134,5,134,2656,8,134,10,134,12,134,2659,9,134,
        1,134,1,134,3,134,2663,8,134,1,135,1,135,1,135,1,135,5,135,2669,
        8,135,10,135,12,135,2672,9,135,1,135,5,135,2675,8,135,10,135,12,
        135,2678,9,135,1,135,3,135,2681,8,135,1,136,1,136,1,136,1,136,1,
        136,5,136,2688,8,136,10,136,12,136,2691,9,136,1,136,1,136,1,136,
        1,136,1,136,1,136,1,136,1,136,1,136,1,136,5,136,2703,8,136,10,136,
        12,136,2706,9,136,1,136,1,136,3,136,2710,8,136,1,136,1,136,1,136,
        1,136,1,136,1,136,1,136,1,136,5,136,2720,8,136,10,136,12,136,2723,
        9,136,1,136,1,136,3,136,2727,8,136,1,137,1,137,1,137,1,137,5,137,
        2733,8,137,10,137,12,137,2736,9,137,3,137,2738,8,137,1,137,1,137,
        3,137,2742,8,137,1,138,1,138,1,138,1,138,1,138,1,138,1,138,1,138,
        1,138,1,138,5,138,2754,8,138,10,138,12,138,2757,9,138,1,138,1,138,
        1,138,1,139,1,139,1,139,1,139,1,139,5,139,2767,8,139,10,139,12,139,
        2770,9,139,1,139,1,139,3,139,2774,8,139,1,140,1,140,3,140,2778,8,
        140,1,140,3,140,2781,8,140,1,141,1,141,1,141,3,141,2786,8,141,1,
        141,1,141,1,141,1,141,1,141,5,141,2793,8,141,10,141,12,141,2796,
        9,141,3,141,2798,8,141,1,141,1,141,1,141,3,141,2803,8,141,1,141,
        1,141,1,141,5,141,2808,8,141,10,141,12,141,2811,9,141,3,141,2813,
        8,141,1,142,1,142,1,143,1,143,5,143,2819,8,143,10,143,12,143,2822,
        9,143,1,144,1,144,1,144,1,144,3,144,2828,8,144,1,144,1,144,1,144,
        1,144,1,144,3,144,2835,8,144,1,145,3,145,2838,8,145,1,145,1,145,
        1,145,3,145,2843,8,145,1,145,3,145,2846,8,145,1,145,1,145,1,145,
        3,145,2851,8,145,1,145,1,145,3,145,2855,8,145,1,145,3,145,2858,8,
        145,1,145,3,145,2861,8,145,1,146,1,146,1,146,1,146,3,146,2867,8,
        146,1,147,1,147,1,147,3,147,2872,8,147,1,147,1,147,1,148,3,148,2877,
        8,148,1,148,1,148,1,148,1,148,1,148,1,148,1,148,1,148,1,148,1,148,
        1,148,1,148,1,148,1,148,1,148,1,148,3,148,2895,8,148,3,148,2897,
        8,148,1,148,3,148,2900,8,148,1,149,1,149,1,149,1,149,1,150,1,150,
        1,150,5,150,2909,8,150,10,150,12,150,2912,9,150,1,151,1,151,1,151,
        1,151,5,151,2918,8,151,10,151,12,151,2921,9,151,1,151,1,151,1,152,
        1,152,3,152,2927,8,152,1,153,1,153,1,153,1,153,5,153,2933,8,153,
        10,153,12,153,2936,9,153,1,153,1,153,1,154,1,154,3,154,2942,8,154,
        1,155,1,155,3,155,2946,8,155,1,155,3,155,2949,8,155,1,155,1,155,
        1,155,1,155,1,155,1,155,3,155,2957,8,155,1,155,1,155,1,155,1,155,
        1,155,1,155,3,155,2965,8,155,1,155,1,155,1,155,1,155,3,155,2971,
        8,155,1,156,1,156,1,156,1,156,5,156,2977,8,156,10,156,12,156,2980,
        9,156,1,156,1,156,1,157,1,157,1,157,1,157,1,157,5,157,2989,8,157,
        10,157,12,157,2992,9,157,3,157,2994,8,157,1,157,1,157,1,157,1,158,
        3,158,3000,8,158,1,158,1,158,3,158,3004,8,158,3,158,3006,8,158,1,
        159,1,159,1,159,1,159,1,159,1,159,1,159,3,159,3015,8,159,1,159,1,
        159,1,159,1,159,1,159,1,159,1,159,1,159,1,159,1,159,3,159,3027,8,
        159,3,159,3029,8,159,1,159,1,159,1,159,1,159,1,159,3,159,3036,8,
        159,1,159,1,159,1,159,1,159,1,159,3,159,3043,8,159,1,159,1,159,1,
        159,1,159,3,159,3049,8,159,1,159,1,159,1,159,1,159,3,159,3055,8,
        159,3,159,3057,8,159,1,160,1,160,1,160,5,160,3062,8,160,10,160,12,
        160,3065,9,160,1,161,1,161,1,161,5,161,3070,8,161,10,161,12,161,
        3073,9,161,1,162,1,162,1,162,3,162,3078,8,162,1,162,1,162,1,163,
        1,163,1,163,3,163,3085,8,163,1,163,1,163,1,164,1,164,3,164,3091,
        8,164,1,164,1,164,3,164,3095,8,164,3,164,3097,8,164,1,165,1,165,
        1,165,5,165,3102,8,165,10,165,12,165,3105,9,165,1,166,1,166,1,166,
        1,166,5,166,3111,8,166,10,166,12,166,3114,9,166,1,166,1,166,1,167,
        1,167,1,167,1,167,1,167,1,167,5,167,3124,8,167,10,167,12,167,3127,
        9,167,1,167,1,167,3,167,3131,8,167,1,168,1,168,3,168,3135,8,168,
        1,169,1,169,1,170,1,170,1,170,1,170,1,170,1,170,1,170,1,170,1,170,
        1,170,3,170,3149,8,170,3,170,3151,8,170,1,170,1,170,1,170,1,170,
        1,170,1,170,5,170,3159,8,170,10,170,12,170,3162,9,170,1,171,3,171,
        3165,8,171,1,171,1,171,1,171,1,171,1,171,1,171,3,171,3173,8,171,
        1,171,1,171,1,171,1,171,1,171,5,171,3180,8,171,10,171,12,171,3183,
        9,171,1,171,1,171,1,171,3,171,3188,8,171,1,171,1,171,1,171,1,171,
        1,171,1,171,3,171,3196,8,171,1,171,1,171,1,171,3,171,3201,8,171,
        1,171,1,171,1,171,1,171,1,171,1,171,1,171,1,171,5,171,3211,8,171,
        10,171,12,171,3214,9,171,1,171,1,171,3,171,3218,8,171,1,171,3,171,
        3221,8,171,1,171,1,171,1,171,1,171,3,171,3227,8,171,1,171,1,171,
        3,171,3231,8,171,1,171,1,171,1,171,3,171,3236,8,171,1,171,1,171,
        1,171,3,171,3241,8,171,1,171,1,171,1,171,3,171,3246,8,171,1,172,
        1,172,1,172,1,172,3,172,3252,8,172,1,172,1,172,1,172,1,172,1,172,
        1,172,1,172,1,172,1,172,1,172,1,172,1,172,1,172,1,172,1,172,1,172,
        1,172,1,172,1,172,5,172,3273,8,172,10,172,12,172,3276,9,172,1,173,
        1,173,1,173,1,173,4,173,3282,8,173,11,173,12,173,3283,1,173,1,173,
        3,173,3288,8,173,1,173,1,173,1,173,1,173,1,173,4,173,3295,8,173,
        11,173,12,173,3296,1,173,1,173,3,173,3301,8,173,1,173,1,173,1,173,
        1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,
        5,173,3317,8,173,10,173,12,173,3320,9,173,3,173,3322,8,173,1,173,
        1,173,1,173,1,173,1,173,1,173,3,173,3330,8,173,1,173,1,173,1,173,
        1,173,1,173,1,173,1,173,3,173,3339,8,173,1,173,1,173,1,173,1,173,
        1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,
        1,173,1,173,1,173,1,173,4,173,3360,8,173,11,173,12,173,3361,1,173,
        1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,3,173,3373,8,173,
        1,173,1,173,1,173,5,173,3378,8,173,10,173,12,173,3381,9,173,3,173,
        3383,8,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,3,173,3392,
        8,173,1,173,1,173,3,173,3396,8,173,1,173,1,173,1,173,1,173,1,173,
        1,173,1,173,1,173,4,173,3406,8,173,11,173,12,173,3407,1,173,1,173,
        1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,
        1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,3,173,
        3433,8,173,1,173,1,173,1,173,1,173,1,173,3,173,3440,8,173,1,173,
        3,173,3443,8,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,
        1,173,1,173,1,173,1,173,1,173,3,173,3458,8,173,1,173,1,173,3,173,
        3462,8,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,5,173,
        3472,8,173,10,173,12,173,3475,9,173,1,174,1,174,1,174,1,174,1,174,
        1,174,1,174,1,174,4,174,3485,8,174,11,174,12,174,3486,3,174,3489,
        8,174,1,175,1,175,1,175,1,175,1,175,1,175,1,175,1,175,3,175,3499,
        8,175,1,176,1,176,1,177,1,177,1,178,1,178,1,179,1,179,1,180,1,180,
        1,180,3,180,3512,8,180,1,181,1,181,3,181,3516,8,181,1,182,1,182,
        1,182,4,182,3521,8,182,11,182,12,182,3522,1,183,1,183,1,183,3,183,
        3528,8,183,1,184,1,184,1,184,1,184,1,184,1,185,3,185,3536,8,185,
        1,185,1,185,3,185,3540,8,185,1,186,1,186,1,186,1,186,1,186,1,186,
        1,186,3,186,3549,8,186,1,187,1,187,1,187,3,187,3554,8,187,1,188,
        1,188,1,188,1,188,1,188,1,188,1,188,1,188,1,188,1,188,1,188,1,188,
        1,188,1,188,1,188,3,188,3571,8,188,1,188,1,188,3,188,3575,8,188,
        1,188,1,188,1,188,1,188,1,188,5,188,3582,8,188,10,188,12,188,3585,
        9,188,1,188,3,188,3588,8,188,3,188,3590,8,188,1,189,1,189,1,189,
        5,189,3595,8,189,10,189,12,189,3598,9,189,1,190,1,190,1,190,1,190,
        3,190,3604,8,190,1,190,3,190,3607,8,190,1,190,3,190,3610,8,190,1,
        191,1,191,1,191,5,191,3615,8,191,10,191,12,191,3618,9,191,1,192,
        1,192,1,192,1,192,3,192,3624,8,192,1,192,3,192,3627,8,192,1,193,
        1,193,1,193,5,193,3632,8,193,10,193,12,193,3635,9,193,1,194,1,194,
        1,194,1,194,1,194,3,194,3642,8,194,1,194,3,194,3645,8,194,1,195,
        1,195,1,195,1,195,1,195,1,196,1,196,1,196,1,196,5,196,3656,8,196,
        10,196,12,196,3659,9,196,1,197,1,197,1,197,1,197,1,198,1,198,1,198,
        1,198,1,198,1,198,1,198,1,198,1,198,1,198,1,198,5,198,3676,8,198,
        10,198,12,198,3679,9,198,1,198,1,198,1,198,1,198,1,198,5,198,3686,
        8,198,10,198,12,198,3689,9,198,3,198,3691,8,198,1,198,1,198,1,198,
        1,198,1,198,5,198,3698,8,198,10,198,12,198,3701,9,198,3,198,3703,
        8,198,3,198,3705,8,198,1,198,3,198,3708,8,198,1,198,3,198,3711,8,
        198,1,199,1,199,1,199,1,199,1,199,1,199,1,199,1,199,1,199,1,199,
        1,199,1,199,1,199,1,199,1,199,1,199,3,199,3729,8,199,1,200,1,200,
        1,200,1,200,1,200,1,200,1,200,3,200,3738,8,200,1,201,1,201,1,201,
        5,201,3743,8,201,10,201,12,201,3746,9,201,1,202,1,202,1,202,1,202,
        3,202,3752,8,202,1,203,1,203,1,203,5,203,3757,8,203,10,203,12,203,
        3760,9,203,1,204,1,204,1,205,1,205,4,205,3766,8,205,11,205,12,205,
        3767,1,206,1,206,3,206,3772,8,206,1,207,1,207,1,207,3,207,3777,8,
        207,1,208,1,208,1,209,3,209,3782,8,209,1,209,1,209,3,209,3786,8,
        209,1,209,1,209,3,209,3790,8,209,1,209,1,209,3,209,3794,8,209,1,
        209,1,209,3,209,3798,8,209,1,209,1,209,3,209,3802,8,209,1,209,1,
        209,3,209,3806,8,209,1,209,1,209,3,209,3810,8,209,1,209,1,209,3,
        209,3814,8,209,1,209,3,209,3817,8,209,1,210,1,210,1,210,1,210,1,
        210,1,210,1,210,3,210,3826,8,210,1,211,1,211,1,212,1,212,1,213,1,
        213,1,213,5,1752,1814,1824,1831,1839,5,94,230,340,344,346,214,0,
        2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,
        48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,
        92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,
        126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,
        158,160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,
        190,192,194,196,198,200,202,204,206,208,210,212,214,216,218,220,
        222,224,226,228,230,232,234,236,238,240,242,244,246,248,250,252,
        254,256,258,260,262,264,266,268,270,272,274,276,278,280,282,284,
        286,288,290,292,294,296,298,300,302,304,306,308,310,312,314,316,
        318,320,322,324,326,328,330,332,334,336,338,340,342,344,346,348,
        350,352,354,356,358,360,362,364,366,368,370,372,374,376,378,380,
        382,384,386,388,390,392,394,396,398,400,402,404,406,408,410,412,
        414,416,418,420,422,424,426,0,53,2,0,55,55,60,60,1,0,195,196,1,0,
        243,244,2,0,135,135,168,168,3,0,36,36,210,210,275,275,1,0,37,39,
        2,0,2,2,305,305,2,0,329,329,331,331,1,0,19,21,1,0,314,317,2,0,64,
        64,110,110,2,0,315,315,320,320,3,0,10,11,130,130,282,282,2,0,12,
        12,195,195,2,0,106,106,221,221,2,0,73,73,235,235,2,0,104,104,191,
        191,2,0,141,141,154,154,1,0,84,85,2,0,268,268,298,298,2,0,56,56,
        76,76,5,0,81,81,93,93,127,127,140,140,182,182,1,0,110,111,2,0,127,
        127,140,140,2,0,195,195,325,325,2,0,53,53,176,176,3,0,103,103,190,
        190,245,245,4,0,122,122,161,161,254,254,288,288,3,0,122,122,254,
        254,288,288,2,0,55,55,115,115,3,0,55,55,60,60,258,258,3,0,130,130,
        282,282,290,290,2,0,314,315,320,320,1,0,316,319,2,0,314,315,323,
        323,2,0,98,98,100,100,1,0,266,267,2,0,1,1,141,141,2,0,1,1,137,137,
        3,0,68,68,171,171,277,277,1,0,305,306,1,0,314,324,4,0,58,58,154,
        154,194,194,202,202,2,0,130,130,282,282,1,0,314,315,2,0,116,116,
        211,211,2,0,203,203,259,259,2,0,136,136,218,218,1,0,330,331,2,0,
        117,117,253,253,51,0,53,54,56,57,61,62,64,65,67,67,69,73,76,76,78,
        81,83,83,85,91,93,93,96,97,102,104,106,114,116,117,121,121,123,129,
        132,132,134,136,139,140,143,145,148,148,151,153,155,156,158,160,
        162,162,165,165,167,170,173,186,189,191,193,193,196,197,200,201,
        204,204,206,207,209,218,220,228,230,236,238,245,249,251,253,253,
        255,257,259,267,269,273,276,276,278,283,285,287,291,294,297,299,
        302,302,319,319,15,0,59,59,95,95,122,122,142,142,157,157,161,161,
        166,166,172,172,192,192,198,198,237,237,248,248,254,254,288,288,
        296,296,17,0,53,58,60,94,96,121,123,141,143,156,158,160,162,165,
        167,171,173,191,193,197,199,236,238,247,249,253,255,287,289,295,
        297,304,319,319,4386,0,429,1,0,0,0,2,435,1,0,0,0,4,444,1,0,0,0,6,
        447,1,0,0,0,8,473,1,0,0,0,10,475,1,0,0,0,12,487,1,0,0,0,14,496,1,
        0,0,0,16,516,1,0,0,0,18,523,1,0,0,0,20,530,1,0,0,0,22,541,1,0,0,
        0,24,554,1,0,0,0,26,561,1,0,0,0,28,574,1,0,0,0,30,592,1,0,0,0,32,
        605,1,0,0,0,34,608,1,0,0,0,36,616,1,0,0,0,38,628,1,0,0,0,40,665,
        1,0,0,0,42,667,1,0,0,0,44,685,1,0,0,0,46,702,1,0,0,0,48,713,1,0,
        0,0,50,718,1,0,0,0,52,722,1,0,0,0,54,724,1,0,0,0,56,726,1,0,0,0,
        58,728,1,0,0,0,60,774,1,0,0,0,62,776,1,0,0,0,64,793,1,0,0,0,66,795,
        1,0,0,0,68,813,1,0,0,0,70,815,1,0,0,0,72,827,1,0,0,0,74,829,1,0,
        0,0,76,836,1,0,0,0,78,839,1,0,0,0,80,841,1,0,0,0,82,850,1,0,0,0,
        84,859,1,0,0,0,86,871,1,0,0,0,88,881,1,0,0,0,90,906,1,0,0,0,92,908,
        1,0,0,0,94,916,1,0,0,0,96,936,1,0,0,0,98,944,1,0,0,0,100,946,1,0,
        0,0,102,954,1,0,0,0,104,962,1,0,0,0,106,966,1,0,0,0,108,968,1,0,
        0,0,110,976,1,0,0,0,112,992,1,0,0,0,114,1005,1,0,0,0,116,1007,1,
        0,0,0,118,1015,1,0,0,0,120,1019,1,0,0,0,122,1030,1,0,0,0,124,1032,
        1,0,0,0,126,1036,1,0,0,0,128,1056,1,0,0,0,130,1058,1,0,0,0,132,1066,
        1,0,0,0,134,1072,1,0,0,0,136,1090,1,0,0,0,138,1098,1,0,0,0,140,1100,
        1,0,0,0,142,1102,1,0,0,0,144,1104,1,0,0,0,146,1106,1,0,0,0,148,1108,
        1,0,0,0,150,1110,1,0,0,0,152,1119,1,0,0,0,154,1122,1,0,0,0,156,1125,
        1,0,0,0,158,1128,1,0,0,0,160,1131,1,0,0,0,162,1134,1,0,0,0,164,1842,
        1,0,0,0,166,2012,1,0,0,0,168,2014,1,0,0,0,170,2031,1,0,0,0,172,2037,
        1,0,0,0,174,2049,1,0,0,0,176,2062,1,0,0,0,178,2065,1,0,0,0,180,2069,
        1,0,0,0,182,2132,1,0,0,0,184,2134,1,0,0,0,186,2138,1,0,0,0,188,2150,
        1,0,0,0,190,2155,1,0,0,0,192,2162,1,0,0,0,194,2164,1,0,0,0,196,2172,
        1,0,0,0,198,2181,1,0,0,0,200,2192,1,0,0,0,202,2207,1,0,0,0,204,2210,
        1,0,0,0,206,2221,1,0,0,0,208,2237,1,0,0,0,210,2243,1,0,0,0,212,2245,
        1,0,0,0,214,2256,1,0,0,0,216,2273,1,0,0,0,218,2280,1,0,0,0,220,2282,
        1,0,0,0,222,2288,1,0,0,0,224,2342,1,0,0,0,226,2354,1,0,0,0,228,2402,
        1,0,0,0,230,2408,1,0,0,0,232,2438,1,0,0,0,234,2440,1,0,0,0,236,2448,
        1,0,0,0,238,2481,1,0,0,0,240,2508,1,0,0,0,242,2511,1,0,0,0,244,2523,
        1,0,0,0,246,2555,1,0,0,0,248,2567,1,0,0,0,250,2570,1,0,0,0,252,2579,
        1,0,0,0,254,2596,1,0,0,0,256,2616,1,0,0,0,258,2618,1,0,0,0,260,2626,
        1,0,0,0,262,2630,1,0,0,0,264,2633,1,0,0,0,266,2636,1,0,0,0,268,2662,
        1,0,0,0,270,2664,1,0,0,0,272,2726,1,0,0,0,274,2741,1,0,0,0,276,2743,
        1,0,0,0,278,2773,1,0,0,0,280,2775,1,0,0,0,282,2782,1,0,0,0,284,2814,
        1,0,0,0,286,2816,1,0,0,0,288,2834,1,0,0,0,290,2860,1,0,0,0,292,2866,
        1,0,0,0,294,2868,1,0,0,0,296,2899,1,0,0,0,298,2901,1,0,0,0,300,2905,
        1,0,0,0,302,2913,1,0,0,0,304,2924,1,0,0,0,306,2928,1,0,0,0,308,2939,
        1,0,0,0,310,2970,1,0,0,0,312,2972,1,0,0,0,314,2983,1,0,0,0,316,3005,
        1,0,0,0,318,3056,1,0,0,0,320,3058,1,0,0,0,322,3066,1,0,0,0,324,3077,
        1,0,0,0,326,3084,1,0,0,0,328,3088,1,0,0,0,330,3098,1,0,0,0,332,3106,
        1,0,0,0,334,3130,1,0,0,0,336,3134,1,0,0,0,338,3136,1,0,0,0,340,3150,
        1,0,0,0,342,3245,1,0,0,0,344,3251,1,0,0,0,346,3461,1,0,0,0,348,3488,
        1,0,0,0,350,3498,1,0,0,0,352,3500,1,0,0,0,354,3502,1,0,0,0,356,3504,
        1,0,0,0,358,3506,1,0,0,0,360,3508,1,0,0,0,362,3513,1,0,0,0,364,3520,
        1,0,0,0,366,3524,1,0,0,0,368,3529,1,0,0,0,370,3539,1,0,0,0,372,3548,
        1,0,0,0,374,3553,1,0,0,0,376,3589,1,0,0,0,378,3591,1,0,0,0,380,3599,
        1,0,0,0,382,3611,1,0,0,0,384,3619,1,0,0,0,386,3628,1,0,0,0,388,3636,
        1,0,0,0,390,3646,1,0,0,0,392,3651,1,0,0,0,394,3660,1,0,0,0,396,3710,
        1,0,0,0,398,3728,1,0,0,0,400,3737,1,0,0,0,402,3739,1,0,0,0,404,3751,
        1,0,0,0,406,3753,1,0,0,0,408,3761,1,0,0,0,410,3765,1,0,0,0,412,3771,
        1,0,0,0,414,3776,1,0,0,0,416,3778,1,0,0,0,418,3816,1,0,0,0,420,3825,
        1,0,0,0,422,3827,1,0,0,0,424,3829,1,0,0,0,426,3831,1,0,0,0,428,430,
        3,4,2,0,429,428,1,0,0,0,430,431,1,0,0,0,431,429,1,0,0,0,431,432,
        1,0,0,0,432,433,1,0,0,0,433,434,5,0,0,1,434,1,1,0,0,0,435,436,3,
        4,2,0,436,437,5,0,0,1,437,3,1,0,0,0,438,445,3,6,3,0,439,445,3,44,
        22,0,440,445,3,38,19,0,441,445,3,40,20,0,442,445,3,42,21,0,443,445,
        3,46,23,0,444,438,1,0,0,0,444,439,1,0,0,0,444,440,1,0,0,0,444,441,
        1,0,0,0,444,442,1,0,0,0,444,443,1,0,0,0,445,5,1,0,0,0,446,448,3,
        76,38,0,447,446,1,0,0,0,447,448,1,0,0,0,448,449,1,0,0,0,449,451,
        3,180,90,0,450,452,3,60,30,0,451,450,1,0,0,0,451,452,1,0,0,0,452,
        454,1,0,0,0,453,455,3,66,33,0,454,453,1,0,0,0,454,455,1,0,0,0,455,
        457,1,0,0,0,456,458,3,64,32,0,457,456,1,0,0,0,457,458,1,0,0,0,458,
        7,1,0,0,0,459,474,3,10,5,0,460,474,3,12,6,0,461,474,3,30,15,0,462,
        474,3,32,16,0,463,474,3,34,17,0,464,474,3,36,18,0,465,474,3,14,7,
        0,466,474,3,16,8,0,467,474,3,18,9,0,468,474,3,20,10,0,469,474,3,
        22,11,0,470,474,3,24,12,0,471,474,3,26,13,0,472,474,3,28,14,0,473,
        459,1,0,0,0,473,460,1,0,0,0,473,461,1,0,0,0,473,462,1,0,0,0,473,
        463,1,0,0,0,473,464,1,0,0,0,473,465,1,0,0,0,473,466,1,0,0,0,473,
        467,1,0,0,0,473,468,1,0,0,0,473,469,1,0,0,0,473,470,1,0,0,0,473,
        471,1,0,0,0,473,472,1,0,0,0,474,9,1,0,0,0,475,477,5,280,0,0,476,
        478,3,68,34,0,477,476,1,0,0,0,477,478,1,0,0,0,478,480,1,0,0,0,479,
        481,3,90,45,0,480,479,1,0,0,0,480,481,1,0,0,0,481,482,1,0,0,0,482,
        485,3,80,40,0,483,484,5,50,0,0,484,486,3,84,42,0,485,483,1,0,0,0,
        485,486,1,0,0,0,486,11,1,0,0,0,487,489,5,26,0,0,488,490,3,68,34,
        0,489,488,1,0,0,0,489,490,1,0,0,0,490,492,1,0,0,0,491,493,3,90,45,
        0,492,491,1,0,0,0,492,493,1,0,0,0,493,494,1,0,0,0,494,495,3,82,41,
        0,495,13,1,0,0,0,496,497,5,35,0,0,497,498,5,58,0,0,498,500,5,294,
        0,0,499,501,3,72,36,0,500,499,1,0,0,0,500,501,1,0,0,0,501,503,1,
        0,0,0,502,504,3,90,45,0,503,502,1,0,0,0,503,504,1,0,0,0,504,505,
        1,0,0,0,505,507,3,54,27,0,506,508,3,50,25,0,507,506,1,0,0,0,507,
        508,1,0,0,0,508,510,1,0,0,0,509,511,3,56,28,0,510,509,1,0,0,0,510,
        511,1,0,0,0,511,512,1,0,0,0,512,514,3,58,29,0,513,515,3,98,49,0,
        514,513,1,0,0,0,514,515,1,0,0,0,515,15,1,0,0,0,516,517,5,231,0,0,
        517,518,5,85,0,0,518,521,3,108,54,0,519,520,5,141,0,0,520,522,3,
        72,36,0,521,519,1,0,0,0,521,522,1,0,0,0,522,17,1,0,0,0,523,524,5,
        56,0,0,524,525,5,85,0,0,525,528,3,116,58,0,526,527,5,141,0,0,527,
        529,3,72,36,0,528,526,1,0,0,0,528,529,1,0,0,0,529,19,1,0,0,0,530,
        531,5,117,0,0,531,532,5,85,0,0,532,535,3,100,50,0,533,534,5,151,
        0,0,534,536,5,124,0,0,535,533,1,0,0,0,535,536,1,0,0,0,536,539,1,
        0,0,0,537,538,5,141,0,0,538,540,3,72,36,0,539,537,1,0,0,0,539,540,
        1,0,0,0,540,21,1,0,0,0,541,542,5,117,0,0,542,543,5,244,0,0,543,544,
        5,151,0,0,544,545,7,0,0,0,545,548,7,1,0,0,546,547,5,198,0,0,547,
        549,3,100,50,0,548,546,1,0,0,0,548,549,1,0,0,0,549,552,1,0,0,0,550,
        551,5,141,0,0,551,553,3,72,36,0,552,550,1,0,0,0,552,553,1,0,0,0,
        553,23,1,0,0,0,554,555,5,17,0,0,555,556,7,1,0,0,556,559,3,98,49,
        0,557,558,5,141,0,0,558,560,3,72,36,0,559,557,1,0,0,0,559,560,1,
        0,0,0,560,25,1,0,0,0,561,563,5,47,0,0,562,564,5,233,0,0,563,562,
        1,0,0,0,563,564,1,0,0,0,564,565,1,0,0,0,565,568,3,86,43,0,566,567,
        5,48,0,0,567,569,5,329,0,0,568,566,1,0,0,0,568,569,1,0,0,0,569,572,
        1,0,0,0,570,571,5,141,0,0,571,573,3,72,36,0,572,570,1,0,0,0,572,
        573,1,0,0,0,573,27,1,0,0,0,574,577,5,18,0,0,575,576,5,329,0,0,576,
        578,7,2,0,0,577,575,1,0,0,0,577,578,1,0,0,0,578,581,1,0,0,0,579,
        580,5,141,0,0,580,582,3,72,36,0,581,579,1,0,0,0,581,582,1,0,0,0,
        582,586,1,0,0,0,583,587,3,90,45,0,584,585,5,22,0,0,585,587,3,102,
        51,0,586,583,1,0,0,0,586,584,1,0,0,0,586,587,1,0,0,0,587,590,1,0,
        0,0,588,589,7,1,0,0,589,591,7,3,0,0,590,588,1,0,0,0,590,591,1,0,
        0,0,591,29,1,0,0,0,592,593,5,32,0,0,593,595,3,68,34,0,594,596,3,
        88,44,0,595,594,1,0,0,0,595,596,1,0,0,0,596,599,1,0,0,0,597,598,
        5,71,0,0,598,600,3,100,50,0,599,597,1,0,0,0,599,600,1,0,0,0,600,
        603,1,0,0,0,601,602,5,22,0,0,602,604,3,102,51,0,603,601,1,0,0,0,
        603,604,1,0,0,0,604,31,1,0,0,0,605,606,5,94,0,0,606,607,3,82,41,
        0,607,33,1,0,0,0,608,610,5,94,0,0,609,611,5,102,0,0,610,609,1,0,
        0,0,610,611,1,0,0,0,611,612,1,0,0,0,612,613,3,136,68,0,613,614,5,
        245,0,0,614,615,3,116,58,0,615,35,1,0,0,0,616,618,5,177,0,0,617,
        619,3,56,28,0,618,617,1,0,0,0,618,619,1,0,0,0,619,620,1,0,0,0,620,
        622,3,58,29,0,621,623,3,98,49,0,622,621,1,0,0,0,622,623,1,0,0,0,
        623,626,1,0,0,0,624,625,5,85,0,0,625,627,3,52,26,0,626,624,1,0,0,
        0,626,627,1,0,0,0,627,37,1,0,0,0,628,630,5,27,0,0,629,631,3,68,34,
        0,630,629,1,0,0,0,630,631,1,0,0,0,631,633,1,0,0,0,632,634,3,90,45,
        0,633,632,1,0,0,0,633,634,1,0,0,0,634,635,1,0,0,0,635,636,5,296,
        0,0,636,638,3,84,42,0,637,639,3,98,49,0,638,637,1,0,0,0,638,639,
        1,0,0,0,639,39,1,0,0,0,640,641,5,33,0,0,641,642,5,329,0,0,642,645,
        7,2,0,0,643,644,5,141,0,0,644,646,3,68,34,0,645,643,1,0,0,0,645,
        646,1,0,0,0,646,648,1,0,0,0,647,649,5,29,0,0,648,647,1,0,0,0,648,
        649,1,0,0,0,649,652,1,0,0,0,650,651,5,34,0,0,651,653,5,325,0,0,652,
        650,1,0,0,0,652,653,1,0,0,0,653,666,1,0,0,0,654,656,5,33,0,0,655,
        657,3,68,34,0,656,655,1,0,0,0,656,657,1,0,0,0,657,659,1,0,0,0,658,
        660,5,29,0,0,659,658,1,0,0,0,659,660,1,0,0,0,660,663,1,0,0,0,661,
        662,5,34,0,0,662,664,5,325,0,0,663,661,1,0,0,0,663,664,1,0,0,0,664,
        666,1,0,0,0,665,640,1,0,0,0,665,654,1,0,0,0,666,41,1,0,0,0,667,669,
        5,35,0,0,668,670,3,72,36,0,669,668,1,0,0,0,669,670,1,0,0,0,670,672,
        1,0,0,0,671,673,3,90,45,0,672,671,1,0,0,0,672,673,1,0,0,0,673,674,
        1,0,0,0,674,676,3,54,27,0,675,677,3,50,25,0,676,675,1,0,0,0,676,
        677,1,0,0,0,677,679,1,0,0,0,678,680,3,56,28,0,679,678,1,0,0,0,679,
        680,1,0,0,0,680,681,1,0,0,0,681,683,3,58,29,0,682,684,3,98,49,0,
        683,682,1,0,0,0,683,684,1,0,0,0,684,43,1,0,0,0,685,687,5,28,0,0,
        686,688,3,68,34,0,687,686,1,0,0,0,687,688,1,0,0,0,688,690,1,0,0,
        0,689,691,3,90,45,0,690,689,1,0,0,0,690,691,1,0,0,0,691,692,1,0,
        0,0,692,693,5,296,0,0,693,695,3,84,42,0,694,696,3,98,49,0,695,694,
        1,0,0,0,695,696,1,0,0,0,696,699,1,0,0,0,697,698,5,50,0,0,698,700,
        3,84,42,0,699,697,1,0,0,0,699,700,1,0,0,0,700,45,1,0,0,0,701,703,
        3,76,38,0,702,701,1,0,0,0,702,703,1,0,0,0,703,704,1,0,0,0,704,706,
        5,49,0,0,705,707,3,68,34,0,706,705,1,0,0,0,706,707,1,0,0,0,707,708,
        1,0,0,0,708,709,5,296,0,0,709,711,3,84,42,0,710,712,3,98,49,0,711,
        710,1,0,0,0,711,712,1,0,0,0,712,47,1,0,0,0,713,714,5,46,0,0,714,
        716,3,84,42,0,715,717,3,98,49,0,716,715,1,0,0,0,716,717,1,0,0,0,
        717,49,1,0,0,0,718,719,5,40,0,0,719,51,1,0,0,0,720,723,3,116,58,
        0,721,723,3,100,50,0,722,720,1,0,0,0,722,721,1,0,0,0,723,53,1,0,
        0,0,724,725,7,4,0,0,725,55,1,0,0,0,726,727,7,5,0,0,727,57,1,0,0,
        0,728,729,5,325,0,0,729,59,1,0,0,0,730,732,5,170,0,0,731,730,1,0,
        0,0,731,732,1,0,0,0,732,736,1,0,0,0,733,737,5,23,0,0,734,735,5,42,
        0,0,735,737,5,41,0,0,736,733,1,0,0,0,736,734,1,0,0,0,737,739,1,0,
        0,0,738,740,3,98,49,0,739,738,1,0,0,0,739,740,1,0,0,0,740,775,1,
        0,0,0,741,743,5,170,0,0,742,741,1,0,0,0,742,743,1,0,0,0,743,745,
        1,0,0,0,744,746,5,43,0,0,745,744,1,0,0,0,745,746,1,0,0,0,746,747,
        1,0,0,0,747,749,5,41,0,0,748,750,3,90,45,0,749,748,1,0,0,0,749,750,
        1,0,0,0,750,752,1,0,0,0,751,753,3,50,25,0,752,751,1,0,0,0,752,753,
        1,0,0,0,753,755,1,0,0,0,754,756,3,98,49,0,755,754,1,0,0,0,755,756,
        1,0,0,0,756,775,1,0,0,0,757,759,5,170,0,0,758,757,1,0,0,0,758,759,
        1,0,0,0,759,760,1,0,0,0,760,761,5,44,0,0,761,763,5,41,0,0,762,764,
        3,62,31,0,763,762,1,0,0,0,763,764,1,0,0,0,764,766,1,0,0,0,765,767,
        3,90,45,0,766,765,1,0,0,0,766,767,1,0,0,0,767,769,1,0,0,0,768,770,
        3,50,25,0,769,768,1,0,0,0,769,770,1,0,0,0,770,772,1,0,0,0,771,773,
        3,98,49,0,772,771,1,0,0,0,772,773,1,0,0,0,773,775,1,0,0,0,774,731,
        1,0,0,0,774,742,1,0,0,0,774,758,1,0,0,0,775,61,1,0,0,0,776,777,5,
        325,0,0,777,63,1,0,0,0,778,779,5,45,0,0,779,782,5,52,0,0,780,781,
        5,63,0,0,781,783,3,148,74,0,782,780,1,0,0,0,782,783,1,0,0,0,783,
        794,1,0,0,0,784,786,5,45,0,0,785,787,5,178,0,0,786,785,1,0,0,0,786,
        787,1,0,0,0,787,788,1,0,0,0,788,791,5,51,0,0,789,790,5,63,0,0,790,
        792,3,148,74,0,791,789,1,0,0,0,791,792,1,0,0,0,792,794,1,0,0,0,793,
        778,1,0,0,0,793,784,1,0,0,0,794,65,1,0,0,0,795,796,5,24,0,0,796,
        67,1,0,0,0,797,802,3,72,36,0,798,799,5,1,0,0,799,801,3,72,36,0,800,
        798,1,0,0,0,801,804,1,0,0,0,802,800,1,0,0,0,802,803,1,0,0,0,803,
        814,1,0,0,0,804,802,1,0,0,0,805,810,3,70,35,0,806,807,5,1,0,0,807,
        809,3,70,35,0,808,806,1,0,0,0,809,812,1,0,0,0,810,808,1,0,0,0,810,
        811,1,0,0,0,811,814,1,0,0,0,812,810,1,0,0,0,813,797,1,0,0,0,813,
        805,1,0,0,0,814,69,1,0,0,0,815,816,3,148,74,0,816,817,7,6,0,0,817,
        818,3,72,36,0,818,71,1,0,0,0,819,821,3,148,74,0,820,822,3,74,37,
        0,821,820,1,0,0,0,821,822,1,0,0,0,822,828,1,0,0,0,823,824,5,3,0,
        0,824,825,3,6,3,0,825,826,5,4,0,0,826,828,1,0,0,0,827,819,1,0,0,
        0,827,823,1,0,0,0,828,73,1,0,0,0,829,832,5,5,0,0,830,833,5,329,0,
        0,831,833,3,148,74,0,832,830,1,0,0,0,832,831,1,0,0,0,833,834,1,0,
        0,0,834,835,5,6,0,0,835,75,1,0,0,0,836,837,3,148,74,0,837,838,3,
        78,39,0,838,77,1,0,0,0,839,840,5,305,0,0,840,79,1,0,0,0,841,842,
        5,296,0,0,842,844,3,84,42,0,843,845,3,98,49,0,844,843,1,0,0,0,844,
        845,1,0,0,0,845,848,1,0,0,0,846,847,5,245,0,0,847,849,3,110,55,0,
        848,846,1,0,0,0,848,849,1,0,0,0,849,81,1,0,0,0,850,851,5,296,0,0,
        851,853,3,84,42,0,852,854,3,98,49,0,853,852,1,0,0,0,853,854,1,0,
        0,0,854,857,1,0,0,0,855,856,5,245,0,0,856,858,3,116,58,0,857,855,
        1,0,0,0,857,858,1,0,0,0,858,83,1,0,0,0,859,864,3,148,74,0,860,861,
        5,7,0,0,861,863,3,148,74,0,862,860,1,0,0,0,863,866,1,0,0,0,864,862,
        1,0,0,0,864,865,1,0,0,0,865,85,1,0,0,0,866,864,1,0,0,0,867,868,7,
        7,0,0,868,872,5,214,0,0,869,870,5,329,0,0,870,872,5,244,0,0,871,
        867,1,0,0,0,871,869,1,0,0,0,872,87,1,0,0,0,873,882,5,95,0,0,874,
        882,5,157,0,0,875,876,5,172,0,0,876,882,5,205,0,0,877,878,5,237,
        0,0,878,882,5,205,0,0,879,880,5,142,0,0,880,882,5,205,0,0,881,873,
        1,0,0,0,881,874,1,0,0,0,881,875,1,0,0,0,881,877,1,0,0,0,881,879,
        1,0,0,0,882,89,1,0,0,0,883,885,3,92,46,0,884,883,1,0,0,0,884,885,
        1,0,0,0,885,886,1,0,0,0,886,887,5,31,0,0,887,890,3,94,47,0,888,889,
        5,71,0,0,889,891,3,100,50,0,890,888,1,0,0,0,890,891,1,0,0,0,891,
        894,1,0,0,0,892,893,5,22,0,0,893,895,3,102,51,0,894,892,1,0,0,0,
        894,895,1,0,0,0,895,907,1,0,0,0,896,898,3,92,46,0,897,896,1,0,0,
        0,897,898,1,0,0,0,898,899,1,0,0,0,899,900,5,31,0,0,900,901,5,71,
        0,0,901,904,3,100,50,0,902,903,5,22,0,0,903,905,3,102,51,0,904,902,
        1,0,0,0,904,905,1,0,0,0,905,907,1,0,0,0,906,884,1,0,0,0,906,897,
        1,0,0,0,907,91,1,0,0,0,908,909,7,8,0,0,909,93,1,0,0,0,910,911,6,
        47,-1,0,911,917,3,96,48,0,912,913,5,3,0,0,913,914,3,94,47,0,914,
        915,5,4,0,0,915,917,1,0,0,0,916,910,1,0,0,0,916,912,1,0,0,0,917,
        923,1,0,0,0,918,919,10,1,0,0,919,920,7,9,0,0,920,922,3,94,47,2,921,
        918,1,0,0,0,922,925,1,0,0,0,923,921,1,0,0,0,923,924,1,0,0,0,924,
        95,1,0,0,0,925,923,1,0,0,0,926,928,5,315,0,0,927,926,1,0,0,0,927,
        928,1,0,0,0,928,929,1,0,0,0,929,937,5,331,0,0,930,932,5,315,0,0,
        931,930,1,0,0,0,931,932,1,0,0,0,932,933,1,0,0,0,933,937,5,329,0,
        0,934,937,5,29,0,0,935,937,5,30,0,0,936,927,1,0,0,0,936,931,1,0,
        0,0,936,934,1,0,0,0,936,935,1,0,0,0,937,97,1,0,0,0,938,939,5,25,
        0,0,939,945,3,130,65,0,940,942,5,25,0,0,941,940,1,0,0,0,941,942,
        1,0,0,0,942,943,1,0,0,0,943,945,3,128,64,0,944,938,1,0,0,0,944,941,
        1,0,0,0,945,99,1,0,0,0,946,951,3,106,53,0,947,948,5,1,0,0,948,950,
        3,106,53,0,949,947,1,0,0,0,950,953,1,0,0,0,951,949,1,0,0,0,951,952,
        1,0,0,0,952,101,1,0,0,0,953,951,1,0,0,0,954,959,3,104,52,0,955,956,
        5,1,0,0,956,958,3,104,52,0,957,955,1,0,0,0,958,961,1,0,0,0,959,957,
        1,0,0,0,959,960,1,0,0,0,960,103,1,0,0,0,961,959,1,0,0,0,962,964,
        3,106,53,0,963,965,7,10,0,0,964,963,1,0,0,0,964,965,1,0,0,0,965,
        105,1,0,0,0,966,967,3,148,74,0,967,107,1,0,0,0,968,973,3,124,62,
        0,969,970,5,1,0,0,970,972,3,124,62,0,971,969,1,0,0,0,972,975,1,0,
        0,0,973,971,1,0,0,0,973,974,1,0,0,0,974,109,1,0,0,0,975,973,1,0,
        0,0,976,981,3,112,56,0,977,978,5,1,0,0,978,980,3,112,56,0,979,977,
        1,0,0,0,980,983,1,0,0,0,981,979,1,0,0,0,981,982,1,0,0,0,982,987,
        1,0,0,0,983,981,1,0,0,0,984,986,3,114,57,0,985,984,1,0,0,0,986,989,
        1,0,0,0,987,985,1,0,0,0,987,988,1,0,0,0,988,111,1,0,0,0,989,987,
        1,0,0,0,990,993,3,118,59,0,991,993,5,316,0,0,992,990,1,0,0,0,992,
        991,1,0,0,0,993,113,1,0,0,0,994,995,7,11,0,0,995,1000,3,120,60,0,
        996,997,5,1,0,0,997,999,3,120,60,0,998,996,1,0,0,0,999,1002,1,0,
        0,0,1000,998,1,0,0,0,1000,1001,1,0,0,0,1001,1006,1,0,0,0,1002,1000,
        1,0,0,0,1003,1004,5,314,0,0,1004,1006,3,116,58,0,1005,994,1,0,0,
        0,1005,1003,1,0,0,0,1006,115,1,0,0,0,1007,1012,3,118,59,0,1008,1009,
        5,1,0,0,1009,1011,3,118,59,0,1010,1008,1,0,0,0,1011,1014,1,0,0,0,
        1012,1010,1,0,0,0,1012,1013,1,0,0,0,1013,117,1,0,0,0,1014,1012,1,
        0,0,0,1015,1016,3,120,60,0,1016,1017,5,2,0,0,1017,1018,3,122,61,
        0,1018,119,1,0,0,0,1019,1020,3,148,74,0,1020,121,1,0,0,0,1021,1031,
        3,148,74,0,1022,1023,5,5,0,0,1023,1024,3,122,61,0,1024,1025,5,6,
        0,0,1025,1031,1,0,0,0,1026,1027,5,8,0,0,1027,1028,3,116,58,0,1028,
        1029,5,9,0,0,1029,1031,1,0,0,0,1030,1021,1,0,0,0,1030,1022,1,0,0,
        0,1030,1026,1,0,0,0,1031,123,1,0,0,0,1032,1033,3,120,60,0,1033,1034,
        5,2,0,0,1034,1035,3,120,60,0,1035,125,1,0,0,0,1036,1037,3,138,69,
        0,1037,127,1,0,0,0,1038,1039,5,8,0,0,1039,1041,3,130,65,0,1040,1042,
        5,1,0,0,1041,1040,1,0,0,0,1041,1042,1,0,0,0,1042,1043,1,0,0,0,1043,
        1044,5,9,0,0,1044,1057,1,0,0,0,1045,1046,5,8,0,0,1046,1057,5,9,0,
        0,1047,1048,5,3,0,0,1048,1050,3,130,65,0,1049,1051,5,1,0,0,1050,
        1049,1,0,0,0,1050,1051,1,0,0,0,1051,1052,1,0,0,0,1052,1053,5,4,0,
        0,1053,1057,1,0,0,0,1054,1055,5,3,0,0,1055,1057,5,4,0,0,1056,1038,
        1,0,0,0,1056,1045,1,0,0,0,1056,1047,1,0,0,0,1056,1054,1,0,0,0,1057,
        129,1,0,0,0,1058,1063,3,132,66,0,1059,1060,5,1,0,0,1060,1062,3,132,
        66,0,1061,1059,1,0,0,0,1062,1065,1,0,0,0,1063,1061,1,0,0,0,1063,
        1064,1,0,0,0,1064,131,1,0,0,0,1065,1063,1,0,0,0,1066,1067,3,134,
        67,0,1067,1068,7,6,0,0,1068,1069,3,138,69,0,1069,133,1,0,0,0,1070,
        1073,3,148,74,0,1071,1073,3,142,71,0,1072,1070,1,0,0,0,1072,1071,
        1,0,0,0,1073,135,1,0,0,0,1074,1075,5,5,0,0,1075,1080,3,138,69,0,
        1076,1077,5,1,0,0,1077,1079,3,138,69,0,1078,1076,1,0,0,0,1079,1082,
        1,0,0,0,1080,1078,1,0,0,0,1080,1081,1,0,0,0,1081,1084,1,0,0,0,1082,
        1080,1,0,0,0,1083,1085,5,1,0,0,1084,1083,1,0,0,0,1084,1085,1,0,0,
        0,1085,1086,1,0,0,0,1086,1087,5,6,0,0,1087,1091,1,0,0,0,1088,1089,
        5,5,0,0,1089,1091,5,6,0,0,1090,1074,1,0,0,0,1090,1088,1,0,0,0,1091,
        137,1,0,0,0,1092,1099,3,142,71,0,1093,1099,3,140,70,0,1094,1099,
        3,128,64,0,1095,1099,3,136,68,0,1096,1099,3,144,72,0,1097,1099,3,
        146,73,0,1098,1092,1,0,0,0,1098,1093,1,0,0,0,1098,1094,1,0,0,0,1098,
        1095,1,0,0,0,1098,1096,1,0,0,0,1098,1097,1,0,0,0,1099,139,1,0,0,
        0,1100,1101,3,418,209,0,1101,141,1,0,0,0,1102,1103,5,325,0,0,1103,
        143,1,0,0,0,1104,1105,7,12,0,0,1105,145,1,0,0,0,1106,1107,7,13,0,
        0,1107,147,1,0,0,0,1108,1109,3,412,206,0,1109,149,1,0,0,0,1110,1114,
        3,164,82,0,1111,1113,5,13,0,0,1112,1111,1,0,0,0,1113,1116,1,0,0,
        0,1114,1112,1,0,0,0,1114,1115,1,0,0,0,1115,1117,1,0,0,0,1116,1114,
        1,0,0,0,1117,1118,5,0,0,1,1118,151,1,0,0,0,1119,1120,3,328,164,0,
        1120,1121,5,0,0,1,1121,153,1,0,0,0,1122,1123,3,324,162,0,1123,1124,
        5,0,0,1,1124,155,1,0,0,0,1125,1126,3,322,161,0,1126,1127,5,0,0,1,
        1127,157,1,0,0,0,1128,1129,3,326,163,0,1129,1130,5,0,0,1,1130,159,
        1,0,0,0,1131,1132,3,376,188,0,1132,1133,5,0,0,1,1133,161,1,0,0,0,
        1134,1135,3,382,191,0,1135,1136,5,0,0,1,1136,163,1,0,0,0,1137,1843,
        3,180,90,0,1138,1140,3,196,98,0,1139,1138,1,0,0,0,1139,1140,1,0,
        0,0,1140,1141,1,0,0,0,1141,1843,3,224,112,0,1142,1144,5,294,0,0,
        1143,1145,5,190,0,0,1144,1143,1,0,0,0,1144,1145,1,0,0,0,1145,1146,
        1,0,0,0,1146,1843,3,322,161,0,1147,1148,5,94,0,0,1148,1152,3,190,
        95,0,1149,1150,5,151,0,0,1150,1151,5,194,0,0,1151,1153,5,124,0,0,
        1152,1149,1,0,0,0,1152,1153,1,0,0,0,1153,1154,1,0,0,0,1154,1162,
        3,322,161,0,1155,1161,3,178,89,0,1156,1161,3,176,88,0,1157,1158,
        5,303,0,0,1158,1159,7,14,0,0,1159,1161,3,204,102,0,1160,1155,1,0,
        0,0,1160,1156,1,0,0,0,1160,1157,1,0,0,0,1161,1164,1,0,0,0,1162,1160,
        1,0,0,0,1162,1163,1,0,0,0,1163,1843,1,0,0,0,1164,1162,1,0,0,0,1165,
        1166,5,56,0,0,1166,1167,3,190,95,0,1167,1168,3,322,161,0,1168,1169,
        5,253,0,0,1169,1170,7,14,0,0,1170,1171,3,204,102,0,1171,1843,1,0,
        0,0,1172,1173,5,56,0,0,1173,1174,3,190,95,0,1174,1175,3,322,161,
        0,1175,1176,5,253,0,0,1176,1177,3,176,88,0,1177,1843,1,0,0,0,1178,
        1179,5,117,0,0,1179,1182,3,190,95,0,1180,1181,5,151,0,0,1181,1183,
        5,124,0,0,1182,1180,1,0,0,0,1182,1183,1,0,0,0,1183,1184,1,0,0,0,
        1184,1186,3,322,161,0,1185,1187,7,15,0,0,1186,1185,1,0,0,0,1186,
        1187,1,0,0,0,1187,1843,1,0,0,0,1188,1189,5,256,0,0,1189,1192,7,16,
        0,0,1190,1191,7,17,0,0,1191,1193,3,322,161,0,1192,1190,1,0,0,0,1192,
        1193,1,0,0,0,1193,1198,1,0,0,0,1194,1196,5,173,0,0,1195,1194,1,0,
        0,0,1195,1196,1,0,0,0,1196,1197,1,0,0,0,1197,1199,5,325,0,0,1198,
        1195,1,0,0,0,1198,1199,1,0,0,0,1199,1843,1,0,0,0,1200,1205,3,168,
        84,0,1201,1202,5,3,0,0,1202,1203,3,382,191,0,1203,1204,5,4,0,0,1204,
        1206,1,0,0,0,1205,1201,1,0,0,0,1205,1206,1,0,0,0,1206,1207,1,0,0,
        0,1207,1208,3,200,100,0,1208,1213,3,202,101,0,1209,1211,5,63,0,0,
        1210,1209,1,0,0,0,1210,1211,1,0,0,0,1211,1212,1,0,0,0,1212,1214,
        3,180,90,0,1213,1210,1,0,0,0,1213,1214,1,0,0,0,1214,1843,1,0,0,0,
        1215,1220,3,168,84,0,1216,1217,5,3,0,0,1217,1218,3,382,191,0,1218,
        1219,5,4,0,0,1219,1221,1,0,0,0,1220,1216,1,0,0,0,1220,1221,1,0,0,
        0,1221,1243,1,0,0,0,1222,1242,3,178,89,0,1223,1224,5,212,0,0,1224,
        1225,5,71,0,0,1225,1226,5,3,0,0,1226,1227,3,382,191,0,1227,1228,
        5,4,0,0,1228,1233,1,0,0,0,1229,1230,5,212,0,0,1230,1231,5,71,0,0,
        1231,1233,3,298,149,0,1232,1223,1,0,0,0,1232,1229,1,0,0,0,1233,1242,
        1,0,0,0,1234,1242,3,172,86,0,1235,1242,3,174,87,0,1236,1242,3,318,
        159,0,1237,1242,3,216,108,0,1238,1242,3,176,88,0,1239,1240,5,271,
        0,0,1240,1242,3,204,102,0,1241,1222,1,0,0,0,1241,1232,1,0,0,0,1241,
        1234,1,0,0,0,1241,1235,1,0,0,0,1241,1236,1,0,0,0,1241,1237,1,0,0,
        0,1241,1238,1,0,0,0,1241,1239,1,0,0,0,1242,1245,1,0,0,0,1243,1241,
        1,0,0,0,1243,1244,1,0,0,0,1244,1250,1,0,0,0,1245,1243,1,0,0,0,1246,
        1248,5,63,0,0,1247,1246,1,0,0,0,1247,1248,1,0,0,0,1248,1249,1,0,
        0,0,1249,1251,3,180,90,0,1250,1247,1,0,0,0,1250,1251,1,0,0,0,1251,
        1843,1,0,0,0,1252,1253,5,94,0,0,1253,1257,5,268,0,0,1254,1255,5,
        151,0,0,1255,1256,5,194,0,0,1256,1258,5,124,0,0,1257,1254,1,0,0,
        0,1257,1258,1,0,0,0,1258,1259,1,0,0,0,1259,1260,3,324,162,0,1260,
        1261,5,173,0,0,1261,1270,3,324,162,0,1262,1269,3,200,100,0,1263,
        1269,3,318,159,0,1264,1269,3,216,108,0,1265,1269,3,176,88,0,1266,
        1267,5,271,0,0,1267,1269,3,204,102,0,1268,1262,1,0,0,0,1268,1263,
        1,0,0,0,1268,1264,1,0,0,0,1268,1265,1,0,0,0,1268,1266,1,0,0,0,1269,
        1272,1,0,0,0,1270,1268,1,0,0,0,1270,1271,1,0,0,0,1271,1843,1,0,0,
        0,1272,1270,1,0,0,0,1273,1278,3,170,85,0,1274,1275,5,3,0,0,1275,
        1276,3,382,191,0,1276,1277,5,4,0,0,1277,1279,1,0,0,0,1278,1274,1,
        0,0,0,1278,1279,1,0,0,0,1279,1280,1,0,0,0,1280,1281,3,200,100,0,
        1281,1286,3,202,101,0,1282,1284,5,63,0,0,1283,1282,1,0,0,0,1283,
        1284,1,0,0,0,1284,1285,1,0,0,0,1285,1287,3,180,90,0,1286,1283,1,
        0,0,0,1286,1287,1,0,0,0,1287,1843,1,0,0,0,1288,1289,5,57,0,0,1289,
        1290,5,268,0,0,1290,1292,3,322,161,0,1291,1293,3,186,93,0,1292,1291,
        1,0,0,0,1292,1293,1,0,0,0,1293,1294,1,0,0,0,1294,1295,5,90,0,0,1295,
        1303,5,262,0,0,1296,1304,3,412,206,0,1297,1298,5,137,0,0,1298,1299,
        5,85,0,0,1299,1304,3,300,150,0,1300,1301,5,137,0,0,1301,1302,5,55,
        0,0,1302,1304,5,85,0,0,1303,1296,1,0,0,0,1303,1297,1,0,0,0,1303,
        1300,1,0,0,0,1303,1304,1,0,0,0,1304,1843,1,0,0,0,1305,1306,5,56,
        0,0,1306,1307,5,268,0,0,1307,1308,3,322,161,0,1308,1309,5,53,0,0,
        1309,1310,7,18,0,0,1310,1311,3,378,189,0,1311,1843,1,0,0,0,1312,
        1313,5,56,0,0,1313,1314,5,268,0,0,1314,1315,3,322,161,0,1315,1316,
        5,53,0,0,1316,1317,7,18,0,0,1317,1318,5,3,0,0,1318,1319,3,378,189,
        0,1319,1320,5,4,0,0,1320,1843,1,0,0,0,1321,1322,5,56,0,0,1322,1323,
        5,268,0,0,1323,1324,3,322,161,0,1324,1325,5,231,0,0,1325,1326,5,
        84,0,0,1326,1327,3,322,161,0,1327,1328,5,275,0,0,1328,1329,3,408,
        204,0,1329,1843,1,0,0,0,1330,1331,5,56,0,0,1331,1332,5,268,0,0,1332,
        1333,3,322,161,0,1333,1334,5,117,0,0,1334,1335,7,18,0,0,1335,1336,
        5,3,0,0,1336,1337,3,320,160,0,1337,1338,5,4,0,0,1338,1843,1,0,0,
        0,1339,1340,5,56,0,0,1340,1341,5,268,0,0,1341,1342,3,322,161,0,1342,
        1343,5,117,0,0,1343,1344,7,18,0,0,1344,1345,3,320,160,0,1345,1843,
        1,0,0,0,1346,1347,5,56,0,0,1347,1348,7,19,0,0,1348,1349,3,322,161,
        0,1349,1350,5,231,0,0,1350,1351,5,275,0,0,1351,1352,3,322,161,0,
        1352,1843,1,0,0,0,1353,1354,5,56,0,0,1354,1355,7,19,0,0,1355,1356,
        3,322,161,0,1356,1357,5,253,0,0,1357,1358,5,271,0,0,1358,1359,3,
        204,102,0,1359,1843,1,0,0,0,1360,1361,5,56,0,0,1361,1362,7,19,0,
        0,1362,1363,3,322,161,0,1363,1364,5,292,0,0,1364,1367,5,271,0,0,
        1365,1366,5,151,0,0,1366,1368,5,124,0,0,1367,1365,1,0,0,0,1367,1368,
        1,0,0,0,1368,1369,1,0,0,0,1369,1370,3,204,102,0,1370,1843,1,0,0,
        0,1371,1372,5,56,0,0,1372,1373,5,268,0,0,1373,1374,3,322,161,0,1374,
        1376,7,20,0,0,1375,1377,5,84,0,0,1376,1375,1,0,0,0,1376,1377,1,0,
        0,0,1377,1378,1,0,0,0,1378,1380,3,322,161,0,1379,1381,3,420,210,
        0,1380,1379,1,0,0,0,1380,1381,1,0,0,0,1381,1843,1,0,0,0,1382,1383,
        5,56,0,0,1383,1384,5,268,0,0,1384,1386,3,322,161,0,1385,1387,3,186,
        93,0,1386,1385,1,0,0,0,1386,1387,1,0,0,0,1387,1388,1,0,0,0,1388,
        1390,5,76,0,0,1389,1391,5,84,0,0,1390,1389,1,0,0,0,1390,1391,1,0,
        0,0,1391,1392,1,0,0,0,1392,1393,3,322,161,0,1393,1395,3,384,192,
        0,1394,1396,3,374,187,0,1395,1394,1,0,0,0,1395,1396,1,0,0,0,1396,
        1843,1,0,0,0,1397,1398,5,56,0,0,1398,1399,5,268,0,0,1399,1401,3,
        322,161,0,1400,1402,3,186,93,0,1401,1400,1,0,0,0,1401,1402,1,0,0,
        0,1402,1403,1,0,0,0,1403,1404,5,233,0,0,1404,1405,5,85,0,0,1405,
        1406,5,3,0,0,1406,1407,3,378,189,0,1407,1408,5,4,0,0,1408,1843,1,
        0,0,0,1409,1410,5,56,0,0,1410,1411,5,268,0,0,1411,1413,3,322,161,
        0,1412,1414,3,186,93,0,1413,1412,1,0,0,0,1413,1414,1,0,0,0,1414,
        1415,1,0,0,0,1415,1416,5,253,0,0,1416,1417,5,250,0,0,1417,1421,5,
        325,0,0,1418,1419,5,303,0,0,1419,1420,5,251,0,0,1420,1422,3,204,
        102,0,1421,1418,1,0,0,0,1421,1422,1,0,0,0,1422,1843,1,0,0,0,1423,
        1424,5,56,0,0,1424,1425,5,268,0,0,1425,1427,3,322,161,0,1426,1428,
        3,186,93,0,1427,1426,1,0,0,0,1427,1428,1,0,0,0,1428,1429,1,0,0,0,
        1429,1430,5,253,0,0,1430,1431,5,251,0,0,1431,1432,3,204,102,0,1432,
        1843,1,0,0,0,1433,1434,5,56,0,0,1434,1435,7,19,0,0,1435,1436,3,322,
        161,0,1436,1440,5,53,0,0,1437,1438,5,151,0,0,1438,1439,5,194,0,0,
        1439,1441,5,124,0,0,1440,1437,1,0,0,0,1440,1441,1,0,0,0,1441,1443,
        1,0,0,0,1442,1444,3,184,92,0,1443,1442,1,0,0,0,1444,1445,1,0,0,0,
        1445,1443,1,0,0,0,1445,1446,1,0,0,0,1446,1843,1,0,0,0,1447,1448,
        5,56,0,0,1448,1449,5,268,0,0,1449,1450,3,322,161,0,1450,1451,3,186,
        93,0,1451,1452,5,231,0,0,1452,1453,5,275,0,0,1453,1454,3,186,93,
        0,1454,1843,1,0,0,0,1455,1456,5,56,0,0,1456,1457,7,19,0,0,1457,1458,
        3,322,161,0,1458,1461,5,117,0,0,1459,1460,5,151,0,0,1460,1462,5,
        124,0,0,1461,1459,1,0,0,0,1461,1462,1,0,0,0,1462,1463,1,0,0,0,1463,
        1468,3,186,93,0,1464,1465,5,1,0,0,1465,1467,3,186,93,0,1466,1464,
        1,0,0,0,1467,1470,1,0,0,0,1468,1466,1,0,0,0,1468,1469,1,0,0,0,1469,
        1472,1,0,0,0,1470,1468,1,0,0,0,1471,1473,5,222,0,0,1472,1471,1,0,
        0,0,1472,1473,1,0,0,0,1473,1843,1,0,0,0,1474,1475,5,56,0,0,1475,
        1476,5,268,0,0,1476,1478,3,322,161,0,1477,1479,3,186,93,0,1478,1477,
        1,0,0,0,1478,1479,1,0,0,0,1479,1480,1,0,0,0,1480,1481,5,253,0,0,
        1481,1482,3,176,88,0,1482,1843,1,0,0,0,1483,1484,5,56,0,0,1484,1485,
        5,268,0,0,1485,1486,3,322,161,0,1486,1487,5,227,0,0,1487,1488,5,
        213,0,0,1488,1843,1,0,0,0,1489,1490,5,117,0,0,1490,1493,5,268,0,
        0,1491,1492,5,151,0,0,1492,1494,5,124,0,0,1493,1491,1,0,0,0,1493,
        1494,1,0,0,0,1494,1495,1,0,0,0,1495,1497,3,322,161,0,1496,1498,5,
        222,0,0,1497,1496,1,0,0,0,1497,1498,1,0,0,0,1498,1843,1,0,0,0,1499,
        1500,5,117,0,0,1500,1503,5,298,0,0,1501,1502,5,151,0,0,1502,1504,
        5,124,0,0,1503,1501,1,0,0,0,1503,1504,1,0,0,0,1504,1505,1,0,0,0,
        1505,1843,3,322,161,0,1506,1509,5,94,0,0,1507,1508,5,202,0,0,1508,
        1510,5,233,0,0,1509,1507,1,0,0,0,1509,1510,1,0,0,0,1510,1515,1,0,
        0,0,1511,1513,5,145,0,0,1512,1511,1,0,0,0,1512,1513,1,0,0,0,1513,
        1514,1,0,0,0,1514,1516,5,272,0,0,1515,1512,1,0,0,0,1515,1516,1,0,
        0,0,1516,1517,1,0,0,0,1517,1521,5,298,0,0,1518,1519,5,151,0,0,1519,
        1520,5,194,0,0,1520,1522,5,124,0,0,1521,1518,1,0,0,0,1521,1522,1,
        0,0,0,1522,1523,1,0,0,0,1523,1525,3,322,161,0,1524,1526,3,306,153,
        0,1525,1524,1,0,0,0,1525,1526,1,0,0,0,1526,1535,1,0,0,0,1527,1534,
        3,178,89,0,1528,1529,5,212,0,0,1529,1530,5,198,0,0,1530,1534,3,298,
        149,0,1531,1532,5,271,0,0,1532,1534,3,204,102,0,1533,1527,1,0,0,
        0,1533,1528,1,0,0,0,1533,1531,1,0,0,0,1534,1537,1,0,0,0,1535,1533,
        1,0,0,0,1535,1536,1,0,0,0,1536,1538,1,0,0,0,1537,1535,1,0,0,0,1538,
        1539,5,63,0,0,1539,1540,3,180,90,0,1540,1843,1,0,0,0,1541,1544,5,
        94,0,0,1542,1543,5,202,0,0,1543,1545,5,233,0,0,1544,1542,1,0,0,0,
        1544,1545,1,0,0,0,1545,1547,1,0,0,0,1546,1548,5,145,0,0,1547,1546,
        1,0,0,0,1547,1548,1,0,0,0,1548,1549,1,0,0,0,1549,1550,5,272,0,0,
        1550,1551,5,298,0,0,1551,1556,3,324,162,0,1552,1553,5,3,0,0,1553,
        1554,3,382,191,0,1554,1555,5,4,0,0,1555,1557,1,0,0,0,1556,1552,1,
        0,0,0,1556,1557,1,0,0,0,1557,1558,1,0,0,0,1558,1561,3,200,100,0,
        1559,1560,5,201,0,0,1560,1562,3,204,102,0,1561,1559,1,0,0,0,1561,
        1562,1,0,0,0,1562,1843,1,0,0,0,1563,1564,5,56,0,0,1564,1565,5,298,
        0,0,1565,1567,3,322,161,0,1566,1568,5,63,0,0,1567,1566,1,0,0,0,1567,
        1568,1,0,0,0,1568,1569,1,0,0,0,1569,1570,3,180,90,0,1570,1843,1,
        0,0,0,1571,1574,5,94,0,0,1572,1573,5,202,0,0,1573,1575,5,233,0,0,
        1574,1572,1,0,0,0,1574,1575,1,0,0,0,1575,1577,1,0,0,0,1576,1578,
        5,272,0,0,1577,1576,1,0,0,0,1577,1578,1,0,0,0,1578,1579,1,0,0,0,
        1579,1583,5,143,0,0,1580,1581,5,151,0,0,1581,1582,5,194,0,0,1582,
        1584,5,124,0,0,1583,1580,1,0,0,0,1583,1584,1,0,0,0,1584,1585,1,0,
        0,0,1585,1586,3,322,161,0,1586,1587,5,63,0,0,1587,1597,5,325,0,0,
        1588,1589,5,296,0,0,1589,1594,3,222,111,0,1590,1591,5,1,0,0,1591,
        1593,3,222,111,0,1592,1590,1,0,0,0,1593,1596,1,0,0,0,1594,1592,1,
        0,0,0,1594,1595,1,0,0,0,1595,1598,1,0,0,0,1596,1594,1,0,0,0,1597,
        1588,1,0,0,0,1597,1598,1,0,0,0,1598,1843,1,0,0,0,1599,1601,5,117,
        0,0,1600,1602,5,272,0,0,1601,1600,1,0,0,0,1601,1602,1,0,0,0,1602,
        1603,1,0,0,0,1603,1606,5,143,0,0,1604,1605,5,151,0,0,1605,1607,5,
        124,0,0,1606,1604,1,0,0,0,1606,1607,1,0,0,0,1607,1608,1,0,0,0,1608,
        1843,3,322,161,0,1609,1611,5,125,0,0,1610,1612,7,21,0,0,1611,1610,
        1,0,0,0,1611,1612,1,0,0,0,1612,1613,1,0,0,0,1613,1843,3,164,82,0,
        1614,1615,5,256,0,0,1615,1618,5,269,0,0,1616,1617,7,17,0,0,1617,
        1619,3,322,161,0,1618,1616,1,0,0,0,1618,1619,1,0,0,0,1619,1624,1,
        0,0,0,1620,1622,5,173,0,0,1621,1620,1,0,0,0,1621,1622,1,0,0,0,1622,
        1623,1,0,0,0,1623,1625,5,325,0,0,1624,1621,1,0,0,0,1624,1625,1,0,
        0,0,1625,1843,1,0,0,0,1626,1627,5,256,0,0,1627,1628,5,268,0,0,1628,
        1631,5,127,0,0,1629,1630,7,17,0,0,1630,1632,3,322,161,0,1631,1629,
        1,0,0,0,1631,1632,1,0,0,0,1632,1633,1,0,0,0,1633,1634,5,173,0,0,
        1634,1636,5,325,0,0,1635,1637,3,186,93,0,1636,1635,1,0,0,0,1636,
        1637,1,0,0,0,1637,1843,1,0,0,0,1638,1639,5,256,0,0,1639,1640,5,271,
        0,0,1640,1645,3,322,161,0,1641,1642,5,3,0,0,1642,1643,3,208,104,
        0,1643,1644,5,4,0,0,1644,1646,1,0,0,0,1645,1641,1,0,0,0,1645,1646,
        1,0,0,0,1646,1843,1,0,0,0,1647,1648,5,256,0,0,1648,1649,5,85,0,0,
        1649,1650,7,17,0,0,1650,1653,3,322,161,0,1651,1652,7,17,0,0,1652,
        1654,3,322,161,0,1653,1651,1,0,0,0,1653,1654,1,0,0,0,1654,1843,1,
        0,0,0,1655,1656,5,256,0,0,1656,1659,5,299,0,0,1657,1658,7,17,0,0,
        1658,1660,3,322,161,0,1659,1657,1,0,0,0,1659,1660,1,0,0,0,1660,1665,
        1,0,0,0,1661,1663,5,173,0,0,1662,1661,1,0,0,0,1662,1663,1,0,0,0,
        1663,1664,1,0,0,0,1664,1666,5,325,0,0,1665,1662,1,0,0,0,1665,1666,
        1,0,0,0,1666,1843,1,0,0,0,1667,1668,5,256,0,0,1668,1669,5,213,0,
        0,1669,1671,3,322,161,0,1670,1672,3,186,93,0,1671,1670,1,0,0,0,1671,
        1672,1,0,0,0,1672,1843,1,0,0,0,1673,1675,5,256,0,0,1674,1676,3,412,
        206,0,1675,1674,1,0,0,0,1675,1676,1,0,0,0,1676,1677,1,0,0,0,1677,
        1685,5,144,0,0,1678,1680,5,173,0,0,1679,1678,1,0,0,0,1679,1680,1,
        0,0,0,1680,1683,1,0,0,0,1681,1684,3,322,161,0,1682,1684,5,325,0,
        0,1683,1681,1,0,0,0,1683,1682,1,0,0,0,1684,1686,1,0,0,0,1685,1679,
        1,0,0,0,1685,1686,1,0,0,0,1686,1843,1,0,0,0,1687,1688,5,256,0,0,
        1688,1689,5,94,0,0,1689,1690,5,268,0,0,1690,1693,3,322,161,0,1691,
        1692,5,63,0,0,1692,1694,5,250,0,0,1693,1691,1,0,0,0,1693,1694,1,
        0,0,0,1694,1843,1,0,0,0,1695,1696,5,256,0,0,1696,1697,5,97,0,0,1697,
        1843,5,190,0,0,1698,1699,7,22,0,0,1699,1701,5,143,0,0,1700,1702,
        5,127,0,0,1701,1700,1,0,0,0,1701,1702,1,0,0,0,1702,1703,1,0,0,0,
        1703,1843,3,192,96,0,1704,1705,7,22,0,0,1705,1707,3,190,95,0,1706,
        1708,5,127,0,0,1707,1706,1,0,0,0,1707,1708,1,0,0,0,1708,1709,1,0,
        0,0,1709,1710,3,322,161,0,1710,1843,1,0,0,0,1711,1713,7,22,0,0,1712,
        1714,5,268,0,0,1713,1712,1,0,0,0,1713,1714,1,0,0,0,1714,1716,1,0,
        0,0,1715,1717,7,23,0,0,1716,1715,1,0,0,0,1716,1717,1,0,0,0,1717,
        1718,1,0,0,0,1718,1720,3,322,161,0,1719,1721,3,186,93,0,1720,1719,
        1,0,0,0,1720,1721,1,0,0,0,1721,1723,1,0,0,0,1722,1724,3,194,97,0,
        1723,1722,1,0,0,0,1723,1724,1,0,0,0,1724,1843,1,0,0,0,1725,1727,
        7,22,0,0,1726,1728,5,223,0,0,1727,1726,1,0,0,0,1727,1728,1,0,0,0,
        1728,1729,1,0,0,0,1729,1843,3,180,90,0,1730,1731,5,86,0,0,1731,1732,
        5,198,0,0,1732,1733,3,190,95,0,1733,1734,3,322,161,0,1734,1735,5,
        164,0,0,1735,1736,7,24,0,0,1736,1843,1,0,0,0,1737,1738,5,86,0,0,
        1738,1739,5,198,0,0,1739,1740,5,268,0,0,1740,1741,3,322,161,0,1741,
        1742,5,164,0,0,1742,1743,7,24,0,0,1743,1843,1,0,0,0,1744,1745,5,
        230,0,0,1745,1746,5,268,0,0,1746,1843,3,322,161,0,1747,1755,5,230,
        0,0,1748,1756,5,325,0,0,1749,1751,9,0,0,0,1750,1749,1,0,0,0,1751,
        1754,1,0,0,0,1752,1753,1,0,0,0,1752,1750,1,0,0,0,1753,1756,1,0,0,
        0,1754,1752,1,0,0,0,1755,1748,1,0,0,0,1755,1752,1,0,0,0,1756,1843,
        1,0,0,0,1757,1759,5,72,0,0,1758,1760,5,170,0,0,1759,1758,1,0,0,0,
        1759,1760,1,0,0,0,1760,1761,1,0,0,0,1761,1762,5,268,0,0,1762,1765,
        3,322,161,0,1763,1764,5,201,0,0,1764,1766,3,204,102,0,1765,1763,
        1,0,0,0,1765,1766,1,0,0,0,1766,1771,1,0,0,0,1767,1769,5,63,0,0,1768,
        1767,1,0,0,0,1768,1769,1,0,0,0,1769,1770,1,0,0,0,1770,1772,3,180,
        90,0,1771,1768,1,0,0,0,1771,1772,1,0,0,0,1772,1843,1,0,0,0,1773,
        1774,5,287,0,0,1774,1777,5,268,0,0,1775,1776,5,151,0,0,1776,1778,
        5,124,0,0,1777,1775,1,0,0,0,1777,1778,1,0,0,0,1778,1779,1,0,0,0,
        1779,1843,3,322,161,0,1780,1781,5,78,0,0,1781,1843,5,72,0,0,1782,
        1783,5,177,0,0,1783,1785,5,102,0,0,1784,1786,5,178,0,0,1785,1784,
        1,0,0,0,1785,1786,1,0,0,0,1786,1787,1,0,0,0,1787,1788,5,158,0,0,
        1788,1790,5,325,0,0,1789,1791,5,210,0,0,1790,1789,1,0,0,0,1790,1791,
        1,0,0,0,1791,1792,1,0,0,0,1792,1793,5,163,0,0,1793,1794,5,268,0,
        0,1794,1796,3,322,161,0,1795,1797,3,186,93,0,1796,1795,1,0,0,0,1796,
        1797,1,0,0,0,1797,1843,1,0,0,0,1798,1799,5,283,0,0,1799,1800,5,268,
        0,0,1800,1802,3,322,161,0,1801,1803,3,186,93,0,1802,1801,1,0,0,0,
        1802,1803,1,0,0,0,1803,1843,1,0,0,0,1804,1805,5,189,0,0,1805,1806,
        5,232,0,0,1806,1807,5,268,0,0,1807,1843,3,322,161,0,1808,1809,7,
        25,0,0,1809,1817,3,412,206,0,1810,1818,5,325,0,0,1811,1813,9,0,0,
        0,1812,1811,1,0,0,0,1813,1816,1,0,0,0,1814,1815,1,0,0,0,1814,1812,
        1,0,0,0,1815,1818,1,0,0,0,1816,1814,1,0,0,0,1817,1810,1,0,0,0,1817,
        1814,1,0,0,0,1818,1843,1,0,0,0,1819,1820,5,253,0,0,1820,1824,5,239,
        0,0,1821,1823,9,0,0,0,1822,1821,1,0,0,0,1823,1826,1,0,0,0,1824,1825,
        1,0,0,0,1824,1822,1,0,0,0,1825,1843,1,0,0,0,1826,1824,1,0,0,0,1827,
        1831,5,253,0,0,1828,1830,9,0,0,0,1829,1828,1,0,0,0,1830,1833,1,0,
        0,0,1831,1832,1,0,0,0,1831,1829,1,0,0,0,1832,1843,1,0,0,0,1833,1831,
        1,0,0,0,1834,1843,5,234,0,0,1835,1839,3,166,83,0,1836,1838,9,0,0,
        0,1837,1836,1,0,0,0,1838,1841,1,0,0,0,1839,1840,1,0,0,0,1839,1837,
        1,0,0,0,1840,1843,1,0,0,0,1841,1839,1,0,0,0,1842,1137,1,0,0,0,1842,
        1139,1,0,0,0,1842,1142,1,0,0,0,1842,1147,1,0,0,0,1842,1165,1,0,0,
        0,1842,1172,1,0,0,0,1842,1178,1,0,0,0,1842,1188,1,0,0,0,1842,1200,
        1,0,0,0,1842,1215,1,0,0,0,1842,1252,1,0,0,0,1842,1273,1,0,0,0,1842,
        1288,1,0,0,0,1842,1305,1,0,0,0,1842,1312,1,0,0,0,1842,1321,1,0,0,
        0,1842,1330,1,0,0,0,1842,1339,1,0,0,0,1842,1346,1,0,0,0,1842,1353,
        1,0,0,0,1842,1360,1,0,0,0,1842,1371,1,0,0,0,1842,1382,1,0,0,0,1842,
        1397,1,0,0,0,1842,1409,1,0,0,0,1842,1423,1,0,0,0,1842,1433,1,0,0,
        0,1842,1447,1,0,0,0,1842,1455,1,0,0,0,1842,1474,1,0,0,0,1842,1483,
        1,0,0,0,1842,1489,1,0,0,0,1842,1499,1,0,0,0,1842,1506,1,0,0,0,1842,
        1541,1,0,0,0,1842,1563,1,0,0,0,1842,1571,1,0,0,0,1842,1599,1,0,0,
        0,1842,1609,1,0,0,0,1842,1614,1,0,0,0,1842,1626,1,0,0,0,1842,1638,
        1,0,0,0,1842,1647,1,0,0,0,1842,1655,1,0,0,0,1842,1667,1,0,0,0,1842,
        1673,1,0,0,0,1842,1687,1,0,0,0,1842,1695,1,0,0,0,1842,1698,1,0,0,
        0,1842,1704,1,0,0,0,1842,1711,1,0,0,0,1842,1725,1,0,0,0,1842,1730,
        1,0,0,0,1842,1737,1,0,0,0,1842,1744,1,0,0,0,1842,1747,1,0,0,0,1842,
        1757,1,0,0,0,1842,1773,1,0,0,0,1842,1780,1,0,0,0,1842,1782,1,0,0,
        0,1842,1798,1,0,0,0,1842,1804,1,0,0,0,1842,1808,1,0,0,0,1842,1819,
        1,0,0,0,1842,1827,1,0,0,0,1842,1834,1,0,0,0,1842,1835,1,0,0,0,1843,
        165,1,0,0,0,1844,1845,5,94,0,0,1845,2013,5,239,0,0,1846,1847,5,117,
        0,0,1847,2013,5,239,0,0,1848,1850,5,146,0,0,1849,1851,5,239,0,0,
        1850,1849,1,0,0,0,1850,1851,1,0,0,0,1851,2013,1,0,0,0,1852,1854,
        5,236,0,0,1853,1855,5,239,0,0,1854,1853,1,0,0,0,1854,1855,1,0,0,
        0,1855,2013,1,0,0,0,1856,1857,5,256,0,0,1857,2013,5,146,0,0,1858,
        1859,5,256,0,0,1859,1861,5,239,0,0,1860,1862,5,146,0,0,1861,1860,
        1,0,0,0,1861,1862,1,0,0,0,1862,2013,1,0,0,0,1863,1864,5,256,0,0,
        1864,2013,5,220,0,0,1865,1866,5,256,0,0,1866,2013,5,240,0,0,1867,
        1868,5,256,0,0,1868,1869,5,97,0,0,1869,2013,5,240,0,0,1870,1871,
        5,126,0,0,1871,2013,5,268,0,0,1872,1873,5,153,0,0,1873,2013,5,268,
        0,0,1874,1875,5,256,0,0,1875,2013,5,89,0,0,1876,1877,5,256,0,0,1877,
        1878,5,94,0,0,1878,2013,5,268,0,0,1879,1880,5,256,0,0,1880,2013,
        5,279,0,0,1881,1882,5,256,0,0,1882,2013,5,156,0,0,1883,1884,5,256,
        0,0,1884,2013,5,181,0,0,1885,1886,5,94,0,0,1886,2013,5,155,0,0,1887,
        1888,5,117,0,0,1888,2013,5,155,0,0,1889,1890,5,56,0,0,1890,2013,
        5,155,0,0,1891,1892,5,180,0,0,1892,2013,5,268,0,0,1893,1894,5,180,
        0,0,1894,2013,5,103,0,0,1895,1896,5,291,0,0,1896,2013,5,268,0,0,
        1897,1898,5,291,0,0,1898,2013,5,103,0,0,1899,1900,5,94,0,0,1900,
        1901,5,272,0,0,1901,2013,5,183,0,0,1902,1903,5,117,0,0,1903,1904,
        5,272,0,0,1904,2013,5,183,0,0,1905,1906,5,56,0,0,1906,1907,5,268,
        0,0,1907,1908,3,324,162,0,1908,1909,5,194,0,0,1909,1910,5,80,0,0,
        1910,2013,1,0,0,0,1911,1912,5,56,0,0,1912,1913,5,268,0,0,1913,1914,
        3,324,162,0,1914,1915,5,80,0,0,1915,1916,5,71,0,0,1916,2013,1,0,
        0,0,1917,1918,5,56,0,0,1918,1919,5,268,0,0,1919,1920,3,324,162,0,
        1920,1921,5,194,0,0,1921,1922,5,260,0,0,1922,2013,1,0,0,0,1923,1924,
        5,56,0,0,1924,1925,5,268,0,0,1925,1926,3,324,162,0,1926,1927,5,257,
        0,0,1927,1928,5,71,0,0,1928,2013,1,0,0,0,1929,1930,5,56,0,0,1930,
        1931,5,268,0,0,1931,1932,3,324,162,0,1932,1933,5,194,0,0,1933,1934,
        5,257,0,0,1934,2013,1,0,0,0,1935,1936,5,56,0,0,1936,1937,5,268,0,
        0,1937,1938,3,324,162,0,1938,1939,5,194,0,0,1939,1940,5,263,0,0,
        1940,1941,5,63,0,0,1941,1942,5,113,0,0,1942,2013,1,0,0,0,1943,1944,
        5,56,0,0,1944,1945,5,268,0,0,1945,1946,3,324,162,0,1946,1947,5,253,
        0,0,1947,1948,5,257,0,0,1948,1949,5,179,0,0,1949,2013,1,0,0,0,1950,
        1951,5,56,0,0,1951,1952,5,268,0,0,1952,1953,3,324,162,0,1953,1954,
        5,123,0,0,1954,1955,5,211,0,0,1955,2013,1,0,0,0,1956,1957,5,56,0,
        0,1957,1958,5,268,0,0,1958,1959,3,324,162,0,1959,1960,5,61,0,0,1960,
        1961,5,211,0,0,1961,2013,1,0,0,0,1962,1963,5,56,0,0,1963,1964,5,
        268,0,0,1964,1965,3,324,162,0,1965,1966,5,285,0,0,1966,1967,5,211,
        0,0,1967,2013,1,0,0,0,1968,1969,5,56,0,0,1969,1970,5,268,0,0,1970,
        1971,3,324,162,0,1971,1972,5,276,0,0,1972,2013,1,0,0,0,1973,1974,
        5,56,0,0,1974,1975,5,268,0,0,1975,1977,3,324,162,0,1976,1978,3,186,
        93,0,1977,1976,1,0,0,0,1977,1978,1,0,0,0,1978,1979,1,0,0,0,1979,
        1980,5,88,0,0,1980,2013,1,0,0,0,1981,1982,5,56,0,0,1982,1983,5,268,
        0,0,1983,1985,3,324,162,0,1984,1986,3,186,93,0,1985,1984,1,0,0,0,
        1985,1986,1,0,0,0,1986,1987,1,0,0,0,1987,1988,5,91,0,0,1988,2013,
        1,0,0,0,1989,1990,5,56,0,0,1990,1991,5,268,0,0,1991,1993,3,324,162,
        0,1992,1994,3,186,93,0,1993,1992,1,0,0,0,1993,1994,1,0,0,0,1994,
        1995,1,0,0,0,1995,1996,5,253,0,0,1996,1997,5,134,0,0,1997,2013,1,
        0,0,0,1998,1999,5,56,0,0,1999,2000,5,268,0,0,2000,2002,3,324,162,
        0,2001,2003,3,186,93,0,2002,2001,1,0,0,0,2002,2003,1,0,0,0,2003,
        2004,1,0,0,0,2004,2005,5,233,0,0,2005,2006,5,85,0,0,2006,2013,1,
        0,0,0,2007,2008,5,261,0,0,2008,2013,5,278,0,0,2009,2013,5,87,0,0,
        2010,2013,5,241,0,0,2011,2013,5,112,0,0,2012,1844,1,0,0,0,2012,1846,
        1,0,0,0,2012,1848,1,0,0,0,2012,1852,1,0,0,0,2012,1856,1,0,0,0,2012,
        1858,1,0,0,0,2012,1863,1,0,0,0,2012,1865,1,0,0,0,2012,1867,1,0,0,
        0,2012,1870,1,0,0,0,2012,1872,1,0,0,0,2012,1874,1,0,0,0,2012,1876,
        1,0,0,0,2012,1879,1,0,0,0,2012,1881,1,0,0,0,2012,1883,1,0,0,0,2012,
        1885,1,0,0,0,2012,1887,1,0,0,0,2012,1889,1,0,0,0,2012,1891,1,0,0,
        0,2012,1893,1,0,0,0,2012,1895,1,0,0,0,2012,1897,1,0,0,0,2012,1899,
        1,0,0,0,2012,1902,1,0,0,0,2012,1905,1,0,0,0,2012,1911,1,0,0,0,2012,
        1917,1,0,0,0,2012,1923,1,0,0,0,2012,1929,1,0,0,0,2012,1935,1,0,0,
        0,2012,1943,1,0,0,0,2012,1950,1,0,0,0,2012,1956,1,0,0,0,2012,1962,
        1,0,0,0,2012,1968,1,0,0,0,2012,1973,1,0,0,0,2012,1981,1,0,0,0,2012,
        1989,1,0,0,0,2012,1998,1,0,0,0,2012,2007,1,0,0,0,2012,2009,1,0,0,
        0,2012,2010,1,0,0,0,2012,2011,1,0,0,0,2013,167,1,0,0,0,2014,2016,
        5,94,0,0,2015,2017,5,272,0,0,2016,2015,1,0,0,0,2016,2017,1,0,0,0,
        2017,2019,1,0,0,0,2018,2020,5,128,0,0,2019,2018,1,0,0,0,2019,2020,
        1,0,0,0,2020,2021,1,0,0,0,2021,2025,5,268,0,0,2022,2023,5,151,0,
        0,2023,2024,5,194,0,0,2024,2026,5,124,0,0,2025,2022,1,0,0,0,2025,
        2026,1,0,0,0,2026,2027,1,0,0,0,2027,2028,3,322,161,0,2028,169,1,
        0,0,0,2029,2030,5,94,0,0,2030,2032,5,202,0,0,2031,2029,1,0,0,0,2031,
        2032,1,0,0,0,2032,2033,1,0,0,0,2033,2034,5,233,0,0,2034,2035,5,268,
        0,0,2035,2036,3,322,161,0,2036,171,1,0,0,0,2037,2038,5,80,0,0,2038,
        2039,5,71,0,0,2039,2043,3,298,149,0,2040,2041,5,260,0,0,2041,2042,
        5,71,0,0,2042,2044,3,302,151,0,2043,2040,1,0,0,0,2043,2044,1,0,0,
        0,2044,2045,1,0,0,0,2045,2046,5,163,0,0,2046,2047,5,329,0,0,2047,
        2048,5,70,0,0,2048,173,1,0,0,0,2049,2050,5,257,0,0,2050,2051,5,71,
        0,0,2051,2052,3,298,149,0,2052,2055,5,198,0,0,2053,2056,3,212,106,
        0,2054,2056,3,214,107,0,2055,2053,1,0,0,0,2055,2054,1,0,0,0,2056,
        2060,1,0,0,0,2057,2058,5,263,0,0,2058,2059,5,63,0,0,2059,2061,5,
        113,0,0,2060,2057,1,0,0,0,2060,2061,1,0,0,0,2061,175,1,0,0,0,2062,
        2063,5,179,0,0,2063,2064,5,325,0,0,2064,177,1,0,0,0,2065,2066,5,
        86,0,0,2066,2067,5,325,0,0,2067,179,1,0,0,0,2068,2070,3,48,24,0,
        2069,2068,1,0,0,0,2069,2070,1,0,0,0,2070,2072,1,0,0,0,2071,2073,
        3,196,98,0,2072,2071,1,0,0,0,2072,2073,1,0,0,0,2073,2074,1,0,0,0,
        2074,2075,3,230,115,0,2075,2076,3,226,113,0,2076,181,1,0,0,0,2077,
        2078,5,160,0,0,2078,2080,5,210,0,0,2079,2081,5,268,0,0,2080,2079,
        1,0,0,0,2080,2081,1,0,0,0,2081,2082,1,0,0,0,2082,2089,3,322,161,
        0,2083,2087,3,186,93,0,2084,2085,5,151,0,0,2085,2086,5,194,0,0,2086,
        2088,5,124,0,0,2087,2084,1,0,0,0,2087,2088,1,0,0,0,2088,2090,1,0,
        0,0,2089,2083,1,0,0,0,2089,2090,1,0,0,0,2090,2133,1,0,0,0,2091,2092,
        5,160,0,0,2092,2094,5,163,0,0,2093,2095,5,268,0,0,2094,2093,1,0,
        0,0,2094,2095,1,0,0,0,2095,2096,1,0,0,0,2096,2098,3,322,161,0,2097,
        2099,3,186,93,0,2098,2097,1,0,0,0,2098,2099,1,0,0,0,2099,2103,1,
        0,0,0,2100,2101,5,151,0,0,2101,2102,5,194,0,0,2102,2104,5,124,0,
        0,2103,2100,1,0,0,0,2103,2104,1,0,0,0,2104,2133,1,0,0,0,2105,2106,
        5,160,0,0,2106,2108,5,210,0,0,2107,2109,5,178,0,0,2108,2107,1,0,
        0,0,2108,2109,1,0,0,0,2109,2110,1,0,0,0,2110,2111,5,114,0,0,2111,
        2113,5,325,0,0,2112,2114,3,318,159,0,2113,2112,1,0,0,0,2113,2114,
        1,0,0,0,2114,2116,1,0,0,0,2115,2117,3,216,108,0,2116,2115,1,0,0,
        0,2116,2117,1,0,0,0,2117,2133,1,0,0,0,2118,2119,5,160,0,0,2119,2121,
        5,210,0,0,2120,2122,5,178,0,0,2121,2120,1,0,0,0,2121,2122,1,0,0,
        0,2122,2123,1,0,0,0,2123,2125,5,114,0,0,2124,2126,5,325,0,0,2125,
        2124,1,0,0,0,2125,2126,1,0,0,0,2126,2127,1,0,0,0,2127,2130,3,200,
        100,0,2128,2129,5,201,0,0,2129,2131,3,204,102,0,2130,2128,1,0,0,
        0,2130,2131,1,0,0,0,2131,2133,1,0,0,0,2132,2077,1,0,0,0,2132,2091,
        1,0,0,0,2132,2105,1,0,0,0,2132,2118,1,0,0,0,2133,183,1,0,0,0,2134,
        2136,3,186,93,0,2135,2137,3,176,88,0,2136,2135,1,0,0,0,2136,2137,
        1,0,0,0,2137,185,1,0,0,0,2138,2139,5,211,0,0,2139,2140,5,3,0,0,2140,
        2145,3,188,94,0,2141,2142,5,1,0,0,2142,2144,3,188,94,0,2143,2141,
        1,0,0,0,2144,2147,1,0,0,0,2145,2143,1,0,0,0,2145,2146,1,0,0,0,2146,
        2148,1,0,0,0,2147,2145,1,0,0,0,2148,2149,5,4,0,0,2149,187,1,0,0,
        0,2150,2153,3,412,206,0,2151,2152,5,305,0,0,2152,2154,3,348,174,
        0,2153,2151,1,0,0,0,2153,2154,1,0,0,0,2154,189,1,0,0,0,2155,2156,
        7,26,0,0,2156,191,1,0,0,0,2157,2163,3,406,203,0,2158,2163,5,325,
        0,0,2159,2163,3,350,175,0,2160,2163,3,354,177,0,2161,2163,3,356,
        178,0,2162,2157,1,0,0,0,2162,2158,1,0,0,0,2162,2159,1,0,0,0,2162,
        2160,1,0,0,0,2162,2161,1,0,0,0,2163,193,1,0,0,0,2164,2169,3,412,
        206,0,2165,2166,5,7,0,0,2166,2168,3,412,206,0,2167,2165,1,0,0,0,
        2168,2171,1,0,0,0,2169,2167,1,0,0,0,2169,2170,1,0,0,0,2170,195,1,
        0,0,0,2171,2169,1,0,0,0,2172,2173,5,303,0,0,2173,2178,3,198,99,0,
        2174,2175,5,1,0,0,2175,2177,3,198,99,0,2176,2174,1,0,0,0,2177,2180,
        1,0,0,0,2178,2176,1,0,0,0,2178,2179,1,0,0,0,2179,197,1,0,0,0,2180,
        2178,1,0,0,0,2181,2183,3,408,204,0,2182,2184,3,298,149,0,2183,2182,
        1,0,0,0,2183,2184,1,0,0,0,2184,2186,1,0,0,0,2185,2187,5,63,0,0,2186,
        2185,1,0,0,0,2186,2187,1,0,0,0,2187,2188,1,0,0,0,2188,2189,5,3,0,
        0,2189,2190,3,180,90,0,2190,2191,5,4,0,0,2191,199,1,0,0,0,2192,2193,
        5,296,0,0,2193,2194,3,322,161,0,2194,201,1,0,0,0,2195,2196,5,201,
        0,0,2196,2206,3,204,102,0,2197,2198,5,212,0,0,2198,2199,5,71,0,0,
        2199,2206,3,332,166,0,2200,2206,3,172,86,0,2201,2206,3,176,88,0,
        2202,2206,3,178,89,0,2203,2204,5,271,0,0,2204,2206,3,204,102,0,2205,
        2195,1,0,0,0,2205,2197,1,0,0,0,2205,2200,1,0,0,0,2205,2201,1,0,0,
        0,2205,2202,1,0,0,0,2205,2203,1,0,0,0,2206,2209,1,0,0,0,2207,2205,
        1,0,0,0,2207,2208,1,0,0,0,2208,203,1,0,0,0,2209,2207,1,0,0,0,2210,
        2211,5,3,0,0,2211,2216,3,206,103,0,2212,2213,5,1,0,0,2213,2215,3,
        206,103,0,2214,2212,1,0,0,0,2215,2218,1,0,0,0,2216,2214,1,0,0,0,
        2216,2217,1,0,0,0,2217,2219,1,0,0,0,2218,2216,1,0,0,0,2219,2220,
        5,4,0,0,2220,205,1,0,0,0,2221,2226,3,208,104,0,2222,2224,5,305,0,
        0,2223,2222,1,0,0,0,2223,2224,1,0,0,0,2224,2225,1,0,0,0,2225,2227,
        3,210,105,0,2226,2223,1,0,0,0,2226,2227,1,0,0,0,2227,207,1,0,0,0,
        2228,2233,3,412,206,0,2229,2230,5,7,0,0,2230,2232,3,412,206,0,2231,
        2229,1,0,0,0,2232,2235,1,0,0,0,2233,2231,1,0,0,0,2233,2234,1,0,0,
        0,2234,2238,1,0,0,0,2235,2233,1,0,0,0,2236,2238,5,325,0,0,2237,2228,
        1,0,0,0,2237,2236,1,0,0,0,2238,209,1,0,0,0,2239,2244,5,329,0,0,2240,
        2244,5,331,0,0,2241,2244,3,358,179,0,2242,2244,5,325,0,0,2243,2239,
        1,0,0,0,2243,2240,1,0,0,0,2243,2241,1,0,0,0,2243,2242,1,0,0,0,2244,
        211,1,0,0,0,2245,2246,5,3,0,0,2246,2251,3,348,174,0,2247,2248,5,
        1,0,0,2248,2250,3,348,174,0,2249,2247,1,0,0,0,2250,2253,1,0,0,0,
        2251,2249,1,0,0,0,2251,2252,1,0,0,0,2252,2254,1,0,0,0,2253,2251,
        1,0,0,0,2254,2255,5,4,0,0,2255,213,1,0,0,0,2256,2257,5,3,0,0,2257,
        2262,3,212,106,0,2258,2259,5,1,0,0,2259,2261,3,212,106,0,2260,2258,
        1,0,0,0,2261,2264,1,0,0,0,2262,2260,1,0,0,0,2262,2263,1,0,0,0,2263,
        2265,1,0,0,0,2264,2262,1,0,0,0,2265,2266,5,4,0,0,2266,215,1,0,0,
        0,2267,2268,5,263,0,0,2268,2269,5,63,0,0,2269,2274,3,218,109,0,2270,
        2271,5,263,0,0,2271,2272,5,71,0,0,2272,2274,3,220,110,0,2273,2267,
        1,0,0,0,2273,2270,1,0,0,0,2274,217,1,0,0,0,2275,2276,5,159,0,0,2276,
        2277,5,325,0,0,2277,2278,5,206,0,0,2278,2281,5,325,0,0,2279,2281,
        3,412,206,0,2280,2275,1,0,0,0,2280,2279,1,0,0,0,2281,219,1,0,0,0,
        2282,2286,5,325,0,0,2283,2284,5,303,0,0,2284,2285,5,251,0,0,2285,
        2287,3,204,102,0,2286,2283,1,0,0,0,2286,2287,1,0,0,0,2287,221,1,
        0,0,0,2288,2289,3,412,206,0,2289,2290,5,325,0,0,2290,223,1,0,0,0,
        2291,2292,3,182,91,0,2292,2293,3,230,115,0,2293,2294,3,226,113,0,
        2294,2343,1,0,0,0,2295,2297,3,270,135,0,2296,2298,3,228,114,0,2297,
        2296,1,0,0,0,2298,2299,1,0,0,0,2299,2297,1,0,0,0,2299,2300,1,0,0,
        0,2300,2343,1,0,0,0,2301,2302,5,108,0,0,2302,2303,5,141,0,0,2303,
        2304,3,322,161,0,2304,2306,3,316,158,0,2305,2307,3,262,131,0,2306,
        2305,1,0,0,0,2306,2307,1,0,0,0,2307,2343,1,0,0,0,2308,2309,5,293,
        0,0,2309,2310,3,322,161,0,2310,2311,3,316,158,0,2311,2313,3,248,
        124,0,2312,2314,3,262,131,0,2313,2312,1,0,0,0,2313,2314,1,0,0,0,
        2314,2343,1,0,0,0,2315,2316,5,186,0,0,2316,2317,5,163,0,0,2317,2318,
        3,322,161,0,2318,2319,3,316,158,0,2319,2325,5,296,0,0,2320,2326,
        3,322,161,0,2321,2322,5,3,0,0,2322,2323,3,180,90,0,2323,2324,5,4,
        0,0,2324,2326,1,0,0,0,2325,2320,1,0,0,0,2325,2321,1,0,0,0,2326,2327,
        1,0,0,0,2327,2328,3,316,158,0,2328,2329,5,198,0,0,2329,2333,3,340,
        170,0,2330,2332,3,250,125,0,2331,2330,1,0,0,0,2332,2335,1,0,0,0,
        2333,2331,1,0,0,0,2333,2334,1,0,0,0,2334,2339,1,0,0,0,2335,2333,
        1,0,0,0,2336,2338,3,252,126,0,2337,2336,1,0,0,0,2338,2341,1,0,0,
        0,2339,2337,1,0,0,0,2339,2340,1,0,0,0,2340,2343,1,0,0,0,2341,2339,
        1,0,0,0,2342,2291,1,0,0,0,2342,2295,1,0,0,0,2342,2301,1,0,0,0,2342,
        2308,1,0,0,0,2342,2315,1,0,0,0,2343,225,1,0,0,0,2344,2345,5,203,
        0,0,2345,2346,5,71,0,0,2346,2351,3,234,117,0,2347,2348,5,1,0,0,2348,
        2350,3,234,117,0,2349,2347,1,0,0,0,2350,2353,1,0,0,0,2351,2349,1,
        0,0,0,2351,2352,1,0,0,0,2352,2355,1,0,0,0,2353,2351,1,0,0,0,2354,
        2344,1,0,0,0,2354,2355,1,0,0,0,2355,2366,1,0,0,0,2356,2357,5,79,
        0,0,2357,2358,5,71,0,0,2358,2363,3,338,169,0,2359,2360,5,1,0,0,2360,
        2362,3,338,169,0,2361,2359,1,0,0,0,2362,2365,1,0,0,0,2363,2361,1,
        0,0,0,2363,2364,1,0,0,0,2364,2367,1,0,0,0,2365,2363,1,0,0,0,2366,
        2356,1,0,0,0,2366,2367,1,0,0,0,2367,2378,1,0,0,0,2368,2369,5,116,
        0,0,2369,2370,5,71,0,0,2370,2375,3,338,169,0,2371,2372,5,1,0,0,2372,
        2374,3,338,169,0,2373,2371,1,0,0,0,2374,2377,1,0,0,0,2375,2373,1,
        0,0,0,2375,2376,1,0,0,0,2376,2379,1,0,0,0,2377,2375,1,0,0,0,2378,
        2368,1,0,0,0,2378,2379,1,0,0,0,2379,2390,1,0,0,0,2380,2381,5,259,
        0,0,2381,2382,5,71,0,0,2382,2387,3,234,117,0,2383,2384,5,1,0,0,2384,
        2386,3,234,117,0,2385,2383,1,0,0,0,2386,2389,1,0,0,0,2387,2385,1,
        0,0,0,2387,2388,1,0,0,0,2388,2391,1,0,0,0,2389,2387,1,0,0,0,2390,
        2380,1,0,0,0,2390,2391,1,0,0,0,2391,2393,1,0,0,0,2392,2394,3,392,
        196,0,2393,2392,1,0,0,0,2393,2394,1,0,0,0,2394,2400,1,0,0,0,2395,
        2398,5,174,0,0,2396,2399,5,55,0,0,2397,2399,3,338,169,0,2398,2396,
        1,0,0,0,2398,2397,1,0,0,0,2399,2401,1,0,0,0,2400,2395,1,0,0,0,2400,
        2401,1,0,0,0,2401,227,1,0,0,0,2402,2403,3,182,91,0,2403,2404,3,238,
        119,0,2404,229,1,0,0,0,2405,2406,6,115,-1,0,2406,2409,3,232,116,
        0,2407,2409,3,8,4,0,2408,2405,1,0,0,0,2408,2407,1,0,0,0,2409,2430,
        1,0,0,0,2410,2411,10,3,0,0,2411,2413,7,27,0,0,2412,2414,3,284,142,
        0,2413,2412,1,0,0,0,2413,2414,1,0,0,0,2414,2415,1,0,0,0,2415,2429,
        3,230,115,4,2416,2417,10,2,0,0,2417,2419,5,161,0,0,2418,2420,3,284,
        142,0,2419,2418,1,0,0,0,2419,2420,1,0,0,0,2420,2421,1,0,0,0,2421,
        2429,3,230,115,3,2422,2423,10,1,0,0,2423,2425,7,28,0,0,2424,2426,
        3,284,142,0,2425,2424,1,0,0,0,2425,2426,1,0,0,0,2426,2427,1,0,0,
        0,2427,2429,3,230,115,2,2428,2410,1,0,0,0,2428,2416,1,0,0,0,2428,
        2422,1,0,0,0,2429,2432,1,0,0,0,2430,2428,1,0,0,0,2430,2431,1,0,0,
        0,2431,231,1,0,0,0,2432,2430,1,0,0,0,2433,2439,3,240,120,0,2434,
        2439,3,236,118,0,2435,2436,5,268,0,0,2436,2439,3,322,161,0,2437,
        2439,3,312,156,0,2438,2433,1,0,0,0,2438,2434,1,0,0,0,2438,2435,1,
        0,0,0,2438,2437,1,0,0,0,2439,233,1,0,0,0,2440,2442,3,338,169,0,2441,
        2443,7,10,0,0,2442,2441,1,0,0,0,2442,2443,1,0,0,0,2443,2446,1,0,
        0,0,2444,2445,5,196,0,0,2445,2447,7,3,0,0,2446,2444,1,0,0,0,2446,
        2447,1,0,0,0,2447,235,1,0,0,0,2448,2450,3,270,135,0,2449,2451,3,
        238,119,0,2450,2449,1,0,0,0,2451,2452,1,0,0,0,2452,2450,1,0,0,0,
        2452,2453,1,0,0,0,2453,237,1,0,0,0,2454,2456,3,244,122,0,2455,2457,
        3,262,131,0,2456,2455,1,0,0,0,2456,2457,1,0,0,0,2457,2458,1,0,0,
        0,2458,2459,3,226,113,0,2459,2482,1,0,0,0,2460,2464,3,246,123,0,
        2461,2463,3,282,141,0,2462,2461,1,0,0,0,2463,2466,1,0,0,0,2464,2462,
        1,0,0,0,2464,2465,1,0,0,0,2465,2468,1,0,0,0,2466,2464,1,0,0,0,2467,
        2469,3,262,131,0,2468,2467,1,0,0,0,2468,2469,1,0,0,0,2469,2471,1,
        0,0,0,2470,2472,3,272,136,0,2471,2470,1,0,0,0,2471,2472,1,0,0,0,
        2472,2474,1,0,0,0,2473,2475,3,264,132,0,2474,2473,1,0,0,0,2474,2475,
        1,0,0,0,2475,2477,1,0,0,0,2476,2478,3,392,196,0,2477,2476,1,0,0,
        0,2477,2478,1,0,0,0,2478,2479,1,0,0,0,2479,2480,3,226,113,0,2480,
        2482,1,0,0,0,2481,2454,1,0,0,0,2481,2460,1,0,0,0,2482,239,1,0,0,
        0,2483,2484,3,244,122,0,2484,2486,3,242,121,0,2485,2487,3,262,131,
        0,2486,2485,1,0,0,0,2486,2487,1,0,0,0,2487,2509,1,0,0,0,2488,2489,
        3,246,123,0,2489,2493,3,242,121,0,2490,2492,3,282,141,0,2491,2490,
        1,0,0,0,2492,2495,1,0,0,0,2493,2491,1,0,0,0,2493,2494,1,0,0,0,2494,
        2497,1,0,0,0,2495,2493,1,0,0,0,2496,2498,3,262,131,0,2497,2496,1,
        0,0,0,2497,2498,1,0,0,0,2498,2500,1,0,0,0,2499,2501,3,272,136,0,
        2500,2499,1,0,0,0,2500,2501,1,0,0,0,2501,2503,1,0,0,0,2502,2504,
        3,264,132,0,2503,2502,1,0,0,0,2503,2504,1,0,0,0,2504,2506,1,0,0,
        0,2505,2507,3,392,196,0,2506,2505,1,0,0,0,2506,2507,1,0,0,0,2507,
        2509,1,0,0,0,2508,2483,1,0,0,0,2508,2488,1,0,0,0,2509,241,1,0,0,
        0,2510,2512,3,270,135,0,2511,2510,1,0,0,0,2511,2512,1,0,0,0,2512,
        243,1,0,0,0,2513,2514,5,247,0,0,2514,2515,5,280,0,0,2515,2516,5,
        3,0,0,2516,2517,3,330,165,0,2517,2518,5,4,0,0,2518,2524,1,0,0,0,
        2519,2520,5,184,0,0,2520,2524,3,330,165,0,2521,2522,5,228,0,0,2522,
        2524,3,330,165,0,2523,2513,1,0,0,0,2523,2519,1,0,0,0,2523,2521,1,
        0,0,0,2524,2526,1,0,0,0,2525,2527,3,318,159,0,2526,2525,1,0,0,0,
        2526,2527,1,0,0,0,2527,2530,1,0,0,0,2528,2529,5,226,0,0,2529,2531,
        5,325,0,0,2530,2528,1,0,0,0,2530,2531,1,0,0,0,2531,2532,1,0,0,0,
        2532,2533,5,296,0,0,2533,2546,5,325,0,0,2534,2544,5,63,0,0,2535,
        2545,3,300,150,0,2536,2545,3,382,191,0,2537,2540,5,3,0,0,2538,2541,
        3,300,150,0,2539,2541,3,382,191,0,2540,2538,1,0,0,0,2540,2539,1,
        0,0,0,2541,2542,1,0,0,0,2542,2543,5,4,0,0,2543,2545,1,0,0,0,2544,
        2535,1,0,0,0,2544,2536,1,0,0,0,2544,2537,1,0,0,0,2545,2547,1,0,0,
        0,2546,2534,1,0,0,0,2546,2547,1,0,0,0,2547,2549,1,0,0,0,2548,2550,
        3,318,159,0,2549,2548,1,0,0,0,2549,2550,1,0,0,0,2550,2553,1,0,0,
        0,2551,2552,5,225,0,0,2552,2554,5,325,0,0,2553,2551,1,0,0,0,2553,
        2554,1,0,0,0,2554,245,1,0,0,0,2555,2559,5,247,0,0,2556,2558,3,266,
        133,0,2557,2556,1,0,0,0,2558,2561,1,0,0,0,2559,2557,1,0,0,0,2559,
        2560,1,0,0,0,2560,2563,1,0,0,0,2561,2559,1,0,0,0,2562,2564,3,284,
        142,0,2563,2562,1,0,0,0,2563,2564,1,0,0,0,2564,2565,1,0,0,0,2565,
        2566,3,330,165,0,2566,247,1,0,0,0,2567,2568,5,253,0,0,2568,2569,
        3,258,129,0,2569,249,1,0,0,0,2570,2571,5,300,0,0,2571,2574,5,185,
        0,0,2572,2573,5,58,0,0,2573,2575,3,340,170,0,2574,2572,1,0,0,0,2574,
        2575,1,0,0,0,2575,2576,1,0,0,0,2576,2577,5,274,0,0,2577,2578,3,254,
        127,0,2578,251,1,0,0,0,2579,2580,5,300,0,0,2580,2581,5,194,0,0,2581,
        2584,5,185,0,0,2582,2583,5,58,0,0,2583,2585,3,340,170,0,2584,2582,
        1,0,0,0,2584,2585,1,0,0,0,2585,2586,1,0,0,0,2586,2587,5,274,0,0,
        2587,2588,3,256,128,0,2588,253,1,0,0,0,2589,2597,5,108,0,0,2590,
        2591,5,293,0,0,2591,2592,5,253,0,0,2592,2597,5,316,0,0,2593,2594,
        5,293,0,0,2594,2595,5,253,0,0,2595,2597,3,258,129,0,2596,2589,1,
        0,0,0,2596,2590,1,0,0,0,2596,2593,1,0,0,0,2597,255,1,0,0,0,2598,
        2599,5,160,0,0,2599,2617,5,316,0,0,2600,2601,5,160,0,0,2601,2602,
        5,3,0,0,2602,2603,3,320,160,0,2603,2604,5,4,0,0,2604,2605,5,297,
        0,0,2605,2606,5,3,0,0,2606,2611,3,338,169,0,2607,2608,5,1,0,0,2608,
        2610,3,338,169,0,2609,2607,1,0,0,0,2610,2613,1,0,0,0,2611,2609,1,
        0,0,0,2611,2612,1,0,0,0,2612,2614,1,0,0,0,2613,2611,1,0,0,0,2614,
        2615,5,4,0,0,2615,2617,1,0,0,0,2616,2598,1,0,0,0,2616,2600,1,0,0,
        0,2617,257,1,0,0,0,2618,2623,3,260,130,0,2619,2620,5,1,0,0,2620,
        2622,3,260,130,0,2621,2619,1,0,0,0,2622,2625,1,0,0,0,2623,2621,1,
        0,0,0,2623,2624,1,0,0,0,2624,259,1,0,0,0,2625,2623,1,0,0,0,2626,
        2627,3,322,161,0,2627,2628,5,305,0,0,2628,2629,3,338,169,0,2629,
        261,1,0,0,0,2630,2631,5,301,0,0,2631,2632,3,340,170,0,2632,263,1,
        0,0,0,2633,2634,5,149,0,0,2634,2635,3,340,170,0,2635,265,1,0,0,0,
        2636,2637,5,14,0,0,2637,2644,3,268,134,0,2638,2640,5,1,0,0,2639,
        2638,1,0,0,0,2639,2640,1,0,0,0,2640,2641,1,0,0,0,2641,2643,3,268,
        134,0,2642,2639,1,0,0,0,2643,2646,1,0,0,0,2644,2642,1,0,0,0,2644,
        2645,1,0,0,0,2645,2647,1,0,0,0,2646,2644,1,0,0,0,2647,2648,5,15,
        0,0,2648,267,1,0,0,0,2649,2663,3,412,206,0,2650,2651,3,412,206,0,
        2651,2652,5,3,0,0,2652,2657,3,346,173,0,2653,2654,5,1,0,0,2654,2656,
        3,346,173,0,2655,2653,1,0,0,0,2656,2659,1,0,0,0,2657,2655,1,0,0,
        0,2657,2658,1,0,0,0,2658,2660,1,0,0,0,2659,2657,1,0,0,0,2660,2661,
        5,4,0,0,2661,2663,1,0,0,0,2662,2649,1,0,0,0,2662,2650,1,0,0,0,2663,
        269,1,0,0,0,2664,2665,5,141,0,0,2665,2670,3,286,143,0,2666,2667,
        5,1,0,0,2667,2669,3,286,143,0,2668,2666,1,0,0,0,2669,2672,1,0,0,
        0,2670,2668,1,0,0,0,2670,2671,1,0,0,0,2671,2676,1,0,0,0,2672,2670,
        1,0,0,0,2673,2675,3,282,141,0,2674,2673,1,0,0,0,2675,2678,1,0,0,
        0,2676,2674,1,0,0,0,2676,2677,1,0,0,0,2677,2680,1,0,0,0,2678,2676,
        1,0,0,0,2679,2681,3,276,138,0,2680,2679,1,0,0,0,2680,2681,1,0,0,
        0,2681,271,1,0,0,0,2682,2683,5,147,0,0,2683,2684,5,71,0,0,2684,2689,
        3,338,169,0,2685,2686,5,1,0,0,2686,2688,3,338,169,0,2687,2685,1,
        0,0,0,2688,2691,1,0,0,0,2689,2687,1,0,0,0,2689,2690,1,0,0,0,2690,
        2709,1,0,0,0,2691,2689,1,0,0,0,2692,2693,5,303,0,0,2693,2710,5,242,
        0,0,2694,2695,5,303,0,0,2695,2710,5,96,0,0,2696,2697,5,148,0,0,2697,
        2698,5,255,0,0,2698,2699,5,3,0,0,2699,2704,3,274,137,0,2700,2701,
        5,1,0,0,2701,2703,3,274,137,0,2702,2700,1,0,0,0,2703,2706,1,0,0,
        0,2704,2702,1,0,0,0,2704,2705,1,0,0,0,2705,2707,1,0,0,0,2706,2704,
        1,0,0,0,2707,2708,5,4,0,0,2708,2710,1,0,0,0,2709,2692,1,0,0,0,2709,
        2694,1,0,0,0,2709,2696,1,0,0,0,2709,2710,1,0,0,0,2710,2727,1,0,0,
        0,2711,2712,5,147,0,0,2712,2713,5,71,0,0,2713,2714,5,148,0,0,2714,
        2715,5,255,0,0,2715,2716,5,3,0,0,2716,2721,3,274,137,0,2717,2718,
        5,1,0,0,2718,2720,3,274,137,0,2719,2717,1,0,0,0,2720,2723,1,0,0,
        0,2721,2719,1,0,0,0,2721,2722,1,0,0,0,2722,2724,1,0,0,0,2723,2721,
        1,0,0,0,2724,2725,5,4,0,0,2725,2727,1,0,0,0,2726,2682,1,0,0,0,2726,
        2711,1,0,0,0,2727,273,1,0,0,0,2728,2737,5,3,0,0,2729,2734,3,338,
        169,0,2730,2731,5,1,0,0,2731,2733,3,338,169,0,2732,2730,1,0,0,0,
        2733,2736,1,0,0,0,2734,2732,1,0,0,0,2734,2735,1,0,0,0,2735,2738,
        1,0,0,0,2736,2734,1,0,0,0,2737,2729,1,0,0,0,2737,2738,1,0,0,0,2738,
        2739,1,0,0,0,2739,2742,5,4,0,0,2740,2742,3,338,169,0,2741,2728,1,
        0,0,0,2741,2740,1,0,0,0,2742,275,1,0,0,0,2743,2744,5,215,0,0,2744,
        2745,5,3,0,0,2745,2746,3,330,165,0,2746,2747,5,137,0,0,2747,2748,
        3,278,139,0,2748,2749,5,154,0,0,2749,2750,5,3,0,0,2750,2755,3,280,
        140,0,2751,2752,5,1,0,0,2752,2754,3,280,140,0,2753,2751,1,0,0,0,
        2754,2757,1,0,0,0,2755,2753,1,0,0,0,2755,2756,1,0,0,0,2756,2758,
        1,0,0,0,2757,2755,1,0,0,0,2758,2759,5,4,0,0,2759,2760,5,4,0,0,2760,
        277,1,0,0,0,2761,2774,3,412,206,0,2762,2763,5,3,0,0,2763,2768,3,
        412,206,0,2764,2765,5,1,0,0,2765,2767,3,412,206,0,2766,2764,1,0,
        0,0,2767,2770,1,0,0,0,2768,2766,1,0,0,0,2768,2769,1,0,0,0,2769,2771,
        1,0,0,0,2770,2768,1,0,0,0,2771,2772,5,4,0,0,2772,2774,1,0,0,0,2773,
        2761,1,0,0,0,2773,2762,1,0,0,0,2774,279,1,0,0,0,2775,2780,3,338,
        169,0,2776,2778,5,63,0,0,2777,2776,1,0,0,0,2777,2778,1,0,0,0,2778,
        2779,1,0,0,0,2779,2781,3,412,206,0,2780,2777,1,0,0,0,2780,2781,1,
        0,0,0,2781,281,1,0,0,0,2782,2783,5,169,0,0,2783,2785,5,298,0,0,2784,
        2786,5,205,0,0,2785,2784,1,0,0,0,2785,2786,1,0,0,0,2786,2787,1,0,
        0,0,2787,2788,3,406,203,0,2788,2797,5,3,0,0,2789,2794,3,338,169,
        0,2790,2791,5,1,0,0,2791,2793,3,338,169,0,2792,2790,1,0,0,0,2793,
        2796,1,0,0,0,2794,2792,1,0,0,0,2794,2795,1,0,0,0,2795,2798,1,0,0,
        0,2796,2794,1,0,0,0,2797,2789,1,0,0,0,2797,2798,1,0,0,0,2798,2799,
        1,0,0,0,2799,2800,5,4,0,0,2800,2812,3,412,206,0,2801,2803,5,63,0,
        0,2802,2801,1,0,0,0,2802,2803,1,0,0,0,2803,2804,1,0,0,0,2804,2809,
        3,412,206,0,2805,2806,5,1,0,0,2806,2808,3,412,206,0,2807,2805,1,
        0,0,0,2808,2811,1,0,0,0,2809,2807,1,0,0,0,2809,2810,1,0,0,0,2810,
        2813,1,0,0,0,2811,2809,1,0,0,0,2812,2802,1,0,0,0,2812,2813,1,0,0,
        0,2813,283,1,0,0,0,2814,2815,7,29,0,0,2815,285,1,0,0,0,2816,2820,
        3,310,155,0,2817,2819,3,288,144,0,2818,2817,1,0,0,0,2819,2822,1,
        0,0,0,2820,2818,1,0,0,0,2820,2821,1,0,0,0,2821,287,1,0,0,0,2822,
        2820,1,0,0,0,2823,2824,3,290,145,0,2824,2825,5,166,0,0,2825,2827,
        3,310,155,0,2826,2828,3,292,146,0,2827,2826,1,0,0,0,2827,2828,1,
        0,0,0,2828,2835,1,0,0,0,2829,2830,5,192,0,0,2830,2831,3,290,145,
        0,2831,2832,5,166,0,0,2832,2833,3,310,155,0,2833,2835,1,0,0,0,2834,
        2823,1,0,0,0,2834,2829,1,0,0,0,2835,289,1,0,0,0,2836,2838,5,157,
        0,0,2837,2836,1,0,0,0,2837,2838,1,0,0,0,2838,2861,1,0,0,0,2839,2861,
        5,95,0,0,2840,2842,5,172,0,0,2841,2843,5,205,0,0,2842,2841,1,0,0,
        0,2842,2843,1,0,0,0,2843,2861,1,0,0,0,2844,2846,5,172,0,0,2845,2844,
        1,0,0,0,2845,2846,1,0,0,0,2846,2847,1,0,0,0,2847,2861,5,248,0,0,
        2848,2850,5,237,0,0,2849,2851,5,205,0,0,2850,2849,1,0,0,0,2850,2851,
        1,0,0,0,2851,2861,1,0,0,0,2852,2854,5,142,0,0,2853,2855,5,205,0,
        0,2854,2853,1,0,0,0,2854,2855,1,0,0,0,2855,2861,1,0,0,0,2856,2858,
        5,172,0,0,2857,2856,1,0,0,0,2857,2858,1,0,0,0,2858,2859,1,0,0,0,
        2859,2861,5,59,0,0,2860,2837,1,0,0,0,2860,2839,1,0,0,0,2860,2840,
        1,0,0,0,2860,2845,1,0,0,0,2860,2848,1,0,0,0,2860,2852,1,0,0,0,2860,
        2857,1,0,0,0,2861,291,1,0,0,0,2862,2863,5,198,0,0,2863,2867,3,340,
        170,0,2864,2865,5,296,0,0,2865,2867,3,298,149,0,2866,2862,1,0,0,
        0,2866,2864,1,0,0,0,2867,293,1,0,0,0,2868,2869,5,270,0,0,2869,2871,
        5,3,0,0,2870,2872,3,296,148,0,2871,2870,1,0,0,0,2871,2872,1,0,0,
        0,2872,2873,1,0,0,0,2873,2874,5,4,0,0,2874,295,1,0,0,0,2875,2877,
        5,315,0,0,2876,2875,1,0,0,0,2876,2877,1,0,0,0,2877,2878,1,0,0,0,
        2878,2879,7,7,0,0,2879,2900,5,214,0,0,2880,2881,3,338,169,0,2881,
        2882,5,244,0,0,2882,2900,1,0,0,0,2883,2884,5,69,0,0,2884,2885,5,
        329,0,0,2885,2886,5,204,0,0,2886,2887,5,197,0,0,2887,2896,5,329,
        0,0,2888,2894,5,198,0,0,2889,2895,3,412,206,0,2890,2891,3,406,203,
        0,2891,2892,5,3,0,0,2892,2893,5,4,0,0,2893,2895,1,0,0,0,2894,2889,
        1,0,0,0,2894,2890,1,0,0,0,2895,2897,1,0,0,0,2896,2888,1,0,0,0,2896,
        2897,1,0,0,0,2897,2900,1,0,0,0,2898,2900,3,338,169,0,2899,2876,1,
        0,0,0,2899,2880,1,0,0,0,2899,2883,1,0,0,0,2899,2898,1,0,0,0,2900,
        297,1,0,0,0,2901,2902,5,3,0,0,2902,2903,3,300,150,0,2903,2904,5,
        4,0,0,2904,299,1,0,0,0,2905,2910,3,408,204,0,2906,2907,5,1,0,0,2907,
        2909,3,408,204,0,2908,2906,1,0,0,0,2909,2912,1,0,0,0,2910,2908,1,
        0,0,0,2910,2911,1,0,0,0,2911,301,1,0,0,0,2912,2910,1,0,0,0,2913,
        2914,5,3,0,0,2914,2919,3,304,152,0,2915,2916,5,1,0,0,2916,2918,3,
        304,152,0,2917,2915,1,0,0,0,2918,2921,1,0,0,0,2919,2917,1,0,0,0,
        2919,2920,1,0,0,0,2920,2922,1,0,0,0,2921,2919,1,0,0,0,2922,2923,
        5,4,0,0,2923,303,1,0,0,0,2924,2926,3,408,204,0,2925,2927,7,10,0,
        0,2926,2925,1,0,0,0,2926,2927,1,0,0,0,2927,305,1,0,0,0,2928,2929,
        5,3,0,0,2929,2934,3,308,154,0,2930,2931,5,1,0,0,2931,2933,3,308,
        154,0,2932,2930,1,0,0,0,2933,2936,1,0,0,0,2934,2932,1,0,0,0,2934,
        2935,1,0,0,0,2935,2937,1,0,0,0,2936,2934,1,0,0,0,2937,2938,5,4,0,
        0,2938,307,1,0,0,0,2939,2941,3,412,206,0,2940,2942,3,178,89,0,2941,
        2940,1,0,0,0,2941,2942,1,0,0,0,2942,309,1,0,0,0,2943,2945,3,322,
        161,0,2944,2946,3,74,37,0,2945,2944,1,0,0,0,2945,2946,1,0,0,0,2946,
        2948,1,0,0,0,2947,2949,3,294,147,0,2948,2947,1,0,0,0,2948,2949,1,
        0,0,0,2949,2950,1,0,0,0,2950,2951,3,316,158,0,2951,2971,1,0,0,0,
        2952,2953,5,3,0,0,2953,2954,3,180,90,0,2954,2956,5,4,0,0,2955,2957,
        3,294,147,0,2956,2955,1,0,0,0,2956,2957,1,0,0,0,2957,2958,1,0,0,
        0,2958,2959,3,316,158,0,2959,2971,1,0,0,0,2960,2961,5,3,0,0,2961,
        2962,3,286,143,0,2962,2964,5,4,0,0,2963,2965,3,294,147,0,2964,2963,
        1,0,0,0,2964,2965,1,0,0,0,2965,2966,1,0,0,0,2966,2967,3,316,158,
        0,2967,2971,1,0,0,0,2968,2971,3,312,156,0,2969,2971,3,314,157,0,
        2970,2943,1,0,0,0,2970,2952,1,0,0,0,2970,2960,1,0,0,0,2970,2968,
        1,0,0,0,2970,2969,1,0,0,0,2971,311,1,0,0,0,2972,2973,5,297,0,0,2973,
        2978,3,338,169,0,2974,2975,5,1,0,0,2975,2977,3,338,169,0,2976,2974,
        1,0,0,0,2977,2980,1,0,0,0,2978,2976,1,0,0,0,2978,2979,1,0,0,0,2979,
        2981,1,0,0,0,2980,2978,1,0,0,0,2981,2982,3,316,158,0,2982,313,1,
        0,0,0,2983,2984,3,408,204,0,2984,2993,5,3,0,0,2985,2990,3,338,169,
        0,2986,2987,5,1,0,0,2987,2989,3,338,169,0,2988,2986,1,0,0,0,2989,
        2992,1,0,0,0,2990,2988,1,0,0,0,2990,2991,1,0,0,0,2991,2994,1,0,0,
        0,2992,2990,1,0,0,0,2993,2985,1,0,0,0,2993,2994,1,0,0,0,2994,2995,
        1,0,0,0,2995,2996,5,4,0,0,2996,2997,3,316,158,0,2997,315,1,0,0,0,
        2998,3000,5,63,0,0,2999,2998,1,0,0,0,2999,3000,1,0,0,0,3000,3001,
        1,0,0,0,3001,3003,3,414,207,0,3002,3004,3,298,149,0,3003,3002,1,
        0,0,0,3003,3004,1,0,0,0,3004,3006,1,0,0,0,3005,2999,1,0,0,0,3005,
        3006,1,0,0,0,3006,317,1,0,0,0,3007,3008,5,243,0,0,3008,3009,5,139,
        0,0,3009,3010,5,250,0,0,3010,3014,5,325,0,0,3011,3012,5,303,0,0,
        3012,3013,5,251,0,0,3013,3015,3,204,102,0,3014,3011,1,0,0,0,3014,
        3015,1,0,0,0,3015,3057,1,0,0,0,3016,3017,5,243,0,0,3017,3018,5,139,
        0,0,3018,3028,5,109,0,0,3019,3020,5,132,0,0,3020,3021,5,273,0,0,
        3021,3022,5,71,0,0,3022,3026,5,325,0,0,3023,3024,5,121,0,0,3024,
        3025,5,71,0,0,3025,3027,5,325,0,0,3026,3023,1,0,0,0,3026,3027,1,
        0,0,0,3027,3029,1,0,0,0,3028,3019,1,0,0,0,3028,3029,1,0,0,0,3029,
        3035,1,0,0,0,3030,3031,5,83,0,0,3031,3032,5,165,0,0,3032,3033,5,
        273,0,0,3033,3034,5,71,0,0,3034,3036,5,325,0,0,3035,3030,1,0,0,0,
        3035,3036,1,0,0,0,3036,3042,1,0,0,0,3037,3038,5,184,0,0,3038,3039,
        5,167,0,0,3039,3040,5,273,0,0,3040,3041,5,71,0,0,3041,3043,5,325,
        0,0,3042,3037,1,0,0,0,3042,3043,1,0,0,0,3043,3048,1,0,0,0,3044,3045,
        5,175,0,0,3045,3046,5,273,0,0,3046,3047,5,71,0,0,3047,3049,5,325,
        0,0,3048,3044,1,0,0,0,3048,3049,1,0,0,0,3049,3054,1,0,0,0,3050,3051,
        5,195,0,0,3051,3052,5,107,0,0,3052,3053,5,63,0,0,3053,3055,5,325,
        0,0,3054,3050,1,0,0,0,3054,3055,1,0,0,0,3055,3057,1,0,0,0,3056,3007,
        1,0,0,0,3056,3016,1,0,0,0,3057,319,1,0,0,0,3058,3063,3,322,161,0,
        3059,3060,5,1,0,0,3060,3062,3,322,161,0,3061,3059,1,0,0,0,3062,3065,
        1,0,0,0,3063,3061,1,0,0,0,3063,3064,1,0,0,0,3064,321,1,0,0,0,3065,
        3063,1,0,0,0,3066,3071,3,408,204,0,3067,3068,5,7,0,0,3068,3070,3,
        408,204,0,3069,3067,1,0,0,0,3070,3073,1,0,0,0,3071,3069,1,0,0,0,
        3071,3072,1,0,0,0,3072,323,1,0,0,0,3073,3071,1,0,0,0,3074,3075,3,
        408,204,0,3075,3076,5,7,0,0,3076,3078,1,0,0,0,3077,3074,1,0,0,0,
        3077,3078,1,0,0,0,3078,3079,1,0,0,0,3079,3080,3,408,204,0,3080,325,
        1,0,0,0,3081,3082,3,408,204,0,3082,3083,5,7,0,0,3083,3085,1,0,0,
        0,3084,3081,1,0,0,0,3084,3085,1,0,0,0,3085,3086,1,0,0,0,3086,3087,
        3,408,204,0,3087,327,1,0,0,0,3088,3096,3,338,169,0,3089,3091,5,63,
        0,0,3090,3089,1,0,0,0,3090,3091,1,0,0,0,3091,3094,1,0,0,0,3092,3095,
        3,408,204,0,3093,3095,3,298,149,0,3094,3092,1,0,0,0,3094,3093,1,
        0,0,0,3095,3097,1,0,0,0,3096,3090,1,0,0,0,3096,3097,1,0,0,0,3097,
        329,1,0,0,0,3098,3103,3,328,164,0,3099,3100,5,1,0,0,3100,3102,3,
        328,164,0,3101,3099,1,0,0,0,3102,3105,1,0,0,0,3103,3101,1,0,0,0,
        3103,3104,1,0,0,0,3104,331,1,0,0,0,3105,3103,1,0,0,0,3106,3107,5,
        3,0,0,3107,3112,3,334,167,0,3108,3109,5,1,0,0,3109,3111,3,334,167,
        0,3110,3108,1,0,0,0,3111,3114,1,0,0,0,3112,3110,1,0,0,0,3112,3113,
        1,0,0,0,3113,3115,1,0,0,0,3114,3112,1,0,0,0,3115,3116,5,4,0,0,3116,
        333,1,0,0,0,3117,3131,3,406,203,0,3118,3119,3,412,206,0,3119,3120,
        5,3,0,0,3120,3125,3,336,168,0,3121,3122,5,1,0,0,3122,3124,3,336,
        168,0,3123,3121,1,0,0,0,3124,3127,1,0,0,0,3125,3123,1,0,0,0,3125,
        3126,1,0,0,0,3126,3128,1,0,0,0,3127,3125,1,0,0,0,3128,3129,5,4,0,
        0,3129,3131,1,0,0,0,3130,3117,1,0,0,0,3130,3118,1,0,0,0,3131,335,
        1,0,0,0,3132,3135,3,406,203,0,3133,3135,3,348,174,0,3134,3132,1,
        0,0,0,3134,3133,1,0,0,0,3135,337,1,0,0,0,3136,3137,3,340,170,0,3137,
        339,1,0,0,0,3138,3139,6,170,-1,0,3139,3140,5,194,0,0,3140,3151,3,
        340,170,5,3141,3142,5,124,0,0,3142,3143,5,3,0,0,3143,3144,3,180,
        90,0,3144,3145,5,4,0,0,3145,3151,1,0,0,0,3146,3148,3,344,172,0,3147,
        3149,3,342,171,0,3148,3147,1,0,0,0,3148,3149,1,0,0,0,3149,3151,1,
        0,0,0,3150,3138,1,0,0,0,3150,3141,1,0,0,0,3150,3146,1,0,0,0,3151,
        3160,1,0,0,0,3152,3153,10,2,0,0,3153,3154,5,58,0,0,3154,3159,3,340,
        170,3,3155,3156,10,1,0,0,3156,3157,5,202,0,0,3157,3159,3,340,170,
        2,3158,3152,1,0,0,0,3158,3155,1,0,0,0,3159,3162,1,0,0,0,3160,3158,
        1,0,0,0,3160,3161,1,0,0,0,3161,341,1,0,0,0,3162,3160,1,0,0,0,3163,
        3165,5,194,0,0,3164,3163,1,0,0,0,3164,3165,1,0,0,0,3165,3166,1,0,
        0,0,3166,3167,5,67,0,0,3167,3168,3,344,172,0,3168,3169,5,58,0,0,
        3169,3170,3,344,172,0,3170,3246,1,0,0,0,3171,3173,5,194,0,0,3172,
        3171,1,0,0,0,3172,3173,1,0,0,0,3173,3174,1,0,0,0,3174,3175,5,154,
        0,0,3175,3176,5,3,0,0,3176,3181,3,338,169,0,3177,3178,5,1,0,0,3178,
        3180,3,338,169,0,3179,3177,1,0,0,0,3180,3183,1,0,0,0,3181,3179,1,
        0,0,0,3181,3182,1,0,0,0,3182,3184,1,0,0,0,3183,3181,1,0,0,0,3184,
        3185,5,4,0,0,3185,3246,1,0,0,0,3186,3188,5,194,0,0,3187,3186,1,0,
        0,0,3187,3188,1,0,0,0,3188,3189,1,0,0,0,3189,3190,5,154,0,0,3190,
        3191,5,3,0,0,3191,3192,3,180,90,0,3192,3193,5,4,0,0,3193,3246,1,
        0,0,0,3194,3196,5,194,0,0,3195,3194,1,0,0,0,3195,3196,1,0,0,0,3196,
        3197,1,0,0,0,3197,3198,5,238,0,0,3198,3246,3,344,172,0,3199,3201,
        5,194,0,0,3200,3199,1,0,0,0,3200,3201,1,0,0,0,3201,3202,1,0,0,0,
        3202,3203,5,173,0,0,3203,3217,7,30,0,0,3204,3205,5,3,0,0,3205,3218,
        5,4,0,0,3206,3207,5,3,0,0,3207,3212,3,338,169,0,3208,3209,5,1,0,
        0,3209,3211,3,338,169,0,3210,3208,1,0,0,0,3211,3214,1,0,0,0,3212,
        3210,1,0,0,0,3212,3213,1,0,0,0,3213,3215,1,0,0,0,3214,3212,1,0,0,
        0,3215,3216,5,4,0,0,3216,3218,1,0,0,0,3217,3204,1,0,0,0,3217,3206,
        1,0,0,0,3218,3246,1,0,0,0,3219,3221,5,194,0,0,3220,3219,1,0,0,0,
        3220,3221,1,0,0,0,3221,3222,1,0,0,0,3222,3223,5,173,0,0,3223,3226,
        3,344,172,0,3224,3225,5,120,0,0,3225,3227,5,325,0,0,3226,3224,1,
        0,0,0,3226,3227,1,0,0,0,3227,3246,1,0,0,0,3228,3230,5,164,0,0,3229,
        3231,5,194,0,0,3230,3229,1,0,0,0,3230,3231,1,0,0,0,3231,3232,1,0,
        0,0,3232,3246,5,195,0,0,3233,3235,5,164,0,0,3234,3236,5,194,0,0,
        3235,3234,1,0,0,0,3235,3236,1,0,0,0,3236,3237,1,0,0,0,3237,3246,
        7,31,0,0,3238,3240,5,164,0,0,3239,3241,5,194,0,0,3240,3239,1,0,0,
        0,3240,3241,1,0,0,0,3241,3242,1,0,0,0,3242,3243,5,115,0,0,3243,3244,
        5,141,0,0,3244,3246,3,344,172,0,3245,3164,1,0,0,0,3245,3172,1,0,
        0,0,3245,3187,1,0,0,0,3245,3195,1,0,0,0,3245,3200,1,0,0,0,3245,3220,
        1,0,0,0,3245,3228,1,0,0,0,3245,3233,1,0,0,0,3245,3238,1,0,0,0,3246,
        343,1,0,0,0,3247,3248,6,172,-1,0,3248,3252,3,346,173,0,3249,3250,
        7,32,0,0,3250,3252,3,344,172,7,3251,3247,1,0,0,0,3251,3249,1,0,0,
        0,3252,3274,1,0,0,0,3253,3254,10,6,0,0,3254,3255,7,33,0,0,3255,3273,
        3,344,172,7,3256,3257,10,5,0,0,3257,3258,7,34,0,0,3258,3273,3,344,
        172,6,3259,3260,10,4,0,0,3260,3261,5,321,0,0,3261,3273,3,344,172,
        5,3262,3263,10,3,0,0,3263,3264,5,324,0,0,3264,3273,3,344,172,4,3265,
        3266,10,2,0,0,3266,3267,5,322,0,0,3267,3273,3,344,172,3,3268,3269,
        10,1,0,0,3269,3270,3,350,175,0,3270,3271,3,344,172,2,3271,3273,1,
        0,0,0,3272,3253,1,0,0,0,3272,3256,1,0,0,0,3272,3259,1,0,0,0,3272,
        3262,1,0,0,0,3272,3265,1,0,0,0,3272,3268,1,0,0,0,3273,3276,1,0,0,
        0,3274,3272,1,0,0,0,3274,3275,1,0,0,0,3275,345,1,0,0,0,3276,3274,
        1,0,0,0,3277,3278,6,173,-1,0,3278,3462,7,35,0,0,3279,3281,5,74,0,
        0,3280,3282,3,390,195,0,3281,3280,1,0,0,0,3282,3283,1,0,0,0,3283,
        3281,1,0,0,0,3283,3284,1,0,0,0,3284,3287,1,0,0,0,3285,3286,5,118,
        0,0,3286,3288,3,338,169,0,3287,3285,1,0,0,0,3287,3288,1,0,0,0,3288,
        3289,1,0,0,0,3289,3290,5,119,0,0,3290,3462,1,0,0,0,3291,3292,5,74,
        0,0,3292,3294,3,338,169,0,3293,3295,3,390,195,0,3294,3293,1,0,0,
        0,3295,3296,1,0,0,0,3296,3294,1,0,0,0,3296,3297,1,0,0,0,3297,3300,
        1,0,0,0,3298,3299,5,118,0,0,3299,3301,3,338,169,0,3300,3298,1,0,
        0,0,3300,3301,1,0,0,0,3301,3302,1,0,0,0,3302,3303,5,119,0,0,3303,
        3462,1,0,0,0,3304,3305,5,75,0,0,3305,3306,5,3,0,0,3306,3307,3,338,
        169,0,3307,3308,5,63,0,0,3308,3309,3,376,188,0,3309,3310,5,4,0,0,
        3310,3462,1,0,0,0,3311,3312,5,265,0,0,3312,3321,5,3,0,0,3313,3318,
        3,328,164,0,3314,3315,5,1,0,0,3315,3317,3,328,164,0,3316,3314,1,
        0,0,0,3317,3320,1,0,0,0,3318,3316,1,0,0,0,3318,3319,1,0,0,0,3319,
        3322,1,0,0,0,3320,3318,1,0,0,0,3321,3313,1,0,0,0,3321,3322,1,0,0,
        0,3322,3323,1,0,0,0,3323,3462,5,4,0,0,3324,3325,5,135,0,0,3325,3326,
        5,3,0,0,3326,3329,3,338,169,0,3327,3328,5,152,0,0,3328,3330,5,196,
        0,0,3329,3327,1,0,0,0,3329,3330,1,0,0,0,3330,3331,1,0,0,0,3331,3332,
        5,4,0,0,3332,3462,1,0,0,0,3333,3334,5,168,0,0,3334,3335,5,3,0,0,
        3335,3338,3,338,169,0,3336,3337,5,152,0,0,3337,3339,5,196,0,0,3338,
        3336,1,0,0,0,3338,3339,1,0,0,0,3339,3340,1,0,0,0,3340,3341,5,4,0,
        0,3341,3462,1,0,0,0,3342,3343,5,217,0,0,3343,3344,5,3,0,0,3344,3345,
        3,344,172,0,3345,3346,5,154,0,0,3346,3347,3,344,172,0,3347,3348,
        5,4,0,0,3348,3462,1,0,0,0,3349,3462,3,348,174,0,3350,3462,5,316,
        0,0,3351,3352,3,406,203,0,3352,3353,5,7,0,0,3353,3354,5,316,0,0,
        3354,3462,1,0,0,0,3355,3356,5,3,0,0,3356,3359,3,328,164,0,3357,3358,
        5,1,0,0,3358,3360,3,328,164,0,3359,3357,1,0,0,0,3360,3361,1,0,0,
        0,3361,3359,1,0,0,0,3361,3362,1,0,0,0,3362,3363,1,0,0,0,3363,3364,
        5,4,0,0,3364,3462,1,0,0,0,3365,3366,5,3,0,0,3366,3367,3,180,90,0,
        3367,3368,5,4,0,0,3368,3462,1,0,0,0,3369,3370,3,404,202,0,3370,3382,
        5,3,0,0,3371,3373,3,284,142,0,3372,3371,1,0,0,0,3372,3373,1,0,0,
        0,3373,3374,1,0,0,0,3374,3379,3,338,169,0,3375,3376,5,1,0,0,3376,
        3378,3,338,169,0,3377,3375,1,0,0,0,3378,3381,1,0,0,0,3379,3377,1,
        0,0,0,3379,3380,1,0,0,0,3380,3383,1,0,0,0,3381,3379,1,0,0,0,3382,
        3372,1,0,0,0,3382,3383,1,0,0,0,3383,3384,1,0,0,0,3384,3391,5,4,0,
        0,3385,3386,5,133,0,0,3386,3387,5,3,0,0,3387,3388,5,301,0,0,3388,
        3389,3,340,170,0,3389,3390,5,4,0,0,3390,3392,1,0,0,0,3391,3385,1,
        0,0,0,3391,3392,1,0,0,0,3392,3395,1,0,0,0,3393,3394,5,207,0,0,3394,
        3396,3,396,198,0,3395,3393,1,0,0,0,3395,3396,1,0,0,0,3396,3462,1,
        0,0,0,3397,3398,3,412,206,0,3398,3399,5,16,0,0,3399,3400,3,338,169,
        0,3400,3462,1,0,0,0,3401,3402,5,3,0,0,3402,3405,3,412,206,0,3403,
        3404,5,1,0,0,3404,3406,3,412,206,0,3405,3403,1,0,0,0,3406,3407,1,
        0,0,0,3407,3405,1,0,0,0,3407,3408,1,0,0,0,3408,3409,1,0,0,0,3409,
        3410,5,4,0,0,3410,3411,5,16,0,0,3411,3412,3,338,169,0,3412,3462,
        1,0,0,0,3413,3462,3,412,206,0,3414,3415,5,3,0,0,3415,3416,3,338,
        169,0,3416,3417,5,4,0,0,3417,3462,1,0,0,0,3418,3419,5,129,0,0,3419,
        3420,5,3,0,0,3420,3421,3,412,206,0,3421,3422,5,141,0,0,3422,3423,
        3,344,172,0,3423,3424,5,4,0,0,3424,3462,1,0,0,0,3425,3426,7,36,0,
        0,3426,3427,5,3,0,0,3427,3428,3,344,172,0,3428,3429,7,37,0,0,3429,
        3432,3,344,172,0,3430,3431,7,38,0,0,3431,3433,3,344,172,0,3432,3430,
        1,0,0,0,3432,3433,1,0,0,0,3433,3434,1,0,0,0,3434,3435,5,4,0,0,3435,
        3462,1,0,0,0,3436,3437,5,281,0,0,3437,3439,5,3,0,0,3438,3440,7,39,
        0,0,3439,3438,1,0,0,0,3439,3440,1,0,0,0,3440,3442,1,0,0,0,3441,3443,
        3,344,172,0,3442,3441,1,0,0,0,3442,3443,1,0,0,0,3443,3444,1,0,0,
        0,3444,3445,5,141,0,0,3445,3446,3,344,172,0,3446,3447,5,4,0,0,3447,
        3462,1,0,0,0,3448,3449,5,209,0,0,3449,3450,5,3,0,0,3450,3451,3,344,
        172,0,3451,3452,5,216,0,0,3452,3453,3,344,172,0,3453,3454,5,141,
        0,0,3454,3457,3,344,172,0,3455,3456,5,137,0,0,3456,3458,3,344,172,
        0,3457,3455,1,0,0,0,3457,3458,1,0,0,0,3458,3459,1,0,0,0,3459,3460,
        5,4,0,0,3460,3462,1,0,0,0,3461,3277,1,0,0,0,3461,3279,1,0,0,0,3461,
        3291,1,0,0,0,3461,3304,1,0,0,0,3461,3311,1,0,0,0,3461,3324,1,0,0,
        0,3461,3333,1,0,0,0,3461,3342,1,0,0,0,3461,3349,1,0,0,0,3461,3350,
        1,0,0,0,3461,3351,1,0,0,0,3461,3355,1,0,0,0,3461,3365,1,0,0,0,3461,
        3369,1,0,0,0,3461,3397,1,0,0,0,3461,3401,1,0,0,0,3461,3413,1,0,0,
        0,3461,3414,1,0,0,0,3461,3418,1,0,0,0,3461,3425,1,0,0,0,3461,3436,
        1,0,0,0,3461,3448,1,0,0,0,3462,3473,1,0,0,0,3463,3464,10,8,0,0,3464,
        3465,5,5,0,0,3465,3466,3,344,172,0,3466,3467,5,6,0,0,3467,3472,1,
        0,0,0,3468,3469,10,6,0,0,3469,3470,5,7,0,0,3470,3472,3,412,206,0,
        3471,3463,1,0,0,0,3471,3468,1,0,0,0,3472,3475,1,0,0,0,3473,3471,
        1,0,0,0,3473,3474,1,0,0,0,3474,347,1,0,0,0,3475,3473,1,0,0,0,3476,
        3489,5,195,0,0,3477,3489,3,360,180,0,3478,3479,3,412,206,0,3479,
        3480,5,325,0,0,3480,3489,1,0,0,0,3481,3489,3,418,209,0,3482,3489,
        3,358,179,0,3483,3485,5,325,0,0,3484,3483,1,0,0,0,3485,3486,1,0,
        0,0,3486,3484,1,0,0,0,3486,3487,1,0,0,0,3487,3489,1,0,0,0,3488,3476,
        1,0,0,0,3488,3477,1,0,0,0,3488,3478,1,0,0,0,3488,3481,1,0,0,0,3488,
        3482,1,0,0,0,3488,3484,1,0,0,0,3489,349,1,0,0,0,3490,3499,3,352,
        176,0,3491,3499,5,308,0,0,3492,3499,5,309,0,0,3493,3499,5,310,0,
        0,3494,3499,5,311,0,0,3495,3499,5,312,0,0,3496,3499,5,313,0,0,3497,
        3499,5,307,0,0,3498,3490,1,0,0,0,3498,3491,1,0,0,0,3498,3492,1,0,
        0,0,3498,3493,1,0,0,0,3498,3494,1,0,0,0,3498,3495,1,0,0,0,3498,3496,
        1,0,0,0,3498,3497,1,0,0,0,3499,351,1,0,0,0,3500,3501,7,40,0,0,3501,
        353,1,0,0,0,3502,3503,7,41,0,0,3503,355,1,0,0,0,3504,3505,7,42,0,
        0,3505,357,1,0,0,0,3506,3507,7,43,0,0,3507,359,1,0,0,0,3508,3511,
        5,162,0,0,3509,3512,3,362,181,0,3510,3512,3,366,183,0,3511,3509,
        1,0,0,0,3511,3510,1,0,0,0,3511,3512,1,0,0,0,3512,361,1,0,0,0,3513,
        3515,3,364,182,0,3514,3516,3,368,184,0,3515,3514,1,0,0,0,3515,3516,
        1,0,0,0,3516,363,1,0,0,0,3517,3518,3,370,185,0,3518,3519,3,372,186,
        0,3519,3521,1,0,0,0,3520,3517,1,0,0,0,3521,3522,1,0,0,0,3522,3520,
        1,0,0,0,3522,3523,1,0,0,0,3523,365,1,0,0,0,3524,3527,3,368,184,0,
        3525,3528,3,364,182,0,3526,3528,3,368,184,0,3527,3525,1,0,0,0,3527,
        3526,1,0,0,0,3527,3528,1,0,0,0,3528,367,1,0,0,0,3529,3530,3,370,
        185,0,3530,3531,3,372,186,0,3531,3532,5,275,0,0,3532,3533,3,372,
        186,0,3533,369,1,0,0,0,3534,3536,7,44,0,0,3535,3534,1,0,0,0,3535,
        3536,1,0,0,0,3536,3537,1,0,0,0,3537,3540,7,7,0,0,3538,3540,5,325,
        0,0,3539,3535,1,0,0,0,3539,3538,1,0,0,0,3540,371,1,0,0,0,3541,3549,
        5,105,0,0,3542,3549,5,150,0,0,3543,3549,5,187,0,0,3544,3549,5,188,
        0,0,3545,3549,5,246,0,0,3546,3549,5,304,0,0,3547,3549,3,412,206,
        0,3548,3541,1,0,0,0,3548,3542,1,0,0,0,3548,3543,1,0,0,0,3548,3544,
        1,0,0,0,3548,3545,1,0,0,0,3548,3546,1,0,0,0,3548,3547,1,0,0,0,3549,
        373,1,0,0,0,3550,3554,5,135,0,0,3551,3552,5,54,0,0,3552,3554,3,408,
        204,0,3553,3550,1,0,0,0,3553,3551,1,0,0,0,3554,375,1,0,0,0,3555,
        3556,5,62,0,0,3556,3557,5,310,0,0,3557,3558,3,376,188,0,3558,3559,
        5,312,0,0,3559,3590,1,0,0,0,3560,3561,5,184,0,0,3561,3562,5,310,
        0,0,3562,3563,3,376,188,0,3563,3564,5,1,0,0,3564,3565,3,376,188,
        0,3565,3566,5,312,0,0,3566,3590,1,0,0,0,3567,3574,5,265,0,0,3568,
        3570,5,310,0,0,3569,3571,3,386,193,0,3570,3569,1,0,0,0,3570,3571,
        1,0,0,0,3571,3572,1,0,0,0,3572,3575,5,312,0,0,3573,3575,5,308,0,
        0,3574,3568,1,0,0,0,3574,3573,1,0,0,0,3575,3590,1,0,0,0,3576,3587,
        3,412,206,0,3577,3578,5,3,0,0,3578,3583,5,329,0,0,3579,3580,5,1,
        0,0,3580,3582,5,329,0,0,3581,3579,1,0,0,0,3582,3585,1,0,0,0,3583,
        3581,1,0,0,0,3583,3584,1,0,0,0,3584,3586,1,0,0,0,3585,3583,1,0,0,
        0,3586,3588,5,4,0,0,3587,3577,1,0,0,0,3587,3588,1,0,0,0,3588,3590,
        1,0,0,0,3589,3555,1,0,0,0,3589,3560,1,0,0,0,3589,3567,1,0,0,0,3589,
        3576,1,0,0,0,3590,377,1,0,0,0,3591,3596,3,380,190,0,3592,3593,5,
        1,0,0,3593,3595,3,380,190,0,3594,3592,1,0,0,0,3595,3598,1,0,0,0,
        3596,3594,1,0,0,0,3596,3597,1,0,0,0,3597,379,1,0,0,0,3598,3596,1,
        0,0,0,3599,3600,3,322,161,0,3600,3603,3,376,188,0,3601,3602,5,194,
        0,0,3602,3604,5,195,0,0,3603,3601,1,0,0,0,3603,3604,1,0,0,0,3604,
        3606,1,0,0,0,3605,3607,3,178,89,0,3606,3605,1,0,0,0,3606,3607,1,
        0,0,0,3607,3609,1,0,0,0,3608,3610,3,374,187,0,3609,3608,1,0,0,0,
        3609,3610,1,0,0,0,3610,381,1,0,0,0,3611,3616,3,384,192,0,3612,3613,
        5,1,0,0,3613,3615,3,384,192,0,3614,3612,1,0,0,0,3615,3618,1,0,0,
        0,3616,3614,1,0,0,0,3616,3617,1,0,0,0,3617,383,1,0,0,0,3618,3616,
        1,0,0,0,3619,3620,3,408,204,0,3620,3623,3,376,188,0,3621,3622,5,
        194,0,0,3622,3624,5,195,0,0,3623,3621,1,0,0,0,3623,3624,1,0,0,0,
        3624,3626,1,0,0,0,3625,3627,3,178,89,0,3626,3625,1,0,0,0,3626,3627,
        1,0,0,0,3627,385,1,0,0,0,3628,3633,3,388,194,0,3629,3630,5,1,0,0,
        3630,3632,3,388,194,0,3631,3629,1,0,0,0,3632,3635,1,0,0,0,3633,3631,
        1,0,0,0,3633,3634,1,0,0,0,3634,387,1,0,0,0,3635,3633,1,0,0,0,3636,
        3637,3,412,206,0,3637,3638,5,2,0,0,3638,3641,3,376,188,0,3639,3640,
        5,194,0,0,3640,3642,5,195,0,0,3641,3639,1,0,0,0,3641,3642,1,0,0,
        0,3642,3644,1,0,0,0,3643,3645,3,178,89,0,3644,3643,1,0,0,0,3644,
        3645,1,0,0,0,3645,389,1,0,0,0,3646,3647,5,300,0,0,3647,3648,3,338,
        169,0,3648,3649,5,274,0,0,3649,3650,3,338,169,0,3650,391,1,0,0,0,
        3651,3652,5,302,0,0,3652,3657,3,394,197,0,3653,3654,5,1,0,0,3654,
        3656,3,394,197,0,3655,3653,1,0,0,0,3656,3659,1,0,0,0,3657,3655,1,
        0,0,0,3657,3658,1,0,0,0,3658,393,1,0,0,0,3659,3657,1,0,0,0,3660,
        3661,3,408,204,0,3661,3662,5,63,0,0,3662,3663,3,396,198,0,3663,395,
        1,0,0,0,3664,3711,3,408,204,0,3665,3666,5,3,0,0,3666,3667,3,408,
        204,0,3667,3668,5,4,0,0,3668,3711,1,0,0,0,3669,3704,5,3,0,0,3670,
        3671,5,79,0,0,3671,3672,5,71,0,0,3672,3677,3,338,169,0,3673,3674,
        5,1,0,0,3674,3676,3,338,169,0,3675,3673,1,0,0,0,3676,3679,1,0,0,
        0,3677,3675,1,0,0,0,3677,3678,1,0,0,0,3678,3705,1,0,0,0,3679,3677,
        1,0,0,0,3680,3681,7,45,0,0,3681,3682,5,71,0,0,3682,3687,3,338,169,
        0,3683,3684,5,1,0,0,3684,3686,3,338,169,0,3685,3683,1,0,0,0,3686,
        3689,1,0,0,0,3687,3685,1,0,0,0,3687,3688,1,0,0,0,3688,3691,1,0,0,
        0,3689,3687,1,0,0,0,3690,3680,1,0,0,0,3690,3691,1,0,0,0,3691,3702,
        1,0,0,0,3692,3693,7,46,0,0,3693,3694,5,71,0,0,3694,3699,3,234,117,
        0,3695,3696,5,1,0,0,3696,3698,3,234,117,0,3697,3695,1,0,0,0,3698,
        3701,1,0,0,0,3699,3697,1,0,0,0,3699,3700,1,0,0,0,3700,3703,1,0,0,
        0,3701,3699,1,0,0,0,3702,3692,1,0,0,0,3702,3703,1,0,0,0,3703,3705,
        1,0,0,0,3704,3670,1,0,0,0,3704,3690,1,0,0,0,3705,3707,1,0,0,0,3706,
        3708,3,398,199,0,3707,3706,1,0,0,0,3707,3708,1,0,0,0,3708,3709,1,
        0,0,0,3709,3711,5,4,0,0,3710,3664,1,0,0,0,3710,3665,1,0,0,0,3710,
        3669,1,0,0,0,3711,397,1,0,0,0,3712,3713,5,224,0,0,3713,3729,3,400,
        200,0,3714,3715,5,244,0,0,3715,3729,3,400,200,0,3716,3717,5,224,
        0,0,3717,3718,5,67,0,0,3718,3719,3,400,200,0,3719,3720,5,58,0,0,
        3720,3721,3,400,200,0,3721,3729,1,0,0,0,3722,3723,5,244,0,0,3723,
        3724,5,67,0,0,3724,3725,3,400,200,0,3725,3726,5,58,0,0,3726,3727,
        3,400,200,0,3727,3729,1,0,0,0,3728,3712,1,0,0,0,3728,3714,1,0,0,
        0,3728,3716,1,0,0,0,3728,3722,1,0,0,0,3729,399,1,0,0,0,3730,3731,
        5,286,0,0,3731,3738,7,47,0,0,3732,3733,5,97,0,0,3733,3738,5,243,
        0,0,3734,3735,3,338,169,0,3735,3736,7,47,0,0,3736,3738,1,0,0,0,3737,
        3730,1,0,0,0,3737,3732,1,0,0,0,3737,3734,1,0,0,0,3738,401,1,0,0,
        0,3739,3744,3,406,203,0,3740,3741,5,1,0,0,3741,3743,3,406,203,0,
        3742,3740,1,0,0,0,3743,3746,1,0,0,0,3744,3742,1,0,0,0,3744,3745,
        1,0,0,0,3745,403,1,0,0,0,3746,3744,1,0,0,0,3747,3752,3,406,203,0,
        3748,3752,5,133,0,0,3749,3752,5,172,0,0,3750,3752,5,237,0,0,3751,
        3747,1,0,0,0,3751,3748,1,0,0,0,3751,3749,1,0,0,0,3751,3750,1,0,0,
        0,3752,405,1,0,0,0,3753,3758,3,412,206,0,3754,3755,5,7,0,0,3755,
        3757,3,412,206,0,3756,3754,1,0,0,0,3757,3760,1,0,0,0,3758,3756,1,
        0,0,0,3758,3759,1,0,0,0,3759,407,1,0,0,0,3760,3758,1,0,0,0,3761,
        3762,3,412,206,0,3762,409,1,0,0,0,3763,3764,5,315,0,0,3764,3766,
        3,412,206,0,3765,3763,1,0,0,0,3766,3767,1,0,0,0,3767,3765,1,0,0,
        0,3767,3768,1,0,0,0,3768,411,1,0,0,0,3769,3772,3,414,207,0,3770,
        3772,3,424,212,0,3771,3769,1,0,0,0,3771,3770,1,0,0,0,3772,413,1,
        0,0,0,3773,3777,5,334,0,0,3774,3777,3,416,208,0,3775,3777,3,426,
        213,0,3776,3773,1,0,0,0,3776,3774,1,0,0,0,3776,3775,1,0,0,0,3777,
        415,1,0,0,0,3778,3779,5,335,0,0,3779,417,1,0,0,0,3780,3782,5,315,
        0,0,3781,3780,1,0,0,0,3781,3782,1,0,0,0,3782,3783,1,0,0,0,3783,3817,
        5,330,0,0,3784,3786,5,315,0,0,3785,3784,1,0,0,0,3785,3786,1,0,0,
        0,3786,3787,1,0,0,0,3787,3817,5,331,0,0,3788,3790,5,315,0,0,3789,
        3788,1,0,0,0,3789,3790,1,0,0,0,3790,3791,1,0,0,0,3791,3817,7,48,
        0,0,3792,3794,5,315,0,0,3793,3792,1,0,0,0,3793,3794,1,0,0,0,3794,
        3795,1,0,0,0,3795,3817,5,329,0,0,3796,3798,5,315,0,0,3797,3796,1,
        0,0,0,3797,3798,1,0,0,0,3798,3799,1,0,0,0,3799,3817,5,326,0,0,3800,
        3802,5,315,0,0,3801,3800,1,0,0,0,3801,3802,1,0,0,0,3802,3803,1,0,
        0,0,3803,3817,5,327,0,0,3804,3806,5,315,0,0,3805,3804,1,0,0,0,3805,
        3806,1,0,0,0,3806,3807,1,0,0,0,3807,3817,5,328,0,0,3808,3810,5,315,
        0,0,3809,3808,1,0,0,0,3809,3810,1,0,0,0,3810,3811,1,0,0,0,3811,3817,
        5,332,0,0,3812,3814,5,315,0,0,3813,3812,1,0,0,0,3813,3814,1,0,0,
        0,3814,3815,1,0,0,0,3815,3817,5,333,0,0,3816,3781,1,0,0,0,3816,3785,
        1,0,0,0,3816,3789,1,0,0,0,3816,3793,1,0,0,0,3816,3797,1,0,0,0,3816,
        3801,1,0,0,0,3816,3805,1,0,0,0,3816,3809,1,0,0,0,3816,3813,1,0,0,
        0,3817,419,1,0,0,0,3818,3819,5,284,0,0,3819,3826,3,376,188,0,3820,
        3826,3,178,89,0,3821,3826,3,374,187,0,3822,3823,7,49,0,0,3823,3824,
        5,194,0,0,3824,3826,5,195,0,0,3825,3818,1,0,0,0,3825,3820,1,0,0,
        0,3825,3821,1,0,0,0,3825,3822,1,0,0,0,3826,421,1,0,0,0,3827,3828,
        7,50,0,0,3828,423,1,0,0,0,3829,3830,7,51,0,0,3830,425,1,0,0,0,3831,
        3832,7,52,0,0,3832,427,1,0,0,0,518,431,444,447,451,454,457,473,477,
        480,485,489,492,500,503,507,510,514,521,528,535,539,548,552,559,
        563,568,572,577,581,586,590,595,599,603,610,618,622,626,630,633,
        638,645,648,652,656,659,663,665,669,672,676,679,683,687,690,695,
        699,702,706,711,716,722,731,736,739,742,745,749,752,755,758,763,
        766,769,772,774,782,786,791,793,802,810,813,821,827,832,844,848,
        853,857,864,871,881,884,890,894,897,904,906,916,923,927,931,936,
        941,944,951,959,964,973,981,987,992,1000,1005,1012,1030,1041,1050,
        1056,1063,1072,1080,1084,1090,1098,1114,1139,1144,1152,1160,1162,
        1182,1186,1192,1195,1198,1205,1210,1213,1220,1232,1241,1243,1247,
        1250,1257,1268,1270,1278,1283,1286,1292,1303,1367,1376,1380,1386,
        1390,1395,1401,1413,1421,1427,1440,1445,1461,1468,1472,1478,1493,
        1497,1503,1509,1512,1515,1521,1525,1533,1535,1544,1547,1556,1561,
        1567,1574,1577,1583,1594,1597,1601,1606,1611,1618,1621,1624,1631,
        1636,1645,1653,1659,1662,1665,1671,1675,1679,1683,1685,1693,1701,
        1707,1713,1716,1720,1723,1727,1752,1755,1759,1765,1768,1771,1777,
        1785,1790,1796,1802,1814,1817,1824,1831,1839,1842,1850,1854,1861,
        1977,1985,1993,2002,2012,2016,2019,2025,2031,2043,2055,2060,2069,
        2072,2080,2087,2089,2094,2098,2103,2108,2113,2116,2121,2125,2130,
        2132,2136,2145,2153,2162,2169,2178,2183,2186,2205,2207,2216,2223,
        2226,2233,2237,2243,2251,2262,2273,2280,2286,2299,2306,2313,2325,
        2333,2339,2342,2351,2354,2363,2366,2375,2378,2387,2390,2393,2398,
        2400,2408,2413,2419,2425,2428,2430,2438,2442,2446,2452,2456,2464,
        2468,2471,2474,2477,2481,2486,2493,2497,2500,2503,2506,2508,2511,
        2523,2526,2530,2540,2544,2546,2549,2553,2559,2563,2574,2584,2596,
        2611,2616,2623,2639,2644,2657,2662,2670,2676,2680,2689,2704,2709,
        2721,2726,2734,2737,2741,2755,2768,2773,2777,2780,2785,2794,2797,
        2802,2809,2812,2820,2827,2834,2837,2842,2845,2850,2854,2857,2860,
        2866,2871,2876,2894,2896,2899,2910,2919,2926,2934,2941,2945,2948,
        2956,2964,2970,2978,2990,2993,2999,3003,3005,3014,3026,3028,3035,
        3042,3048,3054,3056,3063,3071,3077,3084,3090,3094,3096,3103,3112,
        3125,3130,3134,3148,3150,3158,3160,3164,3172,3181,3187,3195,3200,
        3212,3217,3220,3226,3230,3235,3240,3245,3251,3272,3274,3283,3287,
        3296,3300,3318,3321,3329,3338,3361,3372,3379,3382,3391,3395,3407,
        3432,3439,3442,3457,3461,3471,3473,3486,3488,3498,3511,3515,3522,
        3527,3535,3539,3548,3553,3570,3574,3583,3587,3589,3596,3603,3606,
        3609,3616,3623,3626,3633,3641,3644,3657,3677,3687,3690,3699,3702,
        3704,3707,3710,3728,3737,3744,3751,3758,3767,3771,3776,3781,3785,
        3789,3793,3797,3801,3805,3809,3813,3816,3825
    ]

class fugue_sqlParser ( Parser ):

    grammarFileName = "fugue_sql.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "','", "':'", "'('", "')'", "'['", "']'", 
                     "'.'", "'{'", "'}'", "'true'", "'false'", "'null'", 
                     "';'", "'/*+'", "'*/'", "'->'", "'FILL'", "'TAKE'", 
                     "'HASH'", "'RAND'", "'EVEN'", "'PRESORT'", "'PERSIST'", 
                     "'BROADCAST'", "'PARAMS'", "'PROCESS'", "'OUTPUT'", 
                     "'OUTTRANSFORM'", "'ROWCOUNT'", "'CONCURRENCY'", "'PREPARTITION'", 
                     "'ZIP'", "'PRINT'", "'TITLE'", "'SAVE'", "'APPEND'", 
                     "'PARQUET'", "'CSV'", "'JSON'", "'SINGLE'", "'CHECKPOINT'", 
                     "'WEAK'", "'STRONG'", "'DETERMINISTIC'", "'YIELD'", 
                     "'CONNECT'", "'SAMPLE'", "'SEED'", "'SUB'", "'CALLBACK'", 
                     "'DATAFRAME'", "'FILE'", "'ADD'", "'AFTER'", "'ALL'", 
                     "'ALTER'", "'ANALYZE'", "'AND'", "'ANTI'", "'ANY'", 
                     "'ARCHIVE'", "'ARRAY'", "'AS'", "'ASC'", "'AT'", "'AUTHORIZATION'", 
                     "'BETWEEN'", "'BOTH'", "'BUCKET'", "'BUCKETS'", "'BY'", 
                     "'CACHE'", "'CASCADE'", "'CASE'", "<INVALID>", "'CHANGE'", 
                     "'CHECK'", "'CLEAR'", "'CLUSTER'", "'CLUSTERED'", "'CODEGEN'", 
                     "'COLLATE'", "'COLLECTION'", "'COLUMN'", "'COLUMNS'", 
                     "'COMMENT'", "'COMMIT'", "'COMPACT'", "'COMPACTIONS'", 
                     "'COMPUTE'", "'CONCATENATE'", "'CONSTRAINT'", "'COST'", 
                     "'CREATE'", "'CROSS'", "'CUBE'", "'CURRENT'", "'CURRENT_DATE'", 
                     "'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", "'CURRENT_USER'", 
                     "'DATA'", "'DATABASE'", "<INVALID>", "'DAY'", "'DBPROPERTIES'", 
                     "'DEFINED'", "'DELETE'", "'DELIMITED'", "'DESC'", "'DESCRIBE'", 
                     "'DFS'", "'DIRECTORIES'", "'DIRECTORY'", "'DISTINCT'", 
                     "'DISTRIBUTE'", "'DROP'", "'ELSE'", "'END'", "'ESCAPE'", 
                     "'ESCAPED'", "'EXCEPT'", "'EXCHANGE'", "'EXISTS'", 
                     "'EXPLAIN'", "'EXPORT'", "'EXTENDED'", "'EXTERNAL'", 
                     "'EXTRACT'", "'FALSE'", "'FETCH'", "'FIELDS'", "'FILTER'", 
                     "'FILEFORMAT'", "'FIRST'", "'FOLLOWING'", "'FOR'", 
                     "'FOREIGN'", "'FORMAT'", "'FORMATTED'", "'FROM'", "'FULL'", 
                     "'FUNCTION'", "'FUNCTIONS'", "'GLOBAL'", "'GRANT'", 
                     "'GROUP'", "'GROUPING'", "'HAVING'", "'HOUR'", "'IF'", 
                     "'IGNORE'", "'IMPORT'", "'IN'", "'INDEX'", "'INDEXES'", 
                     "'INNER'", "'INPATH'", "'INPUTFORMAT'", "'INSERT'", 
                     "'INTERSECT'", "'INTERVAL'", "'INTO'", "'IS'", "'ITEMS'", 
                     "'JOIN'", "'KEYS'", "'LAST'", "'LATERAL'", "'LAZY'", 
                     "'LEADING'", "'LEFT'", "'LIKE'", "'LIMIT'", "'LINES'", 
                     "'LIST'", "'LOAD'", "'LOCAL'", "'LOCATION'", "'LOCK'", 
                     "'LOCKS'", "'LOGICAL'", "'MACRO'", "'MAP'", "'MATCHED'", 
                     "'MERGE'", "'MINUTE'", "'MONTH'", "'MSCK'", "'NAMESPACE'", 
                     "'NAMESPACES'", "'NATURAL'", "'NO'", "<INVALID>", "'NULL'", 
                     "'NULLS'", "'OF'", "'ON'", "'ONLY'", "'OPTION'", "'OPTIONS'", 
                     "'OR'", "'ORDER'", "'OUT'", "'OUTER'", "'OUTPUTFORMAT'", 
                     "'OVER'", "'OVERLAPS'", "'OVERLAY'", "'OVERWRITE'", 
                     "'PARTITION'", "'PARTITIONED'", "'PARTITIONS'", "'PERCENT'", 
                     "'PIVOT'", "'PLACING'", "'POSITION'", "'PRECEDING'", 
                     "'PRIMARY'", "'PRINCIPALS'", "'PROPERTIES'", "'PURGE'", 
                     "'QUERY'", "'RANGE'", "'RECORDREADER'", "'RECORDWRITER'", 
                     "'RECOVER'", "'REDUCE'", "'REFERENCES'", "'REFRESH'", 
                     "'RENAME'", "'REPAIR'", "'REPLACE'", "'RESET'", "'RESTRICT'", 
                     "'REVOKE'", "'RIGHT'", "<INVALID>", "'ROLE'", "'ROLES'", 
                     "'ROLLBACK'", "'ROLLUP'", "'ROW'", "'ROWS'", "'SCHEMA'", 
                     "'SECOND'", "'SELECT'", "'SEMI'", "'SEPARATED'", "'SERDE'", 
                     "'SERDEPROPERTIES'", "'SESSION_USER'", "'SET'", "'MINUS'", 
                     "'SETS'", "'SHOW'", "'SKEWED'", "'SOME'", "'SORT'", 
                     "'SORTED'", "'START'", "'STATISTICS'", "'STORED'", 
                     "'STRATIFY'", "'STRUCT'", "'SUBSTR'", "'SUBSTRING'", 
                     "'TABLE'", "'TABLES'", "'TABLESAMPLE'", "'TBLPROPERTIES'", 
                     "<INVALID>", "'TERMINATED'", "'THEN'", "'TO'", "'TOUCH'", 
                     "'TRAILING'", "'TRANSACTION'", "'TRANSACTIONS'", "'TRANSFORM'", 
                     "'TRIM'", "'TRUE'", "'TRUNCATE'", "'TYPE'", "'UNARCHIVE'", 
                     "'UNBOUNDED'", "'UNCACHE'", "'UNION'", "'UNIQUE'", 
                     "'UNKNOWN'", "'UNLOCK'", "'UNSET'", "'UPDATE'", "'USE'", 
                     "'USER'", "'USING'", "'VALUES'", "'VIEW'", "'VIEWS'", 
                     "'WHEN'", "'WHERE'", "'WINDOW'", "'WITH'", "'YEAR'", 
                     "'='", "'=='", "'<=>'", "'<>'", "'!='", "'<'", "<INVALID>", 
                     "'>'", "<INVALID>", "'+'", "'-'", "'*'", "'/'", "'%'", 
                     "'DIV'", "'~'", "'&'", "'|'", "'||'", "'^'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "FILL", "TAKE", "HASH", "RAND", "EVEN", 
                      "PRESORT", "PERSIST", "BROADCAST", "PARAMS", "PROCESS", 
                      "OUTPUT", "OUTTRANSFORM", "ROWCOUNT", "CONCURRENCY", 
                      "PREPARTITION", "ZIP", "PRINT", "TITLE", "SAVE", "APPEND", 
                      "PARQUET", "CSV", "JSON", "SINGLE", "CHECKPOINT", 
                      "WEAK", "STRONG", "DETERMINISTIC", "YIELD", "CONNECT", 
                      "SAMPLE", "SEED", "SUB", "CALLBACK", "DATAFRAME", 
                      "FILE", "ADD", "AFTER", "ALL", "ALTER", "ANALYZE", 
                      "AND", "ANTI", "ANY", "ARCHIVE", "ARRAY", "AS", "ASC", 
                      "AT", "AUTHORIZATION", "BETWEEN", "BOTH", "BUCKET", 
                      "BUCKETS", "BY", "CACHE", "CASCADE", "CASE", "CAST", 
                      "CHANGE", "CHECK", "CLEAR", "CLUSTER", "CLUSTERED", 
                      "CODEGEN", "COLLATE", "COLLECTION", "COLUMN", "COLUMNS", 
                      "COMMENT", "COMMIT", "COMPACT", "COMPACTIONS", "COMPUTE", 
                      "CONCATENATE", "CONSTRAINT", "COST", "CREATE", "CROSS", 
                      "CUBE", "CURRENT", "CURRENT_DATE", "CURRENT_TIME", 
                      "CURRENT_TIMESTAMP", "CURRENT_USER", "DATA", "DATABASE", 
                      "DATABASES", "DAY", "DBPROPERTIES", "DEFINED", "DELETE", 
                      "DELIMITED", "DESC", "DESCRIBE", "DFS", "DIRECTORIES", 
                      "DIRECTORY", "DISTINCT", "DISTRIBUTE", "DROP", "ELSE", 
                      "END", "ESCAPE", "ESCAPED", "EXCEPT", "EXCHANGE", 
                      "EXISTS", "EXPLAIN", "EXPORT", "EXTENDED", "EXTERNAL", 
                      "EXTRACT", "FALSE", "FETCH", "FIELDS", "FILTER", "FILEFORMAT", 
                      "FIRST", "FOLLOWING", "FOR", "FOREIGN", "FORMAT", 
                      "FORMATTED", "FROM", "FULL", "FUNCTION", "FUNCTIONS", 
                      "GLOBAL", "GRANT", "GROUP", "GROUPING", "HAVING", 
                      "HOUR", "IF", "IGNORE", "IMPORT", "IN", "INDEX", "INDEXES", 
                      "INNER", "INPATH", "INPUTFORMAT", "INSERT", "INTERSECT", 
                      "INTERVAL", "INTO", "IS", "ITEMS", "JOIN", "KEYS", 
                      "LAST", "LATERAL", "LAZY", "LEADING", "LEFT", "LIKE", 
                      "LIMIT", "LINES", "LIST", "LOAD", "LOCAL", "LOCATION", 
                      "LOCK", "LOCKS", "LOGICAL", "MACRO", "MAP", "MATCHED", 
                      "MERGE", "MINUTE", "MONTH", "MSCK", "NAMESPACE", "NAMESPACES", 
                      "NATURAL", "NO", "NOT", "THENULL", "THENULLS", "OF", 
                      "ON", "ONLY", "OPTION", "OPTIONS", "OR", "ORDER", 
                      "OUT", "OUTER", "OUTPUTFORMAT", "OVER", "OVERLAPS", 
                      "OVERLAY", "OVERWRITE", "PARTITION", "PARTITIONED", 
                      "PARTITIONS", "PERCENTLIT", "PIVOT", "PLACING", "POSITION", 
                      "PRECEDING", "PRIMARY", "PRINCIPALS", "PROPERTIES", 
                      "PURGE", "QUERY", "RANGE", "RECORDREADER", "RECORDWRITER", 
                      "RECOVER", "REDUCE", "REFERENCES", "REFRESH", "RENAME", 
                      "REPAIR", "REPLACE", "RESET", "RESTRICT", "REVOKE", 
                      "RIGHT", "RLIKE", "ROLE", "ROLES", "ROLLBACK", "ROLLUP", 
                      "ROW", "ROWS", "SCHEMA", "SECOND", "SELECT", "SEMI", 
                      "SEPARATED", "SERDE", "SERDEPROPERTIES", "SESSION_USER", 
                      "SET", "SETMINUS", "SETS", "SHOW", "SKEWED", "SOME", 
                      "SORT", "SORTED", "START", "STATISTICS", "STORED", 
                      "STRATIFY", "STRUCT", "SUBSTR", "SUBSTRING", "TABLE", 
                      "TABLES", "TABLESAMPLE", "TBLPROPERTIES", "TEMPORARY", 
                      "TERMINATED", "THEN", "TO", "TOUCH", "TRAILING", "TRANSACTION", 
                      "TRANSACTIONS", "TRANSFORM", "TRIM", "TRUE", "TRUNCATE", 
                      "TYPE", "UNARCHIVE", "UNBOUNDED", "UNCACHE", "UNION", 
                      "UNIQUE", "UNKNOWN", "UNLOCK", "UNSET", "UPDATE", 
                      "USE", "USER", "USING", "VALUES", "VIEW", "VIEWS", 
                      "WHEN", "WHERE", "WINDOW", "WITH", "YEAR", "EQUAL", 
                      "DOUBLEEQUAL", "NSEQ", "NEQ", "NEQJ", "LT", "LTE", 
                      "GT", "GTE", "PLUS", "MINUS", "ASTERISK", "SLASH", 
                      "PERCENT", "DIV", "TILDE", "AMPERSAND", "PIPE", "CONCAT_PIPE", 
                      "HAT", "STRING", "BIGINT_LITERAL", "SMALLINT_LITERAL", 
                      "TINYINT_LITERAL", "INTEGER_VALUE", "EXPONENT_VALUE", 
                      "DECIMAL_VALUE", "DOUBLE_LITERAL", "BIGDECIMAL_LITERAL", 
                      "IDENTIFIER", "BACKQUOTED_IDENTIFIER", "SIMPLE_COMMENT", 
                      "BRACKETED_COMMENT", "WS", "UNRECOGNIZED" ]

    RULE_fugueLanguage = 0
    RULE_fugueSingleStatement = 1
    RULE_fugueSingleTask = 2
    RULE_fugueNestableTask = 3
    RULE_fugueNestableTaskCollectionNoSelect = 4
    RULE_fugueTransformTask = 5
    RULE_fugueProcessTask = 6
    RULE_fugueSaveAndUseTask = 7
    RULE_fugueRenameColumnsTask = 8
    RULE_fugueAlterColumnsTask = 9
    RULE_fugueDropColumnsTask = 10
    RULE_fugueDropnaTask = 11
    RULE_fugueFillnaTask = 12
    RULE_fugueSampleTask = 13
    RULE_fugueTakeTask = 14
    RULE_fugueZipTask = 15
    RULE_fugueCreateTask = 16
    RULE_fugueCreateDataTask = 17
    RULE_fugueLoadTask = 18
    RULE_fugueOutputTask = 19
    RULE_fuguePrintTask = 20
    RULE_fugueSaveTask = 21
    RULE_fugueOutputTransformTask = 22
    RULE_fugueModuleTask = 23
    RULE_fugueSqlEngine = 24
    RULE_fugueSingleFile = 25
    RULE_fugueLoadColumns = 26
    RULE_fugueSaveMode = 27
    RULE_fugueFileFormat = 28
    RULE_fuguePath = 29
    RULE_fugueCheckpoint = 30
    RULE_fugueCheckpointNamespace = 31
    RULE_fugueYield = 32
    RULE_fugueBroadcast = 33
    RULE_fugueDataFrames = 34
    RULE_fugueDataFramePair = 35
    RULE_fugueDataFrame = 36
    RULE_fugueDataFrameMember = 37
    RULE_fugueAssignment = 38
    RULE_fugueAssignmentSign = 39
    RULE_fugueSingleOutputExtensionCommonWild = 40
    RULE_fugueSingleOutputExtensionCommon = 41
    RULE_fugueExtension = 42
    RULE_fugueSampleMethod = 43
    RULE_fugueZipType = 44
    RULE_fuguePrepartition = 45
    RULE_fuguePartitionAlgo = 46
    RULE_fuguePartitionNum = 47
    RULE_fuguePartitionNumber = 48
    RULE_fugueParams = 49
    RULE_fugueCols = 50
    RULE_fugueColsSort = 51
    RULE_fugueColSort = 52
    RULE_fugueColumnIdentifier = 53
    RULE_fugueRenameExpression = 54
    RULE_fugueWildSchema = 55
    RULE_fugueWildSchemaPair = 56
    RULE_fugueSchemaOp = 57
    RULE_fugueSchema = 58
    RULE_fugueSchemaPair = 59
    RULE_fugueSchemaKey = 60
    RULE_fugueSchemaType = 61
    RULE_fugueRenamePair = 62
    RULE_fugueJson = 63
    RULE_fugueJsonObj = 64
    RULE_fugueJsonPairs = 65
    RULE_fugueJsonPair = 66
    RULE_fugueJsonKey = 67
    RULE_fugueJsonArray = 68
    RULE_fugueJsonValue = 69
    RULE_fugueJsonNumber = 70
    RULE_fugueJsonString = 71
    RULE_fugueJsonBool = 72
    RULE_fugueJsonNull = 73
    RULE_fugueIdentifier = 74
    RULE_singleStatement = 75
    RULE_singleExpression = 76
    RULE_singleTableIdentifier = 77
    RULE_singleMultipartIdentifier = 78
    RULE_singleFunctionIdentifier = 79
    RULE_singleDataType = 80
    RULE_singleTableSchema = 81
    RULE_statement = 82
    RULE_unsupportedHiveNativeCommands = 83
    RULE_createTableHeader = 84
    RULE_replaceTableHeader = 85
    RULE_bucketSpec = 86
    RULE_skewSpec = 87
    RULE_locationSpec = 88
    RULE_commentSpec = 89
    RULE_query = 90
    RULE_insertInto = 91
    RULE_partitionSpecLocation = 92
    RULE_partitionSpec = 93
    RULE_partitionVal = 94
    RULE_theNamespace = 95
    RULE_describeFuncName = 96
    RULE_describeColName = 97
    RULE_ctes = 98
    RULE_namedQuery = 99
    RULE_tableProvider = 100
    RULE_createTableClauses = 101
    RULE_tablePropertyList = 102
    RULE_tableProperty = 103
    RULE_tablePropertyKey = 104
    RULE_tablePropertyValue = 105
    RULE_constantList = 106
    RULE_nestedConstantList = 107
    RULE_createFileFormat = 108
    RULE_fileFormat = 109
    RULE_storageHandler = 110
    RULE_resource = 111
    RULE_dmlStatementNoWith = 112
    RULE_queryOrganization = 113
    RULE_multiInsertQueryBody = 114
    RULE_queryTerm = 115
    RULE_queryPrimary = 116
    RULE_sortItem = 117
    RULE_fromStatement = 118
    RULE_fromStatementBody = 119
    RULE_querySpecification = 120
    RULE_optionalFromClause = 121
    RULE_transformClause = 122
    RULE_selectClause = 123
    RULE_setClause = 124
    RULE_matchedClause = 125
    RULE_notMatchedClause = 126
    RULE_matchedAction = 127
    RULE_notMatchedAction = 128
    RULE_assignmentList = 129
    RULE_assignment = 130
    RULE_whereClause = 131
    RULE_havingClause = 132
    RULE_hint = 133
    RULE_hintStatement = 134
    RULE_fromClause = 135
    RULE_aggregationClause = 136
    RULE_groupingSet = 137
    RULE_pivotClause = 138
    RULE_pivotColumn = 139
    RULE_pivotValue = 140
    RULE_lateralView = 141
    RULE_setQuantifier = 142
    RULE_relation = 143
    RULE_joinRelation = 144
    RULE_joinType = 145
    RULE_joinCriteria = 146
    RULE_sample = 147
    RULE_sampleMethod = 148
    RULE_identifierList = 149
    RULE_identifierSeq = 150
    RULE_orderedIdentifierList = 151
    RULE_orderedIdentifier = 152
    RULE_identifierCommentList = 153
    RULE_identifierComment = 154
    RULE_relationPrimary = 155
    RULE_inlineTable = 156
    RULE_functionTable = 157
    RULE_tableAlias = 158
    RULE_rowFormat = 159
    RULE_multipartIdentifierList = 160
    RULE_multipartIdentifier = 161
    RULE_tableIdentifier = 162
    RULE_functionIdentifier = 163
    RULE_namedExpression = 164
    RULE_namedExpressionSeq = 165
    RULE_transformList = 166
    RULE_transform = 167
    RULE_transformArgument = 168
    RULE_expression = 169
    RULE_booleanExpression = 170
    RULE_predicate = 171
    RULE_valueExpression = 172
    RULE_primaryExpression = 173
    RULE_constant = 174
    RULE_comparisonOperator = 175
    RULE_comparisonEqualOperator = 176
    RULE_arithmeticOperator = 177
    RULE_predicateOperator = 178
    RULE_booleanValue = 179
    RULE_interval = 180
    RULE_errorCapturingMultiUnitsInterval = 181
    RULE_multiUnitsInterval = 182
    RULE_errorCapturingUnitToUnitInterval = 183
    RULE_unitToUnitInterval = 184
    RULE_intervalValue = 185
    RULE_intervalUnit = 186
    RULE_colPosition = 187
    RULE_dataType = 188
    RULE_qualifiedColTypeWithPositionList = 189
    RULE_qualifiedColTypeWithPosition = 190
    RULE_colTypeList = 191
    RULE_colType = 192
    RULE_complexColTypeList = 193
    RULE_complexColType = 194
    RULE_whenClause = 195
    RULE_windowClause = 196
    RULE_namedWindow = 197
    RULE_windowSpec = 198
    RULE_windowFrame = 199
    RULE_frameBound = 200
    RULE_qualifiedNameList = 201
    RULE_functionName = 202
    RULE_qualifiedName = 203
    RULE_errorCapturingIdentifier = 204
    RULE_errorCapturingIdentifierExtra = 205
    RULE_identifier = 206
    RULE_strictIdentifier = 207
    RULE_quotedIdentifier = 208
    RULE_number = 209
    RULE_alterColumnAction = 210
    RULE_ansiNonReserved = 211
    RULE_strictNonReserved = 212
    RULE_nonReserved = 213

    ruleNames =  [ "fugueLanguage", "fugueSingleStatement", "fugueSingleTask", 
                   "fugueNestableTask", "fugueNestableTaskCollectionNoSelect", 
                   "fugueTransformTask", "fugueProcessTask", "fugueSaveAndUseTask", 
                   "fugueRenameColumnsTask", "fugueAlterColumnsTask", "fugueDropColumnsTask", 
                   "fugueDropnaTask", "fugueFillnaTask", "fugueSampleTask", 
                   "fugueTakeTask", "fugueZipTask", "fugueCreateTask", "fugueCreateDataTask", 
                   "fugueLoadTask", "fugueOutputTask", "fuguePrintTask", 
                   "fugueSaveTask", "fugueOutputTransformTask", "fugueModuleTask", 
                   "fugueSqlEngine", "fugueSingleFile", "fugueLoadColumns", 
                   "fugueSaveMode", "fugueFileFormat", "fuguePath", "fugueCheckpoint", 
                   "fugueCheckpointNamespace", "fugueYield", "fugueBroadcast", 
                   "fugueDataFrames", "fugueDataFramePair", "fugueDataFrame", 
                   "fugueDataFrameMember", "fugueAssignment", "fugueAssignmentSign", 
                   "fugueSingleOutputExtensionCommonWild", "fugueSingleOutputExtensionCommon", 
                   "fugueExtension", "fugueSampleMethod", "fugueZipType", 
                   "fuguePrepartition", "fuguePartitionAlgo", "fuguePartitionNum", 
                   "fuguePartitionNumber", "fugueParams", "fugueCols", "fugueColsSort", 
                   "fugueColSort", "fugueColumnIdentifier", "fugueRenameExpression", 
                   "fugueWildSchema", "fugueWildSchemaPair", "fugueSchemaOp", 
                   "fugueSchema", "fugueSchemaPair", "fugueSchemaKey", "fugueSchemaType", 
                   "fugueRenamePair", "fugueJson", "fugueJsonObj", "fugueJsonPairs", 
                   "fugueJsonPair", "fugueJsonKey", "fugueJsonArray", "fugueJsonValue", 
                   "fugueJsonNumber", "fugueJsonString", "fugueJsonBool", 
                   "fugueJsonNull", "fugueIdentifier", "singleStatement", 
                   "singleExpression", "singleTableIdentifier", "singleMultipartIdentifier", 
                   "singleFunctionIdentifier", "singleDataType", "singleTableSchema", 
                   "statement", "unsupportedHiveNativeCommands", "createTableHeader", 
                   "replaceTableHeader", "bucketSpec", "skewSpec", "locationSpec", 
                   "commentSpec", "query", "insertInto", "partitionSpecLocation", 
                   "partitionSpec", "partitionVal", "theNamespace", "describeFuncName", 
                   "describeColName", "ctes", "namedQuery", "tableProvider", 
                   "createTableClauses", "tablePropertyList", "tableProperty", 
                   "tablePropertyKey", "tablePropertyValue", "constantList", 
                   "nestedConstantList", "createFileFormat", "fileFormat", 
                   "storageHandler", "resource", "dmlStatementNoWith", "queryOrganization", 
                   "multiInsertQueryBody", "queryTerm", "queryPrimary", 
                   "sortItem", "fromStatement", "fromStatementBody", "querySpecification", 
                   "optionalFromClause", "transformClause", "selectClause", 
                   "setClause", "matchedClause", "notMatchedClause", "matchedAction", 
                   "notMatchedAction", "assignmentList", "assignment", "whereClause", 
                   "havingClause", "hint", "hintStatement", "fromClause", 
                   "aggregationClause", "groupingSet", "pivotClause", "pivotColumn", 
                   "pivotValue", "lateralView", "setQuantifier", "relation", 
                   "joinRelation", "joinType", "joinCriteria", "sample", 
                   "sampleMethod", "identifierList", "identifierSeq", "orderedIdentifierList", 
                   "orderedIdentifier", "identifierCommentList", "identifierComment", 
                   "relationPrimary", "inlineTable", "functionTable", "tableAlias", 
                   "rowFormat", "multipartIdentifierList", "multipartIdentifier", 
                   "tableIdentifier", "functionIdentifier", "namedExpression", 
                   "namedExpressionSeq", "transformList", "transform", "transformArgument", 
                   "expression", "booleanExpression", "predicate", "valueExpression", 
                   "primaryExpression", "constant", "comparisonOperator", 
                   "comparisonEqualOperator", "arithmeticOperator", "predicateOperator", 
                   "booleanValue", "interval", "errorCapturingMultiUnitsInterval", 
                   "multiUnitsInterval", "errorCapturingUnitToUnitInterval", 
                   "unitToUnitInterval", "intervalValue", "intervalUnit", 
                   "colPosition", "dataType", "qualifiedColTypeWithPositionList", 
                   "qualifiedColTypeWithPosition", "colTypeList", "colType", 
                   "complexColTypeList", "complexColType", "whenClause", 
                   "windowClause", "namedWindow", "windowSpec", "windowFrame", 
                   "frameBound", "qualifiedNameList", "functionName", "qualifiedName", 
                   "errorCapturingIdentifier", "errorCapturingIdentifierExtra", 
                   "identifier", "strictIdentifier", "quotedIdentifier", 
                   "number", "alterColumnAction", "ansiNonReserved", "strictNonReserved", 
                   "nonReserved" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    FILL=17
    TAKE=18
    HASH=19
    RAND=20
    EVEN=21
    PRESORT=22
    PERSIST=23
    BROADCAST=24
    PARAMS=25
    PROCESS=26
    OUTPUT=27
    OUTTRANSFORM=28
    ROWCOUNT=29
    CONCURRENCY=30
    PREPARTITION=31
    ZIP=32
    PRINT=33
    TITLE=34
    SAVE=35
    APPEND=36
    PARQUET=37
    CSV=38
    JSON=39
    SINGLE=40
    CHECKPOINT=41
    WEAK=42
    STRONG=43
    DETERMINISTIC=44
    YIELD=45
    CONNECT=46
    SAMPLE=47
    SEED=48
    SUB=49
    CALLBACK=50
    DATAFRAME=51
    FILE=52
    ADD=53
    AFTER=54
    ALL=55
    ALTER=56
    ANALYZE=57
    AND=58
    ANTI=59
    ANY=60
    ARCHIVE=61
    ARRAY=62
    AS=63
    ASC=64
    AT=65
    AUTHORIZATION=66
    BETWEEN=67
    BOTH=68
    BUCKET=69
    BUCKETS=70
    BY=71
    CACHE=72
    CASCADE=73
    CASE=74
    CAST=75
    CHANGE=76
    CHECK=77
    CLEAR=78
    CLUSTER=79
    CLUSTERED=80
    CODEGEN=81
    COLLATE=82
    COLLECTION=83
    COLUMN=84
    COLUMNS=85
    COMMENT=86
    COMMIT=87
    COMPACT=88
    COMPACTIONS=89
    COMPUTE=90
    CONCATENATE=91
    CONSTRAINT=92
    COST=93
    CREATE=94
    CROSS=95
    CUBE=96
    CURRENT=97
    CURRENT_DATE=98
    CURRENT_TIME=99
    CURRENT_TIMESTAMP=100
    CURRENT_USER=101
    DATA=102
    DATABASE=103
    DATABASES=104
    DAY=105
    DBPROPERTIES=106
    DEFINED=107
    DELETE=108
    DELIMITED=109
    DESC=110
    DESCRIBE=111
    DFS=112
    DIRECTORIES=113
    DIRECTORY=114
    DISTINCT=115
    DISTRIBUTE=116
    DROP=117
    ELSE=118
    END=119
    ESCAPE=120
    ESCAPED=121
    EXCEPT=122
    EXCHANGE=123
    EXISTS=124
    EXPLAIN=125
    EXPORT=126
    EXTENDED=127
    EXTERNAL=128
    EXTRACT=129
    FALSE=130
    FETCH=131
    FIELDS=132
    FILTER=133
    FILEFORMAT=134
    FIRST=135
    FOLLOWING=136
    FOR=137
    FOREIGN=138
    FORMAT=139
    FORMATTED=140
    FROM=141
    FULL=142
    FUNCTION=143
    FUNCTIONS=144
    GLOBAL=145
    GRANT=146
    GROUP=147
    GROUPING=148
    HAVING=149
    HOUR=150
    IF=151
    IGNORE=152
    IMPORT=153
    IN=154
    INDEX=155
    INDEXES=156
    INNER=157
    INPATH=158
    INPUTFORMAT=159
    INSERT=160
    INTERSECT=161
    INTERVAL=162
    INTO=163
    IS=164
    ITEMS=165
    JOIN=166
    KEYS=167
    LAST=168
    LATERAL=169
    LAZY=170
    LEADING=171
    LEFT=172
    LIKE=173
    LIMIT=174
    LINES=175
    LIST=176
    LOAD=177
    LOCAL=178
    LOCATION=179
    LOCK=180
    LOCKS=181
    LOGICAL=182
    MACRO=183
    MAP=184
    MATCHED=185
    MERGE=186
    MINUTE=187
    MONTH=188
    MSCK=189
    NAMESPACE=190
    NAMESPACES=191
    NATURAL=192
    NO=193
    NOT=194
    THENULL=195
    THENULLS=196
    OF=197
    ON=198
    ONLY=199
    OPTION=200
    OPTIONS=201
    OR=202
    ORDER=203
    OUT=204
    OUTER=205
    OUTPUTFORMAT=206
    OVER=207
    OVERLAPS=208
    OVERLAY=209
    OVERWRITE=210
    PARTITION=211
    PARTITIONED=212
    PARTITIONS=213
    PERCENTLIT=214
    PIVOT=215
    PLACING=216
    POSITION=217
    PRECEDING=218
    PRIMARY=219
    PRINCIPALS=220
    PROPERTIES=221
    PURGE=222
    QUERY=223
    RANGE=224
    RECORDREADER=225
    RECORDWRITER=226
    RECOVER=227
    REDUCE=228
    REFERENCES=229
    REFRESH=230
    RENAME=231
    REPAIR=232
    REPLACE=233
    RESET=234
    RESTRICT=235
    REVOKE=236
    RIGHT=237
    RLIKE=238
    ROLE=239
    ROLES=240
    ROLLBACK=241
    ROLLUP=242
    ROW=243
    ROWS=244
    SCHEMA=245
    SECOND=246
    SELECT=247
    SEMI=248
    SEPARATED=249
    SERDE=250
    SERDEPROPERTIES=251
    SESSION_USER=252
    SET=253
    SETMINUS=254
    SETS=255
    SHOW=256
    SKEWED=257
    SOME=258
    SORT=259
    SORTED=260
    START=261
    STATISTICS=262
    STORED=263
    STRATIFY=264
    STRUCT=265
    SUBSTR=266
    SUBSTRING=267
    TABLE=268
    TABLES=269
    TABLESAMPLE=270
    TBLPROPERTIES=271
    TEMPORARY=272
    TERMINATED=273
    THEN=274
    TO=275
    TOUCH=276
    TRAILING=277
    TRANSACTION=278
    TRANSACTIONS=279
    TRANSFORM=280
    TRIM=281
    TRUE=282
    TRUNCATE=283
    TYPE=284
    UNARCHIVE=285
    UNBOUNDED=286
    UNCACHE=287
    UNION=288
    UNIQUE=289
    UNKNOWN=290
    UNLOCK=291
    UNSET=292
    UPDATE=293
    USE=294
    USER=295
    USING=296
    VALUES=297
    VIEW=298
    VIEWS=299
    WHEN=300
    WHERE=301
    WINDOW=302
    WITH=303
    YEAR=304
    EQUAL=305
    DOUBLEEQUAL=306
    NSEQ=307
    NEQ=308
    NEQJ=309
    LT=310
    LTE=311
    GT=312
    GTE=313
    PLUS=314
    MINUS=315
    ASTERISK=316
    SLASH=317
    PERCENT=318
    DIV=319
    TILDE=320
    AMPERSAND=321
    PIPE=322
    CONCAT_PIPE=323
    HAT=324
    STRING=325
    BIGINT_LITERAL=326
    SMALLINT_LITERAL=327
    TINYINT_LITERAL=328
    INTEGER_VALUE=329
    EXPONENT_VALUE=330
    DECIMAL_VALUE=331
    DOUBLE_LITERAL=332
    BIGDECIMAL_LITERAL=333
    IDENTIFIER=334
    BACKQUOTED_IDENTIFIER=335
    SIMPLE_COMMENT=336
    BRACKETED_COMMENT=337
    WS=338
    UNRECOGNIZED=339

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class FugueLanguageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(fugue_sqlParser.EOF, 0)

        def fugueSingleTask(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.FugueSingleTaskContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.FugueSingleTaskContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueLanguage

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueLanguage" ):
                return visitor.visitFugueLanguage(self)
            else:
                return visitor.visitChildren(self)




    def fugueLanguage(self):

        localctx = fugue_sqlParser.FugueLanguageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_fugueLanguage)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 429 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 428
                self.fugueSingleTask()
                self.state = 431 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 17)) & ~0x3f) == 0 and ((1 << (_la - 17)) & ((1 << (fugue_sqlParser.FILL - 17)) | (1 << (fugue_sqlParser.TAKE - 17)) | (1 << (fugue_sqlParser.PROCESS - 17)) | (1 << (fugue_sqlParser.OUTPUT - 17)) | (1 << (fugue_sqlParser.OUTTRANSFORM - 17)) | (1 << (fugue_sqlParser.ZIP - 17)) | (1 << (fugue_sqlParser.PRINT - 17)) | (1 << (fugue_sqlParser.SAVE - 17)) | (1 << (fugue_sqlParser.CONNECT - 17)) | (1 << (fugue_sqlParser.SAMPLE - 17)) | (1 << (fugue_sqlParser.SUB - 17)) | (1 << (fugue_sqlParser.ADD - 17)) | (1 << (fugue_sqlParser.AFTER - 17)) | (1 << (fugue_sqlParser.ALL - 17)) | (1 << (fugue_sqlParser.ALTER - 17)) | (1 << (fugue_sqlParser.ANALYZE - 17)) | (1 << (fugue_sqlParser.AND - 17)) | (1 << (fugue_sqlParser.ANTI - 17)) | (1 << (fugue_sqlParser.ANY - 17)) | (1 << (fugue_sqlParser.ARCHIVE - 17)) | (1 << (fugue_sqlParser.ARRAY - 17)) | (1 << (fugue_sqlParser.AS - 17)) | (1 << (fugue_sqlParser.ASC - 17)) | (1 << (fugue_sqlParser.AT - 17)) | (1 << (fugue_sqlParser.AUTHORIZATION - 17)) | (1 << (fugue_sqlParser.BETWEEN - 17)) | (1 << (fugue_sqlParser.BOTH - 17)) | (1 << (fugue_sqlParser.BUCKET - 17)) | (1 << (fugue_sqlParser.BUCKETS - 17)) | (1 << (fugue_sqlParser.BY - 17)) | (1 << (fugue_sqlParser.CACHE - 17)) | (1 << (fugue_sqlParser.CASCADE - 17)) | (1 << (fugue_sqlParser.CASE - 17)) | (1 << (fugue_sqlParser.CAST - 17)) | (1 << (fugue_sqlParser.CHANGE - 17)) | (1 << (fugue_sqlParser.CHECK - 17)) | (1 << (fugue_sqlParser.CLEAR - 17)) | (1 << (fugue_sqlParser.CLUSTER - 17)) | (1 << (fugue_sqlParser.CLUSTERED - 17)))) != 0) or ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & ((1 << (fugue_sqlParser.CODEGEN - 81)) | (1 << (fugue_sqlParser.COLLATE - 81)) | (1 << (fugue_sqlParser.COLLECTION - 81)) | (1 << (fugue_sqlParser.COLUMN - 81)) | (1 << (fugue_sqlParser.COLUMNS - 81)) | (1 << (fugue_sqlParser.COMMENT - 81)) | (1 << (fugue_sqlParser.COMMIT - 81)) | (1 << (fugue_sqlParser.COMPACT - 81)) | (1 << (fugue_sqlParser.COMPACTIONS - 81)) | (1 << (fugue_sqlParser.COMPUTE - 81)) | (1 << (fugue_sqlParser.CONCATENATE - 81)) | (1 << (fugue_sqlParser.CONSTRAINT - 81)) | (1 << (fugue_sqlParser.COST - 81)) | (1 << (fugue_sqlParser.CREATE - 81)) | (1 << (fugue_sqlParser.CROSS - 81)) | (1 << (fugue_sqlParser.CUBE - 81)) | (1 << (fugue_sqlParser.CURRENT - 81)) | (1 << (fugue_sqlParser.CURRENT_DATE - 81)) | (1 << (fugue_sqlParser.CURRENT_TIME - 81)) | (1 << (fugue_sqlParser.CURRENT_TIMESTAMP - 81)) | (1 << (fugue_sqlParser.CURRENT_USER - 81)) | (1 << (fugue_sqlParser.DATA - 81)) | (1 << (fugue_sqlParser.DATABASE - 81)) | (1 << (fugue_sqlParser.DATABASES - 81)) | (1 << (fugue_sqlParser.DAY - 81)) | (1 << (fugue_sqlParser.DBPROPERTIES - 81)) | (1 << (fugue_sqlParser.DEFINED - 81)) | (1 << (fugue_sqlParser.DELETE - 81)) | (1 << (fugue_sqlParser.DELIMITED - 81)) | (1 << (fugue_sqlParser.DESC - 81)) | (1 << (fugue_sqlParser.DESCRIBE - 81)) | (1 << (fugue_sqlParser.DFS - 81)) | (1 << (fugue_sqlParser.DIRECTORIES - 81)) | (1 << (fugue_sqlParser.DIRECTORY - 81)) | (1 << (fugue_sqlParser.DISTINCT - 81)) | (1 << (fugue_sqlParser.DISTRIBUTE - 81)) | (1 << (fugue_sqlParser.DROP - 81)) | (1 << (fugue_sqlParser.ELSE - 81)) | (1 << (fugue_sqlParser.END - 81)) | (1 << (fugue_sqlParser.ESCAPE - 81)) | (1 << (fugue_sqlParser.ESCAPED - 81)) | (1 << (fugue_sqlParser.EXCEPT - 81)) | (1 << (fugue_sqlParser.EXCHANGE - 81)) | (1 << (fugue_sqlParser.EXISTS - 81)) | (1 << (fugue_sqlParser.EXPLAIN - 81)) | (1 << (fugue_sqlParser.EXPORT - 81)) | (1 << (fugue_sqlParser.EXTENDED - 81)) | (1 << (fugue_sqlParser.EXTERNAL - 81)) | (1 << (fugue_sqlParser.EXTRACT - 81)) | (1 << (fugue_sqlParser.FALSE - 81)) | (1 << (fugue_sqlParser.FETCH - 81)) | (1 << (fugue_sqlParser.FIELDS - 81)) | (1 << (fugue_sqlParser.FILTER - 81)) | (1 << (fugue_sqlParser.FILEFORMAT - 81)) | (1 << (fugue_sqlParser.FIRST - 81)) | (1 << (fugue_sqlParser.FOLLOWING - 81)) | (1 << (fugue_sqlParser.FOR - 81)) | (1 << (fugue_sqlParser.FOREIGN - 81)) | (1 << (fugue_sqlParser.FORMAT - 81)) | (1 << (fugue_sqlParser.FORMATTED - 81)) | (1 << (fugue_sqlParser.FROM - 81)) | (1 << (fugue_sqlParser.FULL - 81)) | (1 << (fugue_sqlParser.FUNCTION - 81)) | (1 << (fugue_sqlParser.FUNCTIONS - 81)))) != 0) or ((((_la - 145)) & ~0x3f) == 0 and ((1 << (_la - 145)) & ((1 << (fugue_sqlParser.GLOBAL - 145)) | (1 << (fugue_sqlParser.GRANT - 145)) | (1 << (fugue_sqlParser.GROUP - 145)) | (1 << (fugue_sqlParser.GROUPING - 145)) | (1 << (fugue_sqlParser.HAVING - 145)) | (1 << (fugue_sqlParser.HOUR - 145)) | (1 << (fugue_sqlParser.IF - 145)) | (1 << (fugue_sqlParser.IGNORE - 145)) | (1 << (fugue_sqlParser.IMPORT - 145)) | (1 << (fugue_sqlParser.IN - 145)) | (1 << (fugue_sqlParser.INDEX - 145)) | (1 << (fugue_sqlParser.INDEXES - 145)) | (1 << (fugue_sqlParser.INNER - 145)) | (1 << (fugue_sqlParser.INPATH - 145)) | (1 << (fugue_sqlParser.INPUTFORMAT - 145)) | (1 << (fugue_sqlParser.INSERT - 145)) | (1 << (fugue_sqlParser.INTERSECT - 145)) | (1 << (fugue_sqlParser.INTERVAL - 145)) | (1 << (fugue_sqlParser.INTO - 145)) | (1 << (fugue_sqlParser.IS - 145)) | (1 << (fugue_sqlParser.ITEMS - 145)) | (1 << (fugue_sqlParser.JOIN - 145)) | (1 << (fugue_sqlParser.KEYS - 145)) | (1 << (fugue_sqlParser.LAST - 145)) | (1 << (fugue_sqlParser.LATERAL - 145)) | (1 << (fugue_sqlParser.LAZY - 145)) | (1 << (fugue_sqlParser.LEADING - 145)) | (1 << (fugue_sqlParser.LEFT - 145)) | (1 << (fugue_sqlParser.LIKE - 145)) | (1 << (fugue_sqlParser.LIMIT - 145)) | (1 << (fugue_sqlParser.LINES - 145)) | (1 << (fugue_sqlParser.LIST - 145)) | (1 << (fugue_sqlParser.LOAD - 145)) | (1 << (fugue_sqlParser.LOCAL - 145)) | (1 << (fugue_sqlParser.LOCATION - 145)) | (1 << (fugue_sqlParser.LOCK - 145)) | (1 << (fugue_sqlParser.LOCKS - 145)) | (1 << (fugue_sqlParser.LOGICAL - 145)) | (1 << (fugue_sqlParser.MACRO - 145)) | (1 << (fugue_sqlParser.MAP - 145)) | (1 << (fugue_sqlParser.MATCHED - 145)) | (1 << (fugue_sqlParser.MERGE - 145)) | (1 << (fugue_sqlParser.MINUTE - 145)) | (1 << (fugue_sqlParser.MONTH - 145)) | (1 << (fugue_sqlParser.MSCK - 145)) | (1 << (fugue_sqlParser.NAMESPACE - 145)) | (1 << (fugue_sqlParser.NAMESPACES - 145)) | (1 << (fugue_sqlParser.NATURAL - 145)) | (1 << (fugue_sqlParser.NO - 145)) | (1 << (fugue_sqlParser.NOT - 145)) | (1 << (fugue_sqlParser.THENULL - 145)) | (1 << (fugue_sqlParser.THENULLS - 145)) | (1 << (fugue_sqlParser.OF - 145)) | (1 << (fugue_sqlParser.ON - 145)) | (1 << (fugue_sqlParser.ONLY - 145)) | (1 << (fugue_sqlParser.OPTION - 145)) | (1 << (fugue_sqlParser.OPTIONS - 145)) | (1 << (fugue_sqlParser.OR - 145)) | (1 << (fugue_sqlParser.ORDER - 145)) | (1 << (fugue_sqlParser.OUT - 145)) | (1 << (fugue_sqlParser.OUTER - 145)) | (1 << (fugue_sqlParser.OUTPUTFORMAT - 145)) | (1 << (fugue_sqlParser.OVER - 145)) | (1 << (fugue_sqlParser.OVERLAPS - 145)))) != 0) or ((((_la - 209)) & ~0x3f) == 0 and ((1 << (_la - 209)) & ((1 << (fugue_sqlParser.OVERLAY - 209)) | (1 << (fugue_sqlParser.OVERWRITE - 209)) | (1 << (fugue_sqlParser.PARTITION - 209)) | (1 << (fugue_sqlParser.PARTITIONED - 209)) | (1 << (fugue_sqlParser.PARTITIONS - 209)) | (1 << (fugue_sqlParser.PERCENTLIT - 209)) | (1 << (fugue_sqlParser.PIVOT - 209)) | (1 << (fugue_sqlParser.PLACING - 209)) | (1 << (fugue_sqlParser.POSITION - 209)) | (1 << (fugue_sqlParser.PRECEDING - 209)) | (1 << (fugue_sqlParser.PRIMARY - 209)) | (1 << (fugue_sqlParser.PRINCIPALS - 209)) | (1 << (fugue_sqlParser.PROPERTIES - 209)) | (1 << (fugue_sqlParser.PURGE - 209)) | (1 << (fugue_sqlParser.QUERY - 209)) | (1 << (fugue_sqlParser.RANGE - 209)) | (1 << (fugue_sqlParser.RECORDREADER - 209)) | (1 << (fugue_sqlParser.RECORDWRITER - 209)) | (1 << (fugue_sqlParser.RECOVER - 209)) | (1 << (fugue_sqlParser.REDUCE - 209)) | (1 << (fugue_sqlParser.REFERENCES - 209)) | (1 << (fugue_sqlParser.REFRESH - 209)) | (1 << (fugue_sqlParser.RENAME - 209)) | (1 << (fugue_sqlParser.REPAIR - 209)) | (1 << (fugue_sqlParser.REPLACE - 209)) | (1 << (fugue_sqlParser.RESET - 209)) | (1 << (fugue_sqlParser.RESTRICT - 209)) | (1 << (fugue_sqlParser.REVOKE - 209)) | (1 << (fugue_sqlParser.RIGHT - 209)) | (1 << (fugue_sqlParser.RLIKE - 209)) | (1 << (fugue_sqlParser.ROLE - 209)) | (1 << (fugue_sqlParser.ROLES - 209)) | (1 << (fugue_sqlParser.ROLLBACK - 209)) | (1 << (fugue_sqlParser.ROLLUP - 209)) | (1 << (fugue_sqlParser.ROW - 209)) | (1 << (fugue_sqlParser.ROWS - 209)) | (1 << (fugue_sqlParser.SCHEMA - 209)) | (1 << (fugue_sqlParser.SECOND - 209)) | (1 << (fugue_sqlParser.SELECT - 209)) | (1 << (fugue_sqlParser.SEMI - 209)) | (1 << (fugue_sqlParser.SEPARATED - 209)) | (1 << (fugue_sqlParser.SERDE - 209)) | (1 << (fugue_sqlParser.SERDEPROPERTIES - 209)) | (1 << (fugue_sqlParser.SESSION_USER - 209)) | (1 << (fugue_sqlParser.SET - 209)) | (1 << (fugue_sqlParser.SETMINUS - 209)) | (1 << (fugue_sqlParser.SETS - 209)) | (1 << (fugue_sqlParser.SHOW - 209)) | (1 << (fugue_sqlParser.SKEWED - 209)) | (1 << (fugue_sqlParser.SOME - 209)) | (1 << (fugue_sqlParser.SORT - 209)) | (1 << (fugue_sqlParser.SORTED - 209)) | (1 << (fugue_sqlParser.START - 209)) | (1 << (fugue_sqlParser.STATISTICS - 209)) | (1 << (fugue_sqlParser.STORED - 209)) | (1 << (fugue_sqlParser.STRATIFY - 209)) | (1 << (fugue_sqlParser.STRUCT - 209)) | (1 << (fugue_sqlParser.SUBSTR - 209)) | (1 << (fugue_sqlParser.SUBSTRING - 209)) | (1 << (fugue_sqlParser.TABLE - 209)) | (1 << (fugue_sqlParser.TABLES - 209)) | (1 << (fugue_sqlParser.TABLESAMPLE - 209)) | (1 << (fugue_sqlParser.TBLPROPERTIES - 209)) | (1 << (fugue_sqlParser.TEMPORARY - 209)))) != 0) or ((((_la - 273)) & ~0x3f) == 0 and ((1 << (_la - 273)) & ((1 << (fugue_sqlParser.TERMINATED - 273)) | (1 << (fugue_sqlParser.THEN - 273)) | (1 << (fugue_sqlParser.TO - 273)) | (1 << (fugue_sqlParser.TOUCH - 273)) | (1 << (fugue_sqlParser.TRAILING - 273)) | (1 << (fugue_sqlParser.TRANSACTION - 273)) | (1 << (fugue_sqlParser.TRANSACTIONS - 273)) | (1 << (fugue_sqlParser.TRANSFORM - 273)) | (1 << (fugue_sqlParser.TRIM - 273)) | (1 << (fugue_sqlParser.TRUE - 273)) | (1 << (fugue_sqlParser.TRUNCATE - 273)) | (1 << (fugue_sqlParser.TYPE - 273)) | (1 << (fugue_sqlParser.UNARCHIVE - 273)) | (1 << (fugue_sqlParser.UNBOUNDED - 273)) | (1 << (fugue_sqlParser.UNCACHE - 273)) | (1 << (fugue_sqlParser.UNION - 273)) | (1 << (fugue_sqlParser.UNIQUE - 273)) | (1 << (fugue_sqlParser.UNKNOWN - 273)) | (1 << (fugue_sqlParser.UNLOCK - 273)) | (1 << (fugue_sqlParser.UNSET - 273)) | (1 << (fugue_sqlParser.UPDATE - 273)) | (1 << (fugue_sqlParser.USE - 273)) | (1 << (fugue_sqlParser.USER - 273)) | (1 << (fugue_sqlParser.USING - 273)) | (1 << (fugue_sqlParser.VALUES - 273)) | (1 << (fugue_sqlParser.VIEW - 273)) | (1 << (fugue_sqlParser.VIEWS - 273)) | (1 << (fugue_sqlParser.WHEN - 273)) | (1 << (fugue_sqlParser.WHERE - 273)) | (1 << (fugue_sqlParser.WINDOW - 273)) | (1 << (fugue_sqlParser.WITH - 273)) | (1 << (fugue_sqlParser.YEAR - 273)) | (1 << (fugue_sqlParser.DIV - 273)) | (1 << (fugue_sqlParser.IDENTIFIER - 273)) | (1 << (fugue_sqlParser.BACKQUOTED_IDENTIFIER - 273)))) != 0)):
                    break

            self.state = 433
            self.match(fugue_sqlParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueSingleStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fugueSingleTask(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSingleTaskContext,0)


        def EOF(self):
            return self.getToken(fugue_sqlParser.EOF, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueSingleStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueSingleStatement" ):
                return visitor.visitFugueSingleStatement(self)
            else:
                return visitor.visitChildren(self)




    def fugueSingleStatement(self):

        localctx = fugue_sqlParser.FugueSingleStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_fugueSingleStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 435
            self.fugueSingleTask()
            self.state = 436
            self.match(fugue_sqlParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueSingleTaskContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fugueNestableTask(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueNestableTaskContext,0)


        def fugueOutputTransformTask(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueOutputTransformTaskContext,0)


        def fugueOutputTask(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueOutputTaskContext,0)


        def fuguePrintTask(self):
            return self.getTypedRuleContext(fugue_sqlParser.FuguePrintTaskContext,0)


        def fugueSaveTask(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSaveTaskContext,0)


        def fugueModuleTask(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueModuleTaskContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueSingleTask

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueSingleTask" ):
                return visitor.visitFugueSingleTask(self)
            else:
                return visitor.visitChildren(self)




    def fugueSingleTask(self):

        localctx = fugue_sqlParser.FugueSingleTaskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_fugueSingleTask)
        try:
            self.state = 444
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 438
                self.fugueNestableTask()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 439
                self.fugueOutputTransformTask()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 440
                self.fugueOutputTask()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 441
                self.fuguePrintTask()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 442
                self.fugueSaveTask()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 443
                self.fugueModuleTask()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueNestableTaskContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.assign = None # FugueAssignmentContext
            self.q = None # QueryContext
            self.checkpoint = None # FugueCheckpointContext
            self.broadcast = None # FugueBroadcastContext
            self.y = None # FugueYieldContext

        def query(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryContext,0)


        def fugueAssignment(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueAssignmentContext,0)


        def fugueCheckpoint(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueCheckpointContext,0)


        def fugueBroadcast(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueBroadcastContext,0)


        def fugueYield(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueYieldContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueNestableTask

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueNestableTask" ):
                return visitor.visitFugueNestableTask(self)
            else:
                return visitor.visitChildren(self)




    def fugueNestableTask(self):

        localctx = fugue_sqlParser.FugueNestableTaskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_fugueNestableTask)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 447
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.state = 446
                localctx.assign = self.fugueAssignment()


            self.state = 449
            localctx.q = self.query()
            self.state = 451
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
            if la_ == 1:
                self.state = 450
                localctx.checkpoint = self.fugueCheckpoint()


            self.state = 454
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==fugue_sqlParser.BROADCAST:
                self.state = 453
                localctx.broadcast = self.fugueBroadcast()


            self.state = 457
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==fugue_sqlParser.YIELD:
                self.state = 456
                localctx.y = self.fugueYield()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueNestableTaskCollectionNoSelectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fugueTransformTask(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueTransformTaskContext,0)


        def fugueProcessTask(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueProcessTaskContext,0)


        def fugueZipTask(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueZipTaskContext,0)


        def fugueCreateTask(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueCreateTaskContext,0)


        def fugueCreateDataTask(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueCreateDataTaskContext,0)


        def fugueLoadTask(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueLoadTaskContext,0)


        def fugueSaveAndUseTask(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSaveAndUseTaskContext,0)


        def fugueRenameColumnsTask(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueRenameColumnsTaskContext,0)


        def fugueAlterColumnsTask(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueAlterColumnsTaskContext,0)


        def fugueDropColumnsTask(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueDropColumnsTaskContext,0)


        def fugueDropnaTask(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueDropnaTaskContext,0)


        def fugueFillnaTask(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueFillnaTaskContext,0)


        def fugueSampleTask(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSampleTaskContext,0)


        def fugueTakeTask(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueTakeTaskContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueNestableTaskCollectionNoSelect

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueNestableTaskCollectionNoSelect" ):
                return visitor.visitFugueNestableTaskCollectionNoSelect(self)
            else:
                return visitor.visitChildren(self)




    def fugueNestableTaskCollectionNoSelect(self):

        localctx = fugue_sqlParser.FugueNestableTaskCollectionNoSelectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_fugueNestableTaskCollectionNoSelect)
        try:
            self.state = 473
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 459
                self.fugueTransformTask()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 460
                self.fugueProcessTask()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 461
                self.fugueZipTask()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 462
                self.fugueCreateTask()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 463
                self.fugueCreateDataTask()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 464
                self.fugueLoadTask()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 465
                self.fugueSaveAndUseTask()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 466
                self.fugueRenameColumnsTask()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 467
                self.fugueAlterColumnsTask()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 468
                self.fugueDropColumnsTask()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 469
                self.fugueDropnaTask()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 470
                self.fugueFillnaTask()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 471
                self.fugueSampleTask()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 472
                self.fugueTakeTask()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueTransformTaskContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.dfs = None # FugueDataFramesContext
            self.partition = None # FuguePrepartitionContext
            self.params = None # FugueSingleOutputExtensionCommonWildContext
            self.callback = None # FugueExtensionContext

        def TRANSFORM(self):
            return self.getToken(fugue_sqlParser.TRANSFORM, 0)

        def fugueSingleOutputExtensionCommonWild(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSingleOutputExtensionCommonWildContext,0)


        def CALLBACK(self):
            return self.getToken(fugue_sqlParser.CALLBACK, 0)

        def fugueDataFrames(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueDataFramesContext,0)


        def fuguePrepartition(self):
            return self.getTypedRuleContext(fugue_sqlParser.FuguePrepartitionContext,0)


        def fugueExtension(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueExtensionContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueTransformTask

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueTransformTask" ):
                return visitor.visitFugueTransformTask(self)
            else:
                return visitor.visitChildren(self)




    def fugueTransformTask(self):

        localctx = fugue_sqlParser.FugueTransformTaskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_fugueTransformTask)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 475
            self.match(fugue_sqlParser.TRANSFORM)
            self.state = 477
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.state = 476
                localctx.dfs = self.fugueDataFrames()


            self.state = 480
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << fugue_sqlParser.HASH) | (1 << fugue_sqlParser.RAND) | (1 << fugue_sqlParser.EVEN) | (1 << fugue_sqlParser.PREPARTITION))) != 0):
                self.state = 479
                localctx.partition = self.fuguePrepartition()


            self.state = 482
            localctx.params = self.fugueSingleOutputExtensionCommonWild()
            self.state = 485
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
            if la_ == 1:
                self.state = 483
                self.match(fugue_sqlParser.CALLBACK)
                self.state = 484
                localctx.callback = self.fugueExtension()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueProcessTaskContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.dfs = None # FugueDataFramesContext
            self.partition = None # FuguePrepartitionContext
            self.params = None # FugueSingleOutputExtensionCommonContext

        def PROCESS(self):
            return self.getToken(fugue_sqlParser.PROCESS, 0)

        def fugueSingleOutputExtensionCommon(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSingleOutputExtensionCommonContext,0)


        def fugueDataFrames(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueDataFramesContext,0)


        def fuguePrepartition(self):
            return self.getTypedRuleContext(fugue_sqlParser.FuguePrepartitionContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueProcessTask

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueProcessTask" ):
                return visitor.visitFugueProcessTask(self)
            else:
                return visitor.visitChildren(self)




    def fugueProcessTask(self):

        localctx = fugue_sqlParser.FugueProcessTaskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_fugueProcessTask)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 487
            self.match(fugue_sqlParser.PROCESS)
            self.state = 489
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.state = 488
                localctx.dfs = self.fugueDataFrames()


            self.state = 492
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << fugue_sqlParser.HASH) | (1 << fugue_sqlParser.RAND) | (1 << fugue_sqlParser.EVEN) | (1 << fugue_sqlParser.PREPARTITION))) != 0):
                self.state = 491
                localctx.partition = self.fuguePrepartition()


            self.state = 494
            localctx.params = self.fugueSingleOutputExtensionCommon()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueSaveAndUseTaskContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.df = None # FugueDataFrameContext
            self.partition = None # FuguePrepartitionContext
            self.m = None # FugueSaveModeContext
            self.single = None # FugueSingleFileContext
            self.fmt = None # FugueFileFormatContext
            self.path = None # FuguePathContext
            self.params = None # FugueParamsContext

        def SAVE(self):
            return self.getToken(fugue_sqlParser.SAVE, 0)

        def AND(self):
            return self.getToken(fugue_sqlParser.AND, 0)

        def USE(self):
            return self.getToken(fugue_sqlParser.USE, 0)

        def fugueSaveMode(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSaveModeContext,0)


        def fuguePath(self):
            return self.getTypedRuleContext(fugue_sqlParser.FuguePathContext,0)


        def fugueDataFrame(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueDataFrameContext,0)


        def fuguePrepartition(self):
            return self.getTypedRuleContext(fugue_sqlParser.FuguePrepartitionContext,0)


        def fugueSingleFile(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSingleFileContext,0)


        def fugueFileFormat(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueFileFormatContext,0)


        def fugueParams(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueParamsContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueSaveAndUseTask

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueSaveAndUseTask" ):
                return visitor.visitFugueSaveAndUseTask(self)
            else:
                return visitor.visitChildren(self)




    def fugueSaveAndUseTask(self):

        localctx = fugue_sqlParser.FugueSaveAndUseTaskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_fugueSaveAndUseTask)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 496
            self.match(fugue_sqlParser.SAVE)
            self.state = 497
            self.match(fugue_sqlParser.AND)
            self.state = 498
            self.match(fugue_sqlParser.USE)
            self.state = 500
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                self.state = 499
                localctx.df = self.fugueDataFrame()


            self.state = 503
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << fugue_sqlParser.HASH) | (1 << fugue_sqlParser.RAND) | (1 << fugue_sqlParser.EVEN) | (1 << fugue_sqlParser.PREPARTITION))) != 0):
                self.state = 502
                localctx.partition = self.fuguePrepartition()


            self.state = 505
            localctx.m = self.fugueSaveMode()
            self.state = 507
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==fugue_sqlParser.SINGLE:
                self.state = 506
                localctx.single = self.fugueSingleFile()


            self.state = 510
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << fugue_sqlParser.PARQUET) | (1 << fugue_sqlParser.CSV) | (1 << fugue_sqlParser.JSON))) != 0):
                self.state = 509
                localctx.fmt = self.fugueFileFormat()


            self.state = 512
            localctx.path = self.fuguePath()
            self.state = 514
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
            if la_ == 1:
                self.state = 513
                localctx.params = self.fugueParams()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueRenameColumnsTaskContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.cols = None # FugueRenameExpressionContext
            self.df = None # FugueDataFrameContext

        def RENAME(self):
            return self.getToken(fugue_sqlParser.RENAME, 0)

        def COLUMNS(self):
            return self.getToken(fugue_sqlParser.COLUMNS, 0)

        def fugueRenameExpression(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueRenameExpressionContext,0)


        def FROM(self):
            return self.getToken(fugue_sqlParser.FROM, 0)

        def fugueDataFrame(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueDataFrameContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueRenameColumnsTask

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueRenameColumnsTask" ):
                return visitor.visitFugueRenameColumnsTask(self)
            else:
                return visitor.visitChildren(self)




    def fugueRenameColumnsTask(self):

        localctx = fugue_sqlParser.FugueRenameColumnsTaskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_fugueRenameColumnsTask)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 516
            self.match(fugue_sqlParser.RENAME)
            self.state = 517
            self.match(fugue_sqlParser.COLUMNS)
            self.state = 518
            localctx.cols = self.fugueRenameExpression()
            self.state = 521
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
            if la_ == 1:
                self.state = 519
                self.match(fugue_sqlParser.FROM)
                self.state = 520
                localctx.df = self.fugueDataFrame()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueAlterColumnsTaskContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.cols = None # FugueSchemaContext
            self.df = None # FugueDataFrameContext

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)

        def COLUMNS(self):
            return self.getToken(fugue_sqlParser.COLUMNS, 0)

        def fugueSchema(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSchemaContext,0)


        def FROM(self):
            return self.getToken(fugue_sqlParser.FROM, 0)

        def fugueDataFrame(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueDataFrameContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueAlterColumnsTask

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueAlterColumnsTask" ):
                return visitor.visitFugueAlterColumnsTask(self)
            else:
                return visitor.visitChildren(self)




    def fugueAlterColumnsTask(self):

        localctx = fugue_sqlParser.FugueAlterColumnsTaskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_fugueAlterColumnsTask)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 523
            self.match(fugue_sqlParser.ALTER)
            self.state = 524
            self.match(fugue_sqlParser.COLUMNS)
            self.state = 525
            localctx.cols = self.fugueSchema()
            self.state = 528
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
            if la_ == 1:
                self.state = 526
                self.match(fugue_sqlParser.FROM)
                self.state = 527
                localctx.df = self.fugueDataFrame()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueDropColumnsTaskContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.cols = None # FugueColsContext
            self.df = None # FugueDataFrameContext

        def DROP(self):
            return self.getToken(fugue_sqlParser.DROP, 0)

        def COLUMNS(self):
            return self.getToken(fugue_sqlParser.COLUMNS, 0)

        def fugueCols(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueColsContext,0)


        def IF(self):
            return self.getToken(fugue_sqlParser.IF, 0)

        def EXISTS(self):
            return self.getToken(fugue_sqlParser.EXISTS, 0)

        def FROM(self):
            return self.getToken(fugue_sqlParser.FROM, 0)

        def fugueDataFrame(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueDataFrameContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueDropColumnsTask

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueDropColumnsTask" ):
                return visitor.visitFugueDropColumnsTask(self)
            else:
                return visitor.visitChildren(self)




    def fugueDropColumnsTask(self):

        localctx = fugue_sqlParser.FugueDropColumnsTaskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_fugueDropColumnsTask)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 530
            self.match(fugue_sqlParser.DROP)
            self.state = 531
            self.match(fugue_sqlParser.COLUMNS)
            self.state = 532
            localctx.cols = self.fugueCols()
            self.state = 535
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,19,self._ctx)
            if la_ == 1:
                self.state = 533
                self.match(fugue_sqlParser.IF)
                self.state = 534
                self.match(fugue_sqlParser.EXISTS)


            self.state = 539
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,20,self._ctx)
            if la_ == 1:
                self.state = 537
                self.match(fugue_sqlParser.FROM)
                self.state = 538
                localctx.df = self.fugueDataFrame()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueDropnaTaskContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.how = None # Token
            self.cols = None # FugueColsContext
            self.df = None # FugueDataFrameContext

        def DROP(self):
            return self.getToken(fugue_sqlParser.DROP, 0)

        def ROWS(self):
            return self.getToken(fugue_sqlParser.ROWS, 0)

        def IF(self):
            return self.getToken(fugue_sqlParser.IF, 0)

        def THENULL(self):
            return self.getToken(fugue_sqlParser.THENULL, 0)

        def THENULLS(self):
            return self.getToken(fugue_sqlParser.THENULLS, 0)

        def ALL(self):
            return self.getToken(fugue_sqlParser.ALL, 0)

        def ANY(self):
            return self.getToken(fugue_sqlParser.ANY, 0)

        def ON(self):
            return self.getToken(fugue_sqlParser.ON, 0)

        def FROM(self):
            return self.getToken(fugue_sqlParser.FROM, 0)

        def fugueCols(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueColsContext,0)


        def fugueDataFrame(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueDataFrameContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueDropnaTask

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueDropnaTask" ):
                return visitor.visitFugueDropnaTask(self)
            else:
                return visitor.visitChildren(self)




    def fugueDropnaTask(self):

        localctx = fugue_sqlParser.FugueDropnaTaskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_fugueDropnaTask)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 541
            self.match(fugue_sqlParser.DROP)
            self.state = 542
            self.match(fugue_sqlParser.ROWS)
            self.state = 543
            self.match(fugue_sqlParser.IF)
            self.state = 544
            localctx.how = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==fugue_sqlParser.ALL or _la==fugue_sqlParser.ANY):
                localctx.how = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 545
            _la = self._input.LA(1)
            if not(_la==fugue_sqlParser.THENULL or _la==fugue_sqlParser.THENULLS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 548
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,21,self._ctx)
            if la_ == 1:
                self.state = 546
                self.match(fugue_sqlParser.ON)
                self.state = 547
                localctx.cols = self.fugueCols()


            self.state = 552
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
            if la_ == 1:
                self.state = 550
                self.match(fugue_sqlParser.FROM)
                self.state = 551
                localctx.df = self.fugueDataFrame()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueFillnaTaskContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.params = None # FugueParamsContext
            self.df = None # FugueDataFrameContext

        def FILL(self):
            return self.getToken(fugue_sqlParser.FILL, 0)

        def THENULL(self):
            return self.getToken(fugue_sqlParser.THENULL, 0)

        def THENULLS(self):
            return self.getToken(fugue_sqlParser.THENULLS, 0)

        def fugueParams(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueParamsContext,0)


        def FROM(self):
            return self.getToken(fugue_sqlParser.FROM, 0)

        def fugueDataFrame(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueDataFrameContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueFillnaTask

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueFillnaTask" ):
                return visitor.visitFugueFillnaTask(self)
            else:
                return visitor.visitChildren(self)




    def fugueFillnaTask(self):

        localctx = fugue_sqlParser.FugueFillnaTaskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_fugueFillnaTask)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 554
            self.match(fugue_sqlParser.FILL)
            self.state = 555
            _la = self._input.LA(1)
            if not(_la==fugue_sqlParser.THENULL or _la==fugue_sqlParser.THENULLS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 556
            localctx.params = self.fugueParams()
            self.state = 559
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
            if la_ == 1:
                self.state = 557
                self.match(fugue_sqlParser.FROM)
                self.state = 558
                localctx.df = self.fugueDataFrame()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueSampleTaskContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.method = None # FugueSampleMethodContext
            self.seed = None # Token
            self.df = None # FugueDataFrameContext

        def SAMPLE(self):
            return self.getToken(fugue_sqlParser.SAMPLE, 0)

        def fugueSampleMethod(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSampleMethodContext,0)


        def REPLACE(self):
            return self.getToken(fugue_sqlParser.REPLACE, 0)

        def SEED(self):
            return self.getToken(fugue_sqlParser.SEED, 0)

        def FROM(self):
            return self.getToken(fugue_sqlParser.FROM, 0)

        def INTEGER_VALUE(self):
            return self.getToken(fugue_sqlParser.INTEGER_VALUE, 0)

        def fugueDataFrame(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueDataFrameContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueSampleTask

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueSampleTask" ):
                return visitor.visitFugueSampleTask(self)
            else:
                return visitor.visitChildren(self)




    def fugueSampleTask(self):

        localctx = fugue_sqlParser.FugueSampleTaskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_fugueSampleTask)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 561
            self.match(fugue_sqlParser.SAMPLE)
            self.state = 563
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==fugue_sqlParser.REPLACE:
                self.state = 562
                self.match(fugue_sqlParser.REPLACE)


            self.state = 565
            localctx.method = self.fugueSampleMethod()
            self.state = 568
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
            if la_ == 1:
                self.state = 566
                self.match(fugue_sqlParser.SEED)
                self.state = 567
                localctx.seed = self.match(fugue_sqlParser.INTEGER_VALUE)


            self.state = 572
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,26,self._ctx)
            if la_ == 1:
                self.state = 570
                self.match(fugue_sqlParser.FROM)
                self.state = 571
                localctx.df = self.fugueDataFrame()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueTakeTaskContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.rows = None # Token
            self.df = None # FugueDataFrameContext
            self.partition = None # FuguePrepartitionContext
            self.presort = None # FugueColsSortContext
            self.na_position = None # Token

        def TAKE(self):
            return self.getToken(fugue_sqlParser.TAKE, 0)

        def FROM(self):
            return self.getToken(fugue_sqlParser.FROM, 0)

        def INTEGER_VALUE(self):
            return self.getToken(fugue_sqlParser.INTEGER_VALUE, 0)

        def ROW(self):
            return self.getToken(fugue_sqlParser.ROW, 0)

        def ROWS(self):
            return self.getToken(fugue_sqlParser.ROWS, 0)

        def fugueDataFrame(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueDataFrameContext,0)


        def THENULL(self):
            return self.getToken(fugue_sqlParser.THENULL, 0)

        def THENULLS(self):
            return self.getToken(fugue_sqlParser.THENULLS, 0)

        def PRESORT(self):
            return self.getToken(fugue_sqlParser.PRESORT, 0)

        def FIRST(self):
            return self.getToken(fugue_sqlParser.FIRST, 0)

        def LAST(self):
            return self.getToken(fugue_sqlParser.LAST, 0)

        def fuguePrepartition(self):
            return self.getTypedRuleContext(fugue_sqlParser.FuguePrepartitionContext,0)


        def fugueColsSort(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueColsSortContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueTakeTask

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueTakeTask" ):
                return visitor.visitFugueTakeTask(self)
            else:
                return visitor.visitChildren(self)




    def fugueTakeTask(self):

        localctx = fugue_sqlParser.FugueTakeTaskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_fugueTakeTask)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 574
            self.match(fugue_sqlParser.TAKE)
            self.state = 577
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
            if la_ == 1:
                self.state = 575
                localctx.rows = self.match(fugue_sqlParser.INTEGER_VALUE)
                self.state = 576
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.ROW or _la==fugue_sqlParser.ROWS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 581
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
            if la_ == 1:
                self.state = 579
                self.match(fugue_sqlParser.FROM)
                self.state = 580
                localctx.df = self.fugueDataFrame()


            self.state = 586
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
            if la_ == 1:
                self.state = 583
                localctx.partition = self.fuguePrepartition()

            elif la_ == 2:
                self.state = 584
                self.match(fugue_sqlParser.PRESORT)
                self.state = 585
                localctx.presort = self.fugueColsSort()


            self.state = 590
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                self.state = 588
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.THENULL or _la==fugue_sqlParser.THENULLS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 589
                localctx.na_position = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.FIRST or _la==fugue_sqlParser.LAST):
                    localctx.na_position = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueZipTaskContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.dfs = None # FugueDataFramesContext
            self.how = None # FugueZipTypeContext
            self.by = None # FugueColsContext
            self.presort = None # FugueColsSortContext

        def ZIP(self):
            return self.getToken(fugue_sqlParser.ZIP, 0)

        def fugueDataFrames(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueDataFramesContext,0)


        def BY(self):
            return self.getToken(fugue_sqlParser.BY, 0)

        def PRESORT(self):
            return self.getToken(fugue_sqlParser.PRESORT, 0)

        def fugueZipType(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueZipTypeContext,0)


        def fugueCols(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueColsContext,0)


        def fugueColsSort(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueColsSortContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueZipTask

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueZipTask" ):
                return visitor.visitFugueZipTask(self)
            else:
                return visitor.visitChildren(self)




    def fugueZipTask(self):

        localctx = fugue_sqlParser.FugueZipTaskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_fugueZipTask)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 592
            self.match(fugue_sqlParser.ZIP)
            self.state = 593
            localctx.dfs = self.fugueDataFrames()
            self.state = 595
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
            if la_ == 1:
                self.state = 594
                localctx.how = self.fugueZipType()


            self.state = 599
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,32,self._ctx)
            if la_ == 1:
                self.state = 597
                self.match(fugue_sqlParser.BY)
                self.state = 598
                localctx.by = self.fugueCols()


            self.state = 603
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
            if la_ == 1:
                self.state = 601
                self.match(fugue_sqlParser.PRESORT)
                self.state = 602
                localctx.presort = self.fugueColsSort()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueCreateTaskContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.params = None # FugueSingleOutputExtensionCommonContext

        def CREATE(self):
            return self.getToken(fugue_sqlParser.CREATE, 0)

        def fugueSingleOutputExtensionCommon(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSingleOutputExtensionCommonContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueCreateTask

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueCreateTask" ):
                return visitor.visitFugueCreateTask(self)
            else:
                return visitor.visitChildren(self)




    def fugueCreateTask(self):

        localctx = fugue_sqlParser.FugueCreateTaskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_fugueCreateTask)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 605
            self.match(fugue_sqlParser.CREATE)
            self.state = 606
            localctx.params = self.fugueSingleOutputExtensionCommon()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueCreateDataTaskContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.data = None # FugueJsonArrayContext
            self.schema = None # FugueSchemaContext

        def CREATE(self):
            return self.getToken(fugue_sqlParser.CREATE, 0)

        def SCHEMA(self):
            return self.getToken(fugue_sqlParser.SCHEMA, 0)

        def fugueJsonArray(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueJsonArrayContext,0)


        def fugueSchema(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSchemaContext,0)


        def DATA(self):
            return self.getToken(fugue_sqlParser.DATA, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueCreateDataTask

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueCreateDataTask" ):
                return visitor.visitFugueCreateDataTask(self)
            else:
                return visitor.visitChildren(self)




    def fugueCreateDataTask(self):

        localctx = fugue_sqlParser.FugueCreateDataTaskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_fugueCreateDataTask)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 608
            self.match(fugue_sqlParser.CREATE)
            self.state = 610
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==fugue_sqlParser.DATA:
                self.state = 609
                self.match(fugue_sqlParser.DATA)


            self.state = 612
            localctx.data = self.fugueJsonArray()
            self.state = 613
            self.match(fugue_sqlParser.SCHEMA)
            self.state = 614
            localctx.schema = self.fugueSchema()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueLoadTaskContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.fmt = None # FugueFileFormatContext
            self.path = None # FuguePathContext
            self.params = None # FugueParamsContext
            self.columns = None # FugueLoadColumnsContext

        def LOAD(self):
            return self.getToken(fugue_sqlParser.LOAD, 0)

        def fuguePath(self):
            return self.getTypedRuleContext(fugue_sqlParser.FuguePathContext,0)


        def COLUMNS(self):
            return self.getToken(fugue_sqlParser.COLUMNS, 0)

        def fugueFileFormat(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueFileFormatContext,0)


        def fugueParams(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueParamsContext,0)


        def fugueLoadColumns(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueLoadColumnsContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueLoadTask

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueLoadTask" ):
                return visitor.visitFugueLoadTask(self)
            else:
                return visitor.visitChildren(self)




    def fugueLoadTask(self):

        localctx = fugue_sqlParser.FugueLoadTaskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_fugueLoadTask)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 616
            self.match(fugue_sqlParser.LOAD)
            self.state = 618
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << fugue_sqlParser.PARQUET) | (1 << fugue_sqlParser.CSV) | (1 << fugue_sqlParser.JSON))) != 0):
                self.state = 617
                localctx.fmt = self.fugueFileFormat()


            self.state = 620
            localctx.path = self.fuguePath()
            self.state = 622
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
            if la_ == 1:
                self.state = 621
                localctx.params = self.fugueParams()


            self.state = 626
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,37,self._ctx)
            if la_ == 1:
                self.state = 624
                self.match(fugue_sqlParser.COLUMNS)
                self.state = 625
                localctx.columns = self.fugueLoadColumns()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueOutputTaskContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.dfs = None # FugueDataFramesContext
            self.partition = None # FuguePrepartitionContext
            self.fugueUsing = None # FugueExtensionContext
            self.params = None # FugueParamsContext

        def OUTPUT(self):
            return self.getToken(fugue_sqlParser.OUTPUT, 0)

        def USING(self):
            return self.getToken(fugue_sqlParser.USING, 0)

        def fugueExtension(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueExtensionContext,0)


        def fugueDataFrames(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueDataFramesContext,0)


        def fuguePrepartition(self):
            return self.getTypedRuleContext(fugue_sqlParser.FuguePrepartitionContext,0)


        def fugueParams(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueParamsContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueOutputTask

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueOutputTask" ):
                return visitor.visitFugueOutputTask(self)
            else:
                return visitor.visitChildren(self)




    def fugueOutputTask(self):

        localctx = fugue_sqlParser.FugueOutputTaskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_fugueOutputTask)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 628
            self.match(fugue_sqlParser.OUTPUT)
            self.state = 630
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
            if la_ == 1:
                self.state = 629
                localctx.dfs = self.fugueDataFrames()


            self.state = 633
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << fugue_sqlParser.HASH) | (1 << fugue_sqlParser.RAND) | (1 << fugue_sqlParser.EVEN) | (1 << fugue_sqlParser.PREPARTITION))) != 0):
                self.state = 632
                localctx.partition = self.fuguePrepartition()


            self.state = 635
            self.match(fugue_sqlParser.USING)
            self.state = 636
            localctx.fugueUsing = self.fugueExtension()
            self.state = 638
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << fugue_sqlParser.T__2) | (1 << fugue_sqlParser.T__7) | (1 << fugue_sqlParser.PARAMS))) != 0):
                self.state = 637
                localctx.params = self.fugueParams()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FuguePrintTaskContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.rows = None # Token
            self.dfs = None # FugueDataFramesContext
            self.count = None # Token
            self.title = None # Token

        def PRINT(self):
            return self.getToken(fugue_sqlParser.PRINT, 0)

        def INTEGER_VALUE(self):
            return self.getToken(fugue_sqlParser.INTEGER_VALUE, 0)

        def ROW(self):
            return self.getToken(fugue_sqlParser.ROW, 0)

        def ROWS(self):
            return self.getToken(fugue_sqlParser.ROWS, 0)

        def FROM(self):
            return self.getToken(fugue_sqlParser.FROM, 0)

        def TITLE(self):
            return self.getToken(fugue_sqlParser.TITLE, 0)

        def fugueDataFrames(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueDataFramesContext,0)


        def ROWCOUNT(self):
            return self.getToken(fugue_sqlParser.ROWCOUNT, 0)

        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fuguePrintTask

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFuguePrintTask" ):
                return visitor.visitFuguePrintTask(self)
            else:
                return visitor.visitChildren(self)




    def fuguePrintTask(self):

        localctx = fugue_sqlParser.FuguePrintTaskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_fuguePrintTask)
        self._la = 0 # Token type
        try:
            self.state = 665
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 640
                self.match(fugue_sqlParser.PRINT)
                self.state = 641
                localctx.rows = self.match(fugue_sqlParser.INTEGER_VALUE)
                self.state = 642
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.ROW or _la==fugue_sqlParser.ROWS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 645
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
                if la_ == 1:
                    self.state = 643
                    self.match(fugue_sqlParser.FROM)
                    self.state = 644
                    localctx.dfs = self.fugueDataFrames()


                self.state = 648
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.ROWCOUNT:
                    self.state = 647
                    localctx.count = self.match(fugue_sqlParser.ROWCOUNT)


                self.state = 652
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.TITLE:
                    self.state = 650
                    self.match(fugue_sqlParser.TITLE)
                    self.state = 651
                    localctx.title = self.match(fugue_sqlParser.STRING)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 654
                self.match(fugue_sqlParser.PRINT)
                self.state = 656
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
                if la_ == 1:
                    self.state = 655
                    localctx.dfs = self.fugueDataFrames()


                self.state = 659
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.ROWCOUNT:
                    self.state = 658
                    localctx.count = self.match(fugue_sqlParser.ROWCOUNT)


                self.state = 663
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.TITLE:
                    self.state = 661
                    self.match(fugue_sqlParser.TITLE)
                    self.state = 662
                    localctx.title = self.match(fugue_sqlParser.STRING)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueSaveTaskContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.df = None # FugueDataFrameContext
            self.partition = None # FuguePrepartitionContext
            self.m = None # FugueSaveModeContext
            self.single = None # FugueSingleFileContext
            self.fmt = None # FugueFileFormatContext
            self.path = None # FuguePathContext
            self.params = None # FugueParamsContext

        def SAVE(self):
            return self.getToken(fugue_sqlParser.SAVE, 0)

        def fugueSaveMode(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSaveModeContext,0)


        def fuguePath(self):
            return self.getTypedRuleContext(fugue_sqlParser.FuguePathContext,0)


        def fugueDataFrame(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueDataFrameContext,0)


        def fuguePrepartition(self):
            return self.getTypedRuleContext(fugue_sqlParser.FuguePrepartitionContext,0)


        def fugueSingleFile(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSingleFileContext,0)


        def fugueFileFormat(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueFileFormatContext,0)


        def fugueParams(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueParamsContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueSaveTask

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueSaveTask" ):
                return visitor.visitFugueSaveTask(self)
            else:
                return visitor.visitChildren(self)




    def fugueSaveTask(self):

        localctx = fugue_sqlParser.FugueSaveTaskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_fugueSaveTask)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 667
            self.match(fugue_sqlParser.SAVE)
            self.state = 669
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
            if la_ == 1:
                self.state = 668
                localctx.df = self.fugueDataFrame()


            self.state = 672
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << fugue_sqlParser.HASH) | (1 << fugue_sqlParser.RAND) | (1 << fugue_sqlParser.EVEN) | (1 << fugue_sqlParser.PREPARTITION))) != 0):
                self.state = 671
                localctx.partition = self.fuguePrepartition()


            self.state = 674
            localctx.m = self.fugueSaveMode()
            self.state = 676
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==fugue_sqlParser.SINGLE:
                self.state = 675
                localctx.single = self.fugueSingleFile()


            self.state = 679
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << fugue_sqlParser.PARQUET) | (1 << fugue_sqlParser.CSV) | (1 << fugue_sqlParser.JSON))) != 0):
                self.state = 678
                localctx.fmt = self.fugueFileFormat()


            self.state = 681
            localctx.path = self.fuguePath()
            self.state = 683
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << fugue_sqlParser.T__2) | (1 << fugue_sqlParser.T__7) | (1 << fugue_sqlParser.PARAMS))) != 0):
                self.state = 682
                localctx.params = self.fugueParams()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueOutputTransformTaskContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.dfs = None # FugueDataFramesContext
            self.partition = None # FuguePrepartitionContext
            self.fugueUsing = None # FugueExtensionContext
            self.params = None # FugueParamsContext
            self.callback = None # FugueExtensionContext

        def OUTTRANSFORM(self):
            return self.getToken(fugue_sqlParser.OUTTRANSFORM, 0)

        def USING(self):
            return self.getToken(fugue_sqlParser.USING, 0)

        def fugueExtension(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.FugueExtensionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.FugueExtensionContext,i)


        def CALLBACK(self):
            return self.getToken(fugue_sqlParser.CALLBACK, 0)

        def fugueDataFrames(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueDataFramesContext,0)


        def fuguePrepartition(self):
            return self.getTypedRuleContext(fugue_sqlParser.FuguePrepartitionContext,0)


        def fugueParams(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueParamsContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueOutputTransformTask

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueOutputTransformTask" ):
                return visitor.visitFugueOutputTransformTask(self)
            else:
                return visitor.visitChildren(self)




    def fugueOutputTransformTask(self):

        localctx = fugue_sqlParser.FugueOutputTransformTaskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_fugueOutputTransformTask)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 685
            self.match(fugue_sqlParser.OUTTRANSFORM)
            self.state = 687
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
            if la_ == 1:
                self.state = 686
                localctx.dfs = self.fugueDataFrames()


            self.state = 690
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << fugue_sqlParser.HASH) | (1 << fugue_sqlParser.RAND) | (1 << fugue_sqlParser.EVEN) | (1 << fugue_sqlParser.PREPARTITION))) != 0):
                self.state = 689
                localctx.partition = self.fuguePrepartition()


            self.state = 692
            self.match(fugue_sqlParser.USING)
            self.state = 693
            localctx.fugueUsing = self.fugueExtension()
            self.state = 695
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << fugue_sqlParser.T__2) | (1 << fugue_sqlParser.T__7) | (1 << fugue_sqlParser.PARAMS))) != 0):
                self.state = 694
                localctx.params = self.fugueParams()


            self.state = 699
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==fugue_sqlParser.CALLBACK:
                self.state = 697
                self.match(fugue_sqlParser.CALLBACK)
                self.state = 698
                localctx.callback = self.fugueExtension()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueModuleTaskContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.assign = None # FugueAssignmentContext
            self.dfs = None # FugueDataFramesContext
            self.fugueUsing = None # FugueExtensionContext
            self.params = None # FugueParamsContext

        def SUB(self):
            return self.getToken(fugue_sqlParser.SUB, 0)

        def USING(self):
            return self.getToken(fugue_sqlParser.USING, 0)

        def fugueExtension(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueExtensionContext,0)


        def fugueAssignment(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueAssignmentContext,0)


        def fugueDataFrames(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueDataFramesContext,0)


        def fugueParams(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueParamsContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueModuleTask

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueModuleTask" ):
                return visitor.visitFugueModuleTask(self)
            else:
                return visitor.visitChildren(self)




    def fugueModuleTask(self):

        localctx = fugue_sqlParser.FugueModuleTaskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_fugueModuleTask)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 702
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 53)) & ~0x3f) == 0 and ((1 << (_la - 53)) & ((1 << (fugue_sqlParser.ADD - 53)) | (1 << (fugue_sqlParser.AFTER - 53)) | (1 << (fugue_sqlParser.ALL - 53)) | (1 << (fugue_sqlParser.ALTER - 53)) | (1 << (fugue_sqlParser.ANALYZE - 53)) | (1 << (fugue_sqlParser.AND - 53)) | (1 << (fugue_sqlParser.ANTI - 53)) | (1 << (fugue_sqlParser.ANY - 53)) | (1 << (fugue_sqlParser.ARCHIVE - 53)) | (1 << (fugue_sqlParser.ARRAY - 53)) | (1 << (fugue_sqlParser.AS - 53)) | (1 << (fugue_sqlParser.ASC - 53)) | (1 << (fugue_sqlParser.AT - 53)) | (1 << (fugue_sqlParser.AUTHORIZATION - 53)) | (1 << (fugue_sqlParser.BETWEEN - 53)) | (1 << (fugue_sqlParser.BOTH - 53)) | (1 << (fugue_sqlParser.BUCKET - 53)) | (1 << (fugue_sqlParser.BUCKETS - 53)) | (1 << (fugue_sqlParser.BY - 53)) | (1 << (fugue_sqlParser.CACHE - 53)) | (1 << (fugue_sqlParser.CASCADE - 53)) | (1 << (fugue_sqlParser.CASE - 53)) | (1 << (fugue_sqlParser.CAST - 53)) | (1 << (fugue_sqlParser.CHANGE - 53)) | (1 << (fugue_sqlParser.CHECK - 53)) | (1 << (fugue_sqlParser.CLEAR - 53)) | (1 << (fugue_sqlParser.CLUSTER - 53)) | (1 << (fugue_sqlParser.CLUSTERED - 53)) | (1 << (fugue_sqlParser.CODEGEN - 53)) | (1 << (fugue_sqlParser.COLLATE - 53)) | (1 << (fugue_sqlParser.COLLECTION - 53)) | (1 << (fugue_sqlParser.COLUMN - 53)) | (1 << (fugue_sqlParser.COLUMNS - 53)) | (1 << (fugue_sqlParser.COMMENT - 53)) | (1 << (fugue_sqlParser.COMMIT - 53)) | (1 << (fugue_sqlParser.COMPACT - 53)) | (1 << (fugue_sqlParser.COMPACTIONS - 53)) | (1 << (fugue_sqlParser.COMPUTE - 53)) | (1 << (fugue_sqlParser.CONCATENATE - 53)) | (1 << (fugue_sqlParser.CONSTRAINT - 53)) | (1 << (fugue_sqlParser.COST - 53)) | (1 << (fugue_sqlParser.CREATE - 53)) | (1 << (fugue_sqlParser.CROSS - 53)) | (1 << (fugue_sqlParser.CUBE - 53)) | (1 << (fugue_sqlParser.CURRENT - 53)) | (1 << (fugue_sqlParser.CURRENT_DATE - 53)) | (1 << (fugue_sqlParser.CURRENT_TIME - 53)) | (1 << (fugue_sqlParser.CURRENT_TIMESTAMP - 53)) | (1 << (fugue_sqlParser.CURRENT_USER - 53)) | (1 << (fugue_sqlParser.DATA - 53)) | (1 << (fugue_sqlParser.DATABASE - 53)) | (1 << (fugue_sqlParser.DATABASES - 53)) | (1 << (fugue_sqlParser.DAY - 53)) | (1 << (fugue_sqlParser.DBPROPERTIES - 53)) | (1 << (fugue_sqlParser.DEFINED - 53)) | (1 << (fugue_sqlParser.DELETE - 53)) | (1 << (fugue_sqlParser.DELIMITED - 53)) | (1 << (fugue_sqlParser.DESC - 53)) | (1 << (fugue_sqlParser.DESCRIBE - 53)) | (1 << (fugue_sqlParser.DFS - 53)) | (1 << (fugue_sqlParser.DIRECTORIES - 53)) | (1 << (fugue_sqlParser.DIRECTORY - 53)) | (1 << (fugue_sqlParser.DISTINCT - 53)) | (1 << (fugue_sqlParser.DISTRIBUTE - 53)))) != 0) or ((((_la - 117)) & ~0x3f) == 0 and ((1 << (_la - 117)) & ((1 << (fugue_sqlParser.DROP - 117)) | (1 << (fugue_sqlParser.ELSE - 117)) | (1 << (fugue_sqlParser.END - 117)) | (1 << (fugue_sqlParser.ESCAPE - 117)) | (1 << (fugue_sqlParser.ESCAPED - 117)) | (1 << (fugue_sqlParser.EXCEPT - 117)) | (1 << (fugue_sqlParser.EXCHANGE - 117)) | (1 << (fugue_sqlParser.EXISTS - 117)) | (1 << (fugue_sqlParser.EXPLAIN - 117)) | (1 << (fugue_sqlParser.EXPORT - 117)) | (1 << (fugue_sqlParser.EXTENDED - 117)) | (1 << (fugue_sqlParser.EXTERNAL - 117)) | (1 << (fugue_sqlParser.EXTRACT - 117)) | (1 << (fugue_sqlParser.FALSE - 117)) | (1 << (fugue_sqlParser.FETCH - 117)) | (1 << (fugue_sqlParser.FIELDS - 117)) | (1 << (fugue_sqlParser.FILTER - 117)) | (1 << (fugue_sqlParser.FILEFORMAT - 117)) | (1 << (fugue_sqlParser.FIRST - 117)) | (1 << (fugue_sqlParser.FOLLOWING - 117)) | (1 << (fugue_sqlParser.FOR - 117)) | (1 << (fugue_sqlParser.FOREIGN - 117)) | (1 << (fugue_sqlParser.FORMAT - 117)) | (1 << (fugue_sqlParser.FORMATTED - 117)) | (1 << (fugue_sqlParser.FROM - 117)) | (1 << (fugue_sqlParser.FULL - 117)) | (1 << (fugue_sqlParser.FUNCTION - 117)) | (1 << (fugue_sqlParser.FUNCTIONS - 117)) | (1 << (fugue_sqlParser.GLOBAL - 117)) | (1 << (fugue_sqlParser.GRANT - 117)) | (1 << (fugue_sqlParser.GROUP - 117)) | (1 << (fugue_sqlParser.GROUPING - 117)) | (1 << (fugue_sqlParser.HAVING - 117)) | (1 << (fugue_sqlParser.HOUR - 117)) | (1 << (fugue_sqlParser.IF - 117)) | (1 << (fugue_sqlParser.IGNORE - 117)) | (1 << (fugue_sqlParser.IMPORT - 117)) | (1 << (fugue_sqlParser.IN - 117)) | (1 << (fugue_sqlParser.INDEX - 117)) | (1 << (fugue_sqlParser.INDEXES - 117)) | (1 << (fugue_sqlParser.INNER - 117)) | (1 << (fugue_sqlParser.INPATH - 117)) | (1 << (fugue_sqlParser.INPUTFORMAT - 117)) | (1 << (fugue_sqlParser.INSERT - 117)) | (1 << (fugue_sqlParser.INTERSECT - 117)) | (1 << (fugue_sqlParser.INTERVAL - 117)) | (1 << (fugue_sqlParser.INTO - 117)) | (1 << (fugue_sqlParser.IS - 117)) | (1 << (fugue_sqlParser.ITEMS - 117)) | (1 << (fugue_sqlParser.JOIN - 117)) | (1 << (fugue_sqlParser.KEYS - 117)) | (1 << (fugue_sqlParser.LAST - 117)) | (1 << (fugue_sqlParser.LATERAL - 117)) | (1 << (fugue_sqlParser.LAZY - 117)) | (1 << (fugue_sqlParser.LEADING - 117)) | (1 << (fugue_sqlParser.LEFT - 117)) | (1 << (fugue_sqlParser.LIKE - 117)) | (1 << (fugue_sqlParser.LIMIT - 117)) | (1 << (fugue_sqlParser.LINES - 117)) | (1 << (fugue_sqlParser.LIST - 117)) | (1 << (fugue_sqlParser.LOAD - 117)) | (1 << (fugue_sqlParser.LOCAL - 117)) | (1 << (fugue_sqlParser.LOCATION - 117)) | (1 << (fugue_sqlParser.LOCK - 117)))) != 0) or ((((_la - 181)) & ~0x3f) == 0 and ((1 << (_la - 181)) & ((1 << (fugue_sqlParser.LOCKS - 181)) | (1 << (fugue_sqlParser.LOGICAL - 181)) | (1 << (fugue_sqlParser.MACRO - 181)) | (1 << (fugue_sqlParser.MAP - 181)) | (1 << (fugue_sqlParser.MATCHED - 181)) | (1 << (fugue_sqlParser.MERGE - 181)) | (1 << (fugue_sqlParser.MINUTE - 181)) | (1 << (fugue_sqlParser.MONTH - 181)) | (1 << (fugue_sqlParser.MSCK - 181)) | (1 << (fugue_sqlParser.NAMESPACE - 181)) | (1 << (fugue_sqlParser.NAMESPACES - 181)) | (1 << (fugue_sqlParser.NATURAL - 181)) | (1 << (fugue_sqlParser.NO - 181)) | (1 << (fugue_sqlParser.NOT - 181)) | (1 << (fugue_sqlParser.THENULL - 181)) | (1 << (fugue_sqlParser.THENULLS - 181)) | (1 << (fugue_sqlParser.OF - 181)) | (1 << (fugue_sqlParser.ON - 181)) | (1 << (fugue_sqlParser.ONLY - 181)) | (1 << (fugue_sqlParser.OPTION - 181)) | (1 << (fugue_sqlParser.OPTIONS - 181)) | (1 << (fugue_sqlParser.OR - 181)) | (1 << (fugue_sqlParser.ORDER - 181)) | (1 << (fugue_sqlParser.OUT - 181)) | (1 << (fugue_sqlParser.OUTER - 181)) | (1 << (fugue_sqlParser.OUTPUTFORMAT - 181)) | (1 << (fugue_sqlParser.OVER - 181)) | (1 << (fugue_sqlParser.OVERLAPS - 181)) | (1 << (fugue_sqlParser.OVERLAY - 181)) | (1 << (fugue_sqlParser.OVERWRITE - 181)) | (1 << (fugue_sqlParser.PARTITION - 181)) | (1 << (fugue_sqlParser.PARTITIONED - 181)) | (1 << (fugue_sqlParser.PARTITIONS - 181)) | (1 << (fugue_sqlParser.PERCENTLIT - 181)) | (1 << (fugue_sqlParser.PIVOT - 181)) | (1 << (fugue_sqlParser.PLACING - 181)) | (1 << (fugue_sqlParser.POSITION - 181)) | (1 << (fugue_sqlParser.PRECEDING - 181)) | (1 << (fugue_sqlParser.PRIMARY - 181)) | (1 << (fugue_sqlParser.PRINCIPALS - 181)) | (1 << (fugue_sqlParser.PROPERTIES - 181)) | (1 << (fugue_sqlParser.PURGE - 181)) | (1 << (fugue_sqlParser.QUERY - 181)) | (1 << (fugue_sqlParser.RANGE - 181)) | (1 << (fugue_sqlParser.RECORDREADER - 181)) | (1 << (fugue_sqlParser.RECORDWRITER - 181)) | (1 << (fugue_sqlParser.RECOVER - 181)) | (1 << (fugue_sqlParser.REDUCE - 181)) | (1 << (fugue_sqlParser.REFERENCES - 181)) | (1 << (fugue_sqlParser.REFRESH - 181)) | (1 << (fugue_sqlParser.RENAME - 181)) | (1 << (fugue_sqlParser.REPAIR - 181)) | (1 << (fugue_sqlParser.REPLACE - 181)) | (1 << (fugue_sqlParser.RESET - 181)) | (1 << (fugue_sqlParser.RESTRICT - 181)) | (1 << (fugue_sqlParser.REVOKE - 181)) | (1 << (fugue_sqlParser.RIGHT - 181)) | (1 << (fugue_sqlParser.RLIKE - 181)) | (1 << (fugue_sqlParser.ROLE - 181)) | (1 << (fugue_sqlParser.ROLES - 181)) | (1 << (fugue_sqlParser.ROLLBACK - 181)) | (1 << (fugue_sqlParser.ROLLUP - 181)) | (1 << (fugue_sqlParser.ROW - 181)) | (1 << (fugue_sqlParser.ROWS - 181)))) != 0) or ((((_la - 245)) & ~0x3f) == 0 and ((1 << (_la - 245)) & ((1 << (fugue_sqlParser.SCHEMA - 245)) | (1 << (fugue_sqlParser.SECOND - 245)) | (1 << (fugue_sqlParser.SELECT - 245)) | (1 << (fugue_sqlParser.SEMI - 245)) | (1 << (fugue_sqlParser.SEPARATED - 245)) | (1 << (fugue_sqlParser.SERDE - 245)) | (1 << (fugue_sqlParser.SERDEPROPERTIES - 245)) | (1 << (fugue_sqlParser.SESSION_USER - 245)) | (1 << (fugue_sqlParser.SET - 245)) | (1 << (fugue_sqlParser.SETMINUS - 245)) | (1 << (fugue_sqlParser.SETS - 245)) | (1 << (fugue_sqlParser.SHOW - 245)) | (1 << (fugue_sqlParser.SKEWED - 245)) | (1 << (fugue_sqlParser.SOME - 245)) | (1 << (fugue_sqlParser.SORT - 245)) | (1 << (fugue_sqlParser.SORTED - 245)) | (1 << (fugue_sqlParser.START - 245)) | (1 << (fugue_sqlParser.STATISTICS - 245)) | (1 << (fugue_sqlParser.STORED - 245)) | (1 << (fugue_sqlParser.STRATIFY - 245)) | (1 << (fugue_sqlParser.STRUCT - 245)) | (1 << (fugue_sqlParser.SUBSTR - 245)) | (1 << (fugue_sqlParser.SUBSTRING - 245)) | (1 << (fugue_sqlParser.TABLE - 245)) | (1 << (fugue_sqlParser.TABLES - 245)) | (1 << (fugue_sqlParser.TABLESAMPLE - 245)) | (1 << (fugue_sqlParser.TBLPROPERTIES - 245)) | (1 << (fugue_sqlParser.TEMPORARY - 245)) | (1 << (fugue_sqlParser.TERMINATED - 245)) | (1 << (fugue_sqlParser.THEN - 245)) | (1 << (fugue_sqlParser.TO - 245)) | (1 << (fugue_sqlParser.TOUCH - 245)) | (1 << (fugue_sqlParser.TRAILING - 245)) | (1 << (fugue_sqlParser.TRANSACTION - 245)) | (1 << (fugue_sqlParser.TRANSACTIONS - 245)) | (1 << (fugue_sqlParser.TRANSFORM - 245)) | (1 << (fugue_sqlParser.TRIM - 245)) | (1 << (fugue_sqlParser.TRUE - 245)) | (1 << (fugue_sqlParser.TRUNCATE - 245)) | (1 << (fugue_sqlParser.TYPE - 245)) | (1 << (fugue_sqlParser.UNARCHIVE - 245)) | (1 << (fugue_sqlParser.UNBOUNDED - 245)) | (1 << (fugue_sqlParser.UNCACHE - 245)) | (1 << (fugue_sqlParser.UNION - 245)) | (1 << (fugue_sqlParser.UNIQUE - 245)) | (1 << (fugue_sqlParser.UNKNOWN - 245)) | (1 << (fugue_sqlParser.UNLOCK - 245)) | (1 << (fugue_sqlParser.UNSET - 245)) | (1 << (fugue_sqlParser.UPDATE - 245)) | (1 << (fugue_sqlParser.USE - 245)) | (1 << (fugue_sqlParser.USER - 245)) | (1 << (fugue_sqlParser.USING - 245)) | (1 << (fugue_sqlParser.VALUES - 245)) | (1 << (fugue_sqlParser.VIEW - 245)) | (1 << (fugue_sqlParser.VIEWS - 245)) | (1 << (fugue_sqlParser.WHEN - 245)) | (1 << (fugue_sqlParser.WHERE - 245)) | (1 << (fugue_sqlParser.WINDOW - 245)) | (1 << (fugue_sqlParser.WITH - 245)) | (1 << (fugue_sqlParser.YEAR - 245)))) != 0) or ((((_la - 319)) & ~0x3f) == 0 and ((1 << (_la - 319)) & ((1 << (fugue_sqlParser.DIV - 319)) | (1 << (fugue_sqlParser.IDENTIFIER - 319)) | (1 << (fugue_sqlParser.BACKQUOTED_IDENTIFIER - 319)))) != 0):
                self.state = 701
                localctx.assign = self.fugueAssignment()


            self.state = 704
            self.match(fugue_sqlParser.SUB)
            self.state = 706
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
            if la_ == 1:
                self.state = 705
                localctx.dfs = self.fugueDataFrames()


            self.state = 708
            self.match(fugue_sqlParser.USING)
            self.state = 709
            localctx.fugueUsing = self.fugueExtension()
            self.state = 711
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << fugue_sqlParser.T__2) | (1 << fugue_sqlParser.T__7) | (1 << fugue_sqlParser.PARAMS))) != 0):
                self.state = 710
                localctx.params = self.fugueParams()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueSqlEngineContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.fugueUsing = None # FugueExtensionContext
            self.params = None # FugueParamsContext

        def CONNECT(self):
            return self.getToken(fugue_sqlParser.CONNECT, 0)

        def fugueExtension(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueExtensionContext,0)


        def fugueParams(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueParamsContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueSqlEngine

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueSqlEngine" ):
                return visitor.visitFugueSqlEngine(self)
            else:
                return visitor.visitChildren(self)




    def fugueSqlEngine(self):

        localctx = fugue_sqlParser.FugueSqlEngineContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_fugueSqlEngine)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 713
            self.match(fugue_sqlParser.CONNECT)
            self.state = 714
            localctx.fugueUsing = self.fugueExtension()
            self.state = 716
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << fugue_sqlParser.T__2) | (1 << fugue_sqlParser.T__7) | (1 << fugue_sqlParser.PARAMS))) != 0):
                self.state = 715
                localctx.params = self.fugueParams()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueSingleFileContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.single = None # Token

        def SINGLE(self):
            return self.getToken(fugue_sqlParser.SINGLE, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueSingleFile

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueSingleFile" ):
                return visitor.visitFugueSingleFile(self)
            else:
                return visitor.visitChildren(self)




    def fugueSingleFile(self):

        localctx = fugue_sqlParser.FugueSingleFileContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_fugueSingleFile)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 718
            localctx.single = self.match(fugue_sqlParser.SINGLE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueLoadColumnsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.schema = None # FugueSchemaContext
            self.cols = None # FugueColsContext

        def fugueSchema(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSchemaContext,0)


        def fugueCols(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueColsContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueLoadColumns

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueLoadColumns" ):
                return visitor.visitFugueLoadColumns(self)
            else:
                return visitor.visitChildren(self)




    def fugueLoadColumns(self):

        localctx = fugue_sqlParser.FugueLoadColumnsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_fugueLoadColumns)
        try:
            self.state = 722
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 720
                localctx.schema = self.fugueSchema()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 721
                localctx.cols = self.fugueCols()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueSaveModeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TO(self):
            return self.getToken(fugue_sqlParser.TO, 0)

        def OVERWRITE(self):
            return self.getToken(fugue_sqlParser.OVERWRITE, 0)

        def APPEND(self):
            return self.getToken(fugue_sqlParser.APPEND, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueSaveMode

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueSaveMode" ):
                return visitor.visitFugueSaveMode(self)
            else:
                return visitor.visitChildren(self)




    def fugueSaveMode(self):

        localctx = fugue_sqlParser.FugueSaveModeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_fugueSaveMode)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 724
            _la = self._input.LA(1)
            if not(_la==fugue_sqlParser.APPEND or _la==fugue_sqlParser.OVERWRITE or _la==fugue_sqlParser.TO):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueFileFormatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARQUET(self):
            return self.getToken(fugue_sqlParser.PARQUET, 0)

        def CSV(self):
            return self.getToken(fugue_sqlParser.CSV, 0)

        def JSON(self):
            return self.getToken(fugue_sqlParser.JSON, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueFileFormat

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueFileFormat" ):
                return visitor.visitFugueFileFormat(self)
            else:
                return visitor.visitChildren(self)




    def fugueFileFormat(self):

        localctx = fugue_sqlParser.FugueFileFormatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_fugueFileFormat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 726
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << fugue_sqlParser.PARQUET) | (1 << fugue_sqlParser.CSV) | (1 << fugue_sqlParser.JSON))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FuguePathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fuguePath

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFuguePath" ):
                return visitor.visitFuguePath(self)
            else:
                return visitor.visitChildren(self)




    def fuguePath(self):

        localctx = fugue_sqlParser.FuguePathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_fuguePath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 728
            self.match(fugue_sqlParser.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueCheckpointContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueCheckpoint

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class FugueCheckpointDeterministicContext(FugueCheckpointContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.FugueCheckpointContext
            super().__init__(parser)
            self.ns = None # FugueCheckpointNamespaceContext
            self.partition = None # FuguePrepartitionContext
            self.single = None # FugueSingleFileContext
            self.params = None # FugueParamsContext
            self.copyFrom(ctx)

        def DETERMINISTIC(self):
            return self.getToken(fugue_sqlParser.DETERMINISTIC, 0)
        def CHECKPOINT(self):
            return self.getToken(fugue_sqlParser.CHECKPOINT, 0)
        def LAZY(self):
            return self.getToken(fugue_sqlParser.LAZY, 0)
        def fugueCheckpointNamespace(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueCheckpointNamespaceContext,0)

        def fuguePrepartition(self):
            return self.getTypedRuleContext(fugue_sqlParser.FuguePrepartitionContext,0)

        def fugueSingleFile(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSingleFileContext,0)

        def fugueParams(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueParamsContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueCheckpointDeterministic" ):
                return visitor.visitFugueCheckpointDeterministic(self)
            else:
                return visitor.visitChildren(self)


    class FugueCheckpointWeakContext(FugueCheckpointContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.FugueCheckpointContext
            super().__init__(parser)
            self.params = None # FugueParamsContext
            self.copyFrom(ctx)

        def PERSIST(self):
            return self.getToken(fugue_sqlParser.PERSIST, 0)
        def WEAK(self):
            return self.getToken(fugue_sqlParser.WEAK, 0)
        def CHECKPOINT(self):
            return self.getToken(fugue_sqlParser.CHECKPOINT, 0)
        def LAZY(self):
            return self.getToken(fugue_sqlParser.LAZY, 0)
        def fugueParams(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueParamsContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueCheckpointWeak" ):
                return visitor.visitFugueCheckpointWeak(self)
            else:
                return visitor.visitChildren(self)


    class FugueCheckpointStrongContext(FugueCheckpointContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.FugueCheckpointContext
            super().__init__(parser)
            self.partition = None # FuguePrepartitionContext
            self.single = None # FugueSingleFileContext
            self.params = None # FugueParamsContext
            self.copyFrom(ctx)

        def CHECKPOINT(self):
            return self.getToken(fugue_sqlParser.CHECKPOINT, 0)
        def LAZY(self):
            return self.getToken(fugue_sqlParser.LAZY, 0)
        def STRONG(self):
            return self.getToken(fugue_sqlParser.STRONG, 0)
        def fuguePrepartition(self):
            return self.getTypedRuleContext(fugue_sqlParser.FuguePrepartitionContext,0)

        def fugueSingleFile(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSingleFileContext,0)

        def fugueParams(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueParamsContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueCheckpointStrong" ):
                return visitor.visitFugueCheckpointStrong(self)
            else:
                return visitor.visitChildren(self)



    def fugueCheckpoint(self):

        localctx = fugue_sqlParser.FugueCheckpointContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_fugueCheckpoint)
        self._la = 0 # Token type
        try:
            self.state = 774
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.FugueCheckpointWeakContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 731
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.LAZY:
                    self.state = 730
                    self.match(fugue_sqlParser.LAZY)


                self.state = 736
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [fugue_sqlParser.PERSIST]:
                    self.state = 733
                    self.match(fugue_sqlParser.PERSIST)
                    pass
                elif token in [fugue_sqlParser.WEAK]:
                    self.state = 734
                    self.match(fugue_sqlParser.WEAK)
                    self.state = 735
                    self.match(fugue_sqlParser.CHECKPOINT)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 739
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << fugue_sqlParser.T__2) | (1 << fugue_sqlParser.T__7) | (1 << fugue_sqlParser.PARAMS))) != 0):
                    self.state = 738
                    localctx.params = self.fugueParams()


                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.FugueCheckpointStrongContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 742
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.LAZY:
                    self.state = 741
                    self.match(fugue_sqlParser.LAZY)


                self.state = 745
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.STRONG:
                    self.state = 744
                    self.match(fugue_sqlParser.STRONG)


                self.state = 747
                self.match(fugue_sqlParser.CHECKPOINT)
                self.state = 749
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << fugue_sqlParser.HASH) | (1 << fugue_sqlParser.RAND) | (1 << fugue_sqlParser.EVEN) | (1 << fugue_sqlParser.PREPARTITION))) != 0):
                    self.state = 748
                    localctx.partition = self.fuguePrepartition()


                self.state = 752
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.SINGLE:
                    self.state = 751
                    localctx.single = self.fugueSingleFile()


                self.state = 755
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << fugue_sqlParser.T__2) | (1 << fugue_sqlParser.T__7) | (1 << fugue_sqlParser.PARAMS))) != 0):
                    self.state = 754
                    localctx.params = self.fugueParams()


                pass

            elif la_ == 3:
                localctx = fugue_sqlParser.FugueCheckpointDeterministicContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 758
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.LAZY:
                    self.state = 757
                    self.match(fugue_sqlParser.LAZY)


                self.state = 760
                self.match(fugue_sqlParser.DETERMINISTIC)
                self.state = 761
                self.match(fugue_sqlParser.CHECKPOINT)
                self.state = 763
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.STRING:
                    self.state = 762
                    localctx.ns = self.fugueCheckpointNamespace()


                self.state = 766
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << fugue_sqlParser.HASH) | (1 << fugue_sqlParser.RAND) | (1 << fugue_sqlParser.EVEN) | (1 << fugue_sqlParser.PREPARTITION))) != 0):
                    self.state = 765
                    localctx.partition = self.fuguePrepartition()


                self.state = 769
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.SINGLE:
                    self.state = 768
                    localctx.single = self.fugueSingleFile()


                self.state = 772
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << fugue_sqlParser.T__2) | (1 << fugue_sqlParser.T__7) | (1 << fugue_sqlParser.PARAMS))) != 0):
                    self.state = 771
                    localctx.params = self.fugueParams()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueCheckpointNamespaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueCheckpointNamespace

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueCheckpointNamespace" ):
                return visitor.visitFugueCheckpointNamespace(self)
            else:
                return visitor.visitChildren(self)




    def fugueCheckpointNamespace(self):

        localctx = fugue_sqlParser.FugueCheckpointNamespaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_fugueCheckpointNamespace)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 776
            self.match(fugue_sqlParser.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueYieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # FugueIdentifierContext

        def YIELD(self):
            return self.getToken(fugue_sqlParser.YIELD, 0)

        def FILE(self):
            return self.getToken(fugue_sqlParser.FILE, 0)

        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)

        def fugueIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueIdentifierContext,0)


        def DATAFRAME(self):
            return self.getToken(fugue_sqlParser.DATAFRAME, 0)

        def LOCAL(self):
            return self.getToken(fugue_sqlParser.LOCAL, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueYield

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueYield" ):
                return visitor.visitFugueYield(self)
            else:
                return visitor.visitChildren(self)




    def fugueYield(self):

        localctx = fugue_sqlParser.FugueYieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_fugueYield)
        self._la = 0 # Token type
        try:
            self.state = 793
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,79,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 778
                self.match(fugue_sqlParser.YIELD)
                self.state = 779
                self.match(fugue_sqlParser.FILE)
                self.state = 782
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
                if la_ == 1:
                    self.state = 780
                    self.match(fugue_sqlParser.AS)
                    self.state = 781
                    localctx.name = self.fugueIdentifier()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 784
                self.match(fugue_sqlParser.YIELD)
                self.state = 786
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.LOCAL:
                    self.state = 785
                    self.match(fugue_sqlParser.LOCAL)


                self.state = 788
                self.match(fugue_sqlParser.DATAFRAME)
                self.state = 791
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
                if la_ == 1:
                    self.state = 789
                    self.match(fugue_sqlParser.AS)
                    self.state = 790
                    localctx.name = self.fugueIdentifier()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueBroadcastContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BROADCAST(self):
            return self.getToken(fugue_sqlParser.BROADCAST, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueBroadcast

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueBroadcast" ):
                return visitor.visitFugueBroadcast(self)
            else:
                return visitor.visitChildren(self)




    def fugueBroadcast(self):

        localctx = fugue_sqlParser.FugueBroadcastContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_fugueBroadcast)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 795
            self.match(fugue_sqlParser.BROADCAST)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueDataFramesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueDataFrames

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class FugueDataFramesDictContext(FugueDataFramesContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.FugueDataFramesContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def fugueDataFramePair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.FugueDataFramePairContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.FugueDataFramePairContext,i)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueDataFramesDict" ):
                return visitor.visitFugueDataFramesDict(self)
            else:
                return visitor.visitChildren(self)


    class FugueDataFramesListContext(FugueDataFramesContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.FugueDataFramesContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def fugueDataFrame(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.FugueDataFrameContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.FugueDataFrameContext,i)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueDataFramesList" ):
                return visitor.visitFugueDataFramesList(self)
            else:
                return visitor.visitChildren(self)



    def fugueDataFrames(self):

        localctx = fugue_sqlParser.FugueDataFramesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_fugueDataFrames)
        try:
            self.state = 813
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.FugueDataFramesListContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 797
                self.fugueDataFrame()
                self.state = 802
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,80,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 798
                        self.match(fugue_sqlParser.T__0)
                        self.state = 799
                        self.fugueDataFrame() 
                    self.state = 804
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,80,self._ctx)

                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.FugueDataFramesDictContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 805
                self.fugueDataFramePair()
                self.state = 810
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,81,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 806
                        self.match(fugue_sqlParser.T__0)
                        self.state = 807
                        self.fugueDataFramePair() 
                    self.state = 812
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,81,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueDataFramePairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.key = None # FugueIdentifierContext
            self.value = None # FugueDataFrameContext

        def fugueIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueIdentifierContext,0)


        def EQUAL(self):
            return self.getToken(fugue_sqlParser.EQUAL, 0)

        def fugueDataFrame(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueDataFrameContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueDataFramePair

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueDataFramePair" ):
                return visitor.visitFugueDataFramePair(self)
            else:
                return visitor.visitChildren(self)




    def fugueDataFramePair(self):

        localctx = fugue_sqlParser.FugueDataFramePairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_fugueDataFramePair)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 815
            localctx.key = self.fugueIdentifier()
            self.state = 816
            _la = self._input.LA(1)
            if not(_la==fugue_sqlParser.T__1 or _la==fugue_sqlParser.EQUAL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 817
            localctx.value = self.fugueDataFrame()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueDataFrameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueDataFrame

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class FugueDataFrameSourceContext(FugueDataFrameContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.FugueDataFrameContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def fugueIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueIdentifierContext,0)

        def fugueDataFrameMember(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueDataFrameMemberContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueDataFrameSource" ):
                return visitor.visitFugueDataFrameSource(self)
            else:
                return visitor.visitChildren(self)


    class FugueDataFrameNestedContext(FugueDataFrameContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.FugueDataFrameContext
            super().__init__(parser)
            self.task = None # FugueNestableTaskContext
            self.copyFrom(ctx)

        def fugueNestableTask(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueNestableTaskContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueDataFrameNested" ):
                return visitor.visitFugueDataFrameNested(self)
            else:
                return visitor.visitChildren(self)



    def fugueDataFrame(self):

        localctx = fugue_sqlParser.FugueDataFrameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_fugueDataFrame)
        try:
            self.state = 827
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [fugue_sqlParser.ADD, fugue_sqlParser.AFTER, fugue_sqlParser.ALL, fugue_sqlParser.ALTER, fugue_sqlParser.ANALYZE, fugue_sqlParser.AND, fugue_sqlParser.ANTI, fugue_sqlParser.ANY, fugue_sqlParser.ARCHIVE, fugue_sqlParser.ARRAY, fugue_sqlParser.AS, fugue_sqlParser.ASC, fugue_sqlParser.AT, fugue_sqlParser.AUTHORIZATION, fugue_sqlParser.BETWEEN, fugue_sqlParser.BOTH, fugue_sqlParser.BUCKET, fugue_sqlParser.BUCKETS, fugue_sqlParser.BY, fugue_sqlParser.CACHE, fugue_sqlParser.CASCADE, fugue_sqlParser.CASE, fugue_sqlParser.CAST, fugue_sqlParser.CHANGE, fugue_sqlParser.CHECK, fugue_sqlParser.CLEAR, fugue_sqlParser.CLUSTER, fugue_sqlParser.CLUSTERED, fugue_sqlParser.CODEGEN, fugue_sqlParser.COLLATE, fugue_sqlParser.COLLECTION, fugue_sqlParser.COLUMN, fugue_sqlParser.COLUMNS, fugue_sqlParser.COMMENT, fugue_sqlParser.COMMIT, fugue_sqlParser.COMPACT, fugue_sqlParser.COMPACTIONS, fugue_sqlParser.COMPUTE, fugue_sqlParser.CONCATENATE, fugue_sqlParser.CONSTRAINT, fugue_sqlParser.COST, fugue_sqlParser.CREATE, fugue_sqlParser.CROSS, fugue_sqlParser.CUBE, fugue_sqlParser.CURRENT, fugue_sqlParser.CURRENT_DATE, fugue_sqlParser.CURRENT_TIME, fugue_sqlParser.CURRENT_TIMESTAMP, fugue_sqlParser.CURRENT_USER, fugue_sqlParser.DATA, fugue_sqlParser.DATABASE, fugue_sqlParser.DATABASES, fugue_sqlParser.DAY, fugue_sqlParser.DBPROPERTIES, fugue_sqlParser.DEFINED, fugue_sqlParser.DELETE, fugue_sqlParser.DELIMITED, fugue_sqlParser.DESC, fugue_sqlParser.DESCRIBE, fugue_sqlParser.DFS, fugue_sqlParser.DIRECTORIES, fugue_sqlParser.DIRECTORY, fugue_sqlParser.DISTINCT, fugue_sqlParser.DISTRIBUTE, fugue_sqlParser.DROP, fugue_sqlParser.ELSE, fugue_sqlParser.END, fugue_sqlParser.ESCAPE, fugue_sqlParser.ESCAPED, fugue_sqlParser.EXCEPT, fugue_sqlParser.EXCHANGE, fugue_sqlParser.EXISTS, fugue_sqlParser.EXPLAIN, fugue_sqlParser.EXPORT, fugue_sqlParser.EXTENDED, fugue_sqlParser.EXTERNAL, fugue_sqlParser.EXTRACT, fugue_sqlParser.FALSE, fugue_sqlParser.FETCH, fugue_sqlParser.FIELDS, fugue_sqlParser.FILTER, fugue_sqlParser.FILEFORMAT, fugue_sqlParser.FIRST, fugue_sqlParser.FOLLOWING, fugue_sqlParser.FOR, fugue_sqlParser.FOREIGN, fugue_sqlParser.FORMAT, fugue_sqlParser.FORMATTED, fugue_sqlParser.FROM, fugue_sqlParser.FULL, fugue_sqlParser.FUNCTION, fugue_sqlParser.FUNCTIONS, fugue_sqlParser.GLOBAL, fugue_sqlParser.GRANT, fugue_sqlParser.GROUP, fugue_sqlParser.GROUPING, fugue_sqlParser.HAVING, fugue_sqlParser.HOUR, fugue_sqlParser.IF, fugue_sqlParser.IGNORE, fugue_sqlParser.IMPORT, fugue_sqlParser.IN, fugue_sqlParser.INDEX, fugue_sqlParser.INDEXES, fugue_sqlParser.INNER, fugue_sqlParser.INPATH, fugue_sqlParser.INPUTFORMAT, fugue_sqlParser.INSERT, fugue_sqlParser.INTERSECT, fugue_sqlParser.INTERVAL, fugue_sqlParser.INTO, fugue_sqlParser.IS, fugue_sqlParser.ITEMS, fugue_sqlParser.JOIN, fugue_sqlParser.KEYS, fugue_sqlParser.LAST, fugue_sqlParser.LATERAL, fugue_sqlParser.LAZY, fugue_sqlParser.LEADING, fugue_sqlParser.LEFT, fugue_sqlParser.LIKE, fugue_sqlParser.LIMIT, fugue_sqlParser.LINES, fugue_sqlParser.LIST, fugue_sqlParser.LOAD, fugue_sqlParser.LOCAL, fugue_sqlParser.LOCATION, fugue_sqlParser.LOCK, fugue_sqlParser.LOCKS, fugue_sqlParser.LOGICAL, fugue_sqlParser.MACRO, fugue_sqlParser.MAP, fugue_sqlParser.MATCHED, fugue_sqlParser.MERGE, fugue_sqlParser.MINUTE, fugue_sqlParser.MONTH, fugue_sqlParser.MSCK, fugue_sqlParser.NAMESPACE, fugue_sqlParser.NAMESPACES, fugue_sqlParser.NATURAL, fugue_sqlParser.NO, fugue_sqlParser.NOT, fugue_sqlParser.THENULL, fugue_sqlParser.THENULLS, fugue_sqlParser.OF, fugue_sqlParser.ON, fugue_sqlParser.ONLY, fugue_sqlParser.OPTION, fugue_sqlParser.OPTIONS, fugue_sqlParser.OR, fugue_sqlParser.ORDER, fugue_sqlParser.OUT, fugue_sqlParser.OUTER, fugue_sqlParser.OUTPUTFORMAT, fugue_sqlParser.OVER, fugue_sqlParser.OVERLAPS, fugue_sqlParser.OVERLAY, fugue_sqlParser.OVERWRITE, fugue_sqlParser.PARTITION, fugue_sqlParser.PARTITIONED, fugue_sqlParser.PARTITIONS, fugue_sqlParser.PERCENTLIT, fugue_sqlParser.PIVOT, fugue_sqlParser.PLACING, fugue_sqlParser.POSITION, fugue_sqlParser.PRECEDING, fugue_sqlParser.PRIMARY, fugue_sqlParser.PRINCIPALS, fugue_sqlParser.PROPERTIES, fugue_sqlParser.PURGE, fugue_sqlParser.QUERY, fugue_sqlParser.RANGE, fugue_sqlParser.RECORDREADER, fugue_sqlParser.RECORDWRITER, fugue_sqlParser.RECOVER, fugue_sqlParser.REDUCE, fugue_sqlParser.REFERENCES, fugue_sqlParser.REFRESH, fugue_sqlParser.RENAME, fugue_sqlParser.REPAIR, fugue_sqlParser.REPLACE, fugue_sqlParser.RESET, fugue_sqlParser.RESTRICT, fugue_sqlParser.REVOKE, fugue_sqlParser.RIGHT, fugue_sqlParser.RLIKE, fugue_sqlParser.ROLE, fugue_sqlParser.ROLES, fugue_sqlParser.ROLLBACK, fugue_sqlParser.ROLLUP, fugue_sqlParser.ROW, fugue_sqlParser.ROWS, fugue_sqlParser.SCHEMA, fugue_sqlParser.SECOND, fugue_sqlParser.SELECT, fugue_sqlParser.SEMI, fugue_sqlParser.SEPARATED, fugue_sqlParser.SERDE, fugue_sqlParser.SERDEPROPERTIES, fugue_sqlParser.SESSION_USER, fugue_sqlParser.SET, fugue_sqlParser.SETMINUS, fugue_sqlParser.SETS, fugue_sqlParser.SHOW, fugue_sqlParser.SKEWED, fugue_sqlParser.SOME, fugue_sqlParser.SORT, fugue_sqlParser.SORTED, fugue_sqlParser.START, fugue_sqlParser.STATISTICS, fugue_sqlParser.STORED, fugue_sqlParser.STRATIFY, fugue_sqlParser.STRUCT, fugue_sqlParser.SUBSTR, fugue_sqlParser.SUBSTRING, fugue_sqlParser.TABLE, fugue_sqlParser.TABLES, fugue_sqlParser.TABLESAMPLE, fugue_sqlParser.TBLPROPERTIES, fugue_sqlParser.TEMPORARY, fugue_sqlParser.TERMINATED, fugue_sqlParser.THEN, fugue_sqlParser.TO, fugue_sqlParser.TOUCH, fugue_sqlParser.TRAILING, fugue_sqlParser.TRANSACTION, fugue_sqlParser.TRANSACTIONS, fugue_sqlParser.TRANSFORM, fugue_sqlParser.TRIM, fugue_sqlParser.TRUE, fugue_sqlParser.TRUNCATE, fugue_sqlParser.TYPE, fugue_sqlParser.UNARCHIVE, fugue_sqlParser.UNBOUNDED, fugue_sqlParser.UNCACHE, fugue_sqlParser.UNION, fugue_sqlParser.UNIQUE, fugue_sqlParser.UNKNOWN, fugue_sqlParser.UNLOCK, fugue_sqlParser.UNSET, fugue_sqlParser.UPDATE, fugue_sqlParser.USE, fugue_sqlParser.USER, fugue_sqlParser.USING, fugue_sqlParser.VALUES, fugue_sqlParser.VIEW, fugue_sqlParser.VIEWS, fugue_sqlParser.WHEN, fugue_sqlParser.WHERE, fugue_sqlParser.WINDOW, fugue_sqlParser.WITH, fugue_sqlParser.YEAR, fugue_sqlParser.DIV, fugue_sqlParser.IDENTIFIER, fugue_sqlParser.BACKQUOTED_IDENTIFIER]:
                localctx = fugue_sqlParser.FugueDataFrameSourceContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 819
                self.fugueIdentifier()
                self.state = 821
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
                if la_ == 1:
                    self.state = 820
                    self.fugueDataFrameMember()


                pass
            elif token in [fugue_sqlParser.T__2]:
                localctx = fugue_sqlParser.FugueDataFrameNestedContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 823
                self.match(fugue_sqlParser.T__2)
                self.state = 824
                localctx.task = self.fugueNestableTask()
                self.state = 825
                self.match(fugue_sqlParser.T__3)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueDataFrameMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.index = None # Token
            self.key = None # FugueIdentifierContext

        def INTEGER_VALUE(self):
            return self.getToken(fugue_sqlParser.INTEGER_VALUE, 0)

        def fugueIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueIdentifierContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueDataFrameMember

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueDataFrameMember" ):
                return visitor.visitFugueDataFrameMember(self)
            else:
                return visitor.visitChildren(self)




    def fugueDataFrameMember(self):

        localctx = fugue_sqlParser.FugueDataFrameMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_fugueDataFrameMember)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 829
            self.match(fugue_sqlParser.T__4)
            self.state = 832
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [fugue_sqlParser.INTEGER_VALUE]:
                self.state = 830
                localctx.index = self.match(fugue_sqlParser.INTEGER_VALUE)
                pass
            elif token in [fugue_sqlParser.ADD, fugue_sqlParser.AFTER, fugue_sqlParser.ALL, fugue_sqlParser.ALTER, fugue_sqlParser.ANALYZE, fugue_sqlParser.AND, fugue_sqlParser.ANTI, fugue_sqlParser.ANY, fugue_sqlParser.ARCHIVE, fugue_sqlParser.ARRAY, fugue_sqlParser.AS, fugue_sqlParser.ASC, fugue_sqlParser.AT, fugue_sqlParser.AUTHORIZATION, fugue_sqlParser.BETWEEN, fugue_sqlParser.BOTH, fugue_sqlParser.BUCKET, fugue_sqlParser.BUCKETS, fugue_sqlParser.BY, fugue_sqlParser.CACHE, fugue_sqlParser.CASCADE, fugue_sqlParser.CASE, fugue_sqlParser.CAST, fugue_sqlParser.CHANGE, fugue_sqlParser.CHECK, fugue_sqlParser.CLEAR, fugue_sqlParser.CLUSTER, fugue_sqlParser.CLUSTERED, fugue_sqlParser.CODEGEN, fugue_sqlParser.COLLATE, fugue_sqlParser.COLLECTION, fugue_sqlParser.COLUMN, fugue_sqlParser.COLUMNS, fugue_sqlParser.COMMENT, fugue_sqlParser.COMMIT, fugue_sqlParser.COMPACT, fugue_sqlParser.COMPACTIONS, fugue_sqlParser.COMPUTE, fugue_sqlParser.CONCATENATE, fugue_sqlParser.CONSTRAINT, fugue_sqlParser.COST, fugue_sqlParser.CREATE, fugue_sqlParser.CROSS, fugue_sqlParser.CUBE, fugue_sqlParser.CURRENT, fugue_sqlParser.CURRENT_DATE, fugue_sqlParser.CURRENT_TIME, fugue_sqlParser.CURRENT_TIMESTAMP, fugue_sqlParser.CURRENT_USER, fugue_sqlParser.DATA, fugue_sqlParser.DATABASE, fugue_sqlParser.DATABASES, fugue_sqlParser.DAY, fugue_sqlParser.DBPROPERTIES, fugue_sqlParser.DEFINED, fugue_sqlParser.DELETE, fugue_sqlParser.DELIMITED, fugue_sqlParser.DESC, fugue_sqlParser.DESCRIBE, fugue_sqlParser.DFS, fugue_sqlParser.DIRECTORIES, fugue_sqlParser.DIRECTORY, fugue_sqlParser.DISTINCT, fugue_sqlParser.DISTRIBUTE, fugue_sqlParser.DROP, fugue_sqlParser.ELSE, fugue_sqlParser.END, fugue_sqlParser.ESCAPE, fugue_sqlParser.ESCAPED, fugue_sqlParser.EXCEPT, fugue_sqlParser.EXCHANGE, fugue_sqlParser.EXISTS, fugue_sqlParser.EXPLAIN, fugue_sqlParser.EXPORT, fugue_sqlParser.EXTENDED, fugue_sqlParser.EXTERNAL, fugue_sqlParser.EXTRACT, fugue_sqlParser.FALSE, fugue_sqlParser.FETCH, fugue_sqlParser.FIELDS, fugue_sqlParser.FILTER, fugue_sqlParser.FILEFORMAT, fugue_sqlParser.FIRST, fugue_sqlParser.FOLLOWING, fugue_sqlParser.FOR, fugue_sqlParser.FOREIGN, fugue_sqlParser.FORMAT, fugue_sqlParser.FORMATTED, fugue_sqlParser.FROM, fugue_sqlParser.FULL, fugue_sqlParser.FUNCTION, fugue_sqlParser.FUNCTIONS, fugue_sqlParser.GLOBAL, fugue_sqlParser.GRANT, fugue_sqlParser.GROUP, fugue_sqlParser.GROUPING, fugue_sqlParser.HAVING, fugue_sqlParser.HOUR, fugue_sqlParser.IF, fugue_sqlParser.IGNORE, fugue_sqlParser.IMPORT, fugue_sqlParser.IN, fugue_sqlParser.INDEX, fugue_sqlParser.INDEXES, fugue_sqlParser.INNER, fugue_sqlParser.INPATH, fugue_sqlParser.INPUTFORMAT, fugue_sqlParser.INSERT, fugue_sqlParser.INTERSECT, fugue_sqlParser.INTERVAL, fugue_sqlParser.INTO, fugue_sqlParser.IS, fugue_sqlParser.ITEMS, fugue_sqlParser.JOIN, fugue_sqlParser.KEYS, fugue_sqlParser.LAST, fugue_sqlParser.LATERAL, fugue_sqlParser.LAZY, fugue_sqlParser.LEADING, fugue_sqlParser.LEFT, fugue_sqlParser.LIKE, fugue_sqlParser.LIMIT, fugue_sqlParser.LINES, fugue_sqlParser.LIST, fugue_sqlParser.LOAD, fugue_sqlParser.LOCAL, fugue_sqlParser.LOCATION, fugue_sqlParser.LOCK, fugue_sqlParser.LOCKS, fugue_sqlParser.LOGICAL, fugue_sqlParser.MACRO, fugue_sqlParser.MAP, fugue_sqlParser.MATCHED, fugue_sqlParser.MERGE, fugue_sqlParser.MINUTE, fugue_sqlParser.MONTH, fugue_sqlParser.MSCK, fugue_sqlParser.NAMESPACE, fugue_sqlParser.NAMESPACES, fugue_sqlParser.NATURAL, fugue_sqlParser.NO, fugue_sqlParser.NOT, fugue_sqlParser.THENULL, fugue_sqlParser.THENULLS, fugue_sqlParser.OF, fugue_sqlParser.ON, fugue_sqlParser.ONLY, fugue_sqlParser.OPTION, fugue_sqlParser.OPTIONS, fugue_sqlParser.OR, fugue_sqlParser.ORDER, fugue_sqlParser.OUT, fugue_sqlParser.OUTER, fugue_sqlParser.OUTPUTFORMAT, fugue_sqlParser.OVER, fugue_sqlParser.OVERLAPS, fugue_sqlParser.OVERLAY, fugue_sqlParser.OVERWRITE, fugue_sqlParser.PARTITION, fugue_sqlParser.PARTITIONED, fugue_sqlParser.PARTITIONS, fugue_sqlParser.PERCENTLIT, fugue_sqlParser.PIVOT, fugue_sqlParser.PLACING, fugue_sqlParser.POSITION, fugue_sqlParser.PRECEDING, fugue_sqlParser.PRIMARY, fugue_sqlParser.PRINCIPALS, fugue_sqlParser.PROPERTIES, fugue_sqlParser.PURGE, fugue_sqlParser.QUERY, fugue_sqlParser.RANGE, fugue_sqlParser.RECORDREADER, fugue_sqlParser.RECORDWRITER, fugue_sqlParser.RECOVER, fugue_sqlParser.REDUCE, fugue_sqlParser.REFERENCES, fugue_sqlParser.REFRESH, fugue_sqlParser.RENAME, fugue_sqlParser.REPAIR, fugue_sqlParser.REPLACE, fugue_sqlParser.RESET, fugue_sqlParser.RESTRICT, fugue_sqlParser.REVOKE, fugue_sqlParser.RIGHT, fugue_sqlParser.RLIKE, fugue_sqlParser.ROLE, fugue_sqlParser.ROLES, fugue_sqlParser.ROLLBACK, fugue_sqlParser.ROLLUP, fugue_sqlParser.ROW, fugue_sqlParser.ROWS, fugue_sqlParser.SCHEMA, fugue_sqlParser.SECOND, fugue_sqlParser.SELECT, fugue_sqlParser.SEMI, fugue_sqlParser.SEPARATED, fugue_sqlParser.SERDE, fugue_sqlParser.SERDEPROPERTIES, fugue_sqlParser.SESSION_USER, fugue_sqlParser.SET, fugue_sqlParser.SETMINUS, fugue_sqlParser.SETS, fugue_sqlParser.SHOW, fugue_sqlParser.SKEWED, fugue_sqlParser.SOME, fugue_sqlParser.SORT, fugue_sqlParser.SORTED, fugue_sqlParser.START, fugue_sqlParser.STATISTICS, fugue_sqlParser.STORED, fugue_sqlParser.STRATIFY, fugue_sqlParser.STRUCT, fugue_sqlParser.SUBSTR, fugue_sqlParser.SUBSTRING, fugue_sqlParser.TABLE, fugue_sqlParser.TABLES, fugue_sqlParser.TABLESAMPLE, fugue_sqlParser.TBLPROPERTIES, fugue_sqlParser.TEMPORARY, fugue_sqlParser.TERMINATED, fugue_sqlParser.THEN, fugue_sqlParser.TO, fugue_sqlParser.TOUCH, fugue_sqlParser.TRAILING, fugue_sqlParser.TRANSACTION, fugue_sqlParser.TRANSACTIONS, fugue_sqlParser.TRANSFORM, fugue_sqlParser.TRIM, fugue_sqlParser.TRUE, fugue_sqlParser.TRUNCATE, fugue_sqlParser.TYPE, fugue_sqlParser.UNARCHIVE, fugue_sqlParser.UNBOUNDED, fugue_sqlParser.UNCACHE, fugue_sqlParser.UNION, fugue_sqlParser.UNIQUE, fugue_sqlParser.UNKNOWN, fugue_sqlParser.UNLOCK, fugue_sqlParser.UNSET, fugue_sqlParser.UPDATE, fugue_sqlParser.USE, fugue_sqlParser.USER, fugue_sqlParser.USING, fugue_sqlParser.VALUES, fugue_sqlParser.VIEW, fugue_sqlParser.VIEWS, fugue_sqlParser.WHEN, fugue_sqlParser.WHERE, fugue_sqlParser.WINDOW, fugue_sqlParser.WITH, fugue_sqlParser.YEAR, fugue_sqlParser.DIV, fugue_sqlParser.IDENTIFIER, fugue_sqlParser.BACKQUOTED_IDENTIFIER]:
                self.state = 831
                localctx.key = self.fugueIdentifier()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 834
            self.match(fugue_sqlParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueAssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.varname = None # FugueIdentifierContext
            self.sign = None # FugueAssignmentSignContext

        def fugueIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueIdentifierContext,0)


        def fugueAssignmentSign(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueAssignmentSignContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueAssignment

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueAssignment" ):
                return visitor.visitFugueAssignment(self)
            else:
                return visitor.visitChildren(self)




    def fugueAssignment(self):

        localctx = fugue_sqlParser.FugueAssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_fugueAssignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 836
            localctx.varname = self.fugueIdentifier()
            self.state = 837
            localctx.sign = self.fugueAssignmentSign()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueAssignmentSignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUAL(self):
            return self.getToken(fugue_sqlParser.EQUAL, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueAssignmentSign

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueAssignmentSign" ):
                return visitor.visitFugueAssignmentSign(self)
            else:
                return visitor.visitChildren(self)




    def fugueAssignmentSign(self):

        localctx = fugue_sqlParser.FugueAssignmentSignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_fugueAssignmentSign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 839
            self.match(fugue_sqlParser.EQUAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueSingleOutputExtensionCommonWildContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.fugueUsing = None # FugueExtensionContext
            self.params = None # FugueParamsContext
            self.schema = None # FugueWildSchemaContext

        def USING(self):
            return self.getToken(fugue_sqlParser.USING, 0)

        def fugueExtension(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueExtensionContext,0)


        def SCHEMA(self):
            return self.getToken(fugue_sqlParser.SCHEMA, 0)

        def fugueParams(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueParamsContext,0)


        def fugueWildSchema(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueWildSchemaContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueSingleOutputExtensionCommonWild

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueSingleOutputExtensionCommonWild" ):
                return visitor.visitFugueSingleOutputExtensionCommonWild(self)
            else:
                return visitor.visitChildren(self)




    def fugueSingleOutputExtensionCommonWild(self):

        localctx = fugue_sqlParser.FugueSingleOutputExtensionCommonWildContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_fugueSingleOutputExtensionCommonWild)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 841
            self.match(fugue_sqlParser.USING)
            self.state = 842
            localctx.fugueUsing = self.fugueExtension()
            self.state = 844
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
            if la_ == 1:
                self.state = 843
                localctx.params = self.fugueParams()


            self.state = 848
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
            if la_ == 1:
                self.state = 846
                self.match(fugue_sqlParser.SCHEMA)
                self.state = 847
                localctx.schema = self.fugueWildSchema()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueSingleOutputExtensionCommonContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.fugueUsing = None # FugueExtensionContext
            self.params = None # FugueParamsContext
            self.schema = None # FugueSchemaContext

        def USING(self):
            return self.getToken(fugue_sqlParser.USING, 0)

        def fugueExtension(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueExtensionContext,0)


        def SCHEMA(self):
            return self.getToken(fugue_sqlParser.SCHEMA, 0)

        def fugueParams(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueParamsContext,0)


        def fugueSchema(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSchemaContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueSingleOutputExtensionCommon

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueSingleOutputExtensionCommon" ):
                return visitor.visitFugueSingleOutputExtensionCommon(self)
            else:
                return visitor.visitChildren(self)




    def fugueSingleOutputExtensionCommon(self):

        localctx = fugue_sqlParser.FugueSingleOutputExtensionCommonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_fugueSingleOutputExtensionCommon)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 850
            self.match(fugue_sqlParser.USING)
            self.state = 851
            localctx.fugueUsing = self.fugueExtension()
            self.state = 853
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
            if la_ == 1:
                self.state = 852
                localctx.params = self.fugueParams()


            self.state = 857
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
            if la_ == 1:
                self.state = 855
                self.match(fugue_sqlParser.SCHEMA)
                self.state = 856
                localctx.schema = self.fugueSchema()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueExtensionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fugueIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.FugueIdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.FugueIdentifierContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueExtension

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueExtension" ):
                return visitor.visitFugueExtension(self)
            else:
                return visitor.visitChildren(self)




    def fugueExtension(self):

        localctx = fugue_sqlParser.FugueExtensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_fugueExtension)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 859
            self.fugueIdentifier()
            self.state = 864
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,90,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 860
                    self.match(fugue_sqlParser.T__6)
                    self.state = 861
                    self.fugueIdentifier() 
                self.state = 866
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,90,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueSampleMethodContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.percentage = None # Token
            self.rows = None # Token

        def PERCENTLIT(self):
            return self.getToken(fugue_sqlParser.PERCENTLIT, 0)

        def INTEGER_VALUE(self):
            return self.getToken(fugue_sqlParser.INTEGER_VALUE, 0)

        def DECIMAL_VALUE(self):
            return self.getToken(fugue_sqlParser.DECIMAL_VALUE, 0)

        def ROWS(self):
            return self.getToken(fugue_sqlParser.ROWS, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueSampleMethod

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueSampleMethod" ):
                return visitor.visitFugueSampleMethod(self)
            else:
                return visitor.visitChildren(self)




    def fugueSampleMethod(self):

        localctx = fugue_sqlParser.FugueSampleMethodContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_fugueSampleMethod)
        self._la = 0 # Token type
        try:
            self.state = 871
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,91,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 867
                localctx.percentage = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.INTEGER_VALUE or _la==fugue_sqlParser.DECIMAL_VALUE):
                    localctx.percentage = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 868
                self.match(fugue_sqlParser.PERCENTLIT)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 869
                localctx.rows = self.match(fugue_sqlParser.INTEGER_VALUE)
                self.state = 870
                self.match(fugue_sqlParser.ROWS)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueZipTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CROSS(self):
            return self.getToken(fugue_sqlParser.CROSS, 0)

        def INNER(self):
            return self.getToken(fugue_sqlParser.INNER, 0)

        def LEFT(self):
            return self.getToken(fugue_sqlParser.LEFT, 0)

        def OUTER(self):
            return self.getToken(fugue_sqlParser.OUTER, 0)

        def RIGHT(self):
            return self.getToken(fugue_sqlParser.RIGHT, 0)

        def FULL(self):
            return self.getToken(fugue_sqlParser.FULL, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueZipType

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueZipType" ):
                return visitor.visitFugueZipType(self)
            else:
                return visitor.visitChildren(self)




    def fugueZipType(self):

        localctx = fugue_sqlParser.FugueZipTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_fugueZipType)
        try:
            self.state = 881
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [fugue_sqlParser.CROSS]:
                self.enterOuterAlt(localctx, 1)
                self.state = 873
                self.match(fugue_sqlParser.CROSS)
                pass
            elif token in [fugue_sqlParser.INNER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 874
                self.match(fugue_sqlParser.INNER)
                pass
            elif token in [fugue_sqlParser.LEFT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 875
                self.match(fugue_sqlParser.LEFT)
                self.state = 876
                self.match(fugue_sqlParser.OUTER)
                pass
            elif token in [fugue_sqlParser.RIGHT]:
                self.enterOuterAlt(localctx, 4)
                self.state = 877
                self.match(fugue_sqlParser.RIGHT)
                self.state = 878
                self.match(fugue_sqlParser.OUTER)
                pass
            elif token in [fugue_sqlParser.FULL]:
                self.enterOuterAlt(localctx, 5)
                self.state = 879
                self.match(fugue_sqlParser.FULL)
                self.state = 880
                self.match(fugue_sqlParser.OUTER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FuguePrepartitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.algo = None # FuguePartitionAlgoContext
            self.num = None # FuguePartitionNumContext
            self.by = None # FugueColsContext
            self.presort = None # FugueColsSortContext

        def PREPARTITION(self):
            return self.getToken(fugue_sqlParser.PREPARTITION, 0)

        def fuguePartitionNum(self):
            return self.getTypedRuleContext(fugue_sqlParser.FuguePartitionNumContext,0)


        def BY(self):
            return self.getToken(fugue_sqlParser.BY, 0)

        def PRESORT(self):
            return self.getToken(fugue_sqlParser.PRESORT, 0)

        def fuguePartitionAlgo(self):
            return self.getTypedRuleContext(fugue_sqlParser.FuguePartitionAlgoContext,0)


        def fugueCols(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueColsContext,0)


        def fugueColsSort(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueColsSortContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fuguePrepartition

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFuguePrepartition" ):
                return visitor.visitFuguePrepartition(self)
            else:
                return visitor.visitChildren(self)




    def fuguePrepartition(self):

        localctx = fugue_sqlParser.FuguePrepartitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_fuguePrepartition)
        self._la = 0 # Token type
        try:
            self.state = 906
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,98,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 884
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << fugue_sqlParser.HASH) | (1 << fugue_sqlParser.RAND) | (1 << fugue_sqlParser.EVEN))) != 0):
                    self.state = 883
                    localctx.algo = self.fuguePartitionAlgo()


                self.state = 886
                self.match(fugue_sqlParser.PREPARTITION)
                self.state = 887
                localctx.num = self.fuguePartitionNum(0)
                self.state = 890
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
                if la_ == 1:
                    self.state = 888
                    self.match(fugue_sqlParser.BY)
                    self.state = 889
                    localctx.by = self.fugueCols()


                self.state = 894
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
                if la_ == 1:
                    self.state = 892
                    self.match(fugue_sqlParser.PRESORT)
                    self.state = 893
                    localctx.presort = self.fugueColsSort()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 897
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << fugue_sqlParser.HASH) | (1 << fugue_sqlParser.RAND) | (1 << fugue_sqlParser.EVEN))) != 0):
                    self.state = 896
                    localctx.algo = self.fuguePartitionAlgo()


                self.state = 899
                self.match(fugue_sqlParser.PREPARTITION)
                self.state = 900
                self.match(fugue_sqlParser.BY)
                self.state = 901
                localctx.by = self.fugueCols()
                self.state = 904
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
                if la_ == 1:
                    self.state = 902
                    self.match(fugue_sqlParser.PRESORT)
                    self.state = 903
                    localctx.presort = self.fugueColsSort()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FuguePartitionAlgoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HASH(self):
            return self.getToken(fugue_sqlParser.HASH, 0)

        def RAND(self):
            return self.getToken(fugue_sqlParser.RAND, 0)

        def EVEN(self):
            return self.getToken(fugue_sqlParser.EVEN, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fuguePartitionAlgo

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFuguePartitionAlgo" ):
                return visitor.visitFuguePartitionAlgo(self)
            else:
                return visitor.visitChildren(self)




    def fuguePartitionAlgo(self):

        localctx = fugue_sqlParser.FuguePartitionAlgoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_fuguePartitionAlgo)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 908
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << fugue_sqlParser.HASH) | (1 << fugue_sqlParser.RAND) | (1 << fugue_sqlParser.EVEN))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FuguePartitionNumContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fuguePartitionNumber(self):
            return self.getTypedRuleContext(fugue_sqlParser.FuguePartitionNumberContext,0)


        def fuguePartitionNum(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.FuguePartitionNumContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.FuguePartitionNumContext,i)


        def PLUS(self):
            return self.getToken(fugue_sqlParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(fugue_sqlParser.MINUS, 0)

        def ASTERISK(self):
            return self.getToken(fugue_sqlParser.ASTERISK, 0)

        def SLASH(self):
            return self.getToken(fugue_sqlParser.SLASH, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fuguePartitionNum

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFuguePartitionNum" ):
                return visitor.visitFuguePartitionNum(self)
            else:
                return visitor.visitChildren(self)



    def fuguePartitionNum(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = fugue_sqlParser.FuguePartitionNumContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 94
        self.enterRecursionRule(localctx, 94, self.RULE_fuguePartitionNum, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 916
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [fugue_sqlParser.ROWCOUNT, fugue_sqlParser.CONCURRENCY, fugue_sqlParser.MINUS, fugue_sqlParser.INTEGER_VALUE, fugue_sqlParser.DECIMAL_VALUE]:
                self.state = 911
                self.fuguePartitionNumber()
                pass
            elif token in [fugue_sqlParser.T__2]:
                self.state = 912
                self.match(fugue_sqlParser.T__2)
                self.state = 913
                self.fuguePartitionNum(0)
                self.state = 914
                self.match(fugue_sqlParser.T__3)
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 923
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,100,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = fugue_sqlParser.FuguePartitionNumContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_fuguePartitionNum)
                    self.state = 918
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 919
                    _la = self._input.LA(1)
                    if not(((((_la - 314)) & ~0x3f) == 0 and ((1 << (_la - 314)) & ((1 << (fugue_sqlParser.PLUS - 314)) | (1 << (fugue_sqlParser.MINUS - 314)) | (1 << (fugue_sqlParser.ASTERISK - 314)) | (1 << (fugue_sqlParser.SLASH - 314)))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 920
                    self.fuguePartitionNum(2) 
                self.state = 925
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,100,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class FuguePartitionNumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECIMAL_VALUE(self):
            return self.getToken(fugue_sqlParser.DECIMAL_VALUE, 0)

        def MINUS(self):
            return self.getToken(fugue_sqlParser.MINUS, 0)

        def INTEGER_VALUE(self):
            return self.getToken(fugue_sqlParser.INTEGER_VALUE, 0)

        def ROWCOUNT(self):
            return self.getToken(fugue_sqlParser.ROWCOUNT, 0)

        def CONCURRENCY(self):
            return self.getToken(fugue_sqlParser.CONCURRENCY, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fuguePartitionNumber

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFuguePartitionNumber" ):
                return visitor.visitFuguePartitionNumber(self)
            else:
                return visitor.visitChildren(self)




    def fuguePartitionNumber(self):

        localctx = fugue_sqlParser.FuguePartitionNumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_fuguePartitionNumber)
        self._la = 0 # Token type
        try:
            self.state = 936
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 927
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.MINUS:
                    self.state = 926
                    self.match(fugue_sqlParser.MINUS)


                self.state = 929
                self.match(fugue_sqlParser.DECIMAL_VALUE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 931
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.MINUS:
                    self.state = 930
                    self.match(fugue_sqlParser.MINUS)


                self.state = 933
                self.match(fugue_sqlParser.INTEGER_VALUE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 934
                self.match(fugue_sqlParser.ROWCOUNT)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 935
                self.match(fugue_sqlParser.CONCURRENCY)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueParamsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueParams

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class FugueParamsPairsContext(FugueParamsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.FugueParamsContext
            super().__init__(parser)
            self.pairs = None # FugueJsonPairsContext
            self.copyFrom(ctx)

        def PARAMS(self):
            return self.getToken(fugue_sqlParser.PARAMS, 0)
        def fugueJsonPairs(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueJsonPairsContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueParamsPairs" ):
                return visitor.visitFugueParamsPairs(self)
            else:
                return visitor.visitChildren(self)


    class FugueParamsObjContext(FugueParamsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.FugueParamsContext
            super().__init__(parser)
            self.obj = None # FugueJsonObjContext
            self.copyFrom(ctx)

        def fugueJsonObj(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueJsonObjContext,0)

        def PARAMS(self):
            return self.getToken(fugue_sqlParser.PARAMS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueParamsObj" ):
                return visitor.visitFugueParamsObj(self)
            else:
                return visitor.visitChildren(self)



    def fugueParams(self):

        localctx = fugue_sqlParser.FugueParamsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_fugueParams)
        self._la = 0 # Token type
        try:
            self.state = 944
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.FugueParamsPairsContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 938
                self.match(fugue_sqlParser.PARAMS)
                self.state = 939
                localctx.pairs = self.fugueJsonPairs()
                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.FugueParamsObjContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 941
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.PARAMS:
                    self.state = 940
                    self.match(fugue_sqlParser.PARAMS)


                self.state = 943
                localctx.obj = self.fugueJsonObj()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueColsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fugueColumnIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.FugueColumnIdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.FugueColumnIdentifierContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueCols

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueCols" ):
                return visitor.visitFugueCols(self)
            else:
                return visitor.visitChildren(self)




    def fugueCols(self):

        localctx = fugue_sqlParser.FugueColsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_fugueCols)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 946
            self.fugueColumnIdentifier()
            self.state = 951
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,106,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 947
                    self.match(fugue_sqlParser.T__0)
                    self.state = 948
                    self.fugueColumnIdentifier() 
                self.state = 953
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,106,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueColsSortContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fugueColSort(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.FugueColSortContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.FugueColSortContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueColsSort

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueColsSort" ):
                return visitor.visitFugueColsSort(self)
            else:
                return visitor.visitChildren(self)




    def fugueColsSort(self):

        localctx = fugue_sqlParser.FugueColsSortContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_fugueColsSort)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 954
            self.fugueColSort()
            self.state = 959
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,107,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 955
                    self.match(fugue_sqlParser.T__0)
                    self.state = 956
                    self.fugueColSort() 
                self.state = 961
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,107,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueColSortContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fugueColumnIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueColumnIdentifierContext,0)


        def ASC(self):
            return self.getToken(fugue_sqlParser.ASC, 0)

        def DESC(self):
            return self.getToken(fugue_sqlParser.DESC, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueColSort

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueColSort" ):
                return visitor.visitFugueColSort(self)
            else:
                return visitor.visitChildren(self)




    def fugueColSort(self):

        localctx = fugue_sqlParser.FugueColSortContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_fugueColSort)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 962
            self.fugueColumnIdentifier()
            self.state = 964
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
            if la_ == 1:
                self.state = 963
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.ASC or _la==fugue_sqlParser.DESC):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueColumnIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fugueIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueIdentifierContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueColumnIdentifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueColumnIdentifier" ):
                return visitor.visitFugueColumnIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def fugueColumnIdentifier(self):

        localctx = fugue_sqlParser.FugueColumnIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_fugueColumnIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 966
            self.fugueIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueRenameExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fugueRenamePair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.FugueRenamePairContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.FugueRenamePairContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueRenameExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueRenameExpression" ):
                return visitor.visitFugueRenameExpression(self)
            else:
                return visitor.visitChildren(self)




    def fugueRenameExpression(self):

        localctx = fugue_sqlParser.FugueRenameExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_fugueRenameExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 968
            self.fugueRenamePair()
            self.state = 973
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,109,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 969
                    self.match(fugue_sqlParser.T__0)
                    self.state = 970
                    self.fugueRenamePair() 
                self.state = 975
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,109,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueWildSchemaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fugueWildSchemaPair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.FugueWildSchemaPairContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.FugueWildSchemaPairContext,i)


        def fugueSchemaOp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.FugueSchemaOpContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.FugueSchemaOpContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueWildSchema

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueWildSchema" ):
                return visitor.visitFugueWildSchema(self)
            else:
                return visitor.visitChildren(self)




    def fugueWildSchema(self):

        localctx = fugue_sqlParser.FugueWildSchemaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_fugueWildSchema)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 976
            self.fugueWildSchemaPair()
            self.state = 981
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,110,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 977
                    self.match(fugue_sqlParser.T__0)
                    self.state = 978
                    self.fugueWildSchemaPair() 
                self.state = 983
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,110,self._ctx)

            self.state = 987
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,111,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 984
                    self.fugueSchemaOp() 
                self.state = 989
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,111,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueWildSchemaPairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.pair = None # FugueSchemaPairContext

        def fugueSchemaPair(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSchemaPairContext,0)


        def ASTERISK(self):
            return self.getToken(fugue_sqlParser.ASTERISK, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueWildSchemaPair

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueWildSchemaPair" ):
                return visitor.visitFugueWildSchemaPair(self)
            else:
                return visitor.visitChildren(self)




    def fugueWildSchemaPair(self):

        localctx = fugue_sqlParser.FugueWildSchemaPairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_fugueWildSchemaPair)
        try:
            self.state = 992
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [fugue_sqlParser.ADD, fugue_sqlParser.AFTER, fugue_sqlParser.ALL, fugue_sqlParser.ALTER, fugue_sqlParser.ANALYZE, fugue_sqlParser.AND, fugue_sqlParser.ANTI, fugue_sqlParser.ANY, fugue_sqlParser.ARCHIVE, fugue_sqlParser.ARRAY, fugue_sqlParser.AS, fugue_sqlParser.ASC, fugue_sqlParser.AT, fugue_sqlParser.AUTHORIZATION, fugue_sqlParser.BETWEEN, fugue_sqlParser.BOTH, fugue_sqlParser.BUCKET, fugue_sqlParser.BUCKETS, fugue_sqlParser.BY, fugue_sqlParser.CACHE, fugue_sqlParser.CASCADE, fugue_sqlParser.CASE, fugue_sqlParser.CAST, fugue_sqlParser.CHANGE, fugue_sqlParser.CHECK, fugue_sqlParser.CLEAR, fugue_sqlParser.CLUSTER, fugue_sqlParser.CLUSTERED, fugue_sqlParser.CODEGEN, fugue_sqlParser.COLLATE, fugue_sqlParser.COLLECTION, fugue_sqlParser.COLUMN, fugue_sqlParser.COLUMNS, fugue_sqlParser.COMMENT, fugue_sqlParser.COMMIT, fugue_sqlParser.COMPACT, fugue_sqlParser.COMPACTIONS, fugue_sqlParser.COMPUTE, fugue_sqlParser.CONCATENATE, fugue_sqlParser.CONSTRAINT, fugue_sqlParser.COST, fugue_sqlParser.CREATE, fugue_sqlParser.CROSS, fugue_sqlParser.CUBE, fugue_sqlParser.CURRENT, fugue_sqlParser.CURRENT_DATE, fugue_sqlParser.CURRENT_TIME, fugue_sqlParser.CURRENT_TIMESTAMP, fugue_sqlParser.CURRENT_USER, fugue_sqlParser.DATA, fugue_sqlParser.DATABASE, fugue_sqlParser.DATABASES, fugue_sqlParser.DAY, fugue_sqlParser.DBPROPERTIES, fugue_sqlParser.DEFINED, fugue_sqlParser.DELETE, fugue_sqlParser.DELIMITED, fugue_sqlParser.DESC, fugue_sqlParser.DESCRIBE, fugue_sqlParser.DFS, fugue_sqlParser.DIRECTORIES, fugue_sqlParser.DIRECTORY, fugue_sqlParser.DISTINCT, fugue_sqlParser.DISTRIBUTE, fugue_sqlParser.DROP, fugue_sqlParser.ELSE, fugue_sqlParser.END, fugue_sqlParser.ESCAPE, fugue_sqlParser.ESCAPED, fugue_sqlParser.EXCEPT, fugue_sqlParser.EXCHANGE, fugue_sqlParser.EXISTS, fugue_sqlParser.EXPLAIN, fugue_sqlParser.EXPORT, fugue_sqlParser.EXTENDED, fugue_sqlParser.EXTERNAL, fugue_sqlParser.EXTRACT, fugue_sqlParser.FALSE, fugue_sqlParser.FETCH, fugue_sqlParser.FIELDS, fugue_sqlParser.FILTER, fugue_sqlParser.FILEFORMAT, fugue_sqlParser.FIRST, fugue_sqlParser.FOLLOWING, fugue_sqlParser.FOR, fugue_sqlParser.FOREIGN, fugue_sqlParser.FORMAT, fugue_sqlParser.FORMATTED, fugue_sqlParser.FROM, fugue_sqlParser.FULL, fugue_sqlParser.FUNCTION, fugue_sqlParser.FUNCTIONS, fugue_sqlParser.GLOBAL, fugue_sqlParser.GRANT, fugue_sqlParser.GROUP, fugue_sqlParser.GROUPING, fugue_sqlParser.HAVING, fugue_sqlParser.HOUR, fugue_sqlParser.IF, fugue_sqlParser.IGNORE, fugue_sqlParser.IMPORT, fugue_sqlParser.IN, fugue_sqlParser.INDEX, fugue_sqlParser.INDEXES, fugue_sqlParser.INNER, fugue_sqlParser.INPATH, fugue_sqlParser.INPUTFORMAT, fugue_sqlParser.INSERT, fugue_sqlParser.INTERSECT, fugue_sqlParser.INTERVAL, fugue_sqlParser.INTO, fugue_sqlParser.IS, fugue_sqlParser.ITEMS, fugue_sqlParser.JOIN, fugue_sqlParser.KEYS, fugue_sqlParser.LAST, fugue_sqlParser.LATERAL, fugue_sqlParser.LAZY, fugue_sqlParser.LEADING, fugue_sqlParser.LEFT, fugue_sqlParser.LIKE, fugue_sqlParser.LIMIT, fugue_sqlParser.LINES, fugue_sqlParser.LIST, fugue_sqlParser.LOAD, fugue_sqlParser.LOCAL, fugue_sqlParser.LOCATION, fugue_sqlParser.LOCK, fugue_sqlParser.LOCKS, fugue_sqlParser.LOGICAL, fugue_sqlParser.MACRO, fugue_sqlParser.MAP, fugue_sqlParser.MATCHED, fugue_sqlParser.MERGE, fugue_sqlParser.MINUTE, fugue_sqlParser.MONTH, fugue_sqlParser.MSCK, fugue_sqlParser.NAMESPACE, fugue_sqlParser.NAMESPACES, fugue_sqlParser.NATURAL, fugue_sqlParser.NO, fugue_sqlParser.NOT, fugue_sqlParser.THENULL, fugue_sqlParser.THENULLS, fugue_sqlParser.OF, fugue_sqlParser.ON, fugue_sqlParser.ONLY, fugue_sqlParser.OPTION, fugue_sqlParser.OPTIONS, fugue_sqlParser.OR, fugue_sqlParser.ORDER, fugue_sqlParser.OUT, fugue_sqlParser.OUTER, fugue_sqlParser.OUTPUTFORMAT, fugue_sqlParser.OVER, fugue_sqlParser.OVERLAPS, fugue_sqlParser.OVERLAY, fugue_sqlParser.OVERWRITE, fugue_sqlParser.PARTITION, fugue_sqlParser.PARTITIONED, fugue_sqlParser.PARTITIONS, fugue_sqlParser.PERCENTLIT, fugue_sqlParser.PIVOT, fugue_sqlParser.PLACING, fugue_sqlParser.POSITION, fugue_sqlParser.PRECEDING, fugue_sqlParser.PRIMARY, fugue_sqlParser.PRINCIPALS, fugue_sqlParser.PROPERTIES, fugue_sqlParser.PURGE, fugue_sqlParser.QUERY, fugue_sqlParser.RANGE, fugue_sqlParser.RECORDREADER, fugue_sqlParser.RECORDWRITER, fugue_sqlParser.RECOVER, fugue_sqlParser.REDUCE, fugue_sqlParser.REFERENCES, fugue_sqlParser.REFRESH, fugue_sqlParser.RENAME, fugue_sqlParser.REPAIR, fugue_sqlParser.REPLACE, fugue_sqlParser.RESET, fugue_sqlParser.RESTRICT, fugue_sqlParser.REVOKE, fugue_sqlParser.RIGHT, fugue_sqlParser.RLIKE, fugue_sqlParser.ROLE, fugue_sqlParser.ROLES, fugue_sqlParser.ROLLBACK, fugue_sqlParser.ROLLUP, fugue_sqlParser.ROW, fugue_sqlParser.ROWS, fugue_sqlParser.SCHEMA, fugue_sqlParser.SECOND, fugue_sqlParser.SELECT, fugue_sqlParser.SEMI, fugue_sqlParser.SEPARATED, fugue_sqlParser.SERDE, fugue_sqlParser.SERDEPROPERTIES, fugue_sqlParser.SESSION_USER, fugue_sqlParser.SET, fugue_sqlParser.SETMINUS, fugue_sqlParser.SETS, fugue_sqlParser.SHOW, fugue_sqlParser.SKEWED, fugue_sqlParser.SOME, fugue_sqlParser.SORT, fugue_sqlParser.SORTED, fugue_sqlParser.START, fugue_sqlParser.STATISTICS, fugue_sqlParser.STORED, fugue_sqlParser.STRATIFY, fugue_sqlParser.STRUCT, fugue_sqlParser.SUBSTR, fugue_sqlParser.SUBSTRING, fugue_sqlParser.TABLE, fugue_sqlParser.TABLES, fugue_sqlParser.TABLESAMPLE, fugue_sqlParser.TBLPROPERTIES, fugue_sqlParser.TEMPORARY, fugue_sqlParser.TERMINATED, fugue_sqlParser.THEN, fugue_sqlParser.TO, fugue_sqlParser.TOUCH, fugue_sqlParser.TRAILING, fugue_sqlParser.TRANSACTION, fugue_sqlParser.TRANSACTIONS, fugue_sqlParser.TRANSFORM, fugue_sqlParser.TRIM, fugue_sqlParser.TRUE, fugue_sqlParser.TRUNCATE, fugue_sqlParser.TYPE, fugue_sqlParser.UNARCHIVE, fugue_sqlParser.UNBOUNDED, fugue_sqlParser.UNCACHE, fugue_sqlParser.UNION, fugue_sqlParser.UNIQUE, fugue_sqlParser.UNKNOWN, fugue_sqlParser.UNLOCK, fugue_sqlParser.UNSET, fugue_sqlParser.UPDATE, fugue_sqlParser.USE, fugue_sqlParser.USER, fugue_sqlParser.USING, fugue_sqlParser.VALUES, fugue_sqlParser.VIEW, fugue_sqlParser.VIEWS, fugue_sqlParser.WHEN, fugue_sqlParser.WHERE, fugue_sqlParser.WINDOW, fugue_sqlParser.WITH, fugue_sqlParser.YEAR, fugue_sqlParser.DIV, fugue_sqlParser.IDENTIFIER, fugue_sqlParser.BACKQUOTED_IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 990
                localctx.pair = self.fugueSchemaPair()
                pass
            elif token in [fugue_sqlParser.ASTERISK]:
                self.enterOuterAlt(localctx, 2)
                self.state = 991
                self.match(fugue_sqlParser.ASTERISK)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueSchemaOpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fugueSchemaKey(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.FugueSchemaKeyContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.FugueSchemaKeyContext,i)


        def MINUS(self):
            return self.getToken(fugue_sqlParser.MINUS, 0)

        def TILDE(self):
            return self.getToken(fugue_sqlParser.TILDE, 0)

        def PLUS(self):
            return self.getToken(fugue_sqlParser.PLUS, 0)

        def fugueSchema(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSchemaContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueSchemaOp

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueSchemaOp" ):
                return visitor.visitFugueSchemaOp(self)
            else:
                return visitor.visitChildren(self)




    def fugueSchemaOp(self):

        localctx = fugue_sqlParser.FugueSchemaOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_fugueSchemaOp)
        self._la = 0 # Token type
        try:
            self.state = 1005
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [fugue_sqlParser.MINUS, fugue_sqlParser.TILDE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 994
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.MINUS or _la==fugue_sqlParser.TILDE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 995
                self.fugueSchemaKey()
                self.state = 1000
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,113,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 996
                        self.match(fugue_sqlParser.T__0)
                        self.state = 997
                        self.fugueSchemaKey() 
                    self.state = 1002
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,113,self._ctx)

                pass
            elif token in [fugue_sqlParser.PLUS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1003
                self.match(fugue_sqlParser.PLUS)
                self.state = 1004
                self.fugueSchema()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueSchemaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fugueSchemaPair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.FugueSchemaPairContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.FugueSchemaPairContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueSchema

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueSchema" ):
                return visitor.visitFugueSchema(self)
            else:
                return visitor.visitChildren(self)




    def fugueSchema(self):

        localctx = fugue_sqlParser.FugueSchemaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_fugueSchema)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1007
            self.fugueSchemaPair()
            self.state = 1012
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,115,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1008
                    self.match(fugue_sqlParser.T__0)
                    self.state = 1009
                    self.fugueSchemaPair() 
                self.state = 1014
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,115,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueSchemaPairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.key = None # FugueSchemaKeyContext
            self.value = None # FugueSchemaTypeContext

        def fugueSchemaKey(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSchemaKeyContext,0)


        def fugueSchemaType(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSchemaTypeContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueSchemaPair

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueSchemaPair" ):
                return visitor.visitFugueSchemaPair(self)
            else:
                return visitor.visitChildren(self)




    def fugueSchemaPair(self):

        localctx = fugue_sqlParser.FugueSchemaPairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_fugueSchemaPair)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1015
            localctx.key = self.fugueSchemaKey()
            self.state = 1016
            self.match(fugue_sqlParser.T__1)
            self.state = 1017
            localctx.value = self.fugueSchemaType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueSchemaKeyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fugueIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueIdentifierContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueSchemaKey

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueSchemaKey" ):
                return visitor.visitFugueSchemaKey(self)
            else:
                return visitor.visitChildren(self)




    def fugueSchemaKey(self):

        localctx = fugue_sqlParser.FugueSchemaKeyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_fugueSchemaKey)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1019
            self.fugueIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueSchemaTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueSchemaType

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class FugueSchemaSimpleTypeContext(FugueSchemaTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.FugueSchemaTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def fugueIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueIdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueSchemaSimpleType" ):
                return visitor.visitFugueSchemaSimpleType(self)
            else:
                return visitor.visitChildren(self)


    class FugueSchemaStructTypeContext(FugueSchemaTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.FugueSchemaTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def fugueSchema(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSchemaContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueSchemaStructType" ):
                return visitor.visitFugueSchemaStructType(self)
            else:
                return visitor.visitChildren(self)


    class FugueSchemaListTypeContext(FugueSchemaTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.FugueSchemaTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def fugueSchemaType(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSchemaTypeContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueSchemaListType" ):
                return visitor.visitFugueSchemaListType(self)
            else:
                return visitor.visitChildren(self)



    def fugueSchemaType(self):

        localctx = fugue_sqlParser.FugueSchemaTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_fugueSchemaType)
        try:
            self.state = 1030
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [fugue_sqlParser.ADD, fugue_sqlParser.AFTER, fugue_sqlParser.ALL, fugue_sqlParser.ALTER, fugue_sqlParser.ANALYZE, fugue_sqlParser.AND, fugue_sqlParser.ANTI, fugue_sqlParser.ANY, fugue_sqlParser.ARCHIVE, fugue_sqlParser.ARRAY, fugue_sqlParser.AS, fugue_sqlParser.ASC, fugue_sqlParser.AT, fugue_sqlParser.AUTHORIZATION, fugue_sqlParser.BETWEEN, fugue_sqlParser.BOTH, fugue_sqlParser.BUCKET, fugue_sqlParser.BUCKETS, fugue_sqlParser.BY, fugue_sqlParser.CACHE, fugue_sqlParser.CASCADE, fugue_sqlParser.CASE, fugue_sqlParser.CAST, fugue_sqlParser.CHANGE, fugue_sqlParser.CHECK, fugue_sqlParser.CLEAR, fugue_sqlParser.CLUSTER, fugue_sqlParser.CLUSTERED, fugue_sqlParser.CODEGEN, fugue_sqlParser.COLLATE, fugue_sqlParser.COLLECTION, fugue_sqlParser.COLUMN, fugue_sqlParser.COLUMNS, fugue_sqlParser.COMMENT, fugue_sqlParser.COMMIT, fugue_sqlParser.COMPACT, fugue_sqlParser.COMPACTIONS, fugue_sqlParser.COMPUTE, fugue_sqlParser.CONCATENATE, fugue_sqlParser.CONSTRAINT, fugue_sqlParser.COST, fugue_sqlParser.CREATE, fugue_sqlParser.CROSS, fugue_sqlParser.CUBE, fugue_sqlParser.CURRENT, fugue_sqlParser.CURRENT_DATE, fugue_sqlParser.CURRENT_TIME, fugue_sqlParser.CURRENT_TIMESTAMP, fugue_sqlParser.CURRENT_USER, fugue_sqlParser.DATA, fugue_sqlParser.DATABASE, fugue_sqlParser.DATABASES, fugue_sqlParser.DAY, fugue_sqlParser.DBPROPERTIES, fugue_sqlParser.DEFINED, fugue_sqlParser.DELETE, fugue_sqlParser.DELIMITED, fugue_sqlParser.DESC, fugue_sqlParser.DESCRIBE, fugue_sqlParser.DFS, fugue_sqlParser.DIRECTORIES, fugue_sqlParser.DIRECTORY, fugue_sqlParser.DISTINCT, fugue_sqlParser.DISTRIBUTE, fugue_sqlParser.DROP, fugue_sqlParser.ELSE, fugue_sqlParser.END, fugue_sqlParser.ESCAPE, fugue_sqlParser.ESCAPED, fugue_sqlParser.EXCEPT, fugue_sqlParser.EXCHANGE, fugue_sqlParser.EXISTS, fugue_sqlParser.EXPLAIN, fugue_sqlParser.EXPORT, fugue_sqlParser.EXTENDED, fugue_sqlParser.EXTERNAL, fugue_sqlParser.EXTRACT, fugue_sqlParser.FALSE, fugue_sqlParser.FETCH, fugue_sqlParser.FIELDS, fugue_sqlParser.FILTER, fugue_sqlParser.FILEFORMAT, fugue_sqlParser.FIRST, fugue_sqlParser.FOLLOWING, fugue_sqlParser.FOR, fugue_sqlParser.FOREIGN, fugue_sqlParser.FORMAT, fugue_sqlParser.FORMATTED, fugue_sqlParser.FROM, fugue_sqlParser.FULL, fugue_sqlParser.FUNCTION, fugue_sqlParser.FUNCTIONS, fugue_sqlParser.GLOBAL, fugue_sqlParser.GRANT, fugue_sqlParser.GROUP, fugue_sqlParser.GROUPING, fugue_sqlParser.HAVING, fugue_sqlParser.HOUR, fugue_sqlParser.IF, fugue_sqlParser.IGNORE, fugue_sqlParser.IMPORT, fugue_sqlParser.IN, fugue_sqlParser.INDEX, fugue_sqlParser.INDEXES, fugue_sqlParser.INNER, fugue_sqlParser.INPATH, fugue_sqlParser.INPUTFORMAT, fugue_sqlParser.INSERT, fugue_sqlParser.INTERSECT, fugue_sqlParser.INTERVAL, fugue_sqlParser.INTO, fugue_sqlParser.IS, fugue_sqlParser.ITEMS, fugue_sqlParser.JOIN, fugue_sqlParser.KEYS, fugue_sqlParser.LAST, fugue_sqlParser.LATERAL, fugue_sqlParser.LAZY, fugue_sqlParser.LEADING, fugue_sqlParser.LEFT, fugue_sqlParser.LIKE, fugue_sqlParser.LIMIT, fugue_sqlParser.LINES, fugue_sqlParser.LIST, fugue_sqlParser.LOAD, fugue_sqlParser.LOCAL, fugue_sqlParser.LOCATION, fugue_sqlParser.LOCK, fugue_sqlParser.LOCKS, fugue_sqlParser.LOGICAL, fugue_sqlParser.MACRO, fugue_sqlParser.MAP, fugue_sqlParser.MATCHED, fugue_sqlParser.MERGE, fugue_sqlParser.MINUTE, fugue_sqlParser.MONTH, fugue_sqlParser.MSCK, fugue_sqlParser.NAMESPACE, fugue_sqlParser.NAMESPACES, fugue_sqlParser.NATURAL, fugue_sqlParser.NO, fugue_sqlParser.NOT, fugue_sqlParser.THENULL, fugue_sqlParser.THENULLS, fugue_sqlParser.OF, fugue_sqlParser.ON, fugue_sqlParser.ONLY, fugue_sqlParser.OPTION, fugue_sqlParser.OPTIONS, fugue_sqlParser.OR, fugue_sqlParser.ORDER, fugue_sqlParser.OUT, fugue_sqlParser.OUTER, fugue_sqlParser.OUTPUTFORMAT, fugue_sqlParser.OVER, fugue_sqlParser.OVERLAPS, fugue_sqlParser.OVERLAY, fugue_sqlParser.OVERWRITE, fugue_sqlParser.PARTITION, fugue_sqlParser.PARTITIONED, fugue_sqlParser.PARTITIONS, fugue_sqlParser.PERCENTLIT, fugue_sqlParser.PIVOT, fugue_sqlParser.PLACING, fugue_sqlParser.POSITION, fugue_sqlParser.PRECEDING, fugue_sqlParser.PRIMARY, fugue_sqlParser.PRINCIPALS, fugue_sqlParser.PROPERTIES, fugue_sqlParser.PURGE, fugue_sqlParser.QUERY, fugue_sqlParser.RANGE, fugue_sqlParser.RECORDREADER, fugue_sqlParser.RECORDWRITER, fugue_sqlParser.RECOVER, fugue_sqlParser.REDUCE, fugue_sqlParser.REFERENCES, fugue_sqlParser.REFRESH, fugue_sqlParser.RENAME, fugue_sqlParser.REPAIR, fugue_sqlParser.REPLACE, fugue_sqlParser.RESET, fugue_sqlParser.RESTRICT, fugue_sqlParser.REVOKE, fugue_sqlParser.RIGHT, fugue_sqlParser.RLIKE, fugue_sqlParser.ROLE, fugue_sqlParser.ROLES, fugue_sqlParser.ROLLBACK, fugue_sqlParser.ROLLUP, fugue_sqlParser.ROW, fugue_sqlParser.ROWS, fugue_sqlParser.SCHEMA, fugue_sqlParser.SECOND, fugue_sqlParser.SELECT, fugue_sqlParser.SEMI, fugue_sqlParser.SEPARATED, fugue_sqlParser.SERDE, fugue_sqlParser.SERDEPROPERTIES, fugue_sqlParser.SESSION_USER, fugue_sqlParser.SET, fugue_sqlParser.SETMINUS, fugue_sqlParser.SETS, fugue_sqlParser.SHOW, fugue_sqlParser.SKEWED, fugue_sqlParser.SOME, fugue_sqlParser.SORT, fugue_sqlParser.SORTED, fugue_sqlParser.START, fugue_sqlParser.STATISTICS, fugue_sqlParser.STORED, fugue_sqlParser.STRATIFY, fugue_sqlParser.STRUCT, fugue_sqlParser.SUBSTR, fugue_sqlParser.SUBSTRING, fugue_sqlParser.TABLE, fugue_sqlParser.TABLES, fugue_sqlParser.TABLESAMPLE, fugue_sqlParser.TBLPROPERTIES, fugue_sqlParser.TEMPORARY, fugue_sqlParser.TERMINATED, fugue_sqlParser.THEN, fugue_sqlParser.TO, fugue_sqlParser.TOUCH, fugue_sqlParser.TRAILING, fugue_sqlParser.TRANSACTION, fugue_sqlParser.TRANSACTIONS, fugue_sqlParser.TRANSFORM, fugue_sqlParser.TRIM, fugue_sqlParser.TRUE, fugue_sqlParser.TRUNCATE, fugue_sqlParser.TYPE, fugue_sqlParser.UNARCHIVE, fugue_sqlParser.UNBOUNDED, fugue_sqlParser.UNCACHE, fugue_sqlParser.UNION, fugue_sqlParser.UNIQUE, fugue_sqlParser.UNKNOWN, fugue_sqlParser.UNLOCK, fugue_sqlParser.UNSET, fugue_sqlParser.UPDATE, fugue_sqlParser.USE, fugue_sqlParser.USER, fugue_sqlParser.USING, fugue_sqlParser.VALUES, fugue_sqlParser.VIEW, fugue_sqlParser.VIEWS, fugue_sqlParser.WHEN, fugue_sqlParser.WHERE, fugue_sqlParser.WINDOW, fugue_sqlParser.WITH, fugue_sqlParser.YEAR, fugue_sqlParser.DIV, fugue_sqlParser.IDENTIFIER, fugue_sqlParser.BACKQUOTED_IDENTIFIER]:
                localctx = fugue_sqlParser.FugueSchemaSimpleTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1021
                self.fugueIdentifier()
                pass
            elif token in [fugue_sqlParser.T__4]:
                localctx = fugue_sqlParser.FugueSchemaListTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1022
                self.match(fugue_sqlParser.T__4)
                self.state = 1023
                self.fugueSchemaType()
                self.state = 1024
                self.match(fugue_sqlParser.T__5)
                pass
            elif token in [fugue_sqlParser.T__7]:
                localctx = fugue_sqlParser.FugueSchemaStructTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1026
                self.match(fugue_sqlParser.T__7)
                self.state = 1027
                self.fugueSchema()
                self.state = 1028
                self.match(fugue_sqlParser.T__8)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueRenamePairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.key = None # FugueSchemaKeyContext
            self.value = None # FugueSchemaKeyContext

        def fugueSchemaKey(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.FugueSchemaKeyContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.FugueSchemaKeyContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueRenamePair

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueRenamePair" ):
                return visitor.visitFugueRenamePair(self)
            else:
                return visitor.visitChildren(self)




    def fugueRenamePair(self):

        localctx = fugue_sqlParser.FugueRenamePairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_fugueRenamePair)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1032
            localctx.key = self.fugueSchemaKey()
            self.state = 1033
            self.match(fugue_sqlParser.T__1)
            self.state = 1034
            localctx.value = self.fugueSchemaKey()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueJsonContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fugueJsonValue(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueJsonValueContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueJson

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueJson" ):
                return visitor.visitFugueJson(self)
            else:
                return visitor.visitChildren(self)




    def fugueJson(self):

        localctx = fugue_sqlParser.FugueJsonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_fugueJson)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1036
            self.fugueJsonValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueJsonObjContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fugueJsonPairs(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueJsonPairsContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueJsonObj

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueJsonObj" ):
                return visitor.visitFugueJsonObj(self)
            else:
                return visitor.visitChildren(self)




    def fugueJsonObj(self):

        localctx = fugue_sqlParser.FugueJsonObjContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_fugueJsonObj)
        self._la = 0 # Token type
        try:
            self.state = 1056
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1038
                self.match(fugue_sqlParser.T__7)
                self.state = 1039
                self.fugueJsonPairs()
                self.state = 1041
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.T__0:
                    self.state = 1040
                    self.match(fugue_sqlParser.T__0)


                self.state = 1043
                self.match(fugue_sqlParser.T__8)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1045
                self.match(fugue_sqlParser.T__7)
                self.state = 1046
                self.match(fugue_sqlParser.T__8)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1047
                self.match(fugue_sqlParser.T__2)
                self.state = 1048
                self.fugueJsonPairs()
                self.state = 1050
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.T__0:
                    self.state = 1049
                    self.match(fugue_sqlParser.T__0)


                self.state = 1052
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1054
                self.match(fugue_sqlParser.T__2)
                self.state = 1055
                self.match(fugue_sqlParser.T__3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueJsonPairsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fugueJsonPair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.FugueJsonPairContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.FugueJsonPairContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueJsonPairs

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueJsonPairs" ):
                return visitor.visitFugueJsonPairs(self)
            else:
                return visitor.visitChildren(self)




    def fugueJsonPairs(self):

        localctx = fugue_sqlParser.FugueJsonPairsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_fugueJsonPairs)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1058
            self.fugueJsonPair()
            self.state = 1063
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,120,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1059
                    self.match(fugue_sqlParser.T__0)
                    self.state = 1060
                    self.fugueJsonPair() 
                self.state = 1065
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,120,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueJsonPairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.key = None # FugueJsonKeyContext
            self.value = None # FugueJsonValueContext

        def fugueJsonKey(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueJsonKeyContext,0)


        def EQUAL(self):
            return self.getToken(fugue_sqlParser.EQUAL, 0)

        def fugueJsonValue(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueJsonValueContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueJsonPair

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueJsonPair" ):
                return visitor.visitFugueJsonPair(self)
            else:
                return visitor.visitChildren(self)




    def fugueJsonPair(self):

        localctx = fugue_sqlParser.FugueJsonPairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_fugueJsonPair)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1066
            localctx.key = self.fugueJsonKey()
            self.state = 1067
            _la = self._input.LA(1)
            if not(_la==fugue_sqlParser.T__1 or _la==fugue_sqlParser.EQUAL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1068
            localctx.value = self.fugueJsonValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueJsonKeyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fugueIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueIdentifierContext,0)


        def fugueJsonString(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueJsonStringContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueJsonKey

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueJsonKey" ):
                return visitor.visitFugueJsonKey(self)
            else:
                return visitor.visitChildren(self)




    def fugueJsonKey(self):

        localctx = fugue_sqlParser.FugueJsonKeyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_fugueJsonKey)
        try:
            self.state = 1072
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [fugue_sqlParser.ADD, fugue_sqlParser.AFTER, fugue_sqlParser.ALL, fugue_sqlParser.ALTER, fugue_sqlParser.ANALYZE, fugue_sqlParser.AND, fugue_sqlParser.ANTI, fugue_sqlParser.ANY, fugue_sqlParser.ARCHIVE, fugue_sqlParser.ARRAY, fugue_sqlParser.AS, fugue_sqlParser.ASC, fugue_sqlParser.AT, fugue_sqlParser.AUTHORIZATION, fugue_sqlParser.BETWEEN, fugue_sqlParser.BOTH, fugue_sqlParser.BUCKET, fugue_sqlParser.BUCKETS, fugue_sqlParser.BY, fugue_sqlParser.CACHE, fugue_sqlParser.CASCADE, fugue_sqlParser.CASE, fugue_sqlParser.CAST, fugue_sqlParser.CHANGE, fugue_sqlParser.CHECK, fugue_sqlParser.CLEAR, fugue_sqlParser.CLUSTER, fugue_sqlParser.CLUSTERED, fugue_sqlParser.CODEGEN, fugue_sqlParser.COLLATE, fugue_sqlParser.COLLECTION, fugue_sqlParser.COLUMN, fugue_sqlParser.COLUMNS, fugue_sqlParser.COMMENT, fugue_sqlParser.COMMIT, fugue_sqlParser.COMPACT, fugue_sqlParser.COMPACTIONS, fugue_sqlParser.COMPUTE, fugue_sqlParser.CONCATENATE, fugue_sqlParser.CONSTRAINT, fugue_sqlParser.COST, fugue_sqlParser.CREATE, fugue_sqlParser.CROSS, fugue_sqlParser.CUBE, fugue_sqlParser.CURRENT, fugue_sqlParser.CURRENT_DATE, fugue_sqlParser.CURRENT_TIME, fugue_sqlParser.CURRENT_TIMESTAMP, fugue_sqlParser.CURRENT_USER, fugue_sqlParser.DATA, fugue_sqlParser.DATABASE, fugue_sqlParser.DATABASES, fugue_sqlParser.DAY, fugue_sqlParser.DBPROPERTIES, fugue_sqlParser.DEFINED, fugue_sqlParser.DELETE, fugue_sqlParser.DELIMITED, fugue_sqlParser.DESC, fugue_sqlParser.DESCRIBE, fugue_sqlParser.DFS, fugue_sqlParser.DIRECTORIES, fugue_sqlParser.DIRECTORY, fugue_sqlParser.DISTINCT, fugue_sqlParser.DISTRIBUTE, fugue_sqlParser.DROP, fugue_sqlParser.ELSE, fugue_sqlParser.END, fugue_sqlParser.ESCAPE, fugue_sqlParser.ESCAPED, fugue_sqlParser.EXCEPT, fugue_sqlParser.EXCHANGE, fugue_sqlParser.EXISTS, fugue_sqlParser.EXPLAIN, fugue_sqlParser.EXPORT, fugue_sqlParser.EXTENDED, fugue_sqlParser.EXTERNAL, fugue_sqlParser.EXTRACT, fugue_sqlParser.FALSE, fugue_sqlParser.FETCH, fugue_sqlParser.FIELDS, fugue_sqlParser.FILTER, fugue_sqlParser.FILEFORMAT, fugue_sqlParser.FIRST, fugue_sqlParser.FOLLOWING, fugue_sqlParser.FOR, fugue_sqlParser.FOREIGN, fugue_sqlParser.FORMAT, fugue_sqlParser.FORMATTED, fugue_sqlParser.FROM, fugue_sqlParser.FULL, fugue_sqlParser.FUNCTION, fugue_sqlParser.FUNCTIONS, fugue_sqlParser.GLOBAL, fugue_sqlParser.GRANT, fugue_sqlParser.GROUP, fugue_sqlParser.GROUPING, fugue_sqlParser.HAVING, fugue_sqlParser.HOUR, fugue_sqlParser.IF, fugue_sqlParser.IGNORE, fugue_sqlParser.IMPORT, fugue_sqlParser.IN, fugue_sqlParser.INDEX, fugue_sqlParser.INDEXES, fugue_sqlParser.INNER, fugue_sqlParser.INPATH, fugue_sqlParser.INPUTFORMAT, fugue_sqlParser.INSERT, fugue_sqlParser.INTERSECT, fugue_sqlParser.INTERVAL, fugue_sqlParser.INTO, fugue_sqlParser.IS, fugue_sqlParser.ITEMS, fugue_sqlParser.JOIN, fugue_sqlParser.KEYS, fugue_sqlParser.LAST, fugue_sqlParser.LATERAL, fugue_sqlParser.LAZY, fugue_sqlParser.LEADING, fugue_sqlParser.LEFT, fugue_sqlParser.LIKE, fugue_sqlParser.LIMIT, fugue_sqlParser.LINES, fugue_sqlParser.LIST, fugue_sqlParser.LOAD, fugue_sqlParser.LOCAL, fugue_sqlParser.LOCATION, fugue_sqlParser.LOCK, fugue_sqlParser.LOCKS, fugue_sqlParser.LOGICAL, fugue_sqlParser.MACRO, fugue_sqlParser.MAP, fugue_sqlParser.MATCHED, fugue_sqlParser.MERGE, fugue_sqlParser.MINUTE, fugue_sqlParser.MONTH, fugue_sqlParser.MSCK, fugue_sqlParser.NAMESPACE, fugue_sqlParser.NAMESPACES, fugue_sqlParser.NATURAL, fugue_sqlParser.NO, fugue_sqlParser.NOT, fugue_sqlParser.THENULL, fugue_sqlParser.THENULLS, fugue_sqlParser.OF, fugue_sqlParser.ON, fugue_sqlParser.ONLY, fugue_sqlParser.OPTION, fugue_sqlParser.OPTIONS, fugue_sqlParser.OR, fugue_sqlParser.ORDER, fugue_sqlParser.OUT, fugue_sqlParser.OUTER, fugue_sqlParser.OUTPUTFORMAT, fugue_sqlParser.OVER, fugue_sqlParser.OVERLAPS, fugue_sqlParser.OVERLAY, fugue_sqlParser.OVERWRITE, fugue_sqlParser.PARTITION, fugue_sqlParser.PARTITIONED, fugue_sqlParser.PARTITIONS, fugue_sqlParser.PERCENTLIT, fugue_sqlParser.PIVOT, fugue_sqlParser.PLACING, fugue_sqlParser.POSITION, fugue_sqlParser.PRECEDING, fugue_sqlParser.PRIMARY, fugue_sqlParser.PRINCIPALS, fugue_sqlParser.PROPERTIES, fugue_sqlParser.PURGE, fugue_sqlParser.QUERY, fugue_sqlParser.RANGE, fugue_sqlParser.RECORDREADER, fugue_sqlParser.RECORDWRITER, fugue_sqlParser.RECOVER, fugue_sqlParser.REDUCE, fugue_sqlParser.REFERENCES, fugue_sqlParser.REFRESH, fugue_sqlParser.RENAME, fugue_sqlParser.REPAIR, fugue_sqlParser.REPLACE, fugue_sqlParser.RESET, fugue_sqlParser.RESTRICT, fugue_sqlParser.REVOKE, fugue_sqlParser.RIGHT, fugue_sqlParser.RLIKE, fugue_sqlParser.ROLE, fugue_sqlParser.ROLES, fugue_sqlParser.ROLLBACK, fugue_sqlParser.ROLLUP, fugue_sqlParser.ROW, fugue_sqlParser.ROWS, fugue_sqlParser.SCHEMA, fugue_sqlParser.SECOND, fugue_sqlParser.SELECT, fugue_sqlParser.SEMI, fugue_sqlParser.SEPARATED, fugue_sqlParser.SERDE, fugue_sqlParser.SERDEPROPERTIES, fugue_sqlParser.SESSION_USER, fugue_sqlParser.SET, fugue_sqlParser.SETMINUS, fugue_sqlParser.SETS, fugue_sqlParser.SHOW, fugue_sqlParser.SKEWED, fugue_sqlParser.SOME, fugue_sqlParser.SORT, fugue_sqlParser.SORTED, fugue_sqlParser.START, fugue_sqlParser.STATISTICS, fugue_sqlParser.STORED, fugue_sqlParser.STRATIFY, fugue_sqlParser.STRUCT, fugue_sqlParser.SUBSTR, fugue_sqlParser.SUBSTRING, fugue_sqlParser.TABLE, fugue_sqlParser.TABLES, fugue_sqlParser.TABLESAMPLE, fugue_sqlParser.TBLPROPERTIES, fugue_sqlParser.TEMPORARY, fugue_sqlParser.TERMINATED, fugue_sqlParser.THEN, fugue_sqlParser.TO, fugue_sqlParser.TOUCH, fugue_sqlParser.TRAILING, fugue_sqlParser.TRANSACTION, fugue_sqlParser.TRANSACTIONS, fugue_sqlParser.TRANSFORM, fugue_sqlParser.TRIM, fugue_sqlParser.TRUE, fugue_sqlParser.TRUNCATE, fugue_sqlParser.TYPE, fugue_sqlParser.UNARCHIVE, fugue_sqlParser.UNBOUNDED, fugue_sqlParser.UNCACHE, fugue_sqlParser.UNION, fugue_sqlParser.UNIQUE, fugue_sqlParser.UNKNOWN, fugue_sqlParser.UNLOCK, fugue_sqlParser.UNSET, fugue_sqlParser.UPDATE, fugue_sqlParser.USE, fugue_sqlParser.USER, fugue_sqlParser.USING, fugue_sqlParser.VALUES, fugue_sqlParser.VIEW, fugue_sqlParser.VIEWS, fugue_sqlParser.WHEN, fugue_sqlParser.WHERE, fugue_sqlParser.WINDOW, fugue_sqlParser.WITH, fugue_sqlParser.YEAR, fugue_sqlParser.DIV, fugue_sqlParser.IDENTIFIER, fugue_sqlParser.BACKQUOTED_IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1070
                self.fugueIdentifier()
                pass
            elif token in [fugue_sqlParser.STRING]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1071
                self.fugueJsonString()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueJsonArrayContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fugueJsonValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.FugueJsonValueContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.FugueJsonValueContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueJsonArray

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueJsonArray" ):
                return visitor.visitFugueJsonArray(self)
            else:
                return visitor.visitChildren(self)




    def fugueJsonArray(self):

        localctx = fugue_sqlParser.FugueJsonArrayContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_fugueJsonArray)
        self._la = 0 # Token type
        try:
            self.state = 1090
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,124,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1074
                self.match(fugue_sqlParser.T__4)
                self.state = 1075
                self.fugueJsonValue()
                self.state = 1080
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,122,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1076
                        self.match(fugue_sqlParser.T__0)
                        self.state = 1077
                        self.fugueJsonValue() 
                    self.state = 1082
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,122,self._ctx)

                self.state = 1084
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.T__0:
                    self.state = 1083
                    self.match(fugue_sqlParser.T__0)


                self.state = 1086
                self.match(fugue_sqlParser.T__5)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1088
                self.match(fugue_sqlParser.T__4)
                self.state = 1089
                self.match(fugue_sqlParser.T__5)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueJsonValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fugueJsonString(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueJsonStringContext,0)


        def fugueJsonNumber(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueJsonNumberContext,0)


        def fugueJsonObj(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueJsonObjContext,0)


        def fugueJsonArray(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueJsonArrayContext,0)


        def fugueJsonBool(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueJsonBoolContext,0)


        def fugueJsonNull(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueJsonNullContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueJsonValue

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueJsonValue" ):
                return visitor.visitFugueJsonValue(self)
            else:
                return visitor.visitChildren(self)




    def fugueJsonValue(self):

        localctx = fugue_sqlParser.FugueJsonValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_fugueJsonValue)
        try:
            self.state = 1098
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [fugue_sqlParser.STRING]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1092
                self.fugueJsonString()
                pass
            elif token in [fugue_sqlParser.MINUS, fugue_sqlParser.BIGINT_LITERAL, fugue_sqlParser.SMALLINT_LITERAL, fugue_sqlParser.TINYINT_LITERAL, fugue_sqlParser.INTEGER_VALUE, fugue_sqlParser.EXPONENT_VALUE, fugue_sqlParser.DECIMAL_VALUE, fugue_sqlParser.DOUBLE_LITERAL, fugue_sqlParser.BIGDECIMAL_LITERAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1093
                self.fugueJsonNumber()
                pass
            elif token in [fugue_sqlParser.T__2, fugue_sqlParser.T__7]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1094
                self.fugueJsonObj()
                pass
            elif token in [fugue_sqlParser.T__4]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1095
                self.fugueJsonArray()
                pass
            elif token in [fugue_sqlParser.T__9, fugue_sqlParser.T__10, fugue_sqlParser.FALSE, fugue_sqlParser.TRUE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1096
                self.fugueJsonBool()
                pass
            elif token in [fugue_sqlParser.T__11, fugue_sqlParser.THENULL]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1097
                self.fugueJsonNull()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueJsonNumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def number(self):
            return self.getTypedRuleContext(fugue_sqlParser.NumberContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueJsonNumber

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueJsonNumber" ):
                return visitor.visitFugueJsonNumber(self)
            else:
                return visitor.visitChildren(self)




    def fugueJsonNumber(self):

        localctx = fugue_sqlParser.FugueJsonNumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_fugueJsonNumber)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1100
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueJsonStringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueJsonString

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueJsonString" ):
                return visitor.visitFugueJsonString(self)
            else:
                return visitor.visitChildren(self)




    def fugueJsonString(self):

        localctx = fugue_sqlParser.FugueJsonStringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_fugueJsonString)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1102
            self.match(fugue_sqlParser.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueJsonBoolContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(fugue_sqlParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(fugue_sqlParser.FALSE, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueJsonBool

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueJsonBool" ):
                return visitor.visitFugueJsonBool(self)
            else:
                return visitor.visitChildren(self)




    def fugueJsonBool(self):

        localctx = fugue_sqlParser.FugueJsonBoolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_fugueJsonBool)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1104
            _la = self._input.LA(1)
            if not(_la==fugue_sqlParser.T__9 or _la==fugue_sqlParser.T__10 or _la==fugue_sqlParser.FALSE or _la==fugue_sqlParser.TRUE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueJsonNullContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def THENULL(self):
            return self.getToken(fugue_sqlParser.THENULL, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueJsonNull

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueJsonNull" ):
                return visitor.visitFugueJsonNull(self)
            else:
                return visitor.visitChildren(self)




    def fugueJsonNull(self):

        localctx = fugue_sqlParser.FugueJsonNullContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_fugueJsonNull)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1106
            _la = self._input.LA(1)
            if not(_la==fugue_sqlParser.T__11 or _la==fugue_sqlParser.THENULL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueIdentifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueIdentifier" ):
                return visitor.visitFugueIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def fugueIdentifier(self):

        localctx = fugue_sqlParser.FugueIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_fugueIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1108
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(fugue_sqlParser.StatementContext,0)


        def EOF(self):
            return self.getToken(fugue_sqlParser.EOF, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_singleStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleStatement" ):
                return visitor.visitSingleStatement(self)
            else:
                return visitor.visitChildren(self)




    def singleStatement(self):

        localctx = fugue_sqlParser.SingleStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_singleStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1110
            self.statement()
            self.state = 1114
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==fugue_sqlParser.T__12:
                self.state = 1111
                self.match(fugue_sqlParser.T__12)
                self.state = 1116
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1117
            self.match(fugue_sqlParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namedExpression(self):
            return self.getTypedRuleContext(fugue_sqlParser.NamedExpressionContext,0)


        def EOF(self):
            return self.getToken(fugue_sqlParser.EOF, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_singleExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleExpression" ):
                return visitor.visitSingleExpression(self)
            else:
                return visitor.visitChildren(self)




    def singleExpression(self):

        localctx = fugue_sqlParser.SingleExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_singleExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1119
            self.namedExpression()
            self.state = 1120
            self.match(fugue_sqlParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleTableIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.TableIdentifierContext,0)


        def EOF(self):
            return self.getToken(fugue_sqlParser.EOF, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_singleTableIdentifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleTableIdentifier" ):
                return visitor.visitSingleTableIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def singleTableIdentifier(self):

        localctx = fugue_sqlParser.SingleTableIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_singleTableIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1122
            self.tableIdentifier()
            self.state = 1123
            self.match(fugue_sqlParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleMultipartIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)


        def EOF(self):
            return self.getToken(fugue_sqlParser.EOF, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_singleMultipartIdentifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleMultipartIdentifier" ):
                return visitor.visitSingleMultipartIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def singleMultipartIdentifier(self):

        localctx = fugue_sqlParser.SingleMultipartIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_singleMultipartIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1125
            self.multipartIdentifier()
            self.state = 1126
            self.match(fugue_sqlParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleFunctionIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.FunctionIdentifierContext,0)


        def EOF(self):
            return self.getToken(fugue_sqlParser.EOF, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_singleFunctionIdentifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleFunctionIdentifier" ):
                return visitor.visitSingleFunctionIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def singleFunctionIdentifier(self):

        localctx = fugue_sqlParser.SingleFunctionIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_singleFunctionIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1128
            self.functionIdentifier()
            self.state = 1129
            self.match(fugue_sqlParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleDataTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dataType(self):
            return self.getTypedRuleContext(fugue_sqlParser.DataTypeContext,0)


        def EOF(self):
            return self.getToken(fugue_sqlParser.EOF, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_singleDataType

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleDataType" ):
                return visitor.visitSingleDataType(self)
            else:
                return visitor.visitChildren(self)




    def singleDataType(self):

        localctx = fugue_sqlParser.SingleDataTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_singleDataType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1131
            self.dataType()
            self.state = 1132
            self.match(fugue_sqlParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleTableSchemaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colTypeList(self):
            return self.getTypedRuleContext(fugue_sqlParser.ColTypeListContext,0)


        def EOF(self):
            return self.getToken(fugue_sqlParser.EOF, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_singleTableSchema

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleTableSchema" ):
                return visitor.visitSingleTableSchema(self)
            else:
                return visitor.visitChildren(self)




    def singleTableSchema(self):

        localctx = fugue_sqlParser.SingleTableSchemaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_singleTableSchema)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1134
            self.colTypeList()
            self.state = 1135
            self.match(fugue_sqlParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_statement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ExplainContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXPLAIN(self):
            return self.getToken(fugue_sqlParser.EXPLAIN, 0)
        def statement(self):
            return self.getTypedRuleContext(fugue_sqlParser.StatementContext,0)

        def LOGICAL(self):
            return self.getToken(fugue_sqlParser.LOGICAL, 0)
        def FORMATTED(self):
            return self.getToken(fugue_sqlParser.FORMATTED, 0)
        def EXTENDED(self):
            return self.getToken(fugue_sqlParser.EXTENDED, 0)
        def CODEGEN(self):
            return self.getToken(fugue_sqlParser.CODEGEN, 0)
        def COST(self):
            return self.getToken(fugue_sqlParser.COST, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExplain" ):
                return visitor.visitExplain(self)
            else:
                return visitor.visitChildren(self)


    class ResetConfigurationContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def RESET(self):
            return self.getToken(fugue_sqlParser.RESET, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitResetConfiguration" ):
                return visitor.visitResetConfiguration(self)
            else:
                return visitor.visitChildren(self)


    class AlterViewQueryContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)
        def VIEW(self):
            return self.getToken(fugue_sqlParser.VIEW, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def query(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryContext,0)

        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterViewQuery" ):
                return visitor.visitAlterViewQuery(self)
            else:
                return visitor.visitChildren(self)


    class UseContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def USE(self):
            return self.getToken(fugue_sqlParser.USE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def NAMESPACE(self):
            return self.getToken(fugue_sqlParser.NAMESPACE, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUse" ):
                return visitor.visitUse(self)
            else:
                return visitor.visitChildren(self)


    class DropNamespaceContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(fugue_sqlParser.DROP, 0)
        def theNamespace(self):
            return self.getTypedRuleContext(fugue_sqlParser.TheNamespaceContext,0)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def IF(self):
            return self.getToken(fugue_sqlParser.IF, 0)
        def EXISTS(self):
            return self.getToken(fugue_sqlParser.EXISTS, 0)
        def RESTRICT(self):
            return self.getToken(fugue_sqlParser.RESTRICT, 0)
        def CASCADE(self):
            return self.getToken(fugue_sqlParser.CASCADE, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropNamespace" ):
                return visitor.visitDropNamespace(self)
            else:
                return visitor.visitChildren(self)


    class CreateTempViewUsingContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(fugue_sqlParser.CREATE, 0)
        def TEMPORARY(self):
            return self.getToken(fugue_sqlParser.TEMPORARY, 0)
        def VIEW(self):
            return self.getToken(fugue_sqlParser.VIEW, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.TableIdentifierContext,0)

        def tableProvider(self):
            return self.getTypedRuleContext(fugue_sqlParser.TableProviderContext,0)

        def OR(self):
            return self.getToken(fugue_sqlParser.OR, 0)
        def REPLACE(self):
            return self.getToken(fugue_sqlParser.REPLACE, 0)
        def GLOBAL(self):
            return self.getToken(fugue_sqlParser.GLOBAL, 0)
        def colTypeList(self):
            return self.getTypedRuleContext(fugue_sqlParser.ColTypeListContext,0)

        def OPTIONS(self):
            return self.getToken(fugue_sqlParser.OPTIONS, 0)
        def tablePropertyList(self):
            return self.getTypedRuleContext(fugue_sqlParser.TablePropertyListContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateTempViewUsing" ):
                return visitor.visitCreateTempViewUsing(self)
            else:
                return visitor.visitChildren(self)


    class RenameTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.ifrom = None # MultipartIdentifierContext
            self.to = None # MultipartIdentifierContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)
        def RENAME(self):
            return self.getToken(fugue_sqlParser.RENAME, 0)
        def TO(self):
            return self.getToken(fugue_sqlParser.TO, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def VIEW(self):
            return self.getToken(fugue_sqlParser.VIEW, 0)
        def multipartIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.MultipartIdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,i)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRenameTable" ):
                return visitor.visitRenameTable(self)
            else:
                return visitor.visitChildren(self)


    class FailNativeCommandContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SET(self):
            return self.getToken(fugue_sqlParser.SET, 0)
        def ROLE(self):
            return self.getToken(fugue_sqlParser.ROLE, 0)
        def unsupportedHiveNativeCommands(self):
            return self.getTypedRuleContext(fugue_sqlParser.UnsupportedHiveNativeCommandsContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFailNativeCommand" ):
                return visitor.visitFailNativeCommand(self)
            else:
                return visitor.visitChildren(self)


    class ClearCacheContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CLEAR(self):
            return self.getToken(fugue_sqlParser.CLEAR, 0)
        def CACHE(self):
            return self.getToken(fugue_sqlParser.CACHE, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClearCache" ):
                return visitor.visitClearCache(self)
            else:
                return visitor.visitChildren(self)


    class DropViewContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(fugue_sqlParser.DROP, 0)
        def VIEW(self):
            return self.getToken(fugue_sqlParser.VIEW, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def IF(self):
            return self.getToken(fugue_sqlParser.IF, 0)
        def EXISTS(self):
            return self.getToken(fugue_sqlParser.EXISTS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropView" ):
                return visitor.visitDropView(self)
            else:
                return visitor.visitChildren(self)


    class ShowTablesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.pattern = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(fugue_sqlParser.SHOW, 0)
        def TABLES(self):
            return self.getToken(fugue_sqlParser.TABLES, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def FROM(self):
            return self.getToken(fugue_sqlParser.FROM, 0)
        def IN(self):
            return self.getToken(fugue_sqlParser.IN, 0)
        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)
        def LIKE(self):
            return self.getToken(fugue_sqlParser.LIKE, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowTables" ):
                return visitor.visitShowTables(self)
            else:
                return visitor.visitChildren(self)


    class RecoverPartitionsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def RECOVER(self):
            return self.getToken(fugue_sqlParser.RECOVER, 0)
        def PARTITIONS(self):
            return self.getToken(fugue_sqlParser.PARTITIONS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRecoverPartitions" ):
                return visitor.visitRecoverPartitions(self)
            else:
                return visitor.visitChildren(self)


    class ShowCurrentNamespaceContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(fugue_sqlParser.SHOW, 0)
        def CURRENT(self):
            return self.getToken(fugue_sqlParser.CURRENT, 0)
        def NAMESPACE(self):
            return self.getToken(fugue_sqlParser.NAMESPACE, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowCurrentNamespace" ):
                return visitor.visitShowCurrentNamespace(self)
            else:
                return visitor.visitChildren(self)


    class RenameTablePartitionContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.ifrom = None # PartitionSpecContext
            self.to = None # PartitionSpecContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def RENAME(self):
            return self.getToken(fugue_sqlParser.RENAME, 0)
        def TO(self):
            return self.getToken(fugue_sqlParser.TO, 0)
        def partitionSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.PartitionSpecContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.PartitionSpecContext,i)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRenameTablePartition" ):
                return visitor.visitRenameTablePartition(self)
            else:
                return visitor.visitChildren(self)


    class RepairTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MSCK(self):
            return self.getToken(fugue_sqlParser.MSCK, 0)
        def REPAIR(self):
            return self.getToken(fugue_sqlParser.REPAIR, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRepairTable" ):
                return visitor.visitRepairTable(self)
            else:
                return visitor.visitChildren(self)


    class RefreshResourceContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REFRESH(self):
            return self.getToken(fugue_sqlParser.REFRESH, 0)
        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRefreshResource" ):
                return visitor.visitRefreshResource(self)
            else:
                return visitor.visitChildren(self)


    class ShowCreateTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(fugue_sqlParser.SHOW, 0)
        def CREATE(self):
            return self.getToken(fugue_sqlParser.CREATE, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)
        def SERDE(self):
            return self.getToken(fugue_sqlParser.SERDE, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowCreateTable" ):
                return visitor.visitShowCreateTable(self)
            else:
                return visitor.visitChildren(self)


    class ShowNamespacesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.pattern = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(fugue_sqlParser.SHOW, 0)
        def DATABASES(self):
            return self.getToken(fugue_sqlParser.DATABASES, 0)
        def NAMESPACES(self):
            return self.getToken(fugue_sqlParser.NAMESPACES, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def FROM(self):
            return self.getToken(fugue_sqlParser.FROM, 0)
        def IN(self):
            return self.getToken(fugue_sqlParser.IN, 0)
        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)
        def LIKE(self):
            return self.getToken(fugue_sqlParser.LIKE, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowNamespaces" ):
                return visitor.visitShowNamespaces(self)
            else:
                return visitor.visitChildren(self)


    class ShowColumnsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.table = None # MultipartIdentifierContext
            self.ns = None # MultipartIdentifierContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(fugue_sqlParser.SHOW, 0)
        def COLUMNS(self):
            return self.getToken(fugue_sqlParser.COLUMNS, 0)
        def FROM(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.FROM)
            else:
                return self.getToken(fugue_sqlParser.FROM, i)
        def IN(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.IN)
            else:
                return self.getToken(fugue_sqlParser.IN, i)
        def multipartIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.MultipartIdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,i)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowColumns" ):
                return visitor.visitShowColumns(self)
            else:
                return visitor.visitChildren(self)


    class ReplaceTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def replaceTableHeader(self):
            return self.getTypedRuleContext(fugue_sqlParser.ReplaceTableHeaderContext,0)

        def tableProvider(self):
            return self.getTypedRuleContext(fugue_sqlParser.TableProviderContext,0)

        def createTableClauses(self):
            return self.getTypedRuleContext(fugue_sqlParser.CreateTableClausesContext,0)

        def colTypeList(self):
            return self.getTypedRuleContext(fugue_sqlParser.ColTypeListContext,0)

        def query(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryContext,0)

        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReplaceTable" ):
                return visitor.visitReplaceTable(self)
            else:
                return visitor.visitChildren(self)


    class AddTablePartitionContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def ADD(self):
            return self.getToken(fugue_sqlParser.ADD, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def VIEW(self):
            return self.getToken(fugue_sqlParser.VIEW, 0)
        def IF(self):
            return self.getToken(fugue_sqlParser.IF, 0)
        def NOT(self):
            return self.getToken(fugue_sqlParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(fugue_sqlParser.EXISTS, 0)
        def partitionSpecLocation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.PartitionSpecLocationContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.PartitionSpecLocationContext,i)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAddTablePartition" ):
                return visitor.visitAddTablePartition(self)
            else:
                return visitor.visitChildren(self)


    class SetNamespaceLocationContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)
        def theNamespace(self):
            return self.getTypedRuleContext(fugue_sqlParser.TheNamespaceContext,0)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def SET(self):
            return self.getToken(fugue_sqlParser.SET, 0)
        def locationSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.LocationSpecContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetNamespaceLocation" ):
                return visitor.visitSetNamespaceLocation(self)
            else:
                return visitor.visitChildren(self)


    class RefreshTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REFRESH(self):
            return self.getToken(fugue_sqlParser.REFRESH, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRefreshTable" ):
                return visitor.visitRefreshTable(self)
            else:
                return visitor.visitChildren(self)


    class SetNamespacePropertiesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)
        def theNamespace(self):
            return self.getTypedRuleContext(fugue_sqlParser.TheNamespaceContext,0)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def SET(self):
            return self.getToken(fugue_sqlParser.SET, 0)
        def tablePropertyList(self):
            return self.getTypedRuleContext(fugue_sqlParser.TablePropertyListContext,0)

        def DBPROPERTIES(self):
            return self.getToken(fugue_sqlParser.DBPROPERTIES, 0)
        def PROPERTIES(self):
            return self.getToken(fugue_sqlParser.PROPERTIES, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetNamespaceProperties" ):
                return visitor.visitSetNamespaceProperties(self)
            else:
                return visitor.visitChildren(self)


    class ManageResourceContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)

        def ADD(self):
            return self.getToken(fugue_sqlParser.ADD, 0)
        def LIST(self):
            return self.getToken(fugue_sqlParser.LIST, 0)
        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitManageResource" ):
                return visitor.visitManageResource(self)
            else:
                return visitor.visitChildren(self)


    class AnalyzeContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ANALYZE(self):
            return self.getToken(fugue_sqlParser.ANALYZE, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def COMPUTE(self):
            return self.getToken(fugue_sqlParser.COMPUTE, 0)
        def STATISTICS(self):
            return self.getToken(fugue_sqlParser.STATISTICS, 0)
        def partitionSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.PartitionSpecContext,0)

        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)

        def FOR(self):
            return self.getToken(fugue_sqlParser.FOR, 0)
        def COLUMNS(self):
            return self.getToken(fugue_sqlParser.COLUMNS, 0)
        def identifierSeq(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierSeqContext,0)

        def ALL(self):
            return self.getToken(fugue_sqlParser.ALL, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnalyze" ):
                return visitor.visitAnalyze(self)
            else:
                return visitor.visitChildren(self)


    class CreateHiveTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.columns = None # ColTypeListContext
            self.partitionColumns = None # ColTypeListContext
            self.partitionColumnNames = None # IdentifierListContext
            self.tableProps = None # TablePropertyListContext
            self.copyFrom(ctx)

        def createTableHeader(self):
            return self.getTypedRuleContext(fugue_sqlParser.CreateTableHeaderContext,0)

        def commentSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.CommentSpecContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.CommentSpecContext,i)

        def bucketSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.BucketSpecContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.BucketSpecContext,i)

        def skewSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.SkewSpecContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.SkewSpecContext,i)

        def rowFormat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.RowFormatContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.RowFormatContext,i)

        def createFileFormat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.CreateFileFormatContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.CreateFileFormatContext,i)

        def locationSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.LocationSpecContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.LocationSpecContext,i)

        def query(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryContext,0)

        def colTypeList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ColTypeListContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ColTypeListContext,i)

        def PARTITIONED(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.PARTITIONED)
            else:
                return self.getToken(fugue_sqlParser.PARTITIONED, i)
        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.BY)
            else:
                return self.getToken(fugue_sqlParser.BY, i)
        def TBLPROPERTIES(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.TBLPROPERTIES)
            else:
                return self.getToken(fugue_sqlParser.TBLPROPERTIES, i)
        def identifierList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.IdentifierListContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.IdentifierListContext,i)

        def tablePropertyList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.TablePropertyListContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.TablePropertyListContext,i)

        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateHiveTable" ):
                return visitor.visitCreateHiveTable(self)
            else:
                return visitor.visitChildren(self)


    class CreateFunctionContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.className = None # Token
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(fugue_sqlParser.CREATE, 0)
        def FUNCTION(self):
            return self.getToken(fugue_sqlParser.FUNCTION, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)
        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)
        def OR(self):
            return self.getToken(fugue_sqlParser.OR, 0)
        def REPLACE(self):
            return self.getToken(fugue_sqlParser.REPLACE, 0)
        def TEMPORARY(self):
            return self.getToken(fugue_sqlParser.TEMPORARY, 0)
        def IF(self):
            return self.getToken(fugue_sqlParser.IF, 0)
        def NOT(self):
            return self.getToken(fugue_sqlParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(fugue_sqlParser.EXISTS, 0)
        def USING(self):
            return self.getToken(fugue_sqlParser.USING, 0)
        def resource(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ResourceContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ResourceContext,i)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateFunction" ):
                return visitor.visitCreateFunction(self)
            else:
                return visitor.visitChildren(self)


    class ShowTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.ns = None # MultipartIdentifierContext
            self.pattern = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(fugue_sqlParser.SHOW, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def EXTENDED(self):
            return self.getToken(fugue_sqlParser.EXTENDED, 0)
        def LIKE(self):
            return self.getToken(fugue_sqlParser.LIKE, 0)
        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)
        def partitionSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.PartitionSpecContext,0)

        def FROM(self):
            return self.getToken(fugue_sqlParser.FROM, 0)
        def IN(self):
            return self.getToken(fugue_sqlParser.IN, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowTable" ):
                return visitor.visitShowTable(self)
            else:
                return visitor.visitChildren(self)


    class HiveReplaceColumnsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.table = None # MultipartIdentifierContext
            self.columns = None # QualifiedColTypeWithPositionListContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def REPLACE(self):
            return self.getToken(fugue_sqlParser.REPLACE, 0)
        def COLUMNS(self):
            return self.getToken(fugue_sqlParser.COLUMNS, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def qualifiedColTypeWithPositionList(self):
            return self.getTypedRuleContext(fugue_sqlParser.QualifiedColTypeWithPositionListContext,0)

        def partitionSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.PartitionSpecContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHiveReplaceColumns" ):
                return visitor.visitHiveReplaceColumns(self)
            else:
                return visitor.visitChildren(self)


    class CommentNamespaceContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.comment = None # Token
            self.copyFrom(ctx)

        def COMMENT(self):
            return self.getToken(fugue_sqlParser.COMMENT, 0)
        def ON(self):
            return self.getToken(fugue_sqlParser.ON, 0)
        def theNamespace(self):
            return self.getTypedRuleContext(fugue_sqlParser.TheNamespaceContext,0)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def IS(self):
            return self.getToken(fugue_sqlParser.IS, 0)
        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)
        def THENULL(self):
            return self.getToken(fugue_sqlParser.THENULL, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCommentNamespace" ):
                return visitor.visitCommentNamespace(self)
            else:
                return visitor.visitChildren(self)


    class CreateTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def createTableHeader(self):
            return self.getTypedRuleContext(fugue_sqlParser.CreateTableHeaderContext,0)

        def tableProvider(self):
            return self.getTypedRuleContext(fugue_sqlParser.TableProviderContext,0)

        def createTableClauses(self):
            return self.getTypedRuleContext(fugue_sqlParser.CreateTableClausesContext,0)

        def colTypeList(self):
            return self.getTypedRuleContext(fugue_sqlParser.ColTypeListContext,0)

        def query(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryContext,0)

        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateTable" ):
                return visitor.visitCreateTable(self)
            else:
                return visitor.visitChildren(self)


    class DmlStatementContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def dmlStatementNoWith(self):
            return self.getTypedRuleContext(fugue_sqlParser.DmlStatementNoWithContext,0)

        def ctes(self):
            return self.getTypedRuleContext(fugue_sqlParser.CtesContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDmlStatement" ):
                return visitor.visitDmlStatement(self)
            else:
                return visitor.visitChildren(self)


    class CreateTableLikeContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.target = None # TableIdentifierContext
            self.source = None # TableIdentifierContext
            self.tableProps = None # TablePropertyListContext
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(fugue_sqlParser.CREATE, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def LIKE(self):
            return self.getToken(fugue_sqlParser.LIKE, 0)
        def tableIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.TableIdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.TableIdentifierContext,i)

        def IF(self):
            return self.getToken(fugue_sqlParser.IF, 0)
        def NOT(self):
            return self.getToken(fugue_sqlParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(fugue_sqlParser.EXISTS, 0)
        def tableProvider(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.TableProviderContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.TableProviderContext,i)

        def rowFormat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.RowFormatContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.RowFormatContext,i)

        def createFileFormat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.CreateFileFormatContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.CreateFileFormatContext,i)

        def locationSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.LocationSpecContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.LocationSpecContext,i)

        def TBLPROPERTIES(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.TBLPROPERTIES)
            else:
                return self.getToken(fugue_sqlParser.TBLPROPERTIES, i)
        def tablePropertyList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.TablePropertyListContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.TablePropertyListContext,i)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateTableLike" ):
                return visitor.visitCreateTableLike(self)
            else:
                return visitor.visitChildren(self)


    class UncacheTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def UNCACHE(self):
            return self.getToken(fugue_sqlParser.UNCACHE, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def IF(self):
            return self.getToken(fugue_sqlParser.IF, 0)
        def EXISTS(self):
            return self.getToken(fugue_sqlParser.EXISTS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUncacheTable" ):
                return visitor.visitUncacheTable(self)
            else:
                return visitor.visitChildren(self)


    class DropFunctionContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(fugue_sqlParser.DROP, 0)
        def FUNCTION(self):
            return self.getToken(fugue_sqlParser.FUNCTION, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def TEMPORARY(self):
            return self.getToken(fugue_sqlParser.TEMPORARY, 0)
        def IF(self):
            return self.getToken(fugue_sqlParser.IF, 0)
        def EXISTS(self):
            return self.getToken(fugue_sqlParser.EXISTS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropFunction" ):
                return visitor.visitDropFunction(self)
            else:
                return visitor.visitChildren(self)


    class DescribeRelationContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.option = None # Token
            self.copyFrom(ctx)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def DESC(self):
            return self.getToken(fugue_sqlParser.DESC, 0)
        def DESCRIBE(self):
            return self.getToken(fugue_sqlParser.DESCRIBE, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def partitionSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.PartitionSpecContext,0)

        def describeColName(self):
            return self.getTypedRuleContext(fugue_sqlParser.DescribeColNameContext,0)

        def EXTENDED(self):
            return self.getToken(fugue_sqlParser.EXTENDED, 0)
        def FORMATTED(self):
            return self.getToken(fugue_sqlParser.FORMATTED, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDescribeRelation" ):
                return visitor.visitDescribeRelation(self)
            else:
                return visitor.visitChildren(self)


    class LoadDataContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.path = None # Token
            self.copyFrom(ctx)

        def LOAD(self):
            return self.getToken(fugue_sqlParser.LOAD, 0)
        def DATA(self):
            return self.getToken(fugue_sqlParser.DATA, 0)
        def INPATH(self):
            return self.getToken(fugue_sqlParser.INPATH, 0)
        def INTO(self):
            return self.getToken(fugue_sqlParser.INTO, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)
        def LOCAL(self):
            return self.getToken(fugue_sqlParser.LOCAL, 0)
        def OVERWRITE(self):
            return self.getToken(fugue_sqlParser.OVERWRITE, 0)
        def partitionSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.PartitionSpecContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLoadData" ):
                return visitor.visitLoadData(self)
            else:
                return visitor.visitChildren(self)


    class ShowPartitionsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(fugue_sqlParser.SHOW, 0)
        def PARTITIONS(self):
            return self.getToken(fugue_sqlParser.PARTITIONS, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def partitionSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.PartitionSpecContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowPartitions" ):
                return visitor.visitShowPartitions(self)
            else:
                return visitor.visitChildren(self)


    class DescribeFunctionContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FUNCTION(self):
            return self.getToken(fugue_sqlParser.FUNCTION, 0)
        def describeFuncName(self):
            return self.getTypedRuleContext(fugue_sqlParser.DescribeFuncNameContext,0)

        def DESC(self):
            return self.getToken(fugue_sqlParser.DESC, 0)
        def DESCRIBE(self):
            return self.getToken(fugue_sqlParser.DESCRIBE, 0)
        def EXTENDED(self):
            return self.getToken(fugue_sqlParser.EXTENDED, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDescribeFunction" ):
                return visitor.visitDescribeFunction(self)
            else:
                return visitor.visitChildren(self)


    class RenameTableColumnContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.table = None # MultipartIdentifierContext
            self.ifrom = None # MultipartIdentifierContext
            self.to = None # ErrorCapturingIdentifierContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def RENAME(self):
            return self.getToken(fugue_sqlParser.RENAME, 0)
        def COLUMN(self):
            return self.getToken(fugue_sqlParser.COLUMN, 0)
        def TO(self):
            return self.getToken(fugue_sqlParser.TO, 0)
        def multipartIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.MultipartIdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,i)

        def errorCapturingIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.ErrorCapturingIdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRenameTableColumn" ):
                return visitor.visitRenameTableColumn(self)
            else:
                return visitor.visitChildren(self)


    class StatementDefaultContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def query(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatementDefault" ):
                return visitor.visitStatementDefault(self)
            else:
                return visitor.visitChildren(self)


    class HiveChangeColumnContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.table = None # MultipartIdentifierContext
            self.colName = None # MultipartIdentifierContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def CHANGE(self):
            return self.getToken(fugue_sqlParser.CHANGE, 0)
        def colType(self):
            return self.getTypedRuleContext(fugue_sqlParser.ColTypeContext,0)

        def multipartIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.MultipartIdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,i)

        def partitionSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.PartitionSpecContext,0)

        def COLUMN(self):
            return self.getToken(fugue_sqlParser.COLUMN, 0)
        def colPosition(self):
            return self.getTypedRuleContext(fugue_sqlParser.ColPositionContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHiveChangeColumn" ):
                return visitor.visitHiveChangeColumn(self)
            else:
                return visitor.visitChildren(self)


    class DescribeQueryContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def query(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryContext,0)

        def DESC(self):
            return self.getToken(fugue_sqlParser.DESC, 0)
        def DESCRIBE(self):
            return self.getToken(fugue_sqlParser.DESCRIBE, 0)
        def QUERY(self):
            return self.getToken(fugue_sqlParser.QUERY, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDescribeQuery" ):
                return visitor.visitDescribeQuery(self)
            else:
                return visitor.visitChildren(self)


    class TruncateTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TRUNCATE(self):
            return self.getToken(fugue_sqlParser.TRUNCATE, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def partitionSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.PartitionSpecContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTruncateTable" ):
                return visitor.visitTruncateTable(self)
            else:
                return visitor.visitChildren(self)


    class SetTableSerDeContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def SET(self):
            return self.getToken(fugue_sqlParser.SET, 0)
        def SERDE(self):
            return self.getToken(fugue_sqlParser.SERDE, 0)
        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)
        def partitionSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.PartitionSpecContext,0)

        def WITH(self):
            return self.getToken(fugue_sqlParser.WITH, 0)
        def SERDEPROPERTIES(self):
            return self.getToken(fugue_sqlParser.SERDEPROPERTIES, 0)
        def tablePropertyList(self):
            return self.getTypedRuleContext(fugue_sqlParser.TablePropertyListContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetTableSerDe" ):
                return visitor.visitSetTableSerDe(self)
            else:
                return visitor.visitChildren(self)


    class CreateViewContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(fugue_sqlParser.CREATE, 0)
        def VIEW(self):
            return self.getToken(fugue_sqlParser.VIEW, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)
        def query(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryContext,0)

        def OR(self):
            return self.getToken(fugue_sqlParser.OR, 0)
        def REPLACE(self):
            return self.getToken(fugue_sqlParser.REPLACE, 0)
        def TEMPORARY(self):
            return self.getToken(fugue_sqlParser.TEMPORARY, 0)
        def IF(self):
            return self.getToken(fugue_sqlParser.IF, 0)
        def NOT(self):
            return self.getToken(fugue_sqlParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(fugue_sqlParser.EXISTS, 0)
        def identifierCommentList(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierCommentListContext,0)

        def commentSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.CommentSpecContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.CommentSpecContext,i)

        def PARTITIONED(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.PARTITIONED)
            else:
                return self.getToken(fugue_sqlParser.PARTITIONED, i)
        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.ON)
            else:
                return self.getToken(fugue_sqlParser.ON, i)
        def identifierList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.IdentifierListContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.IdentifierListContext,i)

        def TBLPROPERTIES(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.TBLPROPERTIES)
            else:
                return self.getToken(fugue_sqlParser.TBLPROPERTIES, i)
        def tablePropertyList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.TablePropertyListContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.TablePropertyListContext,i)

        def GLOBAL(self):
            return self.getToken(fugue_sqlParser.GLOBAL, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateView" ):
                return visitor.visitCreateView(self)
            else:
                return visitor.visitChildren(self)


    class DropTablePartitionsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def DROP(self):
            return self.getToken(fugue_sqlParser.DROP, 0)
        def partitionSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.PartitionSpecContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.PartitionSpecContext,i)

        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def VIEW(self):
            return self.getToken(fugue_sqlParser.VIEW, 0)
        def IF(self):
            return self.getToken(fugue_sqlParser.IF, 0)
        def EXISTS(self):
            return self.getToken(fugue_sqlParser.EXISTS, 0)
        def PURGE(self):
            return self.getToken(fugue_sqlParser.PURGE, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropTablePartitions" ):
                return visitor.visitDropTablePartitions(self)
            else:
                return visitor.visitChildren(self)


    class SetConfigurationContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SET(self):
            return self.getToken(fugue_sqlParser.SET, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetConfiguration" ):
                return visitor.visitSetConfiguration(self)
            else:
                return visitor.visitChildren(self)


    class DropTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(fugue_sqlParser.DROP, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def IF(self):
            return self.getToken(fugue_sqlParser.IF, 0)
        def EXISTS(self):
            return self.getToken(fugue_sqlParser.EXISTS, 0)
        def PURGE(self):
            return self.getToken(fugue_sqlParser.PURGE, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropTable" ):
                return visitor.visitDropTable(self)
            else:
                return visitor.visitChildren(self)


    class DescribeNamespaceContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def theNamespace(self):
            return self.getTypedRuleContext(fugue_sqlParser.TheNamespaceContext,0)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def DESC(self):
            return self.getToken(fugue_sqlParser.DESC, 0)
        def DESCRIBE(self):
            return self.getToken(fugue_sqlParser.DESCRIBE, 0)
        def EXTENDED(self):
            return self.getToken(fugue_sqlParser.EXTENDED, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDescribeNamespace" ):
                return visitor.visitDescribeNamespace(self)
            else:
                return visitor.visitChildren(self)


    class AlterTableAlterColumnContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.table = None # MultipartIdentifierContext
            self.column = None # MultipartIdentifierContext
            self.copyFrom(ctx)

        def ALTER(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.ALTER)
            else:
                return self.getToken(fugue_sqlParser.ALTER, i)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def multipartIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.MultipartIdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,i)

        def CHANGE(self):
            return self.getToken(fugue_sqlParser.CHANGE, 0)
        def COLUMN(self):
            return self.getToken(fugue_sqlParser.COLUMN, 0)
        def alterColumnAction(self):
            return self.getTypedRuleContext(fugue_sqlParser.AlterColumnActionContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterTableAlterColumn" ):
                return visitor.visitAlterTableAlterColumn(self)
            else:
                return visitor.visitChildren(self)


    class CommentTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.comment = None # Token
            self.copyFrom(ctx)

        def COMMENT(self):
            return self.getToken(fugue_sqlParser.COMMENT, 0)
        def ON(self):
            return self.getToken(fugue_sqlParser.ON, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def IS(self):
            return self.getToken(fugue_sqlParser.IS, 0)
        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)
        def THENULL(self):
            return self.getToken(fugue_sqlParser.THENULL, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCommentTable" ):
                return visitor.visitCommentTable(self)
            else:
                return visitor.visitChildren(self)


    class CreateNamespaceContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(fugue_sqlParser.CREATE, 0)
        def theNamespace(self):
            return self.getTypedRuleContext(fugue_sqlParser.TheNamespaceContext,0)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def IF(self):
            return self.getToken(fugue_sqlParser.IF, 0)
        def NOT(self):
            return self.getToken(fugue_sqlParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(fugue_sqlParser.EXISTS, 0)
        def commentSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.CommentSpecContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.CommentSpecContext,i)

        def locationSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.LocationSpecContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.LocationSpecContext,i)

        def WITH(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.WITH)
            else:
                return self.getToken(fugue_sqlParser.WITH, i)
        def tablePropertyList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.TablePropertyListContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.TablePropertyListContext,i)

        def DBPROPERTIES(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.DBPROPERTIES)
            else:
                return self.getToken(fugue_sqlParser.DBPROPERTIES, i)
        def PROPERTIES(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.PROPERTIES)
            else:
                return self.getToken(fugue_sqlParser.PROPERTIES, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateNamespace" ):
                return visitor.visitCreateNamespace(self)
            else:
                return visitor.visitChildren(self)


    class ShowTblPropertiesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.table = None # MultipartIdentifierContext
            self.key = None # TablePropertyKeyContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(fugue_sqlParser.SHOW, 0)
        def TBLPROPERTIES(self):
            return self.getToken(fugue_sqlParser.TBLPROPERTIES, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def tablePropertyKey(self):
            return self.getTypedRuleContext(fugue_sqlParser.TablePropertyKeyContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowTblProperties" ):
                return visitor.visitShowTblProperties(self)
            else:
                return visitor.visitChildren(self)


    class UnsetTablePropertiesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def UNSET(self):
            return self.getToken(fugue_sqlParser.UNSET, 0)
        def TBLPROPERTIES(self):
            return self.getToken(fugue_sqlParser.TBLPROPERTIES, 0)
        def tablePropertyList(self):
            return self.getTypedRuleContext(fugue_sqlParser.TablePropertyListContext,0)

        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def VIEW(self):
            return self.getToken(fugue_sqlParser.VIEW, 0)
        def IF(self):
            return self.getToken(fugue_sqlParser.IF, 0)
        def EXISTS(self):
            return self.getToken(fugue_sqlParser.EXISTS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnsetTableProperties" ):
                return visitor.visitUnsetTableProperties(self)
            else:
                return visitor.visitChildren(self)


    class SetTableLocationContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def SET(self):
            return self.getToken(fugue_sqlParser.SET, 0)
        def locationSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.LocationSpecContext,0)

        def partitionSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.PartitionSpecContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetTableLocation" ):
                return visitor.visitSetTableLocation(self)
            else:
                return visitor.visitChildren(self)


    class DropTableColumnsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.columns = None # MultipartIdentifierListContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def DROP(self):
            return self.getToken(fugue_sqlParser.DROP, 0)
        def COLUMN(self):
            return self.getToken(fugue_sqlParser.COLUMN, 0)
        def COLUMNS(self):
            return self.getToken(fugue_sqlParser.COLUMNS, 0)
        def multipartIdentifierList(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierListContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropTableColumns" ):
                return visitor.visitDropTableColumns(self)
            else:
                return visitor.visitChildren(self)


    class ShowViewsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.pattern = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(fugue_sqlParser.SHOW, 0)
        def VIEWS(self):
            return self.getToken(fugue_sqlParser.VIEWS, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def FROM(self):
            return self.getToken(fugue_sqlParser.FROM, 0)
        def IN(self):
            return self.getToken(fugue_sqlParser.IN, 0)
        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)
        def LIKE(self):
            return self.getToken(fugue_sqlParser.LIKE, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowViews" ):
                return visitor.visitShowViews(self)
            else:
                return visitor.visitChildren(self)


    class ShowFunctionsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.pattern = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(fugue_sqlParser.SHOW, 0)
        def FUNCTIONS(self):
            return self.getToken(fugue_sqlParser.FUNCTIONS, 0)
        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def LIKE(self):
            return self.getToken(fugue_sqlParser.LIKE, 0)
        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowFunctions" ):
                return visitor.visitShowFunctions(self)
            else:
                return visitor.visitChildren(self)


    class CacheTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.options = None # TablePropertyListContext
            self.copyFrom(ctx)

        def CACHE(self):
            return self.getToken(fugue_sqlParser.CACHE, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def LAZY(self):
            return self.getToken(fugue_sqlParser.LAZY, 0)
        def OPTIONS(self):
            return self.getToken(fugue_sqlParser.OPTIONS, 0)
        def query(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryContext,0)

        def tablePropertyList(self):
            return self.getTypedRuleContext(fugue_sqlParser.TablePropertyListContext,0)

        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCacheTable" ):
                return visitor.visitCacheTable(self)
            else:
                return visitor.visitChildren(self)


    class AddTableColumnsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.columns = None # QualifiedColTypeWithPositionListContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def ADD(self):
            return self.getToken(fugue_sqlParser.ADD, 0)
        def COLUMN(self):
            return self.getToken(fugue_sqlParser.COLUMN, 0)
        def COLUMNS(self):
            return self.getToken(fugue_sqlParser.COLUMNS, 0)
        def qualifiedColTypeWithPositionList(self):
            return self.getTypedRuleContext(fugue_sqlParser.QualifiedColTypeWithPositionListContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAddTableColumns" ):
                return visitor.visitAddTableColumns(self)
            else:
                return visitor.visitChildren(self)


    class SetTablePropertiesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def SET(self):
            return self.getToken(fugue_sqlParser.SET, 0)
        def TBLPROPERTIES(self):
            return self.getToken(fugue_sqlParser.TBLPROPERTIES, 0)
        def tablePropertyList(self):
            return self.getTypedRuleContext(fugue_sqlParser.TablePropertyListContext,0)

        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def VIEW(self):
            return self.getToken(fugue_sqlParser.VIEW, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetTableProperties" ):
                return visitor.visitSetTableProperties(self)
            else:
                return visitor.visitChildren(self)



    def statement(self):

        localctx = fugue_sqlParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_statement)
        self._la = 0 # Token type
        try:
            self.state = 1842
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,232,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.StatementDefaultContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1137
                self.query()
                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.DmlStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1139
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.WITH:
                    self.state = 1138
                    self.ctes()


                self.state = 1141
                self.dmlStatementNoWith()
                pass

            elif la_ == 3:
                localctx = fugue_sqlParser.UseContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1142
                self.match(fugue_sqlParser.USE)
                self.state = 1144
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,128,self._ctx)
                if la_ == 1:
                    self.state = 1143
                    self.match(fugue_sqlParser.NAMESPACE)


                self.state = 1146
                self.multipartIdentifier()
                pass

            elif la_ == 4:
                localctx = fugue_sqlParser.CreateNamespaceContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1147
                self.match(fugue_sqlParser.CREATE)
                self.state = 1148
                self.theNamespace()
                self.state = 1152
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,129,self._ctx)
                if la_ == 1:
                    self.state = 1149
                    self.match(fugue_sqlParser.IF)
                    self.state = 1150
                    self.match(fugue_sqlParser.NOT)
                    self.state = 1151
                    self.match(fugue_sqlParser.EXISTS)


                self.state = 1154
                self.multipartIdentifier()
                self.state = 1162
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==fugue_sqlParser.COMMENT or _la==fugue_sqlParser.LOCATION or _la==fugue_sqlParser.WITH:
                    self.state = 1160
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [fugue_sqlParser.COMMENT]:
                        self.state = 1155
                        self.commentSpec()
                        pass
                    elif token in [fugue_sqlParser.LOCATION]:
                        self.state = 1156
                        self.locationSpec()
                        pass
                    elif token in [fugue_sqlParser.WITH]:
                        self.state = 1157
                        self.match(fugue_sqlParser.WITH)
                        self.state = 1158
                        _la = self._input.LA(1)
                        if not(_la==fugue_sqlParser.DBPROPERTIES or _la==fugue_sqlParser.PROPERTIES):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1159
                        self.tablePropertyList()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1164
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 5:
                localctx = fugue_sqlParser.SetNamespacePropertiesContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1165
                self.match(fugue_sqlParser.ALTER)
                self.state = 1166
                self.theNamespace()
                self.state = 1167
                self.multipartIdentifier()
                self.state = 1168
                self.match(fugue_sqlParser.SET)
                self.state = 1169
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.DBPROPERTIES or _la==fugue_sqlParser.PROPERTIES):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1170
                self.tablePropertyList()
                pass

            elif la_ == 6:
                localctx = fugue_sqlParser.SetNamespaceLocationContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 1172
                self.match(fugue_sqlParser.ALTER)
                self.state = 1173
                self.theNamespace()
                self.state = 1174
                self.multipartIdentifier()
                self.state = 1175
                self.match(fugue_sqlParser.SET)
                self.state = 1176
                self.locationSpec()
                pass

            elif la_ == 7:
                localctx = fugue_sqlParser.DropNamespaceContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 1178
                self.match(fugue_sqlParser.DROP)
                self.state = 1179
                self.theNamespace()
                self.state = 1182
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,132,self._ctx)
                if la_ == 1:
                    self.state = 1180
                    self.match(fugue_sqlParser.IF)
                    self.state = 1181
                    self.match(fugue_sqlParser.EXISTS)


                self.state = 1184
                self.multipartIdentifier()
                self.state = 1186
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.CASCADE or _la==fugue_sqlParser.RESTRICT:
                    self.state = 1185
                    _la = self._input.LA(1)
                    if not(_la==fugue_sqlParser.CASCADE or _la==fugue_sqlParser.RESTRICT):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass

            elif la_ == 8:
                localctx = fugue_sqlParser.ShowNamespacesContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 1188
                self.match(fugue_sqlParser.SHOW)
                self.state = 1189
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.DATABASES or _la==fugue_sqlParser.NAMESPACES):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1192
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.FROM or _la==fugue_sqlParser.IN:
                    self.state = 1190
                    _la = self._input.LA(1)
                    if not(_la==fugue_sqlParser.FROM or _la==fugue_sqlParser.IN):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1191
                    self.multipartIdentifier()


                self.state = 1198
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.LIKE or _la==fugue_sqlParser.STRING:
                    self.state = 1195
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==fugue_sqlParser.LIKE:
                        self.state = 1194
                        self.match(fugue_sqlParser.LIKE)


                    self.state = 1197
                    localctx.pattern = self.match(fugue_sqlParser.STRING)


                pass

            elif la_ == 9:
                localctx = fugue_sqlParser.CreateTableContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 1200
                self.createTableHeader()
                self.state = 1205
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.T__2:
                    self.state = 1201
                    self.match(fugue_sqlParser.T__2)
                    self.state = 1202
                    self.colTypeList()
                    self.state = 1203
                    self.match(fugue_sqlParser.T__3)


                self.state = 1207
                self.tableProvider()
                self.state = 1208
                self.createTableClauses()
                self.state = 1213
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << fugue_sqlParser.FILL) | (1 << fugue_sqlParser.TAKE) | (1 << fugue_sqlParser.PROCESS) | (1 << fugue_sqlParser.ZIP) | (1 << fugue_sqlParser.SAVE) | (1 << fugue_sqlParser.CONNECT) | (1 << fugue_sqlParser.SAMPLE) | (1 << fugue_sqlParser.ALTER) | (1 << fugue_sqlParser.AS))) != 0) or ((((_la - 94)) & ~0x3f) == 0 and ((1 << (_la - 94)) & ((1 << (fugue_sqlParser.CREATE - 94)) | (1 << (fugue_sqlParser.DROP - 94)) | (1 << (fugue_sqlParser.FROM - 94)))) != 0) or ((((_la - 177)) & ~0x3f) == 0 and ((1 << (_la - 177)) & ((1 << (fugue_sqlParser.LOAD - 177)) | (1 << (fugue_sqlParser.MAP - 177)) | (1 << (fugue_sqlParser.REDUCE - 177)) | (1 << (fugue_sqlParser.RENAME - 177)))) != 0) or ((((_la - 247)) & ~0x3f) == 0 and ((1 << (_la - 247)) & ((1 << (fugue_sqlParser.SELECT - 247)) | (1 << (fugue_sqlParser.TABLE - 247)) | (1 << (fugue_sqlParser.TRANSFORM - 247)) | (1 << (fugue_sqlParser.VALUES - 247)) | (1 << (fugue_sqlParser.WITH - 247)))) != 0):
                    self.state = 1210
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==fugue_sqlParser.AS:
                        self.state = 1209
                        self.match(fugue_sqlParser.AS)


                    self.state = 1212
                    self.query()


                pass

            elif la_ == 10:
                localctx = fugue_sqlParser.CreateHiveTableContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 1215
                self.createTableHeader()
                self.state = 1220
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.T__2:
                    self.state = 1216
                    self.match(fugue_sqlParser.T__2)
                    self.state = 1217
                    localctx.columns = self.colTypeList()
                    self.state = 1218
                    self.match(fugue_sqlParser.T__3)


                self.state = 1243
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==fugue_sqlParser.CLUSTERED or _la==fugue_sqlParser.COMMENT or _la==fugue_sqlParser.LOCATION or _la==fugue_sqlParser.PARTITIONED or ((((_la - 243)) & ~0x3f) == 0 and ((1 << (_la - 243)) & ((1 << (fugue_sqlParser.ROW - 243)) | (1 << (fugue_sqlParser.SKEWED - 243)) | (1 << (fugue_sqlParser.STORED - 243)) | (1 << (fugue_sqlParser.TBLPROPERTIES - 243)))) != 0):
                    self.state = 1241
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [fugue_sqlParser.COMMENT]:
                        self.state = 1222
                        self.commentSpec()
                        pass
                    elif token in [fugue_sqlParser.PARTITIONED]:
                        self.state = 1232
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,141,self._ctx)
                        if la_ == 1:
                            self.state = 1223
                            self.match(fugue_sqlParser.PARTITIONED)
                            self.state = 1224
                            self.match(fugue_sqlParser.BY)
                            self.state = 1225
                            self.match(fugue_sqlParser.T__2)
                            self.state = 1226
                            localctx.partitionColumns = self.colTypeList()
                            self.state = 1227
                            self.match(fugue_sqlParser.T__3)
                            pass

                        elif la_ == 2:
                            self.state = 1229
                            self.match(fugue_sqlParser.PARTITIONED)
                            self.state = 1230
                            self.match(fugue_sqlParser.BY)
                            self.state = 1231
                            localctx.partitionColumnNames = self.identifierList()
                            pass


                        pass
                    elif token in [fugue_sqlParser.CLUSTERED]:
                        self.state = 1234
                        self.bucketSpec()
                        pass
                    elif token in [fugue_sqlParser.SKEWED]:
                        self.state = 1235
                        self.skewSpec()
                        pass
                    elif token in [fugue_sqlParser.ROW]:
                        self.state = 1236
                        self.rowFormat()
                        pass
                    elif token in [fugue_sqlParser.STORED]:
                        self.state = 1237
                        self.createFileFormat()
                        pass
                    elif token in [fugue_sqlParser.LOCATION]:
                        self.state = 1238
                        self.locationSpec()
                        pass
                    elif token in [fugue_sqlParser.TBLPROPERTIES]:
                        self.state = 1239
                        self.match(fugue_sqlParser.TBLPROPERTIES)
                        self.state = 1240
                        localctx.tableProps = self.tablePropertyList()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1245
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1250
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << fugue_sqlParser.FILL) | (1 << fugue_sqlParser.TAKE) | (1 << fugue_sqlParser.PROCESS) | (1 << fugue_sqlParser.ZIP) | (1 << fugue_sqlParser.SAVE) | (1 << fugue_sqlParser.CONNECT) | (1 << fugue_sqlParser.SAMPLE) | (1 << fugue_sqlParser.ALTER) | (1 << fugue_sqlParser.AS))) != 0) or ((((_la - 94)) & ~0x3f) == 0 and ((1 << (_la - 94)) & ((1 << (fugue_sqlParser.CREATE - 94)) | (1 << (fugue_sqlParser.DROP - 94)) | (1 << (fugue_sqlParser.FROM - 94)))) != 0) or ((((_la - 177)) & ~0x3f) == 0 and ((1 << (_la - 177)) & ((1 << (fugue_sqlParser.LOAD - 177)) | (1 << (fugue_sqlParser.MAP - 177)) | (1 << (fugue_sqlParser.REDUCE - 177)) | (1 << (fugue_sqlParser.RENAME - 177)))) != 0) or ((((_la - 247)) & ~0x3f) == 0 and ((1 << (_la - 247)) & ((1 << (fugue_sqlParser.SELECT - 247)) | (1 << (fugue_sqlParser.TABLE - 247)) | (1 << (fugue_sqlParser.TRANSFORM - 247)) | (1 << (fugue_sqlParser.VALUES - 247)) | (1 << (fugue_sqlParser.WITH - 247)))) != 0):
                    self.state = 1247
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==fugue_sqlParser.AS:
                        self.state = 1246
                        self.match(fugue_sqlParser.AS)


                    self.state = 1249
                    self.query()


                pass

            elif la_ == 11:
                localctx = fugue_sqlParser.CreateTableLikeContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 1252
                self.match(fugue_sqlParser.CREATE)
                self.state = 1253
                self.match(fugue_sqlParser.TABLE)
                self.state = 1257
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,146,self._ctx)
                if la_ == 1:
                    self.state = 1254
                    self.match(fugue_sqlParser.IF)
                    self.state = 1255
                    self.match(fugue_sqlParser.NOT)
                    self.state = 1256
                    self.match(fugue_sqlParser.EXISTS)


                self.state = 1259
                localctx.target = self.tableIdentifier()
                self.state = 1260
                self.match(fugue_sqlParser.LIKE)
                self.state = 1261
                localctx.source = self.tableIdentifier()
                self.state = 1270
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==fugue_sqlParser.LOCATION or ((((_la - 243)) & ~0x3f) == 0 and ((1 << (_la - 243)) & ((1 << (fugue_sqlParser.ROW - 243)) | (1 << (fugue_sqlParser.STORED - 243)) | (1 << (fugue_sqlParser.TBLPROPERTIES - 243)) | (1 << (fugue_sqlParser.USING - 243)))) != 0):
                    self.state = 1268
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [fugue_sqlParser.USING]:
                        self.state = 1262
                        self.tableProvider()
                        pass
                    elif token in [fugue_sqlParser.ROW]:
                        self.state = 1263
                        self.rowFormat()
                        pass
                    elif token in [fugue_sqlParser.STORED]:
                        self.state = 1264
                        self.createFileFormat()
                        pass
                    elif token in [fugue_sqlParser.LOCATION]:
                        self.state = 1265
                        self.locationSpec()
                        pass
                    elif token in [fugue_sqlParser.TBLPROPERTIES]:
                        self.state = 1266
                        self.match(fugue_sqlParser.TBLPROPERTIES)
                        self.state = 1267
                        localctx.tableProps = self.tablePropertyList()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1272
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 12:
                localctx = fugue_sqlParser.ReplaceTableContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 1273
                self.replaceTableHeader()
                self.state = 1278
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.T__2:
                    self.state = 1274
                    self.match(fugue_sqlParser.T__2)
                    self.state = 1275
                    self.colTypeList()
                    self.state = 1276
                    self.match(fugue_sqlParser.T__3)


                self.state = 1280
                self.tableProvider()
                self.state = 1281
                self.createTableClauses()
                self.state = 1286
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << fugue_sqlParser.FILL) | (1 << fugue_sqlParser.TAKE) | (1 << fugue_sqlParser.PROCESS) | (1 << fugue_sqlParser.ZIP) | (1 << fugue_sqlParser.SAVE) | (1 << fugue_sqlParser.CONNECT) | (1 << fugue_sqlParser.SAMPLE) | (1 << fugue_sqlParser.ALTER) | (1 << fugue_sqlParser.AS))) != 0) or ((((_la - 94)) & ~0x3f) == 0 and ((1 << (_la - 94)) & ((1 << (fugue_sqlParser.CREATE - 94)) | (1 << (fugue_sqlParser.DROP - 94)) | (1 << (fugue_sqlParser.FROM - 94)))) != 0) or ((((_la - 177)) & ~0x3f) == 0 and ((1 << (_la - 177)) & ((1 << (fugue_sqlParser.LOAD - 177)) | (1 << (fugue_sqlParser.MAP - 177)) | (1 << (fugue_sqlParser.REDUCE - 177)) | (1 << (fugue_sqlParser.RENAME - 177)))) != 0) or ((((_la - 247)) & ~0x3f) == 0 and ((1 << (_la - 247)) & ((1 << (fugue_sqlParser.SELECT - 247)) | (1 << (fugue_sqlParser.TABLE - 247)) | (1 << (fugue_sqlParser.TRANSFORM - 247)) | (1 << (fugue_sqlParser.VALUES - 247)) | (1 << (fugue_sqlParser.WITH - 247)))) != 0):
                    self.state = 1283
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==fugue_sqlParser.AS:
                        self.state = 1282
                        self.match(fugue_sqlParser.AS)


                    self.state = 1285
                    self.query()


                pass

            elif la_ == 13:
                localctx = fugue_sqlParser.AnalyzeContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 1288
                self.match(fugue_sqlParser.ANALYZE)
                self.state = 1289
                self.match(fugue_sqlParser.TABLE)
                self.state = 1290
                self.multipartIdentifier()
                self.state = 1292
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.PARTITION:
                    self.state = 1291
                    self.partitionSpec()


                self.state = 1294
                self.match(fugue_sqlParser.COMPUTE)
                self.state = 1295
                self.match(fugue_sqlParser.STATISTICS)
                self.state = 1303
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,153,self._ctx)
                if la_ == 1:
                    self.state = 1296
                    self.identifier()

                elif la_ == 2:
                    self.state = 1297
                    self.match(fugue_sqlParser.FOR)
                    self.state = 1298
                    self.match(fugue_sqlParser.COLUMNS)
                    self.state = 1299
                    self.identifierSeq()

                elif la_ == 3:
                    self.state = 1300
                    self.match(fugue_sqlParser.FOR)
                    self.state = 1301
                    self.match(fugue_sqlParser.ALL)
                    self.state = 1302
                    self.match(fugue_sqlParser.COLUMNS)


                pass

            elif la_ == 14:
                localctx = fugue_sqlParser.AddTableColumnsContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 1305
                self.match(fugue_sqlParser.ALTER)
                self.state = 1306
                self.match(fugue_sqlParser.TABLE)
                self.state = 1307
                self.multipartIdentifier()
                self.state = 1308
                self.match(fugue_sqlParser.ADD)
                self.state = 1309
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.COLUMN or _la==fugue_sqlParser.COLUMNS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1310
                localctx.columns = self.qualifiedColTypeWithPositionList()
                pass

            elif la_ == 15:
                localctx = fugue_sqlParser.AddTableColumnsContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 1312
                self.match(fugue_sqlParser.ALTER)
                self.state = 1313
                self.match(fugue_sqlParser.TABLE)
                self.state = 1314
                self.multipartIdentifier()
                self.state = 1315
                self.match(fugue_sqlParser.ADD)
                self.state = 1316
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.COLUMN or _la==fugue_sqlParser.COLUMNS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1317
                self.match(fugue_sqlParser.T__2)
                self.state = 1318
                localctx.columns = self.qualifiedColTypeWithPositionList()
                self.state = 1319
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 16:
                localctx = fugue_sqlParser.RenameTableColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 1321
                self.match(fugue_sqlParser.ALTER)
                self.state = 1322
                self.match(fugue_sqlParser.TABLE)
                self.state = 1323
                localctx.table = self.multipartIdentifier()
                self.state = 1324
                self.match(fugue_sqlParser.RENAME)
                self.state = 1325
                self.match(fugue_sqlParser.COLUMN)
                self.state = 1326
                localctx.ifrom = self.multipartIdentifier()
                self.state = 1327
                self.match(fugue_sqlParser.TO)
                self.state = 1328
                localctx.to = self.errorCapturingIdentifier()
                pass

            elif la_ == 17:
                localctx = fugue_sqlParser.DropTableColumnsContext(self, localctx)
                self.enterOuterAlt(localctx, 17)
                self.state = 1330
                self.match(fugue_sqlParser.ALTER)
                self.state = 1331
                self.match(fugue_sqlParser.TABLE)
                self.state = 1332
                self.multipartIdentifier()
                self.state = 1333
                self.match(fugue_sqlParser.DROP)
                self.state = 1334
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.COLUMN or _la==fugue_sqlParser.COLUMNS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1335
                self.match(fugue_sqlParser.T__2)
                self.state = 1336
                localctx.columns = self.multipartIdentifierList()
                self.state = 1337
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 18:
                localctx = fugue_sqlParser.DropTableColumnsContext(self, localctx)
                self.enterOuterAlt(localctx, 18)
                self.state = 1339
                self.match(fugue_sqlParser.ALTER)
                self.state = 1340
                self.match(fugue_sqlParser.TABLE)
                self.state = 1341
                self.multipartIdentifier()
                self.state = 1342
                self.match(fugue_sqlParser.DROP)
                self.state = 1343
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.COLUMN or _la==fugue_sqlParser.COLUMNS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1344
                localctx.columns = self.multipartIdentifierList()
                pass

            elif la_ == 19:
                localctx = fugue_sqlParser.RenameTableContext(self, localctx)
                self.enterOuterAlt(localctx, 19)
                self.state = 1346
                self.match(fugue_sqlParser.ALTER)
                self.state = 1347
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.TABLE or _la==fugue_sqlParser.VIEW):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1348
                localctx.ifrom = self.multipartIdentifier()
                self.state = 1349
                self.match(fugue_sqlParser.RENAME)
                self.state = 1350
                self.match(fugue_sqlParser.TO)
                self.state = 1351
                localctx.to = self.multipartIdentifier()
                pass

            elif la_ == 20:
                localctx = fugue_sqlParser.SetTablePropertiesContext(self, localctx)
                self.enterOuterAlt(localctx, 20)
                self.state = 1353
                self.match(fugue_sqlParser.ALTER)
                self.state = 1354
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.TABLE or _la==fugue_sqlParser.VIEW):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1355
                self.multipartIdentifier()
                self.state = 1356
                self.match(fugue_sqlParser.SET)
                self.state = 1357
                self.match(fugue_sqlParser.TBLPROPERTIES)
                self.state = 1358
                self.tablePropertyList()
                pass

            elif la_ == 21:
                localctx = fugue_sqlParser.UnsetTablePropertiesContext(self, localctx)
                self.enterOuterAlt(localctx, 21)
                self.state = 1360
                self.match(fugue_sqlParser.ALTER)
                self.state = 1361
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.TABLE or _la==fugue_sqlParser.VIEW):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1362
                self.multipartIdentifier()
                self.state = 1363
                self.match(fugue_sqlParser.UNSET)
                self.state = 1364
                self.match(fugue_sqlParser.TBLPROPERTIES)
                self.state = 1367
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.IF:
                    self.state = 1365
                    self.match(fugue_sqlParser.IF)
                    self.state = 1366
                    self.match(fugue_sqlParser.EXISTS)


                self.state = 1369
                self.tablePropertyList()
                pass

            elif la_ == 22:
                localctx = fugue_sqlParser.AlterTableAlterColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 22)
                self.state = 1371
                self.match(fugue_sqlParser.ALTER)
                self.state = 1372
                self.match(fugue_sqlParser.TABLE)
                self.state = 1373
                localctx.table = self.multipartIdentifier()
                self.state = 1374
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.ALTER or _la==fugue_sqlParser.CHANGE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1376
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,155,self._ctx)
                if la_ == 1:
                    self.state = 1375
                    self.match(fugue_sqlParser.COLUMN)


                self.state = 1378
                localctx.column = self.multipartIdentifier()
                self.state = 1380
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.AFTER or ((((_la - 86)) & ~0x3f) == 0 and ((1 << (_la - 86)) & ((1 << (fugue_sqlParser.COMMENT - 86)) | (1 << (fugue_sqlParser.DROP - 86)) | (1 << (fugue_sqlParser.FIRST - 86)))) != 0) or _la==fugue_sqlParser.SET or _la==fugue_sqlParser.TYPE:
                    self.state = 1379
                    self.alterColumnAction()


                pass

            elif la_ == 23:
                localctx = fugue_sqlParser.HiveChangeColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 23)
                self.state = 1382
                self.match(fugue_sqlParser.ALTER)
                self.state = 1383
                self.match(fugue_sqlParser.TABLE)
                self.state = 1384
                localctx.table = self.multipartIdentifier()
                self.state = 1386
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.PARTITION:
                    self.state = 1385
                    self.partitionSpec()


                self.state = 1388
                self.match(fugue_sqlParser.CHANGE)
                self.state = 1390
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,158,self._ctx)
                if la_ == 1:
                    self.state = 1389
                    self.match(fugue_sqlParser.COLUMN)


                self.state = 1392
                localctx.colName = self.multipartIdentifier()
                self.state = 1393
                self.colType()
                self.state = 1395
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.AFTER or _la==fugue_sqlParser.FIRST:
                    self.state = 1394
                    self.colPosition()


                pass

            elif la_ == 24:
                localctx = fugue_sqlParser.HiveReplaceColumnsContext(self, localctx)
                self.enterOuterAlt(localctx, 24)
                self.state = 1397
                self.match(fugue_sqlParser.ALTER)
                self.state = 1398
                self.match(fugue_sqlParser.TABLE)
                self.state = 1399
                localctx.table = self.multipartIdentifier()
                self.state = 1401
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.PARTITION:
                    self.state = 1400
                    self.partitionSpec()


                self.state = 1403
                self.match(fugue_sqlParser.REPLACE)
                self.state = 1404
                self.match(fugue_sqlParser.COLUMNS)
                self.state = 1405
                self.match(fugue_sqlParser.T__2)
                self.state = 1406
                localctx.columns = self.qualifiedColTypeWithPositionList()
                self.state = 1407
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 25:
                localctx = fugue_sqlParser.SetTableSerDeContext(self, localctx)
                self.enterOuterAlt(localctx, 25)
                self.state = 1409
                self.match(fugue_sqlParser.ALTER)
                self.state = 1410
                self.match(fugue_sqlParser.TABLE)
                self.state = 1411
                self.multipartIdentifier()
                self.state = 1413
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.PARTITION:
                    self.state = 1412
                    self.partitionSpec()


                self.state = 1415
                self.match(fugue_sqlParser.SET)
                self.state = 1416
                self.match(fugue_sqlParser.SERDE)
                self.state = 1417
                self.match(fugue_sqlParser.STRING)
                self.state = 1421
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.WITH:
                    self.state = 1418
                    self.match(fugue_sqlParser.WITH)
                    self.state = 1419
                    self.match(fugue_sqlParser.SERDEPROPERTIES)
                    self.state = 1420
                    self.tablePropertyList()


                pass

            elif la_ == 26:
                localctx = fugue_sqlParser.SetTableSerDeContext(self, localctx)
                self.enterOuterAlt(localctx, 26)
                self.state = 1423
                self.match(fugue_sqlParser.ALTER)
                self.state = 1424
                self.match(fugue_sqlParser.TABLE)
                self.state = 1425
                self.multipartIdentifier()
                self.state = 1427
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.PARTITION:
                    self.state = 1426
                    self.partitionSpec()


                self.state = 1429
                self.match(fugue_sqlParser.SET)
                self.state = 1430
                self.match(fugue_sqlParser.SERDEPROPERTIES)
                self.state = 1431
                self.tablePropertyList()
                pass

            elif la_ == 27:
                localctx = fugue_sqlParser.AddTablePartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 27)
                self.state = 1433
                self.match(fugue_sqlParser.ALTER)
                self.state = 1434
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.TABLE or _la==fugue_sqlParser.VIEW):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1435
                self.multipartIdentifier()
                self.state = 1436
                self.match(fugue_sqlParser.ADD)
                self.state = 1440
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.IF:
                    self.state = 1437
                    self.match(fugue_sqlParser.IF)
                    self.state = 1438
                    self.match(fugue_sqlParser.NOT)
                    self.state = 1439
                    self.match(fugue_sqlParser.EXISTS)


                self.state = 1443 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1442
                    self.partitionSpecLocation()
                    self.state = 1445 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==fugue_sqlParser.PARTITION):
                        break

                pass

            elif la_ == 28:
                localctx = fugue_sqlParser.RenameTablePartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 28)
                self.state = 1447
                self.match(fugue_sqlParser.ALTER)
                self.state = 1448
                self.match(fugue_sqlParser.TABLE)
                self.state = 1449
                self.multipartIdentifier()
                self.state = 1450
                localctx.ifrom = self.partitionSpec()
                self.state = 1451
                self.match(fugue_sqlParser.RENAME)
                self.state = 1452
                self.match(fugue_sqlParser.TO)
                self.state = 1453
                localctx.to = self.partitionSpec()
                pass

            elif la_ == 29:
                localctx = fugue_sqlParser.DropTablePartitionsContext(self, localctx)
                self.enterOuterAlt(localctx, 29)
                self.state = 1455
                self.match(fugue_sqlParser.ALTER)
                self.state = 1456
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.TABLE or _la==fugue_sqlParser.VIEW):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1457
                self.multipartIdentifier()
                self.state = 1458
                self.match(fugue_sqlParser.DROP)
                self.state = 1461
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.IF:
                    self.state = 1459
                    self.match(fugue_sqlParser.IF)
                    self.state = 1460
                    self.match(fugue_sqlParser.EXISTS)


                self.state = 1463
                self.partitionSpec()
                self.state = 1468
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==fugue_sqlParser.T__0:
                    self.state = 1464
                    self.match(fugue_sqlParser.T__0)
                    self.state = 1465
                    self.partitionSpec()
                    self.state = 1470
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1472
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.PURGE:
                    self.state = 1471
                    self.match(fugue_sqlParser.PURGE)


                pass

            elif la_ == 30:
                localctx = fugue_sqlParser.SetTableLocationContext(self, localctx)
                self.enterOuterAlt(localctx, 30)
                self.state = 1474
                self.match(fugue_sqlParser.ALTER)
                self.state = 1475
                self.match(fugue_sqlParser.TABLE)
                self.state = 1476
                self.multipartIdentifier()
                self.state = 1478
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.PARTITION:
                    self.state = 1477
                    self.partitionSpec()


                self.state = 1480
                self.match(fugue_sqlParser.SET)
                self.state = 1481
                self.locationSpec()
                pass

            elif la_ == 31:
                localctx = fugue_sqlParser.RecoverPartitionsContext(self, localctx)
                self.enterOuterAlt(localctx, 31)
                self.state = 1483
                self.match(fugue_sqlParser.ALTER)
                self.state = 1484
                self.match(fugue_sqlParser.TABLE)
                self.state = 1485
                self.multipartIdentifier()
                self.state = 1486
                self.match(fugue_sqlParser.RECOVER)
                self.state = 1487
                self.match(fugue_sqlParser.PARTITIONS)
                pass

            elif la_ == 32:
                localctx = fugue_sqlParser.DropTableContext(self, localctx)
                self.enterOuterAlt(localctx, 32)
                self.state = 1489
                self.match(fugue_sqlParser.DROP)
                self.state = 1490
                self.match(fugue_sqlParser.TABLE)
                self.state = 1493
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,170,self._ctx)
                if la_ == 1:
                    self.state = 1491
                    self.match(fugue_sqlParser.IF)
                    self.state = 1492
                    self.match(fugue_sqlParser.EXISTS)


                self.state = 1495
                self.multipartIdentifier()
                self.state = 1497
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.PURGE:
                    self.state = 1496
                    self.match(fugue_sqlParser.PURGE)


                pass

            elif la_ == 33:
                localctx = fugue_sqlParser.DropViewContext(self, localctx)
                self.enterOuterAlt(localctx, 33)
                self.state = 1499
                self.match(fugue_sqlParser.DROP)
                self.state = 1500
                self.match(fugue_sqlParser.VIEW)
                self.state = 1503
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,172,self._ctx)
                if la_ == 1:
                    self.state = 1501
                    self.match(fugue_sqlParser.IF)
                    self.state = 1502
                    self.match(fugue_sqlParser.EXISTS)


                self.state = 1505
                self.multipartIdentifier()
                pass

            elif la_ == 34:
                localctx = fugue_sqlParser.CreateViewContext(self, localctx)
                self.enterOuterAlt(localctx, 34)
                self.state = 1506
                self.match(fugue_sqlParser.CREATE)
                self.state = 1509
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.OR:
                    self.state = 1507
                    self.match(fugue_sqlParser.OR)
                    self.state = 1508
                    self.match(fugue_sqlParser.REPLACE)


                self.state = 1515
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.GLOBAL or _la==fugue_sqlParser.TEMPORARY:
                    self.state = 1512
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==fugue_sqlParser.GLOBAL:
                        self.state = 1511
                        self.match(fugue_sqlParser.GLOBAL)


                    self.state = 1514
                    self.match(fugue_sqlParser.TEMPORARY)


                self.state = 1517
                self.match(fugue_sqlParser.VIEW)
                self.state = 1521
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,176,self._ctx)
                if la_ == 1:
                    self.state = 1518
                    self.match(fugue_sqlParser.IF)
                    self.state = 1519
                    self.match(fugue_sqlParser.NOT)
                    self.state = 1520
                    self.match(fugue_sqlParser.EXISTS)


                self.state = 1523
                self.multipartIdentifier()
                self.state = 1525
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.T__2:
                    self.state = 1524
                    self.identifierCommentList()


                self.state = 1535
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==fugue_sqlParser.COMMENT or _la==fugue_sqlParser.PARTITIONED or _la==fugue_sqlParser.TBLPROPERTIES:
                    self.state = 1533
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [fugue_sqlParser.COMMENT]:
                        self.state = 1527
                        self.commentSpec()
                        pass
                    elif token in [fugue_sqlParser.PARTITIONED]:
                        self.state = 1528
                        self.match(fugue_sqlParser.PARTITIONED)
                        self.state = 1529
                        self.match(fugue_sqlParser.ON)
                        self.state = 1530
                        self.identifierList()
                        pass
                    elif token in [fugue_sqlParser.TBLPROPERTIES]:
                        self.state = 1531
                        self.match(fugue_sqlParser.TBLPROPERTIES)
                        self.state = 1532
                        self.tablePropertyList()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1537
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1538
                self.match(fugue_sqlParser.AS)
                self.state = 1539
                self.query()
                pass

            elif la_ == 35:
                localctx = fugue_sqlParser.CreateTempViewUsingContext(self, localctx)
                self.enterOuterAlt(localctx, 35)
                self.state = 1541
                self.match(fugue_sqlParser.CREATE)
                self.state = 1544
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.OR:
                    self.state = 1542
                    self.match(fugue_sqlParser.OR)
                    self.state = 1543
                    self.match(fugue_sqlParser.REPLACE)


                self.state = 1547
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.GLOBAL:
                    self.state = 1546
                    self.match(fugue_sqlParser.GLOBAL)


                self.state = 1549
                self.match(fugue_sqlParser.TEMPORARY)
                self.state = 1550
                self.match(fugue_sqlParser.VIEW)
                self.state = 1551
                self.tableIdentifier()
                self.state = 1556
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.T__2:
                    self.state = 1552
                    self.match(fugue_sqlParser.T__2)
                    self.state = 1553
                    self.colTypeList()
                    self.state = 1554
                    self.match(fugue_sqlParser.T__3)


                self.state = 1558
                self.tableProvider()
                self.state = 1561
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.OPTIONS:
                    self.state = 1559
                    self.match(fugue_sqlParser.OPTIONS)
                    self.state = 1560
                    self.tablePropertyList()


                pass

            elif la_ == 36:
                localctx = fugue_sqlParser.AlterViewQueryContext(self, localctx)
                self.enterOuterAlt(localctx, 36)
                self.state = 1563
                self.match(fugue_sqlParser.ALTER)
                self.state = 1564
                self.match(fugue_sqlParser.VIEW)
                self.state = 1565
                self.multipartIdentifier()
                self.state = 1567
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.AS:
                    self.state = 1566
                    self.match(fugue_sqlParser.AS)


                self.state = 1569
                self.query()
                pass

            elif la_ == 37:
                localctx = fugue_sqlParser.CreateFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 37)
                self.state = 1571
                self.match(fugue_sqlParser.CREATE)
                self.state = 1574
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.OR:
                    self.state = 1572
                    self.match(fugue_sqlParser.OR)
                    self.state = 1573
                    self.match(fugue_sqlParser.REPLACE)


                self.state = 1577
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.TEMPORARY:
                    self.state = 1576
                    self.match(fugue_sqlParser.TEMPORARY)


                self.state = 1579
                self.match(fugue_sqlParser.FUNCTION)
                self.state = 1583
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,187,self._ctx)
                if la_ == 1:
                    self.state = 1580
                    self.match(fugue_sqlParser.IF)
                    self.state = 1581
                    self.match(fugue_sqlParser.NOT)
                    self.state = 1582
                    self.match(fugue_sqlParser.EXISTS)


                self.state = 1585
                self.multipartIdentifier()
                self.state = 1586
                self.match(fugue_sqlParser.AS)
                self.state = 1587
                localctx.className = self.match(fugue_sqlParser.STRING)
                self.state = 1597
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.USING:
                    self.state = 1588
                    self.match(fugue_sqlParser.USING)
                    self.state = 1589
                    self.resource()
                    self.state = 1594
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==fugue_sqlParser.T__0:
                        self.state = 1590
                        self.match(fugue_sqlParser.T__0)
                        self.state = 1591
                        self.resource()
                        self.state = 1596
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                pass

            elif la_ == 38:
                localctx = fugue_sqlParser.DropFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 38)
                self.state = 1599
                self.match(fugue_sqlParser.DROP)
                self.state = 1601
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.TEMPORARY:
                    self.state = 1600
                    self.match(fugue_sqlParser.TEMPORARY)


                self.state = 1603
                self.match(fugue_sqlParser.FUNCTION)
                self.state = 1606
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,191,self._ctx)
                if la_ == 1:
                    self.state = 1604
                    self.match(fugue_sqlParser.IF)
                    self.state = 1605
                    self.match(fugue_sqlParser.EXISTS)


                self.state = 1608
                self.multipartIdentifier()
                pass

            elif la_ == 39:
                localctx = fugue_sqlParser.ExplainContext(self, localctx)
                self.enterOuterAlt(localctx, 39)
                self.state = 1609
                self.match(fugue_sqlParser.EXPLAIN)
                self.state = 1611
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & ((1 << (fugue_sqlParser.CODEGEN - 81)) | (1 << (fugue_sqlParser.COST - 81)) | (1 << (fugue_sqlParser.EXTENDED - 81)) | (1 << (fugue_sqlParser.FORMATTED - 81)))) != 0) or _la==fugue_sqlParser.LOGICAL:
                    self.state = 1610
                    _la = self._input.LA(1)
                    if not(((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & ((1 << (fugue_sqlParser.CODEGEN - 81)) | (1 << (fugue_sqlParser.COST - 81)) | (1 << (fugue_sqlParser.EXTENDED - 81)) | (1 << (fugue_sqlParser.FORMATTED - 81)))) != 0) or _la==fugue_sqlParser.LOGICAL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1613
                self.statement()
                pass

            elif la_ == 40:
                localctx = fugue_sqlParser.ShowTablesContext(self, localctx)
                self.enterOuterAlt(localctx, 40)
                self.state = 1614
                self.match(fugue_sqlParser.SHOW)
                self.state = 1615
                self.match(fugue_sqlParser.TABLES)
                self.state = 1618
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.FROM or _la==fugue_sqlParser.IN:
                    self.state = 1616
                    _la = self._input.LA(1)
                    if not(_la==fugue_sqlParser.FROM or _la==fugue_sqlParser.IN):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1617
                    self.multipartIdentifier()


                self.state = 1624
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.LIKE or _la==fugue_sqlParser.STRING:
                    self.state = 1621
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==fugue_sqlParser.LIKE:
                        self.state = 1620
                        self.match(fugue_sqlParser.LIKE)


                    self.state = 1623
                    localctx.pattern = self.match(fugue_sqlParser.STRING)


                pass

            elif la_ == 41:
                localctx = fugue_sqlParser.ShowTableContext(self, localctx)
                self.enterOuterAlt(localctx, 41)
                self.state = 1626
                self.match(fugue_sqlParser.SHOW)
                self.state = 1627
                self.match(fugue_sqlParser.TABLE)
                self.state = 1628
                self.match(fugue_sqlParser.EXTENDED)
                self.state = 1631
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.FROM or _la==fugue_sqlParser.IN:
                    self.state = 1629
                    _la = self._input.LA(1)
                    if not(_la==fugue_sqlParser.FROM or _la==fugue_sqlParser.IN):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1630
                    localctx.ns = self.multipartIdentifier()


                self.state = 1633
                self.match(fugue_sqlParser.LIKE)
                self.state = 1634
                localctx.pattern = self.match(fugue_sqlParser.STRING)
                self.state = 1636
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.PARTITION:
                    self.state = 1635
                    self.partitionSpec()


                pass

            elif la_ == 42:
                localctx = fugue_sqlParser.ShowTblPropertiesContext(self, localctx)
                self.enterOuterAlt(localctx, 42)
                self.state = 1638
                self.match(fugue_sqlParser.SHOW)
                self.state = 1639
                self.match(fugue_sqlParser.TBLPROPERTIES)
                self.state = 1640
                localctx.table = self.multipartIdentifier()
                self.state = 1645
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.T__2:
                    self.state = 1641
                    self.match(fugue_sqlParser.T__2)
                    self.state = 1642
                    localctx.key = self.tablePropertyKey()
                    self.state = 1643
                    self.match(fugue_sqlParser.T__3)


                pass

            elif la_ == 43:
                localctx = fugue_sqlParser.ShowColumnsContext(self, localctx)
                self.enterOuterAlt(localctx, 43)
                self.state = 1647
                self.match(fugue_sqlParser.SHOW)
                self.state = 1648
                self.match(fugue_sqlParser.COLUMNS)
                self.state = 1649
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.FROM or _la==fugue_sqlParser.IN):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1650
                localctx.table = self.multipartIdentifier()
                self.state = 1653
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.FROM or _la==fugue_sqlParser.IN:
                    self.state = 1651
                    _la = self._input.LA(1)
                    if not(_la==fugue_sqlParser.FROM or _la==fugue_sqlParser.IN):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1652
                    localctx.ns = self.multipartIdentifier()


                pass

            elif la_ == 44:
                localctx = fugue_sqlParser.ShowViewsContext(self, localctx)
                self.enterOuterAlt(localctx, 44)
                self.state = 1655
                self.match(fugue_sqlParser.SHOW)
                self.state = 1656
                self.match(fugue_sqlParser.VIEWS)
                self.state = 1659
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.FROM or _la==fugue_sqlParser.IN:
                    self.state = 1657
                    _la = self._input.LA(1)
                    if not(_la==fugue_sqlParser.FROM or _la==fugue_sqlParser.IN):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1658
                    self.multipartIdentifier()


                self.state = 1665
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.LIKE or _la==fugue_sqlParser.STRING:
                    self.state = 1662
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==fugue_sqlParser.LIKE:
                        self.state = 1661
                        self.match(fugue_sqlParser.LIKE)


                    self.state = 1664
                    localctx.pattern = self.match(fugue_sqlParser.STRING)


                pass

            elif la_ == 45:
                localctx = fugue_sqlParser.ShowPartitionsContext(self, localctx)
                self.enterOuterAlt(localctx, 45)
                self.state = 1667
                self.match(fugue_sqlParser.SHOW)
                self.state = 1668
                self.match(fugue_sqlParser.PARTITIONS)
                self.state = 1669
                self.multipartIdentifier()
                self.state = 1671
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.PARTITION:
                    self.state = 1670
                    self.partitionSpec()


                pass

            elif la_ == 46:
                localctx = fugue_sqlParser.ShowFunctionsContext(self, localctx)
                self.enterOuterAlt(localctx, 46)
                self.state = 1673
                self.match(fugue_sqlParser.SHOW)
                self.state = 1675
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,204,self._ctx)
                if la_ == 1:
                    self.state = 1674
                    self.identifier()


                self.state = 1677
                self.match(fugue_sqlParser.FUNCTIONS)
                self.state = 1685
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 53)) & ~0x3f) == 0 and ((1 << (_la - 53)) & ((1 << (fugue_sqlParser.ADD - 53)) | (1 << (fugue_sqlParser.AFTER - 53)) | (1 << (fugue_sqlParser.ALL - 53)) | (1 << (fugue_sqlParser.ALTER - 53)) | (1 << (fugue_sqlParser.ANALYZE - 53)) | (1 << (fugue_sqlParser.AND - 53)) | (1 << (fugue_sqlParser.ANTI - 53)) | (1 << (fugue_sqlParser.ANY - 53)) | (1 << (fugue_sqlParser.ARCHIVE - 53)) | (1 << (fugue_sqlParser.ARRAY - 53)) | (1 << (fugue_sqlParser.AS - 53)) | (1 << (fugue_sqlParser.ASC - 53)) | (1 << (fugue_sqlParser.AT - 53)) | (1 << (fugue_sqlParser.AUTHORIZATION - 53)) | (1 << (fugue_sqlParser.BETWEEN - 53)) | (1 << (fugue_sqlParser.BOTH - 53)) | (1 << (fugue_sqlParser.BUCKET - 53)) | (1 << (fugue_sqlParser.BUCKETS - 53)) | (1 << (fugue_sqlParser.BY - 53)) | (1 << (fugue_sqlParser.CACHE - 53)) | (1 << (fugue_sqlParser.CASCADE - 53)) | (1 << (fugue_sqlParser.CASE - 53)) | (1 << (fugue_sqlParser.CAST - 53)) | (1 << (fugue_sqlParser.CHANGE - 53)) | (1 << (fugue_sqlParser.CHECK - 53)) | (1 << (fugue_sqlParser.CLEAR - 53)) | (1 << (fugue_sqlParser.CLUSTER - 53)) | (1 << (fugue_sqlParser.CLUSTERED - 53)) | (1 << (fugue_sqlParser.CODEGEN - 53)) | (1 << (fugue_sqlParser.COLLATE - 53)) | (1 << (fugue_sqlParser.COLLECTION - 53)) | (1 << (fugue_sqlParser.COLUMN - 53)) | (1 << (fugue_sqlParser.COLUMNS - 53)) | (1 << (fugue_sqlParser.COMMENT - 53)) | (1 << (fugue_sqlParser.COMMIT - 53)) | (1 << (fugue_sqlParser.COMPACT - 53)) | (1 << (fugue_sqlParser.COMPACTIONS - 53)) | (1 << (fugue_sqlParser.COMPUTE - 53)) | (1 << (fugue_sqlParser.CONCATENATE - 53)) | (1 << (fugue_sqlParser.CONSTRAINT - 53)) | (1 << (fugue_sqlParser.COST - 53)) | (1 << (fugue_sqlParser.CREATE - 53)) | (1 << (fugue_sqlParser.CROSS - 53)) | (1 << (fugue_sqlParser.CUBE - 53)) | (1 << (fugue_sqlParser.CURRENT - 53)) | (1 << (fugue_sqlParser.CURRENT_DATE - 53)) | (1 << (fugue_sqlParser.CURRENT_TIME - 53)) | (1 << (fugue_sqlParser.CURRENT_TIMESTAMP - 53)) | (1 << (fugue_sqlParser.CURRENT_USER - 53)) | (1 << (fugue_sqlParser.DATA - 53)) | (1 << (fugue_sqlParser.DATABASE - 53)) | (1 << (fugue_sqlParser.DATABASES - 53)) | (1 << (fugue_sqlParser.DAY - 53)) | (1 << (fugue_sqlParser.DBPROPERTIES - 53)) | (1 << (fugue_sqlParser.DEFINED - 53)) | (1 << (fugue_sqlParser.DELETE - 53)) | (1 << (fugue_sqlParser.DELIMITED - 53)) | (1 << (fugue_sqlParser.DESC - 53)) | (1 << (fugue_sqlParser.DESCRIBE - 53)) | (1 << (fugue_sqlParser.DFS - 53)) | (1 << (fugue_sqlParser.DIRECTORIES - 53)) | (1 << (fugue_sqlParser.DIRECTORY - 53)) | (1 << (fugue_sqlParser.DISTINCT - 53)) | (1 << (fugue_sqlParser.DISTRIBUTE - 53)))) != 0) or ((((_la - 117)) & ~0x3f) == 0 and ((1 << (_la - 117)) & ((1 << (fugue_sqlParser.DROP - 117)) | (1 << (fugue_sqlParser.ELSE - 117)) | (1 << (fugue_sqlParser.END - 117)) | (1 << (fugue_sqlParser.ESCAPE - 117)) | (1 << (fugue_sqlParser.ESCAPED - 117)) | (1 << (fugue_sqlParser.EXCEPT - 117)) | (1 << (fugue_sqlParser.EXCHANGE - 117)) | (1 << (fugue_sqlParser.EXISTS - 117)) | (1 << (fugue_sqlParser.EXPLAIN - 117)) | (1 << (fugue_sqlParser.EXPORT - 117)) | (1 << (fugue_sqlParser.EXTENDED - 117)) | (1 << (fugue_sqlParser.EXTERNAL - 117)) | (1 << (fugue_sqlParser.EXTRACT - 117)) | (1 << (fugue_sqlParser.FALSE - 117)) | (1 << (fugue_sqlParser.FETCH - 117)) | (1 << (fugue_sqlParser.FIELDS - 117)) | (1 << (fugue_sqlParser.FILTER - 117)) | (1 << (fugue_sqlParser.FILEFORMAT - 117)) | (1 << (fugue_sqlParser.FIRST - 117)) | (1 << (fugue_sqlParser.FOLLOWING - 117)) | (1 << (fugue_sqlParser.FOR - 117)) | (1 << (fugue_sqlParser.FOREIGN - 117)) | (1 << (fugue_sqlParser.FORMAT - 117)) | (1 << (fugue_sqlParser.FORMATTED - 117)) | (1 << (fugue_sqlParser.FROM - 117)) | (1 << (fugue_sqlParser.FULL - 117)) | (1 << (fugue_sqlParser.FUNCTION - 117)) | (1 << (fugue_sqlParser.FUNCTIONS - 117)) | (1 << (fugue_sqlParser.GLOBAL - 117)) | (1 << (fugue_sqlParser.GRANT - 117)) | (1 << (fugue_sqlParser.GROUP - 117)) | (1 << (fugue_sqlParser.GROUPING - 117)) | (1 << (fugue_sqlParser.HAVING - 117)) | (1 << (fugue_sqlParser.HOUR - 117)) | (1 << (fugue_sqlParser.IF - 117)) | (1 << (fugue_sqlParser.IGNORE - 117)) | (1 << (fugue_sqlParser.IMPORT - 117)) | (1 << (fugue_sqlParser.IN - 117)) | (1 << (fugue_sqlParser.INDEX - 117)) | (1 << (fugue_sqlParser.INDEXES - 117)) | (1 << (fugue_sqlParser.INNER - 117)) | (1 << (fugue_sqlParser.INPATH - 117)) | (1 << (fugue_sqlParser.INPUTFORMAT - 117)) | (1 << (fugue_sqlParser.INSERT - 117)) | (1 << (fugue_sqlParser.INTERSECT - 117)) | (1 << (fugue_sqlParser.INTERVAL - 117)) | (1 << (fugue_sqlParser.INTO - 117)) | (1 << (fugue_sqlParser.IS - 117)) | (1 << (fugue_sqlParser.ITEMS - 117)) | (1 << (fugue_sqlParser.JOIN - 117)) | (1 << (fugue_sqlParser.KEYS - 117)) | (1 << (fugue_sqlParser.LAST - 117)) | (1 << (fugue_sqlParser.LATERAL - 117)) | (1 << (fugue_sqlParser.LAZY - 117)) | (1 << (fugue_sqlParser.LEADING - 117)) | (1 << (fugue_sqlParser.LEFT - 117)) | (1 << (fugue_sqlParser.LIKE - 117)) | (1 << (fugue_sqlParser.LIMIT - 117)) | (1 << (fugue_sqlParser.LINES - 117)) | (1 << (fugue_sqlParser.LIST - 117)) | (1 << (fugue_sqlParser.LOAD - 117)) | (1 << (fugue_sqlParser.LOCAL - 117)) | (1 << (fugue_sqlParser.LOCATION - 117)) | (1 << (fugue_sqlParser.LOCK - 117)))) != 0) or ((((_la - 181)) & ~0x3f) == 0 and ((1 << (_la - 181)) & ((1 << (fugue_sqlParser.LOCKS - 181)) | (1 << (fugue_sqlParser.LOGICAL - 181)) | (1 << (fugue_sqlParser.MACRO - 181)) | (1 << (fugue_sqlParser.MAP - 181)) | (1 << (fugue_sqlParser.MATCHED - 181)) | (1 << (fugue_sqlParser.MERGE - 181)) | (1 << (fugue_sqlParser.MINUTE - 181)) | (1 << (fugue_sqlParser.MONTH - 181)) | (1 << (fugue_sqlParser.MSCK - 181)) | (1 << (fugue_sqlParser.NAMESPACE - 181)) | (1 << (fugue_sqlParser.NAMESPACES - 181)) | (1 << (fugue_sqlParser.NATURAL - 181)) | (1 << (fugue_sqlParser.NO - 181)) | (1 << (fugue_sqlParser.NOT - 181)) | (1 << (fugue_sqlParser.THENULL - 181)) | (1 << (fugue_sqlParser.THENULLS - 181)) | (1 << (fugue_sqlParser.OF - 181)) | (1 << (fugue_sqlParser.ON - 181)) | (1 << (fugue_sqlParser.ONLY - 181)) | (1 << (fugue_sqlParser.OPTION - 181)) | (1 << (fugue_sqlParser.OPTIONS - 181)) | (1 << (fugue_sqlParser.OR - 181)) | (1 << (fugue_sqlParser.ORDER - 181)) | (1 << (fugue_sqlParser.OUT - 181)) | (1 << (fugue_sqlParser.OUTER - 181)) | (1 << (fugue_sqlParser.OUTPUTFORMAT - 181)) | (1 << (fugue_sqlParser.OVER - 181)) | (1 << (fugue_sqlParser.OVERLAPS - 181)) | (1 << (fugue_sqlParser.OVERLAY - 181)) | (1 << (fugue_sqlParser.OVERWRITE - 181)) | (1 << (fugue_sqlParser.PARTITION - 181)) | (1 << (fugue_sqlParser.PARTITIONED - 181)) | (1 << (fugue_sqlParser.PARTITIONS - 181)) | (1 << (fugue_sqlParser.PERCENTLIT - 181)) | (1 << (fugue_sqlParser.PIVOT - 181)) | (1 << (fugue_sqlParser.PLACING - 181)) | (1 << (fugue_sqlParser.POSITION - 181)) | (1 << (fugue_sqlParser.PRECEDING - 181)) | (1 << (fugue_sqlParser.PRIMARY - 181)) | (1 << (fugue_sqlParser.PRINCIPALS - 181)) | (1 << (fugue_sqlParser.PROPERTIES - 181)) | (1 << (fugue_sqlParser.PURGE - 181)) | (1 << (fugue_sqlParser.QUERY - 181)) | (1 << (fugue_sqlParser.RANGE - 181)) | (1 << (fugue_sqlParser.RECORDREADER - 181)) | (1 << (fugue_sqlParser.RECORDWRITER - 181)) | (1 << (fugue_sqlParser.RECOVER - 181)) | (1 << (fugue_sqlParser.REDUCE - 181)) | (1 << (fugue_sqlParser.REFERENCES - 181)) | (1 << (fugue_sqlParser.REFRESH - 181)) | (1 << (fugue_sqlParser.RENAME - 181)) | (1 << (fugue_sqlParser.REPAIR - 181)) | (1 << (fugue_sqlParser.REPLACE - 181)) | (1 << (fugue_sqlParser.RESET - 181)) | (1 << (fugue_sqlParser.RESTRICT - 181)) | (1 << (fugue_sqlParser.REVOKE - 181)) | (1 << (fugue_sqlParser.RIGHT - 181)) | (1 << (fugue_sqlParser.RLIKE - 181)) | (1 << (fugue_sqlParser.ROLE - 181)) | (1 << (fugue_sqlParser.ROLES - 181)) | (1 << (fugue_sqlParser.ROLLBACK - 181)) | (1 << (fugue_sqlParser.ROLLUP - 181)) | (1 << (fugue_sqlParser.ROW - 181)) | (1 << (fugue_sqlParser.ROWS - 181)))) != 0) or ((((_la - 245)) & ~0x3f) == 0 and ((1 << (_la - 245)) & ((1 << (fugue_sqlParser.SCHEMA - 245)) | (1 << (fugue_sqlParser.SECOND - 245)) | (1 << (fugue_sqlParser.SELECT - 245)) | (1 << (fugue_sqlParser.SEMI - 245)) | (1 << (fugue_sqlParser.SEPARATED - 245)) | (1 << (fugue_sqlParser.SERDE - 245)) | (1 << (fugue_sqlParser.SERDEPROPERTIES - 245)) | (1 << (fugue_sqlParser.SESSION_USER - 245)) | (1 << (fugue_sqlParser.SET - 245)) | (1 << (fugue_sqlParser.SETMINUS - 245)) | (1 << (fugue_sqlParser.SETS - 245)) | (1 << (fugue_sqlParser.SHOW - 245)) | (1 << (fugue_sqlParser.SKEWED - 245)) | (1 << (fugue_sqlParser.SOME - 245)) | (1 << (fugue_sqlParser.SORT - 245)) | (1 << (fugue_sqlParser.SORTED - 245)) | (1 << (fugue_sqlParser.START - 245)) | (1 << (fugue_sqlParser.STATISTICS - 245)) | (1 << (fugue_sqlParser.STORED - 245)) | (1 << (fugue_sqlParser.STRATIFY - 245)) | (1 << (fugue_sqlParser.STRUCT - 245)) | (1 << (fugue_sqlParser.SUBSTR - 245)) | (1 << (fugue_sqlParser.SUBSTRING - 245)) | (1 << (fugue_sqlParser.TABLE - 245)) | (1 << (fugue_sqlParser.TABLES - 245)) | (1 << (fugue_sqlParser.TABLESAMPLE - 245)) | (1 << (fugue_sqlParser.TBLPROPERTIES - 245)) | (1 << (fugue_sqlParser.TEMPORARY - 245)) | (1 << (fugue_sqlParser.TERMINATED - 245)) | (1 << (fugue_sqlParser.THEN - 245)) | (1 << (fugue_sqlParser.TO - 245)) | (1 << (fugue_sqlParser.TOUCH - 245)) | (1 << (fugue_sqlParser.TRAILING - 245)) | (1 << (fugue_sqlParser.TRANSACTION - 245)) | (1 << (fugue_sqlParser.TRANSACTIONS - 245)) | (1 << (fugue_sqlParser.TRANSFORM - 245)) | (1 << (fugue_sqlParser.TRIM - 245)) | (1 << (fugue_sqlParser.TRUE - 245)) | (1 << (fugue_sqlParser.TRUNCATE - 245)) | (1 << (fugue_sqlParser.TYPE - 245)) | (1 << (fugue_sqlParser.UNARCHIVE - 245)) | (1 << (fugue_sqlParser.UNBOUNDED - 245)) | (1 << (fugue_sqlParser.UNCACHE - 245)) | (1 << (fugue_sqlParser.UNION - 245)) | (1 << (fugue_sqlParser.UNIQUE - 245)) | (1 << (fugue_sqlParser.UNKNOWN - 245)) | (1 << (fugue_sqlParser.UNLOCK - 245)) | (1 << (fugue_sqlParser.UNSET - 245)) | (1 << (fugue_sqlParser.UPDATE - 245)) | (1 << (fugue_sqlParser.USE - 245)) | (1 << (fugue_sqlParser.USER - 245)) | (1 << (fugue_sqlParser.USING - 245)) | (1 << (fugue_sqlParser.VALUES - 245)) | (1 << (fugue_sqlParser.VIEW - 245)) | (1 << (fugue_sqlParser.VIEWS - 245)) | (1 << (fugue_sqlParser.WHEN - 245)) | (1 << (fugue_sqlParser.WHERE - 245)) | (1 << (fugue_sqlParser.WINDOW - 245)) | (1 << (fugue_sqlParser.WITH - 245)) | (1 << (fugue_sqlParser.YEAR - 245)))) != 0) or ((((_la - 319)) & ~0x3f) == 0 and ((1 << (_la - 319)) & ((1 << (fugue_sqlParser.DIV - 319)) | (1 << (fugue_sqlParser.STRING - 319)) | (1 << (fugue_sqlParser.IDENTIFIER - 319)) | (1 << (fugue_sqlParser.BACKQUOTED_IDENTIFIER - 319)))) != 0):
                    self.state = 1679
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,205,self._ctx)
                    if la_ == 1:
                        self.state = 1678
                        self.match(fugue_sqlParser.LIKE)


                    self.state = 1683
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [fugue_sqlParser.ADD, fugue_sqlParser.AFTER, fugue_sqlParser.ALL, fugue_sqlParser.ALTER, fugue_sqlParser.ANALYZE, fugue_sqlParser.AND, fugue_sqlParser.ANTI, fugue_sqlParser.ANY, fugue_sqlParser.ARCHIVE, fugue_sqlParser.ARRAY, fugue_sqlParser.AS, fugue_sqlParser.ASC, fugue_sqlParser.AT, fugue_sqlParser.AUTHORIZATION, fugue_sqlParser.BETWEEN, fugue_sqlParser.BOTH, fugue_sqlParser.BUCKET, fugue_sqlParser.BUCKETS, fugue_sqlParser.BY, fugue_sqlParser.CACHE, fugue_sqlParser.CASCADE, fugue_sqlParser.CASE, fugue_sqlParser.CAST, fugue_sqlParser.CHANGE, fugue_sqlParser.CHECK, fugue_sqlParser.CLEAR, fugue_sqlParser.CLUSTER, fugue_sqlParser.CLUSTERED, fugue_sqlParser.CODEGEN, fugue_sqlParser.COLLATE, fugue_sqlParser.COLLECTION, fugue_sqlParser.COLUMN, fugue_sqlParser.COLUMNS, fugue_sqlParser.COMMENT, fugue_sqlParser.COMMIT, fugue_sqlParser.COMPACT, fugue_sqlParser.COMPACTIONS, fugue_sqlParser.COMPUTE, fugue_sqlParser.CONCATENATE, fugue_sqlParser.CONSTRAINT, fugue_sqlParser.COST, fugue_sqlParser.CREATE, fugue_sqlParser.CROSS, fugue_sqlParser.CUBE, fugue_sqlParser.CURRENT, fugue_sqlParser.CURRENT_DATE, fugue_sqlParser.CURRENT_TIME, fugue_sqlParser.CURRENT_TIMESTAMP, fugue_sqlParser.CURRENT_USER, fugue_sqlParser.DATA, fugue_sqlParser.DATABASE, fugue_sqlParser.DATABASES, fugue_sqlParser.DAY, fugue_sqlParser.DBPROPERTIES, fugue_sqlParser.DEFINED, fugue_sqlParser.DELETE, fugue_sqlParser.DELIMITED, fugue_sqlParser.DESC, fugue_sqlParser.DESCRIBE, fugue_sqlParser.DFS, fugue_sqlParser.DIRECTORIES, fugue_sqlParser.DIRECTORY, fugue_sqlParser.DISTINCT, fugue_sqlParser.DISTRIBUTE, fugue_sqlParser.DROP, fugue_sqlParser.ELSE, fugue_sqlParser.END, fugue_sqlParser.ESCAPE, fugue_sqlParser.ESCAPED, fugue_sqlParser.EXCEPT, fugue_sqlParser.EXCHANGE, fugue_sqlParser.EXISTS, fugue_sqlParser.EXPLAIN, fugue_sqlParser.EXPORT, fugue_sqlParser.EXTENDED, fugue_sqlParser.EXTERNAL, fugue_sqlParser.EXTRACT, fugue_sqlParser.FALSE, fugue_sqlParser.FETCH, fugue_sqlParser.FIELDS, fugue_sqlParser.FILTER, fugue_sqlParser.FILEFORMAT, fugue_sqlParser.FIRST, fugue_sqlParser.FOLLOWING, fugue_sqlParser.FOR, fugue_sqlParser.FOREIGN, fugue_sqlParser.FORMAT, fugue_sqlParser.FORMATTED, fugue_sqlParser.FROM, fugue_sqlParser.FULL, fugue_sqlParser.FUNCTION, fugue_sqlParser.FUNCTIONS, fugue_sqlParser.GLOBAL, fugue_sqlParser.GRANT, fugue_sqlParser.GROUP, fugue_sqlParser.GROUPING, fugue_sqlParser.HAVING, fugue_sqlParser.HOUR, fugue_sqlParser.IF, fugue_sqlParser.IGNORE, fugue_sqlParser.IMPORT, fugue_sqlParser.IN, fugue_sqlParser.INDEX, fugue_sqlParser.INDEXES, fugue_sqlParser.INNER, fugue_sqlParser.INPATH, fugue_sqlParser.INPUTFORMAT, fugue_sqlParser.INSERT, fugue_sqlParser.INTERSECT, fugue_sqlParser.INTERVAL, fugue_sqlParser.INTO, fugue_sqlParser.IS, fugue_sqlParser.ITEMS, fugue_sqlParser.JOIN, fugue_sqlParser.KEYS, fugue_sqlParser.LAST, fugue_sqlParser.LATERAL, fugue_sqlParser.LAZY, fugue_sqlParser.LEADING, fugue_sqlParser.LEFT, fugue_sqlParser.LIKE, fugue_sqlParser.LIMIT, fugue_sqlParser.LINES, fugue_sqlParser.LIST, fugue_sqlParser.LOAD, fugue_sqlParser.LOCAL, fugue_sqlParser.LOCATION, fugue_sqlParser.LOCK, fugue_sqlParser.LOCKS, fugue_sqlParser.LOGICAL, fugue_sqlParser.MACRO, fugue_sqlParser.MAP, fugue_sqlParser.MATCHED, fugue_sqlParser.MERGE, fugue_sqlParser.MINUTE, fugue_sqlParser.MONTH, fugue_sqlParser.MSCK, fugue_sqlParser.NAMESPACE, fugue_sqlParser.NAMESPACES, fugue_sqlParser.NATURAL, fugue_sqlParser.NO, fugue_sqlParser.NOT, fugue_sqlParser.THENULL, fugue_sqlParser.THENULLS, fugue_sqlParser.OF, fugue_sqlParser.ON, fugue_sqlParser.ONLY, fugue_sqlParser.OPTION, fugue_sqlParser.OPTIONS, fugue_sqlParser.OR, fugue_sqlParser.ORDER, fugue_sqlParser.OUT, fugue_sqlParser.OUTER, fugue_sqlParser.OUTPUTFORMAT, fugue_sqlParser.OVER, fugue_sqlParser.OVERLAPS, fugue_sqlParser.OVERLAY, fugue_sqlParser.OVERWRITE, fugue_sqlParser.PARTITION, fugue_sqlParser.PARTITIONED, fugue_sqlParser.PARTITIONS, fugue_sqlParser.PERCENTLIT, fugue_sqlParser.PIVOT, fugue_sqlParser.PLACING, fugue_sqlParser.POSITION, fugue_sqlParser.PRECEDING, fugue_sqlParser.PRIMARY, fugue_sqlParser.PRINCIPALS, fugue_sqlParser.PROPERTIES, fugue_sqlParser.PURGE, fugue_sqlParser.QUERY, fugue_sqlParser.RANGE, fugue_sqlParser.RECORDREADER, fugue_sqlParser.RECORDWRITER, fugue_sqlParser.RECOVER, fugue_sqlParser.REDUCE, fugue_sqlParser.REFERENCES, fugue_sqlParser.REFRESH, fugue_sqlParser.RENAME, fugue_sqlParser.REPAIR, fugue_sqlParser.REPLACE, fugue_sqlParser.RESET, fugue_sqlParser.RESTRICT, fugue_sqlParser.REVOKE, fugue_sqlParser.RIGHT, fugue_sqlParser.RLIKE, fugue_sqlParser.ROLE, fugue_sqlParser.ROLES, fugue_sqlParser.ROLLBACK, fugue_sqlParser.ROLLUP, fugue_sqlParser.ROW, fugue_sqlParser.ROWS, fugue_sqlParser.SCHEMA, fugue_sqlParser.SECOND, fugue_sqlParser.SELECT, fugue_sqlParser.SEMI, fugue_sqlParser.SEPARATED, fugue_sqlParser.SERDE, fugue_sqlParser.SERDEPROPERTIES, fugue_sqlParser.SESSION_USER, fugue_sqlParser.SET, fugue_sqlParser.SETMINUS, fugue_sqlParser.SETS, fugue_sqlParser.SHOW, fugue_sqlParser.SKEWED, fugue_sqlParser.SOME, fugue_sqlParser.SORT, fugue_sqlParser.SORTED, fugue_sqlParser.START, fugue_sqlParser.STATISTICS, fugue_sqlParser.STORED, fugue_sqlParser.STRATIFY, fugue_sqlParser.STRUCT, fugue_sqlParser.SUBSTR, fugue_sqlParser.SUBSTRING, fugue_sqlParser.TABLE, fugue_sqlParser.TABLES, fugue_sqlParser.TABLESAMPLE, fugue_sqlParser.TBLPROPERTIES, fugue_sqlParser.TEMPORARY, fugue_sqlParser.TERMINATED, fugue_sqlParser.THEN, fugue_sqlParser.TO, fugue_sqlParser.TOUCH, fugue_sqlParser.TRAILING, fugue_sqlParser.TRANSACTION, fugue_sqlParser.TRANSACTIONS, fugue_sqlParser.TRANSFORM, fugue_sqlParser.TRIM, fugue_sqlParser.TRUE, fugue_sqlParser.TRUNCATE, fugue_sqlParser.TYPE, fugue_sqlParser.UNARCHIVE, fugue_sqlParser.UNBOUNDED, fugue_sqlParser.UNCACHE, fugue_sqlParser.UNION, fugue_sqlParser.UNIQUE, fugue_sqlParser.UNKNOWN, fugue_sqlParser.UNLOCK, fugue_sqlParser.UNSET, fugue_sqlParser.UPDATE, fugue_sqlParser.USE, fugue_sqlParser.USER, fugue_sqlParser.USING, fugue_sqlParser.VALUES, fugue_sqlParser.VIEW, fugue_sqlParser.VIEWS, fugue_sqlParser.WHEN, fugue_sqlParser.WHERE, fugue_sqlParser.WINDOW, fugue_sqlParser.WITH, fugue_sqlParser.YEAR, fugue_sqlParser.DIV, fugue_sqlParser.IDENTIFIER, fugue_sqlParser.BACKQUOTED_IDENTIFIER]:
                        self.state = 1681
                        self.multipartIdentifier()
                        pass
                    elif token in [fugue_sqlParser.STRING]:
                        self.state = 1682
                        localctx.pattern = self.match(fugue_sqlParser.STRING)
                        pass
                    else:
                        raise NoViableAltException(self)



                pass

            elif la_ == 47:
                localctx = fugue_sqlParser.ShowCreateTableContext(self, localctx)
                self.enterOuterAlt(localctx, 47)
                self.state = 1687
                self.match(fugue_sqlParser.SHOW)
                self.state = 1688
                self.match(fugue_sqlParser.CREATE)
                self.state = 1689
                self.match(fugue_sqlParser.TABLE)
                self.state = 1690
                self.multipartIdentifier()
                self.state = 1693
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.AS:
                    self.state = 1691
                    self.match(fugue_sqlParser.AS)
                    self.state = 1692
                    self.match(fugue_sqlParser.SERDE)


                pass

            elif la_ == 48:
                localctx = fugue_sqlParser.ShowCurrentNamespaceContext(self, localctx)
                self.enterOuterAlt(localctx, 48)
                self.state = 1695
                self.match(fugue_sqlParser.SHOW)
                self.state = 1696
                self.match(fugue_sqlParser.CURRENT)
                self.state = 1697
                self.match(fugue_sqlParser.NAMESPACE)
                pass

            elif la_ == 49:
                localctx = fugue_sqlParser.DescribeFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 49)
                self.state = 1698
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.DESC or _la==fugue_sqlParser.DESCRIBE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1699
                self.match(fugue_sqlParser.FUNCTION)
                self.state = 1701
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,209,self._ctx)
                if la_ == 1:
                    self.state = 1700
                    self.match(fugue_sqlParser.EXTENDED)


                self.state = 1703
                self.describeFuncName()
                pass

            elif la_ == 50:
                localctx = fugue_sqlParser.DescribeNamespaceContext(self, localctx)
                self.enterOuterAlt(localctx, 50)
                self.state = 1704
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.DESC or _la==fugue_sqlParser.DESCRIBE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1705
                self.theNamespace()
                self.state = 1707
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,210,self._ctx)
                if la_ == 1:
                    self.state = 1706
                    self.match(fugue_sqlParser.EXTENDED)


                self.state = 1709
                self.multipartIdentifier()
                pass

            elif la_ == 51:
                localctx = fugue_sqlParser.DescribeRelationContext(self, localctx)
                self.enterOuterAlt(localctx, 51)
                self.state = 1711
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.DESC or _la==fugue_sqlParser.DESCRIBE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1713
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,211,self._ctx)
                if la_ == 1:
                    self.state = 1712
                    self.match(fugue_sqlParser.TABLE)


                self.state = 1716
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,212,self._ctx)
                if la_ == 1:
                    self.state = 1715
                    localctx.option = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==fugue_sqlParser.EXTENDED or _la==fugue_sqlParser.FORMATTED):
                        localctx.option = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1718
                self.multipartIdentifier()
                self.state = 1720
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,213,self._ctx)
                if la_ == 1:
                    self.state = 1719
                    self.partitionSpec()


                self.state = 1723
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 53)) & ~0x3f) == 0 and ((1 << (_la - 53)) & ((1 << (fugue_sqlParser.ADD - 53)) | (1 << (fugue_sqlParser.AFTER - 53)) | (1 << (fugue_sqlParser.ALL - 53)) | (1 << (fugue_sqlParser.ALTER - 53)) | (1 << (fugue_sqlParser.ANALYZE - 53)) | (1 << (fugue_sqlParser.AND - 53)) | (1 << (fugue_sqlParser.ANTI - 53)) | (1 << (fugue_sqlParser.ANY - 53)) | (1 << (fugue_sqlParser.ARCHIVE - 53)) | (1 << (fugue_sqlParser.ARRAY - 53)) | (1 << (fugue_sqlParser.AS - 53)) | (1 << (fugue_sqlParser.ASC - 53)) | (1 << (fugue_sqlParser.AT - 53)) | (1 << (fugue_sqlParser.AUTHORIZATION - 53)) | (1 << (fugue_sqlParser.BETWEEN - 53)) | (1 << (fugue_sqlParser.BOTH - 53)) | (1 << (fugue_sqlParser.BUCKET - 53)) | (1 << (fugue_sqlParser.BUCKETS - 53)) | (1 << (fugue_sqlParser.BY - 53)) | (1 << (fugue_sqlParser.CACHE - 53)) | (1 << (fugue_sqlParser.CASCADE - 53)) | (1 << (fugue_sqlParser.CASE - 53)) | (1 << (fugue_sqlParser.CAST - 53)) | (1 << (fugue_sqlParser.CHANGE - 53)) | (1 << (fugue_sqlParser.CHECK - 53)) | (1 << (fugue_sqlParser.CLEAR - 53)) | (1 << (fugue_sqlParser.CLUSTER - 53)) | (1 << (fugue_sqlParser.CLUSTERED - 53)) | (1 << (fugue_sqlParser.CODEGEN - 53)) | (1 << (fugue_sqlParser.COLLATE - 53)) | (1 << (fugue_sqlParser.COLLECTION - 53)) | (1 << (fugue_sqlParser.COLUMN - 53)) | (1 << (fugue_sqlParser.COLUMNS - 53)) | (1 << (fugue_sqlParser.COMMENT - 53)) | (1 << (fugue_sqlParser.COMMIT - 53)) | (1 << (fugue_sqlParser.COMPACT - 53)) | (1 << (fugue_sqlParser.COMPACTIONS - 53)) | (1 << (fugue_sqlParser.COMPUTE - 53)) | (1 << (fugue_sqlParser.CONCATENATE - 53)) | (1 << (fugue_sqlParser.CONSTRAINT - 53)) | (1 << (fugue_sqlParser.COST - 53)) | (1 << (fugue_sqlParser.CREATE - 53)) | (1 << (fugue_sqlParser.CROSS - 53)) | (1 << (fugue_sqlParser.CUBE - 53)) | (1 << (fugue_sqlParser.CURRENT - 53)) | (1 << (fugue_sqlParser.CURRENT_DATE - 53)) | (1 << (fugue_sqlParser.CURRENT_TIME - 53)) | (1 << (fugue_sqlParser.CURRENT_TIMESTAMP - 53)) | (1 << (fugue_sqlParser.CURRENT_USER - 53)) | (1 << (fugue_sqlParser.DATA - 53)) | (1 << (fugue_sqlParser.DATABASE - 53)) | (1 << (fugue_sqlParser.DATABASES - 53)) | (1 << (fugue_sqlParser.DAY - 53)) | (1 << (fugue_sqlParser.DBPROPERTIES - 53)) | (1 << (fugue_sqlParser.DEFINED - 53)) | (1 << (fugue_sqlParser.DELETE - 53)) | (1 << (fugue_sqlParser.DELIMITED - 53)) | (1 << (fugue_sqlParser.DESC - 53)) | (1 << (fugue_sqlParser.DESCRIBE - 53)) | (1 << (fugue_sqlParser.DFS - 53)) | (1 << (fugue_sqlParser.DIRECTORIES - 53)) | (1 << (fugue_sqlParser.DIRECTORY - 53)) | (1 << (fugue_sqlParser.DISTINCT - 53)) | (1 << (fugue_sqlParser.DISTRIBUTE - 53)))) != 0) or ((((_la - 117)) & ~0x3f) == 0 and ((1 << (_la - 117)) & ((1 << (fugue_sqlParser.DROP - 117)) | (1 << (fugue_sqlParser.ELSE - 117)) | (1 << (fugue_sqlParser.END - 117)) | (1 << (fugue_sqlParser.ESCAPE - 117)) | (1 << (fugue_sqlParser.ESCAPED - 117)) | (1 << (fugue_sqlParser.EXCEPT - 117)) | (1 << (fugue_sqlParser.EXCHANGE - 117)) | (1 << (fugue_sqlParser.EXISTS - 117)) | (1 << (fugue_sqlParser.EXPLAIN - 117)) | (1 << (fugue_sqlParser.EXPORT - 117)) | (1 << (fugue_sqlParser.EXTENDED - 117)) | (1 << (fugue_sqlParser.EXTERNAL - 117)) | (1 << (fugue_sqlParser.EXTRACT - 117)) | (1 << (fugue_sqlParser.FALSE - 117)) | (1 << (fugue_sqlParser.FETCH - 117)) | (1 << (fugue_sqlParser.FIELDS - 117)) | (1 << (fugue_sqlParser.FILTER - 117)) | (1 << (fugue_sqlParser.FILEFORMAT - 117)) | (1 << (fugue_sqlParser.FIRST - 117)) | (1 << (fugue_sqlParser.FOLLOWING - 117)) | (1 << (fugue_sqlParser.FOR - 117)) | (1 << (fugue_sqlParser.FOREIGN - 117)) | (1 << (fugue_sqlParser.FORMAT - 117)) | (1 << (fugue_sqlParser.FORMATTED - 117)) | (1 << (fugue_sqlParser.FROM - 117)) | (1 << (fugue_sqlParser.FULL - 117)) | (1 << (fugue_sqlParser.FUNCTION - 117)) | (1 << (fugue_sqlParser.FUNCTIONS - 117)) | (1 << (fugue_sqlParser.GLOBAL - 117)) | (1 << (fugue_sqlParser.GRANT - 117)) | (1 << (fugue_sqlParser.GROUP - 117)) | (1 << (fugue_sqlParser.GROUPING - 117)) | (1 << (fugue_sqlParser.HAVING - 117)) | (1 << (fugue_sqlParser.HOUR - 117)) | (1 << (fugue_sqlParser.IF - 117)) | (1 << (fugue_sqlParser.IGNORE - 117)) | (1 << (fugue_sqlParser.IMPORT - 117)) | (1 << (fugue_sqlParser.IN - 117)) | (1 << (fugue_sqlParser.INDEX - 117)) | (1 << (fugue_sqlParser.INDEXES - 117)) | (1 << (fugue_sqlParser.INNER - 117)) | (1 << (fugue_sqlParser.INPATH - 117)) | (1 << (fugue_sqlParser.INPUTFORMAT - 117)) | (1 << (fugue_sqlParser.INSERT - 117)) | (1 << (fugue_sqlParser.INTERSECT - 117)) | (1 << (fugue_sqlParser.INTERVAL - 117)) | (1 << (fugue_sqlParser.INTO - 117)) | (1 << (fugue_sqlParser.IS - 117)) | (1 << (fugue_sqlParser.ITEMS - 117)) | (1 << (fugue_sqlParser.JOIN - 117)) | (1 << (fugue_sqlParser.KEYS - 117)) | (1 << (fugue_sqlParser.LAST - 117)) | (1 << (fugue_sqlParser.LATERAL - 117)) | (1 << (fugue_sqlParser.LAZY - 117)) | (1 << (fugue_sqlParser.LEADING - 117)) | (1 << (fugue_sqlParser.LEFT - 117)) | (1 << (fugue_sqlParser.LIKE - 117)) | (1 << (fugue_sqlParser.LIMIT - 117)) | (1 << (fugue_sqlParser.LINES - 117)) | (1 << (fugue_sqlParser.LIST - 117)) | (1 << (fugue_sqlParser.LOAD - 117)) | (1 << (fugue_sqlParser.LOCAL - 117)) | (1 << (fugue_sqlParser.LOCATION - 117)) | (1 << (fugue_sqlParser.LOCK - 117)))) != 0) or ((((_la - 181)) & ~0x3f) == 0 and ((1 << (_la - 181)) & ((1 << (fugue_sqlParser.LOCKS - 181)) | (1 << (fugue_sqlParser.LOGICAL - 181)) | (1 << (fugue_sqlParser.MACRO - 181)) | (1 << (fugue_sqlParser.MAP - 181)) | (1 << (fugue_sqlParser.MATCHED - 181)) | (1 << (fugue_sqlParser.MERGE - 181)) | (1 << (fugue_sqlParser.MINUTE - 181)) | (1 << (fugue_sqlParser.MONTH - 181)) | (1 << (fugue_sqlParser.MSCK - 181)) | (1 << (fugue_sqlParser.NAMESPACE - 181)) | (1 << (fugue_sqlParser.NAMESPACES - 181)) | (1 << (fugue_sqlParser.NATURAL - 181)) | (1 << (fugue_sqlParser.NO - 181)) | (1 << (fugue_sqlParser.NOT - 181)) | (1 << (fugue_sqlParser.THENULL - 181)) | (1 << (fugue_sqlParser.THENULLS - 181)) | (1 << (fugue_sqlParser.OF - 181)) | (1 << (fugue_sqlParser.ON - 181)) | (1 << (fugue_sqlParser.ONLY - 181)) | (1 << (fugue_sqlParser.OPTION - 181)) | (1 << (fugue_sqlParser.OPTIONS - 181)) | (1 << (fugue_sqlParser.OR - 181)) | (1 << (fugue_sqlParser.ORDER - 181)) | (1 << (fugue_sqlParser.OUT - 181)) | (1 << (fugue_sqlParser.OUTER - 181)) | (1 << (fugue_sqlParser.OUTPUTFORMAT - 181)) | (1 << (fugue_sqlParser.OVER - 181)) | (1 << (fugue_sqlParser.OVERLAPS - 181)) | (1 << (fugue_sqlParser.OVERLAY - 181)) | (1 << (fugue_sqlParser.OVERWRITE - 181)) | (1 << (fugue_sqlParser.PARTITION - 181)) | (1 << (fugue_sqlParser.PARTITIONED - 181)) | (1 << (fugue_sqlParser.PARTITIONS - 181)) | (1 << (fugue_sqlParser.PERCENTLIT - 181)) | (1 << (fugue_sqlParser.PIVOT - 181)) | (1 << (fugue_sqlParser.PLACING - 181)) | (1 << (fugue_sqlParser.POSITION - 181)) | (1 << (fugue_sqlParser.PRECEDING - 181)) | (1 << (fugue_sqlParser.PRIMARY - 181)) | (1 << (fugue_sqlParser.PRINCIPALS - 181)) | (1 << (fugue_sqlParser.PROPERTIES - 181)) | (1 << (fugue_sqlParser.PURGE - 181)) | (1 << (fugue_sqlParser.QUERY - 181)) | (1 << (fugue_sqlParser.RANGE - 181)) | (1 << (fugue_sqlParser.RECORDREADER - 181)) | (1 << (fugue_sqlParser.RECORDWRITER - 181)) | (1 << (fugue_sqlParser.RECOVER - 181)) | (1 << (fugue_sqlParser.REDUCE - 181)) | (1 << (fugue_sqlParser.REFERENCES - 181)) | (1 << (fugue_sqlParser.REFRESH - 181)) | (1 << (fugue_sqlParser.RENAME - 181)) | (1 << (fugue_sqlParser.REPAIR - 181)) | (1 << (fugue_sqlParser.REPLACE - 181)) | (1 << (fugue_sqlParser.RESET - 181)) | (1 << (fugue_sqlParser.RESTRICT - 181)) | (1 << (fugue_sqlParser.REVOKE - 181)) | (1 << (fugue_sqlParser.RIGHT - 181)) | (1 << (fugue_sqlParser.RLIKE - 181)) | (1 << (fugue_sqlParser.ROLE - 181)) | (1 << (fugue_sqlParser.ROLES - 181)) | (1 << (fugue_sqlParser.ROLLBACK - 181)) | (1 << (fugue_sqlParser.ROLLUP - 181)) | (1 << (fugue_sqlParser.ROW - 181)) | (1 << (fugue_sqlParser.ROWS - 181)))) != 0) or ((((_la - 245)) & ~0x3f) == 0 and ((1 << (_la - 245)) & ((1 << (fugue_sqlParser.SCHEMA - 245)) | (1 << (fugue_sqlParser.SECOND - 245)) | (1 << (fugue_sqlParser.SELECT - 245)) | (1 << (fugue_sqlParser.SEMI - 245)) | (1 << (fugue_sqlParser.SEPARATED - 245)) | (1 << (fugue_sqlParser.SERDE - 245)) | (1 << (fugue_sqlParser.SERDEPROPERTIES - 245)) | (1 << (fugue_sqlParser.SESSION_USER - 245)) | (1 << (fugue_sqlParser.SET - 245)) | (1 << (fugue_sqlParser.SETMINUS - 245)) | (1 << (fugue_sqlParser.SETS - 245)) | (1 << (fugue_sqlParser.SHOW - 245)) | (1 << (fugue_sqlParser.SKEWED - 245)) | (1 << (fugue_sqlParser.SOME - 245)) | (1 << (fugue_sqlParser.SORT - 245)) | (1 << (fugue_sqlParser.SORTED - 245)) | (1 << (fugue_sqlParser.START - 245)) | (1 << (fugue_sqlParser.STATISTICS - 245)) | (1 << (fugue_sqlParser.STORED - 245)) | (1 << (fugue_sqlParser.STRATIFY - 245)) | (1 << (fugue_sqlParser.STRUCT - 245)) | (1 << (fugue_sqlParser.SUBSTR - 245)) | (1 << (fugue_sqlParser.SUBSTRING - 245)) | (1 << (fugue_sqlParser.TABLE - 245)) | (1 << (fugue_sqlParser.TABLES - 245)) | (1 << (fugue_sqlParser.TABLESAMPLE - 245)) | (1 << (fugue_sqlParser.TBLPROPERTIES - 245)) | (1 << (fugue_sqlParser.TEMPORARY - 245)) | (1 << (fugue_sqlParser.TERMINATED - 245)) | (1 << (fugue_sqlParser.THEN - 245)) | (1 << (fugue_sqlParser.TO - 245)) | (1 << (fugue_sqlParser.TOUCH - 245)) | (1 << (fugue_sqlParser.TRAILING - 245)) | (1 << (fugue_sqlParser.TRANSACTION - 245)) | (1 << (fugue_sqlParser.TRANSACTIONS - 245)) | (1 << (fugue_sqlParser.TRANSFORM - 245)) | (1 << (fugue_sqlParser.TRIM - 245)) | (1 << (fugue_sqlParser.TRUE - 245)) | (1 << (fugue_sqlParser.TRUNCATE - 245)) | (1 << (fugue_sqlParser.TYPE - 245)) | (1 << (fugue_sqlParser.UNARCHIVE - 245)) | (1 << (fugue_sqlParser.UNBOUNDED - 245)) | (1 << (fugue_sqlParser.UNCACHE - 245)) | (1 << (fugue_sqlParser.UNION - 245)) | (1 << (fugue_sqlParser.UNIQUE - 245)) | (1 << (fugue_sqlParser.UNKNOWN - 245)) | (1 << (fugue_sqlParser.UNLOCK - 245)) | (1 << (fugue_sqlParser.UNSET - 245)) | (1 << (fugue_sqlParser.UPDATE - 245)) | (1 << (fugue_sqlParser.USE - 245)) | (1 << (fugue_sqlParser.USER - 245)) | (1 << (fugue_sqlParser.USING - 245)) | (1 << (fugue_sqlParser.VALUES - 245)) | (1 << (fugue_sqlParser.VIEW - 245)) | (1 << (fugue_sqlParser.VIEWS - 245)) | (1 << (fugue_sqlParser.WHEN - 245)) | (1 << (fugue_sqlParser.WHERE - 245)) | (1 << (fugue_sqlParser.WINDOW - 245)) | (1 << (fugue_sqlParser.WITH - 245)) | (1 << (fugue_sqlParser.YEAR - 245)))) != 0) or ((((_la - 319)) & ~0x3f) == 0 and ((1 << (_la - 319)) & ((1 << (fugue_sqlParser.DIV - 319)) | (1 << (fugue_sqlParser.IDENTIFIER - 319)) | (1 << (fugue_sqlParser.BACKQUOTED_IDENTIFIER - 319)))) != 0):
                    self.state = 1722
                    self.describeColName()


                pass

            elif la_ == 52:
                localctx = fugue_sqlParser.DescribeQueryContext(self, localctx)
                self.enterOuterAlt(localctx, 52)
                self.state = 1725
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.DESC or _la==fugue_sqlParser.DESCRIBE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1727
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.QUERY:
                    self.state = 1726
                    self.match(fugue_sqlParser.QUERY)


                self.state = 1729
                self.query()
                pass

            elif la_ == 53:
                localctx = fugue_sqlParser.CommentNamespaceContext(self, localctx)
                self.enterOuterAlt(localctx, 53)
                self.state = 1730
                self.match(fugue_sqlParser.COMMENT)
                self.state = 1731
                self.match(fugue_sqlParser.ON)
                self.state = 1732
                self.theNamespace()
                self.state = 1733
                self.multipartIdentifier()
                self.state = 1734
                self.match(fugue_sqlParser.IS)
                self.state = 1735
                localctx.comment = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.THENULL or _la==fugue_sqlParser.STRING):
                    localctx.comment = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 54:
                localctx = fugue_sqlParser.CommentTableContext(self, localctx)
                self.enterOuterAlt(localctx, 54)
                self.state = 1737
                self.match(fugue_sqlParser.COMMENT)
                self.state = 1738
                self.match(fugue_sqlParser.ON)
                self.state = 1739
                self.match(fugue_sqlParser.TABLE)
                self.state = 1740
                self.multipartIdentifier()
                self.state = 1741
                self.match(fugue_sqlParser.IS)
                self.state = 1742
                localctx.comment = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.THENULL or _la==fugue_sqlParser.STRING):
                    localctx.comment = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 55:
                localctx = fugue_sqlParser.RefreshTableContext(self, localctx)
                self.enterOuterAlt(localctx, 55)
                self.state = 1744
                self.match(fugue_sqlParser.REFRESH)
                self.state = 1745
                self.match(fugue_sqlParser.TABLE)
                self.state = 1746
                self.multipartIdentifier()
                pass

            elif la_ == 56:
                localctx = fugue_sqlParser.RefreshResourceContext(self, localctx)
                self.enterOuterAlt(localctx, 56)
                self.state = 1747
                self.match(fugue_sqlParser.REFRESH)
                self.state = 1755
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,217,self._ctx)
                if la_ == 1:
                    self.state = 1748
                    self.match(fugue_sqlParser.STRING)
                    pass

                elif la_ == 2:
                    self.state = 1752
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,216,self._ctx)
                    while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1+1:
                            self.state = 1749
                            self.matchWildcard() 
                        self.state = 1754
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,216,self._ctx)

                    pass


                pass

            elif la_ == 57:
                localctx = fugue_sqlParser.CacheTableContext(self, localctx)
                self.enterOuterAlt(localctx, 57)
                self.state = 1757
                self.match(fugue_sqlParser.CACHE)
                self.state = 1759
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.LAZY:
                    self.state = 1758
                    self.match(fugue_sqlParser.LAZY)


                self.state = 1761
                self.match(fugue_sqlParser.TABLE)
                self.state = 1762
                self.multipartIdentifier()
                self.state = 1765
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.OPTIONS:
                    self.state = 1763
                    self.match(fugue_sqlParser.OPTIONS)
                    self.state = 1764
                    localctx.options = self.tablePropertyList()


                self.state = 1771
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << fugue_sqlParser.FILL) | (1 << fugue_sqlParser.TAKE) | (1 << fugue_sqlParser.PROCESS) | (1 << fugue_sqlParser.ZIP) | (1 << fugue_sqlParser.SAVE) | (1 << fugue_sqlParser.CONNECT) | (1 << fugue_sqlParser.SAMPLE) | (1 << fugue_sqlParser.ALTER) | (1 << fugue_sqlParser.AS))) != 0) or ((((_la - 94)) & ~0x3f) == 0 and ((1 << (_la - 94)) & ((1 << (fugue_sqlParser.CREATE - 94)) | (1 << (fugue_sqlParser.DROP - 94)) | (1 << (fugue_sqlParser.FROM - 94)))) != 0) or ((((_la - 177)) & ~0x3f) == 0 and ((1 << (_la - 177)) & ((1 << (fugue_sqlParser.LOAD - 177)) | (1 << (fugue_sqlParser.MAP - 177)) | (1 << (fugue_sqlParser.REDUCE - 177)) | (1 << (fugue_sqlParser.RENAME - 177)))) != 0) or ((((_la - 247)) & ~0x3f) == 0 and ((1 << (_la - 247)) & ((1 << (fugue_sqlParser.SELECT - 247)) | (1 << (fugue_sqlParser.TABLE - 247)) | (1 << (fugue_sqlParser.TRANSFORM - 247)) | (1 << (fugue_sqlParser.VALUES - 247)) | (1 << (fugue_sqlParser.WITH - 247)))) != 0):
                    self.state = 1768
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==fugue_sqlParser.AS:
                        self.state = 1767
                        self.match(fugue_sqlParser.AS)


                    self.state = 1770
                    self.query()


                pass

            elif la_ == 58:
                localctx = fugue_sqlParser.UncacheTableContext(self, localctx)
                self.enterOuterAlt(localctx, 58)
                self.state = 1773
                self.match(fugue_sqlParser.UNCACHE)
                self.state = 1774
                self.match(fugue_sqlParser.TABLE)
                self.state = 1777
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,222,self._ctx)
                if la_ == 1:
                    self.state = 1775
                    self.match(fugue_sqlParser.IF)
                    self.state = 1776
                    self.match(fugue_sqlParser.EXISTS)


                self.state = 1779
                self.multipartIdentifier()
                pass

            elif la_ == 59:
                localctx = fugue_sqlParser.ClearCacheContext(self, localctx)
                self.enterOuterAlt(localctx, 59)
                self.state = 1780
                self.match(fugue_sqlParser.CLEAR)
                self.state = 1781
                self.match(fugue_sqlParser.CACHE)
                pass

            elif la_ == 60:
                localctx = fugue_sqlParser.LoadDataContext(self, localctx)
                self.enterOuterAlt(localctx, 60)
                self.state = 1782
                self.match(fugue_sqlParser.LOAD)
                self.state = 1783
                self.match(fugue_sqlParser.DATA)
                self.state = 1785
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.LOCAL:
                    self.state = 1784
                    self.match(fugue_sqlParser.LOCAL)


                self.state = 1787
                self.match(fugue_sqlParser.INPATH)
                self.state = 1788
                localctx.path = self.match(fugue_sqlParser.STRING)
                self.state = 1790
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.OVERWRITE:
                    self.state = 1789
                    self.match(fugue_sqlParser.OVERWRITE)


                self.state = 1792
                self.match(fugue_sqlParser.INTO)
                self.state = 1793
                self.match(fugue_sqlParser.TABLE)
                self.state = 1794
                self.multipartIdentifier()
                self.state = 1796
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.PARTITION:
                    self.state = 1795
                    self.partitionSpec()


                pass

            elif la_ == 61:
                localctx = fugue_sqlParser.TruncateTableContext(self, localctx)
                self.enterOuterAlt(localctx, 61)
                self.state = 1798
                self.match(fugue_sqlParser.TRUNCATE)
                self.state = 1799
                self.match(fugue_sqlParser.TABLE)
                self.state = 1800
                self.multipartIdentifier()
                self.state = 1802
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.PARTITION:
                    self.state = 1801
                    self.partitionSpec()


                pass

            elif la_ == 62:
                localctx = fugue_sqlParser.RepairTableContext(self, localctx)
                self.enterOuterAlt(localctx, 62)
                self.state = 1804
                self.match(fugue_sqlParser.MSCK)
                self.state = 1805
                self.match(fugue_sqlParser.REPAIR)
                self.state = 1806
                self.match(fugue_sqlParser.TABLE)
                self.state = 1807
                self.multipartIdentifier()
                pass

            elif la_ == 63:
                localctx = fugue_sqlParser.ManageResourceContext(self, localctx)
                self.enterOuterAlt(localctx, 63)
                self.state = 1808
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.ADD or _la==fugue_sqlParser.LIST):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1809
                self.identifier()
                self.state = 1817
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,228,self._ctx)
                if la_ == 1:
                    self.state = 1810
                    self.match(fugue_sqlParser.STRING)
                    pass

                elif la_ == 2:
                    self.state = 1814
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,227,self._ctx)
                    while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1+1:
                            self.state = 1811
                            self.matchWildcard() 
                        self.state = 1816
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,227,self._ctx)

                    pass


                pass

            elif la_ == 64:
                localctx = fugue_sqlParser.FailNativeCommandContext(self, localctx)
                self.enterOuterAlt(localctx, 64)
                self.state = 1819
                self.match(fugue_sqlParser.SET)
                self.state = 1820
                self.match(fugue_sqlParser.ROLE)
                self.state = 1824
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,229,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 1821
                        self.matchWildcard() 
                    self.state = 1826
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,229,self._ctx)

                pass

            elif la_ == 65:
                localctx = fugue_sqlParser.SetConfigurationContext(self, localctx)
                self.enterOuterAlt(localctx, 65)
                self.state = 1827
                self.match(fugue_sqlParser.SET)
                self.state = 1831
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,230,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 1828
                        self.matchWildcard() 
                    self.state = 1833
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,230,self._ctx)

                pass

            elif la_ == 66:
                localctx = fugue_sqlParser.ResetConfigurationContext(self, localctx)
                self.enterOuterAlt(localctx, 66)
                self.state = 1834
                self.match(fugue_sqlParser.RESET)
                pass

            elif la_ == 67:
                localctx = fugue_sqlParser.FailNativeCommandContext(self, localctx)
                self.enterOuterAlt(localctx, 67)
                self.state = 1835
                self.unsupportedHiveNativeCommands()
                self.state = 1839
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,231,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 1836
                        self.matchWildcard() 
                    self.state = 1841
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,231,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnsupportedHiveNativeCommandsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.kw1 = None # Token
            self.kw2 = None # Token
            self.kw3 = None # Token
            self.kw4 = None # Token
            self.kw5 = None # Token
            self.kw6 = None # Token

        def CREATE(self):
            return self.getToken(fugue_sqlParser.CREATE, 0)

        def ROLE(self):
            return self.getToken(fugue_sqlParser.ROLE, 0)

        def DROP(self):
            return self.getToken(fugue_sqlParser.DROP, 0)

        def GRANT(self):
            return self.getToken(fugue_sqlParser.GRANT, 0)

        def REVOKE(self):
            return self.getToken(fugue_sqlParser.REVOKE, 0)

        def SHOW(self):
            return self.getToken(fugue_sqlParser.SHOW, 0)

        def PRINCIPALS(self):
            return self.getToken(fugue_sqlParser.PRINCIPALS, 0)

        def ROLES(self):
            return self.getToken(fugue_sqlParser.ROLES, 0)

        def CURRENT(self):
            return self.getToken(fugue_sqlParser.CURRENT, 0)

        def EXPORT(self):
            return self.getToken(fugue_sqlParser.EXPORT, 0)

        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)

        def IMPORT(self):
            return self.getToken(fugue_sqlParser.IMPORT, 0)

        def COMPACTIONS(self):
            return self.getToken(fugue_sqlParser.COMPACTIONS, 0)

        def TRANSACTIONS(self):
            return self.getToken(fugue_sqlParser.TRANSACTIONS, 0)

        def INDEXES(self):
            return self.getToken(fugue_sqlParser.INDEXES, 0)

        def LOCKS(self):
            return self.getToken(fugue_sqlParser.LOCKS, 0)

        def INDEX(self):
            return self.getToken(fugue_sqlParser.INDEX, 0)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)

        def LOCK(self):
            return self.getToken(fugue_sqlParser.LOCK, 0)

        def DATABASE(self):
            return self.getToken(fugue_sqlParser.DATABASE, 0)

        def UNLOCK(self):
            return self.getToken(fugue_sqlParser.UNLOCK, 0)

        def TEMPORARY(self):
            return self.getToken(fugue_sqlParser.TEMPORARY, 0)

        def MACRO(self):
            return self.getToken(fugue_sqlParser.MACRO, 0)

        def tableIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.TableIdentifierContext,0)


        def NOT(self):
            return self.getToken(fugue_sqlParser.NOT, 0)

        def CLUSTERED(self):
            return self.getToken(fugue_sqlParser.CLUSTERED, 0)

        def BY(self):
            return self.getToken(fugue_sqlParser.BY, 0)

        def SORTED(self):
            return self.getToken(fugue_sqlParser.SORTED, 0)

        def SKEWED(self):
            return self.getToken(fugue_sqlParser.SKEWED, 0)

        def STORED(self):
            return self.getToken(fugue_sqlParser.STORED, 0)

        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)

        def DIRECTORIES(self):
            return self.getToken(fugue_sqlParser.DIRECTORIES, 0)

        def SET(self):
            return self.getToken(fugue_sqlParser.SET, 0)

        def LOCATION(self):
            return self.getToken(fugue_sqlParser.LOCATION, 0)

        def EXCHANGE(self):
            return self.getToken(fugue_sqlParser.EXCHANGE, 0)

        def PARTITION(self):
            return self.getToken(fugue_sqlParser.PARTITION, 0)

        def ARCHIVE(self):
            return self.getToken(fugue_sqlParser.ARCHIVE, 0)

        def UNARCHIVE(self):
            return self.getToken(fugue_sqlParser.UNARCHIVE, 0)

        def TOUCH(self):
            return self.getToken(fugue_sqlParser.TOUCH, 0)

        def COMPACT(self):
            return self.getToken(fugue_sqlParser.COMPACT, 0)

        def partitionSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.PartitionSpecContext,0)


        def CONCATENATE(self):
            return self.getToken(fugue_sqlParser.CONCATENATE, 0)

        def FILEFORMAT(self):
            return self.getToken(fugue_sqlParser.FILEFORMAT, 0)

        def REPLACE(self):
            return self.getToken(fugue_sqlParser.REPLACE, 0)

        def COLUMNS(self):
            return self.getToken(fugue_sqlParser.COLUMNS, 0)

        def START(self):
            return self.getToken(fugue_sqlParser.START, 0)

        def TRANSACTION(self):
            return self.getToken(fugue_sqlParser.TRANSACTION, 0)

        def COMMIT(self):
            return self.getToken(fugue_sqlParser.COMMIT, 0)

        def ROLLBACK(self):
            return self.getToken(fugue_sqlParser.ROLLBACK, 0)

        def DFS(self):
            return self.getToken(fugue_sqlParser.DFS, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_unsupportedHiveNativeCommands

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnsupportedHiveNativeCommands" ):
                return visitor.visitUnsupportedHiveNativeCommands(self)
            else:
                return visitor.visitChildren(self)




    def unsupportedHiveNativeCommands(self):

        localctx = fugue_sqlParser.UnsupportedHiveNativeCommandsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_unsupportedHiveNativeCommands)
        self._la = 0 # Token type
        try:
            self.state = 2012
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,240,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1844
                localctx.kw1 = self.match(fugue_sqlParser.CREATE)
                self.state = 1845
                localctx.kw2 = self.match(fugue_sqlParser.ROLE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1846
                localctx.kw1 = self.match(fugue_sqlParser.DROP)
                self.state = 1847
                localctx.kw2 = self.match(fugue_sqlParser.ROLE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1848
                localctx.kw1 = self.match(fugue_sqlParser.GRANT)
                self.state = 1850
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,233,self._ctx)
                if la_ == 1:
                    self.state = 1849
                    localctx.kw2 = self.match(fugue_sqlParser.ROLE)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1852
                localctx.kw1 = self.match(fugue_sqlParser.REVOKE)
                self.state = 1854
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,234,self._ctx)
                if la_ == 1:
                    self.state = 1853
                    localctx.kw2 = self.match(fugue_sqlParser.ROLE)


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1856
                localctx.kw1 = self.match(fugue_sqlParser.SHOW)
                self.state = 1857
                localctx.kw2 = self.match(fugue_sqlParser.GRANT)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1858
                localctx.kw1 = self.match(fugue_sqlParser.SHOW)
                self.state = 1859
                localctx.kw2 = self.match(fugue_sqlParser.ROLE)
                self.state = 1861
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,235,self._ctx)
                if la_ == 1:
                    self.state = 1860
                    localctx.kw3 = self.match(fugue_sqlParser.GRANT)


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1863
                localctx.kw1 = self.match(fugue_sqlParser.SHOW)
                self.state = 1864
                localctx.kw2 = self.match(fugue_sqlParser.PRINCIPALS)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1865
                localctx.kw1 = self.match(fugue_sqlParser.SHOW)
                self.state = 1866
                localctx.kw2 = self.match(fugue_sqlParser.ROLES)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1867
                localctx.kw1 = self.match(fugue_sqlParser.SHOW)
                self.state = 1868
                localctx.kw2 = self.match(fugue_sqlParser.CURRENT)
                self.state = 1869
                localctx.kw3 = self.match(fugue_sqlParser.ROLES)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1870
                localctx.kw1 = self.match(fugue_sqlParser.EXPORT)
                self.state = 1871
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1872
                localctx.kw1 = self.match(fugue_sqlParser.IMPORT)
                self.state = 1873
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1874
                localctx.kw1 = self.match(fugue_sqlParser.SHOW)
                self.state = 1875
                localctx.kw2 = self.match(fugue_sqlParser.COMPACTIONS)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1876
                localctx.kw1 = self.match(fugue_sqlParser.SHOW)
                self.state = 1877
                localctx.kw2 = self.match(fugue_sqlParser.CREATE)
                self.state = 1878
                localctx.kw3 = self.match(fugue_sqlParser.TABLE)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1879
                localctx.kw1 = self.match(fugue_sqlParser.SHOW)
                self.state = 1880
                localctx.kw2 = self.match(fugue_sqlParser.TRANSACTIONS)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1881
                localctx.kw1 = self.match(fugue_sqlParser.SHOW)
                self.state = 1882
                localctx.kw2 = self.match(fugue_sqlParser.INDEXES)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1883
                localctx.kw1 = self.match(fugue_sqlParser.SHOW)
                self.state = 1884
                localctx.kw2 = self.match(fugue_sqlParser.LOCKS)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 1885
                localctx.kw1 = self.match(fugue_sqlParser.CREATE)
                self.state = 1886
                localctx.kw2 = self.match(fugue_sqlParser.INDEX)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 1887
                localctx.kw1 = self.match(fugue_sqlParser.DROP)
                self.state = 1888
                localctx.kw2 = self.match(fugue_sqlParser.INDEX)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 1889
                localctx.kw1 = self.match(fugue_sqlParser.ALTER)
                self.state = 1890
                localctx.kw2 = self.match(fugue_sqlParser.INDEX)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 1891
                localctx.kw1 = self.match(fugue_sqlParser.LOCK)
                self.state = 1892
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 1893
                localctx.kw1 = self.match(fugue_sqlParser.LOCK)
                self.state = 1894
                localctx.kw2 = self.match(fugue_sqlParser.DATABASE)
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 1895
                localctx.kw1 = self.match(fugue_sqlParser.UNLOCK)
                self.state = 1896
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 1897
                localctx.kw1 = self.match(fugue_sqlParser.UNLOCK)
                self.state = 1898
                localctx.kw2 = self.match(fugue_sqlParser.DATABASE)
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 1899
                localctx.kw1 = self.match(fugue_sqlParser.CREATE)
                self.state = 1900
                localctx.kw2 = self.match(fugue_sqlParser.TEMPORARY)
                self.state = 1901
                localctx.kw3 = self.match(fugue_sqlParser.MACRO)
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 1902
                localctx.kw1 = self.match(fugue_sqlParser.DROP)
                self.state = 1903
                localctx.kw2 = self.match(fugue_sqlParser.TEMPORARY)
                self.state = 1904
                localctx.kw3 = self.match(fugue_sqlParser.MACRO)
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 1905
                localctx.kw1 = self.match(fugue_sqlParser.ALTER)
                self.state = 1906
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                self.state = 1907
                self.tableIdentifier()
                self.state = 1908
                localctx.kw3 = self.match(fugue_sqlParser.NOT)
                self.state = 1909
                localctx.kw4 = self.match(fugue_sqlParser.CLUSTERED)
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 1911
                localctx.kw1 = self.match(fugue_sqlParser.ALTER)
                self.state = 1912
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                self.state = 1913
                self.tableIdentifier()
                self.state = 1914
                localctx.kw3 = self.match(fugue_sqlParser.CLUSTERED)
                self.state = 1915
                localctx.kw4 = self.match(fugue_sqlParser.BY)
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 1917
                localctx.kw1 = self.match(fugue_sqlParser.ALTER)
                self.state = 1918
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                self.state = 1919
                self.tableIdentifier()
                self.state = 1920
                localctx.kw3 = self.match(fugue_sqlParser.NOT)
                self.state = 1921
                localctx.kw4 = self.match(fugue_sqlParser.SORTED)
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 1923
                localctx.kw1 = self.match(fugue_sqlParser.ALTER)
                self.state = 1924
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                self.state = 1925
                self.tableIdentifier()
                self.state = 1926
                localctx.kw3 = self.match(fugue_sqlParser.SKEWED)
                self.state = 1927
                localctx.kw4 = self.match(fugue_sqlParser.BY)
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 1929
                localctx.kw1 = self.match(fugue_sqlParser.ALTER)
                self.state = 1930
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                self.state = 1931
                self.tableIdentifier()
                self.state = 1932
                localctx.kw3 = self.match(fugue_sqlParser.NOT)
                self.state = 1933
                localctx.kw4 = self.match(fugue_sqlParser.SKEWED)
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 1935
                localctx.kw1 = self.match(fugue_sqlParser.ALTER)
                self.state = 1936
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                self.state = 1937
                self.tableIdentifier()
                self.state = 1938
                localctx.kw3 = self.match(fugue_sqlParser.NOT)
                self.state = 1939
                localctx.kw4 = self.match(fugue_sqlParser.STORED)
                self.state = 1940
                localctx.kw5 = self.match(fugue_sqlParser.AS)
                self.state = 1941
                localctx.kw6 = self.match(fugue_sqlParser.DIRECTORIES)
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 1943
                localctx.kw1 = self.match(fugue_sqlParser.ALTER)
                self.state = 1944
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                self.state = 1945
                self.tableIdentifier()
                self.state = 1946
                localctx.kw3 = self.match(fugue_sqlParser.SET)
                self.state = 1947
                localctx.kw4 = self.match(fugue_sqlParser.SKEWED)
                self.state = 1948
                localctx.kw5 = self.match(fugue_sqlParser.LOCATION)
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 1950
                localctx.kw1 = self.match(fugue_sqlParser.ALTER)
                self.state = 1951
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                self.state = 1952
                self.tableIdentifier()
                self.state = 1953
                localctx.kw3 = self.match(fugue_sqlParser.EXCHANGE)
                self.state = 1954
                localctx.kw4 = self.match(fugue_sqlParser.PARTITION)
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 1956
                localctx.kw1 = self.match(fugue_sqlParser.ALTER)
                self.state = 1957
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                self.state = 1958
                self.tableIdentifier()
                self.state = 1959
                localctx.kw3 = self.match(fugue_sqlParser.ARCHIVE)
                self.state = 1960
                localctx.kw4 = self.match(fugue_sqlParser.PARTITION)
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 1962
                localctx.kw1 = self.match(fugue_sqlParser.ALTER)
                self.state = 1963
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                self.state = 1964
                self.tableIdentifier()
                self.state = 1965
                localctx.kw3 = self.match(fugue_sqlParser.UNARCHIVE)
                self.state = 1966
                localctx.kw4 = self.match(fugue_sqlParser.PARTITION)
                pass

            elif la_ == 36:
                self.enterOuterAlt(localctx, 36)
                self.state = 1968
                localctx.kw1 = self.match(fugue_sqlParser.ALTER)
                self.state = 1969
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                self.state = 1970
                self.tableIdentifier()
                self.state = 1971
                localctx.kw3 = self.match(fugue_sqlParser.TOUCH)
                pass

            elif la_ == 37:
                self.enterOuterAlt(localctx, 37)
                self.state = 1973
                localctx.kw1 = self.match(fugue_sqlParser.ALTER)
                self.state = 1974
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                self.state = 1975
                self.tableIdentifier()
                self.state = 1977
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.PARTITION:
                    self.state = 1976
                    self.partitionSpec()


                self.state = 1979
                localctx.kw3 = self.match(fugue_sqlParser.COMPACT)
                pass

            elif la_ == 38:
                self.enterOuterAlt(localctx, 38)
                self.state = 1981
                localctx.kw1 = self.match(fugue_sqlParser.ALTER)
                self.state = 1982
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                self.state = 1983
                self.tableIdentifier()
                self.state = 1985
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.PARTITION:
                    self.state = 1984
                    self.partitionSpec()


                self.state = 1987
                localctx.kw3 = self.match(fugue_sqlParser.CONCATENATE)
                pass

            elif la_ == 39:
                self.enterOuterAlt(localctx, 39)
                self.state = 1989
                localctx.kw1 = self.match(fugue_sqlParser.ALTER)
                self.state = 1990
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                self.state = 1991
                self.tableIdentifier()
                self.state = 1993
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.PARTITION:
                    self.state = 1992
                    self.partitionSpec()


                self.state = 1995
                localctx.kw3 = self.match(fugue_sqlParser.SET)
                self.state = 1996
                localctx.kw4 = self.match(fugue_sqlParser.FILEFORMAT)
                pass

            elif la_ == 40:
                self.enterOuterAlt(localctx, 40)
                self.state = 1998
                localctx.kw1 = self.match(fugue_sqlParser.ALTER)
                self.state = 1999
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                self.state = 2000
                self.tableIdentifier()
                self.state = 2002
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.PARTITION:
                    self.state = 2001
                    self.partitionSpec()


                self.state = 2004
                localctx.kw3 = self.match(fugue_sqlParser.REPLACE)
                self.state = 2005
                localctx.kw4 = self.match(fugue_sqlParser.COLUMNS)
                pass

            elif la_ == 41:
                self.enterOuterAlt(localctx, 41)
                self.state = 2007
                localctx.kw1 = self.match(fugue_sqlParser.START)
                self.state = 2008
                localctx.kw2 = self.match(fugue_sqlParser.TRANSACTION)
                pass

            elif la_ == 42:
                self.enterOuterAlt(localctx, 42)
                self.state = 2009
                localctx.kw1 = self.match(fugue_sqlParser.COMMIT)
                pass

            elif la_ == 43:
                self.enterOuterAlt(localctx, 43)
                self.state = 2010
                localctx.kw1 = self.match(fugue_sqlParser.ROLLBACK)
                pass

            elif la_ == 44:
                self.enterOuterAlt(localctx, 44)
                self.state = 2011
                localctx.kw1 = self.match(fugue_sqlParser.DFS)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateTableHeaderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(fugue_sqlParser.CREATE, 0)

        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)


        def TEMPORARY(self):
            return self.getToken(fugue_sqlParser.TEMPORARY, 0)

        def EXTERNAL(self):
            return self.getToken(fugue_sqlParser.EXTERNAL, 0)

        def IF(self):
            return self.getToken(fugue_sqlParser.IF, 0)

        def NOT(self):
            return self.getToken(fugue_sqlParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(fugue_sqlParser.EXISTS, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_createTableHeader

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateTableHeader" ):
                return visitor.visitCreateTableHeader(self)
            else:
                return visitor.visitChildren(self)




    def createTableHeader(self):

        localctx = fugue_sqlParser.CreateTableHeaderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_createTableHeader)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2014
            self.match(fugue_sqlParser.CREATE)
            self.state = 2016
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==fugue_sqlParser.TEMPORARY:
                self.state = 2015
                self.match(fugue_sqlParser.TEMPORARY)


            self.state = 2019
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==fugue_sqlParser.EXTERNAL:
                self.state = 2018
                self.match(fugue_sqlParser.EXTERNAL)


            self.state = 2021
            self.match(fugue_sqlParser.TABLE)
            self.state = 2025
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,243,self._ctx)
            if la_ == 1:
                self.state = 2022
                self.match(fugue_sqlParser.IF)
                self.state = 2023
                self.match(fugue_sqlParser.NOT)
                self.state = 2024
                self.match(fugue_sqlParser.EXISTS)


            self.state = 2027
            self.multipartIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReplaceTableHeaderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REPLACE(self):
            return self.getToken(fugue_sqlParser.REPLACE, 0)

        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)


        def CREATE(self):
            return self.getToken(fugue_sqlParser.CREATE, 0)

        def OR(self):
            return self.getToken(fugue_sqlParser.OR, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_replaceTableHeader

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReplaceTableHeader" ):
                return visitor.visitReplaceTableHeader(self)
            else:
                return visitor.visitChildren(self)




    def replaceTableHeader(self):

        localctx = fugue_sqlParser.ReplaceTableHeaderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_replaceTableHeader)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2031
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==fugue_sqlParser.CREATE:
                self.state = 2029
                self.match(fugue_sqlParser.CREATE)
                self.state = 2030
                self.match(fugue_sqlParser.OR)


            self.state = 2033
            self.match(fugue_sqlParser.REPLACE)
            self.state = 2034
            self.match(fugue_sqlParser.TABLE)
            self.state = 2035
            self.multipartIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BucketSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLUSTERED(self):
            return self.getToken(fugue_sqlParser.CLUSTERED, 0)

        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.BY)
            else:
                return self.getToken(fugue_sqlParser.BY, i)

        def identifierList(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierListContext,0)


        def INTO(self):
            return self.getToken(fugue_sqlParser.INTO, 0)

        def INTEGER_VALUE(self):
            return self.getToken(fugue_sqlParser.INTEGER_VALUE, 0)

        def BUCKETS(self):
            return self.getToken(fugue_sqlParser.BUCKETS, 0)

        def SORTED(self):
            return self.getToken(fugue_sqlParser.SORTED, 0)

        def orderedIdentifierList(self):
            return self.getTypedRuleContext(fugue_sqlParser.OrderedIdentifierListContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_bucketSpec

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBucketSpec" ):
                return visitor.visitBucketSpec(self)
            else:
                return visitor.visitChildren(self)




    def bucketSpec(self):

        localctx = fugue_sqlParser.BucketSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_bucketSpec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2037
            self.match(fugue_sqlParser.CLUSTERED)
            self.state = 2038
            self.match(fugue_sqlParser.BY)
            self.state = 2039
            self.identifierList()
            self.state = 2043
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==fugue_sqlParser.SORTED:
                self.state = 2040
                self.match(fugue_sqlParser.SORTED)
                self.state = 2041
                self.match(fugue_sqlParser.BY)
                self.state = 2042
                self.orderedIdentifierList()


            self.state = 2045
            self.match(fugue_sqlParser.INTO)
            self.state = 2046
            self.match(fugue_sqlParser.INTEGER_VALUE)
            self.state = 2047
            self.match(fugue_sqlParser.BUCKETS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SkewSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SKEWED(self):
            return self.getToken(fugue_sqlParser.SKEWED, 0)

        def BY(self):
            return self.getToken(fugue_sqlParser.BY, 0)

        def identifierList(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierListContext,0)


        def ON(self):
            return self.getToken(fugue_sqlParser.ON, 0)

        def constantList(self):
            return self.getTypedRuleContext(fugue_sqlParser.ConstantListContext,0)


        def nestedConstantList(self):
            return self.getTypedRuleContext(fugue_sqlParser.NestedConstantListContext,0)


        def STORED(self):
            return self.getToken(fugue_sqlParser.STORED, 0)

        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)

        def DIRECTORIES(self):
            return self.getToken(fugue_sqlParser.DIRECTORIES, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_skewSpec

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSkewSpec" ):
                return visitor.visitSkewSpec(self)
            else:
                return visitor.visitChildren(self)




    def skewSpec(self):

        localctx = fugue_sqlParser.SkewSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_skewSpec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2049
            self.match(fugue_sqlParser.SKEWED)
            self.state = 2050
            self.match(fugue_sqlParser.BY)
            self.state = 2051
            self.identifierList()
            self.state = 2052
            self.match(fugue_sqlParser.ON)
            self.state = 2055
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,246,self._ctx)
            if la_ == 1:
                self.state = 2053
                self.constantList()
                pass

            elif la_ == 2:
                self.state = 2054
                self.nestedConstantList()
                pass


            self.state = 2060
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,247,self._ctx)
            if la_ == 1:
                self.state = 2057
                self.match(fugue_sqlParser.STORED)
                self.state = 2058
                self.match(fugue_sqlParser.AS)
                self.state = 2059
                self.match(fugue_sqlParser.DIRECTORIES)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LocationSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCATION(self):
            return self.getToken(fugue_sqlParser.LOCATION, 0)

        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_locationSpec

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLocationSpec" ):
                return visitor.visitLocationSpec(self)
            else:
                return visitor.visitChildren(self)




    def locationSpec(self):

        localctx = fugue_sqlParser.LocationSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_locationSpec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2062
            self.match(fugue_sqlParser.LOCATION)
            self.state = 2063
            self.match(fugue_sqlParser.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommentSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMENT(self):
            return self.getToken(fugue_sqlParser.COMMENT, 0)

        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_commentSpec

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCommentSpec" ):
                return visitor.visitCommentSpec(self)
            else:
                return visitor.visitChildren(self)




    def commentSpec(self):

        localctx = fugue_sqlParser.CommentSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_commentSpec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2065
            self.match(fugue_sqlParser.COMMENT)
            self.state = 2066
            self.match(fugue_sqlParser.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def queryTerm(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryTermContext,0)


        def queryOrganization(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryOrganizationContext,0)


        def fugueSqlEngine(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSqlEngineContext,0)


        def ctes(self):
            return self.getTypedRuleContext(fugue_sqlParser.CtesContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_query

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuery" ):
                return visitor.visitQuery(self)
            else:
                return visitor.visitChildren(self)




    def query(self):

        localctx = fugue_sqlParser.QueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_query)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2069
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==fugue_sqlParser.CONNECT:
                self.state = 2068
                self.fugueSqlEngine()


            self.state = 2072
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==fugue_sqlParser.WITH:
                self.state = 2071
                self.ctes()


            self.state = 2074
            self.queryTerm(0)
            self.state = 2075
            self.queryOrganization()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InsertIntoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_insertInto

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class InsertOverwriteHiveDirContext(InsertIntoContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.InsertIntoContext
            super().__init__(parser)
            self.path = None # Token
            self.copyFrom(ctx)

        def INSERT(self):
            return self.getToken(fugue_sqlParser.INSERT, 0)
        def OVERWRITE(self):
            return self.getToken(fugue_sqlParser.OVERWRITE, 0)
        def DIRECTORY(self):
            return self.getToken(fugue_sqlParser.DIRECTORY, 0)
        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)
        def LOCAL(self):
            return self.getToken(fugue_sqlParser.LOCAL, 0)
        def rowFormat(self):
            return self.getTypedRuleContext(fugue_sqlParser.RowFormatContext,0)

        def createFileFormat(self):
            return self.getTypedRuleContext(fugue_sqlParser.CreateFileFormatContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsertOverwriteHiveDir" ):
                return visitor.visitInsertOverwriteHiveDir(self)
            else:
                return visitor.visitChildren(self)


    class InsertOverwriteDirContext(InsertIntoContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.InsertIntoContext
            super().__init__(parser)
            self.path = None # Token
            self.options = None # TablePropertyListContext
            self.copyFrom(ctx)

        def INSERT(self):
            return self.getToken(fugue_sqlParser.INSERT, 0)
        def OVERWRITE(self):
            return self.getToken(fugue_sqlParser.OVERWRITE, 0)
        def DIRECTORY(self):
            return self.getToken(fugue_sqlParser.DIRECTORY, 0)
        def tableProvider(self):
            return self.getTypedRuleContext(fugue_sqlParser.TableProviderContext,0)

        def LOCAL(self):
            return self.getToken(fugue_sqlParser.LOCAL, 0)
        def OPTIONS(self):
            return self.getToken(fugue_sqlParser.OPTIONS, 0)
        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)
        def tablePropertyList(self):
            return self.getTypedRuleContext(fugue_sqlParser.TablePropertyListContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsertOverwriteDir" ):
                return visitor.visitInsertOverwriteDir(self)
            else:
                return visitor.visitChildren(self)


    class InsertOverwriteTableContext(InsertIntoContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.InsertIntoContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INSERT(self):
            return self.getToken(fugue_sqlParser.INSERT, 0)
        def OVERWRITE(self):
            return self.getToken(fugue_sqlParser.OVERWRITE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def partitionSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.PartitionSpecContext,0)

        def IF(self):
            return self.getToken(fugue_sqlParser.IF, 0)
        def NOT(self):
            return self.getToken(fugue_sqlParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(fugue_sqlParser.EXISTS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsertOverwriteTable" ):
                return visitor.visitInsertOverwriteTable(self)
            else:
                return visitor.visitChildren(self)


    class InsertIntoTableContext(InsertIntoContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.InsertIntoContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INSERT(self):
            return self.getToken(fugue_sqlParser.INSERT, 0)
        def INTO(self):
            return self.getToken(fugue_sqlParser.INTO, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def partitionSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.PartitionSpecContext,0)

        def IF(self):
            return self.getToken(fugue_sqlParser.IF, 0)
        def NOT(self):
            return self.getToken(fugue_sqlParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(fugue_sqlParser.EXISTS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsertIntoTable" ):
                return visitor.visitInsertIntoTable(self)
            else:
                return visitor.visitChildren(self)



    def insertInto(self):

        localctx = fugue_sqlParser.InsertIntoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_insertInto)
        self._la = 0 # Token type
        try:
            self.state = 2132
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,262,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.InsertOverwriteTableContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2077
                self.match(fugue_sqlParser.INSERT)
                self.state = 2078
                self.match(fugue_sqlParser.OVERWRITE)
                self.state = 2080
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,250,self._ctx)
                if la_ == 1:
                    self.state = 2079
                    self.match(fugue_sqlParser.TABLE)


                self.state = 2082
                self.multipartIdentifier()
                self.state = 2089
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.PARTITION:
                    self.state = 2083
                    self.partitionSpec()
                    self.state = 2087
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==fugue_sqlParser.IF:
                        self.state = 2084
                        self.match(fugue_sqlParser.IF)
                        self.state = 2085
                        self.match(fugue_sqlParser.NOT)
                        self.state = 2086
                        self.match(fugue_sqlParser.EXISTS)




                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.InsertIntoTableContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2091
                self.match(fugue_sqlParser.INSERT)
                self.state = 2092
                self.match(fugue_sqlParser.INTO)
                self.state = 2094
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,253,self._ctx)
                if la_ == 1:
                    self.state = 2093
                    self.match(fugue_sqlParser.TABLE)


                self.state = 2096
                self.multipartIdentifier()
                self.state = 2098
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.PARTITION:
                    self.state = 2097
                    self.partitionSpec()


                self.state = 2103
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.IF:
                    self.state = 2100
                    self.match(fugue_sqlParser.IF)
                    self.state = 2101
                    self.match(fugue_sqlParser.NOT)
                    self.state = 2102
                    self.match(fugue_sqlParser.EXISTS)


                pass

            elif la_ == 3:
                localctx = fugue_sqlParser.InsertOverwriteHiveDirContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2105
                self.match(fugue_sqlParser.INSERT)
                self.state = 2106
                self.match(fugue_sqlParser.OVERWRITE)
                self.state = 2108
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.LOCAL:
                    self.state = 2107
                    self.match(fugue_sqlParser.LOCAL)


                self.state = 2110
                self.match(fugue_sqlParser.DIRECTORY)
                self.state = 2111
                localctx.path = self.match(fugue_sqlParser.STRING)
                self.state = 2113
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.ROW:
                    self.state = 2112
                    self.rowFormat()


                self.state = 2116
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.STORED:
                    self.state = 2115
                    self.createFileFormat()


                pass

            elif la_ == 4:
                localctx = fugue_sqlParser.InsertOverwriteDirContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2118
                self.match(fugue_sqlParser.INSERT)
                self.state = 2119
                self.match(fugue_sqlParser.OVERWRITE)
                self.state = 2121
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.LOCAL:
                    self.state = 2120
                    self.match(fugue_sqlParser.LOCAL)


                self.state = 2123
                self.match(fugue_sqlParser.DIRECTORY)
                self.state = 2125
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.STRING:
                    self.state = 2124
                    localctx.path = self.match(fugue_sqlParser.STRING)


                self.state = 2127
                self.tableProvider()
                self.state = 2130
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.OPTIONS:
                    self.state = 2128
                    self.match(fugue_sqlParser.OPTIONS)
                    self.state = 2129
                    localctx.options = self.tablePropertyList()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionSpecLocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def partitionSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.PartitionSpecContext,0)


        def locationSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.LocationSpecContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_partitionSpecLocation

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartitionSpecLocation" ):
                return visitor.visitPartitionSpecLocation(self)
            else:
                return visitor.visitChildren(self)




    def partitionSpecLocation(self):

        localctx = fugue_sqlParser.PartitionSpecLocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_partitionSpecLocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2134
            self.partitionSpec()
            self.state = 2136
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==fugue_sqlParser.LOCATION:
                self.state = 2135
                self.locationSpec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION(self):
            return self.getToken(fugue_sqlParser.PARTITION, 0)

        def partitionVal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.PartitionValContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.PartitionValContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_partitionSpec

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartitionSpec" ):
                return visitor.visitPartitionSpec(self)
            else:
                return visitor.visitChildren(self)




    def partitionSpec(self):

        localctx = fugue_sqlParser.PartitionSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_partitionSpec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2138
            self.match(fugue_sqlParser.PARTITION)
            self.state = 2139
            self.match(fugue_sqlParser.T__2)
            self.state = 2140
            self.partitionVal()
            self.state = 2145
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==fugue_sqlParser.T__0:
                self.state = 2141
                self.match(fugue_sqlParser.T__0)
                self.state = 2142
                self.partitionVal()
                self.state = 2147
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2148
            self.match(fugue_sqlParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionValContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)


        def EQUAL(self):
            return self.getToken(fugue_sqlParser.EQUAL, 0)

        def constant(self):
            return self.getTypedRuleContext(fugue_sqlParser.ConstantContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_partitionVal

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartitionVal" ):
                return visitor.visitPartitionVal(self)
            else:
                return visitor.visitChildren(self)




    def partitionVal(self):

        localctx = fugue_sqlParser.PartitionValContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_partitionVal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2150
            self.identifier()
            self.state = 2153
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==fugue_sqlParser.EQUAL:
                self.state = 2151
                self.match(fugue_sqlParser.EQUAL)
                self.state = 2152
                self.constant()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TheNamespaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAMESPACE(self):
            return self.getToken(fugue_sqlParser.NAMESPACE, 0)

        def DATABASE(self):
            return self.getToken(fugue_sqlParser.DATABASE, 0)

        def SCHEMA(self):
            return self.getToken(fugue_sqlParser.SCHEMA, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_theNamespace

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTheNamespace" ):
                return visitor.visitTheNamespace(self)
            else:
                return visitor.visitChildren(self)




    def theNamespace(self):

        localctx = fugue_sqlParser.TheNamespaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_theNamespace)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2155
            _la = self._input.LA(1)
            if not(_la==fugue_sqlParser.DATABASE or _la==fugue_sqlParser.NAMESPACE or _la==fugue_sqlParser.SCHEMA):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DescribeFuncNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedName(self):
            return self.getTypedRuleContext(fugue_sqlParser.QualifiedNameContext,0)


        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)

        def comparisonOperator(self):
            return self.getTypedRuleContext(fugue_sqlParser.ComparisonOperatorContext,0)


        def arithmeticOperator(self):
            return self.getTypedRuleContext(fugue_sqlParser.ArithmeticOperatorContext,0)


        def predicateOperator(self):
            return self.getTypedRuleContext(fugue_sqlParser.PredicateOperatorContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_describeFuncName

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDescribeFuncName" ):
                return visitor.visitDescribeFuncName(self)
            else:
                return visitor.visitChildren(self)




    def describeFuncName(self):

        localctx = fugue_sqlParser.DescribeFuncNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_describeFuncName)
        try:
            self.state = 2162
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,266,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2157
                self.qualifiedName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2158
                self.match(fugue_sqlParser.STRING)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2159
                self.comparisonOperator()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2160
                self.arithmeticOperator()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2161
                self.predicateOperator()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DescribeColNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._identifier = None # IdentifierContext
            self.nameParts = list() # of IdentifierContexts

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_describeColName

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDescribeColName" ):
                return visitor.visitDescribeColName(self)
            else:
                return visitor.visitChildren(self)




    def describeColName(self):

        localctx = fugue_sqlParser.DescribeColNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_describeColName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2164
            localctx._identifier = self.identifier()
            localctx.nameParts.append(localctx._identifier)
            self.state = 2169
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==fugue_sqlParser.T__6:
                self.state = 2165
                self.match(fugue_sqlParser.T__6)
                self.state = 2166
                localctx._identifier = self.identifier()
                localctx.nameParts.append(localctx._identifier)
                self.state = 2171
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CtesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(fugue_sqlParser.WITH, 0)

        def namedQuery(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.NamedQueryContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.NamedQueryContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_ctes

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCtes" ):
                return visitor.visitCtes(self)
            else:
                return visitor.visitChildren(self)




    def ctes(self):

        localctx = fugue_sqlParser.CtesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_ctes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2172
            self.match(fugue_sqlParser.WITH)
            self.state = 2173
            self.namedQuery()
            self.state = 2178
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==fugue_sqlParser.T__0:
                self.state = 2174
                self.match(fugue_sqlParser.T__0)
                self.state = 2175
                self.namedQuery()
                self.state = 2180
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # ErrorCapturingIdentifierContext
            self.columnAliases = None # IdentifierListContext

        def query(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryContext,0)


        def errorCapturingIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.ErrorCapturingIdentifierContext,0)


        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)

        def identifierList(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierListContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_namedQuery

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamedQuery" ):
                return visitor.visitNamedQuery(self)
            else:
                return visitor.visitChildren(self)




    def namedQuery(self):

        localctx = fugue_sqlParser.NamedQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_namedQuery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2181
            localctx.name = self.errorCapturingIdentifier()
            self.state = 2183
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,269,self._ctx)
            if la_ == 1:
                self.state = 2182
                localctx.columnAliases = self.identifierList()


            self.state = 2186
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==fugue_sqlParser.AS:
                self.state = 2185
                self.match(fugue_sqlParser.AS)


            self.state = 2188
            self.match(fugue_sqlParser.T__2)
            self.state = 2189
            self.query()
            self.state = 2190
            self.match(fugue_sqlParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableProviderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(fugue_sqlParser.USING, 0)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_tableProvider

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableProvider" ):
                return visitor.visitTableProvider(self)
            else:
                return visitor.visitChildren(self)




    def tableProvider(self):

        localctx = fugue_sqlParser.TableProviderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_tableProvider)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2192
            self.match(fugue_sqlParser.USING)
            self.state = 2193
            self.multipartIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateTableClausesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.options = None # TablePropertyListContext
            self.partitioning = None # TransformListContext
            self.tableProps = None # TablePropertyListContext

        def bucketSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.BucketSpecContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.BucketSpecContext,i)


        def locationSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.LocationSpecContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.LocationSpecContext,i)


        def commentSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.CommentSpecContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.CommentSpecContext,i)


        def OPTIONS(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.OPTIONS)
            else:
                return self.getToken(fugue_sqlParser.OPTIONS, i)

        def PARTITIONED(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.PARTITIONED)
            else:
                return self.getToken(fugue_sqlParser.PARTITIONED, i)

        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.BY)
            else:
                return self.getToken(fugue_sqlParser.BY, i)

        def TBLPROPERTIES(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.TBLPROPERTIES)
            else:
                return self.getToken(fugue_sqlParser.TBLPROPERTIES, i)

        def tablePropertyList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.TablePropertyListContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.TablePropertyListContext,i)


        def transformList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.TransformListContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.TransformListContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_createTableClauses

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateTableClauses" ):
                return visitor.visitCreateTableClauses(self)
            else:
                return visitor.visitChildren(self)




    def createTableClauses(self):

        localctx = fugue_sqlParser.CreateTableClausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_createTableClauses)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2207
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==fugue_sqlParser.CLUSTERED or _la==fugue_sqlParser.COMMENT or ((((_la - 179)) & ~0x3f) == 0 and ((1 << (_la - 179)) & ((1 << (fugue_sqlParser.LOCATION - 179)) | (1 << (fugue_sqlParser.OPTIONS - 179)) | (1 << (fugue_sqlParser.PARTITIONED - 179)))) != 0) or _la==fugue_sqlParser.TBLPROPERTIES:
                self.state = 2205
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [fugue_sqlParser.OPTIONS]:
                    self.state = 2195
                    self.match(fugue_sqlParser.OPTIONS)
                    self.state = 2196
                    localctx.options = self.tablePropertyList()
                    pass
                elif token in [fugue_sqlParser.PARTITIONED]:
                    self.state = 2197
                    self.match(fugue_sqlParser.PARTITIONED)
                    self.state = 2198
                    self.match(fugue_sqlParser.BY)
                    self.state = 2199
                    localctx.partitioning = self.transformList()
                    pass
                elif token in [fugue_sqlParser.CLUSTERED]:
                    self.state = 2200
                    self.bucketSpec()
                    pass
                elif token in [fugue_sqlParser.LOCATION]:
                    self.state = 2201
                    self.locationSpec()
                    pass
                elif token in [fugue_sqlParser.COMMENT]:
                    self.state = 2202
                    self.commentSpec()
                    pass
                elif token in [fugue_sqlParser.TBLPROPERTIES]:
                    self.state = 2203
                    self.match(fugue_sqlParser.TBLPROPERTIES)
                    self.state = 2204
                    localctx.tableProps = self.tablePropertyList()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2209
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TablePropertyListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableProperty(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.TablePropertyContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.TablePropertyContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_tablePropertyList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTablePropertyList" ):
                return visitor.visitTablePropertyList(self)
            else:
                return visitor.visitChildren(self)




    def tablePropertyList(self):

        localctx = fugue_sqlParser.TablePropertyListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_tablePropertyList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2210
            self.match(fugue_sqlParser.T__2)
            self.state = 2211
            self.tableProperty()
            self.state = 2216
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==fugue_sqlParser.T__0:
                self.state = 2212
                self.match(fugue_sqlParser.T__0)
                self.state = 2213
                self.tableProperty()
                self.state = 2218
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2219
            self.match(fugue_sqlParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TablePropertyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.key = None # TablePropertyKeyContext
            self.value = None # TablePropertyValueContext

        def tablePropertyKey(self):
            return self.getTypedRuleContext(fugue_sqlParser.TablePropertyKeyContext,0)


        def tablePropertyValue(self):
            return self.getTypedRuleContext(fugue_sqlParser.TablePropertyValueContext,0)


        def EQUAL(self):
            return self.getToken(fugue_sqlParser.EQUAL, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_tableProperty

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableProperty" ):
                return visitor.visitTableProperty(self)
            else:
                return visitor.visitChildren(self)




    def tableProperty(self):

        localctx = fugue_sqlParser.TablePropertyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_tableProperty)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2221
            localctx.key = self.tablePropertyKey()
            self.state = 2226
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==fugue_sqlParser.FALSE or ((((_la - 282)) & ~0x3f) == 0 and ((1 << (_la - 282)) & ((1 << (fugue_sqlParser.TRUE - 282)) | (1 << (fugue_sqlParser.EQUAL - 282)) | (1 << (fugue_sqlParser.STRING - 282)) | (1 << (fugue_sqlParser.INTEGER_VALUE - 282)) | (1 << (fugue_sqlParser.DECIMAL_VALUE - 282)))) != 0):
                self.state = 2223
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.EQUAL:
                    self.state = 2222
                    self.match(fugue_sqlParser.EQUAL)


                self.state = 2225
                localctx.value = self.tablePropertyValue()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TablePropertyKeyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,i)


        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_tablePropertyKey

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTablePropertyKey" ):
                return visitor.visitTablePropertyKey(self)
            else:
                return visitor.visitChildren(self)




    def tablePropertyKey(self):

        localctx = fugue_sqlParser.TablePropertyKeyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_tablePropertyKey)
        self._la = 0 # Token type
        try:
            self.state = 2237
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [fugue_sqlParser.ADD, fugue_sqlParser.AFTER, fugue_sqlParser.ALL, fugue_sqlParser.ALTER, fugue_sqlParser.ANALYZE, fugue_sqlParser.AND, fugue_sqlParser.ANTI, fugue_sqlParser.ANY, fugue_sqlParser.ARCHIVE, fugue_sqlParser.ARRAY, fugue_sqlParser.AS, fugue_sqlParser.ASC, fugue_sqlParser.AT, fugue_sqlParser.AUTHORIZATION, fugue_sqlParser.BETWEEN, fugue_sqlParser.BOTH, fugue_sqlParser.BUCKET, fugue_sqlParser.BUCKETS, fugue_sqlParser.BY, fugue_sqlParser.CACHE, fugue_sqlParser.CASCADE, fugue_sqlParser.CASE, fugue_sqlParser.CAST, fugue_sqlParser.CHANGE, fugue_sqlParser.CHECK, fugue_sqlParser.CLEAR, fugue_sqlParser.CLUSTER, fugue_sqlParser.CLUSTERED, fugue_sqlParser.CODEGEN, fugue_sqlParser.COLLATE, fugue_sqlParser.COLLECTION, fugue_sqlParser.COLUMN, fugue_sqlParser.COLUMNS, fugue_sqlParser.COMMENT, fugue_sqlParser.COMMIT, fugue_sqlParser.COMPACT, fugue_sqlParser.COMPACTIONS, fugue_sqlParser.COMPUTE, fugue_sqlParser.CONCATENATE, fugue_sqlParser.CONSTRAINT, fugue_sqlParser.COST, fugue_sqlParser.CREATE, fugue_sqlParser.CROSS, fugue_sqlParser.CUBE, fugue_sqlParser.CURRENT, fugue_sqlParser.CURRENT_DATE, fugue_sqlParser.CURRENT_TIME, fugue_sqlParser.CURRENT_TIMESTAMP, fugue_sqlParser.CURRENT_USER, fugue_sqlParser.DATA, fugue_sqlParser.DATABASE, fugue_sqlParser.DATABASES, fugue_sqlParser.DAY, fugue_sqlParser.DBPROPERTIES, fugue_sqlParser.DEFINED, fugue_sqlParser.DELETE, fugue_sqlParser.DELIMITED, fugue_sqlParser.DESC, fugue_sqlParser.DESCRIBE, fugue_sqlParser.DFS, fugue_sqlParser.DIRECTORIES, fugue_sqlParser.DIRECTORY, fugue_sqlParser.DISTINCT, fugue_sqlParser.DISTRIBUTE, fugue_sqlParser.DROP, fugue_sqlParser.ELSE, fugue_sqlParser.END, fugue_sqlParser.ESCAPE, fugue_sqlParser.ESCAPED, fugue_sqlParser.EXCEPT, fugue_sqlParser.EXCHANGE, fugue_sqlParser.EXISTS, fugue_sqlParser.EXPLAIN, fugue_sqlParser.EXPORT, fugue_sqlParser.EXTENDED, fugue_sqlParser.EXTERNAL, fugue_sqlParser.EXTRACT, fugue_sqlParser.FALSE, fugue_sqlParser.FETCH, fugue_sqlParser.FIELDS, fugue_sqlParser.FILTER, fugue_sqlParser.FILEFORMAT, fugue_sqlParser.FIRST, fugue_sqlParser.FOLLOWING, fugue_sqlParser.FOR, fugue_sqlParser.FOREIGN, fugue_sqlParser.FORMAT, fugue_sqlParser.FORMATTED, fugue_sqlParser.FROM, fugue_sqlParser.FULL, fugue_sqlParser.FUNCTION, fugue_sqlParser.FUNCTIONS, fugue_sqlParser.GLOBAL, fugue_sqlParser.GRANT, fugue_sqlParser.GROUP, fugue_sqlParser.GROUPING, fugue_sqlParser.HAVING, fugue_sqlParser.HOUR, fugue_sqlParser.IF, fugue_sqlParser.IGNORE, fugue_sqlParser.IMPORT, fugue_sqlParser.IN, fugue_sqlParser.INDEX, fugue_sqlParser.INDEXES, fugue_sqlParser.INNER, fugue_sqlParser.INPATH, fugue_sqlParser.INPUTFORMAT, fugue_sqlParser.INSERT, fugue_sqlParser.INTERSECT, fugue_sqlParser.INTERVAL, fugue_sqlParser.INTO, fugue_sqlParser.IS, fugue_sqlParser.ITEMS, fugue_sqlParser.JOIN, fugue_sqlParser.KEYS, fugue_sqlParser.LAST, fugue_sqlParser.LATERAL, fugue_sqlParser.LAZY, fugue_sqlParser.LEADING, fugue_sqlParser.LEFT, fugue_sqlParser.LIKE, fugue_sqlParser.LIMIT, fugue_sqlParser.LINES, fugue_sqlParser.LIST, fugue_sqlParser.LOAD, fugue_sqlParser.LOCAL, fugue_sqlParser.LOCATION, fugue_sqlParser.LOCK, fugue_sqlParser.LOCKS, fugue_sqlParser.LOGICAL, fugue_sqlParser.MACRO, fugue_sqlParser.MAP, fugue_sqlParser.MATCHED, fugue_sqlParser.MERGE, fugue_sqlParser.MINUTE, fugue_sqlParser.MONTH, fugue_sqlParser.MSCK, fugue_sqlParser.NAMESPACE, fugue_sqlParser.NAMESPACES, fugue_sqlParser.NATURAL, fugue_sqlParser.NO, fugue_sqlParser.NOT, fugue_sqlParser.THENULL, fugue_sqlParser.THENULLS, fugue_sqlParser.OF, fugue_sqlParser.ON, fugue_sqlParser.ONLY, fugue_sqlParser.OPTION, fugue_sqlParser.OPTIONS, fugue_sqlParser.OR, fugue_sqlParser.ORDER, fugue_sqlParser.OUT, fugue_sqlParser.OUTER, fugue_sqlParser.OUTPUTFORMAT, fugue_sqlParser.OVER, fugue_sqlParser.OVERLAPS, fugue_sqlParser.OVERLAY, fugue_sqlParser.OVERWRITE, fugue_sqlParser.PARTITION, fugue_sqlParser.PARTITIONED, fugue_sqlParser.PARTITIONS, fugue_sqlParser.PERCENTLIT, fugue_sqlParser.PIVOT, fugue_sqlParser.PLACING, fugue_sqlParser.POSITION, fugue_sqlParser.PRECEDING, fugue_sqlParser.PRIMARY, fugue_sqlParser.PRINCIPALS, fugue_sqlParser.PROPERTIES, fugue_sqlParser.PURGE, fugue_sqlParser.QUERY, fugue_sqlParser.RANGE, fugue_sqlParser.RECORDREADER, fugue_sqlParser.RECORDWRITER, fugue_sqlParser.RECOVER, fugue_sqlParser.REDUCE, fugue_sqlParser.REFERENCES, fugue_sqlParser.REFRESH, fugue_sqlParser.RENAME, fugue_sqlParser.REPAIR, fugue_sqlParser.REPLACE, fugue_sqlParser.RESET, fugue_sqlParser.RESTRICT, fugue_sqlParser.REVOKE, fugue_sqlParser.RIGHT, fugue_sqlParser.RLIKE, fugue_sqlParser.ROLE, fugue_sqlParser.ROLES, fugue_sqlParser.ROLLBACK, fugue_sqlParser.ROLLUP, fugue_sqlParser.ROW, fugue_sqlParser.ROWS, fugue_sqlParser.SCHEMA, fugue_sqlParser.SECOND, fugue_sqlParser.SELECT, fugue_sqlParser.SEMI, fugue_sqlParser.SEPARATED, fugue_sqlParser.SERDE, fugue_sqlParser.SERDEPROPERTIES, fugue_sqlParser.SESSION_USER, fugue_sqlParser.SET, fugue_sqlParser.SETMINUS, fugue_sqlParser.SETS, fugue_sqlParser.SHOW, fugue_sqlParser.SKEWED, fugue_sqlParser.SOME, fugue_sqlParser.SORT, fugue_sqlParser.SORTED, fugue_sqlParser.START, fugue_sqlParser.STATISTICS, fugue_sqlParser.STORED, fugue_sqlParser.STRATIFY, fugue_sqlParser.STRUCT, fugue_sqlParser.SUBSTR, fugue_sqlParser.SUBSTRING, fugue_sqlParser.TABLE, fugue_sqlParser.TABLES, fugue_sqlParser.TABLESAMPLE, fugue_sqlParser.TBLPROPERTIES, fugue_sqlParser.TEMPORARY, fugue_sqlParser.TERMINATED, fugue_sqlParser.THEN, fugue_sqlParser.TO, fugue_sqlParser.TOUCH, fugue_sqlParser.TRAILING, fugue_sqlParser.TRANSACTION, fugue_sqlParser.TRANSACTIONS, fugue_sqlParser.TRANSFORM, fugue_sqlParser.TRIM, fugue_sqlParser.TRUE, fugue_sqlParser.TRUNCATE, fugue_sqlParser.TYPE, fugue_sqlParser.UNARCHIVE, fugue_sqlParser.UNBOUNDED, fugue_sqlParser.UNCACHE, fugue_sqlParser.UNION, fugue_sqlParser.UNIQUE, fugue_sqlParser.UNKNOWN, fugue_sqlParser.UNLOCK, fugue_sqlParser.UNSET, fugue_sqlParser.UPDATE, fugue_sqlParser.USE, fugue_sqlParser.USER, fugue_sqlParser.USING, fugue_sqlParser.VALUES, fugue_sqlParser.VIEW, fugue_sqlParser.VIEWS, fugue_sqlParser.WHEN, fugue_sqlParser.WHERE, fugue_sqlParser.WINDOW, fugue_sqlParser.WITH, fugue_sqlParser.YEAR, fugue_sqlParser.DIV, fugue_sqlParser.IDENTIFIER, fugue_sqlParser.BACKQUOTED_IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2228
                self.identifier()
                self.state = 2233
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==fugue_sqlParser.T__6:
                    self.state = 2229
                    self.match(fugue_sqlParser.T__6)
                    self.state = 2230
                    self.identifier()
                    self.state = 2235
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [fugue_sqlParser.STRING]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2236
                self.match(fugue_sqlParser.STRING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TablePropertyValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGER_VALUE(self):
            return self.getToken(fugue_sqlParser.INTEGER_VALUE, 0)

        def DECIMAL_VALUE(self):
            return self.getToken(fugue_sqlParser.DECIMAL_VALUE, 0)

        def booleanValue(self):
            return self.getTypedRuleContext(fugue_sqlParser.BooleanValueContext,0)


        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_tablePropertyValue

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTablePropertyValue" ):
                return visitor.visitTablePropertyValue(self)
            else:
                return visitor.visitChildren(self)




    def tablePropertyValue(self):

        localctx = fugue_sqlParser.TablePropertyValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_tablePropertyValue)
        try:
            self.state = 2243
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [fugue_sqlParser.INTEGER_VALUE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2239
                self.match(fugue_sqlParser.INTEGER_VALUE)
                pass
            elif token in [fugue_sqlParser.DECIMAL_VALUE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2240
                self.match(fugue_sqlParser.DECIMAL_VALUE)
                pass
            elif token in [fugue_sqlParser.FALSE, fugue_sqlParser.TRUE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2241
                self.booleanValue()
                pass
            elif token in [fugue_sqlParser.STRING]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2242
                self.match(fugue_sqlParser.STRING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ConstantContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ConstantContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_constantList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstantList" ):
                return visitor.visitConstantList(self)
            else:
                return visitor.visitChildren(self)




    def constantList(self):

        localctx = fugue_sqlParser.ConstantListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_constantList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2245
            self.match(fugue_sqlParser.T__2)
            self.state = 2246
            self.constant()
            self.state = 2251
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==fugue_sqlParser.T__0:
                self.state = 2247
                self.match(fugue_sqlParser.T__0)
                self.state = 2248
                self.constant()
                self.state = 2253
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2254
            self.match(fugue_sqlParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NestedConstantListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constantList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ConstantListContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ConstantListContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_nestedConstantList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNestedConstantList" ):
                return visitor.visitNestedConstantList(self)
            else:
                return visitor.visitChildren(self)




    def nestedConstantList(self):

        localctx = fugue_sqlParser.NestedConstantListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_nestedConstantList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2256
            self.match(fugue_sqlParser.T__2)
            self.state = 2257
            self.constantList()
            self.state = 2262
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==fugue_sqlParser.T__0:
                self.state = 2258
                self.match(fugue_sqlParser.T__0)
                self.state = 2259
                self.constantList()
                self.state = 2264
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2265
            self.match(fugue_sqlParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateFileFormatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STORED(self):
            return self.getToken(fugue_sqlParser.STORED, 0)

        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)

        def fileFormat(self):
            return self.getTypedRuleContext(fugue_sqlParser.FileFormatContext,0)


        def BY(self):
            return self.getToken(fugue_sqlParser.BY, 0)

        def storageHandler(self):
            return self.getTypedRuleContext(fugue_sqlParser.StorageHandlerContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_createFileFormat

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateFileFormat" ):
                return visitor.visitCreateFileFormat(self)
            else:
                return visitor.visitChildren(self)




    def createFileFormat(self):

        localctx = fugue_sqlParser.CreateFileFormatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_createFileFormat)
        try:
            self.state = 2273
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,281,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2267
                self.match(fugue_sqlParser.STORED)
                self.state = 2268
                self.match(fugue_sqlParser.AS)
                self.state = 2269
                self.fileFormat()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2270
                self.match(fugue_sqlParser.STORED)
                self.state = 2271
                self.match(fugue_sqlParser.BY)
                self.state = 2272
                self.storageHandler()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FileFormatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fileFormat

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TableFileFormatContext(FileFormatContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.FileFormatContext
            super().__init__(parser)
            self.inFmt = None # Token
            self.outFmt = None # Token
            self.copyFrom(ctx)

        def INPUTFORMAT(self):
            return self.getToken(fugue_sqlParser.INPUTFORMAT, 0)
        def OUTPUTFORMAT(self):
            return self.getToken(fugue_sqlParser.OUTPUTFORMAT, 0)
        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.STRING)
            else:
                return self.getToken(fugue_sqlParser.STRING, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableFileFormat" ):
                return visitor.visitTableFileFormat(self)
            else:
                return visitor.visitChildren(self)


    class GenericFileFormatContext(FileFormatContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.FileFormatContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGenericFileFormat" ):
                return visitor.visitGenericFileFormat(self)
            else:
                return visitor.visitChildren(self)



    def fileFormat(self):

        localctx = fugue_sqlParser.FileFormatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_fileFormat)
        try:
            self.state = 2280
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,282,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.TableFileFormatContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2275
                self.match(fugue_sqlParser.INPUTFORMAT)
                self.state = 2276
                localctx.inFmt = self.match(fugue_sqlParser.STRING)
                self.state = 2277
                self.match(fugue_sqlParser.OUTPUTFORMAT)
                self.state = 2278
                localctx.outFmt = self.match(fugue_sqlParser.STRING)
                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.GenericFileFormatContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2279
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StorageHandlerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)

        def WITH(self):
            return self.getToken(fugue_sqlParser.WITH, 0)

        def SERDEPROPERTIES(self):
            return self.getToken(fugue_sqlParser.SERDEPROPERTIES, 0)

        def tablePropertyList(self):
            return self.getTypedRuleContext(fugue_sqlParser.TablePropertyListContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_storageHandler

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStorageHandler" ):
                return visitor.visitStorageHandler(self)
            else:
                return visitor.visitChildren(self)




    def storageHandler(self):

        localctx = fugue_sqlParser.StorageHandlerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_storageHandler)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2282
            self.match(fugue_sqlParser.STRING)
            self.state = 2286
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,283,self._ctx)
            if la_ == 1:
                self.state = 2283
                self.match(fugue_sqlParser.WITH)
                self.state = 2284
                self.match(fugue_sqlParser.SERDEPROPERTIES)
                self.state = 2285
                self.tablePropertyList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResourceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)


        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_resource

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitResource" ):
                return visitor.visitResource(self)
            else:
                return visitor.visitChildren(self)




    def resource(self):

        localctx = fugue_sqlParser.ResourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_resource)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2288
            self.identifier()
            self.state = 2289
            self.match(fugue_sqlParser.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DmlStatementNoWithContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_dmlStatementNoWith

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class DeleteFromTableContext(DmlStatementNoWithContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.DmlStatementNoWithContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DELETE(self):
            return self.getToken(fugue_sqlParser.DELETE, 0)
        def FROM(self):
            return self.getToken(fugue_sqlParser.FROM, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def tableAlias(self):
            return self.getTypedRuleContext(fugue_sqlParser.TableAliasContext,0)

        def whereClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.WhereClauseContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeleteFromTable" ):
                return visitor.visitDeleteFromTable(self)
            else:
                return visitor.visitChildren(self)


    class SingleInsertQueryContext(DmlStatementNoWithContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.DmlStatementNoWithContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def insertInto(self):
            return self.getTypedRuleContext(fugue_sqlParser.InsertIntoContext,0)

        def queryTerm(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryTermContext,0)

        def queryOrganization(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryOrganizationContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleInsertQuery" ):
                return visitor.visitSingleInsertQuery(self)
            else:
                return visitor.visitChildren(self)


    class MultiInsertQueryContext(DmlStatementNoWithContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.DmlStatementNoWithContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def fromClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.FromClauseContext,0)

        def multiInsertQueryBody(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.MultiInsertQueryBodyContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.MultiInsertQueryBodyContext,i)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiInsertQuery" ):
                return visitor.visitMultiInsertQuery(self)
            else:
                return visitor.visitChildren(self)


    class UpdateTableContext(DmlStatementNoWithContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.DmlStatementNoWithContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def UPDATE(self):
            return self.getToken(fugue_sqlParser.UPDATE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def tableAlias(self):
            return self.getTypedRuleContext(fugue_sqlParser.TableAliasContext,0)

        def setClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.SetClauseContext,0)

        def whereClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.WhereClauseContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUpdateTable" ):
                return visitor.visitUpdateTable(self)
            else:
                return visitor.visitChildren(self)


    class MergeIntoTableContext(DmlStatementNoWithContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.DmlStatementNoWithContext
            super().__init__(parser)
            self.target = None # MultipartIdentifierContext
            self.targetAlias = None # TableAliasContext
            self.source = None # MultipartIdentifierContext
            self.sourceQuery = None # QueryContext
            self.sourceAlias = None # TableAliasContext
            self.mergeCondition = None # BooleanExpressionContext
            self.copyFrom(ctx)

        def MERGE(self):
            return self.getToken(fugue_sqlParser.MERGE, 0)
        def INTO(self):
            return self.getToken(fugue_sqlParser.INTO, 0)
        def USING(self):
            return self.getToken(fugue_sqlParser.USING, 0)
        def ON(self):
            return self.getToken(fugue_sqlParser.ON, 0)
        def multipartIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.MultipartIdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,i)

        def tableAlias(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.TableAliasContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.TableAliasContext,i)

        def booleanExpression(self):
            return self.getTypedRuleContext(fugue_sqlParser.BooleanExpressionContext,0)

        def query(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryContext,0)

        def matchedClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.MatchedClauseContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.MatchedClauseContext,i)

        def notMatchedClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.NotMatchedClauseContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.NotMatchedClauseContext,i)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMergeIntoTable" ):
                return visitor.visitMergeIntoTable(self)
            else:
                return visitor.visitChildren(self)



    def dmlStatementNoWith(self):

        localctx = fugue_sqlParser.DmlStatementNoWithContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_dmlStatementNoWith)
        self._la = 0 # Token type
        try:
            self.state = 2342
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [fugue_sqlParser.INSERT]:
                localctx = fugue_sqlParser.SingleInsertQueryContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2291
                self.insertInto()
                self.state = 2292
                self.queryTerm(0)
                self.state = 2293
                self.queryOrganization()
                pass
            elif token in [fugue_sqlParser.FROM]:
                localctx = fugue_sqlParser.MultiInsertQueryContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2295
                self.fromClause()
                self.state = 2297 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2296
                    self.multiInsertQueryBody()
                    self.state = 2299 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==fugue_sqlParser.INSERT):
                        break

                pass
            elif token in [fugue_sqlParser.DELETE]:
                localctx = fugue_sqlParser.DeleteFromTableContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2301
                self.match(fugue_sqlParser.DELETE)
                self.state = 2302
                self.match(fugue_sqlParser.FROM)
                self.state = 2303
                self.multipartIdentifier()
                self.state = 2304
                self.tableAlias()
                self.state = 2306
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.WHERE:
                    self.state = 2305
                    self.whereClause()


                pass
            elif token in [fugue_sqlParser.UPDATE]:
                localctx = fugue_sqlParser.UpdateTableContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2308
                self.match(fugue_sqlParser.UPDATE)
                self.state = 2309
                self.multipartIdentifier()
                self.state = 2310
                self.tableAlias()
                self.state = 2311
                self.setClause()
                self.state = 2313
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.WHERE:
                    self.state = 2312
                    self.whereClause()


                pass
            elif token in [fugue_sqlParser.MERGE]:
                localctx = fugue_sqlParser.MergeIntoTableContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2315
                self.match(fugue_sqlParser.MERGE)
                self.state = 2316
                self.match(fugue_sqlParser.INTO)
                self.state = 2317
                localctx.target = self.multipartIdentifier()
                self.state = 2318
                localctx.targetAlias = self.tableAlias()
                self.state = 2319
                self.match(fugue_sqlParser.USING)
                self.state = 2325
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [fugue_sqlParser.ADD, fugue_sqlParser.AFTER, fugue_sqlParser.ALL, fugue_sqlParser.ALTER, fugue_sqlParser.ANALYZE, fugue_sqlParser.AND, fugue_sqlParser.ANTI, fugue_sqlParser.ANY, fugue_sqlParser.ARCHIVE, fugue_sqlParser.ARRAY, fugue_sqlParser.AS, fugue_sqlParser.ASC, fugue_sqlParser.AT, fugue_sqlParser.AUTHORIZATION, fugue_sqlParser.BETWEEN, fugue_sqlParser.BOTH, fugue_sqlParser.BUCKET, fugue_sqlParser.BUCKETS, fugue_sqlParser.BY, fugue_sqlParser.CACHE, fugue_sqlParser.CASCADE, fugue_sqlParser.CASE, fugue_sqlParser.CAST, fugue_sqlParser.CHANGE, fugue_sqlParser.CHECK, fugue_sqlParser.CLEAR, fugue_sqlParser.CLUSTER, fugue_sqlParser.CLUSTERED, fugue_sqlParser.CODEGEN, fugue_sqlParser.COLLATE, fugue_sqlParser.COLLECTION, fugue_sqlParser.COLUMN, fugue_sqlParser.COLUMNS, fugue_sqlParser.COMMENT, fugue_sqlParser.COMMIT, fugue_sqlParser.COMPACT, fugue_sqlParser.COMPACTIONS, fugue_sqlParser.COMPUTE, fugue_sqlParser.CONCATENATE, fugue_sqlParser.CONSTRAINT, fugue_sqlParser.COST, fugue_sqlParser.CREATE, fugue_sqlParser.CROSS, fugue_sqlParser.CUBE, fugue_sqlParser.CURRENT, fugue_sqlParser.CURRENT_DATE, fugue_sqlParser.CURRENT_TIME, fugue_sqlParser.CURRENT_TIMESTAMP, fugue_sqlParser.CURRENT_USER, fugue_sqlParser.DATA, fugue_sqlParser.DATABASE, fugue_sqlParser.DATABASES, fugue_sqlParser.DAY, fugue_sqlParser.DBPROPERTIES, fugue_sqlParser.DEFINED, fugue_sqlParser.DELETE, fugue_sqlParser.DELIMITED, fugue_sqlParser.DESC, fugue_sqlParser.DESCRIBE, fugue_sqlParser.DFS, fugue_sqlParser.DIRECTORIES, fugue_sqlParser.DIRECTORY, fugue_sqlParser.DISTINCT, fugue_sqlParser.DISTRIBUTE, fugue_sqlParser.DROP, fugue_sqlParser.ELSE, fugue_sqlParser.END, fugue_sqlParser.ESCAPE, fugue_sqlParser.ESCAPED, fugue_sqlParser.EXCEPT, fugue_sqlParser.EXCHANGE, fugue_sqlParser.EXISTS, fugue_sqlParser.EXPLAIN, fugue_sqlParser.EXPORT, fugue_sqlParser.EXTENDED, fugue_sqlParser.EXTERNAL, fugue_sqlParser.EXTRACT, fugue_sqlParser.FALSE, fugue_sqlParser.FETCH, fugue_sqlParser.FIELDS, fugue_sqlParser.FILTER, fugue_sqlParser.FILEFORMAT, fugue_sqlParser.FIRST, fugue_sqlParser.FOLLOWING, fugue_sqlParser.FOR, fugue_sqlParser.FOREIGN, fugue_sqlParser.FORMAT, fugue_sqlParser.FORMATTED, fugue_sqlParser.FROM, fugue_sqlParser.FULL, fugue_sqlParser.FUNCTION, fugue_sqlParser.FUNCTIONS, fugue_sqlParser.GLOBAL, fugue_sqlParser.GRANT, fugue_sqlParser.GROUP, fugue_sqlParser.GROUPING, fugue_sqlParser.HAVING, fugue_sqlParser.HOUR, fugue_sqlParser.IF, fugue_sqlParser.IGNORE, fugue_sqlParser.IMPORT, fugue_sqlParser.IN, fugue_sqlParser.INDEX, fugue_sqlParser.INDEXES, fugue_sqlParser.INNER, fugue_sqlParser.INPATH, fugue_sqlParser.INPUTFORMAT, fugue_sqlParser.INSERT, fugue_sqlParser.INTERSECT, fugue_sqlParser.INTERVAL, fugue_sqlParser.INTO, fugue_sqlParser.IS, fugue_sqlParser.ITEMS, fugue_sqlParser.JOIN, fugue_sqlParser.KEYS, fugue_sqlParser.LAST, fugue_sqlParser.LATERAL, fugue_sqlParser.LAZY, fugue_sqlParser.LEADING, fugue_sqlParser.LEFT, fugue_sqlParser.LIKE, fugue_sqlParser.LIMIT, fugue_sqlParser.LINES, fugue_sqlParser.LIST, fugue_sqlParser.LOAD, fugue_sqlParser.LOCAL, fugue_sqlParser.LOCATION, fugue_sqlParser.LOCK, fugue_sqlParser.LOCKS, fugue_sqlParser.LOGICAL, fugue_sqlParser.MACRO, fugue_sqlParser.MAP, fugue_sqlParser.MATCHED, fugue_sqlParser.MERGE, fugue_sqlParser.MINUTE, fugue_sqlParser.MONTH, fugue_sqlParser.MSCK, fugue_sqlParser.NAMESPACE, fugue_sqlParser.NAMESPACES, fugue_sqlParser.NATURAL, fugue_sqlParser.NO, fugue_sqlParser.NOT, fugue_sqlParser.THENULL, fugue_sqlParser.THENULLS, fugue_sqlParser.OF, fugue_sqlParser.ON, fugue_sqlParser.ONLY, fugue_sqlParser.OPTION, fugue_sqlParser.OPTIONS, fugue_sqlParser.OR, fugue_sqlParser.ORDER, fugue_sqlParser.OUT, fugue_sqlParser.OUTER, fugue_sqlParser.OUTPUTFORMAT, fugue_sqlParser.OVER, fugue_sqlParser.OVERLAPS, fugue_sqlParser.OVERLAY, fugue_sqlParser.OVERWRITE, fugue_sqlParser.PARTITION, fugue_sqlParser.PARTITIONED, fugue_sqlParser.PARTITIONS, fugue_sqlParser.PERCENTLIT, fugue_sqlParser.PIVOT, fugue_sqlParser.PLACING, fugue_sqlParser.POSITION, fugue_sqlParser.PRECEDING, fugue_sqlParser.PRIMARY, fugue_sqlParser.PRINCIPALS, fugue_sqlParser.PROPERTIES, fugue_sqlParser.PURGE, fugue_sqlParser.QUERY, fugue_sqlParser.RANGE, fugue_sqlParser.RECORDREADER, fugue_sqlParser.RECORDWRITER, fugue_sqlParser.RECOVER, fugue_sqlParser.REDUCE, fugue_sqlParser.REFERENCES, fugue_sqlParser.REFRESH, fugue_sqlParser.RENAME, fugue_sqlParser.REPAIR, fugue_sqlParser.REPLACE, fugue_sqlParser.RESET, fugue_sqlParser.RESTRICT, fugue_sqlParser.REVOKE, fugue_sqlParser.RIGHT, fugue_sqlParser.RLIKE, fugue_sqlParser.ROLE, fugue_sqlParser.ROLES, fugue_sqlParser.ROLLBACK, fugue_sqlParser.ROLLUP, fugue_sqlParser.ROW, fugue_sqlParser.ROWS, fugue_sqlParser.SCHEMA, fugue_sqlParser.SECOND, fugue_sqlParser.SELECT, fugue_sqlParser.SEMI, fugue_sqlParser.SEPARATED, fugue_sqlParser.SERDE, fugue_sqlParser.SERDEPROPERTIES, fugue_sqlParser.SESSION_USER, fugue_sqlParser.SET, fugue_sqlParser.SETMINUS, fugue_sqlParser.SETS, fugue_sqlParser.SHOW, fugue_sqlParser.SKEWED, fugue_sqlParser.SOME, fugue_sqlParser.SORT, fugue_sqlParser.SORTED, fugue_sqlParser.START, fugue_sqlParser.STATISTICS, fugue_sqlParser.STORED, fugue_sqlParser.STRATIFY, fugue_sqlParser.STRUCT, fugue_sqlParser.SUBSTR, fugue_sqlParser.SUBSTRING, fugue_sqlParser.TABLE, fugue_sqlParser.TABLES, fugue_sqlParser.TABLESAMPLE, fugue_sqlParser.TBLPROPERTIES, fugue_sqlParser.TEMPORARY, fugue_sqlParser.TERMINATED, fugue_sqlParser.THEN, fugue_sqlParser.TO, fugue_sqlParser.TOUCH, fugue_sqlParser.TRAILING, fugue_sqlParser.TRANSACTION, fugue_sqlParser.TRANSACTIONS, fugue_sqlParser.TRANSFORM, fugue_sqlParser.TRIM, fugue_sqlParser.TRUE, fugue_sqlParser.TRUNCATE, fugue_sqlParser.TYPE, fugue_sqlParser.UNARCHIVE, fugue_sqlParser.UNBOUNDED, fugue_sqlParser.UNCACHE, fugue_sqlParser.UNION, fugue_sqlParser.UNIQUE, fugue_sqlParser.UNKNOWN, fugue_sqlParser.UNLOCK, fugue_sqlParser.UNSET, fugue_sqlParser.UPDATE, fugue_sqlParser.USE, fugue_sqlParser.USER, fugue_sqlParser.USING, fugue_sqlParser.VALUES, fugue_sqlParser.VIEW, fugue_sqlParser.VIEWS, fugue_sqlParser.WHEN, fugue_sqlParser.WHERE, fugue_sqlParser.WINDOW, fugue_sqlParser.WITH, fugue_sqlParser.YEAR, fugue_sqlParser.DIV, fugue_sqlParser.IDENTIFIER, fugue_sqlParser.BACKQUOTED_IDENTIFIER]:
                    self.state = 2320
                    localctx.source = self.multipartIdentifier()
                    pass
                elif token in [fugue_sqlParser.T__2]:
                    self.state = 2321
                    self.match(fugue_sqlParser.T__2)
                    self.state = 2322
                    localctx.sourceQuery = self.query()
                    self.state = 2323
                    self.match(fugue_sqlParser.T__3)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2327
                localctx.sourceAlias = self.tableAlias()
                self.state = 2328
                self.match(fugue_sqlParser.ON)
                self.state = 2329
                localctx.mergeCondition = self.booleanExpression(0)
                self.state = 2333
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,288,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2330
                        self.matchedClause() 
                    self.state = 2335
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,288,self._ctx)

                self.state = 2339
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==fugue_sqlParser.WHEN:
                    self.state = 2336
                    self.notMatchedClause()
                    self.state = 2341
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryOrganizationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._sortItem = None # SortItemContext
            self.order = list() # of SortItemContexts
            self._expression = None # ExpressionContext
            self.clusterBy = list() # of ExpressionContexts
            self.distributeBy = list() # of ExpressionContexts
            self.sort = list() # of SortItemContexts
            self.limit = None # ExpressionContext

        def ORDER(self):
            return self.getToken(fugue_sqlParser.ORDER, 0)

        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.BY)
            else:
                return self.getToken(fugue_sqlParser.BY, i)

        def CLUSTER(self):
            return self.getToken(fugue_sqlParser.CLUSTER, 0)

        def DISTRIBUTE(self):
            return self.getToken(fugue_sqlParser.DISTRIBUTE, 0)

        def SORT(self):
            return self.getToken(fugue_sqlParser.SORT, 0)

        def windowClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.WindowClauseContext,0)


        def LIMIT(self):
            return self.getToken(fugue_sqlParser.LIMIT, 0)

        def sortItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.SortItemContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.SortItemContext,i)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,i)


        def ALL(self):
            return self.getToken(fugue_sqlParser.ALL, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_queryOrganization

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQueryOrganization" ):
                return visitor.visitQueryOrganization(self)
            else:
                return visitor.visitChildren(self)




    def queryOrganization(self):

        localctx = fugue_sqlParser.QueryOrganizationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_queryOrganization)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2354
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,292,self._ctx)
            if la_ == 1:
                self.state = 2344
                self.match(fugue_sqlParser.ORDER)
                self.state = 2345
                self.match(fugue_sqlParser.BY)
                self.state = 2346
                localctx._sortItem = self.sortItem()
                localctx.order.append(localctx._sortItem)
                self.state = 2351
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,291,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2347
                        self.match(fugue_sqlParser.T__0)
                        self.state = 2348
                        localctx._sortItem = self.sortItem()
                        localctx.order.append(localctx._sortItem) 
                    self.state = 2353
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,291,self._ctx)



            self.state = 2366
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,294,self._ctx)
            if la_ == 1:
                self.state = 2356
                self.match(fugue_sqlParser.CLUSTER)
                self.state = 2357
                self.match(fugue_sqlParser.BY)
                self.state = 2358
                localctx._expression = self.expression()
                localctx.clusterBy.append(localctx._expression)
                self.state = 2363
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,293,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2359
                        self.match(fugue_sqlParser.T__0)
                        self.state = 2360
                        localctx._expression = self.expression()
                        localctx.clusterBy.append(localctx._expression) 
                    self.state = 2365
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,293,self._ctx)



            self.state = 2378
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,296,self._ctx)
            if la_ == 1:
                self.state = 2368
                self.match(fugue_sqlParser.DISTRIBUTE)
                self.state = 2369
                self.match(fugue_sqlParser.BY)
                self.state = 2370
                localctx._expression = self.expression()
                localctx.distributeBy.append(localctx._expression)
                self.state = 2375
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,295,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2371
                        self.match(fugue_sqlParser.T__0)
                        self.state = 2372
                        localctx._expression = self.expression()
                        localctx.distributeBy.append(localctx._expression) 
                    self.state = 2377
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,295,self._ctx)



            self.state = 2390
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,298,self._ctx)
            if la_ == 1:
                self.state = 2380
                self.match(fugue_sqlParser.SORT)
                self.state = 2381
                self.match(fugue_sqlParser.BY)
                self.state = 2382
                localctx._sortItem = self.sortItem()
                localctx.sort.append(localctx._sortItem)
                self.state = 2387
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,297,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2383
                        self.match(fugue_sqlParser.T__0)
                        self.state = 2384
                        localctx._sortItem = self.sortItem()
                        localctx.sort.append(localctx._sortItem) 
                    self.state = 2389
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,297,self._ctx)



            self.state = 2393
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,299,self._ctx)
            if la_ == 1:
                self.state = 2392
                self.windowClause()


            self.state = 2400
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,301,self._ctx)
            if la_ == 1:
                self.state = 2395
                self.match(fugue_sqlParser.LIMIT)
                self.state = 2398
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,300,self._ctx)
                if la_ == 1:
                    self.state = 2396
                    self.match(fugue_sqlParser.ALL)
                    pass

                elif la_ == 2:
                    self.state = 2397
                    localctx.limit = self.expression()
                    pass




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiInsertQueryBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def insertInto(self):
            return self.getTypedRuleContext(fugue_sqlParser.InsertIntoContext,0)


        def fromStatementBody(self):
            return self.getTypedRuleContext(fugue_sqlParser.FromStatementBodyContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_multiInsertQueryBody

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiInsertQueryBody" ):
                return visitor.visitMultiInsertQueryBody(self)
            else:
                return visitor.visitChildren(self)




    def multiInsertQueryBody(self):

        localctx = fugue_sqlParser.MultiInsertQueryBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_multiInsertQueryBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2402
            self.insertInto()
            self.state = 2403
            self.fromStatementBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryTermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_queryTerm

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class QueryTermDefaultContext(QueryTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.QueryTermContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def queryPrimary(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryPrimaryContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQueryTermDefault" ):
                return visitor.visitQueryTermDefault(self)
            else:
                return visitor.visitChildren(self)


    class FugueTermContext(QueryTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.QueryTermContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def fugueNestableTaskCollectionNoSelect(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueNestableTaskCollectionNoSelectContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueTerm" ):
                return visitor.visitFugueTerm(self)
            else:
                return visitor.visitChildren(self)


    class SetOperationContext(QueryTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.QueryTermContext
            super().__init__(parser)
            self.left = None # QueryTermContext
            self.theOperator = None # Token
            self.right = None # QueryTermContext
            self.copyFrom(ctx)

        def queryTerm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.QueryTermContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.QueryTermContext,i)

        def INTERSECT(self):
            return self.getToken(fugue_sqlParser.INTERSECT, 0)
        def UNION(self):
            return self.getToken(fugue_sqlParser.UNION, 0)
        def EXCEPT(self):
            return self.getToken(fugue_sqlParser.EXCEPT, 0)
        def SETMINUS(self):
            return self.getToken(fugue_sqlParser.SETMINUS, 0)
        def setQuantifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.SetQuantifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetOperation" ):
                return visitor.visitSetOperation(self)
            else:
                return visitor.visitChildren(self)



    def queryTerm(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = fugue_sqlParser.QueryTermContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 230
        self.enterRecursionRule(localctx, 230, self.RULE_queryTerm, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2408
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [fugue_sqlParser.FROM, fugue_sqlParser.MAP, fugue_sqlParser.REDUCE, fugue_sqlParser.SELECT, fugue_sqlParser.TABLE, fugue_sqlParser.VALUES]:
                localctx = fugue_sqlParser.QueryTermDefaultContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 2406
                self.queryPrimary()
                pass
            elif token in [fugue_sqlParser.FILL, fugue_sqlParser.TAKE, fugue_sqlParser.PROCESS, fugue_sqlParser.ZIP, fugue_sqlParser.SAVE, fugue_sqlParser.SAMPLE, fugue_sqlParser.ALTER, fugue_sqlParser.CREATE, fugue_sqlParser.DROP, fugue_sqlParser.LOAD, fugue_sqlParser.RENAME, fugue_sqlParser.TRANSFORM]:
                localctx = fugue_sqlParser.FugueTermContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2407
                self.fugueNestableTaskCollectionNoSelect()
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 2430
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,307,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 2428
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,306,self._ctx)
                    if la_ == 1:
                        localctx = fugue_sqlParser.SetOperationContext(self, fugue_sqlParser.QueryTermContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_queryTerm)
                        self.state = 2410
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 2411
                        localctx.theOperator = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==fugue_sqlParser.EXCEPT or _la==fugue_sqlParser.INTERSECT or _la==fugue_sqlParser.SETMINUS or _la==fugue_sqlParser.UNION):
                            localctx.theOperator = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 2413
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==fugue_sqlParser.ALL or _la==fugue_sqlParser.DISTINCT:
                            self.state = 2412
                            self.setQuantifier()


                        self.state = 2415
                        localctx.right = self.queryTerm(4)
                        pass

                    elif la_ == 2:
                        localctx = fugue_sqlParser.SetOperationContext(self, fugue_sqlParser.QueryTermContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_queryTerm)
                        self.state = 2416
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 2417
                        localctx.theOperator = self.match(fugue_sqlParser.INTERSECT)
                        self.state = 2419
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==fugue_sqlParser.ALL or _la==fugue_sqlParser.DISTINCT:
                            self.state = 2418
                            self.setQuantifier()


                        self.state = 2421
                        localctx.right = self.queryTerm(3)
                        pass

                    elif la_ == 3:
                        localctx = fugue_sqlParser.SetOperationContext(self, fugue_sqlParser.QueryTermContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_queryTerm)
                        self.state = 2422
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 2423
                        localctx.theOperator = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==fugue_sqlParser.EXCEPT or _la==fugue_sqlParser.SETMINUS or _la==fugue_sqlParser.UNION):
                            localctx.theOperator = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 2425
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==fugue_sqlParser.ALL or _la==fugue_sqlParser.DISTINCT:
                            self.state = 2424
                            self.setQuantifier()


                        self.state = 2427
                        localctx.right = self.queryTerm(2)
                        pass

             
                self.state = 2432
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,307,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class QueryPrimaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_queryPrimary

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class QueryPrimaryDefaultContext(QueryPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.QueryPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def querySpecification(self):
            return self.getTypedRuleContext(fugue_sqlParser.QuerySpecificationContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQueryPrimaryDefault" ):
                return visitor.visitQueryPrimaryDefault(self)
            else:
                return visitor.visitChildren(self)


    class InlineTableDefault1Context(QueryPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.QueryPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def inlineTable(self):
            return self.getTypedRuleContext(fugue_sqlParser.InlineTableContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInlineTableDefault1" ):
                return visitor.visitInlineTableDefault1(self)
            else:
                return visitor.visitChildren(self)


    class FromStmtContext(QueryPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.QueryPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def fromStatement(self):
            return self.getTypedRuleContext(fugue_sqlParser.FromStatementContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFromStmt" ):
                return visitor.visitFromStmt(self)
            else:
                return visitor.visitChildren(self)


    class TableContext(QueryPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.QueryPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable" ):
                return visitor.visitTable(self)
            else:
                return visitor.visitChildren(self)



    def queryPrimary(self):

        localctx = fugue_sqlParser.QueryPrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_queryPrimary)
        try:
            self.state = 2438
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [fugue_sqlParser.MAP, fugue_sqlParser.REDUCE, fugue_sqlParser.SELECT]:
                localctx = fugue_sqlParser.QueryPrimaryDefaultContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2433
                self.querySpecification()
                pass
            elif token in [fugue_sqlParser.FROM]:
                localctx = fugue_sqlParser.FromStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2434
                self.fromStatement()
                pass
            elif token in [fugue_sqlParser.TABLE]:
                localctx = fugue_sqlParser.TableContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2435
                self.match(fugue_sqlParser.TABLE)
                self.state = 2436
                self.multipartIdentifier()
                pass
            elif token in [fugue_sqlParser.VALUES]:
                localctx = fugue_sqlParser.InlineTableDefault1Context(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2437
                self.inlineTable()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SortItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ordering = None # Token
            self.nullOrder = None # Token

        def expression(self):
            return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,0)


        def THENULLS(self):
            return self.getToken(fugue_sqlParser.THENULLS, 0)

        def ASC(self):
            return self.getToken(fugue_sqlParser.ASC, 0)

        def DESC(self):
            return self.getToken(fugue_sqlParser.DESC, 0)

        def LAST(self):
            return self.getToken(fugue_sqlParser.LAST, 0)

        def FIRST(self):
            return self.getToken(fugue_sqlParser.FIRST, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_sortItem

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSortItem" ):
                return visitor.visitSortItem(self)
            else:
                return visitor.visitChildren(self)




    def sortItem(self):

        localctx = fugue_sqlParser.SortItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_sortItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2440
            self.expression()
            self.state = 2442
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,309,self._ctx)
            if la_ == 1:
                self.state = 2441
                localctx.ordering = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.ASC or _la==fugue_sqlParser.DESC):
                    localctx.ordering = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2446
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,310,self._ctx)
            if la_ == 1:
                self.state = 2444
                self.match(fugue_sqlParser.THENULLS)
                self.state = 2445
                localctx.nullOrder = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.FIRST or _la==fugue_sqlParser.LAST):
                    localctx.nullOrder = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FromStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fromClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.FromClauseContext,0)


        def fromStatementBody(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.FromStatementBodyContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.FromStatementBodyContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fromStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFromStatement" ):
                return visitor.visitFromStatement(self)
            else:
                return visitor.visitChildren(self)




    def fromStatement(self):

        localctx = fugue_sqlParser.FromStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_fromStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2448
            self.fromClause()
            self.state = 2450 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2449
                    self.fromStatementBody()

                else:
                    raise NoViableAltException(self)
                self.state = 2452 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,311,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FromStatementBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def transformClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.TransformClauseContext,0)


        def queryOrganization(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryOrganizationContext,0)


        def whereClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.WhereClauseContext,0)


        def selectClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.SelectClauseContext,0)


        def lateralView(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.LateralViewContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.LateralViewContext,i)


        def aggregationClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.AggregationClauseContext,0)


        def havingClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.HavingClauseContext,0)


        def windowClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.WindowClauseContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fromStatementBody

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFromStatementBody" ):
                return visitor.visitFromStatementBody(self)
            else:
                return visitor.visitChildren(self)




    def fromStatementBody(self):

        localctx = fugue_sqlParser.FromStatementBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_fromStatementBody)
        try:
            self.state = 2481
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,318,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2454
                self.transformClause()
                self.state = 2456
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,312,self._ctx)
                if la_ == 1:
                    self.state = 2455
                    self.whereClause()


                self.state = 2458
                self.queryOrganization()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2460
                self.selectClause()
                self.state = 2464
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,313,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2461
                        self.lateralView() 
                    self.state = 2466
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,313,self._ctx)

                self.state = 2468
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,314,self._ctx)
                if la_ == 1:
                    self.state = 2467
                    self.whereClause()


                self.state = 2471
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,315,self._ctx)
                if la_ == 1:
                    self.state = 2470
                    self.aggregationClause()


                self.state = 2474
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,316,self._ctx)
                if la_ == 1:
                    self.state = 2473
                    self.havingClause()


                self.state = 2477
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,317,self._ctx)
                if la_ == 1:
                    self.state = 2476
                    self.windowClause()


                self.state = 2479
                self.queryOrganization()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuerySpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_querySpecification

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RegularQuerySpecificationContext(QuerySpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.QuerySpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def selectClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.SelectClauseContext,0)

        def optionalFromClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.OptionalFromClauseContext,0)

        def lateralView(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.LateralViewContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.LateralViewContext,i)

        def whereClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.WhereClauseContext,0)

        def aggregationClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.AggregationClauseContext,0)

        def havingClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.HavingClauseContext,0)

        def windowClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.WindowClauseContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRegularQuerySpecification" ):
                return visitor.visitRegularQuerySpecification(self)
            else:
                return visitor.visitChildren(self)


    class TransformQuerySpecificationContext(QuerySpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.QuerySpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def transformClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.TransformClauseContext,0)

        def optionalFromClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.OptionalFromClauseContext,0)

        def whereClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.WhereClauseContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTransformQuerySpecification" ):
                return visitor.visitTransformQuerySpecification(self)
            else:
                return visitor.visitChildren(self)



    def querySpecification(self):

        localctx = fugue_sqlParser.QuerySpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_querySpecification)
        try:
            self.state = 2508
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,325,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.TransformQuerySpecificationContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2483
                self.transformClause()
                self.state = 2484
                self.optionalFromClause()
                self.state = 2486
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,319,self._ctx)
                if la_ == 1:
                    self.state = 2485
                    self.whereClause()


                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.RegularQuerySpecificationContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2488
                self.selectClause()
                self.state = 2489
                self.optionalFromClause()
                self.state = 2493
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,320,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2490
                        self.lateralView() 
                    self.state = 2495
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,320,self._ctx)

                self.state = 2497
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,321,self._ctx)
                if la_ == 1:
                    self.state = 2496
                    self.whereClause()


                self.state = 2500
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,322,self._ctx)
                if la_ == 1:
                    self.state = 2499
                    self.aggregationClause()


                self.state = 2503
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,323,self._ctx)
                if la_ == 1:
                    self.state = 2502
                    self.havingClause()


                self.state = 2506
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,324,self._ctx)
                if la_ == 1:
                    self.state = 2505
                    self.windowClause()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptionalFromClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fromClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.FromClauseContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_optionalFromClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOptionalFromClause" ):
                return visitor.visitOptionalFromClause(self)
            else:
                return visitor.visitChildren(self)




    def optionalFromClause(self):

        localctx = fugue_sqlParser.OptionalFromClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_optionalFromClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2511
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,326,self._ctx)
            if la_ == 1:
                self.state = 2510
                self.fromClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransformClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.kind = None # Token
            self.inRowFormat = None # RowFormatContext
            self.recordWriter = None # Token
            self.script = None # Token
            self.outRowFormat = None # RowFormatContext
            self.recordReader = None # Token

        def USING(self):
            return self.getToken(fugue_sqlParser.USING, 0)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.STRING)
            else:
                return self.getToken(fugue_sqlParser.STRING, i)

        def SELECT(self):
            return self.getToken(fugue_sqlParser.SELECT, 0)

        def namedExpressionSeq(self):
            return self.getTypedRuleContext(fugue_sqlParser.NamedExpressionSeqContext,0)


        def TRANSFORM(self):
            return self.getToken(fugue_sqlParser.TRANSFORM, 0)

        def MAP(self):
            return self.getToken(fugue_sqlParser.MAP, 0)

        def REDUCE(self):
            return self.getToken(fugue_sqlParser.REDUCE, 0)

        def RECORDWRITER(self):
            return self.getToken(fugue_sqlParser.RECORDWRITER, 0)

        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)

        def RECORDREADER(self):
            return self.getToken(fugue_sqlParser.RECORDREADER, 0)

        def rowFormat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.RowFormatContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.RowFormatContext,i)


        def identifierSeq(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierSeqContext,0)


        def colTypeList(self):
            return self.getTypedRuleContext(fugue_sqlParser.ColTypeListContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_transformClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTransformClause" ):
                return visitor.visitTransformClause(self)
            else:
                return visitor.visitChildren(self)




    def transformClause(self):

        localctx = fugue_sqlParser.TransformClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_transformClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2523
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [fugue_sqlParser.SELECT]:
                self.state = 2513
                self.match(fugue_sqlParser.SELECT)
                self.state = 2514
                localctx.kind = self.match(fugue_sqlParser.TRANSFORM)
                self.state = 2515
                self.match(fugue_sqlParser.T__2)
                self.state = 2516
                self.namedExpressionSeq()
                self.state = 2517
                self.match(fugue_sqlParser.T__3)
                pass
            elif token in [fugue_sqlParser.MAP]:
                self.state = 2519
                localctx.kind = self.match(fugue_sqlParser.MAP)
                self.state = 2520
                self.namedExpressionSeq()
                pass
            elif token in [fugue_sqlParser.REDUCE]:
                self.state = 2521
                localctx.kind = self.match(fugue_sqlParser.REDUCE)
                self.state = 2522
                self.namedExpressionSeq()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2526
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==fugue_sqlParser.ROW:
                self.state = 2525
                localctx.inRowFormat = self.rowFormat()


            self.state = 2530
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==fugue_sqlParser.RECORDWRITER:
                self.state = 2528
                self.match(fugue_sqlParser.RECORDWRITER)
                self.state = 2529
                localctx.recordWriter = self.match(fugue_sqlParser.STRING)


            self.state = 2532
            self.match(fugue_sqlParser.USING)
            self.state = 2533
            localctx.script = self.match(fugue_sqlParser.STRING)
            self.state = 2546
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,332,self._ctx)
            if la_ == 1:
                self.state = 2534
                self.match(fugue_sqlParser.AS)
                self.state = 2544
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,331,self._ctx)
                if la_ == 1:
                    self.state = 2535
                    self.identifierSeq()
                    pass

                elif la_ == 2:
                    self.state = 2536
                    self.colTypeList()
                    pass

                elif la_ == 3:
                    self.state = 2537
                    self.match(fugue_sqlParser.T__2)
                    self.state = 2540
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,330,self._ctx)
                    if la_ == 1:
                        self.state = 2538
                        self.identifierSeq()
                        pass

                    elif la_ == 2:
                        self.state = 2539
                        self.colTypeList()
                        pass


                    self.state = 2542
                    self.match(fugue_sqlParser.T__3)
                    pass




            self.state = 2549
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,333,self._ctx)
            if la_ == 1:
                self.state = 2548
                localctx.outRowFormat = self.rowFormat()


            self.state = 2553
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,334,self._ctx)
            if la_ == 1:
                self.state = 2551
                self.match(fugue_sqlParser.RECORDREADER)
                self.state = 2552
                localctx.recordReader = self.match(fugue_sqlParser.STRING)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._hint = None # HintContext
            self.hints = list() # of HintContexts

        def SELECT(self):
            return self.getToken(fugue_sqlParser.SELECT, 0)

        def namedExpressionSeq(self):
            return self.getTypedRuleContext(fugue_sqlParser.NamedExpressionSeqContext,0)


        def setQuantifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.SetQuantifierContext,0)


        def hint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.HintContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.HintContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_selectClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectClause" ):
                return visitor.visitSelectClause(self)
            else:
                return visitor.visitChildren(self)




    def selectClause(self):

        localctx = fugue_sqlParser.SelectClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_selectClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2555
            self.match(fugue_sqlParser.SELECT)
            self.state = 2559
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==fugue_sqlParser.T__13:
                self.state = 2556
                localctx._hint = self.hint()
                localctx.hints.append(localctx._hint)
                self.state = 2561
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2563
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,336,self._ctx)
            if la_ == 1:
                self.state = 2562
                self.setQuantifier()


            self.state = 2565
            self.namedExpressionSeq()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(fugue_sqlParser.SET, 0)

        def assignmentList(self):
            return self.getTypedRuleContext(fugue_sqlParser.AssignmentListContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_setClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetClause" ):
                return visitor.visitSetClause(self)
            else:
                return visitor.visitChildren(self)




    def setClause(self):

        localctx = fugue_sqlParser.SetClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_setClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2567
            self.match(fugue_sqlParser.SET)
            self.state = 2568
            self.assignmentList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatchedClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.matchedCond = None # BooleanExpressionContext

        def WHEN(self):
            return self.getToken(fugue_sqlParser.WHEN, 0)

        def MATCHED(self):
            return self.getToken(fugue_sqlParser.MATCHED, 0)

        def THEN(self):
            return self.getToken(fugue_sqlParser.THEN, 0)

        def matchedAction(self):
            return self.getTypedRuleContext(fugue_sqlParser.MatchedActionContext,0)


        def AND(self):
            return self.getToken(fugue_sqlParser.AND, 0)

        def booleanExpression(self):
            return self.getTypedRuleContext(fugue_sqlParser.BooleanExpressionContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_matchedClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMatchedClause" ):
                return visitor.visitMatchedClause(self)
            else:
                return visitor.visitChildren(self)




    def matchedClause(self):

        localctx = fugue_sqlParser.MatchedClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_matchedClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2570
            self.match(fugue_sqlParser.WHEN)
            self.state = 2571
            self.match(fugue_sqlParser.MATCHED)
            self.state = 2574
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==fugue_sqlParser.AND:
                self.state = 2572
                self.match(fugue_sqlParser.AND)
                self.state = 2573
                localctx.matchedCond = self.booleanExpression(0)


            self.state = 2576
            self.match(fugue_sqlParser.THEN)
            self.state = 2577
            self.matchedAction()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NotMatchedClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.notMatchedCond = None # BooleanExpressionContext

        def WHEN(self):
            return self.getToken(fugue_sqlParser.WHEN, 0)

        def NOT(self):
            return self.getToken(fugue_sqlParser.NOT, 0)

        def MATCHED(self):
            return self.getToken(fugue_sqlParser.MATCHED, 0)

        def THEN(self):
            return self.getToken(fugue_sqlParser.THEN, 0)

        def notMatchedAction(self):
            return self.getTypedRuleContext(fugue_sqlParser.NotMatchedActionContext,0)


        def AND(self):
            return self.getToken(fugue_sqlParser.AND, 0)

        def booleanExpression(self):
            return self.getTypedRuleContext(fugue_sqlParser.BooleanExpressionContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_notMatchedClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNotMatchedClause" ):
                return visitor.visitNotMatchedClause(self)
            else:
                return visitor.visitChildren(self)




    def notMatchedClause(self):

        localctx = fugue_sqlParser.NotMatchedClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_notMatchedClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2579
            self.match(fugue_sqlParser.WHEN)
            self.state = 2580
            self.match(fugue_sqlParser.NOT)
            self.state = 2581
            self.match(fugue_sqlParser.MATCHED)
            self.state = 2584
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==fugue_sqlParser.AND:
                self.state = 2582
                self.match(fugue_sqlParser.AND)
                self.state = 2583
                localctx.notMatchedCond = self.booleanExpression(0)


            self.state = 2586
            self.match(fugue_sqlParser.THEN)
            self.state = 2587
            self.notMatchedAction()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatchedActionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE(self):
            return self.getToken(fugue_sqlParser.DELETE, 0)

        def UPDATE(self):
            return self.getToken(fugue_sqlParser.UPDATE, 0)

        def SET(self):
            return self.getToken(fugue_sqlParser.SET, 0)

        def ASTERISK(self):
            return self.getToken(fugue_sqlParser.ASTERISK, 0)

        def assignmentList(self):
            return self.getTypedRuleContext(fugue_sqlParser.AssignmentListContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_matchedAction

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMatchedAction" ):
                return visitor.visitMatchedAction(self)
            else:
                return visitor.visitChildren(self)




    def matchedAction(self):

        localctx = fugue_sqlParser.MatchedActionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_matchedAction)
        try:
            self.state = 2596
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,339,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2589
                self.match(fugue_sqlParser.DELETE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2590
                self.match(fugue_sqlParser.UPDATE)
                self.state = 2591
                self.match(fugue_sqlParser.SET)
                self.state = 2592
                self.match(fugue_sqlParser.ASTERISK)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2593
                self.match(fugue_sqlParser.UPDATE)
                self.state = 2594
                self.match(fugue_sqlParser.SET)
                self.state = 2595
                self.assignmentList()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NotMatchedActionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.columns = None # MultipartIdentifierListContext

        def INSERT(self):
            return self.getToken(fugue_sqlParser.INSERT, 0)

        def ASTERISK(self):
            return self.getToken(fugue_sqlParser.ASTERISK, 0)

        def VALUES(self):
            return self.getToken(fugue_sqlParser.VALUES, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,i)


        def multipartIdentifierList(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierListContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_notMatchedAction

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNotMatchedAction" ):
                return visitor.visitNotMatchedAction(self)
            else:
                return visitor.visitChildren(self)




    def notMatchedAction(self):

        localctx = fugue_sqlParser.NotMatchedActionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_notMatchedAction)
        self._la = 0 # Token type
        try:
            self.state = 2616
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,341,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2598
                self.match(fugue_sqlParser.INSERT)
                self.state = 2599
                self.match(fugue_sqlParser.ASTERISK)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2600
                self.match(fugue_sqlParser.INSERT)
                self.state = 2601
                self.match(fugue_sqlParser.T__2)
                self.state = 2602
                localctx.columns = self.multipartIdentifierList()
                self.state = 2603
                self.match(fugue_sqlParser.T__3)
                self.state = 2604
                self.match(fugue_sqlParser.VALUES)
                self.state = 2605
                self.match(fugue_sqlParser.T__2)
                self.state = 2606
                self.expression()
                self.state = 2611
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==fugue_sqlParser.T__0:
                    self.state = 2607
                    self.match(fugue_sqlParser.T__0)
                    self.state = 2608
                    self.expression()
                    self.state = 2613
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2614
                self.match(fugue_sqlParser.T__3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.AssignmentContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.AssignmentContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_assignmentList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignmentList" ):
                return visitor.visitAssignmentList(self)
            else:
                return visitor.visitChildren(self)




    def assignmentList(self):

        localctx = fugue_sqlParser.AssignmentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_assignmentList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2618
            self.assignment()
            self.state = 2623
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==fugue_sqlParser.T__0:
                self.state = 2619
                self.match(fugue_sqlParser.T__0)
                self.state = 2620
                self.assignment()
                self.state = 2625
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.key = None # MultipartIdentifierContext
            self.value = None # ExpressionContext

        def EQUAL(self):
            return self.getToken(fugue_sqlParser.EQUAL, 0)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)


        def expression(self):
            return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_assignment

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignment" ):
                return visitor.visitAssignment(self)
            else:
                return visitor.visitChildren(self)




    def assignment(self):

        localctx = fugue_sqlParser.AssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_assignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2626
            localctx.key = self.multipartIdentifier()
            self.state = 2627
            self.match(fugue_sqlParser.EQUAL)
            self.state = 2628
            localctx.value = self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhereClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(fugue_sqlParser.WHERE, 0)

        def booleanExpression(self):
            return self.getTypedRuleContext(fugue_sqlParser.BooleanExpressionContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_whereClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhereClause" ):
                return visitor.visitWhereClause(self)
            else:
                return visitor.visitChildren(self)




    def whereClause(self):

        localctx = fugue_sqlParser.WhereClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_whereClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2630
            self.match(fugue_sqlParser.WHERE)
            self.state = 2631
            self.booleanExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HavingClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HAVING(self):
            return self.getToken(fugue_sqlParser.HAVING, 0)

        def booleanExpression(self):
            return self.getTypedRuleContext(fugue_sqlParser.BooleanExpressionContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_havingClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHavingClause" ):
                return visitor.visitHavingClause(self)
            else:
                return visitor.visitChildren(self)




    def havingClause(self):

        localctx = fugue_sqlParser.HavingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_havingClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2633
            self.match(fugue_sqlParser.HAVING)
            self.state = 2634
            self.booleanExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._hintStatement = None # HintStatementContext
            self.hintStatements = list() # of HintStatementContexts

        def hintStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.HintStatementContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.HintStatementContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_hint

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHint" ):
                return visitor.visitHint(self)
            else:
                return visitor.visitChildren(self)




    def hint(self):

        localctx = fugue_sqlParser.HintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_hint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2636
            self.match(fugue_sqlParser.T__13)
            self.state = 2637
            localctx._hintStatement = self.hintStatement()
            localctx.hintStatements.append(localctx._hintStatement)
            self.state = 2644
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << fugue_sqlParser.T__0) | (1 << fugue_sqlParser.ADD) | (1 << fugue_sqlParser.AFTER) | (1 << fugue_sqlParser.ALL) | (1 << fugue_sqlParser.ALTER) | (1 << fugue_sqlParser.ANALYZE) | (1 << fugue_sqlParser.AND) | (1 << fugue_sqlParser.ANTI) | (1 << fugue_sqlParser.ANY) | (1 << fugue_sqlParser.ARCHIVE) | (1 << fugue_sqlParser.ARRAY) | (1 << fugue_sqlParser.AS))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (fugue_sqlParser.ASC - 64)) | (1 << (fugue_sqlParser.AT - 64)) | (1 << (fugue_sqlParser.AUTHORIZATION - 64)) | (1 << (fugue_sqlParser.BETWEEN - 64)) | (1 << (fugue_sqlParser.BOTH - 64)) | (1 << (fugue_sqlParser.BUCKET - 64)) | (1 << (fugue_sqlParser.BUCKETS - 64)) | (1 << (fugue_sqlParser.BY - 64)) | (1 << (fugue_sqlParser.CACHE - 64)) | (1 << (fugue_sqlParser.CASCADE - 64)) | (1 << (fugue_sqlParser.CASE - 64)) | (1 << (fugue_sqlParser.CAST - 64)) | (1 << (fugue_sqlParser.CHANGE - 64)) | (1 << (fugue_sqlParser.CHECK - 64)) | (1 << (fugue_sqlParser.CLEAR - 64)) | (1 << (fugue_sqlParser.CLUSTER - 64)) | (1 << (fugue_sqlParser.CLUSTERED - 64)) | (1 << (fugue_sqlParser.CODEGEN - 64)) | (1 << (fugue_sqlParser.COLLATE - 64)) | (1 << (fugue_sqlParser.COLLECTION - 64)) | (1 << (fugue_sqlParser.COLUMN - 64)) | (1 << (fugue_sqlParser.COLUMNS - 64)) | (1 << (fugue_sqlParser.COMMENT - 64)) | (1 << (fugue_sqlParser.COMMIT - 64)) | (1 << (fugue_sqlParser.COMPACT - 64)) | (1 << (fugue_sqlParser.COMPACTIONS - 64)) | (1 << (fugue_sqlParser.COMPUTE - 64)) | (1 << (fugue_sqlParser.CONCATENATE - 64)) | (1 << (fugue_sqlParser.CONSTRAINT - 64)) | (1 << (fugue_sqlParser.COST - 64)) | (1 << (fugue_sqlParser.CREATE - 64)) | (1 << (fugue_sqlParser.CROSS - 64)) | (1 << (fugue_sqlParser.CUBE - 64)) | (1 << (fugue_sqlParser.CURRENT - 64)) | (1 << (fugue_sqlParser.CURRENT_DATE - 64)) | (1 << (fugue_sqlParser.CURRENT_TIME - 64)) | (1 << (fugue_sqlParser.CURRENT_TIMESTAMP - 64)) | (1 << (fugue_sqlParser.CURRENT_USER - 64)) | (1 << (fugue_sqlParser.DATA - 64)) | (1 << (fugue_sqlParser.DATABASE - 64)) | (1 << (fugue_sqlParser.DATABASES - 64)) | (1 << (fugue_sqlParser.DAY - 64)) | (1 << (fugue_sqlParser.DBPROPERTIES - 64)) | (1 << (fugue_sqlParser.DEFINED - 64)) | (1 << (fugue_sqlParser.DELETE - 64)) | (1 << (fugue_sqlParser.DELIMITED - 64)) | (1 << (fugue_sqlParser.DESC - 64)) | (1 << (fugue_sqlParser.DESCRIBE - 64)) | (1 << (fugue_sqlParser.DFS - 64)) | (1 << (fugue_sqlParser.DIRECTORIES - 64)) | (1 << (fugue_sqlParser.DIRECTORY - 64)) | (1 << (fugue_sqlParser.DISTINCT - 64)) | (1 << (fugue_sqlParser.DISTRIBUTE - 64)) | (1 << (fugue_sqlParser.DROP - 64)) | (1 << (fugue_sqlParser.ELSE - 64)) | (1 << (fugue_sqlParser.END - 64)) | (1 << (fugue_sqlParser.ESCAPE - 64)) | (1 << (fugue_sqlParser.ESCAPED - 64)) | (1 << (fugue_sqlParser.EXCEPT - 64)) | (1 << (fugue_sqlParser.EXCHANGE - 64)) | (1 << (fugue_sqlParser.EXISTS - 64)) | (1 << (fugue_sqlParser.EXPLAIN - 64)) | (1 << (fugue_sqlParser.EXPORT - 64)) | (1 << (fugue_sqlParser.EXTENDED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (fugue_sqlParser.EXTERNAL - 128)) | (1 << (fugue_sqlParser.EXTRACT - 128)) | (1 << (fugue_sqlParser.FALSE - 128)) | (1 << (fugue_sqlParser.FETCH - 128)) | (1 << (fugue_sqlParser.FIELDS - 128)) | (1 << (fugue_sqlParser.FILTER - 128)) | (1 << (fugue_sqlParser.FILEFORMAT - 128)) | (1 << (fugue_sqlParser.FIRST - 128)) | (1 << (fugue_sqlParser.FOLLOWING - 128)) | (1 << (fugue_sqlParser.FOR - 128)) | (1 << (fugue_sqlParser.FOREIGN - 128)) | (1 << (fugue_sqlParser.FORMAT - 128)) | (1 << (fugue_sqlParser.FORMATTED - 128)) | (1 << (fugue_sqlParser.FROM - 128)) | (1 << (fugue_sqlParser.FULL - 128)) | (1 << (fugue_sqlParser.FUNCTION - 128)) | (1 << (fugue_sqlParser.FUNCTIONS - 128)) | (1 << (fugue_sqlParser.GLOBAL - 128)) | (1 << (fugue_sqlParser.GRANT - 128)) | (1 << (fugue_sqlParser.GROUP - 128)) | (1 << (fugue_sqlParser.GROUPING - 128)) | (1 << (fugue_sqlParser.HAVING - 128)) | (1 << (fugue_sqlParser.HOUR - 128)) | (1 << (fugue_sqlParser.IF - 128)) | (1 << (fugue_sqlParser.IGNORE - 128)) | (1 << (fugue_sqlParser.IMPORT - 128)) | (1 << (fugue_sqlParser.IN - 128)) | (1 << (fugue_sqlParser.INDEX - 128)) | (1 << (fugue_sqlParser.INDEXES - 128)) | (1 << (fugue_sqlParser.INNER - 128)) | (1 << (fugue_sqlParser.INPATH - 128)) | (1 << (fugue_sqlParser.INPUTFORMAT - 128)) | (1 << (fugue_sqlParser.INSERT - 128)) | (1 << (fugue_sqlParser.INTERSECT - 128)) | (1 << (fugue_sqlParser.INTERVAL - 128)) | (1 << (fugue_sqlParser.INTO - 128)) | (1 << (fugue_sqlParser.IS - 128)) | (1 << (fugue_sqlParser.ITEMS - 128)) | (1 << (fugue_sqlParser.JOIN - 128)) | (1 << (fugue_sqlParser.KEYS - 128)) | (1 << (fugue_sqlParser.LAST - 128)) | (1 << (fugue_sqlParser.LATERAL - 128)) | (1 << (fugue_sqlParser.LAZY - 128)) | (1 << (fugue_sqlParser.LEADING - 128)) | (1 << (fugue_sqlParser.LEFT - 128)) | (1 << (fugue_sqlParser.LIKE - 128)) | (1 << (fugue_sqlParser.LIMIT - 128)) | (1 << (fugue_sqlParser.LINES - 128)) | (1 << (fugue_sqlParser.LIST - 128)) | (1 << (fugue_sqlParser.LOAD - 128)) | (1 << (fugue_sqlParser.LOCAL - 128)) | (1 << (fugue_sqlParser.LOCATION - 128)) | (1 << (fugue_sqlParser.LOCK - 128)) | (1 << (fugue_sqlParser.LOCKS - 128)) | (1 << (fugue_sqlParser.LOGICAL - 128)) | (1 << (fugue_sqlParser.MACRO - 128)) | (1 << (fugue_sqlParser.MAP - 128)) | (1 << (fugue_sqlParser.MATCHED - 128)) | (1 << (fugue_sqlParser.MERGE - 128)) | (1 << (fugue_sqlParser.MINUTE - 128)) | (1 << (fugue_sqlParser.MONTH - 128)) | (1 << (fugue_sqlParser.MSCK - 128)) | (1 << (fugue_sqlParser.NAMESPACE - 128)) | (1 << (fugue_sqlParser.NAMESPACES - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (fugue_sqlParser.NATURAL - 192)) | (1 << (fugue_sqlParser.NO - 192)) | (1 << (fugue_sqlParser.NOT - 192)) | (1 << (fugue_sqlParser.THENULL - 192)) | (1 << (fugue_sqlParser.THENULLS - 192)) | (1 << (fugue_sqlParser.OF - 192)) | (1 << (fugue_sqlParser.ON - 192)) | (1 << (fugue_sqlParser.ONLY - 192)) | (1 << (fugue_sqlParser.OPTION - 192)) | (1 << (fugue_sqlParser.OPTIONS - 192)) | (1 << (fugue_sqlParser.OR - 192)) | (1 << (fugue_sqlParser.ORDER - 192)) | (1 << (fugue_sqlParser.OUT - 192)) | (1 << (fugue_sqlParser.OUTER - 192)) | (1 << (fugue_sqlParser.OUTPUTFORMAT - 192)) | (1 << (fugue_sqlParser.OVER - 192)) | (1 << (fugue_sqlParser.OVERLAPS - 192)) | (1 << (fugue_sqlParser.OVERLAY - 192)) | (1 << (fugue_sqlParser.OVERWRITE - 192)) | (1 << (fugue_sqlParser.PARTITION - 192)) | (1 << (fugue_sqlParser.PARTITIONED - 192)) | (1 << (fugue_sqlParser.PARTITIONS - 192)) | (1 << (fugue_sqlParser.PERCENTLIT - 192)) | (1 << (fugue_sqlParser.PIVOT - 192)) | (1 << (fugue_sqlParser.PLACING - 192)) | (1 << (fugue_sqlParser.POSITION - 192)) | (1 << (fugue_sqlParser.PRECEDING - 192)) | (1 << (fugue_sqlParser.PRIMARY - 192)) | (1 << (fugue_sqlParser.PRINCIPALS - 192)) | (1 << (fugue_sqlParser.PROPERTIES - 192)) | (1 << (fugue_sqlParser.PURGE - 192)) | (1 << (fugue_sqlParser.QUERY - 192)) | (1 << (fugue_sqlParser.RANGE - 192)) | (1 << (fugue_sqlParser.RECORDREADER - 192)) | (1 << (fugue_sqlParser.RECORDWRITER - 192)) | (1 << (fugue_sqlParser.RECOVER - 192)) | (1 << (fugue_sqlParser.REDUCE - 192)) | (1 << (fugue_sqlParser.REFERENCES - 192)) | (1 << (fugue_sqlParser.REFRESH - 192)) | (1 << (fugue_sqlParser.RENAME - 192)) | (1 << (fugue_sqlParser.REPAIR - 192)) | (1 << (fugue_sqlParser.REPLACE - 192)) | (1 << (fugue_sqlParser.RESET - 192)) | (1 << (fugue_sqlParser.RESTRICT - 192)) | (1 << (fugue_sqlParser.REVOKE - 192)) | (1 << (fugue_sqlParser.RIGHT - 192)) | (1 << (fugue_sqlParser.RLIKE - 192)) | (1 << (fugue_sqlParser.ROLE - 192)) | (1 << (fugue_sqlParser.ROLES - 192)) | (1 << (fugue_sqlParser.ROLLBACK - 192)) | (1 << (fugue_sqlParser.ROLLUP - 192)) | (1 << (fugue_sqlParser.ROW - 192)) | (1 << (fugue_sqlParser.ROWS - 192)) | (1 << (fugue_sqlParser.SCHEMA - 192)) | (1 << (fugue_sqlParser.SECOND - 192)) | (1 << (fugue_sqlParser.SELECT - 192)) | (1 << (fugue_sqlParser.SEMI - 192)) | (1 << (fugue_sqlParser.SEPARATED - 192)) | (1 << (fugue_sqlParser.SERDE - 192)) | (1 << (fugue_sqlParser.SERDEPROPERTIES - 192)) | (1 << (fugue_sqlParser.SESSION_USER - 192)) | (1 << (fugue_sqlParser.SET - 192)) | (1 << (fugue_sqlParser.SETMINUS - 192)) | (1 << (fugue_sqlParser.SETS - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (fugue_sqlParser.SHOW - 256)) | (1 << (fugue_sqlParser.SKEWED - 256)) | (1 << (fugue_sqlParser.SOME - 256)) | (1 << (fugue_sqlParser.SORT - 256)) | (1 << (fugue_sqlParser.SORTED - 256)) | (1 << (fugue_sqlParser.START - 256)) | (1 << (fugue_sqlParser.STATISTICS - 256)) | (1 << (fugue_sqlParser.STORED - 256)) | (1 << (fugue_sqlParser.STRATIFY - 256)) | (1 << (fugue_sqlParser.STRUCT - 256)) | (1 << (fugue_sqlParser.SUBSTR - 256)) | (1 << (fugue_sqlParser.SUBSTRING - 256)) | (1 << (fugue_sqlParser.TABLE - 256)) | (1 << (fugue_sqlParser.TABLES - 256)) | (1 << (fugue_sqlParser.TABLESAMPLE - 256)) | (1 << (fugue_sqlParser.TBLPROPERTIES - 256)) | (1 << (fugue_sqlParser.TEMPORARY - 256)) | (1 << (fugue_sqlParser.TERMINATED - 256)) | (1 << (fugue_sqlParser.THEN - 256)) | (1 << (fugue_sqlParser.TO - 256)) | (1 << (fugue_sqlParser.TOUCH - 256)) | (1 << (fugue_sqlParser.TRAILING - 256)) | (1 << (fugue_sqlParser.TRANSACTION - 256)) | (1 << (fugue_sqlParser.TRANSACTIONS - 256)) | (1 << (fugue_sqlParser.TRANSFORM - 256)) | (1 << (fugue_sqlParser.TRIM - 256)) | (1 << (fugue_sqlParser.TRUE - 256)) | (1 << (fugue_sqlParser.TRUNCATE - 256)) | (1 << (fugue_sqlParser.TYPE - 256)) | (1 << (fugue_sqlParser.UNARCHIVE - 256)) | (1 << (fugue_sqlParser.UNBOUNDED - 256)) | (1 << (fugue_sqlParser.UNCACHE - 256)) | (1 << (fugue_sqlParser.UNION - 256)) | (1 << (fugue_sqlParser.UNIQUE - 256)) | (1 << (fugue_sqlParser.UNKNOWN - 256)) | (1 << (fugue_sqlParser.UNLOCK - 256)) | (1 << (fugue_sqlParser.UNSET - 256)) | (1 << (fugue_sqlParser.UPDATE - 256)) | (1 << (fugue_sqlParser.USE - 256)) | (1 << (fugue_sqlParser.USER - 256)) | (1 << (fugue_sqlParser.USING - 256)) | (1 << (fugue_sqlParser.VALUES - 256)) | (1 << (fugue_sqlParser.VIEW - 256)) | (1 << (fugue_sqlParser.VIEWS - 256)) | (1 << (fugue_sqlParser.WHEN - 256)) | (1 << (fugue_sqlParser.WHERE - 256)) | (1 << (fugue_sqlParser.WINDOW - 256)) | (1 << (fugue_sqlParser.WITH - 256)) | (1 << (fugue_sqlParser.YEAR - 256)) | (1 << (fugue_sqlParser.DIV - 256)))) != 0) or _la==fugue_sqlParser.IDENTIFIER or _la==fugue_sqlParser.BACKQUOTED_IDENTIFIER:
                self.state = 2639
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.T__0:
                    self.state = 2638
                    self.match(fugue_sqlParser.T__0)


                self.state = 2641
                localctx._hintStatement = self.hintStatement()
                localctx.hintStatements.append(localctx._hintStatement)
                self.state = 2646
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2647
            self.match(fugue_sqlParser.T__14)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HintStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.hintName = None # IdentifierContext
            self._primaryExpression = None # PrimaryExpressionContext
            self.parameters = list() # of PrimaryExpressionContexts

        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)


        def primaryExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.PrimaryExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.PrimaryExpressionContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_hintStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHintStatement" ):
                return visitor.visitHintStatement(self)
            else:
                return visitor.visitChildren(self)




    def hintStatement(self):

        localctx = fugue_sqlParser.HintStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_hintStatement)
        self._la = 0 # Token type
        try:
            self.state = 2662
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,346,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2649
                localctx.hintName = self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2650
                localctx.hintName = self.identifier()
                self.state = 2651
                self.match(fugue_sqlParser.T__2)
                self.state = 2652
                localctx._primaryExpression = self.primaryExpression(0)
                localctx.parameters.append(localctx._primaryExpression)
                self.state = 2657
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==fugue_sqlParser.T__0:
                    self.state = 2653
                    self.match(fugue_sqlParser.T__0)
                    self.state = 2654
                    localctx._primaryExpression = self.primaryExpression(0)
                    localctx.parameters.append(localctx._primaryExpression)
                    self.state = 2659
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2660
                self.match(fugue_sqlParser.T__3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FromClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(fugue_sqlParser.FROM, 0)

        def relation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.RelationContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.RelationContext,i)


        def lateralView(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.LateralViewContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.LateralViewContext,i)


        def pivotClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.PivotClauseContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fromClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFromClause" ):
                return visitor.visitFromClause(self)
            else:
                return visitor.visitChildren(self)




    def fromClause(self):

        localctx = fugue_sqlParser.FromClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_fromClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2664
            self.match(fugue_sqlParser.FROM)
            self.state = 2665
            self.relation()
            self.state = 2670
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,347,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2666
                    self.match(fugue_sqlParser.T__0)
                    self.state = 2667
                    self.relation() 
                self.state = 2672
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,347,self._ctx)

            self.state = 2676
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,348,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2673
                    self.lateralView() 
                self.state = 2678
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,348,self._ctx)

            self.state = 2680
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,349,self._ctx)
            if la_ == 1:
                self.state = 2679
                self.pivotClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AggregationClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._expression = None # ExpressionContext
            self.groupingExpressions = list() # of ExpressionContexts
            self.kind = None # Token

        def GROUP(self):
            return self.getToken(fugue_sqlParser.GROUP, 0)

        def BY(self):
            return self.getToken(fugue_sqlParser.BY, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,i)


        def WITH(self):
            return self.getToken(fugue_sqlParser.WITH, 0)

        def SETS(self):
            return self.getToken(fugue_sqlParser.SETS, 0)

        def groupingSet(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.GroupingSetContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.GroupingSetContext,i)


        def ROLLUP(self):
            return self.getToken(fugue_sqlParser.ROLLUP, 0)

        def CUBE(self):
            return self.getToken(fugue_sqlParser.CUBE, 0)

        def GROUPING(self):
            return self.getToken(fugue_sqlParser.GROUPING, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_aggregationClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAggregationClause" ):
                return visitor.visitAggregationClause(self)
            else:
                return visitor.visitChildren(self)




    def aggregationClause(self):

        localctx = fugue_sqlParser.AggregationClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_aggregationClause)
        self._la = 0 # Token type
        try:
            self.state = 2726
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,354,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2682
                self.match(fugue_sqlParser.GROUP)
                self.state = 2683
                self.match(fugue_sqlParser.BY)
                self.state = 2684
                localctx._expression = self.expression()
                localctx.groupingExpressions.append(localctx._expression)
                self.state = 2689
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,350,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2685
                        self.match(fugue_sqlParser.T__0)
                        self.state = 2686
                        localctx._expression = self.expression()
                        localctx.groupingExpressions.append(localctx._expression) 
                    self.state = 2691
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,350,self._ctx)

                self.state = 2709
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,352,self._ctx)
                if la_ == 1:
                    self.state = 2692
                    self.match(fugue_sqlParser.WITH)
                    self.state = 2693
                    localctx.kind = self.match(fugue_sqlParser.ROLLUP)

                elif la_ == 2:
                    self.state = 2694
                    self.match(fugue_sqlParser.WITH)
                    self.state = 2695
                    localctx.kind = self.match(fugue_sqlParser.CUBE)

                elif la_ == 3:
                    self.state = 2696
                    localctx.kind = self.match(fugue_sqlParser.GROUPING)
                    self.state = 2697
                    self.match(fugue_sqlParser.SETS)
                    self.state = 2698
                    self.match(fugue_sqlParser.T__2)
                    self.state = 2699
                    self.groupingSet()
                    self.state = 2704
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==fugue_sqlParser.T__0:
                        self.state = 2700
                        self.match(fugue_sqlParser.T__0)
                        self.state = 2701
                        self.groupingSet()
                        self.state = 2706
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2707
                    self.match(fugue_sqlParser.T__3)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2711
                self.match(fugue_sqlParser.GROUP)
                self.state = 2712
                self.match(fugue_sqlParser.BY)
                self.state = 2713
                localctx.kind = self.match(fugue_sqlParser.GROUPING)
                self.state = 2714
                self.match(fugue_sqlParser.SETS)
                self.state = 2715
                self.match(fugue_sqlParser.T__2)
                self.state = 2716
                self.groupingSet()
                self.state = 2721
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==fugue_sqlParser.T__0:
                    self.state = 2717
                    self.match(fugue_sqlParser.T__0)
                    self.state = 2718
                    self.groupingSet()
                    self.state = 2723
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2724
                self.match(fugue_sqlParser.T__3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupingSetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_groupingSet

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroupingSet" ):
                return visitor.visitGroupingSet(self)
            else:
                return visitor.visitChildren(self)




    def groupingSet(self):

        localctx = fugue_sqlParser.GroupingSetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_groupingSet)
        self._la = 0 # Token type
        try:
            self.state = 2741
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,357,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2728
                self.match(fugue_sqlParser.T__2)
                self.state = 2737
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << fugue_sqlParser.T__2) | (1 << fugue_sqlParser.ADD) | (1 << fugue_sqlParser.AFTER) | (1 << fugue_sqlParser.ALL) | (1 << fugue_sqlParser.ALTER) | (1 << fugue_sqlParser.ANALYZE) | (1 << fugue_sqlParser.AND) | (1 << fugue_sqlParser.ANTI) | (1 << fugue_sqlParser.ANY) | (1 << fugue_sqlParser.ARCHIVE) | (1 << fugue_sqlParser.ARRAY) | (1 << fugue_sqlParser.AS))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (fugue_sqlParser.ASC - 64)) | (1 << (fugue_sqlParser.AT - 64)) | (1 << (fugue_sqlParser.AUTHORIZATION - 64)) | (1 << (fugue_sqlParser.BETWEEN - 64)) | (1 << (fugue_sqlParser.BOTH - 64)) | (1 << (fugue_sqlParser.BUCKET - 64)) | (1 << (fugue_sqlParser.BUCKETS - 64)) | (1 << (fugue_sqlParser.BY - 64)) | (1 << (fugue_sqlParser.CACHE - 64)) | (1 << (fugue_sqlParser.CASCADE - 64)) | (1 << (fugue_sqlParser.CASE - 64)) | (1 << (fugue_sqlParser.CAST - 64)) | (1 << (fugue_sqlParser.CHANGE - 64)) | (1 << (fugue_sqlParser.CHECK - 64)) | (1 << (fugue_sqlParser.CLEAR - 64)) | (1 << (fugue_sqlParser.CLUSTER - 64)) | (1 << (fugue_sqlParser.CLUSTERED - 64)) | (1 << (fugue_sqlParser.CODEGEN - 64)) | (1 << (fugue_sqlParser.COLLATE - 64)) | (1 << (fugue_sqlParser.COLLECTION - 64)) | (1 << (fugue_sqlParser.COLUMN - 64)) | (1 << (fugue_sqlParser.COLUMNS - 64)) | (1 << (fugue_sqlParser.COMMENT - 64)) | (1 << (fugue_sqlParser.COMMIT - 64)) | (1 << (fugue_sqlParser.COMPACT - 64)) | (1 << (fugue_sqlParser.COMPACTIONS - 64)) | (1 << (fugue_sqlParser.COMPUTE - 64)) | (1 << (fugue_sqlParser.CONCATENATE - 64)) | (1 << (fugue_sqlParser.CONSTRAINT - 64)) | (1 << (fugue_sqlParser.COST - 64)) | (1 << (fugue_sqlParser.CREATE - 64)) | (1 << (fugue_sqlParser.CROSS - 64)) | (1 << (fugue_sqlParser.CUBE - 64)) | (1 << (fugue_sqlParser.CURRENT - 64)) | (1 << (fugue_sqlParser.CURRENT_DATE - 64)) | (1 << (fugue_sqlParser.CURRENT_TIME - 64)) | (1 << (fugue_sqlParser.CURRENT_TIMESTAMP - 64)) | (1 << (fugue_sqlParser.CURRENT_USER - 64)) | (1 << (fugue_sqlParser.DATA - 64)) | (1 << (fugue_sqlParser.DATABASE - 64)) | (1 << (fugue_sqlParser.DATABASES - 64)) | (1 << (fugue_sqlParser.DAY - 64)) | (1 << (fugue_sqlParser.DBPROPERTIES - 64)) | (1 << (fugue_sqlParser.DEFINED - 64)) | (1 << (fugue_sqlParser.DELETE - 64)) | (1 << (fugue_sqlParser.DELIMITED - 64)) | (1 << (fugue_sqlParser.DESC - 64)) | (1 << (fugue_sqlParser.DESCRIBE - 64)) | (1 << (fugue_sqlParser.DFS - 64)) | (1 << (fugue_sqlParser.DIRECTORIES - 64)) | (1 << (fugue_sqlParser.DIRECTORY - 64)) | (1 << (fugue_sqlParser.DISTINCT - 64)) | (1 << (fugue_sqlParser.DISTRIBUTE - 64)) | (1 << (fugue_sqlParser.DROP - 64)) | (1 << (fugue_sqlParser.ELSE - 64)) | (1 << (fugue_sqlParser.END - 64)) | (1 << (fugue_sqlParser.ESCAPE - 64)) | (1 << (fugue_sqlParser.ESCAPED - 64)) | (1 << (fugue_sqlParser.EXCEPT - 64)) | (1 << (fugue_sqlParser.EXCHANGE - 64)) | (1 << (fugue_sqlParser.EXISTS - 64)) | (1 << (fugue_sqlParser.EXPLAIN - 64)) | (1 << (fugue_sqlParser.EXPORT - 64)) | (1 << (fugue_sqlParser.EXTENDED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (fugue_sqlParser.EXTERNAL - 128)) | (1 << (fugue_sqlParser.EXTRACT - 128)) | (1 << (fugue_sqlParser.FALSE - 128)) | (1 << (fugue_sqlParser.FETCH - 128)) | (1 << (fugue_sqlParser.FIELDS - 128)) | (1 << (fugue_sqlParser.FILTER - 128)) | (1 << (fugue_sqlParser.FILEFORMAT - 128)) | (1 << (fugue_sqlParser.FIRST - 128)) | (1 << (fugue_sqlParser.FOLLOWING - 128)) | (1 << (fugue_sqlParser.FOR - 128)) | (1 << (fugue_sqlParser.FOREIGN - 128)) | (1 << (fugue_sqlParser.FORMAT - 128)) | (1 << (fugue_sqlParser.FORMATTED - 128)) | (1 << (fugue_sqlParser.FROM - 128)) | (1 << (fugue_sqlParser.FULL - 128)) | (1 << (fugue_sqlParser.FUNCTION - 128)) | (1 << (fugue_sqlParser.FUNCTIONS - 128)) | (1 << (fugue_sqlParser.GLOBAL - 128)) | (1 << (fugue_sqlParser.GRANT - 128)) | (1 << (fugue_sqlParser.GROUP - 128)) | (1 << (fugue_sqlParser.GROUPING - 128)) | (1 << (fugue_sqlParser.HAVING - 128)) | (1 << (fugue_sqlParser.HOUR - 128)) | (1 << (fugue_sqlParser.IF - 128)) | (1 << (fugue_sqlParser.IGNORE - 128)) | (1 << (fugue_sqlParser.IMPORT - 128)) | (1 << (fugue_sqlParser.IN - 128)) | (1 << (fugue_sqlParser.INDEX - 128)) | (1 << (fugue_sqlParser.INDEXES - 128)) | (1 << (fugue_sqlParser.INNER - 128)) | (1 << (fugue_sqlParser.INPATH - 128)) | (1 << (fugue_sqlParser.INPUTFORMAT - 128)) | (1 << (fugue_sqlParser.INSERT - 128)) | (1 << (fugue_sqlParser.INTERSECT - 128)) | (1 << (fugue_sqlParser.INTERVAL - 128)) | (1 << (fugue_sqlParser.INTO - 128)) | (1 << (fugue_sqlParser.IS - 128)) | (1 << (fugue_sqlParser.ITEMS - 128)) | (1 << (fugue_sqlParser.JOIN - 128)) | (1 << (fugue_sqlParser.KEYS - 128)) | (1 << (fugue_sqlParser.LAST - 128)) | (1 << (fugue_sqlParser.LATERAL - 128)) | (1 << (fugue_sqlParser.LAZY - 128)) | (1 << (fugue_sqlParser.LEADING - 128)) | (1 << (fugue_sqlParser.LEFT - 128)) | (1 << (fugue_sqlParser.LIKE - 128)) | (1 << (fugue_sqlParser.LIMIT - 128)) | (1 << (fugue_sqlParser.LINES - 128)) | (1 << (fugue_sqlParser.LIST - 128)) | (1 << (fugue_sqlParser.LOAD - 128)) | (1 << (fugue_sqlParser.LOCAL - 128)) | (1 << (fugue_sqlParser.LOCATION - 128)) | (1 << (fugue_sqlParser.LOCK - 128)) | (1 << (fugue_sqlParser.LOCKS - 128)) | (1 << (fugue_sqlParser.LOGICAL - 128)) | (1 << (fugue_sqlParser.MACRO - 128)) | (1 << (fugue_sqlParser.MAP - 128)) | (1 << (fugue_sqlParser.MATCHED - 128)) | (1 << (fugue_sqlParser.MERGE - 128)) | (1 << (fugue_sqlParser.MINUTE - 128)) | (1 << (fugue_sqlParser.MONTH - 128)) | (1 << (fugue_sqlParser.MSCK - 128)) | (1 << (fugue_sqlParser.NAMESPACE - 128)) | (1 << (fugue_sqlParser.NAMESPACES - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (fugue_sqlParser.NATURAL - 192)) | (1 << (fugue_sqlParser.NO - 192)) | (1 << (fugue_sqlParser.NOT - 192)) | (1 << (fugue_sqlParser.THENULL - 192)) | (1 << (fugue_sqlParser.THENULLS - 192)) | (1 << (fugue_sqlParser.OF - 192)) | (1 << (fugue_sqlParser.ON - 192)) | (1 << (fugue_sqlParser.ONLY - 192)) | (1 << (fugue_sqlParser.OPTION - 192)) | (1 << (fugue_sqlParser.OPTIONS - 192)) | (1 << (fugue_sqlParser.OR - 192)) | (1 << (fugue_sqlParser.ORDER - 192)) | (1 << (fugue_sqlParser.OUT - 192)) | (1 << (fugue_sqlParser.OUTER - 192)) | (1 << (fugue_sqlParser.OUTPUTFORMAT - 192)) | (1 << (fugue_sqlParser.OVER - 192)) | (1 << (fugue_sqlParser.OVERLAPS - 192)) | (1 << (fugue_sqlParser.OVERLAY - 192)) | (1 << (fugue_sqlParser.OVERWRITE - 192)) | (1 << (fugue_sqlParser.PARTITION - 192)) | (1 << (fugue_sqlParser.PARTITIONED - 192)) | (1 << (fugue_sqlParser.PARTITIONS - 192)) | (1 << (fugue_sqlParser.PERCENTLIT - 192)) | (1 << (fugue_sqlParser.PIVOT - 192)) | (1 << (fugue_sqlParser.PLACING - 192)) | (1 << (fugue_sqlParser.POSITION - 192)) | (1 << (fugue_sqlParser.PRECEDING - 192)) | (1 << (fugue_sqlParser.PRIMARY - 192)) | (1 << (fugue_sqlParser.PRINCIPALS - 192)) | (1 << (fugue_sqlParser.PROPERTIES - 192)) | (1 << (fugue_sqlParser.PURGE - 192)) | (1 << (fugue_sqlParser.QUERY - 192)) | (1 << (fugue_sqlParser.RANGE - 192)) | (1 << (fugue_sqlParser.RECORDREADER - 192)) | (1 << (fugue_sqlParser.RECORDWRITER - 192)) | (1 << (fugue_sqlParser.RECOVER - 192)) | (1 << (fugue_sqlParser.REDUCE - 192)) | (1 << (fugue_sqlParser.REFERENCES - 192)) | (1 << (fugue_sqlParser.REFRESH - 192)) | (1 << (fugue_sqlParser.RENAME - 192)) | (1 << (fugue_sqlParser.REPAIR - 192)) | (1 << (fugue_sqlParser.REPLACE - 192)) | (1 << (fugue_sqlParser.RESET - 192)) | (1 << (fugue_sqlParser.RESTRICT - 192)) | (1 << (fugue_sqlParser.REVOKE - 192)) | (1 << (fugue_sqlParser.RIGHT - 192)) | (1 << (fugue_sqlParser.RLIKE - 192)) | (1 << (fugue_sqlParser.ROLE - 192)) | (1 << (fugue_sqlParser.ROLES - 192)) | (1 << (fugue_sqlParser.ROLLBACK - 192)) | (1 << (fugue_sqlParser.ROLLUP - 192)) | (1 << (fugue_sqlParser.ROW - 192)) | (1 << (fugue_sqlParser.ROWS - 192)) | (1 << (fugue_sqlParser.SCHEMA - 192)) | (1 << (fugue_sqlParser.SECOND - 192)) | (1 << (fugue_sqlParser.SELECT - 192)) | (1 << (fugue_sqlParser.SEMI - 192)) | (1 << (fugue_sqlParser.SEPARATED - 192)) | (1 << (fugue_sqlParser.SERDE - 192)) | (1 << (fugue_sqlParser.SERDEPROPERTIES - 192)) | (1 << (fugue_sqlParser.SESSION_USER - 192)) | (1 << (fugue_sqlParser.SET - 192)) | (1 << (fugue_sqlParser.SETMINUS - 192)) | (1 << (fugue_sqlParser.SETS - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (fugue_sqlParser.SHOW - 256)) | (1 << (fugue_sqlParser.SKEWED - 256)) | (1 << (fugue_sqlParser.SOME - 256)) | (1 << (fugue_sqlParser.SORT - 256)) | (1 << (fugue_sqlParser.SORTED - 256)) | (1 << (fugue_sqlParser.START - 256)) | (1 << (fugue_sqlParser.STATISTICS - 256)) | (1 << (fugue_sqlParser.STORED - 256)) | (1 << (fugue_sqlParser.STRATIFY - 256)) | (1 << (fugue_sqlParser.STRUCT - 256)) | (1 << (fugue_sqlParser.SUBSTR - 256)) | (1 << (fugue_sqlParser.SUBSTRING - 256)) | (1 << (fugue_sqlParser.TABLE - 256)) | (1 << (fugue_sqlParser.TABLES - 256)) | (1 << (fugue_sqlParser.TABLESAMPLE - 256)) | (1 << (fugue_sqlParser.TBLPROPERTIES - 256)) | (1 << (fugue_sqlParser.TEMPORARY - 256)) | (1 << (fugue_sqlParser.TERMINATED - 256)) | (1 << (fugue_sqlParser.THEN - 256)) | (1 << (fugue_sqlParser.TO - 256)) | (1 << (fugue_sqlParser.TOUCH - 256)) | (1 << (fugue_sqlParser.TRAILING - 256)) | (1 << (fugue_sqlParser.TRANSACTION - 256)) | (1 << (fugue_sqlParser.TRANSACTIONS - 256)) | (1 << (fugue_sqlParser.TRANSFORM - 256)) | (1 << (fugue_sqlParser.TRIM - 256)) | (1 << (fugue_sqlParser.TRUE - 256)) | (1 << (fugue_sqlParser.TRUNCATE - 256)) | (1 << (fugue_sqlParser.TYPE - 256)) | (1 << (fugue_sqlParser.UNARCHIVE - 256)) | (1 << (fugue_sqlParser.UNBOUNDED - 256)) | (1 << (fugue_sqlParser.UNCACHE - 256)) | (1 << (fugue_sqlParser.UNION - 256)) | (1 << (fugue_sqlParser.UNIQUE - 256)) | (1 << (fugue_sqlParser.UNKNOWN - 256)) | (1 << (fugue_sqlParser.UNLOCK - 256)) | (1 << (fugue_sqlParser.UNSET - 256)) | (1 << (fugue_sqlParser.UPDATE - 256)) | (1 << (fugue_sqlParser.USE - 256)) | (1 << (fugue_sqlParser.USER - 256)) | (1 << (fugue_sqlParser.USING - 256)) | (1 << (fugue_sqlParser.VALUES - 256)) | (1 << (fugue_sqlParser.VIEW - 256)) | (1 << (fugue_sqlParser.VIEWS - 256)) | (1 << (fugue_sqlParser.WHEN - 256)) | (1 << (fugue_sqlParser.WHERE - 256)) | (1 << (fugue_sqlParser.WINDOW - 256)) | (1 << (fugue_sqlParser.WITH - 256)) | (1 << (fugue_sqlParser.YEAR - 256)) | (1 << (fugue_sqlParser.PLUS - 256)) | (1 << (fugue_sqlParser.MINUS - 256)) | (1 << (fugue_sqlParser.ASTERISK - 256)) | (1 << (fugue_sqlParser.DIV - 256)))) != 0) or ((((_la - 320)) & ~0x3f) == 0 and ((1 << (_la - 320)) & ((1 << (fugue_sqlParser.TILDE - 320)) | (1 << (fugue_sqlParser.STRING - 320)) | (1 << (fugue_sqlParser.BIGINT_LITERAL - 320)) | (1 << (fugue_sqlParser.SMALLINT_LITERAL - 320)) | (1 << (fugue_sqlParser.TINYINT_LITERAL - 320)) | (1 << (fugue_sqlParser.INTEGER_VALUE - 320)) | (1 << (fugue_sqlParser.EXPONENT_VALUE - 320)) | (1 << (fugue_sqlParser.DECIMAL_VALUE - 320)) | (1 << (fugue_sqlParser.DOUBLE_LITERAL - 320)) | (1 << (fugue_sqlParser.BIGDECIMAL_LITERAL - 320)) | (1 << (fugue_sqlParser.IDENTIFIER - 320)) | (1 << (fugue_sqlParser.BACKQUOTED_IDENTIFIER - 320)))) != 0):
                    self.state = 2729
                    self.expression()
                    self.state = 2734
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==fugue_sqlParser.T__0:
                        self.state = 2730
                        self.match(fugue_sqlParser.T__0)
                        self.state = 2731
                        self.expression()
                        self.state = 2736
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 2739
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2740
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PivotClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.aggregates = None # NamedExpressionSeqContext
            self._pivotValue = None # PivotValueContext
            self.pivotValues = list() # of PivotValueContexts

        def PIVOT(self):
            return self.getToken(fugue_sqlParser.PIVOT, 0)

        def FOR(self):
            return self.getToken(fugue_sqlParser.FOR, 0)

        def pivotColumn(self):
            return self.getTypedRuleContext(fugue_sqlParser.PivotColumnContext,0)


        def IN(self):
            return self.getToken(fugue_sqlParser.IN, 0)

        def namedExpressionSeq(self):
            return self.getTypedRuleContext(fugue_sqlParser.NamedExpressionSeqContext,0)


        def pivotValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.PivotValueContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.PivotValueContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_pivotClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPivotClause" ):
                return visitor.visitPivotClause(self)
            else:
                return visitor.visitChildren(self)




    def pivotClause(self):

        localctx = fugue_sqlParser.PivotClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_pivotClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2743
            self.match(fugue_sqlParser.PIVOT)
            self.state = 2744
            self.match(fugue_sqlParser.T__2)
            self.state = 2745
            localctx.aggregates = self.namedExpressionSeq()
            self.state = 2746
            self.match(fugue_sqlParser.FOR)
            self.state = 2747
            self.pivotColumn()
            self.state = 2748
            self.match(fugue_sqlParser.IN)
            self.state = 2749
            self.match(fugue_sqlParser.T__2)
            self.state = 2750
            localctx._pivotValue = self.pivotValue()
            localctx.pivotValues.append(localctx._pivotValue)
            self.state = 2755
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==fugue_sqlParser.T__0:
                self.state = 2751
                self.match(fugue_sqlParser.T__0)
                self.state = 2752
                localctx._pivotValue = self.pivotValue()
                localctx.pivotValues.append(localctx._pivotValue)
                self.state = 2757
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2758
            self.match(fugue_sqlParser.T__3)
            self.state = 2759
            self.match(fugue_sqlParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PivotColumnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._identifier = None # IdentifierContext
            self.identifiers = list() # of IdentifierContexts

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_pivotColumn

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPivotColumn" ):
                return visitor.visitPivotColumn(self)
            else:
                return visitor.visitChildren(self)




    def pivotColumn(self):

        localctx = fugue_sqlParser.PivotColumnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_pivotColumn)
        self._la = 0 # Token type
        try:
            self.state = 2773
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [fugue_sqlParser.ADD, fugue_sqlParser.AFTER, fugue_sqlParser.ALL, fugue_sqlParser.ALTER, fugue_sqlParser.ANALYZE, fugue_sqlParser.AND, fugue_sqlParser.ANTI, fugue_sqlParser.ANY, fugue_sqlParser.ARCHIVE, fugue_sqlParser.ARRAY, fugue_sqlParser.AS, fugue_sqlParser.ASC, fugue_sqlParser.AT, fugue_sqlParser.AUTHORIZATION, fugue_sqlParser.BETWEEN, fugue_sqlParser.BOTH, fugue_sqlParser.BUCKET, fugue_sqlParser.BUCKETS, fugue_sqlParser.BY, fugue_sqlParser.CACHE, fugue_sqlParser.CASCADE, fugue_sqlParser.CASE, fugue_sqlParser.CAST, fugue_sqlParser.CHANGE, fugue_sqlParser.CHECK, fugue_sqlParser.CLEAR, fugue_sqlParser.CLUSTER, fugue_sqlParser.CLUSTERED, fugue_sqlParser.CODEGEN, fugue_sqlParser.COLLATE, fugue_sqlParser.COLLECTION, fugue_sqlParser.COLUMN, fugue_sqlParser.COLUMNS, fugue_sqlParser.COMMENT, fugue_sqlParser.COMMIT, fugue_sqlParser.COMPACT, fugue_sqlParser.COMPACTIONS, fugue_sqlParser.COMPUTE, fugue_sqlParser.CONCATENATE, fugue_sqlParser.CONSTRAINT, fugue_sqlParser.COST, fugue_sqlParser.CREATE, fugue_sqlParser.CROSS, fugue_sqlParser.CUBE, fugue_sqlParser.CURRENT, fugue_sqlParser.CURRENT_DATE, fugue_sqlParser.CURRENT_TIME, fugue_sqlParser.CURRENT_TIMESTAMP, fugue_sqlParser.CURRENT_USER, fugue_sqlParser.DATA, fugue_sqlParser.DATABASE, fugue_sqlParser.DATABASES, fugue_sqlParser.DAY, fugue_sqlParser.DBPROPERTIES, fugue_sqlParser.DEFINED, fugue_sqlParser.DELETE, fugue_sqlParser.DELIMITED, fugue_sqlParser.DESC, fugue_sqlParser.DESCRIBE, fugue_sqlParser.DFS, fugue_sqlParser.DIRECTORIES, fugue_sqlParser.DIRECTORY, fugue_sqlParser.DISTINCT, fugue_sqlParser.DISTRIBUTE, fugue_sqlParser.DROP, fugue_sqlParser.ELSE, fugue_sqlParser.END, fugue_sqlParser.ESCAPE, fugue_sqlParser.ESCAPED, fugue_sqlParser.EXCEPT, fugue_sqlParser.EXCHANGE, fugue_sqlParser.EXISTS, fugue_sqlParser.EXPLAIN, fugue_sqlParser.EXPORT, fugue_sqlParser.EXTENDED, fugue_sqlParser.EXTERNAL, fugue_sqlParser.EXTRACT, fugue_sqlParser.FALSE, fugue_sqlParser.FETCH, fugue_sqlParser.FIELDS, fugue_sqlParser.FILTER, fugue_sqlParser.FILEFORMAT, fugue_sqlParser.FIRST, fugue_sqlParser.FOLLOWING, fugue_sqlParser.FOR, fugue_sqlParser.FOREIGN, fugue_sqlParser.FORMAT, fugue_sqlParser.FORMATTED, fugue_sqlParser.FROM, fugue_sqlParser.FULL, fugue_sqlParser.FUNCTION, fugue_sqlParser.FUNCTIONS, fugue_sqlParser.GLOBAL, fugue_sqlParser.GRANT, fugue_sqlParser.GROUP, fugue_sqlParser.GROUPING, fugue_sqlParser.HAVING, fugue_sqlParser.HOUR, fugue_sqlParser.IF, fugue_sqlParser.IGNORE, fugue_sqlParser.IMPORT, fugue_sqlParser.IN, fugue_sqlParser.INDEX, fugue_sqlParser.INDEXES, fugue_sqlParser.INNER, fugue_sqlParser.INPATH, fugue_sqlParser.INPUTFORMAT, fugue_sqlParser.INSERT, fugue_sqlParser.INTERSECT, fugue_sqlParser.INTERVAL, fugue_sqlParser.INTO, fugue_sqlParser.IS, fugue_sqlParser.ITEMS, fugue_sqlParser.JOIN, fugue_sqlParser.KEYS, fugue_sqlParser.LAST, fugue_sqlParser.LATERAL, fugue_sqlParser.LAZY, fugue_sqlParser.LEADING, fugue_sqlParser.LEFT, fugue_sqlParser.LIKE, fugue_sqlParser.LIMIT, fugue_sqlParser.LINES, fugue_sqlParser.LIST, fugue_sqlParser.LOAD, fugue_sqlParser.LOCAL, fugue_sqlParser.LOCATION, fugue_sqlParser.LOCK, fugue_sqlParser.LOCKS, fugue_sqlParser.LOGICAL, fugue_sqlParser.MACRO, fugue_sqlParser.MAP, fugue_sqlParser.MATCHED, fugue_sqlParser.MERGE, fugue_sqlParser.MINUTE, fugue_sqlParser.MONTH, fugue_sqlParser.MSCK, fugue_sqlParser.NAMESPACE, fugue_sqlParser.NAMESPACES, fugue_sqlParser.NATURAL, fugue_sqlParser.NO, fugue_sqlParser.NOT, fugue_sqlParser.THENULL, fugue_sqlParser.THENULLS, fugue_sqlParser.OF, fugue_sqlParser.ON, fugue_sqlParser.ONLY, fugue_sqlParser.OPTION, fugue_sqlParser.OPTIONS, fugue_sqlParser.OR, fugue_sqlParser.ORDER, fugue_sqlParser.OUT, fugue_sqlParser.OUTER, fugue_sqlParser.OUTPUTFORMAT, fugue_sqlParser.OVER, fugue_sqlParser.OVERLAPS, fugue_sqlParser.OVERLAY, fugue_sqlParser.OVERWRITE, fugue_sqlParser.PARTITION, fugue_sqlParser.PARTITIONED, fugue_sqlParser.PARTITIONS, fugue_sqlParser.PERCENTLIT, fugue_sqlParser.PIVOT, fugue_sqlParser.PLACING, fugue_sqlParser.POSITION, fugue_sqlParser.PRECEDING, fugue_sqlParser.PRIMARY, fugue_sqlParser.PRINCIPALS, fugue_sqlParser.PROPERTIES, fugue_sqlParser.PURGE, fugue_sqlParser.QUERY, fugue_sqlParser.RANGE, fugue_sqlParser.RECORDREADER, fugue_sqlParser.RECORDWRITER, fugue_sqlParser.RECOVER, fugue_sqlParser.REDUCE, fugue_sqlParser.REFERENCES, fugue_sqlParser.REFRESH, fugue_sqlParser.RENAME, fugue_sqlParser.REPAIR, fugue_sqlParser.REPLACE, fugue_sqlParser.RESET, fugue_sqlParser.RESTRICT, fugue_sqlParser.REVOKE, fugue_sqlParser.RIGHT, fugue_sqlParser.RLIKE, fugue_sqlParser.ROLE, fugue_sqlParser.ROLES, fugue_sqlParser.ROLLBACK, fugue_sqlParser.ROLLUP, fugue_sqlParser.ROW, fugue_sqlParser.ROWS, fugue_sqlParser.SCHEMA, fugue_sqlParser.SECOND, fugue_sqlParser.SELECT, fugue_sqlParser.SEMI, fugue_sqlParser.SEPARATED, fugue_sqlParser.SERDE, fugue_sqlParser.SERDEPROPERTIES, fugue_sqlParser.SESSION_USER, fugue_sqlParser.SET, fugue_sqlParser.SETMINUS, fugue_sqlParser.SETS, fugue_sqlParser.SHOW, fugue_sqlParser.SKEWED, fugue_sqlParser.SOME, fugue_sqlParser.SORT, fugue_sqlParser.SORTED, fugue_sqlParser.START, fugue_sqlParser.STATISTICS, fugue_sqlParser.STORED, fugue_sqlParser.STRATIFY, fugue_sqlParser.STRUCT, fugue_sqlParser.SUBSTR, fugue_sqlParser.SUBSTRING, fugue_sqlParser.TABLE, fugue_sqlParser.TABLES, fugue_sqlParser.TABLESAMPLE, fugue_sqlParser.TBLPROPERTIES, fugue_sqlParser.TEMPORARY, fugue_sqlParser.TERMINATED, fugue_sqlParser.THEN, fugue_sqlParser.TO, fugue_sqlParser.TOUCH, fugue_sqlParser.TRAILING, fugue_sqlParser.TRANSACTION, fugue_sqlParser.TRANSACTIONS, fugue_sqlParser.TRANSFORM, fugue_sqlParser.TRIM, fugue_sqlParser.TRUE, fugue_sqlParser.TRUNCATE, fugue_sqlParser.TYPE, fugue_sqlParser.UNARCHIVE, fugue_sqlParser.UNBOUNDED, fugue_sqlParser.UNCACHE, fugue_sqlParser.UNION, fugue_sqlParser.UNIQUE, fugue_sqlParser.UNKNOWN, fugue_sqlParser.UNLOCK, fugue_sqlParser.UNSET, fugue_sqlParser.UPDATE, fugue_sqlParser.USE, fugue_sqlParser.USER, fugue_sqlParser.USING, fugue_sqlParser.VALUES, fugue_sqlParser.VIEW, fugue_sqlParser.VIEWS, fugue_sqlParser.WHEN, fugue_sqlParser.WHERE, fugue_sqlParser.WINDOW, fugue_sqlParser.WITH, fugue_sqlParser.YEAR, fugue_sqlParser.DIV, fugue_sqlParser.IDENTIFIER, fugue_sqlParser.BACKQUOTED_IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2761
                localctx._identifier = self.identifier()
                localctx.identifiers.append(localctx._identifier)
                pass
            elif token in [fugue_sqlParser.T__2]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2762
                self.match(fugue_sqlParser.T__2)
                self.state = 2763
                localctx._identifier = self.identifier()
                localctx.identifiers.append(localctx._identifier)
                self.state = 2768
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==fugue_sqlParser.T__0:
                    self.state = 2764
                    self.match(fugue_sqlParser.T__0)
                    self.state = 2765
                    localctx._identifier = self.identifier()
                    localctx.identifiers.append(localctx._identifier)
                    self.state = 2770
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2771
                self.match(fugue_sqlParser.T__3)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PivotValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,0)


        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)


        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_pivotValue

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPivotValue" ):
                return visitor.visitPivotValue(self)
            else:
                return visitor.visitChildren(self)




    def pivotValue(self):

        localctx = fugue_sqlParser.PivotValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_pivotValue)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2775
            self.expression()
            self.state = 2780
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 53)) & ~0x3f) == 0 and ((1 << (_la - 53)) & ((1 << (fugue_sqlParser.ADD - 53)) | (1 << (fugue_sqlParser.AFTER - 53)) | (1 << (fugue_sqlParser.ALL - 53)) | (1 << (fugue_sqlParser.ALTER - 53)) | (1 << (fugue_sqlParser.ANALYZE - 53)) | (1 << (fugue_sqlParser.AND - 53)) | (1 << (fugue_sqlParser.ANTI - 53)) | (1 << (fugue_sqlParser.ANY - 53)) | (1 << (fugue_sqlParser.ARCHIVE - 53)) | (1 << (fugue_sqlParser.ARRAY - 53)) | (1 << (fugue_sqlParser.AS - 53)) | (1 << (fugue_sqlParser.ASC - 53)) | (1 << (fugue_sqlParser.AT - 53)) | (1 << (fugue_sqlParser.AUTHORIZATION - 53)) | (1 << (fugue_sqlParser.BETWEEN - 53)) | (1 << (fugue_sqlParser.BOTH - 53)) | (1 << (fugue_sqlParser.BUCKET - 53)) | (1 << (fugue_sqlParser.BUCKETS - 53)) | (1 << (fugue_sqlParser.BY - 53)) | (1 << (fugue_sqlParser.CACHE - 53)) | (1 << (fugue_sqlParser.CASCADE - 53)) | (1 << (fugue_sqlParser.CASE - 53)) | (1 << (fugue_sqlParser.CAST - 53)) | (1 << (fugue_sqlParser.CHANGE - 53)) | (1 << (fugue_sqlParser.CHECK - 53)) | (1 << (fugue_sqlParser.CLEAR - 53)) | (1 << (fugue_sqlParser.CLUSTER - 53)) | (1 << (fugue_sqlParser.CLUSTERED - 53)) | (1 << (fugue_sqlParser.CODEGEN - 53)) | (1 << (fugue_sqlParser.COLLATE - 53)) | (1 << (fugue_sqlParser.COLLECTION - 53)) | (1 << (fugue_sqlParser.COLUMN - 53)) | (1 << (fugue_sqlParser.COLUMNS - 53)) | (1 << (fugue_sqlParser.COMMENT - 53)) | (1 << (fugue_sqlParser.COMMIT - 53)) | (1 << (fugue_sqlParser.COMPACT - 53)) | (1 << (fugue_sqlParser.COMPACTIONS - 53)) | (1 << (fugue_sqlParser.COMPUTE - 53)) | (1 << (fugue_sqlParser.CONCATENATE - 53)) | (1 << (fugue_sqlParser.CONSTRAINT - 53)) | (1 << (fugue_sqlParser.COST - 53)) | (1 << (fugue_sqlParser.CREATE - 53)) | (1 << (fugue_sqlParser.CROSS - 53)) | (1 << (fugue_sqlParser.CUBE - 53)) | (1 << (fugue_sqlParser.CURRENT - 53)) | (1 << (fugue_sqlParser.CURRENT_DATE - 53)) | (1 << (fugue_sqlParser.CURRENT_TIME - 53)) | (1 << (fugue_sqlParser.CURRENT_TIMESTAMP - 53)) | (1 << (fugue_sqlParser.CURRENT_USER - 53)) | (1 << (fugue_sqlParser.DATA - 53)) | (1 << (fugue_sqlParser.DATABASE - 53)) | (1 << (fugue_sqlParser.DATABASES - 53)) | (1 << (fugue_sqlParser.DAY - 53)) | (1 << (fugue_sqlParser.DBPROPERTIES - 53)) | (1 << (fugue_sqlParser.DEFINED - 53)) | (1 << (fugue_sqlParser.DELETE - 53)) | (1 << (fugue_sqlParser.DELIMITED - 53)) | (1 << (fugue_sqlParser.DESC - 53)) | (1 << (fugue_sqlParser.DESCRIBE - 53)) | (1 << (fugue_sqlParser.DFS - 53)) | (1 << (fugue_sqlParser.DIRECTORIES - 53)) | (1 << (fugue_sqlParser.DIRECTORY - 53)) | (1 << (fugue_sqlParser.DISTINCT - 53)) | (1 << (fugue_sqlParser.DISTRIBUTE - 53)))) != 0) or ((((_la - 117)) & ~0x3f) == 0 and ((1 << (_la - 117)) & ((1 << (fugue_sqlParser.DROP - 117)) | (1 << (fugue_sqlParser.ELSE - 117)) | (1 << (fugue_sqlParser.END - 117)) | (1 << (fugue_sqlParser.ESCAPE - 117)) | (1 << (fugue_sqlParser.ESCAPED - 117)) | (1 << (fugue_sqlParser.EXCEPT - 117)) | (1 << (fugue_sqlParser.EXCHANGE - 117)) | (1 << (fugue_sqlParser.EXISTS - 117)) | (1 << (fugue_sqlParser.EXPLAIN - 117)) | (1 << (fugue_sqlParser.EXPORT - 117)) | (1 << (fugue_sqlParser.EXTENDED - 117)) | (1 << (fugue_sqlParser.EXTERNAL - 117)) | (1 << (fugue_sqlParser.EXTRACT - 117)) | (1 << (fugue_sqlParser.FALSE - 117)) | (1 << (fugue_sqlParser.FETCH - 117)) | (1 << (fugue_sqlParser.FIELDS - 117)) | (1 << (fugue_sqlParser.FILTER - 117)) | (1 << (fugue_sqlParser.FILEFORMAT - 117)) | (1 << (fugue_sqlParser.FIRST - 117)) | (1 << (fugue_sqlParser.FOLLOWING - 117)) | (1 << (fugue_sqlParser.FOR - 117)) | (1 << (fugue_sqlParser.FOREIGN - 117)) | (1 << (fugue_sqlParser.FORMAT - 117)) | (1 << (fugue_sqlParser.FORMATTED - 117)) | (1 << (fugue_sqlParser.FROM - 117)) | (1 << (fugue_sqlParser.FULL - 117)) | (1 << (fugue_sqlParser.FUNCTION - 117)) | (1 << (fugue_sqlParser.FUNCTIONS - 117)) | (1 << (fugue_sqlParser.GLOBAL - 117)) | (1 << (fugue_sqlParser.GRANT - 117)) | (1 << (fugue_sqlParser.GROUP - 117)) | (1 << (fugue_sqlParser.GROUPING - 117)) | (1 << (fugue_sqlParser.HAVING - 117)) | (1 << (fugue_sqlParser.HOUR - 117)) | (1 << (fugue_sqlParser.IF - 117)) | (1 << (fugue_sqlParser.IGNORE - 117)) | (1 << (fugue_sqlParser.IMPORT - 117)) | (1 << (fugue_sqlParser.IN - 117)) | (1 << (fugue_sqlParser.INDEX - 117)) | (1 << (fugue_sqlParser.INDEXES - 117)) | (1 << (fugue_sqlParser.INNER - 117)) | (1 << (fugue_sqlParser.INPATH - 117)) | (1 << (fugue_sqlParser.INPUTFORMAT - 117)) | (1 << (fugue_sqlParser.INSERT - 117)) | (1 << (fugue_sqlParser.INTERSECT - 117)) | (1 << (fugue_sqlParser.INTERVAL - 117)) | (1 << (fugue_sqlParser.INTO - 117)) | (1 << (fugue_sqlParser.IS - 117)) | (1 << (fugue_sqlParser.ITEMS - 117)) | (1 << (fugue_sqlParser.JOIN - 117)) | (1 << (fugue_sqlParser.KEYS - 117)) | (1 << (fugue_sqlParser.LAST - 117)) | (1 << (fugue_sqlParser.LATERAL - 117)) | (1 << (fugue_sqlParser.LAZY - 117)) | (1 << (fugue_sqlParser.LEADING - 117)) | (1 << (fugue_sqlParser.LEFT - 117)) | (1 << (fugue_sqlParser.LIKE - 117)) | (1 << (fugue_sqlParser.LIMIT - 117)) | (1 << (fugue_sqlParser.LINES - 117)) | (1 << (fugue_sqlParser.LIST - 117)) | (1 << (fugue_sqlParser.LOAD - 117)) | (1 << (fugue_sqlParser.LOCAL - 117)) | (1 << (fugue_sqlParser.LOCATION - 117)) | (1 << (fugue_sqlParser.LOCK - 117)))) != 0) or ((((_la - 181)) & ~0x3f) == 0 and ((1 << (_la - 181)) & ((1 << (fugue_sqlParser.LOCKS - 181)) | (1 << (fugue_sqlParser.LOGICAL - 181)) | (1 << (fugue_sqlParser.MACRO - 181)) | (1 << (fugue_sqlParser.MAP - 181)) | (1 << (fugue_sqlParser.MATCHED - 181)) | (1 << (fugue_sqlParser.MERGE - 181)) | (1 << (fugue_sqlParser.MINUTE - 181)) | (1 << (fugue_sqlParser.MONTH - 181)) | (1 << (fugue_sqlParser.MSCK - 181)) | (1 << (fugue_sqlParser.NAMESPACE - 181)) | (1 << (fugue_sqlParser.NAMESPACES - 181)) | (1 << (fugue_sqlParser.NATURAL - 181)) | (1 << (fugue_sqlParser.NO - 181)) | (1 << (fugue_sqlParser.NOT - 181)) | (1 << (fugue_sqlParser.THENULL - 181)) | (1 << (fugue_sqlParser.THENULLS - 181)) | (1 << (fugue_sqlParser.OF - 181)) | (1 << (fugue_sqlParser.ON - 181)) | (1 << (fugue_sqlParser.ONLY - 181)) | (1 << (fugue_sqlParser.OPTION - 181)) | (1 << (fugue_sqlParser.OPTIONS - 181)) | (1 << (fugue_sqlParser.OR - 181)) | (1 << (fugue_sqlParser.ORDER - 181)) | (1 << (fugue_sqlParser.OUT - 181)) | (1 << (fugue_sqlParser.OUTER - 181)) | (1 << (fugue_sqlParser.OUTPUTFORMAT - 181)) | (1 << (fugue_sqlParser.OVER - 181)) | (1 << (fugue_sqlParser.OVERLAPS - 181)) | (1 << (fugue_sqlParser.OVERLAY - 181)) | (1 << (fugue_sqlParser.OVERWRITE - 181)) | (1 << (fugue_sqlParser.PARTITION - 181)) | (1 << (fugue_sqlParser.PARTITIONED - 181)) | (1 << (fugue_sqlParser.PARTITIONS - 181)) | (1 << (fugue_sqlParser.PERCENTLIT - 181)) | (1 << (fugue_sqlParser.PIVOT - 181)) | (1 << (fugue_sqlParser.PLACING - 181)) | (1 << (fugue_sqlParser.POSITION - 181)) | (1 << (fugue_sqlParser.PRECEDING - 181)) | (1 << (fugue_sqlParser.PRIMARY - 181)) | (1 << (fugue_sqlParser.PRINCIPALS - 181)) | (1 << (fugue_sqlParser.PROPERTIES - 181)) | (1 << (fugue_sqlParser.PURGE - 181)) | (1 << (fugue_sqlParser.QUERY - 181)) | (1 << (fugue_sqlParser.RANGE - 181)) | (1 << (fugue_sqlParser.RECORDREADER - 181)) | (1 << (fugue_sqlParser.RECORDWRITER - 181)) | (1 << (fugue_sqlParser.RECOVER - 181)) | (1 << (fugue_sqlParser.REDUCE - 181)) | (1 << (fugue_sqlParser.REFERENCES - 181)) | (1 << (fugue_sqlParser.REFRESH - 181)) | (1 << (fugue_sqlParser.RENAME - 181)) | (1 << (fugue_sqlParser.REPAIR - 181)) | (1 << (fugue_sqlParser.REPLACE - 181)) | (1 << (fugue_sqlParser.RESET - 181)) | (1 << (fugue_sqlParser.RESTRICT - 181)) | (1 << (fugue_sqlParser.REVOKE - 181)) | (1 << (fugue_sqlParser.RIGHT - 181)) | (1 << (fugue_sqlParser.RLIKE - 181)) | (1 << (fugue_sqlParser.ROLE - 181)) | (1 << (fugue_sqlParser.ROLES - 181)) | (1 << (fugue_sqlParser.ROLLBACK - 181)) | (1 << (fugue_sqlParser.ROLLUP - 181)) | (1 << (fugue_sqlParser.ROW - 181)) | (1 << (fugue_sqlParser.ROWS - 181)))) != 0) or ((((_la - 245)) & ~0x3f) == 0 and ((1 << (_la - 245)) & ((1 << (fugue_sqlParser.SCHEMA - 245)) | (1 << (fugue_sqlParser.SECOND - 245)) | (1 << (fugue_sqlParser.SELECT - 245)) | (1 << (fugue_sqlParser.SEMI - 245)) | (1 << (fugue_sqlParser.SEPARATED - 245)) | (1 << (fugue_sqlParser.SERDE - 245)) | (1 << (fugue_sqlParser.SERDEPROPERTIES - 245)) | (1 << (fugue_sqlParser.SESSION_USER - 245)) | (1 << (fugue_sqlParser.SET - 245)) | (1 << (fugue_sqlParser.SETMINUS - 245)) | (1 << (fugue_sqlParser.SETS - 245)) | (1 << (fugue_sqlParser.SHOW - 245)) | (1 << (fugue_sqlParser.SKEWED - 245)) | (1 << (fugue_sqlParser.SOME - 245)) | (1 << (fugue_sqlParser.SORT - 245)) | (1 << (fugue_sqlParser.SORTED - 245)) | (1 << (fugue_sqlParser.START - 245)) | (1 << (fugue_sqlParser.STATISTICS - 245)) | (1 << (fugue_sqlParser.STORED - 245)) | (1 << (fugue_sqlParser.STRATIFY - 245)) | (1 << (fugue_sqlParser.STRUCT - 245)) | (1 << (fugue_sqlParser.SUBSTR - 245)) | (1 << (fugue_sqlParser.SUBSTRING - 245)) | (1 << (fugue_sqlParser.TABLE - 245)) | (1 << (fugue_sqlParser.TABLES - 245)) | (1 << (fugue_sqlParser.TABLESAMPLE - 245)) | (1 << (fugue_sqlParser.TBLPROPERTIES - 245)) | (1 << (fugue_sqlParser.TEMPORARY - 245)) | (1 << (fugue_sqlParser.TERMINATED - 245)) | (1 << (fugue_sqlParser.THEN - 245)) | (1 << (fugue_sqlParser.TO - 245)) | (1 << (fugue_sqlParser.TOUCH - 245)) | (1 << (fugue_sqlParser.TRAILING - 245)) | (1 << (fugue_sqlParser.TRANSACTION - 245)) | (1 << (fugue_sqlParser.TRANSACTIONS - 245)) | (1 << (fugue_sqlParser.TRANSFORM - 245)) | (1 << (fugue_sqlParser.TRIM - 245)) | (1 << (fugue_sqlParser.TRUE - 245)) | (1 << (fugue_sqlParser.TRUNCATE - 245)) | (1 << (fugue_sqlParser.TYPE - 245)) | (1 << (fugue_sqlParser.UNARCHIVE - 245)) | (1 << (fugue_sqlParser.UNBOUNDED - 245)) | (1 << (fugue_sqlParser.UNCACHE - 245)) | (1 << (fugue_sqlParser.UNION - 245)) | (1 << (fugue_sqlParser.UNIQUE - 245)) | (1 << (fugue_sqlParser.UNKNOWN - 245)) | (1 << (fugue_sqlParser.UNLOCK - 245)) | (1 << (fugue_sqlParser.UNSET - 245)) | (1 << (fugue_sqlParser.UPDATE - 245)) | (1 << (fugue_sqlParser.USE - 245)) | (1 << (fugue_sqlParser.USER - 245)) | (1 << (fugue_sqlParser.USING - 245)) | (1 << (fugue_sqlParser.VALUES - 245)) | (1 << (fugue_sqlParser.VIEW - 245)) | (1 << (fugue_sqlParser.VIEWS - 245)) | (1 << (fugue_sqlParser.WHEN - 245)) | (1 << (fugue_sqlParser.WHERE - 245)) | (1 << (fugue_sqlParser.WINDOW - 245)) | (1 << (fugue_sqlParser.WITH - 245)) | (1 << (fugue_sqlParser.YEAR - 245)))) != 0) or ((((_la - 319)) & ~0x3f) == 0 and ((1 << (_la - 319)) & ((1 << (fugue_sqlParser.DIV - 319)) | (1 << (fugue_sqlParser.IDENTIFIER - 319)) | (1 << (fugue_sqlParser.BACKQUOTED_IDENTIFIER - 319)))) != 0):
                self.state = 2777
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,361,self._ctx)
                if la_ == 1:
                    self.state = 2776
                    self.match(fugue_sqlParser.AS)


                self.state = 2779
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LateralViewContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.tblName = None # IdentifierContext
            self._identifier = None # IdentifierContext
            self.colName = list() # of IdentifierContexts

        def LATERAL(self):
            return self.getToken(fugue_sqlParser.LATERAL, 0)

        def VIEW(self):
            return self.getToken(fugue_sqlParser.VIEW, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(fugue_sqlParser.QualifiedNameContext,0)


        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,i)


        def OUTER(self):
            return self.getToken(fugue_sqlParser.OUTER, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,i)


        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_lateralView

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLateralView" ):
                return visitor.visitLateralView(self)
            else:
                return visitor.visitChildren(self)




    def lateralView(self):

        localctx = fugue_sqlParser.LateralViewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_lateralView)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2782
            self.match(fugue_sqlParser.LATERAL)
            self.state = 2783
            self.match(fugue_sqlParser.VIEW)
            self.state = 2785
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,363,self._ctx)
            if la_ == 1:
                self.state = 2784
                self.match(fugue_sqlParser.OUTER)


            self.state = 2787
            self.qualifiedName()
            self.state = 2788
            self.match(fugue_sqlParser.T__2)
            self.state = 2797
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << fugue_sqlParser.T__2) | (1 << fugue_sqlParser.ADD) | (1 << fugue_sqlParser.AFTER) | (1 << fugue_sqlParser.ALL) | (1 << fugue_sqlParser.ALTER) | (1 << fugue_sqlParser.ANALYZE) | (1 << fugue_sqlParser.AND) | (1 << fugue_sqlParser.ANTI) | (1 << fugue_sqlParser.ANY) | (1 << fugue_sqlParser.ARCHIVE) | (1 << fugue_sqlParser.ARRAY) | (1 << fugue_sqlParser.AS))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (fugue_sqlParser.ASC - 64)) | (1 << (fugue_sqlParser.AT - 64)) | (1 << (fugue_sqlParser.AUTHORIZATION - 64)) | (1 << (fugue_sqlParser.BETWEEN - 64)) | (1 << (fugue_sqlParser.BOTH - 64)) | (1 << (fugue_sqlParser.BUCKET - 64)) | (1 << (fugue_sqlParser.BUCKETS - 64)) | (1 << (fugue_sqlParser.BY - 64)) | (1 << (fugue_sqlParser.CACHE - 64)) | (1 << (fugue_sqlParser.CASCADE - 64)) | (1 << (fugue_sqlParser.CASE - 64)) | (1 << (fugue_sqlParser.CAST - 64)) | (1 << (fugue_sqlParser.CHANGE - 64)) | (1 << (fugue_sqlParser.CHECK - 64)) | (1 << (fugue_sqlParser.CLEAR - 64)) | (1 << (fugue_sqlParser.CLUSTER - 64)) | (1 << (fugue_sqlParser.CLUSTERED - 64)) | (1 << (fugue_sqlParser.CODEGEN - 64)) | (1 << (fugue_sqlParser.COLLATE - 64)) | (1 << (fugue_sqlParser.COLLECTION - 64)) | (1 << (fugue_sqlParser.COLUMN - 64)) | (1 << (fugue_sqlParser.COLUMNS - 64)) | (1 << (fugue_sqlParser.COMMENT - 64)) | (1 << (fugue_sqlParser.COMMIT - 64)) | (1 << (fugue_sqlParser.COMPACT - 64)) | (1 << (fugue_sqlParser.COMPACTIONS - 64)) | (1 << (fugue_sqlParser.COMPUTE - 64)) | (1 << (fugue_sqlParser.CONCATENATE - 64)) | (1 << (fugue_sqlParser.CONSTRAINT - 64)) | (1 << (fugue_sqlParser.COST - 64)) | (1 << (fugue_sqlParser.CREATE - 64)) | (1 << (fugue_sqlParser.CROSS - 64)) | (1 << (fugue_sqlParser.CUBE - 64)) | (1 << (fugue_sqlParser.CURRENT - 64)) | (1 << (fugue_sqlParser.CURRENT_DATE - 64)) | (1 << (fugue_sqlParser.CURRENT_TIME - 64)) | (1 << (fugue_sqlParser.CURRENT_TIMESTAMP - 64)) | (1 << (fugue_sqlParser.CURRENT_USER - 64)) | (1 << (fugue_sqlParser.DATA - 64)) | (1 << (fugue_sqlParser.DATABASE - 64)) | (1 << (fugue_sqlParser.DATABASES - 64)) | (1 << (fugue_sqlParser.DAY - 64)) | (1 << (fugue_sqlParser.DBPROPERTIES - 64)) | (1 << (fugue_sqlParser.DEFINED - 64)) | (1 << (fugue_sqlParser.DELETE - 64)) | (1 << (fugue_sqlParser.DELIMITED - 64)) | (1 << (fugue_sqlParser.DESC - 64)) | (1 << (fugue_sqlParser.DESCRIBE - 64)) | (1 << (fugue_sqlParser.DFS - 64)) | (1 << (fugue_sqlParser.DIRECTORIES - 64)) | (1 << (fugue_sqlParser.DIRECTORY - 64)) | (1 << (fugue_sqlParser.DISTINCT - 64)) | (1 << (fugue_sqlParser.DISTRIBUTE - 64)) | (1 << (fugue_sqlParser.DROP - 64)) | (1 << (fugue_sqlParser.ELSE - 64)) | (1 << (fugue_sqlParser.END - 64)) | (1 << (fugue_sqlParser.ESCAPE - 64)) | (1 << (fugue_sqlParser.ESCAPED - 64)) | (1 << (fugue_sqlParser.EXCEPT - 64)) | (1 << (fugue_sqlParser.EXCHANGE - 64)) | (1 << (fugue_sqlParser.EXISTS - 64)) | (1 << (fugue_sqlParser.EXPLAIN - 64)) | (1 << (fugue_sqlParser.EXPORT - 64)) | (1 << (fugue_sqlParser.EXTENDED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (fugue_sqlParser.EXTERNAL - 128)) | (1 << (fugue_sqlParser.EXTRACT - 128)) | (1 << (fugue_sqlParser.FALSE - 128)) | (1 << (fugue_sqlParser.FETCH - 128)) | (1 << (fugue_sqlParser.FIELDS - 128)) | (1 << (fugue_sqlParser.FILTER - 128)) | (1 << (fugue_sqlParser.FILEFORMAT - 128)) | (1 << (fugue_sqlParser.FIRST - 128)) | (1 << (fugue_sqlParser.FOLLOWING - 128)) | (1 << (fugue_sqlParser.FOR - 128)) | (1 << (fugue_sqlParser.FOREIGN - 128)) | (1 << (fugue_sqlParser.FORMAT - 128)) | (1 << (fugue_sqlParser.FORMATTED - 128)) | (1 << (fugue_sqlParser.FROM - 128)) | (1 << (fugue_sqlParser.FULL - 128)) | (1 << (fugue_sqlParser.FUNCTION - 128)) | (1 << (fugue_sqlParser.FUNCTIONS - 128)) | (1 << (fugue_sqlParser.GLOBAL - 128)) | (1 << (fugue_sqlParser.GRANT - 128)) | (1 << (fugue_sqlParser.GROUP - 128)) | (1 << (fugue_sqlParser.GROUPING - 128)) | (1 << (fugue_sqlParser.HAVING - 128)) | (1 << (fugue_sqlParser.HOUR - 128)) | (1 << (fugue_sqlParser.IF - 128)) | (1 << (fugue_sqlParser.IGNORE - 128)) | (1 << (fugue_sqlParser.IMPORT - 128)) | (1 << (fugue_sqlParser.IN - 128)) | (1 << (fugue_sqlParser.INDEX - 128)) | (1 << (fugue_sqlParser.INDEXES - 128)) | (1 << (fugue_sqlParser.INNER - 128)) | (1 << (fugue_sqlParser.INPATH - 128)) | (1 << (fugue_sqlParser.INPUTFORMAT - 128)) | (1 << (fugue_sqlParser.INSERT - 128)) | (1 << (fugue_sqlParser.INTERSECT - 128)) | (1 << (fugue_sqlParser.INTERVAL - 128)) | (1 << (fugue_sqlParser.INTO - 128)) | (1 << (fugue_sqlParser.IS - 128)) | (1 << (fugue_sqlParser.ITEMS - 128)) | (1 << (fugue_sqlParser.JOIN - 128)) | (1 << (fugue_sqlParser.KEYS - 128)) | (1 << (fugue_sqlParser.LAST - 128)) | (1 << (fugue_sqlParser.LATERAL - 128)) | (1 << (fugue_sqlParser.LAZY - 128)) | (1 << (fugue_sqlParser.LEADING - 128)) | (1 << (fugue_sqlParser.LEFT - 128)) | (1 << (fugue_sqlParser.LIKE - 128)) | (1 << (fugue_sqlParser.LIMIT - 128)) | (1 << (fugue_sqlParser.LINES - 128)) | (1 << (fugue_sqlParser.LIST - 128)) | (1 << (fugue_sqlParser.LOAD - 128)) | (1 << (fugue_sqlParser.LOCAL - 128)) | (1 << (fugue_sqlParser.LOCATION - 128)) | (1 << (fugue_sqlParser.LOCK - 128)) | (1 << (fugue_sqlParser.LOCKS - 128)) | (1 << (fugue_sqlParser.LOGICAL - 128)) | (1 << (fugue_sqlParser.MACRO - 128)) | (1 << (fugue_sqlParser.MAP - 128)) | (1 << (fugue_sqlParser.MATCHED - 128)) | (1 << (fugue_sqlParser.MERGE - 128)) | (1 << (fugue_sqlParser.MINUTE - 128)) | (1 << (fugue_sqlParser.MONTH - 128)) | (1 << (fugue_sqlParser.MSCK - 128)) | (1 << (fugue_sqlParser.NAMESPACE - 128)) | (1 << (fugue_sqlParser.NAMESPACES - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (fugue_sqlParser.NATURAL - 192)) | (1 << (fugue_sqlParser.NO - 192)) | (1 << (fugue_sqlParser.NOT - 192)) | (1 << (fugue_sqlParser.THENULL - 192)) | (1 << (fugue_sqlParser.THENULLS - 192)) | (1 << (fugue_sqlParser.OF - 192)) | (1 << (fugue_sqlParser.ON - 192)) | (1 << (fugue_sqlParser.ONLY - 192)) | (1 << (fugue_sqlParser.OPTION - 192)) | (1 << (fugue_sqlParser.OPTIONS - 192)) | (1 << (fugue_sqlParser.OR - 192)) | (1 << (fugue_sqlParser.ORDER - 192)) | (1 << (fugue_sqlParser.OUT - 192)) | (1 << (fugue_sqlParser.OUTER - 192)) | (1 << (fugue_sqlParser.OUTPUTFORMAT - 192)) | (1 << (fugue_sqlParser.OVER - 192)) | (1 << (fugue_sqlParser.OVERLAPS - 192)) | (1 << (fugue_sqlParser.OVERLAY - 192)) | (1 << (fugue_sqlParser.OVERWRITE - 192)) | (1 << (fugue_sqlParser.PARTITION - 192)) | (1 << (fugue_sqlParser.PARTITIONED - 192)) | (1 << (fugue_sqlParser.PARTITIONS - 192)) | (1 << (fugue_sqlParser.PERCENTLIT - 192)) | (1 << (fugue_sqlParser.PIVOT - 192)) | (1 << (fugue_sqlParser.PLACING - 192)) | (1 << (fugue_sqlParser.POSITION - 192)) | (1 << (fugue_sqlParser.PRECEDING - 192)) | (1 << (fugue_sqlParser.PRIMARY - 192)) | (1 << (fugue_sqlParser.PRINCIPALS - 192)) | (1 << (fugue_sqlParser.PROPERTIES - 192)) | (1 << (fugue_sqlParser.PURGE - 192)) | (1 << (fugue_sqlParser.QUERY - 192)) | (1 << (fugue_sqlParser.RANGE - 192)) | (1 << (fugue_sqlParser.RECORDREADER - 192)) | (1 << (fugue_sqlParser.RECORDWRITER - 192)) | (1 << (fugue_sqlParser.RECOVER - 192)) | (1 << (fugue_sqlParser.REDUCE - 192)) | (1 << (fugue_sqlParser.REFERENCES - 192)) | (1 << (fugue_sqlParser.REFRESH - 192)) | (1 << (fugue_sqlParser.RENAME - 192)) | (1 << (fugue_sqlParser.REPAIR - 192)) | (1 << (fugue_sqlParser.REPLACE - 192)) | (1 << (fugue_sqlParser.RESET - 192)) | (1 << (fugue_sqlParser.RESTRICT - 192)) | (1 << (fugue_sqlParser.REVOKE - 192)) | (1 << (fugue_sqlParser.RIGHT - 192)) | (1 << (fugue_sqlParser.RLIKE - 192)) | (1 << (fugue_sqlParser.ROLE - 192)) | (1 << (fugue_sqlParser.ROLES - 192)) | (1 << (fugue_sqlParser.ROLLBACK - 192)) | (1 << (fugue_sqlParser.ROLLUP - 192)) | (1 << (fugue_sqlParser.ROW - 192)) | (1 << (fugue_sqlParser.ROWS - 192)) | (1 << (fugue_sqlParser.SCHEMA - 192)) | (1 << (fugue_sqlParser.SECOND - 192)) | (1 << (fugue_sqlParser.SELECT - 192)) | (1 << (fugue_sqlParser.SEMI - 192)) | (1 << (fugue_sqlParser.SEPARATED - 192)) | (1 << (fugue_sqlParser.SERDE - 192)) | (1 << (fugue_sqlParser.SERDEPROPERTIES - 192)) | (1 << (fugue_sqlParser.SESSION_USER - 192)) | (1 << (fugue_sqlParser.SET - 192)) | (1 << (fugue_sqlParser.SETMINUS - 192)) | (1 << (fugue_sqlParser.SETS - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (fugue_sqlParser.SHOW - 256)) | (1 << (fugue_sqlParser.SKEWED - 256)) | (1 << (fugue_sqlParser.SOME - 256)) | (1 << (fugue_sqlParser.SORT - 256)) | (1 << (fugue_sqlParser.SORTED - 256)) | (1 << (fugue_sqlParser.START - 256)) | (1 << (fugue_sqlParser.STATISTICS - 256)) | (1 << (fugue_sqlParser.STORED - 256)) | (1 << (fugue_sqlParser.STRATIFY - 256)) | (1 << (fugue_sqlParser.STRUCT - 256)) | (1 << (fugue_sqlParser.SUBSTR - 256)) | (1 << (fugue_sqlParser.SUBSTRING - 256)) | (1 << (fugue_sqlParser.TABLE - 256)) | (1 << (fugue_sqlParser.TABLES - 256)) | (1 << (fugue_sqlParser.TABLESAMPLE - 256)) | (1 << (fugue_sqlParser.TBLPROPERTIES - 256)) | (1 << (fugue_sqlParser.TEMPORARY - 256)) | (1 << (fugue_sqlParser.TERMINATED - 256)) | (1 << (fugue_sqlParser.THEN - 256)) | (1 << (fugue_sqlParser.TO - 256)) | (1 << (fugue_sqlParser.TOUCH - 256)) | (1 << (fugue_sqlParser.TRAILING - 256)) | (1 << (fugue_sqlParser.TRANSACTION - 256)) | (1 << (fugue_sqlParser.TRANSACTIONS - 256)) | (1 << (fugue_sqlParser.TRANSFORM - 256)) | (1 << (fugue_sqlParser.TRIM - 256)) | (1 << (fugue_sqlParser.TRUE - 256)) | (1 << (fugue_sqlParser.TRUNCATE - 256)) | (1 << (fugue_sqlParser.TYPE - 256)) | (1 << (fugue_sqlParser.UNARCHIVE - 256)) | (1 << (fugue_sqlParser.UNBOUNDED - 256)) | (1 << (fugue_sqlParser.UNCACHE - 256)) | (1 << (fugue_sqlParser.UNION - 256)) | (1 << (fugue_sqlParser.UNIQUE - 256)) | (1 << (fugue_sqlParser.UNKNOWN - 256)) | (1 << (fugue_sqlParser.UNLOCK - 256)) | (1 << (fugue_sqlParser.UNSET - 256)) | (1 << (fugue_sqlParser.UPDATE - 256)) | (1 << (fugue_sqlParser.USE - 256)) | (1 << (fugue_sqlParser.USER - 256)) | (1 << (fugue_sqlParser.USING - 256)) | (1 << (fugue_sqlParser.VALUES - 256)) | (1 << (fugue_sqlParser.VIEW - 256)) | (1 << (fugue_sqlParser.VIEWS - 256)) | (1 << (fugue_sqlParser.WHEN - 256)) | (1 << (fugue_sqlParser.WHERE - 256)) | (1 << (fugue_sqlParser.WINDOW - 256)) | (1 << (fugue_sqlParser.WITH - 256)) | (1 << (fugue_sqlParser.YEAR - 256)) | (1 << (fugue_sqlParser.PLUS - 256)) | (1 << (fugue_sqlParser.MINUS - 256)) | (1 << (fugue_sqlParser.ASTERISK - 256)) | (1 << (fugue_sqlParser.DIV - 256)))) != 0) or ((((_la - 320)) & ~0x3f) == 0 and ((1 << (_la - 320)) & ((1 << (fugue_sqlParser.TILDE - 320)) | (1 << (fugue_sqlParser.STRING - 320)) | (1 << (fugue_sqlParser.BIGINT_LITERAL - 320)) | (1 << (fugue_sqlParser.SMALLINT_LITERAL - 320)) | (1 << (fugue_sqlParser.TINYINT_LITERAL - 320)) | (1 << (fugue_sqlParser.INTEGER_VALUE - 320)) | (1 << (fugue_sqlParser.EXPONENT_VALUE - 320)) | (1 << (fugue_sqlParser.DECIMAL_VALUE - 320)) | (1 << (fugue_sqlParser.DOUBLE_LITERAL - 320)) | (1 << (fugue_sqlParser.BIGDECIMAL_LITERAL - 320)) | (1 << (fugue_sqlParser.IDENTIFIER - 320)) | (1 << (fugue_sqlParser.BACKQUOTED_IDENTIFIER - 320)))) != 0):
                self.state = 2789
                self.expression()
                self.state = 2794
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==fugue_sqlParser.T__0:
                    self.state = 2790
                    self.match(fugue_sqlParser.T__0)
                    self.state = 2791
                    self.expression()
                    self.state = 2796
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2799
            self.match(fugue_sqlParser.T__3)
            self.state = 2800
            localctx.tblName = self.identifier()
            self.state = 2812
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,368,self._ctx)
            if la_ == 1:
                self.state = 2802
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,366,self._ctx)
                if la_ == 1:
                    self.state = 2801
                    self.match(fugue_sqlParser.AS)


                self.state = 2804
                localctx._identifier = self.identifier()
                localctx.colName.append(localctx._identifier)
                self.state = 2809
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,367,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2805
                        self.match(fugue_sqlParser.T__0)
                        self.state = 2806
                        localctx._identifier = self.identifier()
                        localctx.colName.append(localctx._identifier) 
                    self.state = 2811
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,367,self._ctx)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetQuantifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DISTINCT(self):
            return self.getToken(fugue_sqlParser.DISTINCT, 0)

        def ALL(self):
            return self.getToken(fugue_sqlParser.ALL, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_setQuantifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetQuantifier" ):
                return visitor.visitSetQuantifier(self)
            else:
                return visitor.visitChildren(self)




    def setQuantifier(self):

        localctx = fugue_sqlParser.SetQuantifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_setQuantifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2814
            _la = self._input.LA(1)
            if not(_la==fugue_sqlParser.ALL or _la==fugue_sqlParser.DISTINCT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relationPrimary(self):
            return self.getTypedRuleContext(fugue_sqlParser.RelationPrimaryContext,0)


        def joinRelation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.JoinRelationContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.JoinRelationContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_relation

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelation" ):
                return visitor.visitRelation(self)
            else:
                return visitor.visitChildren(self)




    def relation(self):

        localctx = fugue_sqlParser.RelationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_relation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2816
            self.relationPrimary()
            self.state = 2820
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,369,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2817
                    self.joinRelation() 
                self.state = 2822
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,369,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinRelationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.right = None # RelationPrimaryContext

        def joinType(self):
            return self.getTypedRuleContext(fugue_sqlParser.JoinTypeContext,0)


        def JOIN(self):
            return self.getToken(fugue_sqlParser.JOIN, 0)

        def relationPrimary(self):
            return self.getTypedRuleContext(fugue_sqlParser.RelationPrimaryContext,0)


        def joinCriteria(self):
            return self.getTypedRuleContext(fugue_sqlParser.JoinCriteriaContext,0)


        def NATURAL(self):
            return self.getToken(fugue_sqlParser.NATURAL, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_joinRelation

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinRelation" ):
                return visitor.visitJoinRelation(self)
            else:
                return visitor.visitChildren(self)




    def joinRelation(self):

        localctx = fugue_sqlParser.JoinRelationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_joinRelation)
        try:
            self.state = 2834
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [fugue_sqlParser.ANTI, fugue_sqlParser.CROSS, fugue_sqlParser.FULL, fugue_sqlParser.INNER, fugue_sqlParser.JOIN, fugue_sqlParser.LEFT, fugue_sqlParser.RIGHT, fugue_sqlParser.SEMI]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2823
                self.joinType()
                self.state = 2824
                self.match(fugue_sqlParser.JOIN)
                self.state = 2825
                localctx.right = self.relationPrimary()
                self.state = 2827
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,370,self._ctx)
                if la_ == 1:
                    self.state = 2826
                    self.joinCriteria()


                pass
            elif token in [fugue_sqlParser.NATURAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2829
                self.match(fugue_sqlParser.NATURAL)
                self.state = 2830
                self.joinType()
                self.state = 2831
                self.match(fugue_sqlParser.JOIN)
                self.state = 2832
                localctx.right = self.relationPrimary()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INNER(self):
            return self.getToken(fugue_sqlParser.INNER, 0)

        def CROSS(self):
            return self.getToken(fugue_sqlParser.CROSS, 0)

        def LEFT(self):
            return self.getToken(fugue_sqlParser.LEFT, 0)

        def OUTER(self):
            return self.getToken(fugue_sqlParser.OUTER, 0)

        def SEMI(self):
            return self.getToken(fugue_sqlParser.SEMI, 0)

        def RIGHT(self):
            return self.getToken(fugue_sqlParser.RIGHT, 0)

        def FULL(self):
            return self.getToken(fugue_sqlParser.FULL, 0)

        def ANTI(self):
            return self.getToken(fugue_sqlParser.ANTI, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_joinType

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinType" ):
                return visitor.visitJoinType(self)
            else:
                return visitor.visitChildren(self)




    def joinType(self):

        localctx = fugue_sqlParser.JoinTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_joinType)
        self._la = 0 # Token type
        try:
            self.state = 2860
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,378,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2837
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.INNER:
                    self.state = 2836
                    self.match(fugue_sqlParser.INNER)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2839
                self.match(fugue_sqlParser.CROSS)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2840
                self.match(fugue_sqlParser.LEFT)
                self.state = 2842
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.OUTER:
                    self.state = 2841
                    self.match(fugue_sqlParser.OUTER)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2845
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.LEFT:
                    self.state = 2844
                    self.match(fugue_sqlParser.LEFT)


                self.state = 2847
                self.match(fugue_sqlParser.SEMI)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2848
                self.match(fugue_sqlParser.RIGHT)
                self.state = 2850
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.OUTER:
                    self.state = 2849
                    self.match(fugue_sqlParser.OUTER)


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2852
                self.match(fugue_sqlParser.FULL)
                self.state = 2854
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.OUTER:
                    self.state = 2853
                    self.match(fugue_sqlParser.OUTER)


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2857
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.LEFT:
                    self.state = 2856
                    self.match(fugue_sqlParser.LEFT)


                self.state = 2859
                self.match(fugue_sqlParser.ANTI)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinCriteriaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(fugue_sqlParser.ON, 0)

        def booleanExpression(self):
            return self.getTypedRuleContext(fugue_sqlParser.BooleanExpressionContext,0)


        def USING(self):
            return self.getToken(fugue_sqlParser.USING, 0)

        def identifierList(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierListContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_joinCriteria

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinCriteria" ):
                return visitor.visitJoinCriteria(self)
            else:
                return visitor.visitChildren(self)




    def joinCriteria(self):

        localctx = fugue_sqlParser.JoinCriteriaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_joinCriteria)
        try:
            self.state = 2866
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [fugue_sqlParser.ON]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2862
                self.match(fugue_sqlParser.ON)
                self.state = 2863
                self.booleanExpression(0)
                pass
            elif token in [fugue_sqlParser.USING]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2864
                self.match(fugue_sqlParser.USING)
                self.state = 2865
                self.identifierList()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SampleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLESAMPLE(self):
            return self.getToken(fugue_sqlParser.TABLESAMPLE, 0)

        def sampleMethod(self):
            return self.getTypedRuleContext(fugue_sqlParser.SampleMethodContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_sample

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSample" ):
                return visitor.visitSample(self)
            else:
                return visitor.visitChildren(self)




    def sample(self):

        localctx = fugue_sqlParser.SampleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_sample)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2868
            self.match(fugue_sqlParser.TABLESAMPLE)
            self.state = 2869
            self.match(fugue_sqlParser.T__2)
            self.state = 2871
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << fugue_sqlParser.T__2) | (1 << fugue_sqlParser.ADD) | (1 << fugue_sqlParser.AFTER) | (1 << fugue_sqlParser.ALL) | (1 << fugue_sqlParser.ALTER) | (1 << fugue_sqlParser.ANALYZE) | (1 << fugue_sqlParser.AND) | (1 << fugue_sqlParser.ANTI) | (1 << fugue_sqlParser.ANY) | (1 << fugue_sqlParser.ARCHIVE) | (1 << fugue_sqlParser.ARRAY) | (1 << fugue_sqlParser.AS))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (fugue_sqlParser.ASC - 64)) | (1 << (fugue_sqlParser.AT - 64)) | (1 << (fugue_sqlParser.AUTHORIZATION - 64)) | (1 << (fugue_sqlParser.BETWEEN - 64)) | (1 << (fugue_sqlParser.BOTH - 64)) | (1 << (fugue_sqlParser.BUCKET - 64)) | (1 << (fugue_sqlParser.BUCKETS - 64)) | (1 << (fugue_sqlParser.BY - 64)) | (1 << (fugue_sqlParser.CACHE - 64)) | (1 << (fugue_sqlParser.CASCADE - 64)) | (1 << (fugue_sqlParser.CASE - 64)) | (1 << (fugue_sqlParser.CAST - 64)) | (1 << (fugue_sqlParser.CHANGE - 64)) | (1 << (fugue_sqlParser.CHECK - 64)) | (1 << (fugue_sqlParser.CLEAR - 64)) | (1 << (fugue_sqlParser.CLUSTER - 64)) | (1 << (fugue_sqlParser.CLUSTERED - 64)) | (1 << (fugue_sqlParser.CODEGEN - 64)) | (1 << (fugue_sqlParser.COLLATE - 64)) | (1 << (fugue_sqlParser.COLLECTION - 64)) | (1 << (fugue_sqlParser.COLUMN - 64)) | (1 << (fugue_sqlParser.COLUMNS - 64)) | (1 << (fugue_sqlParser.COMMENT - 64)) | (1 << (fugue_sqlParser.COMMIT - 64)) | (1 << (fugue_sqlParser.COMPACT - 64)) | (1 << (fugue_sqlParser.COMPACTIONS - 64)) | (1 << (fugue_sqlParser.COMPUTE - 64)) | (1 << (fugue_sqlParser.CONCATENATE - 64)) | (1 << (fugue_sqlParser.CONSTRAINT - 64)) | (1 << (fugue_sqlParser.COST - 64)) | (1 << (fugue_sqlParser.CREATE - 64)) | (1 << (fugue_sqlParser.CROSS - 64)) | (1 << (fugue_sqlParser.CUBE - 64)) | (1 << (fugue_sqlParser.CURRENT - 64)) | (1 << (fugue_sqlParser.CURRENT_DATE - 64)) | (1 << (fugue_sqlParser.CURRENT_TIME - 64)) | (1 << (fugue_sqlParser.CURRENT_TIMESTAMP - 64)) | (1 << (fugue_sqlParser.CURRENT_USER - 64)) | (1 << (fugue_sqlParser.DATA - 64)) | (1 << (fugue_sqlParser.DATABASE - 64)) | (1 << (fugue_sqlParser.DATABASES - 64)) | (1 << (fugue_sqlParser.DAY - 64)) | (1 << (fugue_sqlParser.DBPROPERTIES - 64)) | (1 << (fugue_sqlParser.DEFINED - 64)) | (1 << (fugue_sqlParser.DELETE - 64)) | (1 << (fugue_sqlParser.DELIMITED - 64)) | (1 << (fugue_sqlParser.DESC - 64)) | (1 << (fugue_sqlParser.DESCRIBE - 64)) | (1 << (fugue_sqlParser.DFS - 64)) | (1 << (fugue_sqlParser.DIRECTORIES - 64)) | (1 << (fugue_sqlParser.DIRECTORY - 64)) | (1 << (fugue_sqlParser.DISTINCT - 64)) | (1 << (fugue_sqlParser.DISTRIBUTE - 64)) | (1 << (fugue_sqlParser.DROP - 64)) | (1 << (fugue_sqlParser.ELSE - 64)) | (1 << (fugue_sqlParser.END - 64)) | (1 << (fugue_sqlParser.ESCAPE - 64)) | (1 << (fugue_sqlParser.ESCAPED - 64)) | (1 << (fugue_sqlParser.EXCEPT - 64)) | (1 << (fugue_sqlParser.EXCHANGE - 64)) | (1 << (fugue_sqlParser.EXISTS - 64)) | (1 << (fugue_sqlParser.EXPLAIN - 64)) | (1 << (fugue_sqlParser.EXPORT - 64)) | (1 << (fugue_sqlParser.EXTENDED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (fugue_sqlParser.EXTERNAL - 128)) | (1 << (fugue_sqlParser.EXTRACT - 128)) | (1 << (fugue_sqlParser.FALSE - 128)) | (1 << (fugue_sqlParser.FETCH - 128)) | (1 << (fugue_sqlParser.FIELDS - 128)) | (1 << (fugue_sqlParser.FILTER - 128)) | (1 << (fugue_sqlParser.FILEFORMAT - 128)) | (1 << (fugue_sqlParser.FIRST - 128)) | (1 << (fugue_sqlParser.FOLLOWING - 128)) | (1 << (fugue_sqlParser.FOR - 128)) | (1 << (fugue_sqlParser.FOREIGN - 128)) | (1 << (fugue_sqlParser.FORMAT - 128)) | (1 << (fugue_sqlParser.FORMATTED - 128)) | (1 << (fugue_sqlParser.FROM - 128)) | (1 << (fugue_sqlParser.FULL - 128)) | (1 << (fugue_sqlParser.FUNCTION - 128)) | (1 << (fugue_sqlParser.FUNCTIONS - 128)) | (1 << (fugue_sqlParser.GLOBAL - 128)) | (1 << (fugue_sqlParser.GRANT - 128)) | (1 << (fugue_sqlParser.GROUP - 128)) | (1 << (fugue_sqlParser.GROUPING - 128)) | (1 << (fugue_sqlParser.HAVING - 128)) | (1 << (fugue_sqlParser.HOUR - 128)) | (1 << (fugue_sqlParser.IF - 128)) | (1 << (fugue_sqlParser.IGNORE - 128)) | (1 << (fugue_sqlParser.IMPORT - 128)) | (1 << (fugue_sqlParser.IN - 128)) | (1 << (fugue_sqlParser.INDEX - 128)) | (1 << (fugue_sqlParser.INDEXES - 128)) | (1 << (fugue_sqlParser.INNER - 128)) | (1 << (fugue_sqlParser.INPATH - 128)) | (1 << (fugue_sqlParser.INPUTFORMAT - 128)) | (1 << (fugue_sqlParser.INSERT - 128)) | (1 << (fugue_sqlParser.INTERSECT - 128)) | (1 << (fugue_sqlParser.INTERVAL - 128)) | (1 << (fugue_sqlParser.INTO - 128)) | (1 << (fugue_sqlParser.IS - 128)) | (1 << (fugue_sqlParser.ITEMS - 128)) | (1 << (fugue_sqlParser.JOIN - 128)) | (1 << (fugue_sqlParser.KEYS - 128)) | (1 << (fugue_sqlParser.LAST - 128)) | (1 << (fugue_sqlParser.LATERAL - 128)) | (1 << (fugue_sqlParser.LAZY - 128)) | (1 << (fugue_sqlParser.LEADING - 128)) | (1 << (fugue_sqlParser.LEFT - 128)) | (1 << (fugue_sqlParser.LIKE - 128)) | (1 << (fugue_sqlParser.LIMIT - 128)) | (1 << (fugue_sqlParser.LINES - 128)) | (1 << (fugue_sqlParser.LIST - 128)) | (1 << (fugue_sqlParser.LOAD - 128)) | (1 << (fugue_sqlParser.LOCAL - 128)) | (1 << (fugue_sqlParser.LOCATION - 128)) | (1 << (fugue_sqlParser.LOCK - 128)) | (1 << (fugue_sqlParser.LOCKS - 128)) | (1 << (fugue_sqlParser.LOGICAL - 128)) | (1 << (fugue_sqlParser.MACRO - 128)) | (1 << (fugue_sqlParser.MAP - 128)) | (1 << (fugue_sqlParser.MATCHED - 128)) | (1 << (fugue_sqlParser.MERGE - 128)) | (1 << (fugue_sqlParser.MINUTE - 128)) | (1 << (fugue_sqlParser.MONTH - 128)) | (1 << (fugue_sqlParser.MSCK - 128)) | (1 << (fugue_sqlParser.NAMESPACE - 128)) | (1 << (fugue_sqlParser.NAMESPACES - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (fugue_sqlParser.NATURAL - 192)) | (1 << (fugue_sqlParser.NO - 192)) | (1 << (fugue_sqlParser.NOT - 192)) | (1 << (fugue_sqlParser.THENULL - 192)) | (1 << (fugue_sqlParser.THENULLS - 192)) | (1 << (fugue_sqlParser.OF - 192)) | (1 << (fugue_sqlParser.ON - 192)) | (1 << (fugue_sqlParser.ONLY - 192)) | (1 << (fugue_sqlParser.OPTION - 192)) | (1 << (fugue_sqlParser.OPTIONS - 192)) | (1 << (fugue_sqlParser.OR - 192)) | (1 << (fugue_sqlParser.ORDER - 192)) | (1 << (fugue_sqlParser.OUT - 192)) | (1 << (fugue_sqlParser.OUTER - 192)) | (1 << (fugue_sqlParser.OUTPUTFORMAT - 192)) | (1 << (fugue_sqlParser.OVER - 192)) | (1 << (fugue_sqlParser.OVERLAPS - 192)) | (1 << (fugue_sqlParser.OVERLAY - 192)) | (1 << (fugue_sqlParser.OVERWRITE - 192)) | (1 << (fugue_sqlParser.PARTITION - 192)) | (1 << (fugue_sqlParser.PARTITIONED - 192)) | (1 << (fugue_sqlParser.PARTITIONS - 192)) | (1 << (fugue_sqlParser.PERCENTLIT - 192)) | (1 << (fugue_sqlParser.PIVOT - 192)) | (1 << (fugue_sqlParser.PLACING - 192)) | (1 << (fugue_sqlParser.POSITION - 192)) | (1 << (fugue_sqlParser.PRECEDING - 192)) | (1 << (fugue_sqlParser.PRIMARY - 192)) | (1 << (fugue_sqlParser.PRINCIPALS - 192)) | (1 << (fugue_sqlParser.PROPERTIES - 192)) | (1 << (fugue_sqlParser.PURGE - 192)) | (1 << (fugue_sqlParser.QUERY - 192)) | (1 << (fugue_sqlParser.RANGE - 192)) | (1 << (fugue_sqlParser.RECORDREADER - 192)) | (1 << (fugue_sqlParser.RECORDWRITER - 192)) | (1 << (fugue_sqlParser.RECOVER - 192)) | (1 << (fugue_sqlParser.REDUCE - 192)) | (1 << (fugue_sqlParser.REFERENCES - 192)) | (1 << (fugue_sqlParser.REFRESH - 192)) | (1 << (fugue_sqlParser.RENAME - 192)) | (1 << (fugue_sqlParser.REPAIR - 192)) | (1 << (fugue_sqlParser.REPLACE - 192)) | (1 << (fugue_sqlParser.RESET - 192)) | (1 << (fugue_sqlParser.RESTRICT - 192)) | (1 << (fugue_sqlParser.REVOKE - 192)) | (1 << (fugue_sqlParser.RIGHT - 192)) | (1 << (fugue_sqlParser.RLIKE - 192)) | (1 << (fugue_sqlParser.ROLE - 192)) | (1 << (fugue_sqlParser.ROLES - 192)) | (1 << (fugue_sqlParser.ROLLBACK - 192)) | (1 << (fugue_sqlParser.ROLLUP - 192)) | (1 << (fugue_sqlParser.ROW - 192)) | (1 << (fugue_sqlParser.ROWS - 192)) | (1 << (fugue_sqlParser.SCHEMA - 192)) | (1 << (fugue_sqlParser.SECOND - 192)) | (1 << (fugue_sqlParser.SELECT - 192)) | (1 << (fugue_sqlParser.SEMI - 192)) | (1 << (fugue_sqlParser.SEPARATED - 192)) | (1 << (fugue_sqlParser.SERDE - 192)) | (1 << (fugue_sqlParser.SERDEPROPERTIES - 192)) | (1 << (fugue_sqlParser.SESSION_USER - 192)) | (1 << (fugue_sqlParser.SET - 192)) | (1 << (fugue_sqlParser.SETMINUS - 192)) | (1 << (fugue_sqlParser.SETS - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (fugue_sqlParser.SHOW - 256)) | (1 << (fugue_sqlParser.SKEWED - 256)) | (1 << (fugue_sqlParser.SOME - 256)) | (1 << (fugue_sqlParser.SORT - 256)) | (1 << (fugue_sqlParser.SORTED - 256)) | (1 << (fugue_sqlParser.START - 256)) | (1 << (fugue_sqlParser.STATISTICS - 256)) | (1 << (fugue_sqlParser.STORED - 256)) | (1 << (fugue_sqlParser.STRATIFY - 256)) | (1 << (fugue_sqlParser.STRUCT - 256)) | (1 << (fugue_sqlParser.SUBSTR - 256)) | (1 << (fugue_sqlParser.SUBSTRING - 256)) | (1 << (fugue_sqlParser.TABLE - 256)) | (1 << (fugue_sqlParser.TABLES - 256)) | (1 << (fugue_sqlParser.TABLESAMPLE - 256)) | (1 << (fugue_sqlParser.TBLPROPERTIES - 256)) | (1 << (fugue_sqlParser.TEMPORARY - 256)) | (1 << (fugue_sqlParser.TERMINATED - 256)) | (1 << (fugue_sqlParser.THEN - 256)) | (1 << (fugue_sqlParser.TO - 256)) | (1 << (fugue_sqlParser.TOUCH - 256)) | (1 << (fugue_sqlParser.TRAILING - 256)) | (1 << (fugue_sqlParser.TRANSACTION - 256)) | (1 << (fugue_sqlParser.TRANSACTIONS - 256)) | (1 << (fugue_sqlParser.TRANSFORM - 256)) | (1 << (fugue_sqlParser.TRIM - 256)) | (1 << (fugue_sqlParser.TRUE - 256)) | (1 << (fugue_sqlParser.TRUNCATE - 256)) | (1 << (fugue_sqlParser.TYPE - 256)) | (1 << (fugue_sqlParser.UNARCHIVE - 256)) | (1 << (fugue_sqlParser.UNBOUNDED - 256)) | (1 << (fugue_sqlParser.UNCACHE - 256)) | (1 << (fugue_sqlParser.UNION - 256)) | (1 << (fugue_sqlParser.UNIQUE - 256)) | (1 << (fugue_sqlParser.UNKNOWN - 256)) | (1 << (fugue_sqlParser.UNLOCK - 256)) | (1 << (fugue_sqlParser.UNSET - 256)) | (1 << (fugue_sqlParser.UPDATE - 256)) | (1 << (fugue_sqlParser.USE - 256)) | (1 << (fugue_sqlParser.USER - 256)) | (1 << (fugue_sqlParser.USING - 256)) | (1 << (fugue_sqlParser.VALUES - 256)) | (1 << (fugue_sqlParser.VIEW - 256)) | (1 << (fugue_sqlParser.VIEWS - 256)) | (1 << (fugue_sqlParser.WHEN - 256)) | (1 << (fugue_sqlParser.WHERE - 256)) | (1 << (fugue_sqlParser.WINDOW - 256)) | (1 << (fugue_sqlParser.WITH - 256)) | (1 << (fugue_sqlParser.YEAR - 256)) | (1 << (fugue_sqlParser.PLUS - 256)) | (1 << (fugue_sqlParser.MINUS - 256)) | (1 << (fugue_sqlParser.ASTERISK - 256)) | (1 << (fugue_sqlParser.DIV - 256)))) != 0) or ((((_la - 320)) & ~0x3f) == 0 and ((1 << (_la - 320)) & ((1 << (fugue_sqlParser.TILDE - 320)) | (1 << (fugue_sqlParser.STRING - 320)) | (1 << (fugue_sqlParser.BIGINT_LITERAL - 320)) | (1 << (fugue_sqlParser.SMALLINT_LITERAL - 320)) | (1 << (fugue_sqlParser.TINYINT_LITERAL - 320)) | (1 << (fugue_sqlParser.INTEGER_VALUE - 320)) | (1 << (fugue_sqlParser.EXPONENT_VALUE - 320)) | (1 << (fugue_sqlParser.DECIMAL_VALUE - 320)) | (1 << (fugue_sqlParser.DOUBLE_LITERAL - 320)) | (1 << (fugue_sqlParser.BIGDECIMAL_LITERAL - 320)) | (1 << (fugue_sqlParser.IDENTIFIER - 320)) | (1 << (fugue_sqlParser.BACKQUOTED_IDENTIFIER - 320)))) != 0):
                self.state = 2870
                self.sampleMethod()


            self.state = 2873
            self.match(fugue_sqlParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SampleMethodContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_sampleMethod

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SampleByRowsContext(SampleMethodContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.SampleMethodContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,0)

        def ROWS(self):
            return self.getToken(fugue_sqlParser.ROWS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSampleByRows" ):
                return visitor.visitSampleByRows(self)
            else:
                return visitor.visitChildren(self)


    class SampleByPercentileContext(SampleMethodContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.SampleMethodContext
            super().__init__(parser)
            self.negativeSign = None # Token
            self.percentage = None # Token
            self.copyFrom(ctx)

        def PERCENTLIT(self):
            return self.getToken(fugue_sqlParser.PERCENTLIT, 0)
        def INTEGER_VALUE(self):
            return self.getToken(fugue_sqlParser.INTEGER_VALUE, 0)
        def DECIMAL_VALUE(self):
            return self.getToken(fugue_sqlParser.DECIMAL_VALUE, 0)
        def MINUS(self):
            return self.getToken(fugue_sqlParser.MINUS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSampleByPercentile" ):
                return visitor.visitSampleByPercentile(self)
            else:
                return visitor.visitChildren(self)


    class SampleByBucketContext(SampleMethodContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.SampleMethodContext
            super().__init__(parser)
            self.sampleType = None # Token
            self.numerator = None # Token
            self.denominator = None # Token
            self.copyFrom(ctx)

        def OUT(self):
            return self.getToken(fugue_sqlParser.OUT, 0)
        def OF(self):
            return self.getToken(fugue_sqlParser.OF, 0)
        def BUCKET(self):
            return self.getToken(fugue_sqlParser.BUCKET, 0)
        def INTEGER_VALUE(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.INTEGER_VALUE)
            else:
                return self.getToken(fugue_sqlParser.INTEGER_VALUE, i)
        def ON(self):
            return self.getToken(fugue_sqlParser.ON, 0)
        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)

        def qualifiedName(self):
            return self.getTypedRuleContext(fugue_sqlParser.QualifiedNameContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSampleByBucket" ):
                return visitor.visitSampleByBucket(self)
            else:
                return visitor.visitChildren(self)


    class SampleByBytesContext(SampleMethodContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.SampleMethodContext
            super().__init__(parser)
            self.bytes = None # ExpressionContext
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSampleByBytes" ):
                return visitor.visitSampleByBytes(self)
            else:
                return visitor.visitChildren(self)



    def sampleMethod(self):

        localctx = fugue_sqlParser.SampleMethodContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_sampleMethod)
        self._la = 0 # Token type
        try:
            self.state = 2899
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,384,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.SampleByPercentileContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2876
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.MINUS:
                    self.state = 2875
                    localctx.negativeSign = self.match(fugue_sqlParser.MINUS)


                self.state = 2878
                localctx.percentage = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.INTEGER_VALUE or _la==fugue_sqlParser.DECIMAL_VALUE):
                    localctx.percentage = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2879
                self.match(fugue_sqlParser.PERCENTLIT)
                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.SampleByRowsContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2880
                self.expression()
                self.state = 2881
                self.match(fugue_sqlParser.ROWS)
                pass

            elif la_ == 3:
                localctx = fugue_sqlParser.SampleByBucketContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2883
                localctx.sampleType = self.match(fugue_sqlParser.BUCKET)
                self.state = 2884
                localctx.numerator = self.match(fugue_sqlParser.INTEGER_VALUE)
                self.state = 2885
                self.match(fugue_sqlParser.OUT)
                self.state = 2886
                self.match(fugue_sqlParser.OF)
                self.state = 2887
                localctx.denominator = self.match(fugue_sqlParser.INTEGER_VALUE)
                self.state = 2896
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.ON:
                    self.state = 2888
                    self.match(fugue_sqlParser.ON)
                    self.state = 2894
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,382,self._ctx)
                    if la_ == 1:
                        self.state = 2889
                        self.identifier()
                        pass

                    elif la_ == 2:
                        self.state = 2890
                        self.qualifiedName()
                        self.state = 2891
                        self.match(fugue_sqlParser.T__2)
                        self.state = 2892
                        self.match(fugue_sqlParser.T__3)
                        pass




                pass

            elif la_ == 4:
                localctx = fugue_sqlParser.SampleByBytesContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2898
                localctx.bytes = self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifierSeq(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierSeqContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_identifierList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifierList" ):
                return visitor.visitIdentifierList(self)
            else:
                return visitor.visitChildren(self)




    def identifierList(self):

        localctx = fugue_sqlParser.IdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_identifierList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2901
            self.match(fugue_sqlParser.T__2)
            self.state = 2902
            self.identifierSeq()
            self.state = 2903
            self.match(fugue_sqlParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierSeqContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._errorCapturingIdentifier = None # ErrorCapturingIdentifierContext
            self.ident = list() # of ErrorCapturingIdentifierContexts

        def errorCapturingIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ErrorCapturingIdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ErrorCapturingIdentifierContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_identifierSeq

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifierSeq" ):
                return visitor.visitIdentifierSeq(self)
            else:
                return visitor.visitChildren(self)




    def identifierSeq(self):

        localctx = fugue_sqlParser.IdentifierSeqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_identifierSeq)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2905
            localctx._errorCapturingIdentifier = self.errorCapturingIdentifier()
            localctx.ident.append(localctx._errorCapturingIdentifier)
            self.state = 2910
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,385,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2906
                    self.match(fugue_sqlParser.T__0)
                    self.state = 2907
                    localctx._errorCapturingIdentifier = self.errorCapturingIdentifier()
                    localctx.ident.append(localctx._errorCapturingIdentifier) 
                self.state = 2912
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,385,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderedIdentifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def orderedIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.OrderedIdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.OrderedIdentifierContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_orderedIdentifierList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrderedIdentifierList" ):
                return visitor.visitOrderedIdentifierList(self)
            else:
                return visitor.visitChildren(self)




    def orderedIdentifierList(self):

        localctx = fugue_sqlParser.OrderedIdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_orderedIdentifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2913
            self.match(fugue_sqlParser.T__2)
            self.state = 2914
            self.orderedIdentifier()
            self.state = 2919
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==fugue_sqlParser.T__0:
                self.state = 2915
                self.match(fugue_sqlParser.T__0)
                self.state = 2916
                self.orderedIdentifier()
                self.state = 2921
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2922
            self.match(fugue_sqlParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderedIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ident = None # ErrorCapturingIdentifierContext
            self.ordering = None # Token

        def errorCapturingIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.ErrorCapturingIdentifierContext,0)


        def ASC(self):
            return self.getToken(fugue_sqlParser.ASC, 0)

        def DESC(self):
            return self.getToken(fugue_sqlParser.DESC, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_orderedIdentifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrderedIdentifier" ):
                return visitor.visitOrderedIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def orderedIdentifier(self):

        localctx = fugue_sqlParser.OrderedIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_orderedIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2924
            localctx.ident = self.errorCapturingIdentifier()
            self.state = 2926
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==fugue_sqlParser.ASC or _la==fugue_sqlParser.DESC:
                self.state = 2925
                localctx.ordering = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.ASC or _la==fugue_sqlParser.DESC):
                    localctx.ordering = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierCommentListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifierComment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.IdentifierCommentContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.IdentifierCommentContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_identifierCommentList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifierCommentList" ):
                return visitor.visitIdentifierCommentList(self)
            else:
                return visitor.visitChildren(self)




    def identifierCommentList(self):

        localctx = fugue_sqlParser.IdentifierCommentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_identifierCommentList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2928
            self.match(fugue_sqlParser.T__2)
            self.state = 2929
            self.identifierComment()
            self.state = 2934
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==fugue_sqlParser.T__0:
                self.state = 2930
                self.match(fugue_sqlParser.T__0)
                self.state = 2931
                self.identifierComment()
                self.state = 2936
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2937
            self.match(fugue_sqlParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierCommentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)


        def commentSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.CommentSpecContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_identifierComment

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifierComment" ):
                return visitor.visitIdentifierComment(self)
            else:
                return visitor.visitChildren(self)




    def identifierComment(self):

        localctx = fugue_sqlParser.IdentifierCommentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_identifierComment)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2939
            self.identifier()
            self.state = 2941
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==fugue_sqlParser.COMMENT:
                self.state = 2940
                self.commentSpec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelationPrimaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_relationPrimary

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TableValuedFunctionContext(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def functionTable(self):
            return self.getTypedRuleContext(fugue_sqlParser.FunctionTableContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableValuedFunction" ):
                return visitor.visitTableValuedFunction(self)
            else:
                return visitor.visitChildren(self)


    class InlineTableDefault2Context(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def inlineTable(self):
            return self.getTypedRuleContext(fugue_sqlParser.InlineTableContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInlineTableDefault2" ):
                return visitor.visitInlineTableDefault2(self)
            else:
                return visitor.visitChildren(self)


    class AliasedRelationContext(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def relation(self):
            return self.getTypedRuleContext(fugue_sqlParser.RelationContext,0)

        def tableAlias(self):
            return self.getTypedRuleContext(fugue_sqlParser.TableAliasContext,0)

        def sample(self):
            return self.getTypedRuleContext(fugue_sqlParser.SampleContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAliasedRelation" ):
                return visitor.visitAliasedRelation(self)
            else:
                return visitor.visitChildren(self)


    class AliasedQueryContext(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def query(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryContext,0)

        def tableAlias(self):
            return self.getTypedRuleContext(fugue_sqlParser.TableAliasContext,0)

        def sample(self):
            return self.getTypedRuleContext(fugue_sqlParser.SampleContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAliasedQuery" ):
                return visitor.visitAliasedQuery(self)
            else:
                return visitor.visitChildren(self)


    class TableNameContext(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def tableAlias(self):
            return self.getTypedRuleContext(fugue_sqlParser.TableAliasContext,0)

        def fugueDataFrameMember(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueDataFrameMemberContext,0)

        def sample(self):
            return self.getTypedRuleContext(fugue_sqlParser.SampleContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableName" ):
                return visitor.visitTableName(self)
            else:
                return visitor.visitChildren(self)



    def relationPrimary(self):

        localctx = fugue_sqlParser.RelationPrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_relationPrimary)
        try:
            self.state = 2970
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,394,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.TableNameContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2943
                self.multipartIdentifier()
                self.state = 2945
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,390,self._ctx)
                if la_ == 1:
                    self.state = 2944
                    self.fugueDataFrameMember()


                self.state = 2948
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,391,self._ctx)
                if la_ == 1:
                    self.state = 2947
                    self.sample()


                self.state = 2950
                self.tableAlias()
                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.AliasedQueryContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2952
                self.match(fugue_sqlParser.T__2)
                self.state = 2953
                self.query()
                self.state = 2954
                self.match(fugue_sqlParser.T__3)
                self.state = 2956
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,392,self._ctx)
                if la_ == 1:
                    self.state = 2955
                    self.sample()


                self.state = 2958
                self.tableAlias()
                pass

            elif la_ == 3:
                localctx = fugue_sqlParser.AliasedRelationContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2960
                self.match(fugue_sqlParser.T__2)
                self.state = 2961
                self.relation()
                self.state = 2962
                self.match(fugue_sqlParser.T__3)
                self.state = 2964
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,393,self._ctx)
                if la_ == 1:
                    self.state = 2963
                    self.sample()


                self.state = 2966
                self.tableAlias()
                pass

            elif la_ == 4:
                localctx = fugue_sqlParser.InlineTableDefault2Context(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2968
                self.inlineTable()
                pass

            elif la_ == 5:
                localctx = fugue_sqlParser.TableValuedFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2969
                self.functionTable()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InlineTableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VALUES(self):
            return self.getToken(fugue_sqlParser.VALUES, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,i)


        def tableAlias(self):
            return self.getTypedRuleContext(fugue_sqlParser.TableAliasContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_inlineTable

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInlineTable" ):
                return visitor.visitInlineTable(self)
            else:
                return visitor.visitChildren(self)




    def inlineTable(self):

        localctx = fugue_sqlParser.InlineTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_inlineTable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2972
            self.match(fugue_sqlParser.VALUES)
            self.state = 2973
            self.expression()
            self.state = 2978
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,395,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2974
                    self.match(fugue_sqlParser.T__0)
                    self.state = 2975
                    self.expression() 
                self.state = 2980
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,395,self._ctx)

            self.state = 2981
            self.tableAlias()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionTableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.funcName = None # ErrorCapturingIdentifierContext

        def tableAlias(self):
            return self.getTypedRuleContext(fugue_sqlParser.TableAliasContext,0)


        def errorCapturingIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.ErrorCapturingIdentifierContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_functionTable

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionTable" ):
                return visitor.visitFunctionTable(self)
            else:
                return visitor.visitChildren(self)




    def functionTable(self):

        localctx = fugue_sqlParser.FunctionTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_functionTable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2983
            localctx.funcName = self.errorCapturingIdentifier()
            self.state = 2984
            self.match(fugue_sqlParser.T__2)
            self.state = 2993
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << fugue_sqlParser.T__2) | (1 << fugue_sqlParser.ADD) | (1 << fugue_sqlParser.AFTER) | (1 << fugue_sqlParser.ALL) | (1 << fugue_sqlParser.ALTER) | (1 << fugue_sqlParser.ANALYZE) | (1 << fugue_sqlParser.AND) | (1 << fugue_sqlParser.ANTI) | (1 << fugue_sqlParser.ANY) | (1 << fugue_sqlParser.ARCHIVE) | (1 << fugue_sqlParser.ARRAY) | (1 << fugue_sqlParser.AS))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (fugue_sqlParser.ASC - 64)) | (1 << (fugue_sqlParser.AT - 64)) | (1 << (fugue_sqlParser.AUTHORIZATION - 64)) | (1 << (fugue_sqlParser.BETWEEN - 64)) | (1 << (fugue_sqlParser.BOTH - 64)) | (1 << (fugue_sqlParser.BUCKET - 64)) | (1 << (fugue_sqlParser.BUCKETS - 64)) | (1 << (fugue_sqlParser.BY - 64)) | (1 << (fugue_sqlParser.CACHE - 64)) | (1 << (fugue_sqlParser.CASCADE - 64)) | (1 << (fugue_sqlParser.CASE - 64)) | (1 << (fugue_sqlParser.CAST - 64)) | (1 << (fugue_sqlParser.CHANGE - 64)) | (1 << (fugue_sqlParser.CHECK - 64)) | (1 << (fugue_sqlParser.CLEAR - 64)) | (1 << (fugue_sqlParser.CLUSTER - 64)) | (1 << (fugue_sqlParser.CLUSTERED - 64)) | (1 << (fugue_sqlParser.CODEGEN - 64)) | (1 << (fugue_sqlParser.COLLATE - 64)) | (1 << (fugue_sqlParser.COLLECTION - 64)) | (1 << (fugue_sqlParser.COLUMN - 64)) | (1 << (fugue_sqlParser.COLUMNS - 64)) | (1 << (fugue_sqlParser.COMMENT - 64)) | (1 << (fugue_sqlParser.COMMIT - 64)) | (1 << (fugue_sqlParser.COMPACT - 64)) | (1 << (fugue_sqlParser.COMPACTIONS - 64)) | (1 << (fugue_sqlParser.COMPUTE - 64)) | (1 << (fugue_sqlParser.CONCATENATE - 64)) | (1 << (fugue_sqlParser.CONSTRAINT - 64)) | (1 << (fugue_sqlParser.COST - 64)) | (1 << (fugue_sqlParser.CREATE - 64)) | (1 << (fugue_sqlParser.CROSS - 64)) | (1 << (fugue_sqlParser.CUBE - 64)) | (1 << (fugue_sqlParser.CURRENT - 64)) | (1 << (fugue_sqlParser.CURRENT_DATE - 64)) | (1 << (fugue_sqlParser.CURRENT_TIME - 64)) | (1 << (fugue_sqlParser.CURRENT_TIMESTAMP - 64)) | (1 << (fugue_sqlParser.CURRENT_USER - 64)) | (1 << (fugue_sqlParser.DATA - 64)) | (1 << (fugue_sqlParser.DATABASE - 64)) | (1 << (fugue_sqlParser.DATABASES - 64)) | (1 << (fugue_sqlParser.DAY - 64)) | (1 << (fugue_sqlParser.DBPROPERTIES - 64)) | (1 << (fugue_sqlParser.DEFINED - 64)) | (1 << (fugue_sqlParser.DELETE - 64)) | (1 << (fugue_sqlParser.DELIMITED - 64)) | (1 << (fugue_sqlParser.DESC - 64)) | (1 << (fugue_sqlParser.DESCRIBE - 64)) | (1 << (fugue_sqlParser.DFS - 64)) | (1 << (fugue_sqlParser.DIRECTORIES - 64)) | (1 << (fugue_sqlParser.DIRECTORY - 64)) | (1 << (fugue_sqlParser.DISTINCT - 64)) | (1 << (fugue_sqlParser.DISTRIBUTE - 64)) | (1 << (fugue_sqlParser.DROP - 64)) | (1 << (fugue_sqlParser.ELSE - 64)) | (1 << (fugue_sqlParser.END - 64)) | (1 << (fugue_sqlParser.ESCAPE - 64)) | (1 << (fugue_sqlParser.ESCAPED - 64)) | (1 << (fugue_sqlParser.EXCEPT - 64)) | (1 << (fugue_sqlParser.EXCHANGE - 64)) | (1 << (fugue_sqlParser.EXISTS - 64)) | (1 << (fugue_sqlParser.EXPLAIN - 64)) | (1 << (fugue_sqlParser.EXPORT - 64)) | (1 << (fugue_sqlParser.EXTENDED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (fugue_sqlParser.EXTERNAL - 128)) | (1 << (fugue_sqlParser.EXTRACT - 128)) | (1 << (fugue_sqlParser.FALSE - 128)) | (1 << (fugue_sqlParser.FETCH - 128)) | (1 << (fugue_sqlParser.FIELDS - 128)) | (1 << (fugue_sqlParser.FILTER - 128)) | (1 << (fugue_sqlParser.FILEFORMAT - 128)) | (1 << (fugue_sqlParser.FIRST - 128)) | (1 << (fugue_sqlParser.FOLLOWING - 128)) | (1 << (fugue_sqlParser.FOR - 128)) | (1 << (fugue_sqlParser.FOREIGN - 128)) | (1 << (fugue_sqlParser.FORMAT - 128)) | (1 << (fugue_sqlParser.FORMATTED - 128)) | (1 << (fugue_sqlParser.FROM - 128)) | (1 << (fugue_sqlParser.FULL - 128)) | (1 << (fugue_sqlParser.FUNCTION - 128)) | (1 << (fugue_sqlParser.FUNCTIONS - 128)) | (1 << (fugue_sqlParser.GLOBAL - 128)) | (1 << (fugue_sqlParser.GRANT - 128)) | (1 << (fugue_sqlParser.GROUP - 128)) | (1 << (fugue_sqlParser.GROUPING - 128)) | (1 << (fugue_sqlParser.HAVING - 128)) | (1 << (fugue_sqlParser.HOUR - 128)) | (1 << (fugue_sqlParser.IF - 128)) | (1 << (fugue_sqlParser.IGNORE - 128)) | (1 << (fugue_sqlParser.IMPORT - 128)) | (1 << (fugue_sqlParser.IN - 128)) | (1 << (fugue_sqlParser.INDEX - 128)) | (1 << (fugue_sqlParser.INDEXES - 128)) | (1 << (fugue_sqlParser.INNER - 128)) | (1 << (fugue_sqlParser.INPATH - 128)) | (1 << (fugue_sqlParser.INPUTFORMAT - 128)) | (1 << (fugue_sqlParser.INSERT - 128)) | (1 << (fugue_sqlParser.INTERSECT - 128)) | (1 << (fugue_sqlParser.INTERVAL - 128)) | (1 << (fugue_sqlParser.INTO - 128)) | (1 << (fugue_sqlParser.IS - 128)) | (1 << (fugue_sqlParser.ITEMS - 128)) | (1 << (fugue_sqlParser.JOIN - 128)) | (1 << (fugue_sqlParser.KEYS - 128)) | (1 << (fugue_sqlParser.LAST - 128)) | (1 << (fugue_sqlParser.LATERAL - 128)) | (1 << (fugue_sqlParser.LAZY - 128)) | (1 << (fugue_sqlParser.LEADING - 128)) | (1 << (fugue_sqlParser.LEFT - 128)) | (1 << (fugue_sqlParser.LIKE - 128)) | (1 << (fugue_sqlParser.LIMIT - 128)) | (1 << (fugue_sqlParser.LINES - 128)) | (1 << (fugue_sqlParser.LIST - 128)) | (1 << (fugue_sqlParser.LOAD - 128)) | (1 << (fugue_sqlParser.LOCAL - 128)) | (1 << (fugue_sqlParser.LOCATION - 128)) | (1 << (fugue_sqlParser.LOCK - 128)) | (1 << (fugue_sqlParser.LOCKS - 128)) | (1 << (fugue_sqlParser.LOGICAL - 128)) | (1 << (fugue_sqlParser.MACRO - 128)) | (1 << (fugue_sqlParser.MAP - 128)) | (1 << (fugue_sqlParser.MATCHED - 128)) | (1 << (fugue_sqlParser.MERGE - 128)) | (1 << (fugue_sqlParser.MINUTE - 128)) | (1 << (fugue_sqlParser.MONTH - 128)) | (1 << (fugue_sqlParser.MSCK - 128)) | (1 << (fugue_sqlParser.NAMESPACE - 128)) | (1 << (fugue_sqlParser.NAMESPACES - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (fugue_sqlParser.NATURAL - 192)) | (1 << (fugue_sqlParser.NO - 192)) | (1 << (fugue_sqlParser.NOT - 192)) | (1 << (fugue_sqlParser.THENULL - 192)) | (1 << (fugue_sqlParser.THENULLS - 192)) | (1 << (fugue_sqlParser.OF - 192)) | (1 << (fugue_sqlParser.ON - 192)) | (1 << (fugue_sqlParser.ONLY - 192)) | (1 << (fugue_sqlParser.OPTION - 192)) | (1 << (fugue_sqlParser.OPTIONS - 192)) | (1 << (fugue_sqlParser.OR - 192)) | (1 << (fugue_sqlParser.ORDER - 192)) | (1 << (fugue_sqlParser.OUT - 192)) | (1 << (fugue_sqlParser.OUTER - 192)) | (1 << (fugue_sqlParser.OUTPUTFORMAT - 192)) | (1 << (fugue_sqlParser.OVER - 192)) | (1 << (fugue_sqlParser.OVERLAPS - 192)) | (1 << (fugue_sqlParser.OVERLAY - 192)) | (1 << (fugue_sqlParser.OVERWRITE - 192)) | (1 << (fugue_sqlParser.PARTITION - 192)) | (1 << (fugue_sqlParser.PARTITIONED - 192)) | (1 << (fugue_sqlParser.PARTITIONS - 192)) | (1 << (fugue_sqlParser.PERCENTLIT - 192)) | (1 << (fugue_sqlParser.PIVOT - 192)) | (1 << (fugue_sqlParser.PLACING - 192)) | (1 << (fugue_sqlParser.POSITION - 192)) | (1 << (fugue_sqlParser.PRECEDING - 192)) | (1 << (fugue_sqlParser.PRIMARY - 192)) | (1 << (fugue_sqlParser.PRINCIPALS - 192)) | (1 << (fugue_sqlParser.PROPERTIES - 192)) | (1 << (fugue_sqlParser.PURGE - 192)) | (1 << (fugue_sqlParser.QUERY - 192)) | (1 << (fugue_sqlParser.RANGE - 192)) | (1 << (fugue_sqlParser.RECORDREADER - 192)) | (1 << (fugue_sqlParser.RECORDWRITER - 192)) | (1 << (fugue_sqlParser.RECOVER - 192)) | (1 << (fugue_sqlParser.REDUCE - 192)) | (1 << (fugue_sqlParser.REFERENCES - 192)) | (1 << (fugue_sqlParser.REFRESH - 192)) | (1 << (fugue_sqlParser.RENAME - 192)) | (1 << (fugue_sqlParser.REPAIR - 192)) | (1 << (fugue_sqlParser.REPLACE - 192)) | (1 << (fugue_sqlParser.RESET - 192)) | (1 << (fugue_sqlParser.RESTRICT - 192)) | (1 << (fugue_sqlParser.REVOKE - 192)) | (1 << (fugue_sqlParser.RIGHT - 192)) | (1 << (fugue_sqlParser.RLIKE - 192)) | (1 << (fugue_sqlParser.ROLE - 192)) | (1 << (fugue_sqlParser.ROLES - 192)) | (1 << (fugue_sqlParser.ROLLBACK - 192)) | (1 << (fugue_sqlParser.ROLLUP - 192)) | (1 << (fugue_sqlParser.ROW - 192)) | (1 << (fugue_sqlParser.ROWS - 192)) | (1 << (fugue_sqlParser.SCHEMA - 192)) | (1 << (fugue_sqlParser.SECOND - 192)) | (1 << (fugue_sqlParser.SELECT - 192)) | (1 << (fugue_sqlParser.SEMI - 192)) | (1 << (fugue_sqlParser.SEPARATED - 192)) | (1 << (fugue_sqlParser.SERDE - 192)) | (1 << (fugue_sqlParser.SERDEPROPERTIES - 192)) | (1 << (fugue_sqlParser.SESSION_USER - 192)) | (1 << (fugue_sqlParser.SET - 192)) | (1 << (fugue_sqlParser.SETMINUS - 192)) | (1 << (fugue_sqlParser.SETS - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (fugue_sqlParser.SHOW - 256)) | (1 << (fugue_sqlParser.SKEWED - 256)) | (1 << (fugue_sqlParser.SOME - 256)) | (1 << (fugue_sqlParser.SORT - 256)) | (1 << (fugue_sqlParser.SORTED - 256)) | (1 << (fugue_sqlParser.START - 256)) | (1 << (fugue_sqlParser.STATISTICS - 256)) | (1 << (fugue_sqlParser.STORED - 256)) | (1 << (fugue_sqlParser.STRATIFY - 256)) | (1 << (fugue_sqlParser.STRUCT - 256)) | (1 << (fugue_sqlParser.SUBSTR - 256)) | (1 << (fugue_sqlParser.SUBSTRING - 256)) | (1 << (fugue_sqlParser.TABLE - 256)) | (1 << (fugue_sqlParser.TABLES - 256)) | (1 << (fugue_sqlParser.TABLESAMPLE - 256)) | (1 << (fugue_sqlParser.TBLPROPERTIES - 256)) | (1 << (fugue_sqlParser.TEMPORARY - 256)) | (1 << (fugue_sqlParser.TERMINATED - 256)) | (1 << (fugue_sqlParser.THEN - 256)) | (1 << (fugue_sqlParser.TO - 256)) | (1 << (fugue_sqlParser.TOUCH - 256)) | (1 << (fugue_sqlParser.TRAILING - 256)) | (1 << (fugue_sqlParser.TRANSACTION - 256)) | (1 << (fugue_sqlParser.TRANSACTIONS - 256)) | (1 << (fugue_sqlParser.TRANSFORM - 256)) | (1 << (fugue_sqlParser.TRIM - 256)) | (1 << (fugue_sqlParser.TRUE - 256)) | (1 << (fugue_sqlParser.TRUNCATE - 256)) | (1 << (fugue_sqlParser.TYPE - 256)) | (1 << (fugue_sqlParser.UNARCHIVE - 256)) | (1 << (fugue_sqlParser.UNBOUNDED - 256)) | (1 << (fugue_sqlParser.UNCACHE - 256)) | (1 << (fugue_sqlParser.UNION - 256)) | (1 << (fugue_sqlParser.UNIQUE - 256)) | (1 << (fugue_sqlParser.UNKNOWN - 256)) | (1 << (fugue_sqlParser.UNLOCK - 256)) | (1 << (fugue_sqlParser.UNSET - 256)) | (1 << (fugue_sqlParser.UPDATE - 256)) | (1 << (fugue_sqlParser.USE - 256)) | (1 << (fugue_sqlParser.USER - 256)) | (1 << (fugue_sqlParser.USING - 256)) | (1 << (fugue_sqlParser.VALUES - 256)) | (1 << (fugue_sqlParser.VIEW - 256)) | (1 << (fugue_sqlParser.VIEWS - 256)) | (1 << (fugue_sqlParser.WHEN - 256)) | (1 << (fugue_sqlParser.WHERE - 256)) | (1 << (fugue_sqlParser.WINDOW - 256)) | (1 << (fugue_sqlParser.WITH - 256)) | (1 << (fugue_sqlParser.YEAR - 256)) | (1 << (fugue_sqlParser.PLUS - 256)) | (1 << (fugue_sqlParser.MINUS - 256)) | (1 << (fugue_sqlParser.ASTERISK - 256)) | (1 << (fugue_sqlParser.DIV - 256)))) != 0) or ((((_la - 320)) & ~0x3f) == 0 and ((1 << (_la - 320)) & ((1 << (fugue_sqlParser.TILDE - 320)) | (1 << (fugue_sqlParser.STRING - 320)) | (1 << (fugue_sqlParser.BIGINT_LITERAL - 320)) | (1 << (fugue_sqlParser.SMALLINT_LITERAL - 320)) | (1 << (fugue_sqlParser.TINYINT_LITERAL - 320)) | (1 << (fugue_sqlParser.INTEGER_VALUE - 320)) | (1 << (fugue_sqlParser.EXPONENT_VALUE - 320)) | (1 << (fugue_sqlParser.DECIMAL_VALUE - 320)) | (1 << (fugue_sqlParser.DOUBLE_LITERAL - 320)) | (1 << (fugue_sqlParser.BIGDECIMAL_LITERAL - 320)) | (1 << (fugue_sqlParser.IDENTIFIER - 320)) | (1 << (fugue_sqlParser.BACKQUOTED_IDENTIFIER - 320)))) != 0):
                self.state = 2985
                self.expression()
                self.state = 2990
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==fugue_sqlParser.T__0:
                    self.state = 2986
                    self.match(fugue_sqlParser.T__0)
                    self.state = 2987
                    self.expression()
                    self.state = 2992
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2995
            self.match(fugue_sqlParser.T__3)
            self.state = 2996
            self.tableAlias()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableAliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def strictIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.StrictIdentifierContext,0)


        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)

        def identifierList(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierListContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_tableAlias

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableAlias" ):
                return visitor.visitTableAlias(self)
            else:
                return visitor.visitChildren(self)




    def tableAlias(self):

        localctx = fugue_sqlParser.TableAliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_tableAlias)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3005
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,400,self._ctx)
            if la_ == 1:
                self.state = 2999
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,398,self._ctx)
                if la_ == 1:
                    self.state = 2998
                    self.match(fugue_sqlParser.AS)


                self.state = 3001
                self.strictIdentifier()
                self.state = 3003
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,399,self._ctx)
                if la_ == 1:
                    self.state = 3002
                    self.identifierList()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RowFormatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_rowFormat

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RowFormatSerdeContext(RowFormatContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.RowFormatContext
            super().__init__(parser)
            self.name = None # Token
            self.props = None # TablePropertyListContext
            self.copyFrom(ctx)

        def ROW(self):
            return self.getToken(fugue_sqlParser.ROW, 0)
        def FORMAT(self):
            return self.getToken(fugue_sqlParser.FORMAT, 0)
        def SERDE(self):
            return self.getToken(fugue_sqlParser.SERDE, 0)
        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)
        def WITH(self):
            return self.getToken(fugue_sqlParser.WITH, 0)
        def SERDEPROPERTIES(self):
            return self.getToken(fugue_sqlParser.SERDEPROPERTIES, 0)
        def tablePropertyList(self):
            return self.getTypedRuleContext(fugue_sqlParser.TablePropertyListContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRowFormatSerde" ):
                return visitor.visitRowFormatSerde(self)
            else:
                return visitor.visitChildren(self)


    class RowFormatDelimitedContext(RowFormatContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.RowFormatContext
            super().__init__(parser)
            self.fieldsTerminatedBy = None # Token
            self.escapedBy = None # Token
            self.collectionItemsTerminatedBy = None # Token
            self.keysTerminatedBy = None # Token
            self.linesSeparatedBy = None # Token
            self.nullDefinedAs = None # Token
            self.copyFrom(ctx)

        def ROW(self):
            return self.getToken(fugue_sqlParser.ROW, 0)
        def FORMAT(self):
            return self.getToken(fugue_sqlParser.FORMAT, 0)
        def DELIMITED(self):
            return self.getToken(fugue_sqlParser.DELIMITED, 0)
        def FIELDS(self):
            return self.getToken(fugue_sqlParser.FIELDS, 0)
        def TERMINATED(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.TERMINATED)
            else:
                return self.getToken(fugue_sqlParser.TERMINATED, i)
        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.BY)
            else:
                return self.getToken(fugue_sqlParser.BY, i)
        def COLLECTION(self):
            return self.getToken(fugue_sqlParser.COLLECTION, 0)
        def ITEMS(self):
            return self.getToken(fugue_sqlParser.ITEMS, 0)
        def MAP(self):
            return self.getToken(fugue_sqlParser.MAP, 0)
        def KEYS(self):
            return self.getToken(fugue_sqlParser.KEYS, 0)
        def LINES(self):
            return self.getToken(fugue_sqlParser.LINES, 0)
        def THENULL(self):
            return self.getToken(fugue_sqlParser.THENULL, 0)
        def DEFINED(self):
            return self.getToken(fugue_sqlParser.DEFINED, 0)
        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)
        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.STRING)
            else:
                return self.getToken(fugue_sqlParser.STRING, i)
        def ESCAPED(self):
            return self.getToken(fugue_sqlParser.ESCAPED, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRowFormatDelimited" ):
                return visitor.visitRowFormatDelimited(self)
            else:
                return visitor.visitChildren(self)



    def rowFormat(self):

        localctx = fugue_sqlParser.RowFormatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_rowFormat)
        try:
            self.state = 3056
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,408,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.RowFormatSerdeContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3007
                self.match(fugue_sqlParser.ROW)
                self.state = 3008
                self.match(fugue_sqlParser.FORMAT)
                self.state = 3009
                self.match(fugue_sqlParser.SERDE)
                self.state = 3010
                localctx.name = self.match(fugue_sqlParser.STRING)
                self.state = 3014
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,401,self._ctx)
                if la_ == 1:
                    self.state = 3011
                    self.match(fugue_sqlParser.WITH)
                    self.state = 3012
                    self.match(fugue_sqlParser.SERDEPROPERTIES)
                    self.state = 3013
                    localctx.props = self.tablePropertyList()


                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.RowFormatDelimitedContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3016
                self.match(fugue_sqlParser.ROW)
                self.state = 3017
                self.match(fugue_sqlParser.FORMAT)
                self.state = 3018
                self.match(fugue_sqlParser.DELIMITED)
                self.state = 3028
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,403,self._ctx)
                if la_ == 1:
                    self.state = 3019
                    self.match(fugue_sqlParser.FIELDS)
                    self.state = 3020
                    self.match(fugue_sqlParser.TERMINATED)
                    self.state = 3021
                    self.match(fugue_sqlParser.BY)
                    self.state = 3022
                    localctx.fieldsTerminatedBy = self.match(fugue_sqlParser.STRING)
                    self.state = 3026
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,402,self._ctx)
                    if la_ == 1:
                        self.state = 3023
                        self.match(fugue_sqlParser.ESCAPED)
                        self.state = 3024
                        self.match(fugue_sqlParser.BY)
                        self.state = 3025
                        localctx.escapedBy = self.match(fugue_sqlParser.STRING)




                self.state = 3035
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,404,self._ctx)
                if la_ == 1:
                    self.state = 3030
                    self.match(fugue_sqlParser.COLLECTION)
                    self.state = 3031
                    self.match(fugue_sqlParser.ITEMS)
                    self.state = 3032
                    self.match(fugue_sqlParser.TERMINATED)
                    self.state = 3033
                    self.match(fugue_sqlParser.BY)
                    self.state = 3034
                    localctx.collectionItemsTerminatedBy = self.match(fugue_sqlParser.STRING)


                self.state = 3042
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,405,self._ctx)
                if la_ == 1:
                    self.state = 3037
                    self.match(fugue_sqlParser.MAP)
                    self.state = 3038
                    self.match(fugue_sqlParser.KEYS)
                    self.state = 3039
                    self.match(fugue_sqlParser.TERMINATED)
                    self.state = 3040
                    self.match(fugue_sqlParser.BY)
                    self.state = 3041
                    localctx.keysTerminatedBy = self.match(fugue_sqlParser.STRING)


                self.state = 3048
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,406,self._ctx)
                if la_ == 1:
                    self.state = 3044
                    self.match(fugue_sqlParser.LINES)
                    self.state = 3045
                    self.match(fugue_sqlParser.TERMINATED)
                    self.state = 3046
                    self.match(fugue_sqlParser.BY)
                    self.state = 3047
                    localctx.linesSeparatedBy = self.match(fugue_sqlParser.STRING)


                self.state = 3054
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,407,self._ctx)
                if la_ == 1:
                    self.state = 3050
                    self.match(fugue_sqlParser.THENULL)
                    self.state = 3051
                    self.match(fugue_sqlParser.DEFINED)
                    self.state = 3052
                    self.match(fugue_sqlParser.AS)
                    self.state = 3053
                    localctx.nullDefinedAs = self.match(fugue_sqlParser.STRING)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultipartIdentifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multipartIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.MultipartIdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_multipartIdentifierList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultipartIdentifierList" ):
                return visitor.visitMultipartIdentifierList(self)
            else:
                return visitor.visitChildren(self)




    def multipartIdentifierList(self):

        localctx = fugue_sqlParser.MultipartIdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_multipartIdentifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3058
            self.multipartIdentifier()
            self.state = 3063
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==fugue_sqlParser.T__0:
                self.state = 3059
                self.match(fugue_sqlParser.T__0)
                self.state = 3060
                self.multipartIdentifier()
                self.state = 3065
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultipartIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._errorCapturingIdentifier = None # ErrorCapturingIdentifierContext
            self.parts = list() # of ErrorCapturingIdentifierContexts

        def errorCapturingIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ErrorCapturingIdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ErrorCapturingIdentifierContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_multipartIdentifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultipartIdentifier" ):
                return visitor.visitMultipartIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def multipartIdentifier(self):

        localctx = fugue_sqlParser.MultipartIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_multipartIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3066
            localctx._errorCapturingIdentifier = self.errorCapturingIdentifier()
            localctx.parts.append(localctx._errorCapturingIdentifier)
            self.state = 3071
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,410,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3067
                    self.match(fugue_sqlParser.T__6)
                    self.state = 3068
                    localctx._errorCapturingIdentifier = self.errorCapturingIdentifier()
                    localctx.parts.append(localctx._errorCapturingIdentifier) 
                self.state = 3073
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,410,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.db = None # ErrorCapturingIdentifierContext
            self.table = None # ErrorCapturingIdentifierContext

        def errorCapturingIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ErrorCapturingIdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ErrorCapturingIdentifierContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_tableIdentifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableIdentifier" ):
                return visitor.visitTableIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def tableIdentifier(self):

        localctx = fugue_sqlParser.TableIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_tableIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3077
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,411,self._ctx)
            if la_ == 1:
                self.state = 3074
                localctx.db = self.errorCapturingIdentifier()
                self.state = 3075
                self.match(fugue_sqlParser.T__6)


            self.state = 3079
            localctx.table = self.errorCapturingIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.db = None # ErrorCapturingIdentifierContext
            self.function = None # ErrorCapturingIdentifierContext

        def errorCapturingIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ErrorCapturingIdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ErrorCapturingIdentifierContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_functionIdentifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionIdentifier" ):
                return visitor.visitFunctionIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def functionIdentifier(self):

        localctx = fugue_sqlParser.FunctionIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_functionIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3084
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,412,self._ctx)
            if la_ == 1:
                self.state = 3081
                localctx.db = self.errorCapturingIdentifier()
                self.state = 3082
                self.match(fugue_sqlParser.T__6)


            self.state = 3086
            localctx.function = self.errorCapturingIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # ErrorCapturingIdentifierContext

        def expression(self):
            return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,0)


        def identifierList(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierListContext,0)


        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)

        def errorCapturingIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.ErrorCapturingIdentifierContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_namedExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamedExpression" ):
                return visitor.visitNamedExpression(self)
            else:
                return visitor.visitChildren(self)




    def namedExpression(self):

        localctx = fugue_sqlParser.NamedExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_namedExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3088
            self.expression()
            self.state = 3096
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,415,self._ctx)
            if la_ == 1:
                self.state = 3090
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,413,self._ctx)
                if la_ == 1:
                    self.state = 3089
                    self.match(fugue_sqlParser.AS)


                self.state = 3094
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [fugue_sqlParser.ADD, fugue_sqlParser.AFTER, fugue_sqlParser.ALL, fugue_sqlParser.ALTER, fugue_sqlParser.ANALYZE, fugue_sqlParser.AND, fugue_sqlParser.ANTI, fugue_sqlParser.ANY, fugue_sqlParser.ARCHIVE, fugue_sqlParser.ARRAY, fugue_sqlParser.AS, fugue_sqlParser.ASC, fugue_sqlParser.AT, fugue_sqlParser.AUTHORIZATION, fugue_sqlParser.BETWEEN, fugue_sqlParser.BOTH, fugue_sqlParser.BUCKET, fugue_sqlParser.BUCKETS, fugue_sqlParser.BY, fugue_sqlParser.CACHE, fugue_sqlParser.CASCADE, fugue_sqlParser.CASE, fugue_sqlParser.CAST, fugue_sqlParser.CHANGE, fugue_sqlParser.CHECK, fugue_sqlParser.CLEAR, fugue_sqlParser.CLUSTER, fugue_sqlParser.CLUSTERED, fugue_sqlParser.CODEGEN, fugue_sqlParser.COLLATE, fugue_sqlParser.COLLECTION, fugue_sqlParser.COLUMN, fugue_sqlParser.COLUMNS, fugue_sqlParser.COMMENT, fugue_sqlParser.COMMIT, fugue_sqlParser.COMPACT, fugue_sqlParser.COMPACTIONS, fugue_sqlParser.COMPUTE, fugue_sqlParser.CONCATENATE, fugue_sqlParser.CONSTRAINT, fugue_sqlParser.COST, fugue_sqlParser.CREATE, fugue_sqlParser.CROSS, fugue_sqlParser.CUBE, fugue_sqlParser.CURRENT, fugue_sqlParser.CURRENT_DATE, fugue_sqlParser.CURRENT_TIME, fugue_sqlParser.CURRENT_TIMESTAMP, fugue_sqlParser.CURRENT_USER, fugue_sqlParser.DATA, fugue_sqlParser.DATABASE, fugue_sqlParser.DATABASES, fugue_sqlParser.DAY, fugue_sqlParser.DBPROPERTIES, fugue_sqlParser.DEFINED, fugue_sqlParser.DELETE, fugue_sqlParser.DELIMITED, fugue_sqlParser.DESC, fugue_sqlParser.DESCRIBE, fugue_sqlParser.DFS, fugue_sqlParser.DIRECTORIES, fugue_sqlParser.DIRECTORY, fugue_sqlParser.DISTINCT, fugue_sqlParser.DISTRIBUTE, fugue_sqlParser.DROP, fugue_sqlParser.ELSE, fugue_sqlParser.END, fugue_sqlParser.ESCAPE, fugue_sqlParser.ESCAPED, fugue_sqlParser.EXCEPT, fugue_sqlParser.EXCHANGE, fugue_sqlParser.EXISTS, fugue_sqlParser.EXPLAIN, fugue_sqlParser.EXPORT, fugue_sqlParser.EXTENDED, fugue_sqlParser.EXTERNAL, fugue_sqlParser.EXTRACT, fugue_sqlParser.FALSE, fugue_sqlParser.FETCH, fugue_sqlParser.FIELDS, fugue_sqlParser.FILTER, fugue_sqlParser.FILEFORMAT, fugue_sqlParser.FIRST, fugue_sqlParser.FOLLOWING, fugue_sqlParser.FOR, fugue_sqlParser.FOREIGN, fugue_sqlParser.FORMAT, fugue_sqlParser.FORMATTED, fugue_sqlParser.FROM, fugue_sqlParser.FULL, fugue_sqlParser.FUNCTION, fugue_sqlParser.FUNCTIONS, fugue_sqlParser.GLOBAL, fugue_sqlParser.GRANT, fugue_sqlParser.GROUP, fugue_sqlParser.GROUPING, fugue_sqlParser.HAVING, fugue_sqlParser.HOUR, fugue_sqlParser.IF, fugue_sqlParser.IGNORE, fugue_sqlParser.IMPORT, fugue_sqlParser.IN, fugue_sqlParser.INDEX, fugue_sqlParser.INDEXES, fugue_sqlParser.INNER, fugue_sqlParser.INPATH, fugue_sqlParser.INPUTFORMAT, fugue_sqlParser.INSERT, fugue_sqlParser.INTERSECT, fugue_sqlParser.INTERVAL, fugue_sqlParser.INTO, fugue_sqlParser.IS, fugue_sqlParser.ITEMS, fugue_sqlParser.JOIN, fugue_sqlParser.KEYS, fugue_sqlParser.LAST, fugue_sqlParser.LATERAL, fugue_sqlParser.LAZY, fugue_sqlParser.LEADING, fugue_sqlParser.LEFT, fugue_sqlParser.LIKE, fugue_sqlParser.LIMIT, fugue_sqlParser.LINES, fugue_sqlParser.LIST, fugue_sqlParser.LOAD, fugue_sqlParser.LOCAL, fugue_sqlParser.LOCATION, fugue_sqlParser.LOCK, fugue_sqlParser.LOCKS, fugue_sqlParser.LOGICAL, fugue_sqlParser.MACRO, fugue_sqlParser.MAP, fugue_sqlParser.MATCHED, fugue_sqlParser.MERGE, fugue_sqlParser.MINUTE, fugue_sqlParser.MONTH, fugue_sqlParser.MSCK, fugue_sqlParser.NAMESPACE, fugue_sqlParser.NAMESPACES, fugue_sqlParser.NATURAL, fugue_sqlParser.NO, fugue_sqlParser.NOT, fugue_sqlParser.THENULL, fugue_sqlParser.THENULLS, fugue_sqlParser.OF, fugue_sqlParser.ON, fugue_sqlParser.ONLY, fugue_sqlParser.OPTION, fugue_sqlParser.OPTIONS, fugue_sqlParser.OR, fugue_sqlParser.ORDER, fugue_sqlParser.OUT, fugue_sqlParser.OUTER, fugue_sqlParser.OUTPUTFORMAT, fugue_sqlParser.OVER, fugue_sqlParser.OVERLAPS, fugue_sqlParser.OVERLAY, fugue_sqlParser.OVERWRITE, fugue_sqlParser.PARTITION, fugue_sqlParser.PARTITIONED, fugue_sqlParser.PARTITIONS, fugue_sqlParser.PERCENTLIT, fugue_sqlParser.PIVOT, fugue_sqlParser.PLACING, fugue_sqlParser.POSITION, fugue_sqlParser.PRECEDING, fugue_sqlParser.PRIMARY, fugue_sqlParser.PRINCIPALS, fugue_sqlParser.PROPERTIES, fugue_sqlParser.PURGE, fugue_sqlParser.QUERY, fugue_sqlParser.RANGE, fugue_sqlParser.RECORDREADER, fugue_sqlParser.RECORDWRITER, fugue_sqlParser.RECOVER, fugue_sqlParser.REDUCE, fugue_sqlParser.REFERENCES, fugue_sqlParser.REFRESH, fugue_sqlParser.RENAME, fugue_sqlParser.REPAIR, fugue_sqlParser.REPLACE, fugue_sqlParser.RESET, fugue_sqlParser.RESTRICT, fugue_sqlParser.REVOKE, fugue_sqlParser.RIGHT, fugue_sqlParser.RLIKE, fugue_sqlParser.ROLE, fugue_sqlParser.ROLES, fugue_sqlParser.ROLLBACK, fugue_sqlParser.ROLLUP, fugue_sqlParser.ROW, fugue_sqlParser.ROWS, fugue_sqlParser.SCHEMA, fugue_sqlParser.SECOND, fugue_sqlParser.SELECT, fugue_sqlParser.SEMI, fugue_sqlParser.SEPARATED, fugue_sqlParser.SERDE, fugue_sqlParser.SERDEPROPERTIES, fugue_sqlParser.SESSION_USER, fugue_sqlParser.SET, fugue_sqlParser.SETMINUS, fugue_sqlParser.SETS, fugue_sqlParser.SHOW, fugue_sqlParser.SKEWED, fugue_sqlParser.SOME, fugue_sqlParser.SORT, fugue_sqlParser.SORTED, fugue_sqlParser.START, fugue_sqlParser.STATISTICS, fugue_sqlParser.STORED, fugue_sqlParser.STRATIFY, fugue_sqlParser.STRUCT, fugue_sqlParser.SUBSTR, fugue_sqlParser.SUBSTRING, fugue_sqlParser.TABLE, fugue_sqlParser.TABLES, fugue_sqlParser.TABLESAMPLE, fugue_sqlParser.TBLPROPERTIES, fugue_sqlParser.TEMPORARY, fugue_sqlParser.TERMINATED, fugue_sqlParser.THEN, fugue_sqlParser.TO, fugue_sqlParser.TOUCH, fugue_sqlParser.TRAILING, fugue_sqlParser.TRANSACTION, fugue_sqlParser.TRANSACTIONS, fugue_sqlParser.TRANSFORM, fugue_sqlParser.TRIM, fugue_sqlParser.TRUE, fugue_sqlParser.TRUNCATE, fugue_sqlParser.TYPE, fugue_sqlParser.UNARCHIVE, fugue_sqlParser.UNBOUNDED, fugue_sqlParser.UNCACHE, fugue_sqlParser.UNION, fugue_sqlParser.UNIQUE, fugue_sqlParser.UNKNOWN, fugue_sqlParser.UNLOCK, fugue_sqlParser.UNSET, fugue_sqlParser.UPDATE, fugue_sqlParser.USE, fugue_sqlParser.USER, fugue_sqlParser.USING, fugue_sqlParser.VALUES, fugue_sqlParser.VIEW, fugue_sqlParser.VIEWS, fugue_sqlParser.WHEN, fugue_sqlParser.WHERE, fugue_sqlParser.WINDOW, fugue_sqlParser.WITH, fugue_sqlParser.YEAR, fugue_sqlParser.DIV, fugue_sqlParser.IDENTIFIER, fugue_sqlParser.BACKQUOTED_IDENTIFIER]:
                    self.state = 3092
                    localctx.name = self.errorCapturingIdentifier()
                    pass
                elif token in [fugue_sqlParser.T__2]:
                    self.state = 3093
                    self.identifierList()
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedExpressionSeqContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namedExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.NamedExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.NamedExpressionContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_namedExpressionSeq

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamedExpressionSeq" ):
                return visitor.visitNamedExpressionSeq(self)
            else:
                return visitor.visitChildren(self)




    def namedExpressionSeq(self):

        localctx = fugue_sqlParser.NamedExpressionSeqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_namedExpressionSeq)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3098
            self.namedExpression()
            self.state = 3103
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,416,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3099
                    self.match(fugue_sqlParser.T__0)
                    self.state = 3100
                    self.namedExpression() 
                self.state = 3105
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,416,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransformListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._transform = None # TransformContext
            self.transforms = list() # of TransformContexts

        def transform(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.TransformContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.TransformContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_transformList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTransformList" ):
                return visitor.visitTransformList(self)
            else:
                return visitor.visitChildren(self)




    def transformList(self):

        localctx = fugue_sqlParser.TransformListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_transformList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3106
            self.match(fugue_sqlParser.T__2)
            self.state = 3107
            localctx._transform = self.transform()
            localctx.transforms.append(localctx._transform)
            self.state = 3112
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==fugue_sqlParser.T__0:
                self.state = 3108
                self.match(fugue_sqlParser.T__0)
                self.state = 3109
                localctx._transform = self.transform()
                localctx.transforms.append(localctx._transform)
                self.state = 3114
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3115
            self.match(fugue_sqlParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransformContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_transform

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class IdentityTransformContext(TransformContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.TransformContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def qualifiedName(self):
            return self.getTypedRuleContext(fugue_sqlParser.QualifiedNameContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentityTransform" ):
                return visitor.visitIdentityTransform(self)
            else:
                return visitor.visitChildren(self)


    class ApplyTransformContext(TransformContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.TransformContext
            super().__init__(parser)
            self.transformName = None # IdentifierContext
            self._transformArgument = None # TransformArgumentContext
            self.argument = list() # of TransformArgumentContexts
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)

        def transformArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.TransformArgumentContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.TransformArgumentContext,i)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitApplyTransform" ):
                return visitor.visitApplyTransform(self)
            else:
                return visitor.visitChildren(self)



    def transform(self):

        localctx = fugue_sqlParser.TransformContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_transform)
        self._la = 0 # Token type
        try:
            self.state = 3130
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,419,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.IdentityTransformContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3117
                self.qualifiedName()
                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.ApplyTransformContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3118
                localctx.transformName = self.identifier()
                self.state = 3119
                self.match(fugue_sqlParser.T__2)
                self.state = 3120
                localctx._transformArgument = self.transformArgument()
                localctx.argument.append(localctx._transformArgument)
                self.state = 3125
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==fugue_sqlParser.T__0:
                    self.state = 3121
                    self.match(fugue_sqlParser.T__0)
                    self.state = 3122
                    localctx._transformArgument = self.transformArgument()
                    localctx.argument.append(localctx._transformArgument)
                    self.state = 3127
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3128
                self.match(fugue_sqlParser.T__3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransformArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedName(self):
            return self.getTypedRuleContext(fugue_sqlParser.QualifiedNameContext,0)


        def constant(self):
            return self.getTypedRuleContext(fugue_sqlParser.ConstantContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_transformArgument

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTransformArgument" ):
                return visitor.visitTransformArgument(self)
            else:
                return visitor.visitChildren(self)




    def transformArgument(self):

        localctx = fugue_sqlParser.TransformArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_transformArgument)
        try:
            self.state = 3134
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,420,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3132
                self.qualifiedName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3133
                self.constant()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def booleanExpression(self):
            return self.getTypedRuleContext(fugue_sqlParser.BooleanExpressionContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_expression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)




    def expression(self):

        localctx = fugue_sqlParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3136
            self.booleanExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_booleanExpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class LogicalNotContext(BooleanExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.BooleanExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NOT(self):
            return self.getToken(fugue_sqlParser.NOT, 0)
        def booleanExpression(self):
            return self.getTypedRuleContext(fugue_sqlParser.BooleanExpressionContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogicalNot" ):
                return visitor.visitLogicalNot(self)
            else:
                return visitor.visitChildren(self)


    class PredicatedContext(BooleanExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.BooleanExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueExpression(self):
            return self.getTypedRuleContext(fugue_sqlParser.ValueExpressionContext,0)

        def predicate(self):
            return self.getTypedRuleContext(fugue_sqlParser.PredicateContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPredicated" ):
                return visitor.visitPredicated(self)
            else:
                return visitor.visitChildren(self)


    class ExistsContext(BooleanExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.BooleanExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXISTS(self):
            return self.getToken(fugue_sqlParser.EXISTS, 0)
        def query(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExists" ):
                return visitor.visitExists(self)
            else:
                return visitor.visitChildren(self)


    class LogicalBinaryContext(BooleanExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.BooleanExpressionContext
            super().__init__(parser)
            self.left = None # BooleanExpressionContext
            self.theOperator = None # Token
            self.right = None # BooleanExpressionContext
            self.copyFrom(ctx)

        def booleanExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.BooleanExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.BooleanExpressionContext,i)

        def AND(self):
            return self.getToken(fugue_sqlParser.AND, 0)
        def OR(self):
            return self.getToken(fugue_sqlParser.OR, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogicalBinary" ):
                return visitor.visitLogicalBinary(self)
            else:
                return visitor.visitChildren(self)



    def booleanExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = fugue_sqlParser.BooleanExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 340
        self.enterRecursionRule(localctx, 340, self.RULE_booleanExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3150
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,422,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.LogicalNotContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 3139
                self.match(fugue_sqlParser.NOT)
                self.state = 3140
                self.booleanExpression(5)
                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.ExistsContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3141
                self.match(fugue_sqlParser.EXISTS)
                self.state = 3142
                self.match(fugue_sqlParser.T__2)
                self.state = 3143
                self.query()
                self.state = 3144
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 3:
                localctx = fugue_sqlParser.PredicatedContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3146
                self.valueExpression(0)
                self.state = 3148
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,421,self._ctx)
                if la_ == 1:
                    self.state = 3147
                    self.predicate()


                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 3160
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,424,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 3158
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,423,self._ctx)
                    if la_ == 1:
                        localctx = fugue_sqlParser.LogicalBinaryContext(self, fugue_sqlParser.BooleanExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_booleanExpression)
                        self.state = 3152
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 3153
                        localctx.theOperator = self.match(fugue_sqlParser.AND)
                        self.state = 3154
                        localctx.right = self.booleanExpression(3)
                        pass

                    elif la_ == 2:
                        localctx = fugue_sqlParser.LogicalBinaryContext(self, fugue_sqlParser.BooleanExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_booleanExpression)
                        self.state = 3155
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 3156
                        localctx.theOperator = self.match(fugue_sqlParser.OR)
                        self.state = 3157
                        localctx.right = self.booleanExpression(2)
                        pass

             
                self.state = 3162
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,424,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class PredicateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.kind = None # Token
            self.lower = None # ValueExpressionContext
            self.upper = None # ValueExpressionContext
            self.pattern = None # ValueExpressionContext
            self.quantifier = None # Token
            self.escapeChar = None # Token
            self.right = None # ValueExpressionContext

        def AND(self):
            return self.getToken(fugue_sqlParser.AND, 0)

        def BETWEEN(self):
            return self.getToken(fugue_sqlParser.BETWEEN, 0)

        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ValueExpressionContext,i)


        def NOT(self):
            return self.getToken(fugue_sqlParser.NOT, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,i)


        def IN(self):
            return self.getToken(fugue_sqlParser.IN, 0)

        def query(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryContext,0)


        def RLIKE(self):
            return self.getToken(fugue_sqlParser.RLIKE, 0)

        def LIKE(self):
            return self.getToken(fugue_sqlParser.LIKE, 0)

        def ANY(self):
            return self.getToken(fugue_sqlParser.ANY, 0)

        def SOME(self):
            return self.getToken(fugue_sqlParser.SOME, 0)

        def ALL(self):
            return self.getToken(fugue_sqlParser.ALL, 0)

        def ESCAPE(self):
            return self.getToken(fugue_sqlParser.ESCAPE, 0)

        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)

        def IS(self):
            return self.getToken(fugue_sqlParser.IS, 0)

        def THENULL(self):
            return self.getToken(fugue_sqlParser.THENULL, 0)

        def TRUE(self):
            return self.getToken(fugue_sqlParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(fugue_sqlParser.FALSE, 0)

        def UNKNOWN(self):
            return self.getToken(fugue_sqlParser.UNKNOWN, 0)

        def FROM(self):
            return self.getToken(fugue_sqlParser.FROM, 0)

        def DISTINCT(self):
            return self.getToken(fugue_sqlParser.DISTINCT, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_predicate

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPredicate" ):
                return visitor.visitPredicate(self)
            else:
                return visitor.visitChildren(self)




    def predicate(self):

        localctx = fugue_sqlParser.PredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 342, self.RULE_predicate)
        self._la = 0 # Token type
        try:
            self.state = 3245
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,438,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3164
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.NOT:
                    self.state = 3163
                    self.match(fugue_sqlParser.NOT)


                self.state = 3166
                localctx.kind = self.match(fugue_sqlParser.BETWEEN)
                self.state = 3167
                localctx.lower = self.valueExpression(0)
                self.state = 3168
                self.match(fugue_sqlParser.AND)
                self.state = 3169
                localctx.upper = self.valueExpression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3172
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.NOT:
                    self.state = 3171
                    self.match(fugue_sqlParser.NOT)


                self.state = 3174
                localctx.kind = self.match(fugue_sqlParser.IN)
                self.state = 3175
                self.match(fugue_sqlParser.T__2)
                self.state = 3176
                self.expression()
                self.state = 3181
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==fugue_sqlParser.T__0:
                    self.state = 3177
                    self.match(fugue_sqlParser.T__0)
                    self.state = 3178
                    self.expression()
                    self.state = 3183
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3184
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3187
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.NOT:
                    self.state = 3186
                    self.match(fugue_sqlParser.NOT)


                self.state = 3189
                localctx.kind = self.match(fugue_sqlParser.IN)
                self.state = 3190
                self.match(fugue_sqlParser.T__2)
                self.state = 3191
                self.query()
                self.state = 3192
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3195
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.NOT:
                    self.state = 3194
                    self.match(fugue_sqlParser.NOT)


                self.state = 3197
                localctx.kind = self.match(fugue_sqlParser.RLIKE)
                self.state = 3198
                localctx.pattern = self.valueExpression(0)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3200
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.NOT:
                    self.state = 3199
                    self.match(fugue_sqlParser.NOT)


                self.state = 3202
                localctx.kind = self.match(fugue_sqlParser.LIKE)
                self.state = 3203
                localctx.quantifier = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.ALL or _la==fugue_sqlParser.ANY or _la==fugue_sqlParser.SOME):
                    localctx.quantifier = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3217
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,432,self._ctx)
                if la_ == 1:
                    self.state = 3204
                    self.match(fugue_sqlParser.T__2)
                    self.state = 3205
                    self.match(fugue_sqlParser.T__3)
                    pass

                elif la_ == 2:
                    self.state = 3206
                    self.match(fugue_sqlParser.T__2)
                    self.state = 3207
                    self.expression()
                    self.state = 3212
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==fugue_sqlParser.T__0:
                        self.state = 3208
                        self.match(fugue_sqlParser.T__0)
                        self.state = 3209
                        self.expression()
                        self.state = 3214
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 3215
                    self.match(fugue_sqlParser.T__3)
                    pass


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3220
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.NOT:
                    self.state = 3219
                    self.match(fugue_sqlParser.NOT)


                self.state = 3222
                localctx.kind = self.match(fugue_sqlParser.LIKE)
                self.state = 3223
                localctx.pattern = self.valueExpression(0)
                self.state = 3226
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,434,self._ctx)
                if la_ == 1:
                    self.state = 3224
                    self.match(fugue_sqlParser.ESCAPE)
                    self.state = 3225
                    localctx.escapeChar = self.match(fugue_sqlParser.STRING)


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 3228
                self.match(fugue_sqlParser.IS)
                self.state = 3230
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.NOT:
                    self.state = 3229
                    self.match(fugue_sqlParser.NOT)


                self.state = 3232
                localctx.kind = self.match(fugue_sqlParser.THENULL)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 3233
                self.match(fugue_sqlParser.IS)
                self.state = 3235
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.NOT:
                    self.state = 3234
                    self.match(fugue_sqlParser.NOT)


                self.state = 3237
                localctx.kind = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.FALSE or _la==fugue_sqlParser.TRUE or _la==fugue_sqlParser.UNKNOWN):
                    localctx.kind = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 3238
                self.match(fugue_sqlParser.IS)
                self.state = 3240
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.NOT:
                    self.state = 3239
                    self.match(fugue_sqlParser.NOT)


                self.state = 3242
                localctx.kind = self.match(fugue_sqlParser.DISTINCT)
                self.state = 3243
                self.match(fugue_sqlParser.FROM)
                self.state = 3244
                localctx.right = self.valueExpression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValueExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_valueExpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class ValueExpressionDefaultContext(ValueExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.ValueExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def primaryExpression(self):
            return self.getTypedRuleContext(fugue_sqlParser.PrimaryExpressionContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitValueExpressionDefault" ):
                return visitor.visitValueExpressionDefault(self)
            else:
                return visitor.visitChildren(self)


    class ComparisonContext(ValueExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.ValueExpressionContext
            super().__init__(parser)
            self.left = None # ValueExpressionContext
            self.right = None # ValueExpressionContext
            self.copyFrom(ctx)

        def comparisonOperator(self):
            return self.getTypedRuleContext(fugue_sqlParser.ComparisonOperatorContext,0)

        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ValueExpressionContext,i)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparison" ):
                return visitor.visitComparison(self)
            else:
                return visitor.visitChildren(self)


    class ArithmeticBinaryContext(ValueExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.ValueExpressionContext
            super().__init__(parser)
            self.left = None # ValueExpressionContext
            self.theOperator = None # Token
            self.right = None # ValueExpressionContext
            self.copyFrom(ctx)

        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ValueExpressionContext,i)

        def ASTERISK(self):
            return self.getToken(fugue_sqlParser.ASTERISK, 0)
        def SLASH(self):
            return self.getToken(fugue_sqlParser.SLASH, 0)
        def PERCENT(self):
            return self.getToken(fugue_sqlParser.PERCENT, 0)
        def DIV(self):
            return self.getToken(fugue_sqlParser.DIV, 0)
        def PLUS(self):
            return self.getToken(fugue_sqlParser.PLUS, 0)
        def MINUS(self):
            return self.getToken(fugue_sqlParser.MINUS, 0)
        def CONCAT_PIPE(self):
            return self.getToken(fugue_sqlParser.CONCAT_PIPE, 0)
        def AMPERSAND(self):
            return self.getToken(fugue_sqlParser.AMPERSAND, 0)
        def HAT(self):
            return self.getToken(fugue_sqlParser.HAT, 0)
        def PIPE(self):
            return self.getToken(fugue_sqlParser.PIPE, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArithmeticBinary" ):
                return visitor.visitArithmeticBinary(self)
            else:
                return visitor.visitChildren(self)


    class ArithmeticUnaryContext(ValueExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.ValueExpressionContext
            super().__init__(parser)
            self.theOperator = None # Token
            self.copyFrom(ctx)

        def valueExpression(self):
            return self.getTypedRuleContext(fugue_sqlParser.ValueExpressionContext,0)

        def MINUS(self):
            return self.getToken(fugue_sqlParser.MINUS, 0)
        def PLUS(self):
            return self.getToken(fugue_sqlParser.PLUS, 0)
        def TILDE(self):
            return self.getToken(fugue_sqlParser.TILDE, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArithmeticUnary" ):
                return visitor.visitArithmeticUnary(self)
            else:
                return visitor.visitChildren(self)



    def valueExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = fugue_sqlParser.ValueExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 344
        self.enterRecursionRule(localctx, 344, self.RULE_valueExpression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3251
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,439,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.ValueExpressionDefaultContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 3248
                self.primaryExpression(0)
                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.ArithmeticUnaryContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3249
                localctx.theOperator = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 314)) & ~0x3f) == 0 and ((1 << (_la - 314)) & ((1 << (fugue_sqlParser.PLUS - 314)) | (1 << (fugue_sqlParser.MINUS - 314)) | (1 << (fugue_sqlParser.TILDE - 314)))) != 0)):
                    localctx.theOperator = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3250
                self.valueExpression(7)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 3274
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,441,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 3272
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,440,self._ctx)
                    if la_ == 1:
                        localctx = fugue_sqlParser.ArithmeticBinaryContext(self, fugue_sqlParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 3253
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 3254
                        localctx.theOperator = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 316)) & ~0x3f) == 0 and ((1 << (_la - 316)) & ((1 << (fugue_sqlParser.ASTERISK - 316)) | (1 << (fugue_sqlParser.SLASH - 316)) | (1 << (fugue_sqlParser.PERCENT - 316)) | (1 << (fugue_sqlParser.DIV - 316)))) != 0)):
                            localctx.theOperator = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 3255
                        localctx.right = self.valueExpression(7)
                        pass

                    elif la_ == 2:
                        localctx = fugue_sqlParser.ArithmeticBinaryContext(self, fugue_sqlParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 3256
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 3257
                        localctx.theOperator = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 314)) & ~0x3f) == 0 and ((1 << (_la - 314)) & ((1 << (fugue_sqlParser.PLUS - 314)) | (1 << (fugue_sqlParser.MINUS - 314)) | (1 << (fugue_sqlParser.CONCAT_PIPE - 314)))) != 0)):
                            localctx.theOperator = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 3258
                        localctx.right = self.valueExpression(6)
                        pass

                    elif la_ == 3:
                        localctx = fugue_sqlParser.ArithmeticBinaryContext(self, fugue_sqlParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 3259
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 3260
                        localctx.theOperator = self.match(fugue_sqlParser.AMPERSAND)
                        self.state = 3261
                        localctx.right = self.valueExpression(5)
                        pass

                    elif la_ == 4:
                        localctx = fugue_sqlParser.ArithmeticBinaryContext(self, fugue_sqlParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 3262
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 3263
                        localctx.theOperator = self.match(fugue_sqlParser.HAT)
                        self.state = 3264
                        localctx.right = self.valueExpression(4)
                        pass

                    elif la_ == 5:
                        localctx = fugue_sqlParser.ArithmeticBinaryContext(self, fugue_sqlParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 3265
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 3266
                        localctx.theOperator = self.match(fugue_sqlParser.PIPE)
                        self.state = 3267
                        localctx.right = self.valueExpression(3)
                        pass

                    elif la_ == 6:
                        localctx = fugue_sqlParser.ComparisonContext(self, fugue_sqlParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 3268
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 3269
                        self.comparisonOperator()
                        self.state = 3270
                        localctx.right = self.valueExpression(2)
                        pass

             
                self.state = 3276
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,441,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class PrimaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_primaryExpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class StructContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self._namedExpression = None # NamedExpressionContext
            self.argument = list() # of NamedExpressionContexts
            self.copyFrom(ctx)

        def STRUCT(self):
            return self.getToken(fugue_sqlParser.STRUCT, 0)
        def namedExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.NamedExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.NamedExpressionContext,i)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStruct" ):
                return visitor.visitStruct(self)
            else:
                return visitor.visitChildren(self)


    class DereferenceContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.base = None # PrimaryExpressionContext
            self.fieldName = None # IdentifierContext
            self.copyFrom(ctx)

        def primaryExpression(self):
            return self.getTypedRuleContext(fugue_sqlParser.PrimaryExpressionContext,0)

        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDereference" ):
                return visitor.visitDereference(self)
            else:
                return visitor.visitChildren(self)


    class SimpleCaseContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.value = None # ExpressionContext
            self.elseExpression = None # ExpressionContext
            self.copyFrom(ctx)

        def CASE(self):
            return self.getToken(fugue_sqlParser.CASE, 0)
        def END(self):
            return self.getToken(fugue_sqlParser.END, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,i)

        def whenClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.WhenClauseContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.WhenClauseContext,i)

        def ELSE(self):
            return self.getToken(fugue_sqlParser.ELSE, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleCase" ):
                return visitor.visitSimpleCase(self)
            else:
                return visitor.visitChildren(self)


    class ColumnReferenceContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnReference" ):
                return visitor.visitColumnReference(self)
            else:
                return visitor.visitChildren(self)


    class RowConstructorContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def namedExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.NamedExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.NamedExpressionContext,i)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRowConstructor" ):
                return visitor.visitRowConstructor(self)
            else:
                return visitor.visitChildren(self)


    class LastContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LAST(self):
            return self.getToken(fugue_sqlParser.LAST, 0)
        def expression(self):
            return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,0)

        def IGNORE(self):
            return self.getToken(fugue_sqlParser.IGNORE, 0)
        def THENULLS(self):
            return self.getToken(fugue_sqlParser.THENULLS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLast" ):
                return visitor.visitLast(self)
            else:
                return visitor.visitChildren(self)


    class StarContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ASTERISK(self):
            return self.getToken(fugue_sqlParser.ASTERISK, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(fugue_sqlParser.QualifiedNameContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStar" ):
                return visitor.visitStar(self)
            else:
                return visitor.visitChildren(self)


    class OverlayContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.iinput = None # ValueExpressionContext
            self.replace = None # ValueExpressionContext
            self.position = None # ValueExpressionContext
            self.length = None # ValueExpressionContext
            self.copyFrom(ctx)

        def OVERLAY(self):
            return self.getToken(fugue_sqlParser.OVERLAY, 0)
        def PLACING(self):
            return self.getToken(fugue_sqlParser.PLACING, 0)
        def FROM(self):
            return self.getToken(fugue_sqlParser.FROM, 0)
        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ValueExpressionContext,i)

        def FOR(self):
            return self.getToken(fugue_sqlParser.FOR, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOverlay" ):
                return visitor.visitOverlay(self)
            else:
                return visitor.visitChildren(self)


    class SubscriptContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.value = None # PrimaryExpressionContext
            self.index = None # ValueExpressionContext
            self.copyFrom(ctx)

        def primaryExpression(self):
            return self.getTypedRuleContext(fugue_sqlParser.PrimaryExpressionContext,0)

        def valueExpression(self):
            return self.getTypedRuleContext(fugue_sqlParser.ValueExpressionContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubscript" ):
                return visitor.visitSubscript(self)
            else:
                return visitor.visitChildren(self)


    class SubqueryExpressionContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def query(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubqueryExpression" ):
                return visitor.visitSubqueryExpression(self)
            else:
                return visitor.visitChildren(self)


    class SubstringContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.istr = None # ValueExpressionContext
            self.pos = None # ValueExpressionContext
            self.ilen = None # ValueExpressionContext
            self.copyFrom(ctx)

        def SUBSTR(self):
            return self.getToken(fugue_sqlParser.SUBSTR, 0)
        def SUBSTRING(self):
            return self.getToken(fugue_sqlParser.SUBSTRING, 0)
        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ValueExpressionContext,i)

        def FROM(self):
            return self.getToken(fugue_sqlParser.FROM, 0)
        def FOR(self):
            return self.getToken(fugue_sqlParser.FOR, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubstring" ):
                return visitor.visitSubstring(self)
            else:
                return visitor.visitChildren(self)


    class CurrentDatetimeContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.name = None # Token
            self.copyFrom(ctx)

        def CURRENT_DATE(self):
            return self.getToken(fugue_sqlParser.CURRENT_DATE, 0)
        def CURRENT_TIMESTAMP(self):
            return self.getToken(fugue_sqlParser.CURRENT_TIMESTAMP, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCurrentDatetime" ):
                return visitor.visitCurrentDatetime(self)
            else:
                return visitor.visitChildren(self)


    class CastContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CAST(self):
            return self.getToken(fugue_sqlParser.CAST, 0)
        def expression(self):
            return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,0)

        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)
        def dataType(self):
            return self.getTypedRuleContext(fugue_sqlParser.DataTypeContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCast" ):
                return visitor.visitCast(self)
            else:
                return visitor.visitChildren(self)


    class ConstantDefaultContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def constant(self):
            return self.getTypedRuleContext(fugue_sqlParser.ConstantContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstantDefault" ):
                return visitor.visitConstantDefault(self)
            else:
                return visitor.visitChildren(self)


    class LambdaContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,i)

        def expression(self):
            return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambda" ):
                return visitor.visitLambda(self)
            else:
                return visitor.visitChildren(self)


    class ParenthesizedExpressionContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParenthesizedExpression" ):
                return visitor.visitParenthesizedExpression(self)
            else:
                return visitor.visitChildren(self)


    class ExtractContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.field = None # IdentifierContext
            self.source = None # ValueExpressionContext
            self.copyFrom(ctx)

        def EXTRACT(self):
            return self.getToken(fugue_sqlParser.EXTRACT, 0)
        def FROM(self):
            return self.getToken(fugue_sqlParser.FROM, 0)
        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)

        def valueExpression(self):
            return self.getTypedRuleContext(fugue_sqlParser.ValueExpressionContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExtract" ):
                return visitor.visitExtract(self)
            else:
                return visitor.visitChildren(self)


    class TrimContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.trimOption = None # Token
            self.trimStr = None # ValueExpressionContext
            self.srcStr = None # ValueExpressionContext
            self.copyFrom(ctx)

        def TRIM(self):
            return self.getToken(fugue_sqlParser.TRIM, 0)
        def FROM(self):
            return self.getToken(fugue_sqlParser.FROM, 0)
        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ValueExpressionContext,i)

        def BOTH(self):
            return self.getToken(fugue_sqlParser.BOTH, 0)
        def LEADING(self):
            return self.getToken(fugue_sqlParser.LEADING, 0)
        def TRAILING(self):
            return self.getToken(fugue_sqlParser.TRAILING, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTrim" ):
                return visitor.visitTrim(self)
            else:
                return visitor.visitChildren(self)


    class FunctionCallContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self._expression = None # ExpressionContext
            self.argument = list() # of ExpressionContexts
            self.where = None # BooleanExpressionContext
            self.copyFrom(ctx)

        def functionName(self):
            return self.getTypedRuleContext(fugue_sqlParser.FunctionNameContext,0)

        def FILTER(self):
            return self.getToken(fugue_sqlParser.FILTER, 0)
        def WHERE(self):
            return self.getToken(fugue_sqlParser.WHERE, 0)
        def OVER(self):
            return self.getToken(fugue_sqlParser.OVER, 0)
        def windowSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.WindowSpecContext,0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,i)

        def booleanExpression(self):
            return self.getTypedRuleContext(fugue_sqlParser.BooleanExpressionContext,0)

        def setQuantifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.SetQuantifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionCall" ):
                return visitor.visitFunctionCall(self)
            else:
                return visitor.visitChildren(self)


    class SearchedCaseContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.elseExpression = None # ExpressionContext
            self.copyFrom(ctx)

        def CASE(self):
            return self.getToken(fugue_sqlParser.CASE, 0)
        def END(self):
            return self.getToken(fugue_sqlParser.END, 0)
        def whenClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.WhenClauseContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.WhenClauseContext,i)

        def ELSE(self):
            return self.getToken(fugue_sqlParser.ELSE, 0)
        def expression(self):
            return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSearchedCase" ):
                return visitor.visitSearchedCase(self)
            else:
                return visitor.visitChildren(self)


    class PositionContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.substr = None # ValueExpressionContext
            self.istr = None # ValueExpressionContext
            self.copyFrom(ctx)

        def POSITION(self):
            return self.getToken(fugue_sqlParser.POSITION, 0)
        def IN(self):
            return self.getToken(fugue_sqlParser.IN, 0)
        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ValueExpressionContext,i)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPosition" ):
                return visitor.visitPosition(self)
            else:
                return visitor.visitChildren(self)


    class FirstContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FIRST(self):
            return self.getToken(fugue_sqlParser.FIRST, 0)
        def expression(self):
            return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,0)

        def IGNORE(self):
            return self.getToken(fugue_sqlParser.IGNORE, 0)
        def THENULLS(self):
            return self.getToken(fugue_sqlParser.THENULLS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFirst" ):
                return visitor.visitFirst(self)
            else:
                return visitor.visitChildren(self)



    def primaryExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = fugue_sqlParser.PrimaryExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 346
        self.enterRecursionRule(localctx, 346, self.RULE_primaryExpression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3461
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,461,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.CurrentDatetimeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 3278
                localctx.name = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.CURRENT_DATE or _la==fugue_sqlParser.CURRENT_TIMESTAMP):
                    localctx.name = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.SearchedCaseContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3279
                self.match(fugue_sqlParser.CASE)
                self.state = 3281 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 3280
                    self.whenClause()
                    self.state = 3283 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==fugue_sqlParser.WHEN):
                        break

                self.state = 3287
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.ELSE:
                    self.state = 3285
                    self.match(fugue_sqlParser.ELSE)
                    self.state = 3286
                    localctx.elseExpression = self.expression()


                self.state = 3289
                self.match(fugue_sqlParser.END)
                pass

            elif la_ == 3:
                localctx = fugue_sqlParser.SimpleCaseContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3291
                self.match(fugue_sqlParser.CASE)
                self.state = 3292
                localctx.value = self.expression()
                self.state = 3294 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 3293
                    self.whenClause()
                    self.state = 3296 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==fugue_sqlParser.WHEN):
                        break

                self.state = 3300
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.ELSE:
                    self.state = 3298
                    self.match(fugue_sqlParser.ELSE)
                    self.state = 3299
                    localctx.elseExpression = self.expression()


                self.state = 3302
                self.match(fugue_sqlParser.END)
                pass

            elif la_ == 4:
                localctx = fugue_sqlParser.CastContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3304
                self.match(fugue_sqlParser.CAST)
                self.state = 3305
                self.match(fugue_sqlParser.T__2)
                self.state = 3306
                self.expression()
                self.state = 3307
                self.match(fugue_sqlParser.AS)
                self.state = 3308
                self.dataType()
                self.state = 3309
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 5:
                localctx = fugue_sqlParser.StructContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3311
                self.match(fugue_sqlParser.STRUCT)
                self.state = 3312
                self.match(fugue_sqlParser.T__2)
                self.state = 3321
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << fugue_sqlParser.T__2) | (1 << fugue_sqlParser.ADD) | (1 << fugue_sqlParser.AFTER) | (1 << fugue_sqlParser.ALL) | (1 << fugue_sqlParser.ALTER) | (1 << fugue_sqlParser.ANALYZE) | (1 << fugue_sqlParser.AND) | (1 << fugue_sqlParser.ANTI) | (1 << fugue_sqlParser.ANY) | (1 << fugue_sqlParser.ARCHIVE) | (1 << fugue_sqlParser.ARRAY) | (1 << fugue_sqlParser.AS))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (fugue_sqlParser.ASC - 64)) | (1 << (fugue_sqlParser.AT - 64)) | (1 << (fugue_sqlParser.AUTHORIZATION - 64)) | (1 << (fugue_sqlParser.BETWEEN - 64)) | (1 << (fugue_sqlParser.BOTH - 64)) | (1 << (fugue_sqlParser.BUCKET - 64)) | (1 << (fugue_sqlParser.BUCKETS - 64)) | (1 << (fugue_sqlParser.BY - 64)) | (1 << (fugue_sqlParser.CACHE - 64)) | (1 << (fugue_sqlParser.CASCADE - 64)) | (1 << (fugue_sqlParser.CASE - 64)) | (1 << (fugue_sqlParser.CAST - 64)) | (1 << (fugue_sqlParser.CHANGE - 64)) | (1 << (fugue_sqlParser.CHECK - 64)) | (1 << (fugue_sqlParser.CLEAR - 64)) | (1 << (fugue_sqlParser.CLUSTER - 64)) | (1 << (fugue_sqlParser.CLUSTERED - 64)) | (1 << (fugue_sqlParser.CODEGEN - 64)) | (1 << (fugue_sqlParser.COLLATE - 64)) | (1 << (fugue_sqlParser.COLLECTION - 64)) | (1 << (fugue_sqlParser.COLUMN - 64)) | (1 << (fugue_sqlParser.COLUMNS - 64)) | (1 << (fugue_sqlParser.COMMENT - 64)) | (1 << (fugue_sqlParser.COMMIT - 64)) | (1 << (fugue_sqlParser.COMPACT - 64)) | (1 << (fugue_sqlParser.COMPACTIONS - 64)) | (1 << (fugue_sqlParser.COMPUTE - 64)) | (1 << (fugue_sqlParser.CONCATENATE - 64)) | (1 << (fugue_sqlParser.CONSTRAINT - 64)) | (1 << (fugue_sqlParser.COST - 64)) | (1 << (fugue_sqlParser.CREATE - 64)) | (1 << (fugue_sqlParser.CROSS - 64)) | (1 << (fugue_sqlParser.CUBE - 64)) | (1 << (fugue_sqlParser.CURRENT - 64)) | (1 << (fugue_sqlParser.CURRENT_DATE - 64)) | (1 << (fugue_sqlParser.CURRENT_TIME - 64)) | (1 << (fugue_sqlParser.CURRENT_TIMESTAMP - 64)) | (1 << (fugue_sqlParser.CURRENT_USER - 64)) | (1 << (fugue_sqlParser.DATA - 64)) | (1 << (fugue_sqlParser.DATABASE - 64)) | (1 << (fugue_sqlParser.DATABASES - 64)) | (1 << (fugue_sqlParser.DAY - 64)) | (1 << (fugue_sqlParser.DBPROPERTIES - 64)) | (1 << (fugue_sqlParser.DEFINED - 64)) | (1 << (fugue_sqlParser.DELETE - 64)) | (1 << (fugue_sqlParser.DELIMITED - 64)) | (1 << (fugue_sqlParser.DESC - 64)) | (1 << (fugue_sqlParser.DESCRIBE - 64)) | (1 << (fugue_sqlParser.DFS - 64)) | (1 << (fugue_sqlParser.DIRECTORIES - 64)) | (1 << (fugue_sqlParser.DIRECTORY - 64)) | (1 << (fugue_sqlParser.DISTINCT - 64)) | (1 << (fugue_sqlParser.DISTRIBUTE - 64)) | (1 << (fugue_sqlParser.DROP - 64)) | (1 << (fugue_sqlParser.ELSE - 64)) | (1 << (fugue_sqlParser.END - 64)) | (1 << (fugue_sqlParser.ESCAPE - 64)) | (1 << (fugue_sqlParser.ESCAPED - 64)) | (1 << (fugue_sqlParser.EXCEPT - 64)) | (1 << (fugue_sqlParser.EXCHANGE - 64)) | (1 << (fugue_sqlParser.EXISTS - 64)) | (1 << (fugue_sqlParser.EXPLAIN - 64)) | (1 << (fugue_sqlParser.EXPORT - 64)) | (1 << (fugue_sqlParser.EXTENDED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (fugue_sqlParser.EXTERNAL - 128)) | (1 << (fugue_sqlParser.EXTRACT - 128)) | (1 << (fugue_sqlParser.FALSE - 128)) | (1 << (fugue_sqlParser.FETCH - 128)) | (1 << (fugue_sqlParser.FIELDS - 128)) | (1 << (fugue_sqlParser.FILTER - 128)) | (1 << (fugue_sqlParser.FILEFORMAT - 128)) | (1 << (fugue_sqlParser.FIRST - 128)) | (1 << (fugue_sqlParser.FOLLOWING - 128)) | (1 << (fugue_sqlParser.FOR - 128)) | (1 << (fugue_sqlParser.FOREIGN - 128)) | (1 << (fugue_sqlParser.FORMAT - 128)) | (1 << (fugue_sqlParser.FORMATTED - 128)) | (1 << (fugue_sqlParser.FROM - 128)) | (1 << (fugue_sqlParser.FULL - 128)) | (1 << (fugue_sqlParser.FUNCTION - 128)) | (1 << (fugue_sqlParser.FUNCTIONS - 128)) | (1 << (fugue_sqlParser.GLOBAL - 128)) | (1 << (fugue_sqlParser.GRANT - 128)) | (1 << (fugue_sqlParser.GROUP - 128)) | (1 << (fugue_sqlParser.GROUPING - 128)) | (1 << (fugue_sqlParser.HAVING - 128)) | (1 << (fugue_sqlParser.HOUR - 128)) | (1 << (fugue_sqlParser.IF - 128)) | (1 << (fugue_sqlParser.IGNORE - 128)) | (1 << (fugue_sqlParser.IMPORT - 128)) | (1 << (fugue_sqlParser.IN - 128)) | (1 << (fugue_sqlParser.INDEX - 128)) | (1 << (fugue_sqlParser.INDEXES - 128)) | (1 << (fugue_sqlParser.INNER - 128)) | (1 << (fugue_sqlParser.INPATH - 128)) | (1 << (fugue_sqlParser.INPUTFORMAT - 128)) | (1 << (fugue_sqlParser.INSERT - 128)) | (1 << (fugue_sqlParser.INTERSECT - 128)) | (1 << (fugue_sqlParser.INTERVAL - 128)) | (1 << (fugue_sqlParser.INTO - 128)) | (1 << (fugue_sqlParser.IS - 128)) | (1 << (fugue_sqlParser.ITEMS - 128)) | (1 << (fugue_sqlParser.JOIN - 128)) | (1 << (fugue_sqlParser.KEYS - 128)) | (1 << (fugue_sqlParser.LAST - 128)) | (1 << (fugue_sqlParser.LATERAL - 128)) | (1 << (fugue_sqlParser.LAZY - 128)) | (1 << (fugue_sqlParser.LEADING - 128)) | (1 << (fugue_sqlParser.LEFT - 128)) | (1 << (fugue_sqlParser.LIKE - 128)) | (1 << (fugue_sqlParser.LIMIT - 128)) | (1 << (fugue_sqlParser.LINES - 128)) | (1 << (fugue_sqlParser.LIST - 128)) | (1 << (fugue_sqlParser.LOAD - 128)) | (1 << (fugue_sqlParser.LOCAL - 128)) | (1 << (fugue_sqlParser.LOCATION - 128)) | (1 << (fugue_sqlParser.LOCK - 128)) | (1 << (fugue_sqlParser.LOCKS - 128)) | (1 << (fugue_sqlParser.LOGICAL - 128)) | (1 << (fugue_sqlParser.MACRO - 128)) | (1 << (fugue_sqlParser.MAP - 128)) | (1 << (fugue_sqlParser.MATCHED - 128)) | (1 << (fugue_sqlParser.MERGE - 128)) | (1 << (fugue_sqlParser.MINUTE - 128)) | (1 << (fugue_sqlParser.MONTH - 128)) | (1 << (fugue_sqlParser.MSCK - 128)) | (1 << (fugue_sqlParser.NAMESPACE - 128)) | (1 << (fugue_sqlParser.NAMESPACES - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (fugue_sqlParser.NATURAL - 192)) | (1 << (fugue_sqlParser.NO - 192)) | (1 << (fugue_sqlParser.NOT - 192)) | (1 << (fugue_sqlParser.THENULL - 192)) | (1 << (fugue_sqlParser.THENULLS - 192)) | (1 << (fugue_sqlParser.OF - 192)) | (1 << (fugue_sqlParser.ON - 192)) | (1 << (fugue_sqlParser.ONLY - 192)) | (1 << (fugue_sqlParser.OPTION - 192)) | (1 << (fugue_sqlParser.OPTIONS - 192)) | (1 << (fugue_sqlParser.OR - 192)) | (1 << (fugue_sqlParser.ORDER - 192)) | (1 << (fugue_sqlParser.OUT - 192)) | (1 << (fugue_sqlParser.OUTER - 192)) | (1 << (fugue_sqlParser.OUTPUTFORMAT - 192)) | (1 << (fugue_sqlParser.OVER - 192)) | (1 << (fugue_sqlParser.OVERLAPS - 192)) | (1 << (fugue_sqlParser.OVERLAY - 192)) | (1 << (fugue_sqlParser.OVERWRITE - 192)) | (1 << (fugue_sqlParser.PARTITION - 192)) | (1 << (fugue_sqlParser.PARTITIONED - 192)) | (1 << (fugue_sqlParser.PARTITIONS - 192)) | (1 << (fugue_sqlParser.PERCENTLIT - 192)) | (1 << (fugue_sqlParser.PIVOT - 192)) | (1 << (fugue_sqlParser.PLACING - 192)) | (1 << (fugue_sqlParser.POSITION - 192)) | (1 << (fugue_sqlParser.PRECEDING - 192)) | (1 << (fugue_sqlParser.PRIMARY - 192)) | (1 << (fugue_sqlParser.PRINCIPALS - 192)) | (1 << (fugue_sqlParser.PROPERTIES - 192)) | (1 << (fugue_sqlParser.PURGE - 192)) | (1 << (fugue_sqlParser.QUERY - 192)) | (1 << (fugue_sqlParser.RANGE - 192)) | (1 << (fugue_sqlParser.RECORDREADER - 192)) | (1 << (fugue_sqlParser.RECORDWRITER - 192)) | (1 << (fugue_sqlParser.RECOVER - 192)) | (1 << (fugue_sqlParser.REDUCE - 192)) | (1 << (fugue_sqlParser.REFERENCES - 192)) | (1 << (fugue_sqlParser.REFRESH - 192)) | (1 << (fugue_sqlParser.RENAME - 192)) | (1 << (fugue_sqlParser.REPAIR - 192)) | (1 << (fugue_sqlParser.REPLACE - 192)) | (1 << (fugue_sqlParser.RESET - 192)) | (1 << (fugue_sqlParser.RESTRICT - 192)) | (1 << (fugue_sqlParser.REVOKE - 192)) | (1 << (fugue_sqlParser.RIGHT - 192)) | (1 << (fugue_sqlParser.RLIKE - 192)) | (1 << (fugue_sqlParser.ROLE - 192)) | (1 << (fugue_sqlParser.ROLES - 192)) | (1 << (fugue_sqlParser.ROLLBACK - 192)) | (1 << (fugue_sqlParser.ROLLUP - 192)) | (1 << (fugue_sqlParser.ROW - 192)) | (1 << (fugue_sqlParser.ROWS - 192)) | (1 << (fugue_sqlParser.SCHEMA - 192)) | (1 << (fugue_sqlParser.SECOND - 192)) | (1 << (fugue_sqlParser.SELECT - 192)) | (1 << (fugue_sqlParser.SEMI - 192)) | (1 << (fugue_sqlParser.SEPARATED - 192)) | (1 << (fugue_sqlParser.SERDE - 192)) | (1 << (fugue_sqlParser.SERDEPROPERTIES - 192)) | (1 << (fugue_sqlParser.SESSION_USER - 192)) | (1 << (fugue_sqlParser.SET - 192)) | (1 << (fugue_sqlParser.SETMINUS - 192)) | (1 << (fugue_sqlParser.SETS - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (fugue_sqlParser.SHOW - 256)) | (1 << (fugue_sqlParser.SKEWED - 256)) | (1 << (fugue_sqlParser.SOME - 256)) | (1 << (fugue_sqlParser.SORT - 256)) | (1 << (fugue_sqlParser.SORTED - 256)) | (1 << (fugue_sqlParser.START - 256)) | (1 << (fugue_sqlParser.STATISTICS - 256)) | (1 << (fugue_sqlParser.STORED - 256)) | (1 << (fugue_sqlParser.STRATIFY - 256)) | (1 << (fugue_sqlParser.STRUCT - 256)) | (1 << (fugue_sqlParser.SUBSTR - 256)) | (1 << (fugue_sqlParser.SUBSTRING - 256)) | (1 << (fugue_sqlParser.TABLE - 256)) | (1 << (fugue_sqlParser.TABLES - 256)) | (1 << (fugue_sqlParser.TABLESAMPLE - 256)) | (1 << (fugue_sqlParser.TBLPROPERTIES - 256)) | (1 << (fugue_sqlParser.TEMPORARY - 256)) | (1 << (fugue_sqlParser.TERMINATED - 256)) | (1 << (fugue_sqlParser.THEN - 256)) | (1 << (fugue_sqlParser.TO - 256)) | (1 << (fugue_sqlParser.TOUCH - 256)) | (1 << (fugue_sqlParser.TRAILING - 256)) | (1 << (fugue_sqlParser.TRANSACTION - 256)) | (1 << (fugue_sqlParser.TRANSACTIONS - 256)) | (1 << (fugue_sqlParser.TRANSFORM - 256)) | (1 << (fugue_sqlParser.TRIM - 256)) | (1 << (fugue_sqlParser.TRUE - 256)) | (1 << (fugue_sqlParser.TRUNCATE - 256)) | (1 << (fugue_sqlParser.TYPE - 256)) | (1 << (fugue_sqlParser.UNARCHIVE - 256)) | (1 << (fugue_sqlParser.UNBOUNDED - 256)) | (1 << (fugue_sqlParser.UNCACHE - 256)) | (1 << (fugue_sqlParser.UNION - 256)) | (1 << (fugue_sqlParser.UNIQUE - 256)) | (1 << (fugue_sqlParser.UNKNOWN - 256)) | (1 << (fugue_sqlParser.UNLOCK - 256)) | (1 << (fugue_sqlParser.UNSET - 256)) | (1 << (fugue_sqlParser.UPDATE - 256)) | (1 << (fugue_sqlParser.USE - 256)) | (1 << (fugue_sqlParser.USER - 256)) | (1 << (fugue_sqlParser.USING - 256)) | (1 << (fugue_sqlParser.VALUES - 256)) | (1 << (fugue_sqlParser.VIEW - 256)) | (1 << (fugue_sqlParser.VIEWS - 256)) | (1 << (fugue_sqlParser.WHEN - 256)) | (1 << (fugue_sqlParser.WHERE - 256)) | (1 << (fugue_sqlParser.WINDOW - 256)) | (1 << (fugue_sqlParser.WITH - 256)) | (1 << (fugue_sqlParser.YEAR - 256)) | (1 << (fugue_sqlParser.PLUS - 256)) | (1 << (fugue_sqlParser.MINUS - 256)) | (1 << (fugue_sqlParser.ASTERISK - 256)) | (1 << (fugue_sqlParser.DIV - 256)))) != 0) or ((((_la - 320)) & ~0x3f) == 0 and ((1 << (_la - 320)) & ((1 << (fugue_sqlParser.TILDE - 320)) | (1 << (fugue_sqlParser.STRING - 320)) | (1 << (fugue_sqlParser.BIGINT_LITERAL - 320)) | (1 << (fugue_sqlParser.SMALLINT_LITERAL - 320)) | (1 << (fugue_sqlParser.TINYINT_LITERAL - 320)) | (1 << (fugue_sqlParser.INTEGER_VALUE - 320)) | (1 << (fugue_sqlParser.EXPONENT_VALUE - 320)) | (1 << (fugue_sqlParser.DECIMAL_VALUE - 320)) | (1 << (fugue_sqlParser.DOUBLE_LITERAL - 320)) | (1 << (fugue_sqlParser.BIGDECIMAL_LITERAL - 320)) | (1 << (fugue_sqlParser.IDENTIFIER - 320)) | (1 << (fugue_sqlParser.BACKQUOTED_IDENTIFIER - 320)))) != 0):
                    self.state = 3313
                    localctx._namedExpression = self.namedExpression()
                    localctx.argument.append(localctx._namedExpression)
                    self.state = 3318
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==fugue_sqlParser.T__0:
                        self.state = 3314
                        self.match(fugue_sqlParser.T__0)
                        self.state = 3315
                        localctx._namedExpression = self.namedExpression()
                        localctx.argument.append(localctx._namedExpression)
                        self.state = 3320
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 3323
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 6:
                localctx = fugue_sqlParser.FirstContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3324
                self.match(fugue_sqlParser.FIRST)
                self.state = 3325
                self.match(fugue_sqlParser.T__2)
                self.state = 3326
                self.expression()
                self.state = 3329
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.IGNORE:
                    self.state = 3327
                    self.match(fugue_sqlParser.IGNORE)
                    self.state = 3328
                    self.match(fugue_sqlParser.THENULLS)


                self.state = 3331
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 7:
                localctx = fugue_sqlParser.LastContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3333
                self.match(fugue_sqlParser.LAST)
                self.state = 3334
                self.match(fugue_sqlParser.T__2)
                self.state = 3335
                self.expression()
                self.state = 3338
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.IGNORE:
                    self.state = 3336
                    self.match(fugue_sqlParser.IGNORE)
                    self.state = 3337
                    self.match(fugue_sqlParser.THENULLS)


                self.state = 3340
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 8:
                localctx = fugue_sqlParser.PositionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3342
                self.match(fugue_sqlParser.POSITION)
                self.state = 3343
                self.match(fugue_sqlParser.T__2)
                self.state = 3344
                localctx.substr = self.valueExpression(0)
                self.state = 3345
                self.match(fugue_sqlParser.IN)
                self.state = 3346
                localctx.istr = self.valueExpression(0)
                self.state = 3347
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 9:
                localctx = fugue_sqlParser.ConstantDefaultContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3349
                self.constant()
                pass

            elif la_ == 10:
                localctx = fugue_sqlParser.StarContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3350
                self.match(fugue_sqlParser.ASTERISK)
                pass

            elif la_ == 11:
                localctx = fugue_sqlParser.StarContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3351
                self.qualifiedName()
                self.state = 3352
                self.match(fugue_sqlParser.T__6)
                self.state = 3353
                self.match(fugue_sqlParser.ASTERISK)
                pass

            elif la_ == 12:
                localctx = fugue_sqlParser.RowConstructorContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3355
                self.match(fugue_sqlParser.T__2)
                self.state = 3356
                self.namedExpression()
                self.state = 3359 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 3357
                    self.match(fugue_sqlParser.T__0)
                    self.state = 3358
                    self.namedExpression()
                    self.state = 3361 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==fugue_sqlParser.T__0):
                        break

                self.state = 3363
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 13:
                localctx = fugue_sqlParser.SubqueryExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3365
                self.match(fugue_sqlParser.T__2)
                self.state = 3366
                self.query()
                self.state = 3367
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 14:
                localctx = fugue_sqlParser.FunctionCallContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3369
                self.functionName()
                self.state = 3370
                self.match(fugue_sqlParser.T__2)
                self.state = 3382
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << fugue_sqlParser.T__2) | (1 << fugue_sqlParser.ADD) | (1 << fugue_sqlParser.AFTER) | (1 << fugue_sqlParser.ALL) | (1 << fugue_sqlParser.ALTER) | (1 << fugue_sqlParser.ANALYZE) | (1 << fugue_sqlParser.AND) | (1 << fugue_sqlParser.ANTI) | (1 << fugue_sqlParser.ANY) | (1 << fugue_sqlParser.ARCHIVE) | (1 << fugue_sqlParser.ARRAY) | (1 << fugue_sqlParser.AS))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (fugue_sqlParser.ASC - 64)) | (1 << (fugue_sqlParser.AT - 64)) | (1 << (fugue_sqlParser.AUTHORIZATION - 64)) | (1 << (fugue_sqlParser.BETWEEN - 64)) | (1 << (fugue_sqlParser.BOTH - 64)) | (1 << (fugue_sqlParser.BUCKET - 64)) | (1 << (fugue_sqlParser.BUCKETS - 64)) | (1 << (fugue_sqlParser.BY - 64)) | (1 << (fugue_sqlParser.CACHE - 64)) | (1 << (fugue_sqlParser.CASCADE - 64)) | (1 << (fugue_sqlParser.CASE - 64)) | (1 << (fugue_sqlParser.CAST - 64)) | (1 << (fugue_sqlParser.CHANGE - 64)) | (1 << (fugue_sqlParser.CHECK - 64)) | (1 << (fugue_sqlParser.CLEAR - 64)) | (1 << (fugue_sqlParser.CLUSTER - 64)) | (1 << (fugue_sqlParser.CLUSTERED - 64)) | (1 << (fugue_sqlParser.CODEGEN - 64)) | (1 << (fugue_sqlParser.COLLATE - 64)) | (1 << (fugue_sqlParser.COLLECTION - 64)) | (1 << (fugue_sqlParser.COLUMN - 64)) | (1 << (fugue_sqlParser.COLUMNS - 64)) | (1 << (fugue_sqlParser.COMMENT - 64)) | (1 << (fugue_sqlParser.COMMIT - 64)) | (1 << (fugue_sqlParser.COMPACT - 64)) | (1 << (fugue_sqlParser.COMPACTIONS - 64)) | (1 << (fugue_sqlParser.COMPUTE - 64)) | (1 << (fugue_sqlParser.CONCATENATE - 64)) | (1 << (fugue_sqlParser.CONSTRAINT - 64)) | (1 << (fugue_sqlParser.COST - 64)) | (1 << (fugue_sqlParser.CREATE - 64)) | (1 << (fugue_sqlParser.CROSS - 64)) | (1 << (fugue_sqlParser.CUBE - 64)) | (1 << (fugue_sqlParser.CURRENT - 64)) | (1 << (fugue_sqlParser.CURRENT_DATE - 64)) | (1 << (fugue_sqlParser.CURRENT_TIME - 64)) | (1 << (fugue_sqlParser.CURRENT_TIMESTAMP - 64)) | (1 << (fugue_sqlParser.CURRENT_USER - 64)) | (1 << (fugue_sqlParser.DATA - 64)) | (1 << (fugue_sqlParser.DATABASE - 64)) | (1 << (fugue_sqlParser.DATABASES - 64)) | (1 << (fugue_sqlParser.DAY - 64)) | (1 << (fugue_sqlParser.DBPROPERTIES - 64)) | (1 << (fugue_sqlParser.DEFINED - 64)) | (1 << (fugue_sqlParser.DELETE - 64)) | (1 << (fugue_sqlParser.DELIMITED - 64)) | (1 << (fugue_sqlParser.DESC - 64)) | (1 << (fugue_sqlParser.DESCRIBE - 64)) | (1 << (fugue_sqlParser.DFS - 64)) | (1 << (fugue_sqlParser.DIRECTORIES - 64)) | (1 << (fugue_sqlParser.DIRECTORY - 64)) | (1 << (fugue_sqlParser.DISTINCT - 64)) | (1 << (fugue_sqlParser.DISTRIBUTE - 64)) | (1 << (fugue_sqlParser.DROP - 64)) | (1 << (fugue_sqlParser.ELSE - 64)) | (1 << (fugue_sqlParser.END - 64)) | (1 << (fugue_sqlParser.ESCAPE - 64)) | (1 << (fugue_sqlParser.ESCAPED - 64)) | (1 << (fugue_sqlParser.EXCEPT - 64)) | (1 << (fugue_sqlParser.EXCHANGE - 64)) | (1 << (fugue_sqlParser.EXISTS - 64)) | (1 << (fugue_sqlParser.EXPLAIN - 64)) | (1 << (fugue_sqlParser.EXPORT - 64)) | (1 << (fugue_sqlParser.EXTENDED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (fugue_sqlParser.EXTERNAL - 128)) | (1 << (fugue_sqlParser.EXTRACT - 128)) | (1 << (fugue_sqlParser.FALSE - 128)) | (1 << (fugue_sqlParser.FETCH - 128)) | (1 << (fugue_sqlParser.FIELDS - 128)) | (1 << (fugue_sqlParser.FILTER - 128)) | (1 << (fugue_sqlParser.FILEFORMAT - 128)) | (1 << (fugue_sqlParser.FIRST - 128)) | (1 << (fugue_sqlParser.FOLLOWING - 128)) | (1 << (fugue_sqlParser.FOR - 128)) | (1 << (fugue_sqlParser.FOREIGN - 128)) | (1 << (fugue_sqlParser.FORMAT - 128)) | (1 << (fugue_sqlParser.FORMATTED - 128)) | (1 << (fugue_sqlParser.FROM - 128)) | (1 << (fugue_sqlParser.FULL - 128)) | (1 << (fugue_sqlParser.FUNCTION - 128)) | (1 << (fugue_sqlParser.FUNCTIONS - 128)) | (1 << (fugue_sqlParser.GLOBAL - 128)) | (1 << (fugue_sqlParser.GRANT - 128)) | (1 << (fugue_sqlParser.GROUP - 128)) | (1 << (fugue_sqlParser.GROUPING - 128)) | (1 << (fugue_sqlParser.HAVING - 128)) | (1 << (fugue_sqlParser.HOUR - 128)) | (1 << (fugue_sqlParser.IF - 128)) | (1 << (fugue_sqlParser.IGNORE - 128)) | (1 << (fugue_sqlParser.IMPORT - 128)) | (1 << (fugue_sqlParser.IN - 128)) | (1 << (fugue_sqlParser.INDEX - 128)) | (1 << (fugue_sqlParser.INDEXES - 128)) | (1 << (fugue_sqlParser.INNER - 128)) | (1 << (fugue_sqlParser.INPATH - 128)) | (1 << (fugue_sqlParser.INPUTFORMAT - 128)) | (1 << (fugue_sqlParser.INSERT - 128)) | (1 << (fugue_sqlParser.INTERSECT - 128)) | (1 << (fugue_sqlParser.INTERVAL - 128)) | (1 << (fugue_sqlParser.INTO - 128)) | (1 << (fugue_sqlParser.IS - 128)) | (1 << (fugue_sqlParser.ITEMS - 128)) | (1 << (fugue_sqlParser.JOIN - 128)) | (1 << (fugue_sqlParser.KEYS - 128)) | (1 << (fugue_sqlParser.LAST - 128)) | (1 << (fugue_sqlParser.LATERAL - 128)) | (1 << (fugue_sqlParser.LAZY - 128)) | (1 << (fugue_sqlParser.LEADING - 128)) | (1 << (fugue_sqlParser.LEFT - 128)) | (1 << (fugue_sqlParser.LIKE - 128)) | (1 << (fugue_sqlParser.LIMIT - 128)) | (1 << (fugue_sqlParser.LINES - 128)) | (1 << (fugue_sqlParser.LIST - 128)) | (1 << (fugue_sqlParser.LOAD - 128)) | (1 << (fugue_sqlParser.LOCAL - 128)) | (1 << (fugue_sqlParser.LOCATION - 128)) | (1 << (fugue_sqlParser.LOCK - 128)) | (1 << (fugue_sqlParser.LOCKS - 128)) | (1 << (fugue_sqlParser.LOGICAL - 128)) | (1 << (fugue_sqlParser.MACRO - 128)) | (1 << (fugue_sqlParser.MAP - 128)) | (1 << (fugue_sqlParser.MATCHED - 128)) | (1 << (fugue_sqlParser.MERGE - 128)) | (1 << (fugue_sqlParser.MINUTE - 128)) | (1 << (fugue_sqlParser.MONTH - 128)) | (1 << (fugue_sqlParser.MSCK - 128)) | (1 << (fugue_sqlParser.NAMESPACE - 128)) | (1 << (fugue_sqlParser.NAMESPACES - 128)))) != 0) or ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (fugue_sqlParser.NATURAL - 192)) | (1 << (fugue_sqlParser.NO - 192)) | (1 << (fugue_sqlParser.NOT - 192)) | (1 << (fugue_sqlParser.THENULL - 192)) | (1 << (fugue_sqlParser.THENULLS - 192)) | (1 << (fugue_sqlParser.OF - 192)) | (1 << (fugue_sqlParser.ON - 192)) | (1 << (fugue_sqlParser.ONLY - 192)) | (1 << (fugue_sqlParser.OPTION - 192)) | (1 << (fugue_sqlParser.OPTIONS - 192)) | (1 << (fugue_sqlParser.OR - 192)) | (1 << (fugue_sqlParser.ORDER - 192)) | (1 << (fugue_sqlParser.OUT - 192)) | (1 << (fugue_sqlParser.OUTER - 192)) | (1 << (fugue_sqlParser.OUTPUTFORMAT - 192)) | (1 << (fugue_sqlParser.OVER - 192)) | (1 << (fugue_sqlParser.OVERLAPS - 192)) | (1 << (fugue_sqlParser.OVERLAY - 192)) | (1 << (fugue_sqlParser.OVERWRITE - 192)) | (1 << (fugue_sqlParser.PARTITION - 192)) | (1 << (fugue_sqlParser.PARTITIONED - 192)) | (1 << (fugue_sqlParser.PARTITIONS - 192)) | (1 << (fugue_sqlParser.PERCENTLIT - 192)) | (1 << (fugue_sqlParser.PIVOT - 192)) | (1 << (fugue_sqlParser.PLACING - 192)) | (1 << (fugue_sqlParser.POSITION - 192)) | (1 << (fugue_sqlParser.PRECEDING - 192)) | (1 << (fugue_sqlParser.PRIMARY - 192)) | (1 << (fugue_sqlParser.PRINCIPALS - 192)) | (1 << (fugue_sqlParser.PROPERTIES - 192)) | (1 << (fugue_sqlParser.PURGE - 192)) | (1 << (fugue_sqlParser.QUERY - 192)) | (1 << (fugue_sqlParser.RANGE - 192)) | (1 << (fugue_sqlParser.RECORDREADER - 192)) | (1 << (fugue_sqlParser.RECORDWRITER - 192)) | (1 << (fugue_sqlParser.RECOVER - 192)) | (1 << (fugue_sqlParser.REDUCE - 192)) | (1 << (fugue_sqlParser.REFERENCES - 192)) | (1 << (fugue_sqlParser.REFRESH - 192)) | (1 << (fugue_sqlParser.RENAME - 192)) | (1 << (fugue_sqlParser.REPAIR - 192)) | (1 << (fugue_sqlParser.REPLACE - 192)) | (1 << (fugue_sqlParser.RESET - 192)) | (1 << (fugue_sqlParser.RESTRICT - 192)) | (1 << (fugue_sqlParser.REVOKE - 192)) | (1 << (fugue_sqlParser.RIGHT - 192)) | (1 << (fugue_sqlParser.RLIKE - 192)) | (1 << (fugue_sqlParser.ROLE - 192)) | (1 << (fugue_sqlParser.ROLES - 192)) | (1 << (fugue_sqlParser.ROLLBACK - 192)) | (1 << (fugue_sqlParser.ROLLUP - 192)) | (1 << (fugue_sqlParser.ROW - 192)) | (1 << (fugue_sqlParser.ROWS - 192)) | (1 << (fugue_sqlParser.SCHEMA - 192)) | (1 << (fugue_sqlParser.SECOND - 192)) | (1 << (fugue_sqlParser.SELECT - 192)) | (1 << (fugue_sqlParser.SEMI - 192)) | (1 << (fugue_sqlParser.SEPARATED - 192)) | (1 << (fugue_sqlParser.SERDE - 192)) | (1 << (fugue_sqlParser.SERDEPROPERTIES - 192)) | (1 << (fugue_sqlParser.SESSION_USER - 192)) | (1 << (fugue_sqlParser.SET - 192)) | (1 << (fugue_sqlParser.SETMINUS - 192)) | (1 << (fugue_sqlParser.SETS - 192)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (fugue_sqlParser.SHOW - 256)) | (1 << (fugue_sqlParser.SKEWED - 256)) | (1 << (fugue_sqlParser.SOME - 256)) | (1 << (fugue_sqlParser.SORT - 256)) | (1 << (fugue_sqlParser.SORTED - 256)) | (1 << (fugue_sqlParser.START - 256)) | (1 << (fugue_sqlParser.STATISTICS - 256)) | (1 << (fugue_sqlParser.STORED - 256)) | (1 << (fugue_sqlParser.STRATIFY - 256)) | (1 << (fugue_sqlParser.STRUCT - 256)) | (1 << (fugue_sqlParser.SUBSTR - 256)) | (1 << (fugue_sqlParser.SUBSTRING - 256)) | (1 << (fugue_sqlParser.TABLE - 256)) | (1 << (fugue_sqlParser.TABLES - 256)) | (1 << (fugue_sqlParser.TABLESAMPLE - 256)) | (1 << (fugue_sqlParser.TBLPROPERTIES - 256)) | (1 << (fugue_sqlParser.TEMPORARY - 256)) | (1 << (fugue_sqlParser.TERMINATED - 256)) | (1 << (fugue_sqlParser.THEN - 256)) | (1 << (fugue_sqlParser.TO - 256)) | (1 << (fugue_sqlParser.TOUCH - 256)) | (1 << (fugue_sqlParser.TRAILING - 256)) | (1 << (fugue_sqlParser.TRANSACTION - 256)) | (1 << (fugue_sqlParser.TRANSACTIONS - 256)) | (1 << (fugue_sqlParser.TRANSFORM - 256)) | (1 << (fugue_sqlParser.TRIM - 256)) | (1 << (fugue_sqlParser.TRUE - 256)) | (1 << (fugue_sqlParser.TRUNCATE - 256)) | (1 << (fugue_sqlParser.TYPE - 256)) | (1 << (fugue_sqlParser.UNARCHIVE - 256)) | (1 << (fugue_sqlParser.UNBOUNDED - 256)) | (1 << (fugue_sqlParser.UNCACHE - 256)) | (1 << (fugue_sqlParser.UNION - 256)) | (1 << (fugue_sqlParser.UNIQUE - 256)) | (1 << (fugue_sqlParser.UNKNOWN - 256)) | (1 << (fugue_sqlParser.UNLOCK - 256)) | (1 << (fugue_sqlParser.UNSET - 256)) | (1 << (fugue_sqlParser.UPDATE - 256)) | (1 << (fugue_sqlParser.USE - 256)) | (1 << (fugue_sqlParser.USER - 256)) | (1 << (fugue_sqlParser.USING - 256)) | (1 << (fugue_sqlParser.VALUES - 256)) | (1 << (fugue_sqlParser.VIEW - 256)) | (1 << (fugue_sqlParser.VIEWS - 256)) | (1 << (fugue_sqlParser.WHEN - 256)) | (1 << (fugue_sqlParser.WHERE - 256)) | (1 << (fugue_sqlParser.WINDOW - 256)) | (1 << (fugue_sqlParser.WITH - 256)) | (1 << (fugue_sqlParser.YEAR - 256)) | (1 << (fugue_sqlParser.PLUS - 256)) | (1 << (fugue_sqlParser.MINUS - 256)) | (1 << (fugue_sqlParser.ASTERISK - 256)) | (1 << (fugue_sqlParser.DIV - 256)))) != 0) or ((((_la - 320)) & ~0x3f) == 0 and ((1 << (_la - 320)) & ((1 << (fugue_sqlParser.TILDE - 320)) | (1 << (fugue_sqlParser.STRING - 320)) | (1 << (fugue_sqlParser.BIGINT_LITERAL - 320)) | (1 << (fugue_sqlParser.SMALLINT_LITERAL - 320)) | (1 << (fugue_sqlParser.TINYINT_LITERAL - 320)) | (1 << (fugue_sqlParser.INTEGER_VALUE - 320)) | (1 << (fugue_sqlParser.EXPONENT_VALUE - 320)) | (1 << (fugue_sqlParser.DECIMAL_VALUE - 320)) | (1 << (fugue_sqlParser.DOUBLE_LITERAL - 320)) | (1 << (fugue_sqlParser.BIGDECIMAL_LITERAL - 320)) | (1 << (fugue_sqlParser.IDENTIFIER - 320)) | (1 << (fugue_sqlParser.BACKQUOTED_IDENTIFIER - 320)))) != 0):
                    self.state = 3372
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,451,self._ctx)
                    if la_ == 1:
                        self.state = 3371
                        self.setQuantifier()


                    self.state = 3374
                    localctx._expression = self.expression()
                    localctx.argument.append(localctx._expression)
                    self.state = 3379
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==fugue_sqlParser.T__0:
                        self.state = 3375
                        self.match(fugue_sqlParser.T__0)
                        self.state = 3376
                        localctx._expression = self.expression()
                        localctx.argument.append(localctx._expression)
                        self.state = 3381
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 3384
                self.match(fugue_sqlParser.T__3)
                self.state = 3391
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,454,self._ctx)
                if la_ == 1:
                    self.state = 3385
                    self.match(fugue_sqlParser.FILTER)
                    self.state = 3386
                    self.match(fugue_sqlParser.T__2)
                    self.state = 3387
                    self.match(fugue_sqlParser.WHERE)
                    self.state = 3388
                    localctx.where = self.booleanExpression(0)
                    self.state = 3389
                    self.match(fugue_sqlParser.T__3)


                self.state = 3395
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,455,self._ctx)
                if la_ == 1:
                    self.state = 3393
                    self.match(fugue_sqlParser.OVER)
                    self.state = 3394
                    self.windowSpec()


                pass

            elif la_ == 15:
                localctx = fugue_sqlParser.LambdaContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3397
                self.identifier()
                self.state = 3398
                self.match(fugue_sqlParser.T__15)
                self.state = 3399
                self.expression()
                pass

            elif la_ == 16:
                localctx = fugue_sqlParser.LambdaContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3401
                self.match(fugue_sqlParser.T__2)
                self.state = 3402
                self.identifier()
                self.state = 3405 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 3403
                    self.match(fugue_sqlParser.T__0)
                    self.state = 3404
                    self.identifier()
                    self.state = 3407 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==fugue_sqlParser.T__0):
                        break

                self.state = 3409
                self.match(fugue_sqlParser.T__3)
                self.state = 3410
                self.match(fugue_sqlParser.T__15)
                self.state = 3411
                self.expression()
                pass

            elif la_ == 17:
                localctx = fugue_sqlParser.ColumnReferenceContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3413
                self.identifier()
                pass

            elif la_ == 18:
                localctx = fugue_sqlParser.ParenthesizedExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3414
                self.match(fugue_sqlParser.T__2)
                self.state = 3415
                self.expression()
                self.state = 3416
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 19:
                localctx = fugue_sqlParser.ExtractContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3418
                self.match(fugue_sqlParser.EXTRACT)
                self.state = 3419
                self.match(fugue_sqlParser.T__2)
                self.state = 3420
                localctx.field = self.identifier()
                self.state = 3421
                self.match(fugue_sqlParser.FROM)
                self.state = 3422
                localctx.source = self.valueExpression(0)
                self.state = 3423
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 20:
                localctx = fugue_sqlParser.SubstringContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3425
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.SUBSTR or _la==fugue_sqlParser.SUBSTRING):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3426
                self.match(fugue_sqlParser.T__2)
                self.state = 3427
                localctx.istr = self.valueExpression(0)
                self.state = 3428
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.T__0 or _la==fugue_sqlParser.FROM):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3429
                localctx.pos = self.valueExpression(0)
                self.state = 3432
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.T__0 or _la==fugue_sqlParser.FOR:
                    self.state = 3430
                    _la = self._input.LA(1)
                    if not(_la==fugue_sqlParser.T__0 or _la==fugue_sqlParser.FOR):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 3431
                    localctx.ilen = self.valueExpression(0)


                self.state = 3434
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 21:
                localctx = fugue_sqlParser.TrimContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3436
                self.match(fugue_sqlParser.TRIM)
                self.state = 3437
                self.match(fugue_sqlParser.T__2)
                self.state = 3439
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,458,self._ctx)
                if la_ == 1:
                    self.state = 3438
                    localctx.trimOption = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==fugue_sqlParser.BOTH or _la==fugue_sqlParser.LEADING or _la==fugue_sqlParser.TRAILING):
                        localctx.trimOption = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 3442
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,459,self._ctx)
                if la_ == 1:
                    self.state = 3441
                    localctx.trimStr = self.valueExpression(0)


                self.state = 3444
                self.match(fugue_sqlParser.FROM)
                self.state = 3445
                localctx.srcStr = self.valueExpression(0)
                self.state = 3446
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 22:
                localctx = fugue_sqlParser.OverlayContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3448
                self.match(fugue_sqlParser.OVERLAY)
                self.state = 3449
                self.match(fugue_sqlParser.T__2)
                self.state = 3450
                localctx.iinput = self.valueExpression(0)
                self.state = 3451
                self.match(fugue_sqlParser.PLACING)
                self.state = 3452
                localctx.replace = self.valueExpression(0)
                self.state = 3453
                self.match(fugue_sqlParser.FROM)
                self.state = 3454
                localctx.position = self.valueExpression(0)
                self.state = 3457
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.FOR:
                    self.state = 3455
                    self.match(fugue_sqlParser.FOR)
                    self.state = 3456
                    localctx.length = self.valueExpression(0)


                self.state = 3459
                self.match(fugue_sqlParser.T__3)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 3473
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,463,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 3471
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,462,self._ctx)
                    if la_ == 1:
                        localctx = fugue_sqlParser.SubscriptContext(self, fugue_sqlParser.PrimaryExpressionContext(self, _parentctx, _parentState))
                        localctx.value = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_primaryExpression)
                        self.state = 3463
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 3464
                        self.match(fugue_sqlParser.T__4)
                        self.state = 3465
                        localctx.index = self.valueExpression(0)
                        self.state = 3466
                        self.match(fugue_sqlParser.T__5)
                        pass

                    elif la_ == 2:
                        localctx = fugue_sqlParser.DereferenceContext(self, fugue_sqlParser.PrimaryExpressionContext(self, _parentctx, _parentState))
                        localctx.base = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_primaryExpression)
                        self.state = 3468
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 3469
                        self.match(fugue_sqlParser.T__6)
                        self.state = 3470
                        localctx.fieldName = self.identifier()
                        pass

             
                self.state = 3475
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,463,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ConstantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_constant

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class NullLiteralContext(ConstantContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.ConstantContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def THENULL(self):
            return self.getToken(fugue_sqlParser.THENULL, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNullLiteral" ):
                return visitor.visitNullLiteral(self)
            else:
                return visitor.visitChildren(self)


    class StringLiteralContext(ConstantContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.ConstantContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.STRING)
            else:
                return self.getToken(fugue_sqlParser.STRING, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringLiteral" ):
                return visitor.visitStringLiteral(self)
            else:
                return visitor.visitChildren(self)


    class TypeConstructorContext(ConstantContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.ConstantContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)

        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeConstructor" ):
                return visitor.visitTypeConstructor(self)
            else:
                return visitor.visitChildren(self)


    class IntervalLiteralContext(ConstantContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.ConstantContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def interval(self):
            return self.getTypedRuleContext(fugue_sqlParser.IntervalContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntervalLiteral" ):
                return visitor.visitIntervalLiteral(self)
            else:
                return visitor.visitChildren(self)


    class NumericLiteralContext(ConstantContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.ConstantContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def number(self):
            return self.getTypedRuleContext(fugue_sqlParser.NumberContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumericLiteral" ):
                return visitor.visitNumericLiteral(self)
            else:
                return visitor.visitChildren(self)


    class BooleanLiteralContext(ConstantContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.ConstantContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def booleanValue(self):
            return self.getTypedRuleContext(fugue_sqlParser.BooleanValueContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBooleanLiteral" ):
                return visitor.visitBooleanLiteral(self)
            else:
                return visitor.visitChildren(self)



    def constant(self):

        localctx = fugue_sqlParser.ConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 348, self.RULE_constant)
        try:
            self.state = 3488
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,465,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.NullLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3476
                self.match(fugue_sqlParser.THENULL)
                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.IntervalLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3477
                self.interval()
                pass

            elif la_ == 3:
                localctx = fugue_sqlParser.TypeConstructorContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3478
                self.identifier()
                self.state = 3479
                self.match(fugue_sqlParser.STRING)
                pass

            elif la_ == 4:
                localctx = fugue_sqlParser.NumericLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 3481
                self.number()
                pass

            elif la_ == 5:
                localctx = fugue_sqlParser.BooleanLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 3482
                self.booleanValue()
                pass

            elif la_ == 6:
                localctx = fugue_sqlParser.StringLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 3484 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 3483
                        self.match(fugue_sqlParser.STRING)

                    else:
                        raise NoViableAltException(self)
                    self.state = 3486 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,464,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComparisonOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comparisonEqualOperator(self):
            return self.getTypedRuleContext(fugue_sqlParser.ComparisonEqualOperatorContext,0)


        def NEQ(self):
            return self.getToken(fugue_sqlParser.NEQ, 0)

        def NEQJ(self):
            return self.getToken(fugue_sqlParser.NEQJ, 0)

        def LT(self):
            return self.getToken(fugue_sqlParser.LT, 0)

        def LTE(self):
            return self.getToken(fugue_sqlParser.LTE, 0)

        def GT(self):
            return self.getToken(fugue_sqlParser.GT, 0)

        def GTE(self):
            return self.getToken(fugue_sqlParser.GTE, 0)

        def NSEQ(self):
            return self.getToken(fugue_sqlParser.NSEQ, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_comparisonOperator

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparisonOperator" ):
                return visitor.visitComparisonOperator(self)
            else:
                return visitor.visitChildren(self)




    def comparisonOperator(self):

        localctx = fugue_sqlParser.ComparisonOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 350, self.RULE_comparisonOperator)
        try:
            self.state = 3498
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [fugue_sqlParser.EQUAL, fugue_sqlParser.DOUBLEEQUAL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3490
                self.comparisonEqualOperator()
                pass
            elif token in [fugue_sqlParser.NEQ]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3491
                self.match(fugue_sqlParser.NEQ)
                pass
            elif token in [fugue_sqlParser.NEQJ]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3492
                self.match(fugue_sqlParser.NEQJ)
                pass
            elif token in [fugue_sqlParser.LT]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3493
                self.match(fugue_sqlParser.LT)
                pass
            elif token in [fugue_sqlParser.LTE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 3494
                self.match(fugue_sqlParser.LTE)
                pass
            elif token in [fugue_sqlParser.GT]:
                self.enterOuterAlt(localctx, 6)
                self.state = 3495
                self.match(fugue_sqlParser.GT)
                pass
            elif token in [fugue_sqlParser.GTE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 3496
                self.match(fugue_sqlParser.GTE)
                pass
            elif token in [fugue_sqlParser.NSEQ]:
                self.enterOuterAlt(localctx, 8)
                self.state = 3497
                self.match(fugue_sqlParser.NSEQ)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComparisonEqualOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOUBLEEQUAL(self):
            return self.getToken(fugue_sqlParser.DOUBLEEQUAL, 0)

        def EQUAL(self):
            return self.getToken(fugue_sqlParser.EQUAL, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_comparisonEqualOperator

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparisonEqualOperator" ):
                return visitor.visitComparisonEqualOperator(self)
            else:
                return visitor.visitChildren(self)




    def comparisonEqualOperator(self):

        localctx = fugue_sqlParser.ComparisonEqualOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 352, self.RULE_comparisonEqualOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3500
            _la = self._input.LA(1)
            if not(_la==fugue_sqlParser.EQUAL or _la==fugue_sqlParser.DOUBLEEQUAL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArithmeticOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLUS(self):
            return self.getToken(fugue_sqlParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(fugue_sqlParser.MINUS, 0)

        def ASTERISK(self):
            return self.getToken(fugue_sqlParser.ASTERISK, 0)

        def SLASH(self):
            return self.getToken(fugue_sqlParser.SLASH, 0)

        def PERCENT(self):
            return self.getToken(fugue_sqlParser.PERCENT, 0)

        def DIV(self):
            return self.getToken(fugue_sqlParser.DIV, 0)

        def TILDE(self):
            return self.getToken(fugue_sqlParser.TILDE, 0)

        def AMPERSAND(self):
            return self.getToken(fugue_sqlParser.AMPERSAND, 0)

        def PIPE(self):
            return self.getToken(fugue_sqlParser.PIPE, 0)

        def CONCAT_PIPE(self):
            return self.getToken(fugue_sqlParser.CONCAT_PIPE, 0)

        def HAT(self):
            return self.getToken(fugue_sqlParser.HAT, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_arithmeticOperator

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArithmeticOperator" ):
                return visitor.visitArithmeticOperator(self)
            else:
                return visitor.visitChildren(self)




    def arithmeticOperator(self):

        localctx = fugue_sqlParser.ArithmeticOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 354, self.RULE_arithmeticOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3502
            _la = self._input.LA(1)
            if not(((((_la - 314)) & ~0x3f) == 0 and ((1 << (_la - 314)) & ((1 << (fugue_sqlParser.PLUS - 314)) | (1 << (fugue_sqlParser.MINUS - 314)) | (1 << (fugue_sqlParser.ASTERISK - 314)) | (1 << (fugue_sqlParser.SLASH - 314)) | (1 << (fugue_sqlParser.PERCENT - 314)) | (1 << (fugue_sqlParser.DIV - 314)) | (1 << (fugue_sqlParser.TILDE - 314)) | (1 << (fugue_sqlParser.AMPERSAND - 314)) | (1 << (fugue_sqlParser.PIPE - 314)) | (1 << (fugue_sqlParser.CONCAT_PIPE - 314)) | (1 << (fugue_sqlParser.HAT - 314)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PredicateOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OR(self):
            return self.getToken(fugue_sqlParser.OR, 0)

        def AND(self):
            return self.getToken(fugue_sqlParser.AND, 0)

        def IN(self):
            return self.getToken(fugue_sqlParser.IN, 0)

        def NOT(self):
            return self.getToken(fugue_sqlParser.NOT, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_predicateOperator

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPredicateOperator" ):
                return visitor.visitPredicateOperator(self)
            else:
                return visitor.visitChildren(self)




    def predicateOperator(self):

        localctx = fugue_sqlParser.PredicateOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 356, self.RULE_predicateOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3504
            _la = self._input.LA(1)
            if not(_la==fugue_sqlParser.AND or ((((_la - 154)) & ~0x3f) == 0 and ((1 << (_la - 154)) & ((1 << (fugue_sqlParser.IN - 154)) | (1 << (fugue_sqlParser.NOT - 154)) | (1 << (fugue_sqlParser.OR - 154)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(fugue_sqlParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(fugue_sqlParser.FALSE, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_booleanValue

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBooleanValue" ):
                return visitor.visitBooleanValue(self)
            else:
                return visitor.visitChildren(self)




    def booleanValue(self):

        localctx = fugue_sqlParser.BooleanValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 358, self.RULE_booleanValue)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3506
            _la = self._input.LA(1)
            if not(_la==fugue_sqlParser.FALSE or _la==fugue_sqlParser.TRUE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTERVAL(self):
            return self.getToken(fugue_sqlParser.INTERVAL, 0)

        def errorCapturingMultiUnitsInterval(self):
            return self.getTypedRuleContext(fugue_sqlParser.ErrorCapturingMultiUnitsIntervalContext,0)


        def errorCapturingUnitToUnitInterval(self):
            return self.getTypedRuleContext(fugue_sqlParser.ErrorCapturingUnitToUnitIntervalContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_interval

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterval" ):
                return visitor.visitInterval(self)
            else:
                return visitor.visitChildren(self)




    def interval(self):

        localctx = fugue_sqlParser.IntervalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 360, self.RULE_interval)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3508
            self.match(fugue_sqlParser.INTERVAL)
            self.state = 3511
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,467,self._ctx)
            if la_ == 1:
                self.state = 3509
                self.errorCapturingMultiUnitsInterval()

            elif la_ == 2:
                self.state = 3510
                self.errorCapturingUnitToUnitInterval()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ErrorCapturingMultiUnitsIntervalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multiUnitsInterval(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultiUnitsIntervalContext,0)


        def unitToUnitInterval(self):
            return self.getTypedRuleContext(fugue_sqlParser.UnitToUnitIntervalContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_errorCapturingMultiUnitsInterval

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitErrorCapturingMultiUnitsInterval" ):
                return visitor.visitErrorCapturingMultiUnitsInterval(self)
            else:
                return visitor.visitChildren(self)




    def errorCapturingMultiUnitsInterval(self):

        localctx = fugue_sqlParser.ErrorCapturingMultiUnitsIntervalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 362, self.RULE_errorCapturingMultiUnitsInterval)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3513
            self.multiUnitsInterval()
            self.state = 3515
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,468,self._ctx)
            if la_ == 1:
                self.state = 3514
                self.unitToUnitInterval()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiUnitsIntervalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def intervalValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.IntervalValueContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.IntervalValueContext,i)


        def intervalUnit(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.IntervalUnitContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.IntervalUnitContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_multiUnitsInterval

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiUnitsInterval" ):
                return visitor.visitMultiUnitsInterval(self)
            else:
                return visitor.visitChildren(self)




    def multiUnitsInterval(self):

        localctx = fugue_sqlParser.MultiUnitsIntervalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 364, self.RULE_multiUnitsInterval)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3520 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 3517
                    self.intervalValue()
                    self.state = 3518
                    self.intervalUnit()

                else:
                    raise NoViableAltException(self)
                self.state = 3522 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,469,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ErrorCapturingUnitToUnitIntervalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.body = None # UnitToUnitIntervalContext
            self.error1 = None # MultiUnitsIntervalContext
            self.error2 = None # UnitToUnitIntervalContext

        def unitToUnitInterval(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.UnitToUnitIntervalContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.UnitToUnitIntervalContext,i)


        def multiUnitsInterval(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultiUnitsIntervalContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_errorCapturingUnitToUnitInterval

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitErrorCapturingUnitToUnitInterval" ):
                return visitor.visitErrorCapturingUnitToUnitInterval(self)
            else:
                return visitor.visitChildren(self)




    def errorCapturingUnitToUnitInterval(self):

        localctx = fugue_sqlParser.ErrorCapturingUnitToUnitIntervalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 366, self.RULE_errorCapturingUnitToUnitInterval)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3524
            localctx.body = self.unitToUnitInterval()
            self.state = 3527
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,470,self._ctx)
            if la_ == 1:
                self.state = 3525
                localctx.error1 = self.multiUnitsInterval()

            elif la_ == 2:
                self.state = 3526
                localctx.error2 = self.unitToUnitInterval()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnitToUnitIntervalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.value = None # IntervalValueContext
            self.ifrom = None # IntervalUnitContext
            self.to = None # IntervalUnitContext

        def TO(self):
            return self.getToken(fugue_sqlParser.TO, 0)

        def intervalValue(self):
            return self.getTypedRuleContext(fugue_sqlParser.IntervalValueContext,0)


        def intervalUnit(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.IntervalUnitContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.IntervalUnitContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_unitToUnitInterval

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnitToUnitInterval" ):
                return visitor.visitUnitToUnitInterval(self)
            else:
                return visitor.visitChildren(self)




    def unitToUnitInterval(self):

        localctx = fugue_sqlParser.UnitToUnitIntervalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 368, self.RULE_unitToUnitInterval)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3529
            localctx.value = self.intervalValue()
            self.state = 3530
            localctx.ifrom = self.intervalUnit()
            self.state = 3531
            self.match(fugue_sqlParser.TO)
            self.state = 3532
            localctx.to = self.intervalUnit()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGER_VALUE(self):
            return self.getToken(fugue_sqlParser.INTEGER_VALUE, 0)

        def DECIMAL_VALUE(self):
            return self.getToken(fugue_sqlParser.DECIMAL_VALUE, 0)

        def PLUS(self):
            return self.getToken(fugue_sqlParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(fugue_sqlParser.MINUS, 0)

        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_intervalValue

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntervalValue" ):
                return visitor.visitIntervalValue(self)
            else:
                return visitor.visitChildren(self)




    def intervalValue(self):

        localctx = fugue_sqlParser.IntervalValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 370, self.RULE_intervalValue)
        self._la = 0 # Token type
        try:
            self.state = 3539
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [fugue_sqlParser.PLUS, fugue_sqlParser.MINUS, fugue_sqlParser.INTEGER_VALUE, fugue_sqlParser.DECIMAL_VALUE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3535
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.PLUS or _la==fugue_sqlParser.MINUS:
                    self.state = 3534
                    _la = self._input.LA(1)
                    if not(_la==fugue_sqlParser.PLUS or _la==fugue_sqlParser.MINUS):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 3537
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.INTEGER_VALUE or _la==fugue_sqlParser.DECIMAL_VALUE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [fugue_sqlParser.STRING]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3538
                self.match(fugue_sqlParser.STRING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalUnitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DAY(self):
            return self.getToken(fugue_sqlParser.DAY, 0)

        def HOUR(self):
            return self.getToken(fugue_sqlParser.HOUR, 0)

        def MINUTE(self):
            return self.getToken(fugue_sqlParser.MINUTE, 0)

        def MONTH(self):
            return self.getToken(fugue_sqlParser.MONTH, 0)

        def SECOND(self):
            return self.getToken(fugue_sqlParser.SECOND, 0)

        def YEAR(self):
            return self.getToken(fugue_sqlParser.YEAR, 0)

        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_intervalUnit

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntervalUnit" ):
                return visitor.visitIntervalUnit(self)
            else:
                return visitor.visitChildren(self)




    def intervalUnit(self):

        localctx = fugue_sqlParser.IntervalUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 372, self.RULE_intervalUnit)
        try:
            self.state = 3548
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,473,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3541
                self.match(fugue_sqlParser.DAY)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3542
                self.match(fugue_sqlParser.HOUR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3543
                self.match(fugue_sqlParser.MINUTE)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3544
                self.match(fugue_sqlParser.MONTH)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3545
                self.match(fugue_sqlParser.SECOND)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3546
                self.match(fugue_sqlParser.YEAR)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 3547
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColPositionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.position = None # Token
            self.afterCol = None # ErrorCapturingIdentifierContext

        def FIRST(self):
            return self.getToken(fugue_sqlParser.FIRST, 0)

        def AFTER(self):
            return self.getToken(fugue_sqlParser.AFTER, 0)

        def errorCapturingIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.ErrorCapturingIdentifierContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_colPosition

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColPosition" ):
                return visitor.visitColPosition(self)
            else:
                return visitor.visitChildren(self)




    def colPosition(self):

        localctx = fugue_sqlParser.ColPositionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 374, self.RULE_colPosition)
        try:
            self.state = 3553
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [fugue_sqlParser.FIRST]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3550
                localctx.position = self.match(fugue_sqlParser.FIRST)
                pass
            elif token in [fugue_sqlParser.AFTER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3551
                localctx.position = self.match(fugue_sqlParser.AFTER)
                self.state = 3552
                localctx.afterCol = self.errorCapturingIdentifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_dataType

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ComplexDataTypeContext(DataTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.DataTypeContext
            super().__init__(parser)
            self.icomplex = None # Token
            self.copyFrom(ctx)

        def LT(self):
            return self.getToken(fugue_sqlParser.LT, 0)
        def dataType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.DataTypeContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.DataTypeContext,i)

        def GT(self):
            return self.getToken(fugue_sqlParser.GT, 0)
        def ARRAY(self):
            return self.getToken(fugue_sqlParser.ARRAY, 0)
        def MAP(self):
            return self.getToken(fugue_sqlParser.MAP, 0)
        def STRUCT(self):
            return self.getToken(fugue_sqlParser.STRUCT, 0)
        def NEQ(self):
            return self.getToken(fugue_sqlParser.NEQ, 0)
        def complexColTypeList(self):
            return self.getTypedRuleContext(fugue_sqlParser.ComplexColTypeListContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComplexDataType" ):
                return visitor.visitComplexDataType(self)
            else:
                return visitor.visitChildren(self)


    class PrimitiveDataTypeContext(DataTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.DataTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)

        def INTEGER_VALUE(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.INTEGER_VALUE)
            else:
                return self.getToken(fugue_sqlParser.INTEGER_VALUE, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimitiveDataType" ):
                return visitor.visitPrimitiveDataType(self)
            else:
                return visitor.visitChildren(self)



    def dataType(self):

        localctx = fugue_sqlParser.DataTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 376, self.RULE_dataType)
        self._la = 0 # Token type
        try:
            self.state = 3589
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,479,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.ComplexDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3555
                localctx.icomplex = self.match(fugue_sqlParser.ARRAY)
                self.state = 3556
                self.match(fugue_sqlParser.LT)
                self.state = 3557
                self.dataType()
                self.state = 3558
                self.match(fugue_sqlParser.GT)
                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.ComplexDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3560
                localctx.icomplex = self.match(fugue_sqlParser.MAP)
                self.state = 3561
                self.match(fugue_sqlParser.LT)
                self.state = 3562
                self.dataType()
                self.state = 3563
                self.match(fugue_sqlParser.T__0)
                self.state = 3564
                self.dataType()
                self.state = 3565
                self.match(fugue_sqlParser.GT)
                pass

            elif la_ == 3:
                localctx = fugue_sqlParser.ComplexDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3567
                localctx.icomplex = self.match(fugue_sqlParser.STRUCT)
                self.state = 3574
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [fugue_sqlParser.LT]:
                    self.state = 3568
                    self.match(fugue_sqlParser.LT)
                    self.state = 3570
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 53)) & ~0x3f) == 0 and ((1 << (_la - 53)) & ((1 << (fugue_sqlParser.ADD - 53)) | (1 << (fugue_sqlParser.AFTER - 53)) | (1 << (fugue_sqlParser.ALL - 53)) | (1 << (fugue_sqlParser.ALTER - 53)) | (1 << (fugue_sqlParser.ANALYZE - 53)) | (1 << (fugue_sqlParser.AND - 53)) | (1 << (fugue_sqlParser.ANTI - 53)) | (1 << (fugue_sqlParser.ANY - 53)) | (1 << (fugue_sqlParser.ARCHIVE - 53)) | (1 << (fugue_sqlParser.ARRAY - 53)) | (1 << (fugue_sqlParser.AS - 53)) | (1 << (fugue_sqlParser.ASC - 53)) | (1 << (fugue_sqlParser.AT - 53)) | (1 << (fugue_sqlParser.AUTHORIZATION - 53)) | (1 << (fugue_sqlParser.BETWEEN - 53)) | (1 << (fugue_sqlParser.BOTH - 53)) | (1 << (fugue_sqlParser.BUCKET - 53)) | (1 << (fugue_sqlParser.BUCKETS - 53)) | (1 << (fugue_sqlParser.BY - 53)) | (1 << (fugue_sqlParser.CACHE - 53)) | (1 << (fugue_sqlParser.CASCADE - 53)) | (1 << (fugue_sqlParser.CASE - 53)) | (1 << (fugue_sqlParser.CAST - 53)) | (1 << (fugue_sqlParser.CHANGE - 53)) | (1 << (fugue_sqlParser.CHECK - 53)) | (1 << (fugue_sqlParser.CLEAR - 53)) | (1 << (fugue_sqlParser.CLUSTER - 53)) | (1 << (fugue_sqlParser.CLUSTERED - 53)) | (1 << (fugue_sqlParser.CODEGEN - 53)) | (1 << (fugue_sqlParser.COLLATE - 53)) | (1 << (fugue_sqlParser.COLLECTION - 53)) | (1 << (fugue_sqlParser.COLUMN - 53)) | (1 << (fugue_sqlParser.COLUMNS - 53)) | (1 << (fugue_sqlParser.COMMENT - 53)) | (1 << (fugue_sqlParser.COMMIT - 53)) | (1 << (fugue_sqlParser.COMPACT - 53)) | (1 << (fugue_sqlParser.COMPACTIONS - 53)) | (1 << (fugue_sqlParser.COMPUTE - 53)) | (1 << (fugue_sqlParser.CONCATENATE - 53)) | (1 << (fugue_sqlParser.CONSTRAINT - 53)) | (1 << (fugue_sqlParser.COST - 53)) | (1 << (fugue_sqlParser.CREATE - 53)) | (1 << (fugue_sqlParser.CROSS - 53)) | (1 << (fugue_sqlParser.CUBE - 53)) | (1 << (fugue_sqlParser.CURRENT - 53)) | (1 << (fugue_sqlParser.CURRENT_DATE - 53)) | (1 << (fugue_sqlParser.CURRENT_TIME - 53)) | (1 << (fugue_sqlParser.CURRENT_TIMESTAMP - 53)) | (1 << (fugue_sqlParser.CURRENT_USER - 53)) | (1 << (fugue_sqlParser.DATA - 53)) | (1 << (fugue_sqlParser.DATABASE - 53)) | (1 << (fugue_sqlParser.DATABASES - 53)) | (1 << (fugue_sqlParser.DAY - 53)) | (1 << (fugue_sqlParser.DBPROPERTIES - 53)) | (1 << (fugue_sqlParser.DEFINED - 53)) | (1 << (fugue_sqlParser.DELETE - 53)) | (1 << (fugue_sqlParser.DELIMITED - 53)) | (1 << (fugue_sqlParser.DESC - 53)) | (1 << (fugue_sqlParser.DESCRIBE - 53)) | (1 << (fugue_sqlParser.DFS - 53)) | (1 << (fugue_sqlParser.DIRECTORIES - 53)) | (1 << (fugue_sqlParser.DIRECTORY - 53)) | (1 << (fugue_sqlParser.DISTINCT - 53)) | (1 << (fugue_sqlParser.DISTRIBUTE - 53)))) != 0) or ((((_la - 117)) & ~0x3f) == 0 and ((1 << (_la - 117)) & ((1 << (fugue_sqlParser.DROP - 117)) | (1 << (fugue_sqlParser.ELSE - 117)) | (1 << (fugue_sqlParser.END - 117)) | (1 << (fugue_sqlParser.ESCAPE - 117)) | (1 << (fugue_sqlParser.ESCAPED - 117)) | (1 << (fugue_sqlParser.EXCEPT - 117)) | (1 << (fugue_sqlParser.EXCHANGE - 117)) | (1 << (fugue_sqlParser.EXISTS - 117)) | (1 << (fugue_sqlParser.EXPLAIN - 117)) | (1 << (fugue_sqlParser.EXPORT - 117)) | (1 << (fugue_sqlParser.EXTENDED - 117)) | (1 << (fugue_sqlParser.EXTERNAL - 117)) | (1 << (fugue_sqlParser.EXTRACT - 117)) | (1 << (fugue_sqlParser.FALSE - 117)) | (1 << (fugue_sqlParser.FETCH - 117)) | (1 << (fugue_sqlParser.FIELDS - 117)) | (1 << (fugue_sqlParser.FILTER - 117)) | (1 << (fugue_sqlParser.FILEFORMAT - 117)) | (1 << (fugue_sqlParser.FIRST - 117)) | (1 << (fugue_sqlParser.FOLLOWING - 117)) | (1 << (fugue_sqlParser.FOR - 117)) | (1 << (fugue_sqlParser.FOREIGN - 117)) | (1 << (fugue_sqlParser.FORMAT - 117)) | (1 << (fugue_sqlParser.FORMATTED - 117)) | (1 << (fugue_sqlParser.FROM - 117)) | (1 << (fugue_sqlParser.FULL - 117)) | (1 << (fugue_sqlParser.FUNCTION - 117)) | (1 << (fugue_sqlParser.FUNCTIONS - 117)) | (1 << (fugue_sqlParser.GLOBAL - 117)) | (1 << (fugue_sqlParser.GRANT - 117)) | (1 << (fugue_sqlParser.GROUP - 117)) | (1 << (fugue_sqlParser.GROUPING - 117)) | (1 << (fugue_sqlParser.HAVING - 117)) | (1 << (fugue_sqlParser.HOUR - 117)) | (1 << (fugue_sqlParser.IF - 117)) | (1 << (fugue_sqlParser.IGNORE - 117)) | (1 << (fugue_sqlParser.IMPORT - 117)) | (1 << (fugue_sqlParser.IN - 117)) | (1 << (fugue_sqlParser.INDEX - 117)) | (1 << (fugue_sqlParser.INDEXES - 117)) | (1 << (fugue_sqlParser.INNER - 117)) | (1 << (fugue_sqlParser.INPATH - 117)) | (1 << (fugue_sqlParser.INPUTFORMAT - 117)) | (1 << (fugue_sqlParser.INSERT - 117)) | (1 << (fugue_sqlParser.INTERSECT - 117)) | (1 << (fugue_sqlParser.INTERVAL - 117)) | (1 << (fugue_sqlParser.INTO - 117)) | (1 << (fugue_sqlParser.IS - 117)) | (1 << (fugue_sqlParser.ITEMS - 117)) | (1 << (fugue_sqlParser.JOIN - 117)) | (1 << (fugue_sqlParser.KEYS - 117)) | (1 << (fugue_sqlParser.LAST - 117)) | (1 << (fugue_sqlParser.LATERAL - 117)) | (1 << (fugue_sqlParser.LAZY - 117)) | (1 << (fugue_sqlParser.LEADING - 117)) | (1 << (fugue_sqlParser.LEFT - 117)) | (1 << (fugue_sqlParser.LIKE - 117)) | (1 << (fugue_sqlParser.LIMIT - 117)) | (1 << (fugue_sqlParser.LINES - 117)) | (1 << (fugue_sqlParser.LIST - 117)) | (1 << (fugue_sqlParser.LOAD - 117)) | (1 << (fugue_sqlParser.LOCAL - 117)) | (1 << (fugue_sqlParser.LOCATION - 117)) | (1 << (fugue_sqlParser.LOCK - 117)))) != 0) or ((((_la - 181)) & ~0x3f) == 0 and ((1 << (_la - 181)) & ((1 << (fugue_sqlParser.LOCKS - 181)) | (1 << (fugue_sqlParser.LOGICAL - 181)) | (1 << (fugue_sqlParser.MACRO - 181)) | (1 << (fugue_sqlParser.MAP - 181)) | (1 << (fugue_sqlParser.MATCHED - 181)) | (1 << (fugue_sqlParser.MERGE - 181)) | (1 << (fugue_sqlParser.MINUTE - 181)) | (1 << (fugue_sqlParser.MONTH - 181)) | (1 << (fugue_sqlParser.MSCK - 181)) | (1 << (fugue_sqlParser.NAMESPACE - 181)) | (1 << (fugue_sqlParser.NAMESPACES - 181)) | (1 << (fugue_sqlParser.NATURAL - 181)) | (1 << (fugue_sqlParser.NO - 181)) | (1 << (fugue_sqlParser.NOT - 181)) | (1 << (fugue_sqlParser.THENULL - 181)) | (1 << (fugue_sqlParser.THENULLS - 181)) | (1 << (fugue_sqlParser.OF - 181)) | (1 << (fugue_sqlParser.ON - 181)) | (1 << (fugue_sqlParser.ONLY - 181)) | (1 << (fugue_sqlParser.OPTION - 181)) | (1 << (fugue_sqlParser.OPTIONS - 181)) | (1 << (fugue_sqlParser.OR - 181)) | (1 << (fugue_sqlParser.ORDER - 181)) | (1 << (fugue_sqlParser.OUT - 181)) | (1 << (fugue_sqlParser.OUTER - 181)) | (1 << (fugue_sqlParser.OUTPUTFORMAT - 181)) | (1 << (fugue_sqlParser.OVER - 181)) | (1 << (fugue_sqlParser.OVERLAPS - 181)) | (1 << (fugue_sqlParser.OVERLAY - 181)) | (1 << (fugue_sqlParser.OVERWRITE - 181)) | (1 << (fugue_sqlParser.PARTITION - 181)) | (1 << (fugue_sqlParser.PARTITIONED - 181)) | (1 << (fugue_sqlParser.PARTITIONS - 181)) | (1 << (fugue_sqlParser.PERCENTLIT - 181)) | (1 << (fugue_sqlParser.PIVOT - 181)) | (1 << (fugue_sqlParser.PLACING - 181)) | (1 << (fugue_sqlParser.POSITION - 181)) | (1 << (fugue_sqlParser.PRECEDING - 181)) | (1 << (fugue_sqlParser.PRIMARY - 181)) | (1 << (fugue_sqlParser.PRINCIPALS - 181)) | (1 << (fugue_sqlParser.PROPERTIES - 181)) | (1 << (fugue_sqlParser.PURGE - 181)) | (1 << (fugue_sqlParser.QUERY - 181)) | (1 << (fugue_sqlParser.RANGE - 181)) | (1 << (fugue_sqlParser.RECORDREADER - 181)) | (1 << (fugue_sqlParser.RECORDWRITER - 181)) | (1 << (fugue_sqlParser.RECOVER - 181)) | (1 << (fugue_sqlParser.REDUCE - 181)) | (1 << (fugue_sqlParser.REFERENCES - 181)) | (1 << (fugue_sqlParser.REFRESH - 181)) | (1 << (fugue_sqlParser.RENAME - 181)) | (1 << (fugue_sqlParser.REPAIR - 181)) | (1 << (fugue_sqlParser.REPLACE - 181)) | (1 << (fugue_sqlParser.RESET - 181)) | (1 << (fugue_sqlParser.RESTRICT - 181)) | (1 << (fugue_sqlParser.REVOKE - 181)) | (1 << (fugue_sqlParser.RIGHT - 181)) | (1 << (fugue_sqlParser.RLIKE - 181)) | (1 << (fugue_sqlParser.ROLE - 181)) | (1 << (fugue_sqlParser.ROLES - 181)) | (1 << (fugue_sqlParser.ROLLBACK - 181)) | (1 << (fugue_sqlParser.ROLLUP - 181)) | (1 << (fugue_sqlParser.ROW - 181)) | (1 << (fugue_sqlParser.ROWS - 181)))) != 0) or ((((_la - 245)) & ~0x3f) == 0 and ((1 << (_la - 245)) & ((1 << (fugue_sqlParser.SCHEMA - 245)) | (1 << (fugue_sqlParser.SECOND - 245)) | (1 << (fugue_sqlParser.SELECT - 245)) | (1 << (fugue_sqlParser.SEMI - 245)) | (1 << (fugue_sqlParser.SEPARATED - 245)) | (1 << (fugue_sqlParser.SERDE - 245)) | (1 << (fugue_sqlParser.SERDEPROPERTIES - 245)) | (1 << (fugue_sqlParser.SESSION_USER - 245)) | (1 << (fugue_sqlParser.SET - 245)) | (1 << (fugue_sqlParser.SETMINUS - 245)) | (1 << (fugue_sqlParser.SETS - 245)) | (1 << (fugue_sqlParser.SHOW - 245)) | (1 << (fugue_sqlParser.SKEWED - 245)) | (1 << (fugue_sqlParser.SOME - 245)) | (1 << (fugue_sqlParser.SORT - 245)) | (1 << (fugue_sqlParser.SORTED - 245)) | (1 << (fugue_sqlParser.START - 245)) | (1 << (fugue_sqlParser.STATISTICS - 245)) | (1 << (fugue_sqlParser.STORED - 245)) | (1 << (fugue_sqlParser.STRATIFY - 245)) | (1 << (fugue_sqlParser.STRUCT - 245)) | (1 << (fugue_sqlParser.SUBSTR - 245)) | (1 << (fugue_sqlParser.SUBSTRING - 245)) | (1 << (fugue_sqlParser.TABLE - 245)) | (1 << (fugue_sqlParser.TABLES - 245)) | (1 << (fugue_sqlParser.TABLESAMPLE - 245)) | (1 << (fugue_sqlParser.TBLPROPERTIES - 245)) | (1 << (fugue_sqlParser.TEMPORARY - 245)) | (1 << (fugue_sqlParser.TERMINATED - 245)) | (1 << (fugue_sqlParser.THEN - 245)) | (1 << (fugue_sqlParser.TO - 245)) | (1 << (fugue_sqlParser.TOUCH - 245)) | (1 << (fugue_sqlParser.TRAILING - 245)) | (1 << (fugue_sqlParser.TRANSACTION - 245)) | (1 << (fugue_sqlParser.TRANSACTIONS - 245)) | (1 << (fugue_sqlParser.TRANSFORM - 245)) | (1 << (fugue_sqlParser.TRIM - 245)) | (1 << (fugue_sqlParser.TRUE - 245)) | (1 << (fugue_sqlParser.TRUNCATE - 245)) | (1 << (fugue_sqlParser.TYPE - 245)) | (1 << (fugue_sqlParser.UNARCHIVE - 245)) | (1 << (fugue_sqlParser.UNBOUNDED - 245)) | (1 << (fugue_sqlParser.UNCACHE - 245)) | (1 << (fugue_sqlParser.UNION - 245)) | (1 << (fugue_sqlParser.UNIQUE - 245)) | (1 << (fugue_sqlParser.UNKNOWN - 245)) | (1 << (fugue_sqlParser.UNLOCK - 245)) | (1 << (fugue_sqlParser.UNSET - 245)) | (1 << (fugue_sqlParser.UPDATE - 245)) | (1 << (fugue_sqlParser.USE - 245)) | (1 << (fugue_sqlParser.USER - 245)) | (1 << (fugue_sqlParser.USING - 245)) | (1 << (fugue_sqlParser.VALUES - 245)) | (1 << (fugue_sqlParser.VIEW - 245)) | (1 << (fugue_sqlParser.VIEWS - 245)) | (1 << (fugue_sqlParser.WHEN - 245)) | (1 << (fugue_sqlParser.WHERE - 245)) | (1 << (fugue_sqlParser.WINDOW - 245)) | (1 << (fugue_sqlParser.WITH - 245)) | (1 << (fugue_sqlParser.YEAR - 245)))) != 0) or ((((_la - 319)) & ~0x3f) == 0 and ((1 << (_la - 319)) & ((1 << (fugue_sqlParser.DIV - 319)) | (1 << (fugue_sqlParser.IDENTIFIER - 319)) | (1 << (fugue_sqlParser.BACKQUOTED_IDENTIFIER - 319)))) != 0):
                        self.state = 3569
                        self.complexColTypeList()


                    self.state = 3572
                    self.match(fugue_sqlParser.GT)
                    pass
                elif token in [fugue_sqlParser.NEQ]:
                    self.state = 3573
                    self.match(fugue_sqlParser.NEQ)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 4:
                localctx = fugue_sqlParser.PrimitiveDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 3576
                self.identifier()
                self.state = 3587
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,478,self._ctx)
                if la_ == 1:
                    self.state = 3577
                    self.match(fugue_sqlParser.T__2)
                    self.state = 3578
                    self.match(fugue_sqlParser.INTEGER_VALUE)
                    self.state = 3583
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==fugue_sqlParser.T__0:
                        self.state = 3579
                        self.match(fugue_sqlParser.T__0)
                        self.state = 3580
                        self.match(fugue_sqlParser.INTEGER_VALUE)
                        self.state = 3585
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 3586
                    self.match(fugue_sqlParser.T__3)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedColTypeWithPositionListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedColTypeWithPosition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.QualifiedColTypeWithPositionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.QualifiedColTypeWithPositionContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_qualifiedColTypeWithPositionList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualifiedColTypeWithPositionList" ):
                return visitor.visitQualifiedColTypeWithPositionList(self)
            else:
                return visitor.visitChildren(self)




    def qualifiedColTypeWithPositionList(self):

        localctx = fugue_sqlParser.QualifiedColTypeWithPositionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 378, self.RULE_qualifiedColTypeWithPositionList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3591
            self.qualifiedColTypeWithPosition()
            self.state = 3596
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==fugue_sqlParser.T__0:
                self.state = 3592
                self.match(fugue_sqlParser.T__0)
                self.state = 3593
                self.qualifiedColTypeWithPosition()
                self.state = 3598
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedColTypeWithPositionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # MultipartIdentifierContext

        def dataType(self):
            return self.getTypedRuleContext(fugue_sqlParser.DataTypeContext,0)


        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)


        def NOT(self):
            return self.getToken(fugue_sqlParser.NOT, 0)

        def THENULL(self):
            return self.getToken(fugue_sqlParser.THENULL, 0)

        def commentSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.CommentSpecContext,0)


        def colPosition(self):
            return self.getTypedRuleContext(fugue_sqlParser.ColPositionContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_qualifiedColTypeWithPosition

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualifiedColTypeWithPosition" ):
                return visitor.visitQualifiedColTypeWithPosition(self)
            else:
                return visitor.visitChildren(self)




    def qualifiedColTypeWithPosition(self):

        localctx = fugue_sqlParser.QualifiedColTypeWithPositionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 380, self.RULE_qualifiedColTypeWithPosition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3599
            localctx.name = self.multipartIdentifier()
            self.state = 3600
            self.dataType()
            self.state = 3603
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==fugue_sqlParser.NOT:
                self.state = 3601
                self.match(fugue_sqlParser.NOT)
                self.state = 3602
                self.match(fugue_sqlParser.THENULL)


            self.state = 3606
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==fugue_sqlParser.COMMENT:
                self.state = 3605
                self.commentSpec()


            self.state = 3609
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==fugue_sqlParser.AFTER or _la==fugue_sqlParser.FIRST:
                self.state = 3608
                self.colPosition()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColTypeListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ColTypeContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ColTypeContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_colTypeList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColTypeList" ):
                return visitor.visitColTypeList(self)
            else:
                return visitor.visitChildren(self)




    def colTypeList(self):

        localctx = fugue_sqlParser.ColTypeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 382, self.RULE_colTypeList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3611
            self.colType()
            self.state = 3616
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,484,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3612
                    self.match(fugue_sqlParser.T__0)
                    self.state = 3613
                    self.colType() 
                self.state = 3618
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,484,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.colName = None # ErrorCapturingIdentifierContext

        def dataType(self):
            return self.getTypedRuleContext(fugue_sqlParser.DataTypeContext,0)


        def errorCapturingIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.ErrorCapturingIdentifierContext,0)


        def NOT(self):
            return self.getToken(fugue_sqlParser.NOT, 0)

        def THENULL(self):
            return self.getToken(fugue_sqlParser.THENULL, 0)

        def commentSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.CommentSpecContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_colType

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColType" ):
                return visitor.visitColType(self)
            else:
                return visitor.visitChildren(self)




    def colType(self):

        localctx = fugue_sqlParser.ColTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 384, self.RULE_colType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3619
            localctx.colName = self.errorCapturingIdentifier()
            self.state = 3620
            self.dataType()
            self.state = 3623
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,485,self._ctx)
            if la_ == 1:
                self.state = 3621
                self.match(fugue_sqlParser.NOT)
                self.state = 3622
                self.match(fugue_sqlParser.THENULL)


            self.state = 3626
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,486,self._ctx)
            if la_ == 1:
                self.state = 3625
                self.commentSpec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComplexColTypeListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def complexColType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ComplexColTypeContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ComplexColTypeContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_complexColTypeList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComplexColTypeList" ):
                return visitor.visitComplexColTypeList(self)
            else:
                return visitor.visitChildren(self)




    def complexColTypeList(self):

        localctx = fugue_sqlParser.ComplexColTypeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 386, self.RULE_complexColTypeList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3628
            self.complexColType()
            self.state = 3633
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==fugue_sqlParser.T__0:
                self.state = 3629
                self.match(fugue_sqlParser.T__0)
                self.state = 3630
                self.complexColType()
                self.state = 3635
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComplexColTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)


        def dataType(self):
            return self.getTypedRuleContext(fugue_sqlParser.DataTypeContext,0)


        def NOT(self):
            return self.getToken(fugue_sqlParser.NOT, 0)

        def THENULL(self):
            return self.getToken(fugue_sqlParser.THENULL, 0)

        def commentSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.CommentSpecContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_complexColType

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComplexColType" ):
                return visitor.visitComplexColType(self)
            else:
                return visitor.visitChildren(self)




    def complexColType(self):

        localctx = fugue_sqlParser.ComplexColTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 388, self.RULE_complexColType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3636
            self.identifier()
            self.state = 3637
            self.match(fugue_sqlParser.T__1)
            self.state = 3638
            self.dataType()
            self.state = 3641
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==fugue_sqlParser.NOT:
                self.state = 3639
                self.match(fugue_sqlParser.NOT)
                self.state = 3640
                self.match(fugue_sqlParser.THENULL)


            self.state = 3644
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==fugue_sqlParser.COMMENT:
                self.state = 3643
                self.commentSpec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhenClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.condition = None # ExpressionContext
            self.result = None # ExpressionContext

        def WHEN(self):
            return self.getToken(fugue_sqlParser.WHEN, 0)

        def THEN(self):
            return self.getToken(fugue_sqlParser.THEN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_whenClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhenClause" ):
                return visitor.visitWhenClause(self)
            else:
                return visitor.visitChildren(self)




    def whenClause(self):

        localctx = fugue_sqlParser.WhenClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 390, self.RULE_whenClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3646
            self.match(fugue_sqlParser.WHEN)
            self.state = 3647
            localctx.condition = self.expression()
            self.state = 3648
            self.match(fugue_sqlParser.THEN)
            self.state = 3649
            localctx.result = self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WINDOW(self):
            return self.getToken(fugue_sqlParser.WINDOW, 0)

        def namedWindow(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.NamedWindowContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.NamedWindowContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_windowClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindowClause" ):
                return visitor.visitWindowClause(self)
            else:
                return visitor.visitChildren(self)




    def windowClause(self):

        localctx = fugue_sqlParser.WindowClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 392, self.RULE_windowClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3651
            self.match(fugue_sqlParser.WINDOW)
            self.state = 3652
            self.namedWindow()
            self.state = 3657
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,490,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3653
                    self.match(fugue_sqlParser.T__0)
                    self.state = 3654
                    self.namedWindow() 
                self.state = 3659
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,490,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedWindowContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # ErrorCapturingIdentifierContext

        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)

        def windowSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.WindowSpecContext,0)


        def errorCapturingIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.ErrorCapturingIdentifierContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_namedWindow

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamedWindow" ):
                return visitor.visitNamedWindow(self)
            else:
                return visitor.visitChildren(self)




    def namedWindow(self):

        localctx = fugue_sqlParser.NamedWindowContext(self, self._ctx, self.state)
        self.enterRule(localctx, 394, self.RULE_namedWindow)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3660
            localctx.name = self.errorCapturingIdentifier()
            self.state = 3661
            self.match(fugue_sqlParser.AS)
            self.state = 3662
            self.windowSpec()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_windowSpec

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class WindowRefContext(WindowSpecContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.WindowSpecContext
            super().__init__(parser)
            self.name = None # ErrorCapturingIdentifierContext
            self.copyFrom(ctx)

        def errorCapturingIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.ErrorCapturingIdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindowRef" ):
                return visitor.visitWindowRef(self)
            else:
                return visitor.visitChildren(self)


    class WindowDefContext(WindowSpecContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.WindowSpecContext
            super().__init__(parser)
            self._expression = None # ExpressionContext
            self.partition = list() # of ExpressionContexts
            self.copyFrom(ctx)

        def CLUSTER(self):
            return self.getToken(fugue_sqlParser.CLUSTER, 0)
        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.BY)
            else:
                return self.getToken(fugue_sqlParser.BY, i)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,i)

        def windowFrame(self):
            return self.getTypedRuleContext(fugue_sqlParser.WindowFrameContext,0)

        def sortItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.SortItemContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.SortItemContext,i)

        def PARTITION(self):
            return self.getToken(fugue_sqlParser.PARTITION, 0)
        def DISTRIBUTE(self):
            return self.getToken(fugue_sqlParser.DISTRIBUTE, 0)
        def ORDER(self):
            return self.getToken(fugue_sqlParser.ORDER, 0)
        def SORT(self):
            return self.getToken(fugue_sqlParser.SORT, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindowDef" ):
                return visitor.visitWindowDef(self)
            else:
                return visitor.visitChildren(self)



    def windowSpec(self):

        localctx = fugue_sqlParser.WindowSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 396, self.RULE_windowSpec)
        self._la = 0 # Token type
        try:
            self.state = 3710
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,498,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.WindowRefContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3664
                localctx.name = self.errorCapturingIdentifier()
                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.WindowRefContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3665
                self.match(fugue_sqlParser.T__2)
                self.state = 3666
                localctx.name = self.errorCapturingIdentifier()
                self.state = 3667
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 3:
                localctx = fugue_sqlParser.WindowDefContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3669
                self.match(fugue_sqlParser.T__2)
                self.state = 3704
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [fugue_sqlParser.CLUSTER]:
                    self.state = 3670
                    self.match(fugue_sqlParser.CLUSTER)
                    self.state = 3671
                    self.match(fugue_sqlParser.BY)
                    self.state = 3672
                    localctx._expression = self.expression()
                    localctx.partition.append(localctx._expression)
                    self.state = 3677
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==fugue_sqlParser.T__0:
                        self.state = 3673
                        self.match(fugue_sqlParser.T__0)
                        self.state = 3674
                        localctx._expression = self.expression()
                        localctx.partition.append(localctx._expression)
                        self.state = 3679
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [fugue_sqlParser.T__3, fugue_sqlParser.DISTRIBUTE, fugue_sqlParser.ORDER, fugue_sqlParser.PARTITION, fugue_sqlParser.RANGE, fugue_sqlParser.ROWS, fugue_sqlParser.SORT]:
                    self.state = 3690
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==fugue_sqlParser.DISTRIBUTE or _la==fugue_sqlParser.PARTITION:
                        self.state = 3680
                        _la = self._input.LA(1)
                        if not(_la==fugue_sqlParser.DISTRIBUTE or _la==fugue_sqlParser.PARTITION):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 3681
                        self.match(fugue_sqlParser.BY)
                        self.state = 3682
                        localctx._expression = self.expression()
                        localctx.partition.append(localctx._expression)
                        self.state = 3687
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==fugue_sqlParser.T__0:
                            self.state = 3683
                            self.match(fugue_sqlParser.T__0)
                            self.state = 3684
                            localctx._expression = self.expression()
                            localctx.partition.append(localctx._expression)
                            self.state = 3689
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)



                    self.state = 3702
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==fugue_sqlParser.ORDER or _la==fugue_sqlParser.SORT:
                        self.state = 3692
                        _la = self._input.LA(1)
                        if not(_la==fugue_sqlParser.ORDER or _la==fugue_sqlParser.SORT):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 3693
                        self.match(fugue_sqlParser.BY)
                        self.state = 3694
                        self.sortItem()
                        self.state = 3699
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==fugue_sqlParser.T__0:
                            self.state = 3695
                            self.match(fugue_sqlParser.T__0)
                            self.state = 3696
                            self.sortItem()
                            self.state = 3701
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)



                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 3707
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.RANGE or _la==fugue_sqlParser.ROWS:
                    self.state = 3706
                    self.windowFrame()


                self.state = 3709
                self.match(fugue_sqlParser.T__3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowFrameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.frameType = None # Token
            self.start = None # FrameBoundContext
            self.end = None # FrameBoundContext

        def RANGE(self):
            return self.getToken(fugue_sqlParser.RANGE, 0)

        def frameBound(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.FrameBoundContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.FrameBoundContext,i)


        def ROWS(self):
            return self.getToken(fugue_sqlParser.ROWS, 0)

        def BETWEEN(self):
            return self.getToken(fugue_sqlParser.BETWEEN, 0)

        def AND(self):
            return self.getToken(fugue_sqlParser.AND, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_windowFrame

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindowFrame" ):
                return visitor.visitWindowFrame(self)
            else:
                return visitor.visitChildren(self)




    def windowFrame(self):

        localctx = fugue_sqlParser.WindowFrameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 398, self.RULE_windowFrame)
        try:
            self.state = 3728
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,499,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3712
                localctx.frameType = self.match(fugue_sqlParser.RANGE)
                self.state = 3713
                localctx.start = self.frameBound()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3714
                localctx.frameType = self.match(fugue_sqlParser.ROWS)
                self.state = 3715
                localctx.start = self.frameBound()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3716
                localctx.frameType = self.match(fugue_sqlParser.RANGE)
                self.state = 3717
                self.match(fugue_sqlParser.BETWEEN)
                self.state = 3718
                localctx.start = self.frameBound()
                self.state = 3719
                self.match(fugue_sqlParser.AND)
                self.state = 3720
                localctx.end = self.frameBound()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3722
                localctx.frameType = self.match(fugue_sqlParser.ROWS)
                self.state = 3723
                self.match(fugue_sqlParser.BETWEEN)
                self.state = 3724
                localctx.start = self.frameBound()
                self.state = 3725
                self.match(fugue_sqlParser.AND)
                self.state = 3726
                localctx.end = self.frameBound()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FrameBoundContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.boundType = None # Token

        def UNBOUNDED(self):
            return self.getToken(fugue_sqlParser.UNBOUNDED, 0)

        def PRECEDING(self):
            return self.getToken(fugue_sqlParser.PRECEDING, 0)

        def FOLLOWING(self):
            return self.getToken(fugue_sqlParser.FOLLOWING, 0)

        def ROW(self):
            return self.getToken(fugue_sqlParser.ROW, 0)

        def CURRENT(self):
            return self.getToken(fugue_sqlParser.CURRENT, 0)

        def expression(self):
            return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_frameBound

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFrameBound" ):
                return visitor.visitFrameBound(self)
            else:
                return visitor.visitChildren(self)




    def frameBound(self):

        localctx = fugue_sqlParser.FrameBoundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 400, self.RULE_frameBound)
        self._la = 0 # Token type
        try:
            self.state = 3737
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,500,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3730
                self.match(fugue_sqlParser.UNBOUNDED)
                self.state = 3731
                localctx.boundType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.FOLLOWING or _la==fugue_sqlParser.PRECEDING):
                    localctx.boundType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3732
                localctx.boundType = self.match(fugue_sqlParser.CURRENT)
                self.state = 3733
                self.match(fugue_sqlParser.ROW)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3734
                self.expression()
                self.state = 3735
                localctx.boundType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.FOLLOWING or _la==fugue_sqlParser.PRECEDING):
                    localctx.boundType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedNameListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.QualifiedNameContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.QualifiedNameContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_qualifiedNameList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualifiedNameList" ):
                return visitor.visitQualifiedNameList(self)
            else:
                return visitor.visitChildren(self)




    def qualifiedNameList(self):

        localctx = fugue_sqlParser.QualifiedNameListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 402, self.RULE_qualifiedNameList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3739
            self.qualifiedName()
            self.state = 3744
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==fugue_sqlParser.T__0:
                self.state = 3740
                self.match(fugue_sqlParser.T__0)
                self.state = 3741
                self.qualifiedName()
                self.state = 3746
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedName(self):
            return self.getTypedRuleContext(fugue_sqlParser.QualifiedNameContext,0)


        def FILTER(self):
            return self.getToken(fugue_sqlParser.FILTER, 0)

        def LEFT(self):
            return self.getToken(fugue_sqlParser.LEFT, 0)

        def RIGHT(self):
            return self.getToken(fugue_sqlParser.RIGHT, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_functionName

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionName" ):
                return visitor.visitFunctionName(self)
            else:
                return visitor.visitChildren(self)




    def functionName(self):

        localctx = fugue_sqlParser.FunctionNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 404, self.RULE_functionName)
        try:
            self.state = 3751
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,502,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3747
                self.qualifiedName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3748
                self.match(fugue_sqlParser.FILTER)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3749
                self.match(fugue_sqlParser.LEFT)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3750
                self.match(fugue_sqlParser.RIGHT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_qualifiedName

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualifiedName" ):
                return visitor.visitQualifiedName(self)
            else:
                return visitor.visitChildren(self)




    def qualifiedName(self):

        localctx = fugue_sqlParser.QualifiedNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 406, self.RULE_qualifiedName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3753
            self.identifier()
            self.state = 3758
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,503,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3754
                    self.match(fugue_sqlParser.T__6)
                    self.state = 3755
                    self.identifier() 
                self.state = 3760
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,503,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ErrorCapturingIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_errorCapturingIdentifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitErrorCapturingIdentifier" ):
                return visitor.visitErrorCapturingIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def errorCapturingIdentifier(self):

        localctx = fugue_sqlParser.ErrorCapturingIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 408, self.RULE_errorCapturingIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3761
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ErrorCapturingIdentifierExtraContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_errorCapturingIdentifierExtra

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ErrorIdentContext(ErrorCapturingIdentifierExtraContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.ErrorCapturingIdentifierExtraContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MINUS(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.MINUS)
            else:
                return self.getToken(fugue_sqlParser.MINUS, i)
        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,i)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitErrorIdent" ):
                return visitor.visitErrorIdent(self)
            else:
                return visitor.visitChildren(self)



    def errorCapturingIdentifierExtra(self):

        localctx = fugue_sqlParser.ErrorCapturingIdentifierExtraContext(self, self._ctx, self.state)
        self.enterRule(localctx, 410, self.RULE_errorCapturingIdentifierExtra)
        self._la = 0 # Token type
        try:
            localctx = fugue_sqlParser.ErrorIdentContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 3765 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3763
                self.match(fugue_sqlParser.MINUS)
                self.state = 3764
                self.identifier()
                self.state = 3767 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==fugue_sqlParser.MINUS):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def strictIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.StrictIdentifierContext,0)


        def strictNonReserved(self):
            return self.getTypedRuleContext(fugue_sqlParser.StrictNonReservedContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_identifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifier" ):
                return visitor.visitIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def identifier(self):

        localctx = fugue_sqlParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 412, self.RULE_identifier)
        try:
            self.state = 3771
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [fugue_sqlParser.ADD, fugue_sqlParser.AFTER, fugue_sqlParser.ALL, fugue_sqlParser.ALTER, fugue_sqlParser.ANALYZE, fugue_sqlParser.AND, fugue_sqlParser.ANY, fugue_sqlParser.ARCHIVE, fugue_sqlParser.ARRAY, fugue_sqlParser.AS, fugue_sqlParser.ASC, fugue_sqlParser.AT, fugue_sqlParser.AUTHORIZATION, fugue_sqlParser.BETWEEN, fugue_sqlParser.BOTH, fugue_sqlParser.BUCKET, fugue_sqlParser.BUCKETS, fugue_sqlParser.BY, fugue_sqlParser.CACHE, fugue_sqlParser.CASCADE, fugue_sqlParser.CASE, fugue_sqlParser.CAST, fugue_sqlParser.CHANGE, fugue_sqlParser.CHECK, fugue_sqlParser.CLEAR, fugue_sqlParser.CLUSTER, fugue_sqlParser.CLUSTERED, fugue_sqlParser.CODEGEN, fugue_sqlParser.COLLATE, fugue_sqlParser.COLLECTION, fugue_sqlParser.COLUMN, fugue_sqlParser.COLUMNS, fugue_sqlParser.COMMENT, fugue_sqlParser.COMMIT, fugue_sqlParser.COMPACT, fugue_sqlParser.COMPACTIONS, fugue_sqlParser.COMPUTE, fugue_sqlParser.CONCATENATE, fugue_sqlParser.CONSTRAINT, fugue_sqlParser.COST, fugue_sqlParser.CREATE, fugue_sqlParser.CUBE, fugue_sqlParser.CURRENT, fugue_sqlParser.CURRENT_DATE, fugue_sqlParser.CURRENT_TIME, fugue_sqlParser.CURRENT_TIMESTAMP, fugue_sqlParser.CURRENT_USER, fugue_sqlParser.DATA, fugue_sqlParser.DATABASE, fugue_sqlParser.DATABASES, fugue_sqlParser.DAY, fugue_sqlParser.DBPROPERTIES, fugue_sqlParser.DEFINED, fugue_sqlParser.DELETE, fugue_sqlParser.DELIMITED, fugue_sqlParser.DESC, fugue_sqlParser.DESCRIBE, fugue_sqlParser.DFS, fugue_sqlParser.DIRECTORIES, fugue_sqlParser.DIRECTORY, fugue_sqlParser.DISTINCT, fugue_sqlParser.DISTRIBUTE, fugue_sqlParser.DROP, fugue_sqlParser.ELSE, fugue_sqlParser.END, fugue_sqlParser.ESCAPE, fugue_sqlParser.ESCAPED, fugue_sqlParser.EXCHANGE, fugue_sqlParser.EXISTS, fugue_sqlParser.EXPLAIN, fugue_sqlParser.EXPORT, fugue_sqlParser.EXTENDED, fugue_sqlParser.EXTERNAL, fugue_sqlParser.EXTRACT, fugue_sqlParser.FALSE, fugue_sqlParser.FETCH, fugue_sqlParser.FIELDS, fugue_sqlParser.FILTER, fugue_sqlParser.FILEFORMAT, fugue_sqlParser.FIRST, fugue_sqlParser.FOLLOWING, fugue_sqlParser.FOR, fugue_sqlParser.FOREIGN, fugue_sqlParser.FORMAT, fugue_sqlParser.FORMATTED, fugue_sqlParser.FROM, fugue_sqlParser.FUNCTION, fugue_sqlParser.FUNCTIONS, fugue_sqlParser.GLOBAL, fugue_sqlParser.GRANT, fugue_sqlParser.GROUP, fugue_sqlParser.GROUPING, fugue_sqlParser.HAVING, fugue_sqlParser.HOUR, fugue_sqlParser.IF, fugue_sqlParser.IGNORE, fugue_sqlParser.IMPORT, fugue_sqlParser.IN, fugue_sqlParser.INDEX, fugue_sqlParser.INDEXES, fugue_sqlParser.INPATH, fugue_sqlParser.INPUTFORMAT, fugue_sqlParser.INSERT, fugue_sqlParser.INTERVAL, fugue_sqlParser.INTO, fugue_sqlParser.IS, fugue_sqlParser.ITEMS, fugue_sqlParser.KEYS, fugue_sqlParser.LAST, fugue_sqlParser.LATERAL, fugue_sqlParser.LAZY, fugue_sqlParser.LEADING, fugue_sqlParser.LIKE, fugue_sqlParser.LIMIT, fugue_sqlParser.LINES, fugue_sqlParser.LIST, fugue_sqlParser.LOAD, fugue_sqlParser.LOCAL, fugue_sqlParser.LOCATION, fugue_sqlParser.LOCK, fugue_sqlParser.LOCKS, fugue_sqlParser.LOGICAL, fugue_sqlParser.MACRO, fugue_sqlParser.MAP, fugue_sqlParser.MATCHED, fugue_sqlParser.MERGE, fugue_sqlParser.MINUTE, fugue_sqlParser.MONTH, fugue_sqlParser.MSCK, fugue_sqlParser.NAMESPACE, fugue_sqlParser.NAMESPACES, fugue_sqlParser.NO, fugue_sqlParser.NOT, fugue_sqlParser.THENULL, fugue_sqlParser.THENULLS, fugue_sqlParser.OF, fugue_sqlParser.ONLY, fugue_sqlParser.OPTION, fugue_sqlParser.OPTIONS, fugue_sqlParser.OR, fugue_sqlParser.ORDER, fugue_sqlParser.OUT, fugue_sqlParser.OUTER, fugue_sqlParser.OUTPUTFORMAT, fugue_sqlParser.OVER, fugue_sqlParser.OVERLAPS, fugue_sqlParser.OVERLAY, fugue_sqlParser.OVERWRITE, fugue_sqlParser.PARTITION, fugue_sqlParser.PARTITIONED, fugue_sqlParser.PARTITIONS, fugue_sqlParser.PERCENTLIT, fugue_sqlParser.PIVOT, fugue_sqlParser.PLACING, fugue_sqlParser.POSITION, fugue_sqlParser.PRECEDING, fugue_sqlParser.PRIMARY, fugue_sqlParser.PRINCIPALS, fugue_sqlParser.PROPERTIES, fugue_sqlParser.PURGE, fugue_sqlParser.QUERY, fugue_sqlParser.RANGE, fugue_sqlParser.RECORDREADER, fugue_sqlParser.RECORDWRITER, fugue_sqlParser.RECOVER, fugue_sqlParser.REDUCE, fugue_sqlParser.REFERENCES, fugue_sqlParser.REFRESH, fugue_sqlParser.RENAME, fugue_sqlParser.REPAIR, fugue_sqlParser.REPLACE, fugue_sqlParser.RESET, fugue_sqlParser.RESTRICT, fugue_sqlParser.REVOKE, fugue_sqlParser.RLIKE, fugue_sqlParser.ROLE, fugue_sqlParser.ROLES, fugue_sqlParser.ROLLBACK, fugue_sqlParser.ROLLUP, fugue_sqlParser.ROW, fugue_sqlParser.ROWS, fugue_sqlParser.SCHEMA, fugue_sqlParser.SECOND, fugue_sqlParser.SELECT, fugue_sqlParser.SEPARATED, fugue_sqlParser.SERDE, fugue_sqlParser.SERDEPROPERTIES, fugue_sqlParser.SESSION_USER, fugue_sqlParser.SET, fugue_sqlParser.SETS, fugue_sqlParser.SHOW, fugue_sqlParser.SKEWED, fugue_sqlParser.SOME, fugue_sqlParser.SORT, fugue_sqlParser.SORTED, fugue_sqlParser.START, fugue_sqlParser.STATISTICS, fugue_sqlParser.STORED, fugue_sqlParser.STRATIFY, fugue_sqlParser.STRUCT, fugue_sqlParser.SUBSTR, fugue_sqlParser.SUBSTRING, fugue_sqlParser.TABLE, fugue_sqlParser.TABLES, fugue_sqlParser.TABLESAMPLE, fugue_sqlParser.TBLPROPERTIES, fugue_sqlParser.TEMPORARY, fugue_sqlParser.TERMINATED, fugue_sqlParser.THEN, fugue_sqlParser.TO, fugue_sqlParser.TOUCH, fugue_sqlParser.TRAILING, fugue_sqlParser.TRANSACTION, fugue_sqlParser.TRANSACTIONS, fugue_sqlParser.TRANSFORM, fugue_sqlParser.TRIM, fugue_sqlParser.TRUE, fugue_sqlParser.TRUNCATE, fugue_sqlParser.TYPE, fugue_sqlParser.UNARCHIVE, fugue_sqlParser.UNBOUNDED, fugue_sqlParser.UNCACHE, fugue_sqlParser.UNIQUE, fugue_sqlParser.UNKNOWN, fugue_sqlParser.UNLOCK, fugue_sqlParser.UNSET, fugue_sqlParser.UPDATE, fugue_sqlParser.USE, fugue_sqlParser.USER, fugue_sqlParser.VALUES, fugue_sqlParser.VIEW, fugue_sqlParser.VIEWS, fugue_sqlParser.WHEN, fugue_sqlParser.WHERE, fugue_sqlParser.WINDOW, fugue_sqlParser.WITH, fugue_sqlParser.YEAR, fugue_sqlParser.DIV, fugue_sqlParser.IDENTIFIER, fugue_sqlParser.BACKQUOTED_IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3769
                self.strictIdentifier()
                pass
            elif token in [fugue_sqlParser.ANTI, fugue_sqlParser.CROSS, fugue_sqlParser.EXCEPT, fugue_sqlParser.FULL, fugue_sqlParser.INNER, fugue_sqlParser.INTERSECT, fugue_sqlParser.JOIN, fugue_sqlParser.LEFT, fugue_sqlParser.NATURAL, fugue_sqlParser.ON, fugue_sqlParser.RIGHT, fugue_sqlParser.SEMI, fugue_sqlParser.SETMINUS, fugue_sqlParser.UNION, fugue_sqlParser.USING]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3770
                self.strictNonReserved()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StrictIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_strictIdentifier

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class QuotedIdentifierAlternativeContext(StrictIdentifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StrictIdentifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def quotedIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.QuotedIdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuotedIdentifierAlternative" ):
                return visitor.visitQuotedIdentifierAlternative(self)
            else:
                return visitor.visitChildren(self)


    class UnquotedIdentifierContext(StrictIdentifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StrictIdentifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IDENTIFIER(self):
            return self.getToken(fugue_sqlParser.IDENTIFIER, 0)
        def nonReserved(self):
            return self.getTypedRuleContext(fugue_sqlParser.NonReservedContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnquotedIdentifier" ):
                return visitor.visitUnquotedIdentifier(self)
            else:
                return visitor.visitChildren(self)



    def strictIdentifier(self):

        localctx = fugue_sqlParser.StrictIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 414, self.RULE_strictIdentifier)
        try:
            self.state = 3776
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [fugue_sqlParser.IDENTIFIER]:
                localctx = fugue_sqlParser.UnquotedIdentifierContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3773
                self.match(fugue_sqlParser.IDENTIFIER)
                pass
            elif token in [fugue_sqlParser.BACKQUOTED_IDENTIFIER]:
                localctx = fugue_sqlParser.QuotedIdentifierAlternativeContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3774
                self.quotedIdentifier()
                pass
            elif token in [fugue_sqlParser.ADD, fugue_sqlParser.AFTER, fugue_sqlParser.ALL, fugue_sqlParser.ALTER, fugue_sqlParser.ANALYZE, fugue_sqlParser.AND, fugue_sqlParser.ANY, fugue_sqlParser.ARCHIVE, fugue_sqlParser.ARRAY, fugue_sqlParser.AS, fugue_sqlParser.ASC, fugue_sqlParser.AT, fugue_sqlParser.AUTHORIZATION, fugue_sqlParser.BETWEEN, fugue_sqlParser.BOTH, fugue_sqlParser.BUCKET, fugue_sqlParser.BUCKETS, fugue_sqlParser.BY, fugue_sqlParser.CACHE, fugue_sqlParser.CASCADE, fugue_sqlParser.CASE, fugue_sqlParser.CAST, fugue_sqlParser.CHANGE, fugue_sqlParser.CHECK, fugue_sqlParser.CLEAR, fugue_sqlParser.CLUSTER, fugue_sqlParser.CLUSTERED, fugue_sqlParser.CODEGEN, fugue_sqlParser.COLLATE, fugue_sqlParser.COLLECTION, fugue_sqlParser.COLUMN, fugue_sqlParser.COLUMNS, fugue_sqlParser.COMMENT, fugue_sqlParser.COMMIT, fugue_sqlParser.COMPACT, fugue_sqlParser.COMPACTIONS, fugue_sqlParser.COMPUTE, fugue_sqlParser.CONCATENATE, fugue_sqlParser.CONSTRAINT, fugue_sqlParser.COST, fugue_sqlParser.CREATE, fugue_sqlParser.CUBE, fugue_sqlParser.CURRENT, fugue_sqlParser.CURRENT_DATE, fugue_sqlParser.CURRENT_TIME, fugue_sqlParser.CURRENT_TIMESTAMP, fugue_sqlParser.CURRENT_USER, fugue_sqlParser.DATA, fugue_sqlParser.DATABASE, fugue_sqlParser.DATABASES, fugue_sqlParser.DAY, fugue_sqlParser.DBPROPERTIES, fugue_sqlParser.DEFINED, fugue_sqlParser.DELETE, fugue_sqlParser.DELIMITED, fugue_sqlParser.DESC, fugue_sqlParser.DESCRIBE, fugue_sqlParser.DFS, fugue_sqlParser.DIRECTORIES, fugue_sqlParser.DIRECTORY, fugue_sqlParser.DISTINCT, fugue_sqlParser.DISTRIBUTE, fugue_sqlParser.DROP, fugue_sqlParser.ELSE, fugue_sqlParser.END, fugue_sqlParser.ESCAPE, fugue_sqlParser.ESCAPED, fugue_sqlParser.EXCHANGE, fugue_sqlParser.EXISTS, fugue_sqlParser.EXPLAIN, fugue_sqlParser.EXPORT, fugue_sqlParser.EXTENDED, fugue_sqlParser.EXTERNAL, fugue_sqlParser.EXTRACT, fugue_sqlParser.FALSE, fugue_sqlParser.FETCH, fugue_sqlParser.FIELDS, fugue_sqlParser.FILTER, fugue_sqlParser.FILEFORMAT, fugue_sqlParser.FIRST, fugue_sqlParser.FOLLOWING, fugue_sqlParser.FOR, fugue_sqlParser.FOREIGN, fugue_sqlParser.FORMAT, fugue_sqlParser.FORMATTED, fugue_sqlParser.FROM, fugue_sqlParser.FUNCTION, fugue_sqlParser.FUNCTIONS, fugue_sqlParser.GLOBAL, fugue_sqlParser.GRANT, fugue_sqlParser.GROUP, fugue_sqlParser.GROUPING, fugue_sqlParser.HAVING, fugue_sqlParser.HOUR, fugue_sqlParser.IF, fugue_sqlParser.IGNORE, fugue_sqlParser.IMPORT, fugue_sqlParser.IN, fugue_sqlParser.INDEX, fugue_sqlParser.INDEXES, fugue_sqlParser.INPATH, fugue_sqlParser.INPUTFORMAT, fugue_sqlParser.INSERT, fugue_sqlParser.INTERVAL, fugue_sqlParser.INTO, fugue_sqlParser.IS, fugue_sqlParser.ITEMS, fugue_sqlParser.KEYS, fugue_sqlParser.LAST, fugue_sqlParser.LATERAL, fugue_sqlParser.LAZY, fugue_sqlParser.LEADING, fugue_sqlParser.LIKE, fugue_sqlParser.LIMIT, fugue_sqlParser.LINES, fugue_sqlParser.LIST, fugue_sqlParser.LOAD, fugue_sqlParser.LOCAL, fugue_sqlParser.LOCATION, fugue_sqlParser.LOCK, fugue_sqlParser.LOCKS, fugue_sqlParser.LOGICAL, fugue_sqlParser.MACRO, fugue_sqlParser.MAP, fugue_sqlParser.MATCHED, fugue_sqlParser.MERGE, fugue_sqlParser.MINUTE, fugue_sqlParser.MONTH, fugue_sqlParser.MSCK, fugue_sqlParser.NAMESPACE, fugue_sqlParser.NAMESPACES, fugue_sqlParser.NO, fugue_sqlParser.NOT, fugue_sqlParser.THENULL, fugue_sqlParser.THENULLS, fugue_sqlParser.OF, fugue_sqlParser.ONLY, fugue_sqlParser.OPTION, fugue_sqlParser.OPTIONS, fugue_sqlParser.OR, fugue_sqlParser.ORDER, fugue_sqlParser.OUT, fugue_sqlParser.OUTER, fugue_sqlParser.OUTPUTFORMAT, fugue_sqlParser.OVER, fugue_sqlParser.OVERLAPS, fugue_sqlParser.OVERLAY, fugue_sqlParser.OVERWRITE, fugue_sqlParser.PARTITION, fugue_sqlParser.PARTITIONED, fugue_sqlParser.PARTITIONS, fugue_sqlParser.PERCENTLIT, fugue_sqlParser.PIVOT, fugue_sqlParser.PLACING, fugue_sqlParser.POSITION, fugue_sqlParser.PRECEDING, fugue_sqlParser.PRIMARY, fugue_sqlParser.PRINCIPALS, fugue_sqlParser.PROPERTIES, fugue_sqlParser.PURGE, fugue_sqlParser.QUERY, fugue_sqlParser.RANGE, fugue_sqlParser.RECORDREADER, fugue_sqlParser.RECORDWRITER, fugue_sqlParser.RECOVER, fugue_sqlParser.REDUCE, fugue_sqlParser.REFERENCES, fugue_sqlParser.REFRESH, fugue_sqlParser.RENAME, fugue_sqlParser.REPAIR, fugue_sqlParser.REPLACE, fugue_sqlParser.RESET, fugue_sqlParser.RESTRICT, fugue_sqlParser.REVOKE, fugue_sqlParser.RLIKE, fugue_sqlParser.ROLE, fugue_sqlParser.ROLES, fugue_sqlParser.ROLLBACK, fugue_sqlParser.ROLLUP, fugue_sqlParser.ROW, fugue_sqlParser.ROWS, fugue_sqlParser.SCHEMA, fugue_sqlParser.SECOND, fugue_sqlParser.SELECT, fugue_sqlParser.SEPARATED, fugue_sqlParser.SERDE, fugue_sqlParser.SERDEPROPERTIES, fugue_sqlParser.SESSION_USER, fugue_sqlParser.SET, fugue_sqlParser.SETS, fugue_sqlParser.SHOW, fugue_sqlParser.SKEWED, fugue_sqlParser.SOME, fugue_sqlParser.SORT, fugue_sqlParser.SORTED, fugue_sqlParser.START, fugue_sqlParser.STATISTICS, fugue_sqlParser.STORED, fugue_sqlParser.STRATIFY, fugue_sqlParser.STRUCT, fugue_sqlParser.SUBSTR, fugue_sqlParser.SUBSTRING, fugue_sqlParser.TABLE, fugue_sqlParser.TABLES, fugue_sqlParser.TABLESAMPLE, fugue_sqlParser.TBLPROPERTIES, fugue_sqlParser.TEMPORARY, fugue_sqlParser.TERMINATED, fugue_sqlParser.THEN, fugue_sqlParser.TO, fugue_sqlParser.TOUCH, fugue_sqlParser.TRAILING, fugue_sqlParser.TRANSACTION, fugue_sqlParser.TRANSACTIONS, fugue_sqlParser.TRANSFORM, fugue_sqlParser.TRIM, fugue_sqlParser.TRUE, fugue_sqlParser.TRUNCATE, fugue_sqlParser.TYPE, fugue_sqlParser.UNARCHIVE, fugue_sqlParser.UNBOUNDED, fugue_sqlParser.UNCACHE, fugue_sqlParser.UNIQUE, fugue_sqlParser.UNKNOWN, fugue_sqlParser.UNLOCK, fugue_sqlParser.UNSET, fugue_sqlParser.UPDATE, fugue_sqlParser.USE, fugue_sqlParser.USER, fugue_sqlParser.VALUES, fugue_sqlParser.VIEW, fugue_sqlParser.VIEWS, fugue_sqlParser.WHEN, fugue_sqlParser.WHERE, fugue_sqlParser.WINDOW, fugue_sqlParser.WITH, fugue_sqlParser.YEAR, fugue_sqlParser.DIV]:
                localctx = fugue_sqlParser.UnquotedIdentifierContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3775
                self.nonReserved()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuotedIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BACKQUOTED_IDENTIFIER(self):
            return self.getToken(fugue_sqlParser.BACKQUOTED_IDENTIFIER, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_quotedIdentifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuotedIdentifier" ):
                return visitor.visitQuotedIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def quotedIdentifier(self):

        localctx = fugue_sqlParser.QuotedIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 416, self.RULE_quotedIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3778
            self.match(fugue_sqlParser.BACKQUOTED_IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_number

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class DecimalLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DECIMAL_VALUE(self):
            return self.getToken(fugue_sqlParser.DECIMAL_VALUE, 0)
        def MINUS(self):
            return self.getToken(fugue_sqlParser.MINUS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecimalLiteral" ):
                return visitor.visitDecimalLiteral(self)
            else:
                return visitor.visitChildren(self)


    class BigIntLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BIGINT_LITERAL(self):
            return self.getToken(fugue_sqlParser.BIGINT_LITERAL, 0)
        def MINUS(self):
            return self.getToken(fugue_sqlParser.MINUS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBigIntLiteral" ):
                return visitor.visitBigIntLiteral(self)
            else:
                return visitor.visitChildren(self)


    class TinyIntLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TINYINT_LITERAL(self):
            return self.getToken(fugue_sqlParser.TINYINT_LITERAL, 0)
        def MINUS(self):
            return self.getToken(fugue_sqlParser.MINUS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTinyIntLiteral" ):
                return visitor.visitTinyIntLiteral(self)
            else:
                return visitor.visitChildren(self)


    class LegacyDecimalLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXPONENT_VALUE(self):
            return self.getToken(fugue_sqlParser.EXPONENT_VALUE, 0)
        def DECIMAL_VALUE(self):
            return self.getToken(fugue_sqlParser.DECIMAL_VALUE, 0)
        def MINUS(self):
            return self.getToken(fugue_sqlParser.MINUS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLegacyDecimalLiteral" ):
                return visitor.visitLegacyDecimalLiteral(self)
            else:
                return visitor.visitChildren(self)


    class BigDecimalLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BIGDECIMAL_LITERAL(self):
            return self.getToken(fugue_sqlParser.BIGDECIMAL_LITERAL, 0)
        def MINUS(self):
            return self.getToken(fugue_sqlParser.MINUS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBigDecimalLiteral" ):
                return visitor.visitBigDecimalLiteral(self)
            else:
                return visitor.visitChildren(self)


    class ExponentLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXPONENT_VALUE(self):
            return self.getToken(fugue_sqlParser.EXPONENT_VALUE, 0)
        def MINUS(self):
            return self.getToken(fugue_sqlParser.MINUS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExponentLiteral" ):
                return visitor.visitExponentLiteral(self)
            else:
                return visitor.visitChildren(self)


    class DoubleLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DOUBLE_LITERAL(self):
            return self.getToken(fugue_sqlParser.DOUBLE_LITERAL, 0)
        def MINUS(self):
            return self.getToken(fugue_sqlParser.MINUS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDoubleLiteral" ):
                return visitor.visitDoubleLiteral(self)
            else:
                return visitor.visitChildren(self)


    class IntegerLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INTEGER_VALUE(self):
            return self.getToken(fugue_sqlParser.INTEGER_VALUE, 0)
        def MINUS(self):
            return self.getToken(fugue_sqlParser.MINUS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntegerLiteral" ):
                return visitor.visitIntegerLiteral(self)
            else:
                return visitor.visitChildren(self)


    class SmallIntLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SMALLINT_LITERAL(self):
            return self.getToken(fugue_sqlParser.SMALLINT_LITERAL, 0)
        def MINUS(self):
            return self.getToken(fugue_sqlParser.MINUS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSmallIntLiteral" ):
                return visitor.visitSmallIntLiteral(self)
            else:
                return visitor.visitChildren(self)



    def number(self):

        localctx = fugue_sqlParser.NumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 418, self.RULE_number)
        self._la = 0 # Token type
        try:
            self.state = 3816
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,516,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.ExponentLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3781
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.MINUS:
                    self.state = 3780
                    self.match(fugue_sqlParser.MINUS)


                self.state = 3783
                self.match(fugue_sqlParser.EXPONENT_VALUE)
                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.DecimalLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3785
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.MINUS:
                    self.state = 3784
                    self.match(fugue_sqlParser.MINUS)


                self.state = 3787
                self.match(fugue_sqlParser.DECIMAL_VALUE)
                pass

            elif la_ == 3:
                localctx = fugue_sqlParser.LegacyDecimalLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3789
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.MINUS:
                    self.state = 3788
                    self.match(fugue_sqlParser.MINUS)


                self.state = 3791
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.EXPONENT_VALUE or _la==fugue_sqlParser.DECIMAL_VALUE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 4:
                localctx = fugue_sqlParser.IntegerLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 3793
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.MINUS:
                    self.state = 3792
                    self.match(fugue_sqlParser.MINUS)


                self.state = 3795
                self.match(fugue_sqlParser.INTEGER_VALUE)
                pass

            elif la_ == 5:
                localctx = fugue_sqlParser.BigIntLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 3797
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.MINUS:
                    self.state = 3796
                    self.match(fugue_sqlParser.MINUS)


                self.state = 3799
                self.match(fugue_sqlParser.BIGINT_LITERAL)
                pass

            elif la_ == 6:
                localctx = fugue_sqlParser.SmallIntLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 3801
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.MINUS:
                    self.state = 3800
                    self.match(fugue_sqlParser.MINUS)


                self.state = 3803
                self.match(fugue_sqlParser.SMALLINT_LITERAL)
                pass

            elif la_ == 7:
                localctx = fugue_sqlParser.TinyIntLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 3805
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.MINUS:
                    self.state = 3804
                    self.match(fugue_sqlParser.MINUS)


                self.state = 3807
                self.match(fugue_sqlParser.TINYINT_LITERAL)
                pass

            elif la_ == 8:
                localctx = fugue_sqlParser.DoubleLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 3809
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.MINUS:
                    self.state = 3808
                    self.match(fugue_sqlParser.MINUS)


                self.state = 3811
                self.match(fugue_sqlParser.DOUBLE_LITERAL)
                pass

            elif la_ == 9:
                localctx = fugue_sqlParser.BigDecimalLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 3813
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==fugue_sqlParser.MINUS:
                    self.state = 3812
                    self.match(fugue_sqlParser.MINUS)


                self.state = 3815
                self.match(fugue_sqlParser.BIGDECIMAL_LITERAL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterColumnActionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.setOrDrop = None # Token

        def TYPE(self):
            return self.getToken(fugue_sqlParser.TYPE, 0)

        def dataType(self):
            return self.getTypedRuleContext(fugue_sqlParser.DataTypeContext,0)


        def commentSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.CommentSpecContext,0)


        def colPosition(self):
            return self.getTypedRuleContext(fugue_sqlParser.ColPositionContext,0)


        def NOT(self):
            return self.getToken(fugue_sqlParser.NOT, 0)

        def THENULL(self):
            return self.getToken(fugue_sqlParser.THENULL, 0)

        def SET(self):
            return self.getToken(fugue_sqlParser.SET, 0)

        def DROP(self):
            return self.getToken(fugue_sqlParser.DROP, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_alterColumnAction

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterColumnAction" ):
                return visitor.visitAlterColumnAction(self)
            else:
                return visitor.visitChildren(self)




    def alterColumnAction(self):

        localctx = fugue_sqlParser.AlterColumnActionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 420, self.RULE_alterColumnAction)
        self._la = 0 # Token type
        try:
            self.state = 3825
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [fugue_sqlParser.TYPE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3818
                self.match(fugue_sqlParser.TYPE)
                self.state = 3819
                self.dataType()
                pass
            elif token in [fugue_sqlParser.COMMENT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3820
                self.commentSpec()
                pass
            elif token in [fugue_sqlParser.AFTER, fugue_sqlParser.FIRST]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3821
                self.colPosition()
                pass
            elif token in [fugue_sqlParser.DROP, fugue_sqlParser.SET]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3822
                localctx.setOrDrop = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==fugue_sqlParser.DROP or _la==fugue_sqlParser.SET):
                    localctx.setOrDrop = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3823
                self.match(fugue_sqlParser.NOT)
                self.state = 3824
                self.match(fugue_sqlParser.THENULL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnsiNonReservedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(fugue_sqlParser.ADD, 0)

        def AFTER(self):
            return self.getToken(fugue_sqlParser.AFTER, 0)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)

        def ANALYZE(self):
            return self.getToken(fugue_sqlParser.ANALYZE, 0)

        def ARCHIVE(self):
            return self.getToken(fugue_sqlParser.ARCHIVE, 0)

        def ARRAY(self):
            return self.getToken(fugue_sqlParser.ARRAY, 0)

        def ASC(self):
            return self.getToken(fugue_sqlParser.ASC, 0)

        def AT(self):
            return self.getToken(fugue_sqlParser.AT, 0)

        def BETWEEN(self):
            return self.getToken(fugue_sqlParser.BETWEEN, 0)

        def BUCKET(self):
            return self.getToken(fugue_sqlParser.BUCKET, 0)

        def BUCKETS(self):
            return self.getToken(fugue_sqlParser.BUCKETS, 0)

        def BY(self):
            return self.getToken(fugue_sqlParser.BY, 0)

        def CACHE(self):
            return self.getToken(fugue_sqlParser.CACHE, 0)

        def CASCADE(self):
            return self.getToken(fugue_sqlParser.CASCADE, 0)

        def CHANGE(self):
            return self.getToken(fugue_sqlParser.CHANGE, 0)

        def CLEAR(self):
            return self.getToken(fugue_sqlParser.CLEAR, 0)

        def CLUSTER(self):
            return self.getToken(fugue_sqlParser.CLUSTER, 0)

        def CLUSTERED(self):
            return self.getToken(fugue_sqlParser.CLUSTERED, 0)

        def CODEGEN(self):
            return self.getToken(fugue_sqlParser.CODEGEN, 0)

        def COLLECTION(self):
            return self.getToken(fugue_sqlParser.COLLECTION, 0)

        def COLUMNS(self):
            return self.getToken(fugue_sqlParser.COLUMNS, 0)

        def COMMENT(self):
            return self.getToken(fugue_sqlParser.COMMENT, 0)

        def COMMIT(self):
            return self.getToken(fugue_sqlParser.COMMIT, 0)

        def COMPACT(self):
            return self.getToken(fugue_sqlParser.COMPACT, 0)

        def COMPACTIONS(self):
            return self.getToken(fugue_sqlParser.COMPACTIONS, 0)

        def COMPUTE(self):
            return self.getToken(fugue_sqlParser.COMPUTE, 0)

        def CONCATENATE(self):
            return self.getToken(fugue_sqlParser.CONCATENATE, 0)

        def COST(self):
            return self.getToken(fugue_sqlParser.COST, 0)

        def CUBE(self):
            return self.getToken(fugue_sqlParser.CUBE, 0)

        def CURRENT(self):
            return self.getToken(fugue_sqlParser.CURRENT, 0)

        def DATA(self):
            return self.getToken(fugue_sqlParser.DATA, 0)

        def DATABASE(self):
            return self.getToken(fugue_sqlParser.DATABASE, 0)

        def DATABASES(self):
            return self.getToken(fugue_sqlParser.DATABASES, 0)

        def DBPROPERTIES(self):
            return self.getToken(fugue_sqlParser.DBPROPERTIES, 0)

        def DEFINED(self):
            return self.getToken(fugue_sqlParser.DEFINED, 0)

        def DELETE(self):
            return self.getToken(fugue_sqlParser.DELETE, 0)

        def DELIMITED(self):
            return self.getToken(fugue_sqlParser.DELIMITED, 0)

        def DESC(self):
            return self.getToken(fugue_sqlParser.DESC, 0)

        def DESCRIBE(self):
            return self.getToken(fugue_sqlParser.DESCRIBE, 0)

        def DFS(self):
            return self.getToken(fugue_sqlParser.DFS, 0)

        def DIRECTORIES(self):
            return self.getToken(fugue_sqlParser.DIRECTORIES, 0)

        def DIRECTORY(self):
            return self.getToken(fugue_sqlParser.DIRECTORY, 0)

        def DISTRIBUTE(self):
            return self.getToken(fugue_sqlParser.DISTRIBUTE, 0)

        def DIV(self):
            return self.getToken(fugue_sqlParser.DIV, 0)

        def DROP(self):
            return self.getToken(fugue_sqlParser.DROP, 0)

        def ESCAPED(self):
            return self.getToken(fugue_sqlParser.ESCAPED, 0)

        def EXCHANGE(self):
            return self.getToken(fugue_sqlParser.EXCHANGE, 0)

        def EXISTS(self):
            return self.getToken(fugue_sqlParser.EXISTS, 0)

        def EXPLAIN(self):
            return self.getToken(fugue_sqlParser.EXPLAIN, 0)

        def EXPORT(self):
            return self.getToken(fugue_sqlParser.EXPORT, 0)

        def EXTENDED(self):
            return self.getToken(fugue_sqlParser.EXTENDED, 0)

        def EXTERNAL(self):
            return self.getToken(fugue_sqlParser.EXTERNAL, 0)

        def EXTRACT(self):
            return self.getToken(fugue_sqlParser.EXTRACT, 0)

        def FIELDS(self):
            return self.getToken(fugue_sqlParser.FIELDS, 0)

        def FILEFORMAT(self):
            return self.getToken(fugue_sqlParser.FILEFORMAT, 0)

        def FIRST(self):
            return self.getToken(fugue_sqlParser.FIRST, 0)

        def FOLLOWING(self):
            return self.getToken(fugue_sqlParser.FOLLOWING, 0)

        def FORMAT(self):
            return self.getToken(fugue_sqlParser.FORMAT, 0)

        def FORMATTED(self):
            return self.getToken(fugue_sqlParser.FORMATTED, 0)

        def FUNCTION(self):
            return self.getToken(fugue_sqlParser.FUNCTION, 0)

        def FUNCTIONS(self):
            return self.getToken(fugue_sqlParser.FUNCTIONS, 0)

        def GLOBAL(self):
            return self.getToken(fugue_sqlParser.GLOBAL, 0)

        def GROUPING(self):
            return self.getToken(fugue_sqlParser.GROUPING, 0)

        def IF(self):
            return self.getToken(fugue_sqlParser.IF, 0)

        def IGNORE(self):
            return self.getToken(fugue_sqlParser.IGNORE, 0)

        def IMPORT(self):
            return self.getToken(fugue_sqlParser.IMPORT, 0)

        def INDEX(self):
            return self.getToken(fugue_sqlParser.INDEX, 0)

        def INDEXES(self):
            return self.getToken(fugue_sqlParser.INDEXES, 0)

        def INPATH(self):
            return self.getToken(fugue_sqlParser.INPATH, 0)

        def INPUTFORMAT(self):
            return self.getToken(fugue_sqlParser.INPUTFORMAT, 0)

        def INSERT(self):
            return self.getToken(fugue_sqlParser.INSERT, 0)

        def INTERVAL(self):
            return self.getToken(fugue_sqlParser.INTERVAL, 0)

        def ITEMS(self):
            return self.getToken(fugue_sqlParser.ITEMS, 0)

        def KEYS(self):
            return self.getToken(fugue_sqlParser.KEYS, 0)

        def LAST(self):
            return self.getToken(fugue_sqlParser.LAST, 0)

        def LATERAL(self):
            return self.getToken(fugue_sqlParser.LATERAL, 0)

        def LAZY(self):
            return self.getToken(fugue_sqlParser.LAZY, 0)

        def LIKE(self):
            return self.getToken(fugue_sqlParser.LIKE, 0)

        def LIMIT(self):
            return self.getToken(fugue_sqlParser.LIMIT, 0)

        def LINES(self):
            return self.getToken(fugue_sqlParser.LINES, 0)

        def LIST(self):
            return self.getToken(fugue_sqlParser.LIST, 0)

        def LOAD(self):
            return self.getToken(fugue_sqlParser.LOAD, 0)

        def LOCAL(self):
            return self.getToken(fugue_sqlParser.LOCAL, 0)

        def LOCATION(self):
            return self.getToken(fugue_sqlParser.LOCATION, 0)

        def LOCK(self):
            return self.getToken(fugue_sqlParser.LOCK, 0)

        def LOCKS(self):
            return self.getToken(fugue_sqlParser.LOCKS, 0)

        def LOGICAL(self):
            return self.getToken(fugue_sqlParser.LOGICAL, 0)

        def MACRO(self):
            return self.getToken(fugue_sqlParser.MACRO, 0)

        def MAP(self):
            return self.getToken(fugue_sqlParser.MAP, 0)

        def MATCHED(self):
            return self.getToken(fugue_sqlParser.MATCHED, 0)

        def MERGE(self):
            return self.getToken(fugue_sqlParser.MERGE, 0)

        def MSCK(self):
            return self.getToken(fugue_sqlParser.MSCK, 0)

        def NAMESPACE(self):
            return self.getToken(fugue_sqlParser.NAMESPACE, 0)

        def NAMESPACES(self):
            return self.getToken(fugue_sqlParser.NAMESPACES, 0)

        def NO(self):
            return self.getToken(fugue_sqlParser.NO, 0)

        def THENULLS(self):
            return self.getToken(fugue_sqlParser.THENULLS, 0)

        def OF(self):
            return self.getToken(fugue_sqlParser.OF, 0)

        def OPTION(self):
            return self.getToken(fugue_sqlParser.OPTION, 0)

        def OPTIONS(self):
            return self.getToken(fugue_sqlParser.OPTIONS, 0)

        def OUT(self):
            return self.getToken(fugue_sqlParser.OUT, 0)

        def OUTPUTFORMAT(self):
            return self.getToken(fugue_sqlParser.OUTPUTFORMAT, 0)

        def OVER(self):
            return self.getToken(fugue_sqlParser.OVER, 0)

        def OVERLAY(self):
            return self.getToken(fugue_sqlParser.OVERLAY, 0)

        def OVERWRITE(self):
            return self.getToken(fugue_sqlParser.OVERWRITE, 0)

        def PARTITION(self):
            return self.getToken(fugue_sqlParser.PARTITION, 0)

        def PARTITIONED(self):
            return self.getToken(fugue_sqlParser.PARTITIONED, 0)

        def PARTITIONS(self):
            return self.getToken(fugue_sqlParser.PARTITIONS, 0)

        def PERCENTLIT(self):
            return self.getToken(fugue_sqlParser.PERCENTLIT, 0)

        def PIVOT(self):
            return self.getToken(fugue_sqlParser.PIVOT, 0)

        def PLACING(self):
            return self.getToken(fugue_sqlParser.PLACING, 0)

        def POSITION(self):
            return self.getToken(fugue_sqlParser.POSITION, 0)

        def PRECEDING(self):
            return self.getToken(fugue_sqlParser.PRECEDING, 0)

        def PRINCIPALS(self):
            return self.getToken(fugue_sqlParser.PRINCIPALS, 0)

        def PROPERTIES(self):
            return self.getToken(fugue_sqlParser.PROPERTIES, 0)

        def PURGE(self):
            return self.getToken(fugue_sqlParser.PURGE, 0)

        def QUERY(self):
            return self.getToken(fugue_sqlParser.QUERY, 0)

        def RANGE(self):
            return self.getToken(fugue_sqlParser.RANGE, 0)

        def RECORDREADER(self):
            return self.getToken(fugue_sqlParser.RECORDREADER, 0)

        def RECORDWRITER(self):
            return self.getToken(fugue_sqlParser.RECORDWRITER, 0)

        def RECOVER(self):
            return self.getToken(fugue_sqlParser.RECOVER, 0)

        def REDUCE(self):
            return self.getToken(fugue_sqlParser.REDUCE, 0)

        def REFRESH(self):
            return self.getToken(fugue_sqlParser.REFRESH, 0)

        def RENAME(self):
            return self.getToken(fugue_sqlParser.RENAME, 0)

        def REPAIR(self):
            return self.getToken(fugue_sqlParser.REPAIR, 0)

        def REPLACE(self):
            return self.getToken(fugue_sqlParser.REPLACE, 0)

        def RESET(self):
            return self.getToken(fugue_sqlParser.RESET, 0)

        def RESTRICT(self):
            return self.getToken(fugue_sqlParser.RESTRICT, 0)

        def REVOKE(self):
            return self.getToken(fugue_sqlParser.REVOKE, 0)

        def RLIKE(self):
            return self.getToken(fugue_sqlParser.RLIKE, 0)

        def ROLE(self):
            return self.getToken(fugue_sqlParser.ROLE, 0)

        def ROLES(self):
            return self.getToken(fugue_sqlParser.ROLES, 0)

        def ROLLBACK(self):
            return self.getToken(fugue_sqlParser.ROLLBACK, 0)

        def ROLLUP(self):
            return self.getToken(fugue_sqlParser.ROLLUP, 0)

        def ROW(self):
            return self.getToken(fugue_sqlParser.ROW, 0)

        def ROWS(self):
            return self.getToken(fugue_sqlParser.ROWS, 0)

        def SCHEMA(self):
            return self.getToken(fugue_sqlParser.SCHEMA, 0)

        def SEPARATED(self):
            return self.getToken(fugue_sqlParser.SEPARATED, 0)

        def SERDE(self):
            return self.getToken(fugue_sqlParser.SERDE, 0)

        def SERDEPROPERTIES(self):
            return self.getToken(fugue_sqlParser.SERDEPROPERTIES, 0)

        def SET(self):
            return self.getToken(fugue_sqlParser.SET, 0)

        def SETS(self):
            return self.getToken(fugue_sqlParser.SETS, 0)

        def SHOW(self):
            return self.getToken(fugue_sqlParser.SHOW, 0)

        def SKEWED(self):
            return self.getToken(fugue_sqlParser.SKEWED, 0)

        def SORT(self):
            return self.getToken(fugue_sqlParser.SORT, 0)

        def SORTED(self):
            return self.getToken(fugue_sqlParser.SORTED, 0)

        def START(self):
            return self.getToken(fugue_sqlParser.START, 0)

        def STATISTICS(self):
            return self.getToken(fugue_sqlParser.STATISTICS, 0)

        def STORED(self):
            return self.getToken(fugue_sqlParser.STORED, 0)

        def STRATIFY(self):
            return self.getToken(fugue_sqlParser.STRATIFY, 0)

        def STRUCT(self):
            return self.getToken(fugue_sqlParser.STRUCT, 0)

        def SUBSTR(self):
            return self.getToken(fugue_sqlParser.SUBSTR, 0)

        def SUBSTRING(self):
            return self.getToken(fugue_sqlParser.SUBSTRING, 0)

        def TABLES(self):
            return self.getToken(fugue_sqlParser.TABLES, 0)

        def TABLESAMPLE(self):
            return self.getToken(fugue_sqlParser.TABLESAMPLE, 0)

        def TBLPROPERTIES(self):
            return self.getToken(fugue_sqlParser.TBLPROPERTIES, 0)

        def TEMPORARY(self):
            return self.getToken(fugue_sqlParser.TEMPORARY, 0)

        def TERMINATED(self):
            return self.getToken(fugue_sqlParser.TERMINATED, 0)

        def TOUCH(self):
            return self.getToken(fugue_sqlParser.TOUCH, 0)

        def TRANSACTION(self):
            return self.getToken(fugue_sqlParser.TRANSACTION, 0)

        def TRANSACTIONS(self):
            return self.getToken(fugue_sqlParser.TRANSACTIONS, 0)

        def TRANSFORM(self):
            return self.getToken(fugue_sqlParser.TRANSFORM, 0)

        def TRIM(self):
            return self.getToken(fugue_sqlParser.TRIM, 0)

        def TRUE(self):
            return self.getToken(fugue_sqlParser.TRUE, 0)

        def TRUNCATE(self):
            return self.getToken(fugue_sqlParser.TRUNCATE, 0)

        def UNARCHIVE(self):
            return self.getToken(fugue_sqlParser.UNARCHIVE, 0)

        def UNBOUNDED(self):
            return self.getToken(fugue_sqlParser.UNBOUNDED, 0)

        def UNCACHE(self):
            return self.getToken(fugue_sqlParser.UNCACHE, 0)

        def UNLOCK(self):
            return self.getToken(fugue_sqlParser.UNLOCK, 0)

        def UNSET(self):
            return self.getToken(fugue_sqlParser.UNSET, 0)

        def UPDATE(self):
            return self.getToken(fugue_sqlParser.UPDATE, 0)

        def USE(self):
            return self.getToken(fugue_sqlParser.USE, 0)

        def VALUES(self):
            return self.getToken(fugue_sqlParser.VALUES, 0)

        def VIEW(self):
            return self.getToken(fugue_sqlParser.VIEW, 0)

        def VIEWS(self):
            return self.getToken(fugue_sqlParser.VIEWS, 0)

        def WINDOW(self):
            return self.getToken(fugue_sqlParser.WINDOW, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_ansiNonReserved

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnsiNonReserved" ):
                return visitor.visitAnsiNonReserved(self)
            else:
                return visitor.visitChildren(self)




    def ansiNonReserved(self):

        localctx = fugue_sqlParser.AnsiNonReservedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 422, self.RULE_ansiNonReserved)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3827
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << fugue_sqlParser.ADD) | (1 << fugue_sqlParser.AFTER) | (1 << fugue_sqlParser.ALTER) | (1 << fugue_sqlParser.ANALYZE) | (1 << fugue_sqlParser.ARCHIVE) | (1 << fugue_sqlParser.ARRAY))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (fugue_sqlParser.ASC - 64)) | (1 << (fugue_sqlParser.AT - 64)) | (1 << (fugue_sqlParser.BETWEEN - 64)) | (1 << (fugue_sqlParser.BUCKET - 64)) | (1 << (fugue_sqlParser.BUCKETS - 64)) | (1 << (fugue_sqlParser.BY - 64)) | (1 << (fugue_sqlParser.CACHE - 64)) | (1 << (fugue_sqlParser.CASCADE - 64)) | (1 << (fugue_sqlParser.CHANGE - 64)) | (1 << (fugue_sqlParser.CLEAR - 64)) | (1 << (fugue_sqlParser.CLUSTER - 64)) | (1 << (fugue_sqlParser.CLUSTERED - 64)) | (1 << (fugue_sqlParser.CODEGEN - 64)) | (1 << (fugue_sqlParser.COLLECTION - 64)) | (1 << (fugue_sqlParser.COLUMNS - 64)) | (1 << (fugue_sqlParser.COMMENT - 64)) | (1 << (fugue_sqlParser.COMMIT - 64)) | (1 << (fugue_sqlParser.COMPACT - 64)) | (1 << (fugue_sqlParser.COMPACTIONS - 64)) | (1 << (fugue_sqlParser.COMPUTE - 64)) | (1 << (fugue_sqlParser.CONCATENATE - 64)) | (1 << (fugue_sqlParser.COST - 64)) | (1 << (fugue_sqlParser.CUBE - 64)) | (1 << (fugue_sqlParser.CURRENT - 64)) | (1 << (fugue_sqlParser.DATA - 64)) | (1 << (fugue_sqlParser.DATABASE - 64)) | (1 << (fugue_sqlParser.DATABASES - 64)) | (1 << (fugue_sqlParser.DBPROPERTIES - 64)) | (1 << (fugue_sqlParser.DEFINED - 64)) | (1 << (fugue_sqlParser.DELETE - 64)) | (1 << (fugue_sqlParser.DELIMITED - 64)) | (1 << (fugue_sqlParser.DESC - 64)) | (1 << (fugue_sqlParser.DESCRIBE - 64)) | (1 << (fugue_sqlParser.DFS - 64)) | (1 << (fugue_sqlParser.DIRECTORIES - 64)) | (1 << (fugue_sqlParser.DIRECTORY - 64)) | (1 << (fugue_sqlParser.DISTRIBUTE - 64)) | (1 << (fugue_sqlParser.DROP - 64)) | (1 << (fugue_sqlParser.ESCAPED - 64)) | (1 << (fugue_sqlParser.EXCHANGE - 64)) | (1 << (fugue_sqlParser.EXISTS - 64)) | (1 << (fugue_sqlParser.EXPLAIN - 64)) | (1 << (fugue_sqlParser.EXPORT - 64)) | (1 << (fugue_sqlParser.EXTENDED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (fugue_sqlParser.EXTERNAL - 128)) | (1 << (fugue_sqlParser.EXTRACT - 128)) | (1 << (fugue_sqlParser.FIELDS - 128)) | (1 << (fugue_sqlParser.FILEFORMAT - 128)) | (1 << (fugue_sqlParser.FIRST - 128)) | (1 << (fugue_sqlParser.FOLLOWING - 128)) | (1 << (fugue_sqlParser.FORMAT - 128)) | (1 << (fugue_sqlParser.FORMATTED - 128)) | (1 << (fugue_sqlParser.FUNCTION - 128)) | (1 << (fugue_sqlParser.FUNCTIONS - 128)) | (1 << (fugue_sqlParser.GLOBAL - 128)) | (1 << (fugue_sqlParser.GROUPING - 128)) | (1 << (fugue_sqlParser.IF - 128)) | (1 << (fugue_sqlParser.IGNORE - 128)) | (1 << (fugue_sqlParser.IMPORT - 128)) | (1 << (fugue_sqlParser.INDEX - 128)) | (1 << (fugue_sqlParser.INDEXES - 128)) | (1 << (fugue_sqlParser.INPATH - 128)) | (1 << (fugue_sqlParser.INPUTFORMAT - 128)) | (1 << (fugue_sqlParser.INSERT - 128)) | (1 << (fugue_sqlParser.INTERVAL - 128)) | (1 << (fugue_sqlParser.ITEMS - 128)) | (1 << (fugue_sqlParser.KEYS - 128)) | (1 << (fugue_sqlParser.LAST - 128)) | (1 << (fugue_sqlParser.LATERAL - 128)) | (1 << (fugue_sqlParser.LAZY - 128)) | (1 << (fugue_sqlParser.LIKE - 128)) | (1 << (fugue_sqlParser.LIMIT - 128)) | (1 << (fugue_sqlParser.LINES - 128)) | (1 << (fugue_sqlParser.LIST - 128)) | (1 << (fugue_sqlParser.LOAD - 128)) | (1 << (fugue_sqlParser.LOCAL - 128)) | (1 << (fugue_sqlParser.LOCATION - 128)) | (1 << (fugue_sqlParser.LOCK - 128)) | (1 << (fugue_sqlParser.LOCKS - 128)) | (1 << (fugue_sqlParser.LOGICAL - 128)) | (1 << (fugue_sqlParser.MACRO - 128)) | (1 << (fugue_sqlParser.MAP - 128)) | (1 << (fugue_sqlParser.MATCHED - 128)) | (1 << (fugue_sqlParser.MERGE - 128)) | (1 << (fugue_sqlParser.MSCK - 128)) | (1 << (fugue_sqlParser.NAMESPACE - 128)) | (1 << (fugue_sqlParser.NAMESPACES - 128)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (fugue_sqlParser.NO - 193)) | (1 << (fugue_sqlParser.THENULLS - 193)) | (1 << (fugue_sqlParser.OF - 193)) | (1 << (fugue_sqlParser.OPTION - 193)) | (1 << (fugue_sqlParser.OPTIONS - 193)) | (1 << (fugue_sqlParser.OUT - 193)) | (1 << (fugue_sqlParser.OUTPUTFORMAT - 193)) | (1 << (fugue_sqlParser.OVER - 193)) | (1 << (fugue_sqlParser.OVERLAY - 193)) | (1 << (fugue_sqlParser.OVERWRITE - 193)) | (1 << (fugue_sqlParser.PARTITION - 193)) | (1 << (fugue_sqlParser.PARTITIONED - 193)) | (1 << (fugue_sqlParser.PARTITIONS - 193)) | (1 << (fugue_sqlParser.PERCENTLIT - 193)) | (1 << (fugue_sqlParser.PIVOT - 193)) | (1 << (fugue_sqlParser.PLACING - 193)) | (1 << (fugue_sqlParser.POSITION - 193)) | (1 << (fugue_sqlParser.PRECEDING - 193)) | (1 << (fugue_sqlParser.PRINCIPALS - 193)) | (1 << (fugue_sqlParser.PROPERTIES - 193)) | (1 << (fugue_sqlParser.PURGE - 193)) | (1 << (fugue_sqlParser.QUERY - 193)) | (1 << (fugue_sqlParser.RANGE - 193)) | (1 << (fugue_sqlParser.RECORDREADER - 193)) | (1 << (fugue_sqlParser.RECORDWRITER - 193)) | (1 << (fugue_sqlParser.RECOVER - 193)) | (1 << (fugue_sqlParser.REDUCE - 193)) | (1 << (fugue_sqlParser.REFRESH - 193)) | (1 << (fugue_sqlParser.RENAME - 193)) | (1 << (fugue_sqlParser.REPAIR - 193)) | (1 << (fugue_sqlParser.REPLACE - 193)) | (1 << (fugue_sqlParser.RESET - 193)) | (1 << (fugue_sqlParser.RESTRICT - 193)) | (1 << (fugue_sqlParser.REVOKE - 193)) | (1 << (fugue_sqlParser.RLIKE - 193)) | (1 << (fugue_sqlParser.ROLE - 193)) | (1 << (fugue_sqlParser.ROLES - 193)) | (1 << (fugue_sqlParser.ROLLBACK - 193)) | (1 << (fugue_sqlParser.ROLLUP - 193)) | (1 << (fugue_sqlParser.ROW - 193)) | (1 << (fugue_sqlParser.ROWS - 193)) | (1 << (fugue_sqlParser.SCHEMA - 193)) | (1 << (fugue_sqlParser.SEPARATED - 193)) | (1 << (fugue_sqlParser.SERDE - 193)) | (1 << (fugue_sqlParser.SERDEPROPERTIES - 193)) | (1 << (fugue_sqlParser.SET - 193)) | (1 << (fugue_sqlParser.SETS - 193)) | (1 << (fugue_sqlParser.SHOW - 193)))) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & ((1 << (fugue_sqlParser.SKEWED - 257)) | (1 << (fugue_sqlParser.SORT - 257)) | (1 << (fugue_sqlParser.SORTED - 257)) | (1 << (fugue_sqlParser.START - 257)) | (1 << (fugue_sqlParser.STATISTICS - 257)) | (1 << (fugue_sqlParser.STORED - 257)) | (1 << (fugue_sqlParser.STRATIFY - 257)) | (1 << (fugue_sqlParser.STRUCT - 257)) | (1 << (fugue_sqlParser.SUBSTR - 257)) | (1 << (fugue_sqlParser.SUBSTRING - 257)) | (1 << (fugue_sqlParser.TABLES - 257)) | (1 << (fugue_sqlParser.TABLESAMPLE - 257)) | (1 << (fugue_sqlParser.TBLPROPERTIES - 257)) | (1 << (fugue_sqlParser.TEMPORARY - 257)) | (1 << (fugue_sqlParser.TERMINATED - 257)) | (1 << (fugue_sqlParser.TOUCH - 257)) | (1 << (fugue_sqlParser.TRANSACTION - 257)) | (1 << (fugue_sqlParser.TRANSACTIONS - 257)) | (1 << (fugue_sqlParser.TRANSFORM - 257)) | (1 << (fugue_sqlParser.TRIM - 257)) | (1 << (fugue_sqlParser.TRUE - 257)) | (1 << (fugue_sqlParser.TRUNCATE - 257)) | (1 << (fugue_sqlParser.UNARCHIVE - 257)) | (1 << (fugue_sqlParser.UNBOUNDED - 257)) | (1 << (fugue_sqlParser.UNCACHE - 257)) | (1 << (fugue_sqlParser.UNLOCK - 257)) | (1 << (fugue_sqlParser.UNSET - 257)) | (1 << (fugue_sqlParser.UPDATE - 257)) | (1 << (fugue_sqlParser.USE - 257)) | (1 << (fugue_sqlParser.VALUES - 257)) | (1 << (fugue_sqlParser.VIEW - 257)) | (1 << (fugue_sqlParser.VIEWS - 257)) | (1 << (fugue_sqlParser.WINDOW - 257)) | (1 << (fugue_sqlParser.DIV - 257)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StrictNonReservedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANTI(self):
            return self.getToken(fugue_sqlParser.ANTI, 0)

        def CROSS(self):
            return self.getToken(fugue_sqlParser.CROSS, 0)

        def EXCEPT(self):
            return self.getToken(fugue_sqlParser.EXCEPT, 0)

        def FULL(self):
            return self.getToken(fugue_sqlParser.FULL, 0)

        def INNER(self):
            return self.getToken(fugue_sqlParser.INNER, 0)

        def INTERSECT(self):
            return self.getToken(fugue_sqlParser.INTERSECT, 0)

        def JOIN(self):
            return self.getToken(fugue_sqlParser.JOIN, 0)

        def LEFT(self):
            return self.getToken(fugue_sqlParser.LEFT, 0)

        def NATURAL(self):
            return self.getToken(fugue_sqlParser.NATURAL, 0)

        def ON(self):
            return self.getToken(fugue_sqlParser.ON, 0)

        def RIGHT(self):
            return self.getToken(fugue_sqlParser.RIGHT, 0)

        def SEMI(self):
            return self.getToken(fugue_sqlParser.SEMI, 0)

        def SETMINUS(self):
            return self.getToken(fugue_sqlParser.SETMINUS, 0)

        def UNION(self):
            return self.getToken(fugue_sqlParser.UNION, 0)

        def USING(self):
            return self.getToken(fugue_sqlParser.USING, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_strictNonReserved

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStrictNonReserved" ):
                return visitor.visitStrictNonReserved(self)
            else:
                return visitor.visitChildren(self)




    def strictNonReserved(self):

        localctx = fugue_sqlParser.StrictNonReservedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 424, self.RULE_strictNonReserved)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3829
            _la = self._input.LA(1)
            if not(((((_la - 59)) & ~0x3f) == 0 and ((1 << (_la - 59)) & ((1 << (fugue_sqlParser.ANTI - 59)) | (1 << (fugue_sqlParser.CROSS - 59)) | (1 << (fugue_sqlParser.EXCEPT - 59)))) != 0) or ((((_la - 142)) & ~0x3f) == 0 and ((1 << (_la - 142)) & ((1 << (fugue_sqlParser.FULL - 142)) | (1 << (fugue_sqlParser.INNER - 142)) | (1 << (fugue_sqlParser.INTERSECT - 142)) | (1 << (fugue_sqlParser.JOIN - 142)) | (1 << (fugue_sqlParser.LEFT - 142)) | (1 << (fugue_sqlParser.NATURAL - 142)) | (1 << (fugue_sqlParser.ON - 142)))) != 0) or ((((_la - 237)) & ~0x3f) == 0 and ((1 << (_la - 237)) & ((1 << (fugue_sqlParser.RIGHT - 237)) | (1 << (fugue_sqlParser.SEMI - 237)) | (1 << (fugue_sqlParser.SETMINUS - 237)) | (1 << (fugue_sqlParser.UNION - 237)) | (1 << (fugue_sqlParser.USING - 237)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NonReservedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(fugue_sqlParser.ADD, 0)

        def AFTER(self):
            return self.getToken(fugue_sqlParser.AFTER, 0)

        def ALL(self):
            return self.getToken(fugue_sqlParser.ALL, 0)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)

        def ANALYZE(self):
            return self.getToken(fugue_sqlParser.ANALYZE, 0)

        def AND(self):
            return self.getToken(fugue_sqlParser.AND, 0)

        def ANY(self):
            return self.getToken(fugue_sqlParser.ANY, 0)

        def ARCHIVE(self):
            return self.getToken(fugue_sqlParser.ARCHIVE, 0)

        def ARRAY(self):
            return self.getToken(fugue_sqlParser.ARRAY, 0)

        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)

        def ASC(self):
            return self.getToken(fugue_sqlParser.ASC, 0)

        def AT(self):
            return self.getToken(fugue_sqlParser.AT, 0)

        def AUTHORIZATION(self):
            return self.getToken(fugue_sqlParser.AUTHORIZATION, 0)

        def BETWEEN(self):
            return self.getToken(fugue_sqlParser.BETWEEN, 0)

        def BOTH(self):
            return self.getToken(fugue_sqlParser.BOTH, 0)

        def BUCKET(self):
            return self.getToken(fugue_sqlParser.BUCKET, 0)

        def BUCKETS(self):
            return self.getToken(fugue_sqlParser.BUCKETS, 0)

        def BY(self):
            return self.getToken(fugue_sqlParser.BY, 0)

        def CACHE(self):
            return self.getToken(fugue_sqlParser.CACHE, 0)

        def CASCADE(self):
            return self.getToken(fugue_sqlParser.CASCADE, 0)

        def CASE(self):
            return self.getToken(fugue_sqlParser.CASE, 0)

        def CAST(self):
            return self.getToken(fugue_sqlParser.CAST, 0)

        def CHANGE(self):
            return self.getToken(fugue_sqlParser.CHANGE, 0)

        def CHECK(self):
            return self.getToken(fugue_sqlParser.CHECK, 0)

        def CLEAR(self):
            return self.getToken(fugue_sqlParser.CLEAR, 0)

        def CLUSTER(self):
            return self.getToken(fugue_sqlParser.CLUSTER, 0)

        def CLUSTERED(self):
            return self.getToken(fugue_sqlParser.CLUSTERED, 0)

        def CODEGEN(self):
            return self.getToken(fugue_sqlParser.CODEGEN, 0)

        def COLLATE(self):
            return self.getToken(fugue_sqlParser.COLLATE, 0)

        def COLLECTION(self):
            return self.getToken(fugue_sqlParser.COLLECTION, 0)

        def COLUMN(self):
            return self.getToken(fugue_sqlParser.COLUMN, 0)

        def COLUMNS(self):
            return self.getToken(fugue_sqlParser.COLUMNS, 0)

        def COMMENT(self):
            return self.getToken(fugue_sqlParser.COMMENT, 0)

        def COMMIT(self):
            return self.getToken(fugue_sqlParser.COMMIT, 0)

        def COMPACT(self):
            return self.getToken(fugue_sqlParser.COMPACT, 0)

        def COMPACTIONS(self):
            return self.getToken(fugue_sqlParser.COMPACTIONS, 0)

        def COMPUTE(self):
            return self.getToken(fugue_sqlParser.COMPUTE, 0)

        def CONCATENATE(self):
            return self.getToken(fugue_sqlParser.CONCATENATE, 0)

        def CONSTRAINT(self):
            return self.getToken(fugue_sqlParser.CONSTRAINT, 0)

        def COST(self):
            return self.getToken(fugue_sqlParser.COST, 0)

        def CREATE(self):
            return self.getToken(fugue_sqlParser.CREATE, 0)

        def CUBE(self):
            return self.getToken(fugue_sqlParser.CUBE, 0)

        def CURRENT(self):
            return self.getToken(fugue_sqlParser.CURRENT, 0)

        def CURRENT_DATE(self):
            return self.getToken(fugue_sqlParser.CURRENT_DATE, 0)

        def CURRENT_TIME(self):
            return self.getToken(fugue_sqlParser.CURRENT_TIME, 0)

        def CURRENT_TIMESTAMP(self):
            return self.getToken(fugue_sqlParser.CURRENT_TIMESTAMP, 0)

        def CURRENT_USER(self):
            return self.getToken(fugue_sqlParser.CURRENT_USER, 0)

        def DATA(self):
            return self.getToken(fugue_sqlParser.DATA, 0)

        def DATABASE(self):
            return self.getToken(fugue_sqlParser.DATABASE, 0)

        def DATABASES(self):
            return self.getToken(fugue_sqlParser.DATABASES, 0)

        def DAY(self):
            return self.getToken(fugue_sqlParser.DAY, 0)

        def DBPROPERTIES(self):
            return self.getToken(fugue_sqlParser.DBPROPERTIES, 0)

        def DEFINED(self):
            return self.getToken(fugue_sqlParser.DEFINED, 0)

        def DELETE(self):
            return self.getToken(fugue_sqlParser.DELETE, 0)

        def DELIMITED(self):
            return self.getToken(fugue_sqlParser.DELIMITED, 0)

        def DESC(self):
            return self.getToken(fugue_sqlParser.DESC, 0)

        def DESCRIBE(self):
            return self.getToken(fugue_sqlParser.DESCRIBE, 0)

        def DFS(self):
            return self.getToken(fugue_sqlParser.DFS, 0)

        def DIRECTORIES(self):
            return self.getToken(fugue_sqlParser.DIRECTORIES, 0)

        def DIRECTORY(self):
            return self.getToken(fugue_sqlParser.DIRECTORY, 0)

        def DISTINCT(self):
            return self.getToken(fugue_sqlParser.DISTINCT, 0)

        def DISTRIBUTE(self):
            return self.getToken(fugue_sqlParser.DISTRIBUTE, 0)

        def DIV(self):
            return self.getToken(fugue_sqlParser.DIV, 0)

        def DROP(self):
            return self.getToken(fugue_sqlParser.DROP, 0)

        def ELSE(self):
            return self.getToken(fugue_sqlParser.ELSE, 0)

        def END(self):
            return self.getToken(fugue_sqlParser.END, 0)

        def ESCAPE(self):
            return self.getToken(fugue_sqlParser.ESCAPE, 0)

        def ESCAPED(self):
            return self.getToken(fugue_sqlParser.ESCAPED, 0)

        def EXCHANGE(self):
            return self.getToken(fugue_sqlParser.EXCHANGE, 0)

        def EXISTS(self):
            return self.getToken(fugue_sqlParser.EXISTS, 0)

        def EXPLAIN(self):
            return self.getToken(fugue_sqlParser.EXPLAIN, 0)

        def EXPORT(self):
            return self.getToken(fugue_sqlParser.EXPORT, 0)

        def EXTENDED(self):
            return self.getToken(fugue_sqlParser.EXTENDED, 0)

        def EXTERNAL(self):
            return self.getToken(fugue_sqlParser.EXTERNAL, 0)

        def EXTRACT(self):
            return self.getToken(fugue_sqlParser.EXTRACT, 0)

        def FALSE(self):
            return self.getToken(fugue_sqlParser.FALSE, 0)

        def FETCH(self):
            return self.getToken(fugue_sqlParser.FETCH, 0)

        def FILTER(self):
            return self.getToken(fugue_sqlParser.FILTER, 0)

        def FIELDS(self):
            return self.getToken(fugue_sqlParser.FIELDS, 0)

        def FILEFORMAT(self):
            return self.getToken(fugue_sqlParser.FILEFORMAT, 0)

        def FIRST(self):
            return self.getToken(fugue_sqlParser.FIRST, 0)

        def FOLLOWING(self):
            return self.getToken(fugue_sqlParser.FOLLOWING, 0)

        def FOR(self):
            return self.getToken(fugue_sqlParser.FOR, 0)

        def FOREIGN(self):
            return self.getToken(fugue_sqlParser.FOREIGN, 0)

        def FORMAT(self):
            return self.getToken(fugue_sqlParser.FORMAT, 0)

        def FORMATTED(self):
            return self.getToken(fugue_sqlParser.FORMATTED, 0)

        def FROM(self):
            return self.getToken(fugue_sqlParser.FROM, 0)

        def FUNCTION(self):
            return self.getToken(fugue_sqlParser.FUNCTION, 0)

        def FUNCTIONS(self):
            return self.getToken(fugue_sqlParser.FUNCTIONS, 0)

        def GLOBAL(self):
            return self.getToken(fugue_sqlParser.GLOBAL, 0)

        def GRANT(self):
            return self.getToken(fugue_sqlParser.GRANT, 0)

        def GROUP(self):
            return self.getToken(fugue_sqlParser.GROUP, 0)

        def GROUPING(self):
            return self.getToken(fugue_sqlParser.GROUPING, 0)

        def HAVING(self):
            return self.getToken(fugue_sqlParser.HAVING, 0)

        def HOUR(self):
            return self.getToken(fugue_sqlParser.HOUR, 0)

        def IF(self):
            return self.getToken(fugue_sqlParser.IF, 0)

        def IGNORE(self):
            return self.getToken(fugue_sqlParser.IGNORE, 0)

        def IMPORT(self):
            return self.getToken(fugue_sqlParser.IMPORT, 0)

        def IN(self):
            return self.getToken(fugue_sqlParser.IN, 0)

        def INDEX(self):
            return self.getToken(fugue_sqlParser.INDEX, 0)

        def INDEXES(self):
            return self.getToken(fugue_sqlParser.INDEXES, 0)

        def INPATH(self):
            return self.getToken(fugue_sqlParser.INPATH, 0)

        def INPUTFORMAT(self):
            return self.getToken(fugue_sqlParser.INPUTFORMAT, 0)

        def INSERT(self):
            return self.getToken(fugue_sqlParser.INSERT, 0)

        def INTERVAL(self):
            return self.getToken(fugue_sqlParser.INTERVAL, 0)

        def INTO(self):
            return self.getToken(fugue_sqlParser.INTO, 0)

        def IS(self):
            return self.getToken(fugue_sqlParser.IS, 0)

        def ITEMS(self):
            return self.getToken(fugue_sqlParser.ITEMS, 0)

        def KEYS(self):
            return self.getToken(fugue_sqlParser.KEYS, 0)

        def LAST(self):
            return self.getToken(fugue_sqlParser.LAST, 0)

        def LATERAL(self):
            return self.getToken(fugue_sqlParser.LATERAL, 0)

        def LAZY(self):
            return self.getToken(fugue_sqlParser.LAZY, 0)

        def LEADING(self):
            return self.getToken(fugue_sqlParser.LEADING, 0)

        def LIKE(self):
            return self.getToken(fugue_sqlParser.LIKE, 0)

        def LIMIT(self):
            return self.getToken(fugue_sqlParser.LIMIT, 0)

        def LINES(self):
            return self.getToken(fugue_sqlParser.LINES, 0)

        def LIST(self):
            return self.getToken(fugue_sqlParser.LIST, 0)

        def LOAD(self):
            return self.getToken(fugue_sqlParser.LOAD, 0)

        def LOCAL(self):
            return self.getToken(fugue_sqlParser.LOCAL, 0)

        def LOCATION(self):
            return self.getToken(fugue_sqlParser.LOCATION, 0)

        def LOCK(self):
            return self.getToken(fugue_sqlParser.LOCK, 0)

        def LOCKS(self):
            return self.getToken(fugue_sqlParser.LOCKS, 0)

        def LOGICAL(self):
            return self.getToken(fugue_sqlParser.LOGICAL, 0)

        def MACRO(self):
            return self.getToken(fugue_sqlParser.MACRO, 0)

        def MAP(self):
            return self.getToken(fugue_sqlParser.MAP, 0)

        def MATCHED(self):
            return self.getToken(fugue_sqlParser.MATCHED, 0)

        def MERGE(self):
            return self.getToken(fugue_sqlParser.MERGE, 0)

        def MINUTE(self):
            return self.getToken(fugue_sqlParser.MINUTE, 0)

        def MONTH(self):
            return self.getToken(fugue_sqlParser.MONTH, 0)

        def MSCK(self):
            return self.getToken(fugue_sqlParser.MSCK, 0)

        def NAMESPACE(self):
            return self.getToken(fugue_sqlParser.NAMESPACE, 0)

        def NAMESPACES(self):
            return self.getToken(fugue_sqlParser.NAMESPACES, 0)

        def NO(self):
            return self.getToken(fugue_sqlParser.NO, 0)

        def NOT(self):
            return self.getToken(fugue_sqlParser.NOT, 0)

        def THENULL(self):
            return self.getToken(fugue_sqlParser.THENULL, 0)

        def THENULLS(self):
            return self.getToken(fugue_sqlParser.THENULLS, 0)

        def OF(self):
            return self.getToken(fugue_sqlParser.OF, 0)

        def ONLY(self):
            return self.getToken(fugue_sqlParser.ONLY, 0)

        def OPTION(self):
            return self.getToken(fugue_sqlParser.OPTION, 0)

        def OPTIONS(self):
            return self.getToken(fugue_sqlParser.OPTIONS, 0)

        def OR(self):
            return self.getToken(fugue_sqlParser.OR, 0)

        def ORDER(self):
            return self.getToken(fugue_sqlParser.ORDER, 0)

        def OUT(self):
            return self.getToken(fugue_sqlParser.OUT, 0)

        def OUTER(self):
            return self.getToken(fugue_sqlParser.OUTER, 0)

        def OUTPUTFORMAT(self):
            return self.getToken(fugue_sqlParser.OUTPUTFORMAT, 0)

        def OVER(self):
            return self.getToken(fugue_sqlParser.OVER, 0)

        def OVERLAPS(self):
            return self.getToken(fugue_sqlParser.OVERLAPS, 0)

        def OVERLAY(self):
            return self.getToken(fugue_sqlParser.OVERLAY, 0)

        def OVERWRITE(self):
            return self.getToken(fugue_sqlParser.OVERWRITE, 0)

        def PARTITION(self):
            return self.getToken(fugue_sqlParser.PARTITION, 0)

        def PARTITIONED(self):
            return self.getToken(fugue_sqlParser.PARTITIONED, 0)

        def PARTITIONS(self):
            return self.getToken(fugue_sqlParser.PARTITIONS, 0)

        def PERCENTLIT(self):
            return self.getToken(fugue_sqlParser.PERCENTLIT, 0)

        def PIVOT(self):
            return self.getToken(fugue_sqlParser.PIVOT, 0)

        def PLACING(self):
            return self.getToken(fugue_sqlParser.PLACING, 0)

        def POSITION(self):
            return self.getToken(fugue_sqlParser.POSITION, 0)

        def PRECEDING(self):
            return self.getToken(fugue_sqlParser.PRECEDING, 0)

        def PRIMARY(self):
            return self.getToken(fugue_sqlParser.PRIMARY, 0)

        def PRINCIPALS(self):
            return self.getToken(fugue_sqlParser.PRINCIPALS, 0)

        def PROPERTIES(self):
            return self.getToken(fugue_sqlParser.PROPERTIES, 0)

        def PURGE(self):
            return self.getToken(fugue_sqlParser.PURGE, 0)

        def QUERY(self):
            return self.getToken(fugue_sqlParser.QUERY, 0)

        def RANGE(self):
            return self.getToken(fugue_sqlParser.RANGE, 0)

        def RECORDREADER(self):
            return self.getToken(fugue_sqlParser.RECORDREADER, 0)

        def RECORDWRITER(self):
            return self.getToken(fugue_sqlParser.RECORDWRITER, 0)

        def RECOVER(self):
            return self.getToken(fugue_sqlParser.RECOVER, 0)

        def REDUCE(self):
            return self.getToken(fugue_sqlParser.REDUCE, 0)

        def REFERENCES(self):
            return self.getToken(fugue_sqlParser.REFERENCES, 0)

        def REFRESH(self):
            return self.getToken(fugue_sqlParser.REFRESH, 0)

        def RENAME(self):
            return self.getToken(fugue_sqlParser.RENAME, 0)

        def REPAIR(self):
            return self.getToken(fugue_sqlParser.REPAIR, 0)

        def REPLACE(self):
            return self.getToken(fugue_sqlParser.REPLACE, 0)

        def RESET(self):
            return self.getToken(fugue_sqlParser.RESET, 0)

        def RESTRICT(self):
            return self.getToken(fugue_sqlParser.RESTRICT, 0)

        def REVOKE(self):
            return self.getToken(fugue_sqlParser.REVOKE, 0)

        def RLIKE(self):
            return self.getToken(fugue_sqlParser.RLIKE, 0)

        def ROLE(self):
            return self.getToken(fugue_sqlParser.ROLE, 0)

        def ROLES(self):
            return self.getToken(fugue_sqlParser.ROLES, 0)

        def ROLLBACK(self):
            return self.getToken(fugue_sqlParser.ROLLBACK, 0)

        def ROLLUP(self):
            return self.getToken(fugue_sqlParser.ROLLUP, 0)

        def ROW(self):
            return self.getToken(fugue_sqlParser.ROW, 0)

        def ROWS(self):
            return self.getToken(fugue_sqlParser.ROWS, 0)

        def SCHEMA(self):
            return self.getToken(fugue_sqlParser.SCHEMA, 0)

        def SECOND(self):
            return self.getToken(fugue_sqlParser.SECOND, 0)

        def SELECT(self):
            return self.getToken(fugue_sqlParser.SELECT, 0)

        def SEPARATED(self):
            return self.getToken(fugue_sqlParser.SEPARATED, 0)

        def SERDE(self):
            return self.getToken(fugue_sqlParser.SERDE, 0)

        def SERDEPROPERTIES(self):
            return self.getToken(fugue_sqlParser.SERDEPROPERTIES, 0)

        def SESSION_USER(self):
            return self.getToken(fugue_sqlParser.SESSION_USER, 0)

        def SET(self):
            return self.getToken(fugue_sqlParser.SET, 0)

        def SETS(self):
            return self.getToken(fugue_sqlParser.SETS, 0)

        def SHOW(self):
            return self.getToken(fugue_sqlParser.SHOW, 0)

        def SKEWED(self):
            return self.getToken(fugue_sqlParser.SKEWED, 0)

        def SOME(self):
            return self.getToken(fugue_sqlParser.SOME, 0)

        def SORT(self):
            return self.getToken(fugue_sqlParser.SORT, 0)

        def SORTED(self):
            return self.getToken(fugue_sqlParser.SORTED, 0)

        def START(self):
            return self.getToken(fugue_sqlParser.START, 0)

        def STATISTICS(self):
            return self.getToken(fugue_sqlParser.STATISTICS, 0)

        def STORED(self):
            return self.getToken(fugue_sqlParser.STORED, 0)

        def STRATIFY(self):
            return self.getToken(fugue_sqlParser.STRATIFY, 0)

        def STRUCT(self):
            return self.getToken(fugue_sqlParser.STRUCT, 0)

        def SUBSTR(self):
            return self.getToken(fugue_sqlParser.SUBSTR, 0)

        def SUBSTRING(self):
            return self.getToken(fugue_sqlParser.SUBSTRING, 0)

        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)

        def TABLES(self):
            return self.getToken(fugue_sqlParser.TABLES, 0)

        def TABLESAMPLE(self):
            return self.getToken(fugue_sqlParser.TABLESAMPLE, 0)

        def TBLPROPERTIES(self):
            return self.getToken(fugue_sqlParser.TBLPROPERTIES, 0)

        def TEMPORARY(self):
            return self.getToken(fugue_sqlParser.TEMPORARY, 0)

        def TERMINATED(self):
            return self.getToken(fugue_sqlParser.TERMINATED, 0)

        def THEN(self):
            return self.getToken(fugue_sqlParser.THEN, 0)

        def TO(self):
            return self.getToken(fugue_sqlParser.TO, 0)

        def TOUCH(self):
            return self.getToken(fugue_sqlParser.TOUCH, 0)

        def TRAILING(self):
            return self.getToken(fugue_sqlParser.TRAILING, 0)

        def TRANSACTION(self):
            return self.getToken(fugue_sqlParser.TRANSACTION, 0)

        def TRANSACTIONS(self):
            return self.getToken(fugue_sqlParser.TRANSACTIONS, 0)

        def TRANSFORM(self):
            return self.getToken(fugue_sqlParser.TRANSFORM, 0)

        def TRIM(self):
            return self.getToken(fugue_sqlParser.TRIM, 0)

        def TRUE(self):
            return self.getToken(fugue_sqlParser.TRUE, 0)

        def TRUNCATE(self):
            return self.getToken(fugue_sqlParser.TRUNCATE, 0)

        def TYPE(self):
            return self.getToken(fugue_sqlParser.TYPE, 0)

        def UNARCHIVE(self):
            return self.getToken(fugue_sqlParser.UNARCHIVE, 0)

        def UNBOUNDED(self):
            return self.getToken(fugue_sqlParser.UNBOUNDED, 0)

        def UNCACHE(self):
            return self.getToken(fugue_sqlParser.UNCACHE, 0)

        def UNIQUE(self):
            return self.getToken(fugue_sqlParser.UNIQUE, 0)

        def UNKNOWN(self):
            return self.getToken(fugue_sqlParser.UNKNOWN, 0)

        def UNLOCK(self):
            return self.getToken(fugue_sqlParser.UNLOCK, 0)

        def UNSET(self):
            return self.getToken(fugue_sqlParser.UNSET, 0)

        def UPDATE(self):
            return self.getToken(fugue_sqlParser.UPDATE, 0)

        def USE(self):
            return self.getToken(fugue_sqlParser.USE, 0)

        def USER(self):
            return self.getToken(fugue_sqlParser.USER, 0)

        def VALUES(self):
            return self.getToken(fugue_sqlParser.VALUES, 0)

        def VIEW(self):
            return self.getToken(fugue_sqlParser.VIEW, 0)

        def VIEWS(self):
            return self.getToken(fugue_sqlParser.VIEWS, 0)

        def WHEN(self):
            return self.getToken(fugue_sqlParser.WHEN, 0)

        def WHERE(self):
            return self.getToken(fugue_sqlParser.WHERE, 0)

        def WINDOW(self):
            return self.getToken(fugue_sqlParser.WINDOW, 0)

        def WITH(self):
            return self.getToken(fugue_sqlParser.WITH, 0)

        def YEAR(self):
            return self.getToken(fugue_sqlParser.YEAR, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_nonReserved

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNonReserved" ):
                return visitor.visitNonReserved(self)
            else:
                return visitor.visitChildren(self)




    def nonReserved(self):

        localctx = fugue_sqlParser.NonReservedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 426, self.RULE_nonReserved)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3831
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << fugue_sqlParser.ADD) | (1 << fugue_sqlParser.AFTER) | (1 << fugue_sqlParser.ALL) | (1 << fugue_sqlParser.ALTER) | (1 << fugue_sqlParser.ANALYZE) | (1 << fugue_sqlParser.AND) | (1 << fugue_sqlParser.ANY) | (1 << fugue_sqlParser.ARCHIVE) | (1 << fugue_sqlParser.ARRAY) | (1 << fugue_sqlParser.AS))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (fugue_sqlParser.ASC - 64)) | (1 << (fugue_sqlParser.AT - 64)) | (1 << (fugue_sqlParser.AUTHORIZATION - 64)) | (1 << (fugue_sqlParser.BETWEEN - 64)) | (1 << (fugue_sqlParser.BOTH - 64)) | (1 << (fugue_sqlParser.BUCKET - 64)) | (1 << (fugue_sqlParser.BUCKETS - 64)) | (1 << (fugue_sqlParser.BY - 64)) | (1 << (fugue_sqlParser.CACHE - 64)) | (1 << (fugue_sqlParser.CASCADE - 64)) | (1 << (fugue_sqlParser.CASE - 64)) | (1 << (fugue_sqlParser.CAST - 64)) | (1 << (fugue_sqlParser.CHANGE - 64)) | (1 << (fugue_sqlParser.CHECK - 64)) | (1 << (fugue_sqlParser.CLEAR - 64)) | (1 << (fugue_sqlParser.CLUSTER - 64)) | (1 << (fugue_sqlParser.CLUSTERED - 64)) | (1 << (fugue_sqlParser.CODEGEN - 64)) | (1 << (fugue_sqlParser.COLLATE - 64)) | (1 << (fugue_sqlParser.COLLECTION - 64)) | (1 << (fugue_sqlParser.COLUMN - 64)) | (1 << (fugue_sqlParser.COLUMNS - 64)) | (1 << (fugue_sqlParser.COMMENT - 64)) | (1 << (fugue_sqlParser.COMMIT - 64)) | (1 << (fugue_sqlParser.COMPACT - 64)) | (1 << (fugue_sqlParser.COMPACTIONS - 64)) | (1 << (fugue_sqlParser.COMPUTE - 64)) | (1 << (fugue_sqlParser.CONCATENATE - 64)) | (1 << (fugue_sqlParser.CONSTRAINT - 64)) | (1 << (fugue_sqlParser.COST - 64)) | (1 << (fugue_sqlParser.CREATE - 64)) | (1 << (fugue_sqlParser.CUBE - 64)) | (1 << (fugue_sqlParser.CURRENT - 64)) | (1 << (fugue_sqlParser.CURRENT_DATE - 64)) | (1 << (fugue_sqlParser.CURRENT_TIME - 64)) | (1 << (fugue_sqlParser.CURRENT_TIMESTAMP - 64)) | (1 << (fugue_sqlParser.CURRENT_USER - 64)) | (1 << (fugue_sqlParser.DATA - 64)) | (1 << (fugue_sqlParser.DATABASE - 64)) | (1 << (fugue_sqlParser.DATABASES - 64)) | (1 << (fugue_sqlParser.DAY - 64)) | (1 << (fugue_sqlParser.DBPROPERTIES - 64)) | (1 << (fugue_sqlParser.DEFINED - 64)) | (1 << (fugue_sqlParser.DELETE - 64)) | (1 << (fugue_sqlParser.DELIMITED - 64)) | (1 << (fugue_sqlParser.DESC - 64)) | (1 << (fugue_sqlParser.DESCRIBE - 64)) | (1 << (fugue_sqlParser.DFS - 64)) | (1 << (fugue_sqlParser.DIRECTORIES - 64)) | (1 << (fugue_sqlParser.DIRECTORY - 64)) | (1 << (fugue_sqlParser.DISTINCT - 64)) | (1 << (fugue_sqlParser.DISTRIBUTE - 64)) | (1 << (fugue_sqlParser.DROP - 64)) | (1 << (fugue_sqlParser.ELSE - 64)) | (1 << (fugue_sqlParser.END - 64)) | (1 << (fugue_sqlParser.ESCAPE - 64)) | (1 << (fugue_sqlParser.ESCAPED - 64)) | (1 << (fugue_sqlParser.EXCHANGE - 64)) | (1 << (fugue_sqlParser.EXISTS - 64)) | (1 << (fugue_sqlParser.EXPLAIN - 64)) | (1 << (fugue_sqlParser.EXPORT - 64)) | (1 << (fugue_sqlParser.EXTENDED - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (fugue_sqlParser.EXTERNAL - 128)) | (1 << (fugue_sqlParser.EXTRACT - 128)) | (1 << (fugue_sqlParser.FALSE - 128)) | (1 << (fugue_sqlParser.FETCH - 128)) | (1 << (fugue_sqlParser.FIELDS - 128)) | (1 << (fugue_sqlParser.FILTER - 128)) | (1 << (fugue_sqlParser.FILEFORMAT - 128)) | (1 << (fugue_sqlParser.FIRST - 128)) | (1 << (fugue_sqlParser.FOLLOWING - 128)) | (1 << (fugue_sqlParser.FOR - 128)) | (1 << (fugue_sqlParser.FOREIGN - 128)) | (1 << (fugue_sqlParser.FORMAT - 128)) | (1 << (fugue_sqlParser.FORMATTED - 128)) | (1 << (fugue_sqlParser.FROM - 128)) | (1 << (fugue_sqlParser.FUNCTION - 128)) | (1 << (fugue_sqlParser.FUNCTIONS - 128)) | (1 << (fugue_sqlParser.GLOBAL - 128)) | (1 << (fugue_sqlParser.GRANT - 128)) | (1 << (fugue_sqlParser.GROUP - 128)) | (1 << (fugue_sqlParser.GROUPING - 128)) | (1 << (fugue_sqlParser.HAVING - 128)) | (1 << (fugue_sqlParser.HOUR - 128)) | (1 << (fugue_sqlParser.IF - 128)) | (1 << (fugue_sqlParser.IGNORE - 128)) | (1 << (fugue_sqlParser.IMPORT - 128)) | (1 << (fugue_sqlParser.IN - 128)) | (1 << (fugue_sqlParser.INDEX - 128)) | (1 << (fugue_sqlParser.INDEXES - 128)) | (1 << (fugue_sqlParser.INPATH - 128)) | (1 << (fugue_sqlParser.INPUTFORMAT - 128)) | (1 << (fugue_sqlParser.INSERT - 128)) | (1 << (fugue_sqlParser.INTERVAL - 128)) | (1 << (fugue_sqlParser.INTO - 128)) | (1 << (fugue_sqlParser.IS - 128)) | (1 << (fugue_sqlParser.ITEMS - 128)) | (1 << (fugue_sqlParser.KEYS - 128)) | (1 << (fugue_sqlParser.LAST - 128)) | (1 << (fugue_sqlParser.LATERAL - 128)) | (1 << (fugue_sqlParser.LAZY - 128)) | (1 << (fugue_sqlParser.LEADING - 128)) | (1 << (fugue_sqlParser.LIKE - 128)) | (1 << (fugue_sqlParser.LIMIT - 128)) | (1 << (fugue_sqlParser.LINES - 128)) | (1 << (fugue_sqlParser.LIST - 128)) | (1 << (fugue_sqlParser.LOAD - 128)) | (1 << (fugue_sqlParser.LOCAL - 128)) | (1 << (fugue_sqlParser.LOCATION - 128)) | (1 << (fugue_sqlParser.LOCK - 128)) | (1 << (fugue_sqlParser.LOCKS - 128)) | (1 << (fugue_sqlParser.LOGICAL - 128)) | (1 << (fugue_sqlParser.MACRO - 128)) | (1 << (fugue_sqlParser.MAP - 128)) | (1 << (fugue_sqlParser.MATCHED - 128)) | (1 << (fugue_sqlParser.MERGE - 128)) | (1 << (fugue_sqlParser.MINUTE - 128)) | (1 << (fugue_sqlParser.MONTH - 128)) | (1 << (fugue_sqlParser.MSCK - 128)) | (1 << (fugue_sqlParser.NAMESPACE - 128)) | (1 << (fugue_sqlParser.NAMESPACES - 128)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (fugue_sqlParser.NO - 193)) | (1 << (fugue_sqlParser.NOT - 193)) | (1 << (fugue_sqlParser.THENULL - 193)) | (1 << (fugue_sqlParser.THENULLS - 193)) | (1 << (fugue_sqlParser.OF - 193)) | (1 << (fugue_sqlParser.ONLY - 193)) | (1 << (fugue_sqlParser.OPTION - 193)) | (1 << (fugue_sqlParser.OPTIONS - 193)) | (1 << (fugue_sqlParser.OR - 193)) | (1 << (fugue_sqlParser.ORDER - 193)) | (1 << (fugue_sqlParser.OUT - 193)) | (1 << (fugue_sqlParser.OUTER - 193)) | (1 << (fugue_sqlParser.OUTPUTFORMAT - 193)) | (1 << (fugue_sqlParser.OVER - 193)) | (1 << (fugue_sqlParser.OVERLAPS - 193)) | (1 << (fugue_sqlParser.OVERLAY - 193)) | (1 << (fugue_sqlParser.OVERWRITE - 193)) | (1 << (fugue_sqlParser.PARTITION - 193)) | (1 << (fugue_sqlParser.PARTITIONED - 193)) | (1 << (fugue_sqlParser.PARTITIONS - 193)) | (1 << (fugue_sqlParser.PERCENTLIT - 193)) | (1 << (fugue_sqlParser.PIVOT - 193)) | (1 << (fugue_sqlParser.PLACING - 193)) | (1 << (fugue_sqlParser.POSITION - 193)) | (1 << (fugue_sqlParser.PRECEDING - 193)) | (1 << (fugue_sqlParser.PRIMARY - 193)) | (1 << (fugue_sqlParser.PRINCIPALS - 193)) | (1 << (fugue_sqlParser.PROPERTIES - 193)) | (1 << (fugue_sqlParser.PURGE - 193)) | (1 << (fugue_sqlParser.QUERY - 193)) | (1 << (fugue_sqlParser.RANGE - 193)) | (1 << (fugue_sqlParser.RECORDREADER - 193)) | (1 << (fugue_sqlParser.RECORDWRITER - 193)) | (1 << (fugue_sqlParser.RECOVER - 193)) | (1 << (fugue_sqlParser.REDUCE - 193)) | (1 << (fugue_sqlParser.REFERENCES - 193)) | (1 << (fugue_sqlParser.REFRESH - 193)) | (1 << (fugue_sqlParser.RENAME - 193)) | (1 << (fugue_sqlParser.REPAIR - 193)) | (1 << (fugue_sqlParser.REPLACE - 193)) | (1 << (fugue_sqlParser.RESET - 193)) | (1 << (fugue_sqlParser.RESTRICT - 193)) | (1 << (fugue_sqlParser.REVOKE - 193)) | (1 << (fugue_sqlParser.RLIKE - 193)) | (1 << (fugue_sqlParser.ROLE - 193)) | (1 << (fugue_sqlParser.ROLES - 193)) | (1 << (fugue_sqlParser.ROLLBACK - 193)) | (1 << (fugue_sqlParser.ROLLUP - 193)) | (1 << (fugue_sqlParser.ROW - 193)) | (1 << (fugue_sqlParser.ROWS - 193)) | (1 << (fugue_sqlParser.SCHEMA - 193)) | (1 << (fugue_sqlParser.SECOND - 193)) | (1 << (fugue_sqlParser.SELECT - 193)) | (1 << (fugue_sqlParser.SEPARATED - 193)) | (1 << (fugue_sqlParser.SERDE - 193)) | (1 << (fugue_sqlParser.SERDEPROPERTIES - 193)) | (1 << (fugue_sqlParser.SESSION_USER - 193)) | (1 << (fugue_sqlParser.SET - 193)) | (1 << (fugue_sqlParser.SETS - 193)) | (1 << (fugue_sqlParser.SHOW - 193)))) != 0) or ((((_la - 257)) & ~0x3f) == 0 and ((1 << (_la - 257)) & ((1 << (fugue_sqlParser.SKEWED - 257)) | (1 << (fugue_sqlParser.SOME - 257)) | (1 << (fugue_sqlParser.SORT - 257)) | (1 << (fugue_sqlParser.SORTED - 257)) | (1 << (fugue_sqlParser.START - 257)) | (1 << (fugue_sqlParser.STATISTICS - 257)) | (1 << (fugue_sqlParser.STORED - 257)) | (1 << (fugue_sqlParser.STRATIFY - 257)) | (1 << (fugue_sqlParser.STRUCT - 257)) | (1 << (fugue_sqlParser.SUBSTR - 257)) | (1 << (fugue_sqlParser.SUBSTRING - 257)) | (1 << (fugue_sqlParser.TABLE - 257)) | (1 << (fugue_sqlParser.TABLES - 257)) | (1 << (fugue_sqlParser.TABLESAMPLE - 257)) | (1 << (fugue_sqlParser.TBLPROPERTIES - 257)) | (1 << (fugue_sqlParser.TEMPORARY - 257)) | (1 << (fugue_sqlParser.TERMINATED - 257)) | (1 << (fugue_sqlParser.THEN - 257)) | (1 << (fugue_sqlParser.TO - 257)) | (1 << (fugue_sqlParser.TOUCH - 257)) | (1 << (fugue_sqlParser.TRAILING - 257)) | (1 << (fugue_sqlParser.TRANSACTION - 257)) | (1 << (fugue_sqlParser.TRANSACTIONS - 257)) | (1 << (fugue_sqlParser.TRANSFORM - 257)) | (1 << (fugue_sqlParser.TRIM - 257)) | (1 << (fugue_sqlParser.TRUE - 257)) | (1 << (fugue_sqlParser.TRUNCATE - 257)) | (1 << (fugue_sqlParser.TYPE - 257)) | (1 << (fugue_sqlParser.UNARCHIVE - 257)) | (1 << (fugue_sqlParser.UNBOUNDED - 257)) | (1 << (fugue_sqlParser.UNCACHE - 257)) | (1 << (fugue_sqlParser.UNIQUE - 257)) | (1 << (fugue_sqlParser.UNKNOWN - 257)) | (1 << (fugue_sqlParser.UNLOCK - 257)) | (1 << (fugue_sqlParser.UNSET - 257)) | (1 << (fugue_sqlParser.UPDATE - 257)) | (1 << (fugue_sqlParser.USE - 257)) | (1 << (fugue_sqlParser.USER - 257)) | (1 << (fugue_sqlParser.VALUES - 257)) | (1 << (fugue_sqlParser.VIEW - 257)) | (1 << (fugue_sqlParser.VIEWS - 257)) | (1 << (fugue_sqlParser.WHEN - 257)) | (1 << (fugue_sqlParser.WHERE - 257)) | (1 << (fugue_sqlParser.WINDOW - 257)) | (1 << (fugue_sqlParser.WITH - 257)) | (1 << (fugue_sqlParser.YEAR - 257)) | (1 << (fugue_sqlParser.DIV - 257)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[47] = self.fuguePartitionNum_sempred
        self._predicates[115] = self.queryTerm_sempred
        self._predicates[170] = self.booleanExpression_sempred
        self._predicates[172] = self.valueExpression_sempred
        self._predicates[173] = self.primaryExpression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def fuguePartitionNum_sempred(self, localctx:FuguePartitionNumContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 1)
         

    def queryTerm_sempred(self, localctx:QueryTermContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 1)
         

    def booleanExpression_sempred(self, localctx:BooleanExpressionContext, predIndex:int):
            if predIndex == 4:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 1)
         

    def valueExpression_sempred(self, localctx:ValueExpressionContext, predIndex:int):
            if predIndex == 6:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 1)
         

    def primaryExpression_sempred(self, localctx:PrimaryExpressionContext, predIndex:int):
            if predIndex == 12:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 6)
         




