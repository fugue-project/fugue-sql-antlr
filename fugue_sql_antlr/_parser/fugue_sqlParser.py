# Generated from fugue_sql.g4 by ANTLR 4.11.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,340,3853,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,
        2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,2,142,
        7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
        2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,
        7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
        2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,
        7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,
        2,170,7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,
        7,175,2,176,7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,
        2,181,7,181,2,182,7,182,2,183,7,183,2,184,7,184,2,185,7,185,2,186,
        7,186,2,187,7,187,2,188,7,188,2,189,7,189,2,190,7,190,2,191,7,191,
        2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,2,196,7,196,2,197,
        7,197,2,198,7,198,2,199,7,199,2,200,7,200,2,201,7,201,2,202,7,202,
        2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,2,207,7,207,2,208,
        7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,7,212,2,213,7,213,
        1,0,4,0,430,8,0,11,0,12,0,431,1,0,1,0,1,1,1,1,1,1,1,2,1,2,1,2,1,
        2,1,2,1,2,3,2,445,8,2,1,3,3,3,448,8,3,1,3,1,3,3,3,452,8,3,1,3,3,
        3,455,8,3,1,3,3,3,458,8,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,
        4,1,4,1,4,1,4,1,4,3,4,474,8,4,1,5,1,5,3,5,478,8,5,1,5,3,5,481,8,
        5,1,5,1,5,1,5,3,5,486,8,5,1,6,1,6,3,6,490,8,6,1,6,3,6,493,8,6,1,
        6,1,6,1,7,1,7,1,7,1,7,3,7,501,8,7,1,7,3,7,504,8,7,1,7,1,7,3,7,508,
        8,7,1,7,3,7,511,8,7,1,7,1,7,3,7,515,8,7,1,8,1,8,1,8,1,8,1,8,3,8,
        522,8,8,1,9,1,9,1,9,1,9,1,9,3,9,529,8,9,1,10,1,10,1,10,1,10,1,10,
        3,10,536,8,10,1,10,1,10,3,10,540,8,10,1,11,1,11,1,11,1,11,1,11,1,
        11,1,11,3,11,549,8,11,1,11,1,11,3,11,553,8,11,1,12,1,12,1,12,1,12,
        1,12,3,12,560,8,12,1,13,1,13,3,13,564,8,13,1,13,1,13,1,13,3,13,569,
        8,13,1,13,1,13,3,13,573,8,13,1,13,1,13,1,13,3,13,578,8,13,1,14,1,
        14,1,14,3,14,583,8,14,1,14,1,14,3,14,587,8,14,1,14,1,14,1,14,3,14,
        592,8,14,1,14,1,14,3,14,596,8,14,1,15,1,15,1,15,3,15,601,8,15,1,
        15,1,15,3,15,605,8,15,1,15,1,15,3,15,609,8,15,1,16,1,16,1,16,1,17,
        1,17,3,17,616,8,17,1,17,1,17,1,17,1,17,1,18,1,18,3,18,624,8,18,1,
        18,1,18,3,18,628,8,18,1,18,1,18,3,18,632,8,18,1,19,1,19,3,19,636,
        8,19,1,19,3,19,639,8,19,1,19,1,19,1,19,3,19,644,8,19,1,20,1,20,1,
        20,1,20,1,20,3,20,651,8,20,1,20,3,20,654,8,20,1,20,1,20,3,20,658,
        8,20,1,20,1,20,3,20,662,8,20,1,20,3,20,665,8,20,1,20,1,20,3,20,669,
        8,20,3,20,671,8,20,1,21,1,21,3,21,675,8,21,1,21,3,21,678,8,21,1,
        21,1,21,3,21,682,8,21,1,21,3,21,685,8,21,1,21,1,21,3,21,689,8,21,
        1,22,1,22,3,22,693,8,22,1,22,3,22,696,8,22,1,22,1,22,1,22,3,22,701,
        8,22,1,22,1,22,3,22,705,8,22,1,23,3,23,708,8,23,1,23,1,23,3,23,712,
        8,23,1,23,1,23,1,23,3,23,717,8,23,1,24,1,24,1,24,3,24,722,8,24,1,
        25,1,25,1,26,1,26,3,26,728,8,26,1,27,1,27,1,28,1,28,1,29,1,29,1,
        30,3,30,737,8,30,1,30,1,30,1,30,3,30,742,8,30,1,30,3,30,745,8,30,
        1,30,3,30,748,8,30,1,30,3,30,751,8,30,1,30,1,30,3,30,755,8,30,1,
        30,3,30,758,8,30,1,30,3,30,761,8,30,1,30,3,30,764,8,30,1,30,1,30,
        1,30,3,30,769,8,30,1,30,3,30,772,8,30,1,30,3,30,775,8,30,1,30,3,
        30,778,8,30,3,30,780,8,30,1,31,1,31,1,32,1,32,1,32,1,32,3,32,788,
        8,32,1,32,1,32,3,32,792,8,32,1,32,1,32,1,32,3,32,797,8,32,3,32,799,
        8,32,1,33,1,33,1,34,1,34,1,34,5,34,806,8,34,10,34,12,34,809,9,34,
        1,34,1,34,1,34,5,34,814,8,34,10,34,12,34,817,9,34,3,34,819,8,34,
        1,35,1,35,1,35,1,35,1,36,1,36,3,36,827,8,36,1,36,1,36,1,36,1,36,
        3,36,833,8,36,1,37,1,37,1,37,3,37,838,8,37,1,37,1,37,1,38,1,38,1,
        38,1,39,1,39,1,40,1,40,1,40,3,40,850,8,40,1,40,1,40,3,40,854,8,40,
        1,41,1,41,1,41,3,41,859,8,41,1,41,1,41,3,41,863,8,41,1,42,1,42,1,
        42,3,42,868,8,42,1,42,1,42,1,42,5,42,873,8,42,10,42,12,42,876,9,
        42,1,43,1,43,1,43,3,43,881,8,43,1,43,1,43,3,43,885,8,43,1,44,1,44,
        1,44,1,44,1,44,1,44,1,44,1,44,3,44,895,8,44,1,45,3,45,898,8,45,1,
        45,1,45,1,45,1,45,3,45,904,8,45,1,45,1,45,3,45,908,8,45,1,45,3,45,
        911,8,45,1,45,1,45,1,45,1,45,1,45,3,45,918,8,45,3,45,920,8,45,1,
        46,1,46,1,47,1,47,1,47,1,47,1,47,1,47,3,47,930,8,47,1,47,1,47,1,
        47,5,47,935,8,47,10,47,12,47,938,9,47,1,48,3,48,941,8,48,1,48,1,
        48,3,48,945,8,48,1,48,1,48,1,48,3,48,950,8,48,1,49,1,49,1,49,3,49,
        955,8,49,1,49,3,49,958,8,49,1,50,1,50,1,50,5,50,963,8,50,10,50,12,
        50,966,9,50,1,51,1,51,1,51,5,51,971,8,51,10,51,12,51,974,9,51,1,
        52,1,52,3,52,978,8,52,1,53,1,53,1,54,1,54,1,54,5,54,985,8,54,10,
        54,12,54,988,9,54,1,55,1,55,1,55,5,55,993,8,55,10,55,12,55,996,9,
        55,1,55,5,55,999,8,55,10,55,12,55,1002,9,55,1,56,1,56,3,56,1006,
        8,56,1,57,1,57,1,57,1,57,5,57,1012,8,57,10,57,12,57,1015,9,57,1,
        57,1,57,3,57,1019,8,57,1,58,1,58,1,58,5,58,1024,8,58,10,58,12,58,
        1027,9,58,1,59,1,59,1,59,1,59,1,60,1,60,1,61,1,61,1,61,1,61,1,61,
        1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,3,61,1050,8,61,
        1,62,1,62,1,62,1,62,1,63,1,63,1,64,1,64,1,64,3,64,1061,8,64,1,64,
        1,64,1,64,1,64,1,64,1,64,1,64,3,64,1070,8,64,1,64,1,64,1,64,1,64,
        3,64,1076,8,64,1,65,1,65,1,65,5,65,1081,8,65,10,65,12,65,1084,9,
        65,1,66,1,66,1,66,1,66,1,67,1,67,3,67,1092,8,67,1,68,1,68,1,68,1,
        68,5,68,1098,8,68,10,68,12,68,1101,9,68,1,68,3,68,1104,8,68,1,68,
        1,68,1,68,1,68,3,68,1110,8,68,1,69,1,69,1,69,1,69,1,69,1,69,3,69,
        1118,8,69,1,70,1,70,1,71,1,71,1,72,1,72,1,73,1,73,1,74,1,74,1,75,
        1,75,5,75,1132,8,75,10,75,12,75,1135,9,75,1,75,1,75,1,76,1,76,1,
        76,1,77,1,77,1,77,1,78,1,78,1,78,1,79,1,79,1,79,1,80,1,80,1,80,1,
        81,1,81,1,81,1,82,1,82,3,82,1159,8,82,1,82,1,82,1,82,3,82,1164,8,
        82,1,82,1,82,1,82,1,82,1,82,1,82,3,82,1172,8,82,1,82,1,82,1,82,1,
        82,1,82,1,82,5,82,1180,8,82,10,82,12,82,1183,9,82,1,82,1,82,1,82,
        1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,
        1,82,3,82,1202,8,82,1,82,1,82,3,82,1206,8,82,1,82,1,82,1,82,1,82,
        3,82,1212,8,82,1,82,3,82,1215,8,82,1,82,3,82,1218,8,82,1,82,1,82,
        1,82,1,82,1,82,3,82,1225,8,82,1,82,1,82,1,82,3,82,1230,8,82,1,82,
        3,82,1233,8,82,1,82,1,82,1,82,1,82,1,82,3,82,1240,8,82,1,82,1,82,
        1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,3,82,1252,8,82,1,82,1,82,
        1,82,1,82,1,82,1,82,1,82,5,82,1261,8,82,10,82,12,82,1264,9,82,1,
        82,3,82,1267,8,82,1,82,3,82,1270,8,82,1,82,1,82,1,82,1,82,1,82,3,
        82,1277,8,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,5,82,1288,
        8,82,10,82,12,82,1291,9,82,1,82,1,82,1,82,1,82,1,82,3,82,1298,8,
        82,1,82,1,82,1,82,3,82,1303,8,82,1,82,3,82,1306,8,82,1,82,1,82,1,
        82,1,82,3,82,1312,8,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,
        82,3,82,1323,8,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,
        82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,
        82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,
        82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,
        82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,
        82,3,82,1387,8,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,3,82,1396,8,
        82,1,82,1,82,3,82,1400,8,82,1,82,1,82,1,82,1,82,3,82,1406,8,82,1,
        82,1,82,3,82,1410,8,82,1,82,1,82,1,82,3,82,1415,8,82,1,82,1,82,1,
        82,1,82,3,82,1421,8,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,
        82,1,82,3,82,1433,8,82,1,82,1,82,1,82,1,82,1,82,1,82,3,82,1441,8,
        82,1,82,1,82,1,82,1,82,3,82,1447,8,82,1,82,1,82,1,82,1,82,1,82,1,
        82,1,82,1,82,1,82,1,82,1,82,3,82,1460,8,82,1,82,4,82,1463,8,82,11,
        82,12,82,1464,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,
        1,82,1,82,1,82,1,82,3,82,1481,8,82,1,82,1,82,1,82,5,82,1486,8,82,
        10,82,12,82,1489,9,82,1,82,3,82,1492,8,82,1,82,1,82,1,82,1,82,3,
        82,1498,8,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,
        82,1,82,1,82,3,82,1513,8,82,1,82,1,82,3,82,1517,8,82,1,82,1,82,1,
        82,1,82,3,82,1523,8,82,1,82,1,82,1,82,1,82,3,82,1529,8,82,1,82,3,
        82,1532,8,82,1,82,3,82,1535,8,82,1,82,1,82,1,82,1,82,3,82,1541,8,
        82,1,82,1,82,3,82,1545,8,82,1,82,1,82,1,82,1,82,1,82,1,82,5,82,1553,
        8,82,10,82,12,82,1556,9,82,1,82,1,82,1,82,1,82,1,82,1,82,3,82,1564,
        8,82,1,82,3,82,1567,8,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,3,82,
        1576,8,82,1,82,1,82,1,82,3,82,1581,8,82,1,82,1,82,1,82,1,82,3,82,
        1587,8,82,1,82,1,82,1,82,1,82,1,82,3,82,1594,8,82,1,82,3,82,1597,
        8,82,1,82,1,82,1,82,1,82,3,82,1603,8,82,1,82,1,82,1,82,1,82,1,82,
        1,82,1,82,5,82,1612,8,82,10,82,12,82,1615,9,82,3,82,1617,8,82,1,
        82,1,82,3,82,1621,8,82,1,82,1,82,1,82,3,82,1626,8,82,1,82,1,82,1,
        82,3,82,1631,8,82,1,82,1,82,1,82,1,82,1,82,3,82,1638,8,82,1,82,3,
        82,1641,8,82,1,82,3,82,1644,8,82,1,82,1,82,1,82,1,82,1,82,3,82,1651,
        8,82,1,82,1,82,1,82,3,82,1656,8,82,1,82,1,82,1,82,1,82,1,82,1,82,
        1,82,3,82,1665,8,82,1,82,1,82,1,82,1,82,1,82,1,82,3,82,1673,8,82,
        1,82,1,82,1,82,1,82,3,82,1679,8,82,1,82,3,82,1682,8,82,1,82,3,82,
        1685,8,82,1,82,1,82,1,82,1,82,3,82,1691,8,82,1,82,1,82,3,82,1695,
        8,82,1,82,1,82,3,82,1699,8,82,1,82,1,82,3,82,1703,8,82,3,82,1705,
        8,82,1,82,1,82,1,82,1,82,1,82,1,82,3,82,1713,8,82,1,82,1,82,1,82,
        1,82,1,82,1,82,3,82,1721,8,82,1,82,1,82,1,82,1,82,3,82,1727,8,82,
        1,82,1,82,1,82,1,82,3,82,1733,8,82,1,82,3,82,1736,8,82,1,82,1,82,
        3,82,1740,8,82,1,82,3,82,1743,8,82,1,82,1,82,3,82,1747,8,82,1,82,
        1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,
        1,82,1,82,1,82,1,82,1,82,1,82,1,82,5,82,1770,8,82,10,82,12,82,1773,
        9,82,3,82,1775,8,82,1,82,1,82,3,82,1779,8,82,1,82,1,82,1,82,1,82,
        3,82,1785,8,82,1,82,3,82,1788,8,82,1,82,3,82,1791,8,82,1,82,1,82,
        1,82,1,82,3,82,1797,8,82,1,82,1,82,1,82,1,82,1,82,1,82,3,82,1805,
        8,82,1,82,1,82,1,82,3,82,1810,8,82,1,82,1,82,1,82,1,82,3,82,1816,
        8,82,1,82,1,82,1,82,1,82,3,82,1822,8,82,1,82,1,82,1,82,1,82,1,82,
        1,82,1,82,1,82,5,82,1832,8,82,10,82,12,82,1835,9,82,3,82,1837,8,
        82,1,82,1,82,1,82,5,82,1842,8,82,10,82,12,82,1845,9,82,1,82,1,82,
        5,82,1849,8,82,10,82,12,82,1852,9,82,1,82,1,82,1,82,5,82,1857,8,
        82,10,82,12,82,1860,9,82,3,82,1862,8,82,1,83,1,83,1,83,1,83,1,83,
        1,83,3,83,1870,8,83,1,83,1,83,3,83,1874,8,83,1,83,1,83,1,83,1,83,
        1,83,3,83,1881,8,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,
        1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,
        1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,
        1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,
        1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,
        1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,
        1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,
        1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,
        1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,
        1,83,3,83,1997,8,83,1,83,1,83,1,83,1,83,1,83,1,83,3,83,2005,8,83,
        1,83,1,83,1,83,1,83,1,83,1,83,3,83,2013,8,83,1,83,1,83,1,83,1,83,
        1,83,1,83,1,83,3,83,2022,8,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,
        1,83,3,83,2032,8,83,1,84,1,84,3,84,2036,8,84,1,84,3,84,2039,8,84,
        1,84,1,84,1,84,1,84,3,84,2045,8,84,1,84,1,84,1,85,1,85,3,85,2051,
        8,85,1,85,1,85,1,85,1,85,1,86,1,86,1,86,1,86,1,86,1,86,3,86,2063,
        8,86,1,86,1,86,1,86,1,86,1,87,1,87,1,87,1,87,1,87,1,87,3,87,2075,
        8,87,1,87,1,87,1,87,3,87,2080,8,87,1,88,1,88,1,88,1,89,1,89,1,89,
        1,90,3,90,2089,8,90,1,90,3,90,2092,8,90,1,90,1,90,1,90,1,91,1,91,
        1,91,3,91,2100,8,91,1,91,1,91,1,91,1,91,1,91,3,91,2107,8,91,3,91,
        2109,8,91,1,91,1,91,1,91,3,91,2114,8,91,1,91,1,91,3,91,2118,8,91,
        1,91,1,91,1,91,3,91,2123,8,91,1,91,1,91,1,91,3,91,2128,8,91,1,91,
        1,91,1,91,3,91,2133,8,91,1,91,3,91,2136,8,91,1,91,1,91,1,91,3,91,
        2141,8,91,1,91,1,91,3,91,2145,8,91,1,91,1,91,1,91,3,91,2150,8,91,
        3,91,2152,8,91,1,92,1,92,3,92,2156,8,92,1,93,1,93,1,93,1,93,1,93,
        5,93,2163,8,93,10,93,12,93,2166,9,93,1,93,1,93,1,94,1,94,1,94,3,
        94,2173,8,94,1,95,1,95,1,96,1,96,1,96,1,96,1,96,3,96,2182,8,96,1,
        97,1,97,1,97,5,97,2187,8,97,10,97,12,97,2190,9,97,1,98,1,98,1,98,
        1,98,5,98,2196,8,98,10,98,12,98,2199,9,98,1,99,1,99,3,99,2203,8,
        99,1,99,3,99,2206,8,99,1,99,1,99,1,99,1,99,1,100,1,100,1,100,1,101,
        1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,5,101,2225,
        8,101,10,101,12,101,2228,9,101,1,102,1,102,1,102,1,102,5,102,2234,
        8,102,10,102,12,102,2237,9,102,1,102,1,102,1,103,1,103,3,103,2243,
        8,103,1,103,3,103,2246,8,103,1,104,1,104,1,104,5,104,2251,8,104,
        10,104,12,104,2254,9,104,1,104,3,104,2257,8,104,1,105,1,105,1,105,
        1,105,3,105,2263,8,105,1,106,1,106,1,106,1,106,5,106,2269,8,106,
        10,106,12,106,2272,9,106,1,106,1,106,1,107,1,107,1,107,1,107,5,107,
        2280,8,107,10,107,12,107,2283,9,107,1,107,1,107,1,108,1,108,1,108,
        1,108,1,108,1,108,3,108,2293,8,108,1,109,1,109,1,109,1,109,1,109,
        3,109,2300,8,109,1,110,1,110,1,110,1,110,3,110,2306,8,110,1,111,
        1,111,1,111,1,112,1,112,1,112,1,112,1,112,1,112,4,112,2317,8,112,
        11,112,12,112,2318,1,112,1,112,1,112,1,112,1,112,3,112,2326,8,112,
        1,112,1,112,1,112,1,112,1,112,3,112,2333,8,112,1,112,1,112,1,112,
        1,112,1,112,1,112,1,112,1,112,1,112,1,112,3,112,2345,8,112,1,112,
        1,112,1,112,1,112,5,112,2351,8,112,10,112,12,112,2354,9,112,1,112,
        5,112,2357,8,112,10,112,12,112,2360,9,112,3,112,2362,8,112,1,113,
        1,113,1,113,1,113,1,113,5,113,2369,8,113,10,113,12,113,2372,9,113,
        3,113,2374,8,113,1,113,1,113,1,113,1,113,1,113,5,113,2381,8,113,
        10,113,12,113,2384,9,113,3,113,2386,8,113,1,113,1,113,1,113,1,113,
        1,113,5,113,2393,8,113,10,113,12,113,2396,9,113,3,113,2398,8,113,
        1,113,1,113,1,113,1,113,1,113,5,113,2405,8,113,10,113,12,113,2408,
        9,113,3,113,2410,8,113,1,113,3,113,2413,8,113,1,113,1,113,1,113,
        3,113,2418,8,113,3,113,2420,8,113,1,114,1,114,1,114,1,115,1,115,
        1,115,3,115,2428,8,115,1,115,1,115,1,115,3,115,2433,8,115,1,115,
        1,115,1,115,1,115,3,115,2439,8,115,1,115,1,115,1,115,1,115,3,115,
        2445,8,115,1,115,5,115,2448,8,115,10,115,12,115,2451,9,115,1,116,
        1,116,1,116,1,116,1,116,3,116,2458,8,116,1,117,1,117,3,117,2462,
        8,117,1,117,1,117,3,117,2466,8,117,1,118,1,118,4,118,2470,8,118,
        11,118,12,118,2471,1,119,1,119,3,119,2476,8,119,1,119,1,119,1,119,
        1,119,5,119,2482,8,119,10,119,12,119,2485,9,119,1,119,3,119,2488,
        8,119,1,119,3,119,2491,8,119,1,119,3,119,2494,8,119,1,119,3,119,
        2497,8,119,1,119,1,119,3,119,2501,8,119,1,120,1,120,1,120,3,120,
        2506,8,120,1,120,1,120,1,120,5,120,2511,8,120,10,120,12,120,2514,
        9,120,1,120,3,120,2517,8,120,1,120,3,120,2520,8,120,1,120,3,120,
        2523,8,120,1,120,3,120,2526,8,120,3,120,2528,8,120,1,121,3,121,2531,
        8,121,1,122,1,122,1,122,1,122,1,122,1,122,1,122,1,122,1,122,1,122,
        3,122,2543,8,122,1,122,3,122,2546,8,122,1,122,1,122,3,122,2550,8,
        122,1,122,1,122,1,122,1,122,1,122,1,122,1,122,1,122,3,122,2560,8,
        122,1,122,1,122,3,122,2564,8,122,3,122,2566,8,122,1,122,3,122,2569,
        8,122,1,122,1,122,3,122,2573,8,122,1,123,1,123,5,123,2577,8,123,
        10,123,12,123,2580,9,123,1,123,3,123,2583,8,123,1,123,1,123,1,124,
        1,124,1,124,1,125,1,125,1,125,1,125,3,125,2594,8,125,1,125,1,125,
        1,125,1,126,1,126,1,126,1,126,1,126,3,126,2604,8,126,1,126,1,126,
        1,126,1,127,1,127,1,127,1,127,1,127,1,127,1,127,3,127,2616,8,127,
        1,128,1,128,1,128,1,128,1,128,1,128,1,128,1,128,1,128,1,128,1,128,
        5,128,2629,8,128,10,128,12,128,2632,9,128,1,128,1,128,3,128,2636,
        8,128,1,129,1,129,1,129,5,129,2641,8,129,10,129,12,129,2644,9,129,
        1,130,1,130,1,130,1,130,1,131,1,131,1,131,1,132,1,132,1,132,1,133,
        1,133,1,133,3,133,2659,8,133,1,133,5,133,2662,8,133,10,133,12,133,
        2665,9,133,1,133,1,133,1,134,1,134,1,134,1,134,1,134,1,134,5,134,
        2675,8,134,10,134,12,134,2678,9,134,1,134,1,134,3,134,2682,8,134,
        1,135,1,135,1,135,1,135,5,135,2688,8,135,10,135,12,135,2691,9,135,
        1,135,5,135,2694,8,135,10,135,12,135,2697,9,135,1,135,3,135,2700,
        8,135,1,136,1,136,1,136,1,136,1,136,5,136,2707,8,136,10,136,12,136,
        2710,9,136,1,136,1,136,1,136,1,136,1,136,1,136,1,136,1,136,1,136,
        1,136,5,136,2722,8,136,10,136,12,136,2725,9,136,1,136,1,136,3,136,
        2729,8,136,1,136,1,136,1,136,1,136,1,136,1,136,1,136,1,136,5,136,
        2739,8,136,10,136,12,136,2742,9,136,1,136,1,136,3,136,2746,8,136,
        1,137,1,137,1,137,1,137,5,137,2752,8,137,10,137,12,137,2755,9,137,
        3,137,2757,8,137,1,137,1,137,3,137,2761,8,137,1,138,1,138,1,138,
        1,138,1,138,1,138,1,138,1,138,1,138,1,138,5,138,2773,8,138,10,138,
        12,138,2776,9,138,1,138,1,138,1,138,1,139,1,139,1,139,1,139,1,139,
        5,139,2786,8,139,10,139,12,139,2789,9,139,1,139,1,139,3,139,2793,
        8,139,1,140,1,140,3,140,2797,8,140,1,140,3,140,2800,8,140,1,141,
        1,141,1,141,3,141,2805,8,141,1,141,1,141,1,141,1,141,1,141,5,141,
        2812,8,141,10,141,12,141,2815,9,141,3,141,2817,8,141,1,141,1,141,
        1,141,3,141,2822,8,141,1,141,1,141,1,141,5,141,2827,8,141,10,141,
        12,141,2830,9,141,3,141,2832,8,141,1,142,1,142,1,143,1,143,5,143,
        2838,8,143,10,143,12,143,2841,9,143,1,144,1,144,1,144,1,144,3,144,
        2847,8,144,1,144,1,144,1,144,1,144,1,144,3,144,2854,8,144,1,145,
        3,145,2857,8,145,1,145,1,145,1,145,3,145,2862,8,145,1,145,3,145,
        2865,8,145,1,145,1,145,1,145,3,145,2870,8,145,1,145,1,145,3,145,
        2874,8,145,1,145,3,145,2877,8,145,1,145,3,145,2880,8,145,1,146,1,
        146,1,146,1,146,3,146,2886,8,146,1,147,1,147,1,147,3,147,2891,8,
        147,1,147,1,147,1,148,3,148,2896,8,148,1,148,1,148,1,148,1,148,1,
        148,1,148,1,148,1,148,1,148,1,148,1,148,1,148,1,148,1,148,1,148,
        1,148,3,148,2914,8,148,3,148,2916,8,148,1,148,3,148,2919,8,148,1,
        149,1,149,1,149,1,149,1,150,1,150,1,150,5,150,2928,8,150,10,150,
        12,150,2931,9,150,1,151,1,151,1,151,1,151,5,151,2937,8,151,10,151,
        12,151,2940,9,151,1,151,1,151,1,152,1,152,3,152,2946,8,152,1,153,
        1,153,1,153,1,153,5,153,2952,8,153,10,153,12,153,2955,9,153,1,153,
        1,153,1,154,1,154,3,154,2961,8,154,1,155,1,155,3,155,2965,8,155,
        1,155,3,155,2968,8,155,1,155,1,155,1,155,1,155,1,155,1,155,3,155,
        2976,8,155,1,155,1,155,1,155,1,155,1,155,1,155,3,155,2984,8,155,
        1,155,1,155,1,155,1,155,3,155,2990,8,155,1,156,1,156,1,156,1,156,
        5,156,2996,8,156,10,156,12,156,2999,9,156,1,156,1,156,1,157,1,157,
        1,157,1,157,1,157,5,157,3008,8,157,10,157,12,157,3011,9,157,3,157,
        3013,8,157,1,157,1,157,1,157,1,158,3,158,3019,8,158,1,158,1,158,
        3,158,3023,8,158,3,158,3025,8,158,1,159,1,159,1,159,1,159,1,159,
        1,159,1,159,3,159,3034,8,159,1,159,1,159,1,159,1,159,1,159,1,159,
        1,159,1,159,1,159,1,159,3,159,3046,8,159,3,159,3048,8,159,1,159,
        1,159,1,159,1,159,1,159,3,159,3055,8,159,1,159,1,159,1,159,1,159,
        1,159,3,159,3062,8,159,1,159,1,159,1,159,1,159,3,159,3068,8,159,
        1,159,1,159,1,159,1,159,3,159,3074,8,159,3,159,3076,8,159,1,160,
        1,160,1,160,5,160,3081,8,160,10,160,12,160,3084,9,160,1,161,1,161,
        1,161,5,161,3089,8,161,10,161,12,161,3092,9,161,1,162,1,162,1,162,
        3,162,3097,8,162,1,162,1,162,1,163,1,163,1,163,3,163,3104,8,163,
        1,163,1,163,1,164,1,164,3,164,3110,8,164,1,164,1,164,3,164,3114,
        8,164,3,164,3116,8,164,1,165,1,165,1,165,5,165,3121,8,165,10,165,
        12,165,3124,9,165,1,166,1,166,1,166,1,166,5,166,3130,8,166,10,166,
        12,166,3133,9,166,1,166,1,166,1,167,1,167,1,167,1,167,1,167,1,167,
        5,167,3143,8,167,10,167,12,167,3146,9,167,1,167,1,167,3,167,3150,
        8,167,1,168,1,168,3,168,3154,8,168,1,169,1,169,1,170,1,170,1,170,
        1,170,1,170,1,170,1,170,1,170,1,170,1,170,3,170,3168,8,170,3,170,
        3170,8,170,1,170,1,170,1,170,1,170,1,170,1,170,5,170,3178,8,170,
        10,170,12,170,3181,9,170,1,171,3,171,3184,8,171,1,171,1,171,1,171,
        1,171,1,171,1,171,3,171,3192,8,171,1,171,1,171,1,171,1,171,1,171,
        5,171,3199,8,171,10,171,12,171,3202,9,171,1,171,1,171,1,171,3,171,
        3207,8,171,1,171,1,171,1,171,1,171,1,171,1,171,3,171,3215,8,171,
        1,171,1,171,1,171,3,171,3220,8,171,1,171,1,171,1,171,1,171,1,171,
        1,171,1,171,1,171,5,171,3230,8,171,10,171,12,171,3233,9,171,1,171,
        1,171,3,171,3237,8,171,1,171,3,171,3240,8,171,1,171,1,171,1,171,
        1,171,3,171,3246,8,171,1,171,1,171,3,171,3250,8,171,1,171,1,171,
        1,171,3,171,3255,8,171,1,171,1,171,1,171,3,171,3260,8,171,1,171,
        1,171,1,171,3,171,3265,8,171,1,172,1,172,1,172,1,172,3,172,3271,
        8,172,1,172,1,172,1,172,1,172,1,172,1,172,1,172,1,172,1,172,1,172,
        1,172,1,172,1,172,1,172,1,172,1,172,1,172,1,172,1,172,5,172,3292,
        8,172,10,172,12,172,3295,9,172,1,173,1,173,1,173,1,173,4,173,3301,
        8,173,11,173,12,173,3302,1,173,1,173,3,173,3307,8,173,1,173,1,173,
        1,173,1,173,1,173,4,173,3314,8,173,11,173,12,173,3315,1,173,1,173,
        3,173,3320,8,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,
        1,173,1,173,1,173,1,173,1,173,1,173,5,173,3336,8,173,10,173,12,173,
        3339,9,173,3,173,3341,8,173,1,173,1,173,1,173,1,173,1,173,1,173,
        3,173,3349,8,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,3,173,
        3358,8,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,
        1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,4,173,
        3379,8,173,11,173,12,173,3380,1,173,1,173,1,173,1,173,1,173,1,173,
        1,173,1,173,1,173,3,173,3392,8,173,1,173,1,173,1,173,5,173,3397,
        8,173,10,173,12,173,3400,9,173,3,173,3402,8,173,1,173,1,173,1,173,
        1,173,1,173,1,173,1,173,3,173,3411,8,173,1,173,1,173,3,173,3415,
        8,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,4,173,3425,
        8,173,11,173,12,173,3426,1,173,1,173,1,173,1,173,1,173,1,173,1,173,
        1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,
        1,173,1,173,1,173,1,173,1,173,3,173,3452,8,173,1,173,1,173,1,173,
        1,173,1,173,3,173,3459,8,173,1,173,3,173,3462,8,173,1,173,1,173,
        1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,
        3,173,3477,8,173,1,173,1,173,3,173,3481,8,173,1,173,1,173,1,173,
        1,173,1,173,1,173,1,173,1,173,5,173,3491,8,173,10,173,12,173,3494,
        9,173,1,174,1,174,1,174,1,174,1,174,1,174,1,174,1,174,4,174,3504,
        8,174,11,174,12,174,3505,3,174,3508,8,174,1,175,1,175,1,175,1,175,
        1,175,1,175,1,175,1,175,3,175,3518,8,175,1,176,1,176,1,177,1,177,
        1,178,1,178,1,179,1,179,1,180,1,180,1,180,3,180,3531,8,180,1,181,
        1,181,3,181,3535,8,181,1,182,1,182,1,182,4,182,3540,8,182,11,182,
        12,182,3541,1,183,1,183,1,183,3,183,3547,8,183,1,184,1,184,1,184,
        1,184,1,184,1,185,3,185,3555,8,185,1,185,1,185,3,185,3559,8,185,
        1,186,1,186,1,186,1,186,1,186,1,186,1,186,3,186,3568,8,186,1,187,
        1,187,1,187,3,187,3573,8,187,1,188,1,188,1,188,1,188,1,188,1,188,
        1,188,1,188,1,188,1,188,1,188,1,188,1,188,1,188,1,188,3,188,3590,
        8,188,1,188,1,188,3,188,3594,8,188,1,188,1,188,1,188,1,188,1,188,
        5,188,3601,8,188,10,188,12,188,3604,9,188,1,188,3,188,3607,8,188,
        3,188,3609,8,188,1,189,1,189,1,189,5,189,3614,8,189,10,189,12,189,
        3617,9,189,1,190,1,190,1,190,1,190,3,190,3623,8,190,1,190,3,190,
        3626,8,190,1,190,3,190,3629,8,190,1,191,1,191,1,191,5,191,3634,8,
        191,10,191,12,191,3637,9,191,1,192,1,192,1,192,1,192,3,192,3643,
        8,192,1,192,3,192,3646,8,192,1,193,1,193,1,193,5,193,3651,8,193,
        10,193,12,193,3654,9,193,1,194,1,194,1,194,1,194,1,194,3,194,3661,
        8,194,1,194,3,194,3664,8,194,1,195,1,195,1,195,1,195,1,195,1,196,
        1,196,1,196,1,196,5,196,3675,8,196,10,196,12,196,3678,9,196,1,197,
        1,197,1,197,1,197,1,198,1,198,1,198,1,198,1,198,1,198,1,198,1,198,
        1,198,1,198,1,198,5,198,3695,8,198,10,198,12,198,3698,9,198,1,198,
        1,198,1,198,1,198,1,198,5,198,3705,8,198,10,198,12,198,3708,9,198,
        3,198,3710,8,198,1,198,1,198,1,198,1,198,1,198,5,198,3717,8,198,
        10,198,12,198,3720,9,198,3,198,3722,8,198,3,198,3724,8,198,1,198,
        3,198,3727,8,198,1,198,3,198,3730,8,198,1,199,1,199,1,199,1,199,
        1,199,1,199,1,199,1,199,1,199,1,199,1,199,1,199,1,199,1,199,1,199,
        1,199,3,199,3748,8,199,1,200,1,200,1,200,1,200,1,200,1,200,1,200,
        3,200,3757,8,200,1,201,1,201,1,201,5,201,3762,8,201,10,201,12,201,
        3765,9,201,1,202,1,202,1,202,1,202,3,202,3771,8,202,1,203,1,203,
        1,203,5,203,3776,8,203,10,203,12,203,3779,9,203,1,204,1,204,1,205,
        1,205,4,205,3785,8,205,11,205,12,205,3786,1,206,1,206,3,206,3791,
        8,206,1,207,1,207,1,207,3,207,3796,8,207,1,208,1,208,1,209,3,209,
        3801,8,209,1,209,1,209,3,209,3805,8,209,1,209,1,209,3,209,3809,8,
        209,1,209,1,209,3,209,3813,8,209,1,209,1,209,3,209,3817,8,209,1,
        209,1,209,3,209,3821,8,209,1,209,1,209,3,209,3825,8,209,1,209,1,
        209,3,209,3829,8,209,1,209,1,209,3,209,3833,8,209,1,209,3,209,3836,
        8,209,1,210,1,210,1,210,1,210,1,210,1,210,1,210,3,210,3845,8,210,
        1,211,1,211,1,212,1,212,1,213,1,213,1,213,5,1771,1833,1843,1850,
        1858,5,94,230,340,344,346,214,0,2,4,6,8,10,12,14,16,18,20,22,24,
        26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,
        70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,
        110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,
        142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,
        174,176,178,180,182,184,186,188,190,192,194,196,198,200,202,204,
        206,208,210,212,214,216,218,220,222,224,226,228,230,232,234,236,
        238,240,242,244,246,248,250,252,254,256,258,260,262,264,266,268,
        270,272,274,276,278,280,282,284,286,288,290,292,294,296,298,300,
        302,304,306,308,310,312,314,316,318,320,322,324,326,328,330,332,
        334,336,338,340,342,344,346,348,350,352,354,356,358,360,362,364,
        366,368,370,372,374,376,378,380,382,384,386,388,390,392,394,396,
        398,400,402,404,406,408,410,412,414,416,418,420,422,424,426,0,54,
        2,0,56,56,61,61,1,0,196,197,1,0,244,245,2,0,136,136,169,169,3,0,
        36,36,211,211,276,276,1,0,37,39,3,0,53,53,269,269,299,299,2,0,2,
        2,306,306,2,0,330,330,332,332,1,0,19,21,1,0,315,318,2,0,65,65,111,
        111,2,0,316,316,321,321,3,0,10,11,131,131,283,283,2,0,12,12,196,
        196,2,0,107,107,222,222,2,0,74,74,236,236,2,0,105,105,192,192,2,
        0,142,142,155,155,1,0,85,86,2,0,269,269,299,299,2,0,57,57,77,77,
        5,0,82,82,94,94,128,128,141,141,183,183,1,0,111,112,2,0,128,128,
        141,141,2,0,196,196,326,326,2,0,54,54,177,177,3,0,104,104,191,191,
        246,246,4,0,123,123,162,162,255,255,289,289,3,0,123,123,255,255,
        289,289,2,0,56,56,116,116,3,0,56,56,61,61,259,259,3,0,131,131,283,
        283,291,291,2,0,315,316,321,321,1,0,317,320,2,0,315,316,324,324,
        2,0,99,99,101,101,1,0,267,268,2,0,1,1,142,142,2,0,1,1,138,138,3,
        0,69,69,172,172,278,278,1,0,306,307,1,0,315,325,4,0,59,59,155,155,
        195,195,203,203,2,0,131,131,283,283,1,0,315,316,2,0,117,117,212,
        212,2,0,204,204,260,260,2,0,137,137,219,219,1,0,331,332,2,0,118,
        118,254,254,51,0,54,55,57,58,62,63,65,66,68,68,70,74,77,77,79,82,
        84,84,86,92,94,94,97,98,103,105,107,115,117,118,122,122,124,130,
        133,133,135,137,140,141,144,146,149,149,152,154,156,157,159,161,
        163,163,166,166,168,171,174,187,190,192,194,194,197,198,201,202,
        205,205,207,208,210,219,221,229,231,237,239,246,250,252,254,254,
        256,258,260,268,270,274,277,277,279,284,286,288,292,295,298,300,
        303,303,320,320,15,0,60,60,96,96,123,123,143,143,158,158,162,162,
        167,167,173,173,193,193,199,199,238,238,249,249,255,255,289,289,
        297,297,17,0,54,59,61,95,97,122,124,142,144,157,159,161,163,166,
        168,172,174,192,194,198,200,237,239,248,250,254,256,288,290,296,
        298,305,320,320,4409,0,429,1,0,0,0,2,435,1,0,0,0,4,444,1,0,0,0,6,
        447,1,0,0,0,8,473,1,0,0,0,10,475,1,0,0,0,12,487,1,0,0,0,14,496,1,
        0,0,0,16,516,1,0,0,0,18,523,1,0,0,0,20,530,1,0,0,0,22,541,1,0,0,
        0,24,554,1,0,0,0,26,561,1,0,0,0,28,579,1,0,0,0,30,597,1,0,0,0,32,
        610,1,0,0,0,34,613,1,0,0,0,36,621,1,0,0,0,38,633,1,0,0,0,40,670,
        1,0,0,0,42,672,1,0,0,0,44,690,1,0,0,0,46,707,1,0,0,0,48,718,1,0,
        0,0,50,723,1,0,0,0,52,727,1,0,0,0,54,729,1,0,0,0,56,731,1,0,0,0,
        58,733,1,0,0,0,60,779,1,0,0,0,62,781,1,0,0,0,64,798,1,0,0,0,66,800,
        1,0,0,0,68,818,1,0,0,0,70,820,1,0,0,0,72,832,1,0,0,0,74,834,1,0,
        0,0,76,841,1,0,0,0,78,844,1,0,0,0,80,846,1,0,0,0,82,855,1,0,0,0,
        84,867,1,0,0,0,86,884,1,0,0,0,88,894,1,0,0,0,90,919,1,0,0,0,92,921,
        1,0,0,0,94,929,1,0,0,0,96,949,1,0,0,0,98,957,1,0,0,0,100,959,1,0,
        0,0,102,967,1,0,0,0,104,975,1,0,0,0,106,979,1,0,0,0,108,981,1,0,
        0,0,110,989,1,0,0,0,112,1005,1,0,0,0,114,1018,1,0,0,0,116,1020,1,
        0,0,0,118,1028,1,0,0,0,120,1032,1,0,0,0,122,1049,1,0,0,0,124,1051,
        1,0,0,0,126,1055,1,0,0,0,128,1075,1,0,0,0,130,1077,1,0,0,0,132,1085,
        1,0,0,0,134,1091,1,0,0,0,136,1109,1,0,0,0,138,1117,1,0,0,0,140,1119,
        1,0,0,0,142,1121,1,0,0,0,144,1123,1,0,0,0,146,1125,1,0,0,0,148,1127,
        1,0,0,0,150,1129,1,0,0,0,152,1138,1,0,0,0,154,1141,1,0,0,0,156,1144,
        1,0,0,0,158,1147,1,0,0,0,160,1150,1,0,0,0,162,1153,1,0,0,0,164,1861,
        1,0,0,0,166,2031,1,0,0,0,168,2033,1,0,0,0,170,2050,1,0,0,0,172,2056,
        1,0,0,0,174,2068,1,0,0,0,176,2081,1,0,0,0,178,2084,1,0,0,0,180,2088,
        1,0,0,0,182,2151,1,0,0,0,184,2153,1,0,0,0,186,2157,1,0,0,0,188,2169,
        1,0,0,0,190,2174,1,0,0,0,192,2181,1,0,0,0,194,2183,1,0,0,0,196,2191,
        1,0,0,0,198,2200,1,0,0,0,200,2211,1,0,0,0,202,2226,1,0,0,0,204,2229,
        1,0,0,0,206,2240,1,0,0,0,208,2256,1,0,0,0,210,2262,1,0,0,0,212,2264,
        1,0,0,0,214,2275,1,0,0,0,216,2292,1,0,0,0,218,2299,1,0,0,0,220,2301,
        1,0,0,0,222,2307,1,0,0,0,224,2361,1,0,0,0,226,2373,1,0,0,0,228,2421,
        1,0,0,0,230,2427,1,0,0,0,232,2457,1,0,0,0,234,2459,1,0,0,0,236,2467,
        1,0,0,0,238,2500,1,0,0,0,240,2527,1,0,0,0,242,2530,1,0,0,0,244,2542,
        1,0,0,0,246,2574,1,0,0,0,248,2586,1,0,0,0,250,2589,1,0,0,0,252,2598,
        1,0,0,0,254,2615,1,0,0,0,256,2635,1,0,0,0,258,2637,1,0,0,0,260,2645,
        1,0,0,0,262,2649,1,0,0,0,264,2652,1,0,0,0,266,2655,1,0,0,0,268,2681,
        1,0,0,0,270,2683,1,0,0,0,272,2745,1,0,0,0,274,2760,1,0,0,0,276,2762,
        1,0,0,0,278,2792,1,0,0,0,280,2794,1,0,0,0,282,2801,1,0,0,0,284,2833,
        1,0,0,0,286,2835,1,0,0,0,288,2853,1,0,0,0,290,2879,1,0,0,0,292,2885,
        1,0,0,0,294,2887,1,0,0,0,296,2918,1,0,0,0,298,2920,1,0,0,0,300,2924,
        1,0,0,0,302,2932,1,0,0,0,304,2943,1,0,0,0,306,2947,1,0,0,0,308,2958,
        1,0,0,0,310,2989,1,0,0,0,312,2991,1,0,0,0,314,3002,1,0,0,0,316,3024,
        1,0,0,0,318,3075,1,0,0,0,320,3077,1,0,0,0,322,3085,1,0,0,0,324,3096,
        1,0,0,0,326,3103,1,0,0,0,328,3107,1,0,0,0,330,3117,1,0,0,0,332,3125,
        1,0,0,0,334,3149,1,0,0,0,336,3153,1,0,0,0,338,3155,1,0,0,0,340,3169,
        1,0,0,0,342,3264,1,0,0,0,344,3270,1,0,0,0,346,3480,1,0,0,0,348,3507,
        1,0,0,0,350,3517,1,0,0,0,352,3519,1,0,0,0,354,3521,1,0,0,0,356,3523,
        1,0,0,0,358,3525,1,0,0,0,360,3527,1,0,0,0,362,3532,1,0,0,0,364,3539,
        1,0,0,0,366,3543,1,0,0,0,368,3548,1,0,0,0,370,3558,1,0,0,0,372,3567,
        1,0,0,0,374,3572,1,0,0,0,376,3608,1,0,0,0,378,3610,1,0,0,0,380,3618,
        1,0,0,0,382,3630,1,0,0,0,384,3638,1,0,0,0,386,3647,1,0,0,0,388,3655,
        1,0,0,0,390,3665,1,0,0,0,392,3670,1,0,0,0,394,3679,1,0,0,0,396,3729,
        1,0,0,0,398,3747,1,0,0,0,400,3756,1,0,0,0,402,3758,1,0,0,0,404,3770,
        1,0,0,0,406,3772,1,0,0,0,408,3780,1,0,0,0,410,3784,1,0,0,0,412,3790,
        1,0,0,0,414,3795,1,0,0,0,416,3797,1,0,0,0,418,3835,1,0,0,0,420,3844,
        1,0,0,0,422,3846,1,0,0,0,424,3848,1,0,0,0,426,3850,1,0,0,0,428,430,
        3,4,2,0,429,428,1,0,0,0,430,431,1,0,0,0,431,429,1,0,0,0,431,432,
        1,0,0,0,432,433,1,0,0,0,433,434,5,0,0,1,434,1,1,0,0,0,435,436,3,
        4,2,0,436,437,5,0,0,1,437,3,1,0,0,0,438,445,3,6,3,0,439,445,3,44,
        22,0,440,445,3,38,19,0,441,445,3,40,20,0,442,445,3,42,21,0,443,445,
        3,46,23,0,444,438,1,0,0,0,444,439,1,0,0,0,444,440,1,0,0,0,444,441,
        1,0,0,0,444,442,1,0,0,0,444,443,1,0,0,0,445,5,1,0,0,0,446,448,3,
        76,38,0,447,446,1,0,0,0,447,448,1,0,0,0,448,449,1,0,0,0,449,451,
        3,180,90,0,450,452,3,60,30,0,451,450,1,0,0,0,451,452,1,0,0,0,452,
        454,1,0,0,0,453,455,3,66,33,0,454,453,1,0,0,0,454,455,1,0,0,0,455,
        457,1,0,0,0,456,458,3,64,32,0,457,456,1,0,0,0,457,458,1,0,0,0,458,
        7,1,0,0,0,459,474,3,10,5,0,460,474,3,12,6,0,461,474,3,30,15,0,462,
        474,3,32,16,0,463,474,3,34,17,0,464,474,3,36,18,0,465,474,3,14,7,
        0,466,474,3,16,8,0,467,474,3,18,9,0,468,474,3,20,10,0,469,474,3,
        22,11,0,470,474,3,24,12,0,471,474,3,26,13,0,472,474,3,28,14,0,473,
        459,1,0,0,0,473,460,1,0,0,0,473,461,1,0,0,0,473,462,1,0,0,0,473,
        463,1,0,0,0,473,464,1,0,0,0,473,465,1,0,0,0,473,466,1,0,0,0,473,
        467,1,0,0,0,473,468,1,0,0,0,473,469,1,0,0,0,473,470,1,0,0,0,473,
        471,1,0,0,0,473,472,1,0,0,0,474,9,1,0,0,0,475,477,5,281,0,0,476,
        478,3,68,34,0,477,476,1,0,0,0,477,478,1,0,0,0,478,480,1,0,0,0,479,
        481,3,90,45,0,480,479,1,0,0,0,480,481,1,0,0,0,481,482,1,0,0,0,482,
        485,3,80,40,0,483,484,5,51,0,0,484,486,3,84,42,0,485,483,1,0,0,0,
        485,486,1,0,0,0,486,11,1,0,0,0,487,489,5,26,0,0,488,490,3,68,34,
        0,489,488,1,0,0,0,489,490,1,0,0,0,490,492,1,0,0,0,491,493,3,90,45,
        0,492,491,1,0,0,0,492,493,1,0,0,0,493,494,1,0,0,0,494,495,3,82,41,
        0,495,13,1,0,0,0,496,497,5,35,0,0,497,498,5,59,0,0,498,500,5,295,
        0,0,499,501,3,72,36,0,500,499,1,0,0,0,500,501,1,0,0,0,501,503,1,
        0,0,0,502,504,3,90,45,0,503,502,1,0,0,0,503,504,1,0,0,0,504,505,
        1,0,0,0,505,507,3,54,27,0,506,508,3,50,25,0,507,506,1,0,0,0,507,
        508,1,0,0,0,508,510,1,0,0,0,509,511,3,56,28,0,510,509,1,0,0,0,510,
        511,1,0,0,0,511,512,1,0,0,0,512,514,3,58,29,0,513,515,3,98,49,0,
        514,513,1,0,0,0,514,515,1,0,0,0,515,15,1,0,0,0,516,517,5,232,0,0,
        517,518,5,86,0,0,518,521,3,108,54,0,519,520,5,142,0,0,520,522,3,
        72,36,0,521,519,1,0,0,0,521,522,1,0,0,0,522,17,1,0,0,0,523,524,5,
        57,0,0,524,525,5,86,0,0,525,528,3,116,58,0,526,527,5,142,0,0,527,
        529,3,72,36,0,528,526,1,0,0,0,528,529,1,0,0,0,529,19,1,0,0,0,530,
        531,5,118,0,0,531,532,5,86,0,0,532,535,3,100,50,0,533,534,5,152,
        0,0,534,536,5,125,0,0,535,533,1,0,0,0,535,536,1,0,0,0,536,539,1,
        0,0,0,537,538,5,142,0,0,538,540,3,72,36,0,539,537,1,0,0,0,539,540,
        1,0,0,0,540,21,1,0,0,0,541,542,5,118,0,0,542,543,5,245,0,0,543,544,
        5,152,0,0,544,545,7,0,0,0,545,548,7,1,0,0,546,547,5,199,0,0,547,
        549,3,100,50,0,548,546,1,0,0,0,548,549,1,0,0,0,549,552,1,0,0,0,550,
        551,5,142,0,0,551,553,3,72,36,0,552,550,1,0,0,0,552,553,1,0,0,0,
        553,23,1,0,0,0,554,555,5,17,0,0,555,556,7,1,0,0,556,559,3,98,49,
        0,557,558,5,142,0,0,558,560,3,72,36,0,559,557,1,0,0,0,559,560,1,
        0,0,0,560,25,1,0,0,0,561,563,5,47,0,0,562,564,5,234,0,0,563,562,
        1,0,0,0,563,564,1,0,0,0,564,565,1,0,0,0,565,568,3,86,43,0,566,567,
        5,48,0,0,567,569,5,330,0,0,568,566,1,0,0,0,568,569,1,0,0,0,569,572,
        1,0,0,0,570,571,5,142,0,0,571,573,3,72,36,0,572,570,1,0,0,0,572,
        573,1,0,0,0,573,577,1,0,0,0,574,575,5,31,0,0,575,576,5,72,0,0,576,
        578,3,100,50,0,577,574,1,0,0,0,577,578,1,0,0,0,578,27,1,0,0,0,579,
        582,5,18,0,0,580,581,5,330,0,0,581,583,7,2,0,0,582,580,1,0,0,0,582,
        583,1,0,0,0,583,586,1,0,0,0,584,585,5,142,0,0,585,587,3,72,36,0,
        586,584,1,0,0,0,586,587,1,0,0,0,587,591,1,0,0,0,588,592,3,90,45,
        0,589,590,5,22,0,0,590,592,3,102,51,0,591,588,1,0,0,0,591,589,1,
        0,0,0,591,592,1,0,0,0,592,595,1,0,0,0,593,594,7,1,0,0,594,596,7,
        3,0,0,595,593,1,0,0,0,595,596,1,0,0,0,596,29,1,0,0,0,597,598,5,32,
        0,0,598,600,3,68,34,0,599,601,3,88,44,0,600,599,1,0,0,0,600,601,
        1,0,0,0,601,604,1,0,0,0,602,603,5,72,0,0,603,605,3,100,50,0,604,
        602,1,0,0,0,604,605,1,0,0,0,605,608,1,0,0,0,606,607,5,22,0,0,607,
        609,3,102,51,0,608,606,1,0,0,0,608,609,1,0,0,0,609,31,1,0,0,0,610,
        611,5,95,0,0,611,612,3,82,41,0,612,33,1,0,0,0,613,615,5,95,0,0,614,
        616,5,103,0,0,615,614,1,0,0,0,615,616,1,0,0,0,616,617,1,0,0,0,617,
        618,3,136,68,0,618,619,5,246,0,0,619,620,3,116,58,0,620,35,1,0,0,
        0,621,623,5,178,0,0,622,624,3,56,28,0,623,622,1,0,0,0,623,624,1,
        0,0,0,624,625,1,0,0,0,625,627,3,58,29,0,626,628,3,98,49,0,627,626,
        1,0,0,0,627,628,1,0,0,0,628,631,1,0,0,0,629,630,5,86,0,0,630,632,
        3,52,26,0,631,629,1,0,0,0,631,632,1,0,0,0,632,37,1,0,0,0,633,635,
        5,27,0,0,634,636,3,68,34,0,635,634,1,0,0,0,635,636,1,0,0,0,636,638,
        1,0,0,0,637,639,3,90,45,0,638,637,1,0,0,0,638,639,1,0,0,0,639,640,
        1,0,0,0,640,641,5,297,0,0,641,643,3,84,42,0,642,644,3,98,49,0,643,
        642,1,0,0,0,643,644,1,0,0,0,644,39,1,0,0,0,645,646,5,33,0,0,646,
        647,5,330,0,0,647,650,7,2,0,0,648,649,5,142,0,0,649,651,3,68,34,
        0,650,648,1,0,0,0,650,651,1,0,0,0,651,653,1,0,0,0,652,654,5,29,0,
        0,653,652,1,0,0,0,653,654,1,0,0,0,654,657,1,0,0,0,655,656,5,34,0,
        0,656,658,5,326,0,0,657,655,1,0,0,0,657,658,1,0,0,0,658,671,1,0,
        0,0,659,661,5,33,0,0,660,662,3,68,34,0,661,660,1,0,0,0,661,662,1,
        0,0,0,662,664,1,0,0,0,663,665,5,29,0,0,664,663,1,0,0,0,664,665,1,
        0,0,0,665,668,1,0,0,0,666,667,5,34,0,0,667,669,5,326,0,0,668,666,
        1,0,0,0,668,669,1,0,0,0,669,671,1,0,0,0,670,645,1,0,0,0,670,659,
        1,0,0,0,671,41,1,0,0,0,672,674,5,35,0,0,673,675,3,72,36,0,674,673,
        1,0,0,0,674,675,1,0,0,0,675,677,1,0,0,0,676,678,3,90,45,0,677,676,
        1,0,0,0,677,678,1,0,0,0,678,679,1,0,0,0,679,681,3,54,27,0,680,682,
        3,50,25,0,681,680,1,0,0,0,681,682,1,0,0,0,682,684,1,0,0,0,683,685,
        3,56,28,0,684,683,1,0,0,0,684,685,1,0,0,0,685,686,1,0,0,0,686,688,
        3,58,29,0,687,689,3,98,49,0,688,687,1,0,0,0,688,689,1,0,0,0,689,
        43,1,0,0,0,690,692,5,28,0,0,691,693,3,68,34,0,692,691,1,0,0,0,692,
        693,1,0,0,0,693,695,1,0,0,0,694,696,3,90,45,0,695,694,1,0,0,0,695,
        696,1,0,0,0,696,697,1,0,0,0,697,698,5,297,0,0,698,700,3,84,42,0,
        699,701,3,98,49,0,700,699,1,0,0,0,700,701,1,0,0,0,701,704,1,0,0,
        0,702,703,5,51,0,0,703,705,3,84,42,0,704,702,1,0,0,0,704,705,1,0,
        0,0,705,45,1,0,0,0,706,708,3,76,38,0,707,706,1,0,0,0,707,708,1,0,
        0,0,708,709,1,0,0,0,709,711,5,50,0,0,710,712,3,68,34,0,711,710,1,
        0,0,0,711,712,1,0,0,0,712,713,1,0,0,0,713,714,5,297,0,0,714,716,
        3,84,42,0,715,717,3,98,49,0,716,715,1,0,0,0,716,717,1,0,0,0,717,
        47,1,0,0,0,718,719,5,46,0,0,719,721,3,84,42,0,720,722,3,98,49,0,
        721,720,1,0,0,0,721,722,1,0,0,0,722,49,1,0,0,0,723,724,5,40,0,0,
        724,51,1,0,0,0,725,728,3,116,58,0,726,728,3,100,50,0,727,725,1,0,
        0,0,727,726,1,0,0,0,728,53,1,0,0,0,729,730,7,4,0,0,730,55,1,0,0,
        0,731,732,7,5,0,0,732,57,1,0,0,0,733,734,5,326,0,0,734,59,1,0,0,
        0,735,737,5,171,0,0,736,735,1,0,0,0,736,737,1,0,0,0,737,741,1,0,
        0,0,738,742,5,23,0,0,739,740,5,42,0,0,740,742,5,41,0,0,741,738,1,
        0,0,0,741,739,1,0,0,0,742,744,1,0,0,0,743,745,3,98,49,0,744,743,
        1,0,0,0,744,745,1,0,0,0,745,780,1,0,0,0,746,748,5,171,0,0,747,746,
        1,0,0,0,747,748,1,0,0,0,748,750,1,0,0,0,749,751,5,43,0,0,750,749,
        1,0,0,0,750,751,1,0,0,0,751,752,1,0,0,0,752,754,5,41,0,0,753,755,
        3,90,45,0,754,753,1,0,0,0,754,755,1,0,0,0,755,757,1,0,0,0,756,758,
        3,50,25,0,757,756,1,0,0,0,757,758,1,0,0,0,758,760,1,0,0,0,759,761,
        3,98,49,0,760,759,1,0,0,0,760,761,1,0,0,0,761,780,1,0,0,0,762,764,
        5,171,0,0,763,762,1,0,0,0,763,764,1,0,0,0,764,765,1,0,0,0,765,766,
        5,44,0,0,766,768,5,41,0,0,767,769,3,62,31,0,768,767,1,0,0,0,768,
        769,1,0,0,0,769,771,1,0,0,0,770,772,3,90,45,0,771,770,1,0,0,0,771,
        772,1,0,0,0,772,774,1,0,0,0,773,775,3,50,25,0,774,773,1,0,0,0,774,
        775,1,0,0,0,775,777,1,0,0,0,776,778,3,98,49,0,777,776,1,0,0,0,777,
        778,1,0,0,0,778,780,1,0,0,0,779,736,1,0,0,0,779,747,1,0,0,0,779,
        763,1,0,0,0,780,61,1,0,0,0,781,782,5,326,0,0,782,63,1,0,0,0,783,
        784,5,45,0,0,784,787,7,6,0,0,785,786,5,64,0,0,786,788,3,148,74,0,
        787,785,1,0,0,0,787,788,1,0,0,0,788,799,1,0,0,0,789,791,5,45,0,0,
        790,792,5,179,0,0,791,790,1,0,0,0,791,792,1,0,0,0,792,793,1,0,0,
        0,793,796,5,52,0,0,794,795,5,64,0,0,795,797,3,148,74,0,796,794,1,
        0,0,0,796,797,1,0,0,0,797,799,1,0,0,0,798,783,1,0,0,0,798,789,1,
        0,0,0,799,65,1,0,0,0,800,801,5,24,0,0,801,67,1,0,0,0,802,807,3,72,
        36,0,803,804,5,1,0,0,804,806,3,72,36,0,805,803,1,0,0,0,806,809,1,
        0,0,0,807,805,1,0,0,0,807,808,1,0,0,0,808,819,1,0,0,0,809,807,1,
        0,0,0,810,815,3,70,35,0,811,812,5,1,0,0,812,814,3,70,35,0,813,811,
        1,0,0,0,814,817,1,0,0,0,815,813,1,0,0,0,815,816,1,0,0,0,816,819,
        1,0,0,0,817,815,1,0,0,0,818,802,1,0,0,0,818,810,1,0,0,0,819,69,1,
        0,0,0,820,821,3,148,74,0,821,822,7,7,0,0,822,823,3,72,36,0,823,71,
        1,0,0,0,824,826,3,148,74,0,825,827,3,74,37,0,826,825,1,0,0,0,826,
        827,1,0,0,0,827,833,1,0,0,0,828,829,5,3,0,0,829,830,3,6,3,0,830,
        831,5,4,0,0,831,833,1,0,0,0,832,824,1,0,0,0,832,828,1,0,0,0,833,
        73,1,0,0,0,834,837,5,5,0,0,835,838,5,330,0,0,836,838,3,148,74,0,
        837,835,1,0,0,0,837,836,1,0,0,0,838,839,1,0,0,0,839,840,5,6,0,0,
        840,75,1,0,0,0,841,842,3,148,74,0,842,843,3,78,39,0,843,77,1,0,0,
        0,844,845,5,306,0,0,845,79,1,0,0,0,846,847,5,297,0,0,847,849,3,84,
        42,0,848,850,3,98,49,0,849,848,1,0,0,0,849,850,1,0,0,0,850,853,1,
        0,0,0,851,852,5,246,0,0,852,854,3,110,55,0,853,851,1,0,0,0,853,854,
        1,0,0,0,854,81,1,0,0,0,855,856,5,297,0,0,856,858,3,84,42,0,857,859,
        3,98,49,0,858,857,1,0,0,0,858,859,1,0,0,0,859,862,1,0,0,0,860,861,
        5,246,0,0,861,863,3,116,58,0,862,860,1,0,0,0,862,863,1,0,0,0,863,
        83,1,0,0,0,864,865,3,148,74,0,865,866,5,2,0,0,866,868,1,0,0,0,867,
        864,1,0,0,0,867,868,1,0,0,0,868,869,1,0,0,0,869,874,3,148,74,0,870,
        871,5,7,0,0,871,873,3,148,74,0,872,870,1,0,0,0,873,876,1,0,0,0,874,
        872,1,0,0,0,874,875,1,0,0,0,875,85,1,0,0,0,876,874,1,0,0,0,877,878,
        7,8,0,0,878,885,5,215,0,0,879,881,5,49,0,0,880,879,1,0,0,0,880,881,
        1,0,0,0,881,882,1,0,0,0,882,883,5,330,0,0,883,885,5,245,0,0,884,
        877,1,0,0,0,884,880,1,0,0,0,885,87,1,0,0,0,886,895,5,96,0,0,887,
        895,5,158,0,0,888,889,5,173,0,0,889,895,5,206,0,0,890,891,5,238,
        0,0,891,895,5,206,0,0,892,893,5,143,0,0,893,895,5,206,0,0,894,886,
        1,0,0,0,894,887,1,0,0,0,894,888,1,0,0,0,894,890,1,0,0,0,894,892,
        1,0,0,0,895,89,1,0,0,0,896,898,3,92,46,0,897,896,1,0,0,0,897,898,
        1,0,0,0,898,899,1,0,0,0,899,900,5,31,0,0,900,903,3,94,47,0,901,902,
        5,72,0,0,902,904,3,100,50,0,903,901,1,0,0,0,903,904,1,0,0,0,904,
        907,1,0,0,0,905,906,5,22,0,0,906,908,3,102,51,0,907,905,1,0,0,0,
        907,908,1,0,0,0,908,920,1,0,0,0,909,911,3,92,46,0,910,909,1,0,0,
        0,910,911,1,0,0,0,911,912,1,0,0,0,912,913,5,31,0,0,913,914,5,72,
        0,0,914,917,3,100,50,0,915,916,5,22,0,0,916,918,3,102,51,0,917,915,
        1,0,0,0,917,918,1,0,0,0,918,920,1,0,0,0,919,897,1,0,0,0,919,910,
        1,0,0,0,920,91,1,0,0,0,921,922,7,9,0,0,922,93,1,0,0,0,923,924,6,
        47,-1,0,924,930,3,96,48,0,925,926,5,3,0,0,926,927,3,94,47,0,927,
        928,5,4,0,0,928,930,1,0,0,0,929,923,1,0,0,0,929,925,1,0,0,0,930,
        936,1,0,0,0,931,932,10,1,0,0,932,933,7,10,0,0,933,935,3,94,47,2,
        934,931,1,0,0,0,935,938,1,0,0,0,936,934,1,0,0,0,936,937,1,0,0,0,
        937,95,1,0,0,0,938,936,1,0,0,0,939,941,5,316,0,0,940,939,1,0,0,0,
        940,941,1,0,0,0,941,942,1,0,0,0,942,950,5,332,0,0,943,945,5,316,
        0,0,944,943,1,0,0,0,944,945,1,0,0,0,945,946,1,0,0,0,946,950,5,330,
        0,0,947,950,5,29,0,0,948,950,5,30,0,0,949,940,1,0,0,0,949,944,1,
        0,0,0,949,947,1,0,0,0,949,948,1,0,0,0,950,97,1,0,0,0,951,952,5,25,
        0,0,952,958,3,130,65,0,953,955,5,25,0,0,954,953,1,0,0,0,954,955,
        1,0,0,0,955,956,1,0,0,0,956,958,3,128,64,0,957,951,1,0,0,0,957,954,
        1,0,0,0,958,99,1,0,0,0,959,964,3,106,53,0,960,961,5,1,0,0,961,963,
        3,106,53,0,962,960,1,0,0,0,963,966,1,0,0,0,964,962,1,0,0,0,964,965,
        1,0,0,0,965,101,1,0,0,0,966,964,1,0,0,0,967,972,3,104,52,0,968,969,
        5,1,0,0,969,971,3,104,52,0,970,968,1,0,0,0,971,974,1,0,0,0,972,970,
        1,0,0,0,972,973,1,0,0,0,973,103,1,0,0,0,974,972,1,0,0,0,975,977,
        3,106,53,0,976,978,7,11,0,0,977,976,1,0,0,0,977,978,1,0,0,0,978,
        105,1,0,0,0,979,980,3,148,74,0,980,107,1,0,0,0,981,986,3,124,62,
        0,982,983,5,1,0,0,983,985,3,124,62,0,984,982,1,0,0,0,985,988,1,0,
        0,0,986,984,1,0,0,0,986,987,1,0,0,0,987,109,1,0,0,0,988,986,1,0,
        0,0,989,994,3,112,56,0,990,991,5,1,0,0,991,993,3,112,56,0,992,990,
        1,0,0,0,993,996,1,0,0,0,994,992,1,0,0,0,994,995,1,0,0,0,995,1000,
        1,0,0,0,996,994,1,0,0,0,997,999,3,114,57,0,998,997,1,0,0,0,999,1002,
        1,0,0,0,1000,998,1,0,0,0,1000,1001,1,0,0,0,1001,111,1,0,0,0,1002,
        1000,1,0,0,0,1003,1006,3,118,59,0,1004,1006,5,317,0,0,1005,1003,
        1,0,0,0,1005,1004,1,0,0,0,1006,113,1,0,0,0,1007,1008,7,12,0,0,1008,
        1013,3,120,60,0,1009,1010,5,1,0,0,1010,1012,3,120,60,0,1011,1009,
        1,0,0,0,1012,1015,1,0,0,0,1013,1011,1,0,0,0,1013,1014,1,0,0,0,1014,
        1019,1,0,0,0,1015,1013,1,0,0,0,1016,1017,5,315,0,0,1017,1019,3,116,
        58,0,1018,1007,1,0,0,0,1018,1016,1,0,0,0,1019,115,1,0,0,0,1020,1025,
        3,118,59,0,1021,1022,5,1,0,0,1022,1024,3,118,59,0,1023,1021,1,0,
        0,0,1024,1027,1,0,0,0,1025,1023,1,0,0,0,1025,1026,1,0,0,0,1026,117,
        1,0,0,0,1027,1025,1,0,0,0,1028,1029,3,120,60,0,1029,1030,5,2,0,0,
        1030,1031,3,122,61,0,1031,119,1,0,0,0,1032,1033,3,148,74,0,1033,
        121,1,0,0,0,1034,1050,3,148,74,0,1035,1036,5,5,0,0,1036,1037,3,122,
        61,0,1037,1038,5,6,0,0,1038,1050,1,0,0,0,1039,1040,5,8,0,0,1040,
        1041,3,116,58,0,1041,1042,5,9,0,0,1042,1050,1,0,0,0,1043,1044,5,
        311,0,0,1044,1045,3,122,61,0,1045,1046,5,1,0,0,1046,1047,3,122,61,
        0,1047,1048,5,313,0,0,1048,1050,1,0,0,0,1049,1034,1,0,0,0,1049,1035,
        1,0,0,0,1049,1039,1,0,0,0,1049,1043,1,0,0,0,1050,123,1,0,0,0,1051,
        1052,3,120,60,0,1052,1053,5,2,0,0,1053,1054,3,120,60,0,1054,125,
        1,0,0,0,1055,1056,3,138,69,0,1056,127,1,0,0,0,1057,1058,5,8,0,0,
        1058,1060,3,130,65,0,1059,1061,5,1,0,0,1060,1059,1,0,0,0,1060,1061,
        1,0,0,0,1061,1062,1,0,0,0,1062,1063,5,9,0,0,1063,1076,1,0,0,0,1064,
        1065,5,8,0,0,1065,1076,5,9,0,0,1066,1067,5,3,0,0,1067,1069,3,130,
        65,0,1068,1070,5,1,0,0,1069,1068,1,0,0,0,1069,1070,1,0,0,0,1070,
        1071,1,0,0,0,1071,1072,5,4,0,0,1072,1076,1,0,0,0,1073,1074,5,3,0,
        0,1074,1076,5,4,0,0,1075,1057,1,0,0,0,1075,1064,1,0,0,0,1075,1066,
        1,0,0,0,1075,1073,1,0,0,0,1076,129,1,0,0,0,1077,1082,3,132,66,0,
        1078,1079,5,1,0,0,1079,1081,3,132,66,0,1080,1078,1,0,0,0,1081,1084,
        1,0,0,0,1082,1080,1,0,0,0,1082,1083,1,0,0,0,1083,131,1,0,0,0,1084,
        1082,1,0,0,0,1085,1086,3,134,67,0,1086,1087,7,7,0,0,1087,1088,3,
        138,69,0,1088,133,1,0,0,0,1089,1092,3,148,74,0,1090,1092,3,142,71,
        0,1091,1089,1,0,0,0,1091,1090,1,0,0,0,1092,135,1,0,0,0,1093,1094,
        5,5,0,0,1094,1099,3,138,69,0,1095,1096,5,1,0,0,1096,1098,3,138,69,
        0,1097,1095,1,0,0,0,1098,1101,1,0,0,0,1099,1097,1,0,0,0,1099,1100,
        1,0,0,0,1100,1103,1,0,0,0,1101,1099,1,0,0,0,1102,1104,5,1,0,0,1103,
        1102,1,0,0,0,1103,1104,1,0,0,0,1104,1105,1,0,0,0,1105,1106,5,6,0,
        0,1106,1110,1,0,0,0,1107,1108,5,5,0,0,1108,1110,5,6,0,0,1109,1093,
        1,0,0,0,1109,1107,1,0,0,0,1110,137,1,0,0,0,1111,1118,3,142,71,0,
        1112,1118,3,140,70,0,1113,1118,3,128,64,0,1114,1118,3,136,68,0,1115,
        1118,3,144,72,0,1116,1118,3,146,73,0,1117,1111,1,0,0,0,1117,1112,
        1,0,0,0,1117,1113,1,0,0,0,1117,1114,1,0,0,0,1117,1115,1,0,0,0,1117,
        1116,1,0,0,0,1118,139,1,0,0,0,1119,1120,3,418,209,0,1120,141,1,0,
        0,0,1121,1122,5,326,0,0,1122,143,1,0,0,0,1123,1124,7,13,0,0,1124,
        145,1,0,0,0,1125,1126,7,14,0,0,1126,147,1,0,0,0,1127,1128,3,412,
        206,0,1128,149,1,0,0,0,1129,1133,3,164,82,0,1130,1132,5,13,0,0,1131,
        1130,1,0,0,0,1132,1135,1,0,0,0,1133,1131,1,0,0,0,1133,1134,1,0,0,
        0,1134,1136,1,0,0,0,1135,1133,1,0,0,0,1136,1137,5,0,0,1,1137,151,
        1,0,0,0,1138,1139,3,328,164,0,1139,1140,5,0,0,1,1140,153,1,0,0,0,
        1141,1142,3,324,162,0,1142,1143,5,0,0,1,1143,155,1,0,0,0,1144,1145,
        3,322,161,0,1145,1146,5,0,0,1,1146,157,1,0,0,0,1147,1148,3,326,163,
        0,1148,1149,5,0,0,1,1149,159,1,0,0,0,1150,1151,3,376,188,0,1151,
        1152,5,0,0,1,1152,161,1,0,0,0,1153,1154,3,382,191,0,1154,1155,5,
        0,0,1,1155,163,1,0,0,0,1156,1862,3,180,90,0,1157,1159,3,196,98,0,
        1158,1157,1,0,0,0,1158,1159,1,0,0,0,1159,1160,1,0,0,0,1160,1862,
        3,224,112,0,1161,1163,5,295,0,0,1162,1164,5,191,0,0,1163,1162,1,
        0,0,0,1163,1164,1,0,0,0,1164,1165,1,0,0,0,1165,1862,3,322,161,0,
        1166,1167,5,95,0,0,1167,1171,3,190,95,0,1168,1169,5,152,0,0,1169,
        1170,5,195,0,0,1170,1172,5,125,0,0,1171,1168,1,0,0,0,1171,1172,1,
        0,0,0,1172,1173,1,0,0,0,1173,1181,3,322,161,0,1174,1180,3,178,89,
        0,1175,1180,3,176,88,0,1176,1177,5,304,0,0,1177,1178,7,15,0,0,1178,
        1180,3,204,102,0,1179,1174,1,0,0,0,1179,1175,1,0,0,0,1179,1176,1,
        0,0,0,1180,1183,1,0,0,0,1181,1179,1,0,0,0,1181,1182,1,0,0,0,1182,
        1862,1,0,0,0,1183,1181,1,0,0,0,1184,1185,5,57,0,0,1185,1186,3,190,
        95,0,1186,1187,3,322,161,0,1187,1188,5,254,0,0,1188,1189,7,15,0,
        0,1189,1190,3,204,102,0,1190,1862,1,0,0,0,1191,1192,5,57,0,0,1192,
        1193,3,190,95,0,1193,1194,3,322,161,0,1194,1195,5,254,0,0,1195,1196,
        3,176,88,0,1196,1862,1,0,0,0,1197,1198,5,118,0,0,1198,1201,3,190,
        95,0,1199,1200,5,152,0,0,1200,1202,5,125,0,0,1201,1199,1,0,0,0,1201,
        1202,1,0,0,0,1202,1203,1,0,0,0,1203,1205,3,322,161,0,1204,1206,7,
        16,0,0,1205,1204,1,0,0,0,1205,1206,1,0,0,0,1206,1862,1,0,0,0,1207,
        1208,5,257,0,0,1208,1211,7,17,0,0,1209,1210,7,18,0,0,1210,1212,3,
        322,161,0,1211,1209,1,0,0,0,1211,1212,1,0,0,0,1212,1217,1,0,0,0,
        1213,1215,5,174,0,0,1214,1213,1,0,0,0,1214,1215,1,0,0,0,1215,1216,
        1,0,0,0,1216,1218,5,326,0,0,1217,1214,1,0,0,0,1217,1218,1,0,0,0,
        1218,1862,1,0,0,0,1219,1224,3,168,84,0,1220,1221,5,3,0,0,1221,1222,
        3,382,191,0,1222,1223,5,4,0,0,1223,1225,1,0,0,0,1224,1220,1,0,0,
        0,1224,1225,1,0,0,0,1225,1226,1,0,0,0,1226,1227,3,200,100,0,1227,
        1232,3,202,101,0,1228,1230,5,64,0,0,1229,1228,1,0,0,0,1229,1230,
        1,0,0,0,1230,1231,1,0,0,0,1231,1233,3,180,90,0,1232,1229,1,0,0,0,
        1232,1233,1,0,0,0,1233,1862,1,0,0,0,1234,1239,3,168,84,0,1235,1236,
        5,3,0,0,1236,1237,3,382,191,0,1237,1238,5,4,0,0,1238,1240,1,0,0,
        0,1239,1235,1,0,0,0,1239,1240,1,0,0,0,1240,1262,1,0,0,0,1241,1261,
        3,178,89,0,1242,1243,5,213,0,0,1243,1244,5,72,0,0,1244,1245,5,3,
        0,0,1245,1246,3,382,191,0,1246,1247,5,4,0,0,1247,1252,1,0,0,0,1248,
        1249,5,213,0,0,1249,1250,5,72,0,0,1250,1252,3,298,149,0,1251,1242,
        1,0,0,0,1251,1248,1,0,0,0,1252,1261,1,0,0,0,1253,1261,3,172,86,0,
        1254,1261,3,174,87,0,1255,1261,3,318,159,0,1256,1261,3,216,108,0,
        1257,1261,3,176,88,0,1258,1259,5,272,0,0,1259,1261,3,204,102,0,1260,
        1241,1,0,0,0,1260,1251,1,0,0,0,1260,1253,1,0,0,0,1260,1254,1,0,0,
        0,1260,1255,1,0,0,0,1260,1256,1,0,0,0,1260,1257,1,0,0,0,1260,1258,
        1,0,0,0,1261,1264,1,0,0,0,1262,1260,1,0,0,0,1262,1263,1,0,0,0,1263,
        1269,1,0,0,0,1264,1262,1,0,0,0,1265,1267,5,64,0,0,1266,1265,1,0,
        0,0,1266,1267,1,0,0,0,1267,1268,1,0,0,0,1268,1270,3,180,90,0,1269,
        1266,1,0,0,0,1269,1270,1,0,0,0,1270,1862,1,0,0,0,1271,1272,5,95,
        0,0,1272,1276,5,269,0,0,1273,1274,5,152,0,0,1274,1275,5,195,0,0,
        1275,1277,5,125,0,0,1276,1273,1,0,0,0,1276,1277,1,0,0,0,1277,1278,
        1,0,0,0,1278,1279,3,324,162,0,1279,1280,5,174,0,0,1280,1289,3,324,
        162,0,1281,1288,3,200,100,0,1282,1288,3,318,159,0,1283,1288,3,216,
        108,0,1284,1288,3,176,88,0,1285,1286,5,272,0,0,1286,1288,3,204,102,
        0,1287,1281,1,0,0,0,1287,1282,1,0,0,0,1287,1283,1,0,0,0,1287,1284,
        1,0,0,0,1287,1285,1,0,0,0,1288,1291,1,0,0,0,1289,1287,1,0,0,0,1289,
        1290,1,0,0,0,1290,1862,1,0,0,0,1291,1289,1,0,0,0,1292,1297,3,170,
        85,0,1293,1294,5,3,0,0,1294,1295,3,382,191,0,1295,1296,5,4,0,0,1296,
        1298,1,0,0,0,1297,1293,1,0,0,0,1297,1298,1,0,0,0,1298,1299,1,0,0,
        0,1299,1300,3,200,100,0,1300,1305,3,202,101,0,1301,1303,5,64,0,0,
        1302,1301,1,0,0,0,1302,1303,1,0,0,0,1303,1304,1,0,0,0,1304,1306,
        3,180,90,0,1305,1302,1,0,0,0,1305,1306,1,0,0,0,1306,1862,1,0,0,0,
        1307,1308,5,58,0,0,1308,1309,5,269,0,0,1309,1311,3,322,161,0,1310,
        1312,3,186,93,0,1311,1310,1,0,0,0,1311,1312,1,0,0,0,1312,1313,1,
        0,0,0,1313,1314,5,91,0,0,1314,1322,5,263,0,0,1315,1323,3,412,206,
        0,1316,1317,5,138,0,0,1317,1318,5,86,0,0,1318,1323,3,300,150,0,1319,
        1320,5,138,0,0,1320,1321,5,56,0,0,1321,1323,5,86,0,0,1322,1315,1,
        0,0,0,1322,1316,1,0,0,0,1322,1319,1,0,0,0,1322,1323,1,0,0,0,1323,
        1862,1,0,0,0,1324,1325,5,57,0,0,1325,1326,5,269,0,0,1326,1327,3,
        322,161,0,1327,1328,5,54,0,0,1328,1329,7,19,0,0,1329,1330,3,378,
        189,0,1330,1862,1,0,0,0,1331,1332,5,57,0,0,1332,1333,5,269,0,0,1333,
        1334,3,322,161,0,1334,1335,5,54,0,0,1335,1336,7,19,0,0,1336,1337,
        5,3,0,0,1337,1338,3,378,189,0,1338,1339,5,4,0,0,1339,1862,1,0,0,
        0,1340,1341,5,57,0,0,1341,1342,5,269,0,0,1342,1343,3,322,161,0,1343,
        1344,5,232,0,0,1344,1345,5,85,0,0,1345,1346,3,322,161,0,1346,1347,
        5,276,0,0,1347,1348,3,408,204,0,1348,1862,1,0,0,0,1349,1350,5,57,
        0,0,1350,1351,5,269,0,0,1351,1352,3,322,161,0,1352,1353,5,118,0,
        0,1353,1354,7,19,0,0,1354,1355,5,3,0,0,1355,1356,3,320,160,0,1356,
        1357,5,4,0,0,1357,1862,1,0,0,0,1358,1359,5,57,0,0,1359,1360,5,269,
        0,0,1360,1361,3,322,161,0,1361,1362,5,118,0,0,1362,1363,7,19,0,0,
        1363,1364,3,320,160,0,1364,1862,1,0,0,0,1365,1366,5,57,0,0,1366,
        1367,7,20,0,0,1367,1368,3,322,161,0,1368,1369,5,232,0,0,1369,1370,
        5,276,0,0,1370,1371,3,322,161,0,1371,1862,1,0,0,0,1372,1373,5,57,
        0,0,1373,1374,7,20,0,0,1374,1375,3,322,161,0,1375,1376,5,254,0,0,
        1376,1377,5,272,0,0,1377,1378,3,204,102,0,1378,1862,1,0,0,0,1379,
        1380,5,57,0,0,1380,1381,7,20,0,0,1381,1382,3,322,161,0,1382,1383,
        5,293,0,0,1383,1386,5,272,0,0,1384,1385,5,152,0,0,1385,1387,5,125,
        0,0,1386,1384,1,0,0,0,1386,1387,1,0,0,0,1387,1388,1,0,0,0,1388,1389,
        3,204,102,0,1389,1862,1,0,0,0,1390,1391,5,57,0,0,1391,1392,5,269,
        0,0,1392,1393,3,322,161,0,1393,1395,7,21,0,0,1394,1396,5,85,0,0,
        1395,1394,1,0,0,0,1395,1396,1,0,0,0,1396,1397,1,0,0,0,1397,1399,
        3,322,161,0,1398,1400,3,420,210,0,1399,1398,1,0,0,0,1399,1400,1,
        0,0,0,1400,1862,1,0,0,0,1401,1402,5,57,0,0,1402,1403,5,269,0,0,1403,
        1405,3,322,161,0,1404,1406,3,186,93,0,1405,1404,1,0,0,0,1405,1406,
        1,0,0,0,1406,1407,1,0,0,0,1407,1409,5,77,0,0,1408,1410,5,85,0,0,
        1409,1408,1,0,0,0,1409,1410,1,0,0,0,1410,1411,1,0,0,0,1411,1412,
        3,322,161,0,1412,1414,3,384,192,0,1413,1415,3,374,187,0,1414,1413,
        1,0,0,0,1414,1415,1,0,0,0,1415,1862,1,0,0,0,1416,1417,5,57,0,0,1417,
        1418,5,269,0,0,1418,1420,3,322,161,0,1419,1421,3,186,93,0,1420,1419,
        1,0,0,0,1420,1421,1,0,0,0,1421,1422,1,0,0,0,1422,1423,5,234,0,0,
        1423,1424,5,86,0,0,1424,1425,5,3,0,0,1425,1426,3,378,189,0,1426,
        1427,5,4,0,0,1427,1862,1,0,0,0,1428,1429,5,57,0,0,1429,1430,5,269,
        0,0,1430,1432,3,322,161,0,1431,1433,3,186,93,0,1432,1431,1,0,0,0,
        1432,1433,1,0,0,0,1433,1434,1,0,0,0,1434,1435,5,254,0,0,1435,1436,
        5,251,0,0,1436,1440,5,326,0,0,1437,1438,5,304,0,0,1438,1439,5,252,
        0,0,1439,1441,3,204,102,0,1440,1437,1,0,0,0,1440,1441,1,0,0,0,1441,
        1862,1,0,0,0,1442,1443,5,57,0,0,1443,1444,5,269,0,0,1444,1446,3,
        322,161,0,1445,1447,3,186,93,0,1446,1445,1,0,0,0,1446,1447,1,0,0,
        0,1447,1448,1,0,0,0,1448,1449,5,254,0,0,1449,1450,5,252,0,0,1450,
        1451,3,204,102,0,1451,1862,1,0,0,0,1452,1453,5,57,0,0,1453,1454,
        7,20,0,0,1454,1455,3,322,161,0,1455,1459,5,54,0,0,1456,1457,5,152,
        0,0,1457,1458,5,195,0,0,1458,1460,5,125,0,0,1459,1456,1,0,0,0,1459,
        1460,1,0,0,0,1460,1462,1,0,0,0,1461,1463,3,184,92,0,1462,1461,1,
        0,0,0,1463,1464,1,0,0,0,1464,1462,1,0,0,0,1464,1465,1,0,0,0,1465,
        1862,1,0,0,0,1466,1467,5,57,0,0,1467,1468,5,269,0,0,1468,1469,3,
        322,161,0,1469,1470,3,186,93,0,1470,1471,5,232,0,0,1471,1472,5,276,
        0,0,1472,1473,3,186,93,0,1473,1862,1,0,0,0,1474,1475,5,57,0,0,1475,
        1476,7,20,0,0,1476,1477,3,322,161,0,1477,1480,5,118,0,0,1478,1479,
        5,152,0,0,1479,1481,5,125,0,0,1480,1478,1,0,0,0,1480,1481,1,0,0,
        0,1481,1482,1,0,0,0,1482,1487,3,186,93,0,1483,1484,5,1,0,0,1484,
        1486,3,186,93,0,1485,1483,1,0,0,0,1486,1489,1,0,0,0,1487,1485,1,
        0,0,0,1487,1488,1,0,0,0,1488,1491,1,0,0,0,1489,1487,1,0,0,0,1490,
        1492,5,223,0,0,1491,1490,1,0,0,0,1491,1492,1,0,0,0,1492,1862,1,0,
        0,0,1493,1494,5,57,0,0,1494,1495,5,269,0,0,1495,1497,3,322,161,0,
        1496,1498,3,186,93,0,1497,1496,1,0,0,0,1497,1498,1,0,0,0,1498,1499,
        1,0,0,0,1499,1500,5,254,0,0,1500,1501,3,176,88,0,1501,1862,1,0,0,
        0,1502,1503,5,57,0,0,1503,1504,5,269,0,0,1504,1505,3,322,161,0,1505,
        1506,5,228,0,0,1506,1507,5,214,0,0,1507,1862,1,0,0,0,1508,1509,5,
        118,0,0,1509,1512,5,269,0,0,1510,1511,5,152,0,0,1511,1513,5,125,
        0,0,1512,1510,1,0,0,0,1512,1513,1,0,0,0,1513,1514,1,0,0,0,1514,1516,
        3,322,161,0,1515,1517,5,223,0,0,1516,1515,1,0,0,0,1516,1517,1,0,
        0,0,1517,1862,1,0,0,0,1518,1519,5,118,0,0,1519,1522,5,299,0,0,1520,
        1521,5,152,0,0,1521,1523,5,125,0,0,1522,1520,1,0,0,0,1522,1523,1,
        0,0,0,1523,1524,1,0,0,0,1524,1862,3,322,161,0,1525,1528,5,95,0,0,
        1526,1527,5,203,0,0,1527,1529,5,234,0,0,1528,1526,1,0,0,0,1528,1529,
        1,0,0,0,1529,1534,1,0,0,0,1530,1532,5,146,0,0,1531,1530,1,0,0,0,
        1531,1532,1,0,0,0,1532,1533,1,0,0,0,1533,1535,5,273,0,0,1534,1531,
        1,0,0,0,1534,1535,1,0,0,0,1535,1536,1,0,0,0,1536,1540,5,299,0,0,
        1537,1538,5,152,0,0,1538,1539,5,195,0,0,1539,1541,5,125,0,0,1540,
        1537,1,0,0,0,1540,1541,1,0,0,0,1541,1542,1,0,0,0,1542,1544,3,322,
        161,0,1543,1545,3,306,153,0,1544,1543,1,0,0,0,1544,1545,1,0,0,0,
        1545,1554,1,0,0,0,1546,1553,3,178,89,0,1547,1548,5,213,0,0,1548,
        1549,5,199,0,0,1549,1553,3,298,149,0,1550,1551,5,272,0,0,1551,1553,
        3,204,102,0,1552,1546,1,0,0,0,1552,1547,1,0,0,0,1552,1550,1,0,0,
        0,1553,1556,1,0,0,0,1554,1552,1,0,0,0,1554,1555,1,0,0,0,1555,1557,
        1,0,0,0,1556,1554,1,0,0,0,1557,1558,5,64,0,0,1558,1559,3,180,90,
        0,1559,1862,1,0,0,0,1560,1563,5,95,0,0,1561,1562,5,203,0,0,1562,
        1564,5,234,0,0,1563,1561,1,0,0,0,1563,1564,1,0,0,0,1564,1566,1,0,
        0,0,1565,1567,5,146,0,0,1566,1565,1,0,0,0,1566,1567,1,0,0,0,1567,
        1568,1,0,0,0,1568,1569,5,273,0,0,1569,1570,5,299,0,0,1570,1575,3,
        324,162,0,1571,1572,5,3,0,0,1572,1573,3,382,191,0,1573,1574,5,4,
        0,0,1574,1576,1,0,0,0,1575,1571,1,0,0,0,1575,1576,1,0,0,0,1576,1577,
        1,0,0,0,1577,1580,3,200,100,0,1578,1579,5,202,0,0,1579,1581,3,204,
        102,0,1580,1578,1,0,0,0,1580,1581,1,0,0,0,1581,1862,1,0,0,0,1582,
        1583,5,57,0,0,1583,1584,5,299,0,0,1584,1586,3,322,161,0,1585,1587,
        5,64,0,0,1586,1585,1,0,0,0,1586,1587,1,0,0,0,1587,1588,1,0,0,0,1588,
        1589,3,180,90,0,1589,1862,1,0,0,0,1590,1593,5,95,0,0,1591,1592,5,
        203,0,0,1592,1594,5,234,0,0,1593,1591,1,0,0,0,1593,1594,1,0,0,0,
        1594,1596,1,0,0,0,1595,1597,5,273,0,0,1596,1595,1,0,0,0,1596,1597,
        1,0,0,0,1597,1598,1,0,0,0,1598,1602,5,144,0,0,1599,1600,5,152,0,
        0,1600,1601,5,195,0,0,1601,1603,5,125,0,0,1602,1599,1,0,0,0,1602,
        1603,1,0,0,0,1603,1604,1,0,0,0,1604,1605,3,322,161,0,1605,1606,5,
        64,0,0,1606,1616,5,326,0,0,1607,1608,5,297,0,0,1608,1613,3,222,111,
        0,1609,1610,5,1,0,0,1610,1612,3,222,111,0,1611,1609,1,0,0,0,1612,
        1615,1,0,0,0,1613,1611,1,0,0,0,1613,1614,1,0,0,0,1614,1617,1,0,0,
        0,1615,1613,1,0,0,0,1616,1607,1,0,0,0,1616,1617,1,0,0,0,1617,1862,
        1,0,0,0,1618,1620,5,118,0,0,1619,1621,5,273,0,0,1620,1619,1,0,0,
        0,1620,1621,1,0,0,0,1621,1622,1,0,0,0,1622,1625,5,144,0,0,1623,1624,
        5,152,0,0,1624,1626,5,125,0,0,1625,1623,1,0,0,0,1625,1626,1,0,0,
        0,1626,1627,1,0,0,0,1627,1862,3,322,161,0,1628,1630,5,126,0,0,1629,
        1631,7,22,0,0,1630,1629,1,0,0,0,1630,1631,1,0,0,0,1631,1632,1,0,
        0,0,1632,1862,3,164,82,0,1633,1634,5,257,0,0,1634,1637,5,270,0,0,
        1635,1636,7,18,0,0,1636,1638,3,322,161,0,1637,1635,1,0,0,0,1637,
        1638,1,0,0,0,1638,1643,1,0,0,0,1639,1641,5,174,0,0,1640,1639,1,0,
        0,0,1640,1641,1,0,0,0,1641,1642,1,0,0,0,1642,1644,5,326,0,0,1643,
        1640,1,0,0,0,1643,1644,1,0,0,0,1644,1862,1,0,0,0,1645,1646,5,257,
        0,0,1646,1647,5,269,0,0,1647,1650,5,128,0,0,1648,1649,7,18,0,0,1649,
        1651,3,322,161,0,1650,1648,1,0,0,0,1650,1651,1,0,0,0,1651,1652,1,
        0,0,0,1652,1653,5,174,0,0,1653,1655,5,326,0,0,1654,1656,3,186,93,
        0,1655,1654,1,0,0,0,1655,1656,1,0,0,0,1656,1862,1,0,0,0,1657,1658,
        5,257,0,0,1658,1659,5,272,0,0,1659,1664,3,322,161,0,1660,1661,5,
        3,0,0,1661,1662,3,208,104,0,1662,1663,5,4,0,0,1663,1665,1,0,0,0,
        1664,1660,1,0,0,0,1664,1665,1,0,0,0,1665,1862,1,0,0,0,1666,1667,
        5,257,0,0,1667,1668,5,86,0,0,1668,1669,7,18,0,0,1669,1672,3,322,
        161,0,1670,1671,7,18,0,0,1671,1673,3,322,161,0,1672,1670,1,0,0,0,
        1672,1673,1,0,0,0,1673,1862,1,0,0,0,1674,1675,5,257,0,0,1675,1678,
        5,300,0,0,1676,1677,7,18,0,0,1677,1679,3,322,161,0,1678,1676,1,0,
        0,0,1678,1679,1,0,0,0,1679,1684,1,0,0,0,1680,1682,5,174,0,0,1681,
        1680,1,0,0,0,1681,1682,1,0,0,0,1682,1683,1,0,0,0,1683,1685,5,326,
        0,0,1684,1681,1,0,0,0,1684,1685,1,0,0,0,1685,1862,1,0,0,0,1686,1687,
        5,257,0,0,1687,1688,5,214,0,0,1688,1690,3,322,161,0,1689,1691,3,
        186,93,0,1690,1689,1,0,0,0,1690,1691,1,0,0,0,1691,1862,1,0,0,0,1692,
        1694,5,257,0,0,1693,1695,3,412,206,0,1694,1693,1,0,0,0,1694,1695,
        1,0,0,0,1695,1696,1,0,0,0,1696,1704,5,145,0,0,1697,1699,5,174,0,
        0,1698,1697,1,0,0,0,1698,1699,1,0,0,0,1699,1702,1,0,0,0,1700,1703,
        3,322,161,0,1701,1703,5,326,0,0,1702,1700,1,0,0,0,1702,1701,1,0,
        0,0,1703,1705,1,0,0,0,1704,1698,1,0,0,0,1704,1705,1,0,0,0,1705,1862,
        1,0,0,0,1706,1707,5,257,0,0,1707,1708,5,95,0,0,1708,1709,5,269,0,
        0,1709,1712,3,322,161,0,1710,1711,5,64,0,0,1711,1713,5,251,0,0,1712,
        1710,1,0,0,0,1712,1713,1,0,0,0,1713,1862,1,0,0,0,1714,1715,5,257,
        0,0,1715,1716,5,98,0,0,1716,1862,5,191,0,0,1717,1718,7,23,0,0,1718,
        1720,5,144,0,0,1719,1721,5,128,0,0,1720,1719,1,0,0,0,1720,1721,1,
        0,0,0,1721,1722,1,0,0,0,1722,1862,3,192,96,0,1723,1724,7,23,0,0,
        1724,1726,3,190,95,0,1725,1727,5,128,0,0,1726,1725,1,0,0,0,1726,
        1727,1,0,0,0,1727,1728,1,0,0,0,1728,1729,3,322,161,0,1729,1862,1,
        0,0,0,1730,1732,7,23,0,0,1731,1733,5,269,0,0,1732,1731,1,0,0,0,1732,
        1733,1,0,0,0,1733,1735,1,0,0,0,1734,1736,7,24,0,0,1735,1734,1,0,
        0,0,1735,1736,1,0,0,0,1736,1737,1,0,0,0,1737,1739,3,322,161,0,1738,
        1740,3,186,93,0,1739,1738,1,0,0,0,1739,1740,1,0,0,0,1740,1742,1,
        0,0,0,1741,1743,3,194,97,0,1742,1741,1,0,0,0,1742,1743,1,0,0,0,1743,
        1862,1,0,0,0,1744,1746,7,23,0,0,1745,1747,5,224,0,0,1746,1745,1,
        0,0,0,1746,1747,1,0,0,0,1747,1748,1,0,0,0,1748,1862,3,180,90,0,1749,
        1750,5,87,0,0,1750,1751,5,199,0,0,1751,1752,3,190,95,0,1752,1753,
        3,322,161,0,1753,1754,5,165,0,0,1754,1755,7,25,0,0,1755,1862,1,0,
        0,0,1756,1757,5,87,0,0,1757,1758,5,199,0,0,1758,1759,5,269,0,0,1759,
        1760,3,322,161,0,1760,1761,5,165,0,0,1761,1762,7,25,0,0,1762,1862,
        1,0,0,0,1763,1764,5,231,0,0,1764,1765,5,269,0,0,1765,1862,3,322,
        161,0,1766,1774,5,231,0,0,1767,1775,5,326,0,0,1768,1770,9,0,0,0,
        1769,1768,1,0,0,0,1770,1773,1,0,0,0,1771,1772,1,0,0,0,1771,1769,
        1,0,0,0,1772,1775,1,0,0,0,1773,1771,1,0,0,0,1774,1767,1,0,0,0,1774,
        1771,1,0,0,0,1775,1862,1,0,0,0,1776,1778,5,73,0,0,1777,1779,5,171,
        0,0,1778,1777,1,0,0,0,1778,1779,1,0,0,0,1779,1780,1,0,0,0,1780,1781,
        5,269,0,0,1781,1784,3,322,161,0,1782,1783,5,202,0,0,1783,1785,3,
        204,102,0,1784,1782,1,0,0,0,1784,1785,1,0,0,0,1785,1790,1,0,0,0,
        1786,1788,5,64,0,0,1787,1786,1,0,0,0,1787,1788,1,0,0,0,1788,1789,
        1,0,0,0,1789,1791,3,180,90,0,1790,1787,1,0,0,0,1790,1791,1,0,0,0,
        1791,1862,1,0,0,0,1792,1793,5,288,0,0,1793,1796,5,269,0,0,1794,1795,
        5,152,0,0,1795,1797,5,125,0,0,1796,1794,1,0,0,0,1796,1797,1,0,0,
        0,1797,1798,1,0,0,0,1798,1862,3,322,161,0,1799,1800,5,79,0,0,1800,
        1862,5,73,0,0,1801,1802,5,178,0,0,1802,1804,5,103,0,0,1803,1805,
        5,179,0,0,1804,1803,1,0,0,0,1804,1805,1,0,0,0,1805,1806,1,0,0,0,
        1806,1807,5,159,0,0,1807,1809,5,326,0,0,1808,1810,5,211,0,0,1809,
        1808,1,0,0,0,1809,1810,1,0,0,0,1810,1811,1,0,0,0,1811,1812,5,164,
        0,0,1812,1813,5,269,0,0,1813,1815,3,322,161,0,1814,1816,3,186,93,
        0,1815,1814,1,0,0,0,1815,1816,1,0,0,0,1816,1862,1,0,0,0,1817,1818,
        5,284,0,0,1818,1819,5,269,0,0,1819,1821,3,322,161,0,1820,1822,3,
        186,93,0,1821,1820,1,0,0,0,1821,1822,1,0,0,0,1822,1862,1,0,0,0,1823,
        1824,5,190,0,0,1824,1825,5,233,0,0,1825,1826,5,269,0,0,1826,1862,
        3,322,161,0,1827,1828,7,26,0,0,1828,1836,3,412,206,0,1829,1837,5,
        326,0,0,1830,1832,9,0,0,0,1831,1830,1,0,0,0,1832,1835,1,0,0,0,1833,
        1834,1,0,0,0,1833,1831,1,0,0,0,1834,1837,1,0,0,0,1835,1833,1,0,0,
        0,1836,1829,1,0,0,0,1836,1833,1,0,0,0,1837,1862,1,0,0,0,1838,1839,
        5,254,0,0,1839,1843,5,240,0,0,1840,1842,9,0,0,0,1841,1840,1,0,0,
        0,1842,1845,1,0,0,0,1843,1844,1,0,0,0,1843,1841,1,0,0,0,1844,1862,
        1,0,0,0,1845,1843,1,0,0,0,1846,1850,5,254,0,0,1847,1849,9,0,0,0,
        1848,1847,1,0,0,0,1849,1852,1,0,0,0,1850,1851,1,0,0,0,1850,1848,
        1,0,0,0,1851,1862,1,0,0,0,1852,1850,1,0,0,0,1853,1862,5,235,0,0,
        1854,1858,3,166,83,0,1855,1857,9,0,0,0,1856,1855,1,0,0,0,1857,1860,
        1,0,0,0,1858,1859,1,0,0,0,1858,1856,1,0,0,0,1859,1862,1,0,0,0,1860,
        1858,1,0,0,0,1861,1156,1,0,0,0,1861,1158,1,0,0,0,1861,1161,1,0,0,
        0,1861,1166,1,0,0,0,1861,1184,1,0,0,0,1861,1191,1,0,0,0,1861,1197,
        1,0,0,0,1861,1207,1,0,0,0,1861,1219,1,0,0,0,1861,1234,1,0,0,0,1861,
        1271,1,0,0,0,1861,1292,1,0,0,0,1861,1307,1,0,0,0,1861,1324,1,0,0,
        0,1861,1331,1,0,0,0,1861,1340,1,0,0,0,1861,1349,1,0,0,0,1861,1358,
        1,0,0,0,1861,1365,1,0,0,0,1861,1372,1,0,0,0,1861,1379,1,0,0,0,1861,
        1390,1,0,0,0,1861,1401,1,0,0,0,1861,1416,1,0,0,0,1861,1428,1,0,0,
        0,1861,1442,1,0,0,0,1861,1452,1,0,0,0,1861,1466,1,0,0,0,1861,1474,
        1,0,0,0,1861,1493,1,0,0,0,1861,1502,1,0,0,0,1861,1508,1,0,0,0,1861,
        1518,1,0,0,0,1861,1525,1,0,0,0,1861,1560,1,0,0,0,1861,1582,1,0,0,
        0,1861,1590,1,0,0,0,1861,1618,1,0,0,0,1861,1628,1,0,0,0,1861,1633,
        1,0,0,0,1861,1645,1,0,0,0,1861,1657,1,0,0,0,1861,1666,1,0,0,0,1861,
        1674,1,0,0,0,1861,1686,1,0,0,0,1861,1692,1,0,0,0,1861,1706,1,0,0,
        0,1861,1714,1,0,0,0,1861,1717,1,0,0,0,1861,1723,1,0,0,0,1861,1730,
        1,0,0,0,1861,1744,1,0,0,0,1861,1749,1,0,0,0,1861,1756,1,0,0,0,1861,
        1763,1,0,0,0,1861,1766,1,0,0,0,1861,1776,1,0,0,0,1861,1792,1,0,0,
        0,1861,1799,1,0,0,0,1861,1801,1,0,0,0,1861,1817,1,0,0,0,1861,1823,
        1,0,0,0,1861,1827,1,0,0,0,1861,1838,1,0,0,0,1861,1846,1,0,0,0,1861,
        1853,1,0,0,0,1861,1854,1,0,0,0,1862,165,1,0,0,0,1863,1864,5,95,0,
        0,1864,2032,5,240,0,0,1865,1866,5,118,0,0,1866,2032,5,240,0,0,1867,
        1869,5,147,0,0,1868,1870,5,240,0,0,1869,1868,1,0,0,0,1869,1870,1,
        0,0,0,1870,2032,1,0,0,0,1871,1873,5,237,0,0,1872,1874,5,240,0,0,
        1873,1872,1,0,0,0,1873,1874,1,0,0,0,1874,2032,1,0,0,0,1875,1876,
        5,257,0,0,1876,2032,5,147,0,0,1877,1878,5,257,0,0,1878,1880,5,240,
        0,0,1879,1881,5,147,0,0,1880,1879,1,0,0,0,1880,1881,1,0,0,0,1881,
        2032,1,0,0,0,1882,1883,5,257,0,0,1883,2032,5,221,0,0,1884,1885,5,
        257,0,0,1885,2032,5,241,0,0,1886,1887,5,257,0,0,1887,1888,5,98,0,
        0,1888,2032,5,241,0,0,1889,1890,5,127,0,0,1890,2032,5,269,0,0,1891,
        1892,5,154,0,0,1892,2032,5,269,0,0,1893,1894,5,257,0,0,1894,2032,
        5,90,0,0,1895,1896,5,257,0,0,1896,1897,5,95,0,0,1897,2032,5,269,
        0,0,1898,1899,5,257,0,0,1899,2032,5,280,0,0,1900,1901,5,257,0,0,
        1901,2032,5,157,0,0,1902,1903,5,257,0,0,1903,2032,5,182,0,0,1904,
        1905,5,95,0,0,1905,2032,5,156,0,0,1906,1907,5,118,0,0,1907,2032,
        5,156,0,0,1908,1909,5,57,0,0,1909,2032,5,156,0,0,1910,1911,5,181,
        0,0,1911,2032,5,269,0,0,1912,1913,5,181,0,0,1913,2032,5,104,0,0,
        1914,1915,5,292,0,0,1915,2032,5,269,0,0,1916,1917,5,292,0,0,1917,
        2032,5,104,0,0,1918,1919,5,95,0,0,1919,1920,5,273,0,0,1920,2032,
        5,184,0,0,1921,1922,5,118,0,0,1922,1923,5,273,0,0,1923,2032,5,184,
        0,0,1924,1925,5,57,0,0,1925,1926,5,269,0,0,1926,1927,3,324,162,0,
        1927,1928,5,195,0,0,1928,1929,5,81,0,0,1929,2032,1,0,0,0,1930,1931,
        5,57,0,0,1931,1932,5,269,0,0,1932,1933,3,324,162,0,1933,1934,5,81,
        0,0,1934,1935,5,72,0,0,1935,2032,1,0,0,0,1936,1937,5,57,0,0,1937,
        1938,5,269,0,0,1938,1939,3,324,162,0,1939,1940,5,195,0,0,1940,1941,
        5,261,0,0,1941,2032,1,0,0,0,1942,1943,5,57,0,0,1943,1944,5,269,0,
        0,1944,1945,3,324,162,0,1945,1946,5,258,0,0,1946,1947,5,72,0,0,1947,
        2032,1,0,0,0,1948,1949,5,57,0,0,1949,1950,5,269,0,0,1950,1951,3,
        324,162,0,1951,1952,5,195,0,0,1952,1953,5,258,0,0,1953,2032,1,0,
        0,0,1954,1955,5,57,0,0,1955,1956,5,269,0,0,1956,1957,3,324,162,0,
        1957,1958,5,195,0,0,1958,1959,5,264,0,0,1959,1960,5,64,0,0,1960,
        1961,5,114,0,0,1961,2032,1,0,0,0,1962,1963,5,57,0,0,1963,1964,5,
        269,0,0,1964,1965,3,324,162,0,1965,1966,5,254,0,0,1966,1967,5,258,
        0,0,1967,1968,5,180,0,0,1968,2032,1,0,0,0,1969,1970,5,57,0,0,1970,
        1971,5,269,0,0,1971,1972,3,324,162,0,1972,1973,5,124,0,0,1973,1974,
        5,212,0,0,1974,2032,1,0,0,0,1975,1976,5,57,0,0,1976,1977,5,269,0,
        0,1977,1978,3,324,162,0,1978,1979,5,62,0,0,1979,1980,5,212,0,0,1980,
        2032,1,0,0,0,1981,1982,5,57,0,0,1982,1983,5,269,0,0,1983,1984,3,
        324,162,0,1984,1985,5,286,0,0,1985,1986,5,212,0,0,1986,2032,1,0,
        0,0,1987,1988,5,57,0,0,1988,1989,5,269,0,0,1989,1990,3,324,162,0,
        1990,1991,5,277,0,0,1991,2032,1,0,0,0,1992,1993,5,57,0,0,1993,1994,
        5,269,0,0,1994,1996,3,324,162,0,1995,1997,3,186,93,0,1996,1995,1,
        0,0,0,1996,1997,1,0,0,0,1997,1998,1,0,0,0,1998,1999,5,89,0,0,1999,
        2032,1,0,0,0,2000,2001,5,57,0,0,2001,2002,5,269,0,0,2002,2004,3,
        324,162,0,2003,2005,3,186,93,0,2004,2003,1,0,0,0,2004,2005,1,0,0,
        0,2005,2006,1,0,0,0,2006,2007,5,92,0,0,2007,2032,1,0,0,0,2008,2009,
        5,57,0,0,2009,2010,5,269,0,0,2010,2012,3,324,162,0,2011,2013,3,186,
        93,0,2012,2011,1,0,0,0,2012,2013,1,0,0,0,2013,2014,1,0,0,0,2014,
        2015,5,254,0,0,2015,2016,5,135,0,0,2016,2032,1,0,0,0,2017,2018,5,
        57,0,0,2018,2019,5,269,0,0,2019,2021,3,324,162,0,2020,2022,3,186,
        93,0,2021,2020,1,0,0,0,2021,2022,1,0,0,0,2022,2023,1,0,0,0,2023,
        2024,5,234,0,0,2024,2025,5,86,0,0,2025,2032,1,0,0,0,2026,2027,5,
        262,0,0,2027,2032,5,279,0,0,2028,2032,5,88,0,0,2029,2032,5,242,0,
        0,2030,2032,5,113,0,0,2031,1863,1,0,0,0,2031,1865,1,0,0,0,2031,1867,
        1,0,0,0,2031,1871,1,0,0,0,2031,1875,1,0,0,0,2031,1877,1,0,0,0,2031,
        1882,1,0,0,0,2031,1884,1,0,0,0,2031,1886,1,0,0,0,2031,1889,1,0,0,
        0,2031,1891,1,0,0,0,2031,1893,1,0,0,0,2031,1895,1,0,0,0,2031,1898,
        1,0,0,0,2031,1900,1,0,0,0,2031,1902,1,0,0,0,2031,1904,1,0,0,0,2031,
        1906,1,0,0,0,2031,1908,1,0,0,0,2031,1910,1,0,0,0,2031,1912,1,0,0,
        0,2031,1914,1,0,0,0,2031,1916,1,0,0,0,2031,1918,1,0,0,0,2031,1921,
        1,0,0,0,2031,1924,1,0,0,0,2031,1930,1,0,0,0,2031,1936,1,0,0,0,2031,
        1942,1,0,0,0,2031,1948,1,0,0,0,2031,1954,1,0,0,0,2031,1962,1,0,0,
        0,2031,1969,1,0,0,0,2031,1975,1,0,0,0,2031,1981,1,0,0,0,2031,1987,
        1,0,0,0,2031,1992,1,0,0,0,2031,2000,1,0,0,0,2031,2008,1,0,0,0,2031,
        2017,1,0,0,0,2031,2026,1,0,0,0,2031,2028,1,0,0,0,2031,2029,1,0,0,
        0,2031,2030,1,0,0,0,2032,167,1,0,0,0,2033,2035,5,95,0,0,2034,2036,
        5,273,0,0,2035,2034,1,0,0,0,2035,2036,1,0,0,0,2036,2038,1,0,0,0,
        2037,2039,5,129,0,0,2038,2037,1,0,0,0,2038,2039,1,0,0,0,2039,2040,
        1,0,0,0,2040,2044,5,269,0,0,2041,2042,5,152,0,0,2042,2043,5,195,
        0,0,2043,2045,5,125,0,0,2044,2041,1,0,0,0,2044,2045,1,0,0,0,2045,
        2046,1,0,0,0,2046,2047,3,322,161,0,2047,169,1,0,0,0,2048,2049,5,
        95,0,0,2049,2051,5,203,0,0,2050,2048,1,0,0,0,2050,2051,1,0,0,0,2051,
        2052,1,0,0,0,2052,2053,5,234,0,0,2053,2054,5,269,0,0,2054,2055,3,
        322,161,0,2055,171,1,0,0,0,2056,2057,5,81,0,0,2057,2058,5,72,0,0,
        2058,2062,3,298,149,0,2059,2060,5,261,0,0,2060,2061,5,72,0,0,2061,
        2063,3,302,151,0,2062,2059,1,0,0,0,2062,2063,1,0,0,0,2063,2064,1,
        0,0,0,2064,2065,5,164,0,0,2065,2066,5,330,0,0,2066,2067,5,71,0,0,
        2067,173,1,0,0,0,2068,2069,5,258,0,0,2069,2070,5,72,0,0,2070,2071,
        3,298,149,0,2071,2074,5,199,0,0,2072,2075,3,212,106,0,2073,2075,
        3,214,107,0,2074,2072,1,0,0,0,2074,2073,1,0,0,0,2075,2079,1,0,0,
        0,2076,2077,5,264,0,0,2077,2078,5,64,0,0,2078,2080,5,114,0,0,2079,
        2076,1,0,0,0,2079,2080,1,0,0,0,2080,175,1,0,0,0,2081,2082,5,180,
        0,0,2082,2083,5,326,0,0,2083,177,1,0,0,0,2084,2085,5,87,0,0,2085,
        2086,5,326,0,0,2086,179,1,0,0,0,2087,2089,3,48,24,0,2088,2087,1,
        0,0,0,2088,2089,1,0,0,0,2089,2091,1,0,0,0,2090,2092,3,196,98,0,2091,
        2090,1,0,0,0,2091,2092,1,0,0,0,2092,2093,1,0,0,0,2093,2094,3,230,
        115,0,2094,2095,3,226,113,0,2095,181,1,0,0,0,2096,2097,5,161,0,0,
        2097,2099,5,211,0,0,2098,2100,5,269,0,0,2099,2098,1,0,0,0,2099,2100,
        1,0,0,0,2100,2101,1,0,0,0,2101,2108,3,322,161,0,2102,2106,3,186,
        93,0,2103,2104,5,152,0,0,2104,2105,5,195,0,0,2105,2107,5,125,0,0,
        2106,2103,1,0,0,0,2106,2107,1,0,0,0,2107,2109,1,0,0,0,2108,2102,
        1,0,0,0,2108,2109,1,0,0,0,2109,2152,1,0,0,0,2110,2111,5,161,0,0,
        2111,2113,5,164,0,0,2112,2114,5,269,0,0,2113,2112,1,0,0,0,2113,2114,
        1,0,0,0,2114,2115,1,0,0,0,2115,2117,3,322,161,0,2116,2118,3,186,
        93,0,2117,2116,1,0,0,0,2117,2118,1,0,0,0,2118,2122,1,0,0,0,2119,
        2120,5,152,0,0,2120,2121,5,195,0,0,2121,2123,5,125,0,0,2122,2119,
        1,0,0,0,2122,2123,1,0,0,0,2123,2152,1,0,0,0,2124,2125,5,161,0,0,
        2125,2127,5,211,0,0,2126,2128,5,179,0,0,2127,2126,1,0,0,0,2127,2128,
        1,0,0,0,2128,2129,1,0,0,0,2129,2130,5,115,0,0,2130,2132,5,326,0,
        0,2131,2133,3,318,159,0,2132,2131,1,0,0,0,2132,2133,1,0,0,0,2133,
        2135,1,0,0,0,2134,2136,3,216,108,0,2135,2134,1,0,0,0,2135,2136,1,
        0,0,0,2136,2152,1,0,0,0,2137,2138,5,161,0,0,2138,2140,5,211,0,0,
        2139,2141,5,179,0,0,2140,2139,1,0,0,0,2140,2141,1,0,0,0,2141,2142,
        1,0,0,0,2142,2144,5,115,0,0,2143,2145,5,326,0,0,2144,2143,1,0,0,
        0,2144,2145,1,0,0,0,2145,2146,1,0,0,0,2146,2149,3,200,100,0,2147,
        2148,5,202,0,0,2148,2150,3,204,102,0,2149,2147,1,0,0,0,2149,2150,
        1,0,0,0,2150,2152,1,0,0,0,2151,2096,1,0,0,0,2151,2110,1,0,0,0,2151,
        2124,1,0,0,0,2151,2137,1,0,0,0,2152,183,1,0,0,0,2153,2155,3,186,
        93,0,2154,2156,3,176,88,0,2155,2154,1,0,0,0,2155,2156,1,0,0,0,2156,
        185,1,0,0,0,2157,2158,5,212,0,0,2158,2159,5,3,0,0,2159,2164,3,188,
        94,0,2160,2161,5,1,0,0,2161,2163,3,188,94,0,2162,2160,1,0,0,0,2163,
        2166,1,0,0,0,2164,2162,1,0,0,0,2164,2165,1,0,0,0,2165,2167,1,0,0,
        0,2166,2164,1,0,0,0,2167,2168,5,4,0,0,2168,187,1,0,0,0,2169,2172,
        3,412,206,0,2170,2171,5,306,0,0,2171,2173,3,348,174,0,2172,2170,
        1,0,0,0,2172,2173,1,0,0,0,2173,189,1,0,0,0,2174,2175,7,27,0,0,2175,
        191,1,0,0,0,2176,2182,3,406,203,0,2177,2182,5,326,0,0,2178,2182,
        3,350,175,0,2179,2182,3,354,177,0,2180,2182,3,356,178,0,2181,2176,
        1,0,0,0,2181,2177,1,0,0,0,2181,2178,1,0,0,0,2181,2179,1,0,0,0,2181,
        2180,1,0,0,0,2182,193,1,0,0,0,2183,2188,3,412,206,0,2184,2185,5,
        7,0,0,2185,2187,3,412,206,0,2186,2184,1,0,0,0,2187,2190,1,0,0,0,
        2188,2186,1,0,0,0,2188,2189,1,0,0,0,2189,195,1,0,0,0,2190,2188,1,
        0,0,0,2191,2192,5,304,0,0,2192,2197,3,198,99,0,2193,2194,5,1,0,0,
        2194,2196,3,198,99,0,2195,2193,1,0,0,0,2196,2199,1,0,0,0,2197,2195,
        1,0,0,0,2197,2198,1,0,0,0,2198,197,1,0,0,0,2199,2197,1,0,0,0,2200,
        2202,3,408,204,0,2201,2203,3,298,149,0,2202,2201,1,0,0,0,2202,2203,
        1,0,0,0,2203,2205,1,0,0,0,2204,2206,5,64,0,0,2205,2204,1,0,0,0,2205,
        2206,1,0,0,0,2206,2207,1,0,0,0,2207,2208,5,3,0,0,2208,2209,3,180,
        90,0,2209,2210,5,4,0,0,2210,199,1,0,0,0,2211,2212,5,297,0,0,2212,
        2213,3,322,161,0,2213,201,1,0,0,0,2214,2215,5,202,0,0,2215,2225,
        3,204,102,0,2216,2217,5,213,0,0,2217,2218,5,72,0,0,2218,2225,3,332,
        166,0,2219,2225,3,172,86,0,2220,2225,3,176,88,0,2221,2225,3,178,
        89,0,2222,2223,5,272,0,0,2223,2225,3,204,102,0,2224,2214,1,0,0,0,
        2224,2216,1,0,0,0,2224,2219,1,0,0,0,2224,2220,1,0,0,0,2224,2221,
        1,0,0,0,2224,2222,1,0,0,0,2225,2228,1,0,0,0,2226,2224,1,0,0,0,2226,
        2227,1,0,0,0,2227,203,1,0,0,0,2228,2226,1,0,0,0,2229,2230,5,3,0,
        0,2230,2235,3,206,103,0,2231,2232,5,1,0,0,2232,2234,3,206,103,0,
        2233,2231,1,0,0,0,2234,2237,1,0,0,0,2235,2233,1,0,0,0,2235,2236,
        1,0,0,0,2236,2238,1,0,0,0,2237,2235,1,0,0,0,2238,2239,5,4,0,0,2239,
        205,1,0,0,0,2240,2245,3,208,104,0,2241,2243,5,306,0,0,2242,2241,
        1,0,0,0,2242,2243,1,0,0,0,2243,2244,1,0,0,0,2244,2246,3,210,105,
        0,2245,2242,1,0,0,0,2245,2246,1,0,0,0,2246,207,1,0,0,0,2247,2252,
        3,412,206,0,2248,2249,5,7,0,0,2249,2251,3,412,206,0,2250,2248,1,
        0,0,0,2251,2254,1,0,0,0,2252,2250,1,0,0,0,2252,2253,1,0,0,0,2253,
        2257,1,0,0,0,2254,2252,1,0,0,0,2255,2257,5,326,0,0,2256,2247,1,0,
        0,0,2256,2255,1,0,0,0,2257,209,1,0,0,0,2258,2263,5,330,0,0,2259,
        2263,5,332,0,0,2260,2263,3,358,179,0,2261,2263,5,326,0,0,2262,2258,
        1,0,0,0,2262,2259,1,0,0,0,2262,2260,1,0,0,0,2262,2261,1,0,0,0,2263,
        211,1,0,0,0,2264,2265,5,3,0,0,2265,2270,3,348,174,0,2266,2267,5,
        1,0,0,2267,2269,3,348,174,0,2268,2266,1,0,0,0,2269,2272,1,0,0,0,
        2270,2268,1,0,0,0,2270,2271,1,0,0,0,2271,2273,1,0,0,0,2272,2270,
        1,0,0,0,2273,2274,5,4,0,0,2274,213,1,0,0,0,2275,2276,5,3,0,0,2276,
        2281,3,212,106,0,2277,2278,5,1,0,0,2278,2280,3,212,106,0,2279,2277,
        1,0,0,0,2280,2283,1,0,0,0,2281,2279,1,0,0,0,2281,2282,1,0,0,0,2282,
        2284,1,0,0,0,2283,2281,1,0,0,0,2284,2285,5,4,0,0,2285,215,1,0,0,
        0,2286,2287,5,264,0,0,2287,2288,5,64,0,0,2288,2293,3,218,109,0,2289,
        2290,5,264,0,0,2290,2291,5,72,0,0,2291,2293,3,220,110,0,2292,2286,
        1,0,0,0,2292,2289,1,0,0,0,2293,217,1,0,0,0,2294,2295,5,160,0,0,2295,
        2296,5,326,0,0,2296,2297,5,207,0,0,2297,2300,5,326,0,0,2298,2300,
        3,412,206,0,2299,2294,1,0,0,0,2299,2298,1,0,0,0,2300,219,1,0,0,0,
        2301,2305,5,326,0,0,2302,2303,5,304,0,0,2303,2304,5,252,0,0,2304,
        2306,3,204,102,0,2305,2302,1,0,0,0,2305,2306,1,0,0,0,2306,221,1,
        0,0,0,2307,2308,3,412,206,0,2308,2309,5,326,0,0,2309,223,1,0,0,0,
        2310,2311,3,182,91,0,2311,2312,3,230,115,0,2312,2313,3,226,113,0,
        2313,2362,1,0,0,0,2314,2316,3,270,135,0,2315,2317,3,228,114,0,2316,
        2315,1,0,0,0,2317,2318,1,0,0,0,2318,2316,1,0,0,0,2318,2319,1,0,0,
        0,2319,2362,1,0,0,0,2320,2321,5,109,0,0,2321,2322,5,142,0,0,2322,
        2323,3,322,161,0,2323,2325,3,316,158,0,2324,2326,3,262,131,0,2325,
        2324,1,0,0,0,2325,2326,1,0,0,0,2326,2362,1,0,0,0,2327,2328,5,294,
        0,0,2328,2329,3,322,161,0,2329,2330,3,316,158,0,2330,2332,3,248,
        124,0,2331,2333,3,262,131,0,2332,2331,1,0,0,0,2332,2333,1,0,0,0,
        2333,2362,1,0,0,0,2334,2335,5,187,0,0,2335,2336,5,164,0,0,2336,2337,
        3,322,161,0,2337,2338,3,316,158,0,2338,2344,5,297,0,0,2339,2345,
        3,322,161,0,2340,2341,5,3,0,0,2341,2342,3,180,90,0,2342,2343,5,4,
        0,0,2343,2345,1,0,0,0,2344,2339,1,0,0,0,2344,2340,1,0,0,0,2345,2346,
        1,0,0,0,2346,2347,3,316,158,0,2347,2348,5,199,0,0,2348,2352,3,340,
        170,0,2349,2351,3,250,125,0,2350,2349,1,0,0,0,2351,2354,1,0,0,0,
        2352,2350,1,0,0,0,2352,2353,1,0,0,0,2353,2358,1,0,0,0,2354,2352,
        1,0,0,0,2355,2357,3,252,126,0,2356,2355,1,0,0,0,2357,2360,1,0,0,
        0,2358,2356,1,0,0,0,2358,2359,1,0,0,0,2359,2362,1,0,0,0,2360,2358,
        1,0,0,0,2361,2310,1,0,0,0,2361,2314,1,0,0,0,2361,2320,1,0,0,0,2361,
        2327,1,0,0,0,2361,2334,1,0,0,0,2362,225,1,0,0,0,2363,2364,5,204,
        0,0,2364,2365,5,72,0,0,2365,2370,3,234,117,0,2366,2367,5,1,0,0,2367,
        2369,3,234,117,0,2368,2366,1,0,0,0,2369,2372,1,0,0,0,2370,2368,1,
        0,0,0,2370,2371,1,0,0,0,2371,2374,1,0,0,0,2372,2370,1,0,0,0,2373,
        2363,1,0,0,0,2373,2374,1,0,0,0,2374,2385,1,0,0,0,2375,2376,5,80,
        0,0,2376,2377,5,72,0,0,2377,2382,3,338,169,0,2378,2379,5,1,0,0,2379,
        2381,3,338,169,0,2380,2378,1,0,0,0,2381,2384,1,0,0,0,2382,2380,1,
        0,0,0,2382,2383,1,0,0,0,2383,2386,1,0,0,0,2384,2382,1,0,0,0,2385,
        2375,1,0,0,0,2385,2386,1,0,0,0,2386,2397,1,0,0,0,2387,2388,5,117,
        0,0,2388,2389,5,72,0,0,2389,2394,3,338,169,0,2390,2391,5,1,0,0,2391,
        2393,3,338,169,0,2392,2390,1,0,0,0,2393,2396,1,0,0,0,2394,2392,1,
        0,0,0,2394,2395,1,0,0,0,2395,2398,1,0,0,0,2396,2394,1,0,0,0,2397,
        2387,1,0,0,0,2397,2398,1,0,0,0,2398,2409,1,0,0,0,2399,2400,5,260,
        0,0,2400,2401,5,72,0,0,2401,2406,3,234,117,0,2402,2403,5,1,0,0,2403,
        2405,3,234,117,0,2404,2402,1,0,0,0,2405,2408,1,0,0,0,2406,2404,1,
        0,0,0,2406,2407,1,0,0,0,2407,2410,1,0,0,0,2408,2406,1,0,0,0,2409,
        2399,1,0,0,0,2409,2410,1,0,0,0,2410,2412,1,0,0,0,2411,2413,3,392,
        196,0,2412,2411,1,0,0,0,2412,2413,1,0,0,0,2413,2419,1,0,0,0,2414,
        2417,5,175,0,0,2415,2418,5,56,0,0,2416,2418,3,338,169,0,2417,2415,
        1,0,0,0,2417,2416,1,0,0,0,2418,2420,1,0,0,0,2419,2414,1,0,0,0,2419,
        2420,1,0,0,0,2420,227,1,0,0,0,2421,2422,3,182,91,0,2422,2423,3,238,
        119,0,2423,229,1,0,0,0,2424,2425,6,115,-1,0,2425,2428,3,232,116,
        0,2426,2428,3,8,4,0,2427,2424,1,0,0,0,2427,2426,1,0,0,0,2428,2449,
        1,0,0,0,2429,2430,10,3,0,0,2430,2432,7,28,0,0,2431,2433,3,284,142,
        0,2432,2431,1,0,0,0,2432,2433,1,0,0,0,2433,2434,1,0,0,0,2434,2448,
        3,230,115,4,2435,2436,10,2,0,0,2436,2438,5,162,0,0,2437,2439,3,284,
        142,0,2438,2437,1,0,0,0,2438,2439,1,0,0,0,2439,2440,1,0,0,0,2440,
        2448,3,230,115,3,2441,2442,10,1,0,0,2442,2444,7,29,0,0,2443,2445,
        3,284,142,0,2444,2443,1,0,0,0,2444,2445,1,0,0,0,2445,2446,1,0,0,
        0,2446,2448,3,230,115,2,2447,2429,1,0,0,0,2447,2435,1,0,0,0,2447,
        2441,1,0,0,0,2448,2451,1,0,0,0,2449,2447,1,0,0,0,2449,2450,1,0,0,
        0,2450,231,1,0,0,0,2451,2449,1,0,0,0,2452,2458,3,240,120,0,2453,
        2458,3,236,118,0,2454,2455,5,269,0,0,2455,2458,3,322,161,0,2456,
        2458,3,312,156,0,2457,2452,1,0,0,0,2457,2453,1,0,0,0,2457,2454,1,
        0,0,0,2457,2456,1,0,0,0,2458,233,1,0,0,0,2459,2461,3,338,169,0,2460,
        2462,7,11,0,0,2461,2460,1,0,0,0,2461,2462,1,0,0,0,2462,2465,1,0,
        0,0,2463,2464,5,197,0,0,2464,2466,7,3,0,0,2465,2463,1,0,0,0,2465,
        2466,1,0,0,0,2466,235,1,0,0,0,2467,2469,3,270,135,0,2468,2470,3,
        238,119,0,2469,2468,1,0,0,0,2470,2471,1,0,0,0,2471,2469,1,0,0,0,
        2471,2472,1,0,0,0,2472,237,1,0,0,0,2473,2475,3,244,122,0,2474,2476,
        3,262,131,0,2475,2474,1,0,0,0,2475,2476,1,0,0,0,2476,2477,1,0,0,
        0,2477,2478,3,226,113,0,2478,2501,1,0,0,0,2479,2483,3,246,123,0,
        2480,2482,3,282,141,0,2481,2480,1,0,0,0,2482,2485,1,0,0,0,2483,2481,
        1,0,0,0,2483,2484,1,0,0,0,2484,2487,1,0,0,0,2485,2483,1,0,0,0,2486,
        2488,3,262,131,0,2487,2486,1,0,0,0,2487,2488,1,0,0,0,2488,2490,1,
        0,0,0,2489,2491,3,272,136,0,2490,2489,1,0,0,0,2490,2491,1,0,0,0,
        2491,2493,1,0,0,0,2492,2494,3,264,132,0,2493,2492,1,0,0,0,2493,2494,
        1,0,0,0,2494,2496,1,0,0,0,2495,2497,3,392,196,0,2496,2495,1,0,0,
        0,2496,2497,1,0,0,0,2497,2498,1,0,0,0,2498,2499,3,226,113,0,2499,
        2501,1,0,0,0,2500,2473,1,0,0,0,2500,2479,1,0,0,0,2501,239,1,0,0,
        0,2502,2503,3,244,122,0,2503,2505,3,242,121,0,2504,2506,3,262,131,
        0,2505,2504,1,0,0,0,2505,2506,1,0,0,0,2506,2528,1,0,0,0,2507,2508,
        3,246,123,0,2508,2512,3,242,121,0,2509,2511,3,282,141,0,2510,2509,
        1,0,0,0,2511,2514,1,0,0,0,2512,2510,1,0,0,0,2512,2513,1,0,0,0,2513,
        2516,1,0,0,0,2514,2512,1,0,0,0,2515,2517,3,262,131,0,2516,2515,1,
        0,0,0,2516,2517,1,0,0,0,2517,2519,1,0,0,0,2518,2520,3,272,136,0,
        2519,2518,1,0,0,0,2519,2520,1,0,0,0,2520,2522,1,0,0,0,2521,2523,
        3,264,132,0,2522,2521,1,0,0,0,2522,2523,1,0,0,0,2523,2525,1,0,0,
        0,2524,2526,3,392,196,0,2525,2524,1,0,0,0,2525,2526,1,0,0,0,2526,
        2528,1,0,0,0,2527,2502,1,0,0,0,2527,2507,1,0,0,0,2528,241,1,0,0,
        0,2529,2531,3,270,135,0,2530,2529,1,0,0,0,2530,2531,1,0,0,0,2531,
        243,1,0,0,0,2532,2533,5,248,0,0,2533,2534,5,281,0,0,2534,2535,5,
        3,0,0,2535,2536,3,330,165,0,2536,2537,5,4,0,0,2537,2543,1,0,0,0,
        2538,2539,5,185,0,0,2539,2543,3,330,165,0,2540,2541,5,229,0,0,2541,
        2543,3,330,165,0,2542,2532,1,0,0,0,2542,2538,1,0,0,0,2542,2540,1,
        0,0,0,2543,2545,1,0,0,0,2544,2546,3,318,159,0,2545,2544,1,0,0,0,
        2545,2546,1,0,0,0,2546,2549,1,0,0,0,2547,2548,5,227,0,0,2548,2550,
        5,326,0,0,2549,2547,1,0,0,0,2549,2550,1,0,0,0,2550,2551,1,0,0,0,
        2551,2552,5,297,0,0,2552,2565,5,326,0,0,2553,2563,5,64,0,0,2554,
        2564,3,300,150,0,2555,2564,3,382,191,0,2556,2559,5,3,0,0,2557,2560,
        3,300,150,0,2558,2560,3,382,191,0,2559,2557,1,0,0,0,2559,2558,1,
        0,0,0,2560,2561,1,0,0,0,2561,2562,5,4,0,0,2562,2564,1,0,0,0,2563,
        2554,1,0,0,0,2563,2555,1,0,0,0,2563,2556,1,0,0,0,2564,2566,1,0,0,
        0,2565,2553,1,0,0,0,2565,2566,1,0,0,0,2566,2568,1,0,0,0,2567,2569,
        3,318,159,0,2568,2567,1,0,0,0,2568,2569,1,0,0,0,2569,2572,1,0,0,
        0,2570,2571,5,226,0,0,2571,2573,5,326,0,0,2572,2570,1,0,0,0,2572,
        2573,1,0,0,0,2573,245,1,0,0,0,2574,2578,5,248,0,0,2575,2577,3,266,
        133,0,2576,2575,1,0,0,0,2577,2580,1,0,0,0,2578,2576,1,0,0,0,2578,
        2579,1,0,0,0,2579,2582,1,0,0,0,2580,2578,1,0,0,0,2581,2583,3,284,
        142,0,2582,2581,1,0,0,0,2582,2583,1,0,0,0,2583,2584,1,0,0,0,2584,
        2585,3,330,165,0,2585,247,1,0,0,0,2586,2587,5,254,0,0,2587,2588,
        3,258,129,0,2588,249,1,0,0,0,2589,2590,5,301,0,0,2590,2593,5,186,
        0,0,2591,2592,5,59,0,0,2592,2594,3,340,170,0,2593,2591,1,0,0,0,2593,
        2594,1,0,0,0,2594,2595,1,0,0,0,2595,2596,5,275,0,0,2596,2597,3,254,
        127,0,2597,251,1,0,0,0,2598,2599,5,301,0,0,2599,2600,5,195,0,0,2600,
        2603,5,186,0,0,2601,2602,5,59,0,0,2602,2604,3,340,170,0,2603,2601,
        1,0,0,0,2603,2604,1,0,0,0,2604,2605,1,0,0,0,2605,2606,5,275,0,0,
        2606,2607,3,256,128,0,2607,253,1,0,0,0,2608,2616,5,109,0,0,2609,
        2610,5,294,0,0,2610,2611,5,254,0,0,2611,2616,5,317,0,0,2612,2613,
        5,294,0,0,2613,2614,5,254,0,0,2614,2616,3,258,129,0,2615,2608,1,
        0,0,0,2615,2609,1,0,0,0,2615,2612,1,0,0,0,2616,255,1,0,0,0,2617,
        2618,5,161,0,0,2618,2636,5,317,0,0,2619,2620,5,161,0,0,2620,2621,
        5,3,0,0,2621,2622,3,320,160,0,2622,2623,5,4,0,0,2623,2624,5,298,
        0,0,2624,2625,5,3,0,0,2625,2630,3,338,169,0,2626,2627,5,1,0,0,2627,
        2629,3,338,169,0,2628,2626,1,0,0,0,2629,2632,1,0,0,0,2630,2628,1,
        0,0,0,2630,2631,1,0,0,0,2631,2633,1,0,0,0,2632,2630,1,0,0,0,2633,
        2634,5,4,0,0,2634,2636,1,0,0,0,2635,2617,1,0,0,0,2635,2619,1,0,0,
        0,2636,257,1,0,0,0,2637,2642,3,260,130,0,2638,2639,5,1,0,0,2639,
        2641,3,260,130,0,2640,2638,1,0,0,0,2641,2644,1,0,0,0,2642,2640,1,
        0,0,0,2642,2643,1,0,0,0,2643,259,1,0,0,0,2644,2642,1,0,0,0,2645,
        2646,3,322,161,0,2646,2647,5,306,0,0,2647,2648,3,338,169,0,2648,
        261,1,0,0,0,2649,2650,5,302,0,0,2650,2651,3,340,170,0,2651,263,1,
        0,0,0,2652,2653,5,150,0,0,2653,2654,3,340,170,0,2654,265,1,0,0,0,
        2655,2656,5,14,0,0,2656,2663,3,268,134,0,2657,2659,5,1,0,0,2658,
        2657,1,0,0,0,2658,2659,1,0,0,0,2659,2660,1,0,0,0,2660,2662,3,268,
        134,0,2661,2658,1,0,0,0,2662,2665,1,0,0,0,2663,2661,1,0,0,0,2663,
        2664,1,0,0,0,2664,2666,1,0,0,0,2665,2663,1,0,0,0,2666,2667,5,15,
        0,0,2667,267,1,0,0,0,2668,2682,3,412,206,0,2669,2670,3,412,206,0,
        2670,2671,5,3,0,0,2671,2676,3,346,173,0,2672,2673,5,1,0,0,2673,2675,
        3,346,173,0,2674,2672,1,0,0,0,2675,2678,1,0,0,0,2676,2674,1,0,0,
        0,2676,2677,1,0,0,0,2677,2679,1,0,0,0,2678,2676,1,0,0,0,2679,2680,
        5,4,0,0,2680,2682,1,0,0,0,2681,2668,1,0,0,0,2681,2669,1,0,0,0,2682,
        269,1,0,0,0,2683,2684,5,142,0,0,2684,2689,3,286,143,0,2685,2686,
        5,1,0,0,2686,2688,3,286,143,0,2687,2685,1,0,0,0,2688,2691,1,0,0,
        0,2689,2687,1,0,0,0,2689,2690,1,0,0,0,2690,2695,1,0,0,0,2691,2689,
        1,0,0,0,2692,2694,3,282,141,0,2693,2692,1,0,0,0,2694,2697,1,0,0,
        0,2695,2693,1,0,0,0,2695,2696,1,0,0,0,2696,2699,1,0,0,0,2697,2695,
        1,0,0,0,2698,2700,3,276,138,0,2699,2698,1,0,0,0,2699,2700,1,0,0,
        0,2700,271,1,0,0,0,2701,2702,5,148,0,0,2702,2703,5,72,0,0,2703,2708,
        3,338,169,0,2704,2705,5,1,0,0,2705,2707,3,338,169,0,2706,2704,1,
        0,0,0,2707,2710,1,0,0,0,2708,2706,1,0,0,0,2708,2709,1,0,0,0,2709,
        2728,1,0,0,0,2710,2708,1,0,0,0,2711,2712,5,304,0,0,2712,2729,5,243,
        0,0,2713,2714,5,304,0,0,2714,2729,5,97,0,0,2715,2716,5,149,0,0,2716,
        2717,5,256,0,0,2717,2718,5,3,0,0,2718,2723,3,274,137,0,2719,2720,
        5,1,0,0,2720,2722,3,274,137,0,2721,2719,1,0,0,0,2722,2725,1,0,0,
        0,2723,2721,1,0,0,0,2723,2724,1,0,0,0,2724,2726,1,0,0,0,2725,2723,
        1,0,0,0,2726,2727,5,4,0,0,2727,2729,1,0,0,0,2728,2711,1,0,0,0,2728,
        2713,1,0,0,0,2728,2715,1,0,0,0,2728,2729,1,0,0,0,2729,2746,1,0,0,
        0,2730,2731,5,148,0,0,2731,2732,5,72,0,0,2732,2733,5,149,0,0,2733,
        2734,5,256,0,0,2734,2735,5,3,0,0,2735,2740,3,274,137,0,2736,2737,
        5,1,0,0,2737,2739,3,274,137,0,2738,2736,1,0,0,0,2739,2742,1,0,0,
        0,2740,2738,1,0,0,0,2740,2741,1,0,0,0,2741,2743,1,0,0,0,2742,2740,
        1,0,0,0,2743,2744,5,4,0,0,2744,2746,1,0,0,0,2745,2701,1,0,0,0,2745,
        2730,1,0,0,0,2746,273,1,0,0,0,2747,2756,5,3,0,0,2748,2753,3,338,
        169,0,2749,2750,5,1,0,0,2750,2752,3,338,169,0,2751,2749,1,0,0,0,
        2752,2755,1,0,0,0,2753,2751,1,0,0,0,2753,2754,1,0,0,0,2754,2757,
        1,0,0,0,2755,2753,1,0,0,0,2756,2748,1,0,0,0,2756,2757,1,0,0,0,2757,
        2758,1,0,0,0,2758,2761,5,4,0,0,2759,2761,3,338,169,0,2760,2747,1,
        0,0,0,2760,2759,1,0,0,0,2761,275,1,0,0,0,2762,2763,5,216,0,0,2763,
        2764,5,3,0,0,2764,2765,3,330,165,0,2765,2766,5,138,0,0,2766,2767,
        3,278,139,0,2767,2768,5,155,0,0,2768,2769,5,3,0,0,2769,2774,3,280,
        140,0,2770,2771,5,1,0,0,2771,2773,3,280,140,0,2772,2770,1,0,0,0,
        2773,2776,1,0,0,0,2774,2772,1,0,0,0,2774,2775,1,0,0,0,2775,2777,
        1,0,0,0,2776,2774,1,0,0,0,2777,2778,5,4,0,0,2778,2779,5,4,0,0,2779,
        277,1,0,0,0,2780,2793,3,412,206,0,2781,2782,5,3,0,0,2782,2787,3,
        412,206,0,2783,2784,5,1,0,0,2784,2786,3,412,206,0,2785,2783,1,0,
        0,0,2786,2789,1,0,0,0,2787,2785,1,0,0,0,2787,2788,1,0,0,0,2788,2790,
        1,0,0,0,2789,2787,1,0,0,0,2790,2791,5,4,0,0,2791,2793,1,0,0,0,2792,
        2780,1,0,0,0,2792,2781,1,0,0,0,2793,279,1,0,0,0,2794,2799,3,338,
        169,0,2795,2797,5,64,0,0,2796,2795,1,0,0,0,2796,2797,1,0,0,0,2797,
        2798,1,0,0,0,2798,2800,3,412,206,0,2799,2796,1,0,0,0,2799,2800,1,
        0,0,0,2800,281,1,0,0,0,2801,2802,5,170,0,0,2802,2804,5,299,0,0,2803,
        2805,5,206,0,0,2804,2803,1,0,0,0,2804,2805,1,0,0,0,2805,2806,1,0,
        0,0,2806,2807,3,406,203,0,2807,2816,5,3,0,0,2808,2813,3,338,169,
        0,2809,2810,5,1,0,0,2810,2812,3,338,169,0,2811,2809,1,0,0,0,2812,
        2815,1,0,0,0,2813,2811,1,0,0,0,2813,2814,1,0,0,0,2814,2817,1,0,0,
        0,2815,2813,1,0,0,0,2816,2808,1,0,0,0,2816,2817,1,0,0,0,2817,2818,
        1,0,0,0,2818,2819,5,4,0,0,2819,2831,3,412,206,0,2820,2822,5,64,0,
        0,2821,2820,1,0,0,0,2821,2822,1,0,0,0,2822,2823,1,0,0,0,2823,2828,
        3,412,206,0,2824,2825,5,1,0,0,2825,2827,3,412,206,0,2826,2824,1,
        0,0,0,2827,2830,1,0,0,0,2828,2826,1,0,0,0,2828,2829,1,0,0,0,2829,
        2832,1,0,0,0,2830,2828,1,0,0,0,2831,2821,1,0,0,0,2831,2832,1,0,0,
        0,2832,283,1,0,0,0,2833,2834,7,30,0,0,2834,285,1,0,0,0,2835,2839,
        3,310,155,0,2836,2838,3,288,144,0,2837,2836,1,0,0,0,2838,2841,1,
        0,0,0,2839,2837,1,0,0,0,2839,2840,1,0,0,0,2840,287,1,0,0,0,2841,
        2839,1,0,0,0,2842,2843,3,290,145,0,2843,2844,5,167,0,0,2844,2846,
        3,310,155,0,2845,2847,3,292,146,0,2846,2845,1,0,0,0,2846,2847,1,
        0,0,0,2847,2854,1,0,0,0,2848,2849,5,193,0,0,2849,2850,3,290,145,
        0,2850,2851,5,167,0,0,2851,2852,3,310,155,0,2852,2854,1,0,0,0,2853,
        2842,1,0,0,0,2853,2848,1,0,0,0,2854,289,1,0,0,0,2855,2857,5,158,
        0,0,2856,2855,1,0,0,0,2856,2857,1,0,0,0,2857,2880,1,0,0,0,2858,2880,
        5,96,0,0,2859,2861,5,173,0,0,2860,2862,5,206,0,0,2861,2860,1,0,0,
        0,2861,2862,1,0,0,0,2862,2880,1,0,0,0,2863,2865,5,173,0,0,2864,2863,
        1,0,0,0,2864,2865,1,0,0,0,2865,2866,1,0,0,0,2866,2880,5,249,0,0,
        2867,2869,5,238,0,0,2868,2870,5,206,0,0,2869,2868,1,0,0,0,2869,2870,
        1,0,0,0,2870,2880,1,0,0,0,2871,2873,5,143,0,0,2872,2874,5,206,0,
        0,2873,2872,1,0,0,0,2873,2874,1,0,0,0,2874,2880,1,0,0,0,2875,2877,
        5,173,0,0,2876,2875,1,0,0,0,2876,2877,1,0,0,0,2877,2878,1,0,0,0,
        2878,2880,5,60,0,0,2879,2856,1,0,0,0,2879,2858,1,0,0,0,2879,2859,
        1,0,0,0,2879,2864,1,0,0,0,2879,2867,1,0,0,0,2879,2871,1,0,0,0,2879,
        2876,1,0,0,0,2880,291,1,0,0,0,2881,2882,5,199,0,0,2882,2886,3,340,
        170,0,2883,2884,5,297,0,0,2884,2886,3,298,149,0,2885,2881,1,0,0,
        0,2885,2883,1,0,0,0,2886,293,1,0,0,0,2887,2888,5,271,0,0,2888,2890,
        5,3,0,0,2889,2891,3,296,148,0,2890,2889,1,0,0,0,2890,2891,1,0,0,
        0,2891,2892,1,0,0,0,2892,2893,5,4,0,0,2893,295,1,0,0,0,2894,2896,
        5,316,0,0,2895,2894,1,0,0,0,2895,2896,1,0,0,0,2896,2897,1,0,0,0,
        2897,2898,7,8,0,0,2898,2919,5,215,0,0,2899,2900,3,338,169,0,2900,
        2901,5,245,0,0,2901,2919,1,0,0,0,2902,2903,5,70,0,0,2903,2904,5,
        330,0,0,2904,2905,5,205,0,0,2905,2906,5,198,0,0,2906,2915,5,330,
        0,0,2907,2913,5,199,0,0,2908,2914,3,412,206,0,2909,2910,3,406,203,
        0,2910,2911,5,3,0,0,2911,2912,5,4,0,0,2912,2914,1,0,0,0,2913,2908,
        1,0,0,0,2913,2909,1,0,0,0,2914,2916,1,0,0,0,2915,2907,1,0,0,0,2915,
        2916,1,0,0,0,2916,2919,1,0,0,0,2917,2919,3,338,169,0,2918,2895,1,
        0,0,0,2918,2899,1,0,0,0,2918,2902,1,0,0,0,2918,2917,1,0,0,0,2919,
        297,1,0,0,0,2920,2921,5,3,0,0,2921,2922,3,300,150,0,2922,2923,5,
        4,0,0,2923,299,1,0,0,0,2924,2929,3,408,204,0,2925,2926,5,1,0,0,2926,
        2928,3,408,204,0,2927,2925,1,0,0,0,2928,2931,1,0,0,0,2929,2927,1,
        0,0,0,2929,2930,1,0,0,0,2930,301,1,0,0,0,2931,2929,1,0,0,0,2932,
        2933,5,3,0,0,2933,2938,3,304,152,0,2934,2935,5,1,0,0,2935,2937,3,
        304,152,0,2936,2934,1,0,0,0,2937,2940,1,0,0,0,2938,2936,1,0,0,0,
        2938,2939,1,0,0,0,2939,2941,1,0,0,0,2940,2938,1,0,0,0,2941,2942,
        5,4,0,0,2942,303,1,0,0,0,2943,2945,3,408,204,0,2944,2946,7,11,0,
        0,2945,2944,1,0,0,0,2945,2946,1,0,0,0,2946,305,1,0,0,0,2947,2948,
        5,3,0,0,2948,2953,3,308,154,0,2949,2950,5,1,0,0,2950,2952,3,308,
        154,0,2951,2949,1,0,0,0,2952,2955,1,0,0,0,2953,2951,1,0,0,0,2953,
        2954,1,0,0,0,2954,2956,1,0,0,0,2955,2953,1,0,0,0,2956,2957,5,4,0,
        0,2957,307,1,0,0,0,2958,2960,3,412,206,0,2959,2961,3,178,89,0,2960,
        2959,1,0,0,0,2960,2961,1,0,0,0,2961,309,1,0,0,0,2962,2964,3,322,
        161,0,2963,2965,3,74,37,0,2964,2963,1,0,0,0,2964,2965,1,0,0,0,2965,
        2967,1,0,0,0,2966,2968,3,294,147,0,2967,2966,1,0,0,0,2967,2968,1,
        0,0,0,2968,2969,1,0,0,0,2969,2970,3,316,158,0,2970,2990,1,0,0,0,
        2971,2972,5,3,0,0,2972,2973,3,180,90,0,2973,2975,5,4,0,0,2974,2976,
        3,294,147,0,2975,2974,1,0,0,0,2975,2976,1,0,0,0,2976,2977,1,0,0,
        0,2977,2978,3,316,158,0,2978,2990,1,0,0,0,2979,2980,5,3,0,0,2980,
        2981,3,286,143,0,2981,2983,5,4,0,0,2982,2984,3,294,147,0,2983,2982,
        1,0,0,0,2983,2984,1,0,0,0,2984,2985,1,0,0,0,2985,2986,3,316,158,
        0,2986,2990,1,0,0,0,2987,2990,3,312,156,0,2988,2990,3,314,157,0,
        2989,2962,1,0,0,0,2989,2971,1,0,0,0,2989,2979,1,0,0,0,2989,2987,
        1,0,0,0,2989,2988,1,0,0,0,2990,311,1,0,0,0,2991,2992,5,298,0,0,2992,
        2997,3,338,169,0,2993,2994,5,1,0,0,2994,2996,3,338,169,0,2995,2993,
        1,0,0,0,2996,2999,1,0,0,0,2997,2995,1,0,0,0,2997,2998,1,0,0,0,2998,
        3000,1,0,0,0,2999,2997,1,0,0,0,3000,3001,3,316,158,0,3001,313,1,
        0,0,0,3002,3003,3,408,204,0,3003,3012,5,3,0,0,3004,3009,3,338,169,
        0,3005,3006,5,1,0,0,3006,3008,3,338,169,0,3007,3005,1,0,0,0,3008,
        3011,1,0,0,0,3009,3007,1,0,0,0,3009,3010,1,0,0,0,3010,3013,1,0,0,
        0,3011,3009,1,0,0,0,3012,3004,1,0,0,0,3012,3013,1,0,0,0,3013,3014,
        1,0,0,0,3014,3015,5,4,0,0,3015,3016,3,316,158,0,3016,315,1,0,0,0,
        3017,3019,5,64,0,0,3018,3017,1,0,0,0,3018,3019,1,0,0,0,3019,3020,
        1,0,0,0,3020,3022,3,414,207,0,3021,3023,3,298,149,0,3022,3021,1,
        0,0,0,3022,3023,1,0,0,0,3023,3025,1,0,0,0,3024,3018,1,0,0,0,3024,
        3025,1,0,0,0,3025,317,1,0,0,0,3026,3027,5,244,0,0,3027,3028,5,140,
        0,0,3028,3029,5,251,0,0,3029,3033,5,326,0,0,3030,3031,5,304,0,0,
        3031,3032,5,252,0,0,3032,3034,3,204,102,0,3033,3030,1,0,0,0,3033,
        3034,1,0,0,0,3034,3076,1,0,0,0,3035,3036,5,244,0,0,3036,3037,5,140,
        0,0,3037,3047,5,110,0,0,3038,3039,5,133,0,0,3039,3040,5,274,0,0,
        3040,3041,5,72,0,0,3041,3045,5,326,0,0,3042,3043,5,122,0,0,3043,
        3044,5,72,0,0,3044,3046,5,326,0,0,3045,3042,1,0,0,0,3045,3046,1,
        0,0,0,3046,3048,1,0,0,0,3047,3038,1,0,0,0,3047,3048,1,0,0,0,3048,
        3054,1,0,0,0,3049,3050,5,84,0,0,3050,3051,5,166,0,0,3051,3052,5,
        274,0,0,3052,3053,5,72,0,0,3053,3055,5,326,0,0,3054,3049,1,0,0,0,
        3054,3055,1,0,0,0,3055,3061,1,0,0,0,3056,3057,5,185,0,0,3057,3058,
        5,168,0,0,3058,3059,5,274,0,0,3059,3060,5,72,0,0,3060,3062,5,326,
        0,0,3061,3056,1,0,0,0,3061,3062,1,0,0,0,3062,3067,1,0,0,0,3063,3064,
        5,176,0,0,3064,3065,5,274,0,0,3065,3066,5,72,0,0,3066,3068,5,326,
        0,0,3067,3063,1,0,0,0,3067,3068,1,0,0,0,3068,3073,1,0,0,0,3069,3070,
        5,196,0,0,3070,3071,5,108,0,0,3071,3072,5,64,0,0,3072,3074,5,326,
        0,0,3073,3069,1,0,0,0,3073,3074,1,0,0,0,3074,3076,1,0,0,0,3075,3026,
        1,0,0,0,3075,3035,1,0,0,0,3076,319,1,0,0,0,3077,3082,3,322,161,0,
        3078,3079,5,1,0,0,3079,3081,3,322,161,0,3080,3078,1,0,0,0,3081,3084,
        1,0,0,0,3082,3080,1,0,0,0,3082,3083,1,0,0,0,3083,321,1,0,0,0,3084,
        3082,1,0,0,0,3085,3090,3,408,204,0,3086,3087,5,7,0,0,3087,3089,3,
        408,204,0,3088,3086,1,0,0,0,3089,3092,1,0,0,0,3090,3088,1,0,0,0,
        3090,3091,1,0,0,0,3091,323,1,0,0,0,3092,3090,1,0,0,0,3093,3094,3,
        408,204,0,3094,3095,5,7,0,0,3095,3097,1,0,0,0,3096,3093,1,0,0,0,
        3096,3097,1,0,0,0,3097,3098,1,0,0,0,3098,3099,3,408,204,0,3099,325,
        1,0,0,0,3100,3101,3,408,204,0,3101,3102,5,7,0,0,3102,3104,1,0,0,
        0,3103,3100,1,0,0,0,3103,3104,1,0,0,0,3104,3105,1,0,0,0,3105,3106,
        3,408,204,0,3106,327,1,0,0,0,3107,3115,3,338,169,0,3108,3110,5,64,
        0,0,3109,3108,1,0,0,0,3109,3110,1,0,0,0,3110,3113,1,0,0,0,3111,3114,
        3,408,204,0,3112,3114,3,298,149,0,3113,3111,1,0,0,0,3113,3112,1,
        0,0,0,3114,3116,1,0,0,0,3115,3109,1,0,0,0,3115,3116,1,0,0,0,3116,
        329,1,0,0,0,3117,3122,3,328,164,0,3118,3119,5,1,0,0,3119,3121,3,
        328,164,0,3120,3118,1,0,0,0,3121,3124,1,0,0,0,3122,3120,1,0,0,0,
        3122,3123,1,0,0,0,3123,331,1,0,0,0,3124,3122,1,0,0,0,3125,3126,5,
        3,0,0,3126,3131,3,334,167,0,3127,3128,5,1,0,0,3128,3130,3,334,167,
        0,3129,3127,1,0,0,0,3130,3133,1,0,0,0,3131,3129,1,0,0,0,3131,3132,
        1,0,0,0,3132,3134,1,0,0,0,3133,3131,1,0,0,0,3134,3135,5,4,0,0,3135,
        333,1,0,0,0,3136,3150,3,406,203,0,3137,3138,3,412,206,0,3138,3139,
        5,3,0,0,3139,3144,3,336,168,0,3140,3141,5,1,0,0,3141,3143,3,336,
        168,0,3142,3140,1,0,0,0,3143,3146,1,0,0,0,3144,3142,1,0,0,0,3144,
        3145,1,0,0,0,3145,3147,1,0,0,0,3146,3144,1,0,0,0,3147,3148,5,4,0,
        0,3148,3150,1,0,0,0,3149,3136,1,0,0,0,3149,3137,1,0,0,0,3150,335,
        1,0,0,0,3151,3154,3,406,203,0,3152,3154,3,348,174,0,3153,3151,1,
        0,0,0,3153,3152,1,0,0,0,3154,337,1,0,0,0,3155,3156,3,340,170,0,3156,
        339,1,0,0,0,3157,3158,6,170,-1,0,3158,3159,5,195,0,0,3159,3170,3,
        340,170,5,3160,3161,5,125,0,0,3161,3162,5,3,0,0,3162,3163,3,180,
        90,0,3163,3164,5,4,0,0,3164,3170,1,0,0,0,3165,3167,3,344,172,0,3166,
        3168,3,342,171,0,3167,3166,1,0,0,0,3167,3168,1,0,0,0,3168,3170,1,
        0,0,0,3169,3157,1,0,0,0,3169,3160,1,0,0,0,3169,3165,1,0,0,0,3170,
        3179,1,0,0,0,3171,3172,10,2,0,0,3172,3173,5,59,0,0,3173,3178,3,340,
        170,3,3174,3175,10,1,0,0,3175,3176,5,203,0,0,3176,3178,3,340,170,
        2,3177,3171,1,0,0,0,3177,3174,1,0,0,0,3178,3181,1,0,0,0,3179,3177,
        1,0,0,0,3179,3180,1,0,0,0,3180,341,1,0,0,0,3181,3179,1,0,0,0,3182,
        3184,5,195,0,0,3183,3182,1,0,0,0,3183,3184,1,0,0,0,3184,3185,1,0,
        0,0,3185,3186,5,68,0,0,3186,3187,3,344,172,0,3187,3188,5,59,0,0,
        3188,3189,3,344,172,0,3189,3265,1,0,0,0,3190,3192,5,195,0,0,3191,
        3190,1,0,0,0,3191,3192,1,0,0,0,3192,3193,1,0,0,0,3193,3194,5,155,
        0,0,3194,3195,5,3,0,0,3195,3200,3,338,169,0,3196,3197,5,1,0,0,3197,
        3199,3,338,169,0,3198,3196,1,0,0,0,3199,3202,1,0,0,0,3200,3198,1,
        0,0,0,3200,3201,1,0,0,0,3201,3203,1,0,0,0,3202,3200,1,0,0,0,3203,
        3204,5,4,0,0,3204,3265,1,0,0,0,3205,3207,5,195,0,0,3206,3205,1,0,
        0,0,3206,3207,1,0,0,0,3207,3208,1,0,0,0,3208,3209,5,155,0,0,3209,
        3210,5,3,0,0,3210,3211,3,180,90,0,3211,3212,5,4,0,0,3212,3265,1,
        0,0,0,3213,3215,5,195,0,0,3214,3213,1,0,0,0,3214,3215,1,0,0,0,3215,
        3216,1,0,0,0,3216,3217,5,239,0,0,3217,3265,3,344,172,0,3218,3220,
        5,195,0,0,3219,3218,1,0,0,0,3219,3220,1,0,0,0,3220,3221,1,0,0,0,
        3221,3222,5,174,0,0,3222,3236,7,31,0,0,3223,3224,5,3,0,0,3224,3237,
        5,4,0,0,3225,3226,5,3,0,0,3226,3231,3,338,169,0,3227,3228,5,1,0,
        0,3228,3230,3,338,169,0,3229,3227,1,0,0,0,3230,3233,1,0,0,0,3231,
        3229,1,0,0,0,3231,3232,1,0,0,0,3232,3234,1,0,0,0,3233,3231,1,0,0,
        0,3234,3235,5,4,0,0,3235,3237,1,0,0,0,3236,3223,1,0,0,0,3236,3225,
        1,0,0,0,3237,3265,1,0,0,0,3238,3240,5,195,0,0,3239,3238,1,0,0,0,
        3239,3240,1,0,0,0,3240,3241,1,0,0,0,3241,3242,5,174,0,0,3242,3245,
        3,344,172,0,3243,3244,5,121,0,0,3244,3246,5,326,0,0,3245,3243,1,
        0,0,0,3245,3246,1,0,0,0,3246,3265,1,0,0,0,3247,3249,5,165,0,0,3248,
        3250,5,195,0,0,3249,3248,1,0,0,0,3249,3250,1,0,0,0,3250,3251,1,0,
        0,0,3251,3265,5,196,0,0,3252,3254,5,165,0,0,3253,3255,5,195,0,0,
        3254,3253,1,0,0,0,3254,3255,1,0,0,0,3255,3256,1,0,0,0,3256,3265,
        7,32,0,0,3257,3259,5,165,0,0,3258,3260,5,195,0,0,3259,3258,1,0,0,
        0,3259,3260,1,0,0,0,3260,3261,1,0,0,0,3261,3262,5,116,0,0,3262,3263,
        5,142,0,0,3263,3265,3,344,172,0,3264,3183,1,0,0,0,3264,3191,1,0,
        0,0,3264,3206,1,0,0,0,3264,3214,1,0,0,0,3264,3219,1,0,0,0,3264,3239,
        1,0,0,0,3264,3247,1,0,0,0,3264,3252,1,0,0,0,3264,3257,1,0,0,0,3265,
        343,1,0,0,0,3266,3267,6,172,-1,0,3267,3271,3,346,173,0,3268,3269,
        7,33,0,0,3269,3271,3,344,172,7,3270,3266,1,0,0,0,3270,3268,1,0,0,
        0,3271,3293,1,0,0,0,3272,3273,10,6,0,0,3273,3274,7,34,0,0,3274,3292,
        3,344,172,7,3275,3276,10,5,0,0,3276,3277,7,35,0,0,3277,3292,3,344,
        172,6,3278,3279,10,4,0,0,3279,3280,5,322,0,0,3280,3292,3,344,172,
        5,3281,3282,10,3,0,0,3282,3283,5,325,0,0,3283,3292,3,344,172,4,3284,
        3285,10,2,0,0,3285,3286,5,323,0,0,3286,3292,3,344,172,3,3287,3288,
        10,1,0,0,3288,3289,3,350,175,0,3289,3290,3,344,172,2,3290,3292,1,
        0,0,0,3291,3272,1,0,0,0,3291,3275,1,0,0,0,3291,3278,1,0,0,0,3291,
        3281,1,0,0,0,3291,3284,1,0,0,0,3291,3287,1,0,0,0,3292,3295,1,0,0,
        0,3293,3291,1,0,0,0,3293,3294,1,0,0,0,3294,345,1,0,0,0,3295,3293,
        1,0,0,0,3296,3297,6,173,-1,0,3297,3481,7,36,0,0,3298,3300,5,75,0,
        0,3299,3301,3,390,195,0,3300,3299,1,0,0,0,3301,3302,1,0,0,0,3302,
        3300,1,0,0,0,3302,3303,1,0,0,0,3303,3306,1,0,0,0,3304,3305,5,119,
        0,0,3305,3307,3,338,169,0,3306,3304,1,0,0,0,3306,3307,1,0,0,0,3307,
        3308,1,0,0,0,3308,3309,5,120,0,0,3309,3481,1,0,0,0,3310,3311,5,75,
        0,0,3311,3313,3,338,169,0,3312,3314,3,390,195,0,3313,3312,1,0,0,
        0,3314,3315,1,0,0,0,3315,3313,1,0,0,0,3315,3316,1,0,0,0,3316,3319,
        1,0,0,0,3317,3318,5,119,0,0,3318,3320,3,338,169,0,3319,3317,1,0,
        0,0,3319,3320,1,0,0,0,3320,3321,1,0,0,0,3321,3322,5,120,0,0,3322,
        3481,1,0,0,0,3323,3324,5,76,0,0,3324,3325,5,3,0,0,3325,3326,3,338,
        169,0,3326,3327,5,64,0,0,3327,3328,3,376,188,0,3328,3329,5,4,0,0,
        3329,3481,1,0,0,0,3330,3331,5,266,0,0,3331,3340,5,3,0,0,3332,3337,
        3,328,164,0,3333,3334,5,1,0,0,3334,3336,3,328,164,0,3335,3333,1,
        0,0,0,3336,3339,1,0,0,0,3337,3335,1,0,0,0,3337,3338,1,0,0,0,3338,
        3341,1,0,0,0,3339,3337,1,0,0,0,3340,3332,1,0,0,0,3340,3341,1,0,0,
        0,3341,3342,1,0,0,0,3342,3481,5,4,0,0,3343,3344,5,136,0,0,3344,3345,
        5,3,0,0,3345,3348,3,338,169,0,3346,3347,5,153,0,0,3347,3349,5,197,
        0,0,3348,3346,1,0,0,0,3348,3349,1,0,0,0,3349,3350,1,0,0,0,3350,3351,
        5,4,0,0,3351,3481,1,0,0,0,3352,3353,5,169,0,0,3353,3354,5,3,0,0,
        3354,3357,3,338,169,0,3355,3356,5,153,0,0,3356,3358,5,197,0,0,3357,
        3355,1,0,0,0,3357,3358,1,0,0,0,3358,3359,1,0,0,0,3359,3360,5,4,0,
        0,3360,3481,1,0,0,0,3361,3362,5,218,0,0,3362,3363,5,3,0,0,3363,3364,
        3,344,172,0,3364,3365,5,155,0,0,3365,3366,3,344,172,0,3366,3367,
        5,4,0,0,3367,3481,1,0,0,0,3368,3481,3,348,174,0,3369,3481,5,317,
        0,0,3370,3371,3,406,203,0,3371,3372,5,7,0,0,3372,3373,5,317,0,0,
        3373,3481,1,0,0,0,3374,3375,5,3,0,0,3375,3378,3,328,164,0,3376,3377,
        5,1,0,0,3377,3379,3,328,164,0,3378,3376,1,0,0,0,3379,3380,1,0,0,
        0,3380,3378,1,0,0,0,3380,3381,1,0,0,0,3381,3382,1,0,0,0,3382,3383,
        5,4,0,0,3383,3481,1,0,0,0,3384,3385,5,3,0,0,3385,3386,3,180,90,0,
        3386,3387,5,4,0,0,3387,3481,1,0,0,0,3388,3389,3,404,202,0,3389,3401,
        5,3,0,0,3390,3392,3,284,142,0,3391,3390,1,0,0,0,3391,3392,1,0,0,
        0,3392,3393,1,0,0,0,3393,3398,3,338,169,0,3394,3395,5,1,0,0,3395,
        3397,3,338,169,0,3396,3394,1,0,0,0,3397,3400,1,0,0,0,3398,3396,1,
        0,0,0,3398,3399,1,0,0,0,3399,3402,1,0,0,0,3400,3398,1,0,0,0,3401,
        3391,1,0,0,0,3401,3402,1,0,0,0,3402,3403,1,0,0,0,3403,3410,5,4,0,
        0,3404,3405,5,134,0,0,3405,3406,5,3,0,0,3406,3407,5,302,0,0,3407,
        3408,3,340,170,0,3408,3409,5,4,0,0,3409,3411,1,0,0,0,3410,3404,1,
        0,0,0,3410,3411,1,0,0,0,3411,3414,1,0,0,0,3412,3413,5,208,0,0,3413,
        3415,3,396,198,0,3414,3412,1,0,0,0,3414,3415,1,0,0,0,3415,3481,1,
        0,0,0,3416,3417,3,412,206,0,3417,3418,5,16,0,0,3418,3419,3,338,169,
        0,3419,3481,1,0,0,0,3420,3421,5,3,0,0,3421,3424,3,412,206,0,3422,
        3423,5,1,0,0,3423,3425,3,412,206,0,3424,3422,1,0,0,0,3425,3426,1,
        0,0,0,3426,3424,1,0,0,0,3426,3427,1,0,0,0,3427,3428,1,0,0,0,3428,
        3429,5,4,0,0,3429,3430,5,16,0,0,3430,3431,3,338,169,0,3431,3481,
        1,0,0,0,3432,3481,3,412,206,0,3433,3434,5,3,0,0,3434,3435,3,338,
        169,0,3435,3436,5,4,0,0,3436,3481,1,0,0,0,3437,3438,5,130,0,0,3438,
        3439,5,3,0,0,3439,3440,3,412,206,0,3440,3441,5,142,0,0,3441,3442,
        3,344,172,0,3442,3443,5,4,0,0,3443,3481,1,0,0,0,3444,3445,7,37,0,
        0,3445,3446,5,3,0,0,3446,3447,3,344,172,0,3447,3448,7,38,0,0,3448,
        3451,3,344,172,0,3449,3450,7,39,0,0,3450,3452,3,344,172,0,3451,3449,
        1,0,0,0,3451,3452,1,0,0,0,3452,3453,1,0,0,0,3453,3454,5,4,0,0,3454,
        3481,1,0,0,0,3455,3456,5,282,0,0,3456,3458,5,3,0,0,3457,3459,7,40,
        0,0,3458,3457,1,0,0,0,3458,3459,1,0,0,0,3459,3461,1,0,0,0,3460,3462,
        3,344,172,0,3461,3460,1,0,0,0,3461,3462,1,0,0,0,3462,3463,1,0,0,
        0,3463,3464,5,142,0,0,3464,3465,3,344,172,0,3465,3466,5,4,0,0,3466,
        3481,1,0,0,0,3467,3468,5,210,0,0,3468,3469,5,3,0,0,3469,3470,3,344,
        172,0,3470,3471,5,217,0,0,3471,3472,3,344,172,0,3472,3473,5,142,
        0,0,3473,3476,3,344,172,0,3474,3475,5,138,0,0,3475,3477,3,344,172,
        0,3476,3474,1,0,0,0,3476,3477,1,0,0,0,3477,3478,1,0,0,0,3478,3479,
        5,4,0,0,3479,3481,1,0,0,0,3480,3296,1,0,0,0,3480,3298,1,0,0,0,3480,
        3310,1,0,0,0,3480,3323,1,0,0,0,3480,3330,1,0,0,0,3480,3343,1,0,0,
        0,3480,3352,1,0,0,0,3480,3361,1,0,0,0,3480,3368,1,0,0,0,3480,3369,
        1,0,0,0,3480,3370,1,0,0,0,3480,3374,1,0,0,0,3480,3384,1,0,0,0,3480,
        3388,1,0,0,0,3480,3416,1,0,0,0,3480,3420,1,0,0,0,3480,3432,1,0,0,
        0,3480,3433,1,0,0,0,3480,3437,1,0,0,0,3480,3444,1,0,0,0,3480,3455,
        1,0,0,0,3480,3467,1,0,0,0,3481,3492,1,0,0,0,3482,3483,10,8,0,0,3483,
        3484,5,5,0,0,3484,3485,3,344,172,0,3485,3486,5,6,0,0,3486,3491,1,
        0,0,0,3487,3488,10,6,0,0,3488,3489,5,7,0,0,3489,3491,3,412,206,0,
        3490,3482,1,0,0,0,3490,3487,1,0,0,0,3491,3494,1,0,0,0,3492,3490,
        1,0,0,0,3492,3493,1,0,0,0,3493,347,1,0,0,0,3494,3492,1,0,0,0,3495,
        3508,5,196,0,0,3496,3508,3,360,180,0,3497,3498,3,412,206,0,3498,
        3499,5,326,0,0,3499,3508,1,0,0,0,3500,3508,3,418,209,0,3501,3508,
        3,358,179,0,3502,3504,5,326,0,0,3503,3502,1,0,0,0,3504,3505,1,0,
        0,0,3505,3503,1,0,0,0,3505,3506,1,0,0,0,3506,3508,1,0,0,0,3507,3495,
        1,0,0,0,3507,3496,1,0,0,0,3507,3497,1,0,0,0,3507,3500,1,0,0,0,3507,
        3501,1,0,0,0,3507,3503,1,0,0,0,3508,349,1,0,0,0,3509,3518,3,352,
        176,0,3510,3518,5,309,0,0,3511,3518,5,310,0,0,3512,3518,5,311,0,
        0,3513,3518,5,312,0,0,3514,3518,5,313,0,0,3515,3518,5,314,0,0,3516,
        3518,5,308,0,0,3517,3509,1,0,0,0,3517,3510,1,0,0,0,3517,3511,1,0,
        0,0,3517,3512,1,0,0,0,3517,3513,1,0,0,0,3517,3514,1,0,0,0,3517,3515,
        1,0,0,0,3517,3516,1,0,0,0,3518,351,1,0,0,0,3519,3520,7,41,0,0,3520,
        353,1,0,0,0,3521,3522,7,42,0,0,3522,355,1,0,0,0,3523,3524,7,43,0,
        0,3524,357,1,0,0,0,3525,3526,7,44,0,0,3526,359,1,0,0,0,3527,3530,
        5,163,0,0,3528,3531,3,362,181,0,3529,3531,3,366,183,0,3530,3528,
        1,0,0,0,3530,3529,1,0,0,0,3530,3531,1,0,0,0,3531,361,1,0,0,0,3532,
        3534,3,364,182,0,3533,3535,3,368,184,0,3534,3533,1,0,0,0,3534,3535,
        1,0,0,0,3535,363,1,0,0,0,3536,3537,3,370,185,0,3537,3538,3,372,186,
        0,3538,3540,1,0,0,0,3539,3536,1,0,0,0,3540,3541,1,0,0,0,3541,3539,
        1,0,0,0,3541,3542,1,0,0,0,3542,365,1,0,0,0,3543,3546,3,368,184,0,
        3544,3547,3,364,182,0,3545,3547,3,368,184,0,3546,3544,1,0,0,0,3546,
        3545,1,0,0,0,3546,3547,1,0,0,0,3547,367,1,0,0,0,3548,3549,3,370,
        185,0,3549,3550,3,372,186,0,3550,3551,5,276,0,0,3551,3552,3,372,
        186,0,3552,369,1,0,0,0,3553,3555,7,45,0,0,3554,3553,1,0,0,0,3554,
        3555,1,0,0,0,3555,3556,1,0,0,0,3556,3559,7,8,0,0,3557,3559,5,326,
        0,0,3558,3554,1,0,0,0,3558,3557,1,0,0,0,3559,371,1,0,0,0,3560,3568,
        5,106,0,0,3561,3568,5,151,0,0,3562,3568,5,188,0,0,3563,3568,5,189,
        0,0,3564,3568,5,247,0,0,3565,3568,5,305,0,0,3566,3568,3,412,206,
        0,3567,3560,1,0,0,0,3567,3561,1,0,0,0,3567,3562,1,0,0,0,3567,3563,
        1,0,0,0,3567,3564,1,0,0,0,3567,3565,1,0,0,0,3567,3566,1,0,0,0,3568,
        373,1,0,0,0,3569,3573,5,136,0,0,3570,3571,5,55,0,0,3571,3573,3,408,
        204,0,3572,3569,1,0,0,0,3572,3570,1,0,0,0,3573,375,1,0,0,0,3574,
        3575,5,63,0,0,3575,3576,5,311,0,0,3576,3577,3,376,188,0,3577,3578,
        5,313,0,0,3578,3609,1,0,0,0,3579,3580,5,185,0,0,3580,3581,5,311,
        0,0,3581,3582,3,376,188,0,3582,3583,5,1,0,0,3583,3584,3,376,188,
        0,3584,3585,5,313,0,0,3585,3609,1,0,0,0,3586,3593,5,266,0,0,3587,
        3589,5,311,0,0,3588,3590,3,386,193,0,3589,3588,1,0,0,0,3589,3590,
        1,0,0,0,3590,3591,1,0,0,0,3591,3594,5,313,0,0,3592,3594,5,309,0,
        0,3593,3587,1,0,0,0,3593,3592,1,0,0,0,3594,3609,1,0,0,0,3595,3606,
        3,412,206,0,3596,3597,5,3,0,0,3597,3602,5,330,0,0,3598,3599,5,1,
        0,0,3599,3601,5,330,0,0,3600,3598,1,0,0,0,3601,3604,1,0,0,0,3602,
        3600,1,0,0,0,3602,3603,1,0,0,0,3603,3605,1,0,0,0,3604,3602,1,0,0,
        0,3605,3607,5,4,0,0,3606,3596,1,0,0,0,3606,3607,1,0,0,0,3607,3609,
        1,0,0,0,3608,3574,1,0,0,0,3608,3579,1,0,0,0,3608,3586,1,0,0,0,3608,
        3595,1,0,0,0,3609,377,1,0,0,0,3610,3615,3,380,190,0,3611,3612,5,
        1,0,0,3612,3614,3,380,190,0,3613,3611,1,0,0,0,3614,3617,1,0,0,0,
        3615,3613,1,0,0,0,3615,3616,1,0,0,0,3616,379,1,0,0,0,3617,3615,1,
        0,0,0,3618,3619,3,322,161,0,3619,3622,3,376,188,0,3620,3621,5,195,
        0,0,3621,3623,5,196,0,0,3622,3620,1,0,0,0,3622,3623,1,0,0,0,3623,
        3625,1,0,0,0,3624,3626,3,178,89,0,3625,3624,1,0,0,0,3625,3626,1,
        0,0,0,3626,3628,1,0,0,0,3627,3629,3,374,187,0,3628,3627,1,0,0,0,
        3628,3629,1,0,0,0,3629,381,1,0,0,0,3630,3635,3,384,192,0,3631,3632,
        5,1,0,0,3632,3634,3,384,192,0,3633,3631,1,0,0,0,3634,3637,1,0,0,
        0,3635,3633,1,0,0,0,3635,3636,1,0,0,0,3636,383,1,0,0,0,3637,3635,
        1,0,0,0,3638,3639,3,408,204,0,3639,3642,3,376,188,0,3640,3641,5,
        195,0,0,3641,3643,5,196,0,0,3642,3640,1,0,0,0,3642,3643,1,0,0,0,
        3643,3645,1,0,0,0,3644,3646,3,178,89,0,3645,3644,1,0,0,0,3645,3646,
        1,0,0,0,3646,385,1,0,0,0,3647,3652,3,388,194,0,3648,3649,5,1,0,0,
        3649,3651,3,388,194,0,3650,3648,1,0,0,0,3651,3654,1,0,0,0,3652,3650,
        1,0,0,0,3652,3653,1,0,0,0,3653,387,1,0,0,0,3654,3652,1,0,0,0,3655,
        3656,3,412,206,0,3656,3657,5,2,0,0,3657,3660,3,376,188,0,3658,3659,
        5,195,0,0,3659,3661,5,196,0,0,3660,3658,1,0,0,0,3660,3661,1,0,0,
        0,3661,3663,1,0,0,0,3662,3664,3,178,89,0,3663,3662,1,0,0,0,3663,
        3664,1,0,0,0,3664,389,1,0,0,0,3665,3666,5,301,0,0,3666,3667,3,338,
        169,0,3667,3668,5,275,0,0,3668,3669,3,338,169,0,3669,391,1,0,0,0,
        3670,3671,5,303,0,0,3671,3676,3,394,197,0,3672,3673,5,1,0,0,3673,
        3675,3,394,197,0,3674,3672,1,0,0,0,3675,3678,1,0,0,0,3676,3674,1,
        0,0,0,3676,3677,1,0,0,0,3677,393,1,0,0,0,3678,3676,1,0,0,0,3679,
        3680,3,408,204,0,3680,3681,5,64,0,0,3681,3682,3,396,198,0,3682,395,
        1,0,0,0,3683,3730,3,408,204,0,3684,3685,5,3,0,0,3685,3686,3,408,
        204,0,3686,3687,5,4,0,0,3687,3730,1,0,0,0,3688,3723,5,3,0,0,3689,
        3690,5,80,0,0,3690,3691,5,72,0,0,3691,3696,3,338,169,0,3692,3693,
        5,1,0,0,3693,3695,3,338,169,0,3694,3692,1,0,0,0,3695,3698,1,0,0,
        0,3696,3694,1,0,0,0,3696,3697,1,0,0,0,3697,3724,1,0,0,0,3698,3696,
        1,0,0,0,3699,3700,7,46,0,0,3700,3701,5,72,0,0,3701,3706,3,338,169,
        0,3702,3703,5,1,0,0,3703,3705,3,338,169,0,3704,3702,1,0,0,0,3705,
        3708,1,0,0,0,3706,3704,1,0,0,0,3706,3707,1,0,0,0,3707,3710,1,0,0,
        0,3708,3706,1,0,0,0,3709,3699,1,0,0,0,3709,3710,1,0,0,0,3710,3721,
        1,0,0,0,3711,3712,7,47,0,0,3712,3713,5,72,0,0,3713,3718,3,234,117,
        0,3714,3715,5,1,0,0,3715,3717,3,234,117,0,3716,3714,1,0,0,0,3717,
        3720,1,0,0,0,3718,3716,1,0,0,0,3718,3719,1,0,0,0,3719,3722,1,0,0,
        0,3720,3718,1,0,0,0,3721,3711,1,0,0,0,3721,3722,1,0,0,0,3722,3724,
        1,0,0,0,3723,3689,1,0,0,0,3723,3709,1,0,0,0,3724,3726,1,0,0,0,3725,
        3727,3,398,199,0,3726,3725,1,0,0,0,3726,3727,1,0,0,0,3727,3728,1,
        0,0,0,3728,3730,5,4,0,0,3729,3683,1,0,0,0,3729,3684,1,0,0,0,3729,
        3688,1,0,0,0,3730,397,1,0,0,0,3731,3732,5,225,0,0,3732,3748,3,400,
        200,0,3733,3734,5,245,0,0,3734,3748,3,400,200,0,3735,3736,5,225,
        0,0,3736,3737,5,68,0,0,3737,3738,3,400,200,0,3738,3739,5,59,0,0,
        3739,3740,3,400,200,0,3740,3748,1,0,0,0,3741,3742,5,245,0,0,3742,
        3743,5,68,0,0,3743,3744,3,400,200,0,3744,3745,5,59,0,0,3745,3746,
        3,400,200,0,3746,3748,1,0,0,0,3747,3731,1,0,0,0,3747,3733,1,0,0,
        0,3747,3735,1,0,0,0,3747,3741,1,0,0,0,3748,399,1,0,0,0,3749,3750,
        5,287,0,0,3750,3757,7,48,0,0,3751,3752,5,98,0,0,3752,3757,5,244,
        0,0,3753,3754,3,338,169,0,3754,3755,7,48,0,0,3755,3757,1,0,0,0,3756,
        3749,1,0,0,0,3756,3751,1,0,0,0,3756,3753,1,0,0,0,3757,401,1,0,0,
        0,3758,3763,3,406,203,0,3759,3760,5,1,0,0,3760,3762,3,406,203,0,
        3761,3759,1,0,0,0,3762,3765,1,0,0,0,3763,3761,1,0,0,0,3763,3764,
        1,0,0,0,3764,403,1,0,0,0,3765,3763,1,0,0,0,3766,3771,3,406,203,0,
        3767,3771,5,134,0,0,3768,3771,5,173,0,0,3769,3771,5,238,0,0,3770,
        3766,1,0,0,0,3770,3767,1,0,0,0,3770,3768,1,0,0,0,3770,3769,1,0,0,
        0,3771,405,1,0,0,0,3772,3777,3,412,206,0,3773,3774,5,7,0,0,3774,
        3776,3,412,206,0,3775,3773,1,0,0,0,3776,3779,1,0,0,0,3777,3775,1,
        0,0,0,3777,3778,1,0,0,0,3778,407,1,0,0,0,3779,3777,1,0,0,0,3780,
        3781,3,412,206,0,3781,409,1,0,0,0,3782,3783,5,316,0,0,3783,3785,
        3,412,206,0,3784,3782,1,0,0,0,3785,3786,1,0,0,0,3786,3784,1,0,0,
        0,3786,3787,1,0,0,0,3787,411,1,0,0,0,3788,3791,3,414,207,0,3789,
        3791,3,424,212,0,3790,3788,1,0,0,0,3790,3789,1,0,0,0,3791,413,1,
        0,0,0,3792,3796,5,335,0,0,3793,3796,3,416,208,0,3794,3796,3,426,
        213,0,3795,3792,1,0,0,0,3795,3793,1,0,0,0,3795,3794,1,0,0,0,3796,
        415,1,0,0,0,3797,3798,5,336,0,0,3798,417,1,0,0,0,3799,3801,5,316,
        0,0,3800,3799,1,0,0,0,3800,3801,1,0,0,0,3801,3802,1,0,0,0,3802,3836,
        5,331,0,0,3803,3805,5,316,0,0,3804,3803,1,0,0,0,3804,3805,1,0,0,
        0,3805,3806,1,0,0,0,3806,3836,5,332,0,0,3807,3809,5,316,0,0,3808,
        3807,1,0,0,0,3808,3809,1,0,0,0,3809,3810,1,0,0,0,3810,3836,7,49,
        0,0,3811,3813,5,316,0,0,3812,3811,1,0,0,0,3812,3813,1,0,0,0,3813,
        3814,1,0,0,0,3814,3836,5,330,0,0,3815,3817,5,316,0,0,3816,3815,1,
        0,0,0,3816,3817,1,0,0,0,3817,3818,1,0,0,0,3818,3836,5,327,0,0,3819,
        3821,5,316,0,0,3820,3819,1,0,0,0,3820,3821,1,0,0,0,3821,3822,1,0,
        0,0,3822,3836,5,328,0,0,3823,3825,5,316,0,0,3824,3823,1,0,0,0,3824,
        3825,1,0,0,0,3825,3826,1,0,0,0,3826,3836,5,329,0,0,3827,3829,5,316,
        0,0,3828,3827,1,0,0,0,3828,3829,1,0,0,0,3829,3830,1,0,0,0,3830,3836,
        5,333,0,0,3831,3833,5,316,0,0,3832,3831,1,0,0,0,3832,3833,1,0,0,
        0,3833,3834,1,0,0,0,3834,3836,5,334,0,0,3835,3800,1,0,0,0,3835,3804,
        1,0,0,0,3835,3808,1,0,0,0,3835,3812,1,0,0,0,3835,3816,1,0,0,0,3835,
        3820,1,0,0,0,3835,3824,1,0,0,0,3835,3828,1,0,0,0,3835,3832,1,0,0,
        0,3836,419,1,0,0,0,3837,3838,5,285,0,0,3838,3845,3,376,188,0,3839,
        3845,3,178,89,0,3840,3845,3,374,187,0,3841,3842,7,50,0,0,3842,3843,
        5,195,0,0,3843,3845,5,196,0,0,3844,3837,1,0,0,0,3844,3839,1,0,0,
        0,3844,3840,1,0,0,0,3844,3841,1,0,0,0,3845,421,1,0,0,0,3846,3847,
        7,51,0,0,3847,423,1,0,0,0,3848,3849,7,52,0,0,3849,425,1,0,0,0,3850,
        3851,7,53,0,0,3851,427,1,0,0,0,521,431,444,447,451,454,457,473,477,
        480,485,489,492,500,503,507,510,514,521,528,535,539,548,552,559,
        563,568,572,577,582,586,591,595,600,604,608,615,623,627,631,635,
        638,643,650,653,657,661,664,668,670,674,677,681,684,688,692,695,
        700,704,707,711,716,721,727,736,741,744,747,750,754,757,760,763,
        768,771,774,777,779,787,791,796,798,807,815,818,826,832,837,849,
        853,858,862,867,874,880,884,894,897,903,907,910,917,919,929,936,
        940,944,949,954,957,964,972,977,986,994,1000,1005,1013,1018,1025,
        1049,1060,1069,1075,1082,1091,1099,1103,1109,1117,1133,1158,1163,
        1171,1179,1181,1201,1205,1211,1214,1217,1224,1229,1232,1239,1251,
        1260,1262,1266,1269,1276,1287,1289,1297,1302,1305,1311,1322,1386,
        1395,1399,1405,1409,1414,1420,1432,1440,1446,1459,1464,1480,1487,
        1491,1497,1512,1516,1522,1528,1531,1534,1540,1544,1552,1554,1563,
        1566,1575,1580,1586,1593,1596,1602,1613,1616,1620,1625,1630,1637,
        1640,1643,1650,1655,1664,1672,1678,1681,1684,1690,1694,1698,1702,
        1704,1712,1720,1726,1732,1735,1739,1742,1746,1771,1774,1778,1784,
        1787,1790,1796,1804,1809,1815,1821,1833,1836,1843,1850,1858,1861,
        1869,1873,1880,1996,2004,2012,2021,2031,2035,2038,2044,2050,2062,
        2074,2079,2088,2091,2099,2106,2108,2113,2117,2122,2127,2132,2135,
        2140,2144,2149,2151,2155,2164,2172,2181,2188,2197,2202,2205,2224,
        2226,2235,2242,2245,2252,2256,2262,2270,2281,2292,2299,2305,2318,
        2325,2332,2344,2352,2358,2361,2370,2373,2382,2385,2394,2397,2406,
        2409,2412,2417,2419,2427,2432,2438,2444,2447,2449,2457,2461,2465,
        2471,2475,2483,2487,2490,2493,2496,2500,2505,2512,2516,2519,2522,
        2525,2527,2530,2542,2545,2549,2559,2563,2565,2568,2572,2578,2582,
        2593,2603,2615,2630,2635,2642,2658,2663,2676,2681,2689,2695,2699,
        2708,2723,2728,2740,2745,2753,2756,2760,2774,2787,2792,2796,2799,
        2804,2813,2816,2821,2828,2831,2839,2846,2853,2856,2861,2864,2869,
        2873,2876,2879,2885,2890,2895,2913,2915,2918,2929,2938,2945,2953,
        2960,2964,2967,2975,2983,2989,2997,3009,3012,3018,3022,3024,3033,
        3045,3047,3054,3061,3067,3073,3075,3082,3090,3096,3103,3109,3113,
        3115,3122,3131,3144,3149,3153,3167,3169,3177,3179,3183,3191,3200,
        3206,3214,3219,3231,3236,3239,3245,3249,3254,3259,3264,3270,3291,
        3293,3302,3306,3315,3319,3337,3340,3348,3357,3380,3391,3398,3401,
        3410,3414,3426,3451,3458,3461,3476,3480,3490,3492,3505,3507,3517,
        3530,3534,3541,3546,3554,3558,3567,3572,3589,3593,3602,3606,3608,
        3615,3622,3625,3628,3635,3642,3645,3652,3660,3663,3676,3696,3706,
        3709,3718,3721,3723,3726,3729,3747,3756,3763,3770,3777,3786,3790,
        3795,3800,3804,3808,3812,3816,3820,3824,3828,3832,3835,3844
    ]

class fugue_sqlParser ( Parser ):

    grammarFileName = "fugue_sql.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "','", "':'", "'('", "')'", "'['", "']'", 
                     "'.'", "'{'", "'}'", "'true'", "'false'", "'null'", 
                     "';'", "'/*+'", "'*/'", "'->'", "'FILL'", "'TAKE'", 
                     "'HASH'", "'RAND'", "'EVEN'", "'PRESORT'", "'PERSIST'", 
                     "'BROADCAST'", "'PARAMS'", "'PROCESS'", "'OUTPUT'", 
                     "'OUTTRANSFORM'", "'ROWCOUNT'", "'CONCURRENCY'", "'PREPARTITION'", 
                     "'ZIP'", "'PRINT'", "'TITLE'", "'SAVE'", "'APPEND'", 
                     "'PARQUET'", "'CSV'", "'JSON'", "'SINGLE'", "'CHECKPOINT'", 
                     "'WEAK'", "'STRONG'", "'DETERMINISTIC'", "'YIELD'", 
                     "'CONNECT'", "'SAMPLE'", "'SEED'", "'APPROX'", "'SUB'", 
                     "'CALLBACK'", "'DATAFRAME'", "'FILE'", "'ADD'", "'AFTER'", 
                     "'ALL'", "'ALTER'", "'ANALYZE'", "'AND'", "'ANTI'", 
                     "'ANY'", "'ARCHIVE'", "'ARRAY'", "'AS'", "'ASC'", "'AT'", 
                     "'AUTHORIZATION'", "'BETWEEN'", "'BOTH'", "'BUCKET'", 
                     "'BUCKETS'", "'BY'", "'CACHE'", "'CASCADE'", "'CASE'", 
                     "<INVALID>", "'CHANGE'", "'CHECK'", "'CLEAR'", "'CLUSTER'", 
                     "'CLUSTERED'", "'CODEGEN'", "'COLLATE'", "'COLLECTION'", 
                     "'COLUMN'", "'COLUMNS'", "'COMMENT'", "'COMMIT'", "'COMPACT'", 
                     "'COMPACTIONS'", "'COMPUTE'", "'CONCATENATE'", "'CONSTRAINT'", 
                     "'COST'", "'CREATE'", "'CROSS'", "'CUBE'", "'CURRENT'", 
                     "'CURRENT_DATE'", "'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", 
                     "'CURRENT_USER'", "'DATA'", "'DATABASE'", "<INVALID>", 
                     "'DAY'", "'DBPROPERTIES'", "'DEFINED'", "'DELETE'", 
                     "'DELIMITED'", "'DESC'", "'DESCRIBE'", "'DFS'", "'DIRECTORIES'", 
                     "'DIRECTORY'", "'DISTINCT'", "'DISTRIBUTE'", "'DROP'", 
                     "'ELSE'", "'END'", "'ESCAPE'", "'ESCAPED'", "'EXCEPT'", 
                     "'EXCHANGE'", "'EXISTS'", "'EXPLAIN'", "'EXPORT'", 
                     "'EXTENDED'", "'EXTERNAL'", "'EXTRACT'", "'FALSE'", 
                     "'FETCH'", "'FIELDS'", "'FILTER'", "'FILEFORMAT'", 
                     "'FIRST'", "'FOLLOWING'", "'FOR'", "'FOREIGN'", "'FORMAT'", 
                     "'FORMATTED'", "'FROM'", "'FULL'", "'FUNCTION'", "'FUNCTIONS'", 
                     "'GLOBAL'", "'GRANT'", "'GROUP'", "'GROUPING'", "'HAVING'", 
                     "'HOUR'", "'IF'", "'IGNORE'", "'IMPORT'", "'IN'", "'INDEX'", 
                     "'INDEXES'", "'INNER'", "'INPATH'", "'INPUTFORMAT'", 
                     "'INSERT'", "'INTERSECT'", "'INTERVAL'", "'INTO'", 
                     "'IS'", "'ITEMS'", "'JOIN'", "'KEYS'", "'LAST'", "'LATERAL'", 
                     "'LAZY'", "'LEADING'", "'LEFT'", "'LIKE'", "'LIMIT'", 
                     "'LINES'", "'LIST'", "'LOAD'", "'LOCAL'", "'LOCATION'", 
                     "'LOCK'", "'LOCKS'", "'LOGICAL'", "'MACRO'", "'MAP'", 
                     "'MATCHED'", "'MERGE'", "'MINUTE'", "'MONTH'", "'MSCK'", 
                     "'NAMESPACE'", "'NAMESPACES'", "'NATURAL'", "'NO'", 
                     "<INVALID>", "'NULL'", "'NULLS'", "'OF'", "'ON'", "'ONLY'", 
                     "'OPTION'", "'OPTIONS'", "'OR'", "'ORDER'", "'OUT'", 
                     "'OUTER'", "'OUTPUTFORMAT'", "'OVER'", "'OVERLAPS'", 
                     "'OVERLAY'", "'OVERWRITE'", "'PARTITION'", "'PARTITIONED'", 
                     "'PARTITIONS'", "'PERCENT'", "'PIVOT'", "'PLACING'", 
                     "'POSITION'", "'PRECEDING'", "'PRIMARY'", "'PRINCIPALS'", 
                     "'PROPERTIES'", "'PURGE'", "'QUERY'", "'RANGE'", "'RECORDREADER'", 
                     "'RECORDWRITER'", "'RECOVER'", "'REDUCE'", "'REFERENCES'", 
                     "'REFRESH'", "'RENAME'", "'REPAIR'", "'REPLACE'", "'RESET'", 
                     "'RESTRICT'", "'REVOKE'", "'RIGHT'", "<INVALID>", "'ROLE'", 
                     "'ROLES'", "'ROLLBACK'", "'ROLLUP'", "'ROW'", "'ROWS'", 
                     "'SCHEMA'", "'SECOND'", "'SELECT'", "'SEMI'", "'SEPARATED'", 
                     "'SERDE'", "'SERDEPROPERTIES'", "'SESSION_USER'", "'SET'", 
                     "'MINUS'", "'SETS'", "'SHOW'", "'SKEWED'", "'SOME'", 
                     "'SORT'", "'SORTED'", "'START'", "'STATISTICS'", "'STORED'", 
                     "'STRATIFY'", "'STRUCT'", "'SUBSTR'", "'SUBSTRING'", 
                     "'TABLE'", "'TABLES'", "'TABLESAMPLE'", "'TBLPROPERTIES'", 
                     "<INVALID>", "'TERMINATED'", "'THEN'", "'TO'", "'TOUCH'", 
                     "'TRAILING'", "'TRANSACTION'", "'TRANSACTIONS'", "'TRANSFORM'", 
                     "'TRIM'", "'TRUE'", "'TRUNCATE'", "'TYPE'", "'UNARCHIVE'", 
                     "'UNBOUNDED'", "'UNCACHE'", "'UNION'", "'UNIQUE'", 
                     "'UNKNOWN'", "'UNLOCK'", "'UNSET'", "'UPDATE'", "'USE'", 
                     "'USER'", "'USING'", "'VALUES'", "'VIEW'", "'VIEWS'", 
                     "'WHEN'", "'WHERE'", "'WINDOW'", "'WITH'", "'YEAR'", 
                     "'='", "'=='", "'<=>'", "'<>'", "'!='", "'<'", "<INVALID>", 
                     "'>'", "<INVALID>", "'+'", "'-'", "'*'", "'/'", "'%'", 
                     "'DIV'", "'~'", "'&'", "'|'", "'||'", "'^'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "FILL", "TAKE", "HASH", "RAND", "EVEN", 
                      "PRESORT", "PERSIST", "BROADCAST", "PARAMS", "PROCESS", 
                      "OUTPUT", "OUTTRANSFORM", "ROWCOUNT", "CONCURRENCY", 
                      "PREPARTITION", "ZIP", "PRINT", "TITLE", "SAVE", "APPEND", 
                      "PARQUET", "CSV", "JSON", "SINGLE", "CHECKPOINT", 
                      "WEAK", "STRONG", "DETERMINISTIC", "YIELD", "CONNECT", 
                      "SAMPLE", "SEED", "APPROX", "SUB", "CALLBACK", "DATAFRAME", 
                      "FILE", "ADD", "AFTER", "ALL", "ALTER", "ANALYZE", 
                      "AND", "ANTI", "ANY", "ARCHIVE", "ARRAY", "AS", "ASC", 
                      "AT", "AUTHORIZATION", "BETWEEN", "BOTH", "BUCKET", 
                      "BUCKETS", "BY", "CACHE", "CASCADE", "CASE", "CAST", 
                      "CHANGE", "CHECK", "CLEAR", "CLUSTER", "CLUSTERED", 
                      "CODEGEN", "COLLATE", "COLLECTION", "COLUMN", "COLUMNS", 
                      "COMMENT", "COMMIT", "COMPACT", "COMPACTIONS", "COMPUTE", 
                      "CONCATENATE", "CONSTRAINT", "COST", "CREATE", "CROSS", 
                      "CUBE", "CURRENT", "CURRENT_DATE", "CURRENT_TIME", 
                      "CURRENT_TIMESTAMP", "CURRENT_USER", "DATA", "DATABASE", 
                      "DATABASES", "DAY", "DBPROPERTIES", "DEFINED", "DELETE", 
                      "DELIMITED", "DESC", "DESCRIBE", "DFS", "DIRECTORIES", 
                      "DIRECTORY", "DISTINCT", "DISTRIBUTE", "DROP", "ELSE", 
                      "END", "ESCAPE", "ESCAPED", "EXCEPT", "EXCHANGE", 
                      "EXISTS", "EXPLAIN", "EXPORT", "EXTENDED", "EXTERNAL", 
                      "EXTRACT", "FALSE", "FETCH", "FIELDS", "FILTER", "FILEFORMAT", 
                      "FIRST", "FOLLOWING", "FOR", "FOREIGN", "FORMAT", 
                      "FORMATTED", "FROM", "FULL", "FUNCTION", "FUNCTIONS", 
                      "GLOBAL", "GRANT", "GROUP", "GROUPING", "HAVING", 
                      "HOUR", "IF", "IGNORE", "IMPORT", "IN", "INDEX", "INDEXES", 
                      "INNER", "INPATH", "INPUTFORMAT", "INSERT", "INTERSECT", 
                      "INTERVAL", "INTO", "IS", "ITEMS", "JOIN", "KEYS", 
                      "LAST", "LATERAL", "LAZY", "LEADING", "LEFT", "LIKE", 
                      "LIMIT", "LINES", "LIST", "LOAD", "LOCAL", "LOCATION", 
                      "LOCK", "LOCKS", "LOGICAL", "MACRO", "MAP", "MATCHED", 
                      "MERGE", "MINUTE", "MONTH", "MSCK", "NAMESPACE", "NAMESPACES", 
                      "NATURAL", "NO", "NOT", "THENULL", "THENULLS", "OF", 
                      "ON", "ONLY", "OPTION", "OPTIONS", "OR", "ORDER", 
                      "OUT", "OUTER", "OUTPUTFORMAT", "OVER", "OVERLAPS", 
                      "OVERLAY", "OVERWRITE", "PARTITION", "PARTITIONED", 
                      "PARTITIONS", "PERCENTLIT", "PIVOT", "PLACING", "POSITION", 
                      "PRECEDING", "PRIMARY", "PRINCIPALS", "PROPERTIES", 
                      "PURGE", "QUERY", "RANGE", "RECORDREADER", "RECORDWRITER", 
                      "RECOVER", "REDUCE", "REFERENCES", "REFRESH", "RENAME", 
                      "REPAIR", "REPLACE", "RESET", "RESTRICT", "REVOKE", 
                      "RIGHT", "RLIKE", "ROLE", "ROLES", "ROLLBACK", "ROLLUP", 
                      "ROW", "ROWS", "SCHEMA", "SECOND", "SELECT", "SEMI", 
                      "SEPARATED", "SERDE", "SERDEPROPERTIES", "SESSION_USER", 
                      "SET", "SETMINUS", "SETS", "SHOW", "SKEWED", "SOME", 
                      "SORT", "SORTED", "START", "STATISTICS", "STORED", 
                      "STRATIFY", "STRUCT", "SUBSTR", "SUBSTRING", "TABLE", 
                      "TABLES", "TABLESAMPLE", "TBLPROPERTIES", "TEMPORARY", 
                      "TERMINATED", "THEN", "TO", "TOUCH", "TRAILING", "TRANSACTION", 
                      "TRANSACTIONS", "TRANSFORM", "TRIM", "TRUE", "TRUNCATE", 
                      "TYPE", "UNARCHIVE", "UNBOUNDED", "UNCACHE", "UNION", 
                      "UNIQUE", "UNKNOWN", "UNLOCK", "UNSET", "UPDATE", 
                      "USE", "USER", "USING", "VALUES", "VIEW", "VIEWS", 
                      "WHEN", "WHERE", "WINDOW", "WITH", "YEAR", "EQUAL", 
                      "DOUBLEEQUAL", "NSEQ", "NEQ", "NEQJ", "LT", "LTE", 
                      "GT", "GTE", "PLUS", "MINUS", "ASTERISK", "SLASH", 
                      "PERCENT", "DIV", "TILDE", "AMPERSAND", "PIPE", "CONCAT_PIPE", 
                      "HAT", "STRING", "BIGINT_LITERAL", "SMALLINT_LITERAL", 
                      "TINYINT_LITERAL", "INTEGER_VALUE", "EXPONENT_VALUE", 
                      "DECIMAL_VALUE", "DOUBLE_LITERAL", "BIGDECIMAL_LITERAL", 
                      "IDENTIFIER", "BACKQUOTED_IDENTIFIER", "SIMPLE_COMMENT", 
                      "BRACKETED_COMMENT", "WS", "UNRECOGNIZED" ]

    RULE_fugueLanguage = 0
    RULE_fugueSingleStatement = 1
    RULE_fugueSingleTask = 2
    RULE_fugueNestableTask = 3
    RULE_fugueNestableTaskCollectionNoSelect = 4
    RULE_fugueTransformTask = 5
    RULE_fugueProcessTask = 6
    RULE_fugueSaveAndUseTask = 7
    RULE_fugueRenameColumnsTask = 8
    RULE_fugueAlterColumnsTask = 9
    RULE_fugueDropColumnsTask = 10
    RULE_fugueDropnaTask = 11
    RULE_fugueFillnaTask = 12
    RULE_fugueSampleTask = 13
    RULE_fugueTakeTask = 14
    RULE_fugueZipTask = 15
    RULE_fugueCreateTask = 16
    RULE_fugueCreateDataTask = 17
    RULE_fugueLoadTask = 18
    RULE_fugueOutputTask = 19
    RULE_fuguePrintTask = 20
    RULE_fugueSaveTask = 21
    RULE_fugueOutputTransformTask = 22
    RULE_fugueModuleTask = 23
    RULE_fugueSqlEngine = 24
    RULE_fugueSingleFile = 25
    RULE_fugueLoadColumns = 26
    RULE_fugueSaveMode = 27
    RULE_fugueFileFormat = 28
    RULE_fuguePath = 29
    RULE_fugueCheckpoint = 30
    RULE_fugueCheckpointNamespace = 31
    RULE_fugueYield = 32
    RULE_fugueBroadcast = 33
    RULE_fugueDataFrames = 34
    RULE_fugueDataFramePair = 35
    RULE_fugueDataFrame = 36
    RULE_fugueDataFrameMember = 37
    RULE_fugueAssignment = 38
    RULE_fugueAssignmentSign = 39
    RULE_fugueSingleOutputExtensionCommonWild = 40
    RULE_fugueSingleOutputExtensionCommon = 41
    RULE_fugueExtension = 42
    RULE_fugueSampleMethod = 43
    RULE_fugueZipType = 44
    RULE_fuguePrepartition = 45
    RULE_fuguePartitionAlgo = 46
    RULE_fuguePartitionNum = 47
    RULE_fuguePartitionNumber = 48
    RULE_fugueParams = 49
    RULE_fugueCols = 50
    RULE_fugueColsSort = 51
    RULE_fugueColSort = 52
    RULE_fugueColumnIdentifier = 53
    RULE_fugueRenameExpression = 54
    RULE_fugueWildSchema = 55
    RULE_fugueWildSchemaPair = 56
    RULE_fugueSchemaOp = 57
    RULE_fugueSchema = 58
    RULE_fugueSchemaPair = 59
    RULE_fugueSchemaKey = 60
    RULE_fugueSchemaType = 61
    RULE_fugueRenamePair = 62
    RULE_fugueJson = 63
    RULE_fugueJsonObj = 64
    RULE_fugueJsonPairs = 65
    RULE_fugueJsonPair = 66
    RULE_fugueJsonKey = 67
    RULE_fugueJsonArray = 68
    RULE_fugueJsonValue = 69
    RULE_fugueJsonNumber = 70
    RULE_fugueJsonString = 71
    RULE_fugueJsonBool = 72
    RULE_fugueJsonNull = 73
    RULE_fugueIdentifier = 74
    RULE_singleStatement = 75
    RULE_singleExpression = 76
    RULE_singleTableIdentifier = 77
    RULE_singleMultipartIdentifier = 78
    RULE_singleFunctionIdentifier = 79
    RULE_singleDataType = 80
    RULE_singleTableSchema = 81
    RULE_statement = 82
    RULE_unsupportedHiveNativeCommands = 83
    RULE_createTableHeader = 84
    RULE_replaceTableHeader = 85
    RULE_bucketSpec = 86
    RULE_skewSpec = 87
    RULE_locationSpec = 88
    RULE_commentSpec = 89
    RULE_query = 90
    RULE_insertInto = 91
    RULE_partitionSpecLocation = 92
    RULE_partitionSpec = 93
    RULE_partitionVal = 94
    RULE_theNamespace = 95
    RULE_describeFuncName = 96
    RULE_describeColName = 97
    RULE_ctes = 98
    RULE_namedQuery = 99
    RULE_tableProvider = 100
    RULE_createTableClauses = 101
    RULE_tablePropertyList = 102
    RULE_tableProperty = 103
    RULE_tablePropertyKey = 104
    RULE_tablePropertyValue = 105
    RULE_constantList = 106
    RULE_nestedConstantList = 107
    RULE_createFileFormat = 108
    RULE_fileFormat = 109
    RULE_storageHandler = 110
    RULE_resource = 111
    RULE_dmlStatementNoWith = 112
    RULE_queryOrganization = 113
    RULE_multiInsertQueryBody = 114
    RULE_queryTerm = 115
    RULE_queryPrimary = 116
    RULE_sortItem = 117
    RULE_fromStatement = 118
    RULE_fromStatementBody = 119
    RULE_querySpecification = 120
    RULE_optionalFromClause = 121
    RULE_transformClause = 122
    RULE_selectClause = 123
    RULE_setClause = 124
    RULE_matchedClause = 125
    RULE_notMatchedClause = 126
    RULE_matchedAction = 127
    RULE_notMatchedAction = 128
    RULE_assignmentList = 129
    RULE_assignment = 130
    RULE_whereClause = 131
    RULE_havingClause = 132
    RULE_hint = 133
    RULE_hintStatement = 134
    RULE_fromClause = 135
    RULE_aggregationClause = 136
    RULE_groupingSet = 137
    RULE_pivotClause = 138
    RULE_pivotColumn = 139
    RULE_pivotValue = 140
    RULE_lateralView = 141
    RULE_setQuantifier = 142
    RULE_relation = 143
    RULE_joinRelation = 144
    RULE_joinType = 145
    RULE_joinCriteria = 146
    RULE_sample = 147
    RULE_sampleMethod = 148
    RULE_identifierList = 149
    RULE_identifierSeq = 150
    RULE_orderedIdentifierList = 151
    RULE_orderedIdentifier = 152
    RULE_identifierCommentList = 153
    RULE_identifierComment = 154
    RULE_relationPrimary = 155
    RULE_inlineTable = 156
    RULE_functionTable = 157
    RULE_tableAlias = 158
    RULE_rowFormat = 159
    RULE_multipartIdentifierList = 160
    RULE_multipartIdentifier = 161
    RULE_tableIdentifier = 162
    RULE_functionIdentifier = 163
    RULE_namedExpression = 164
    RULE_namedExpressionSeq = 165
    RULE_transformList = 166
    RULE_transform = 167
    RULE_transformArgument = 168
    RULE_expression = 169
    RULE_booleanExpression = 170
    RULE_predicate = 171
    RULE_valueExpression = 172
    RULE_primaryExpression = 173
    RULE_constant = 174
    RULE_comparisonOperator = 175
    RULE_comparisonEqualOperator = 176
    RULE_arithmeticOperator = 177
    RULE_predicateOperator = 178
    RULE_booleanValue = 179
    RULE_interval = 180
    RULE_errorCapturingMultiUnitsInterval = 181
    RULE_multiUnitsInterval = 182
    RULE_errorCapturingUnitToUnitInterval = 183
    RULE_unitToUnitInterval = 184
    RULE_intervalValue = 185
    RULE_intervalUnit = 186
    RULE_colPosition = 187
    RULE_dataType = 188
    RULE_qualifiedColTypeWithPositionList = 189
    RULE_qualifiedColTypeWithPosition = 190
    RULE_colTypeList = 191
    RULE_colType = 192
    RULE_complexColTypeList = 193
    RULE_complexColType = 194
    RULE_whenClause = 195
    RULE_windowClause = 196
    RULE_namedWindow = 197
    RULE_windowSpec = 198
    RULE_windowFrame = 199
    RULE_frameBound = 200
    RULE_qualifiedNameList = 201
    RULE_functionName = 202
    RULE_qualifiedName = 203
    RULE_errorCapturingIdentifier = 204
    RULE_errorCapturingIdentifierExtra = 205
    RULE_identifier = 206
    RULE_strictIdentifier = 207
    RULE_quotedIdentifier = 208
    RULE_number = 209
    RULE_alterColumnAction = 210
    RULE_ansiNonReserved = 211
    RULE_strictNonReserved = 212
    RULE_nonReserved = 213

    ruleNames =  [ "fugueLanguage", "fugueSingleStatement", "fugueSingleTask", 
                   "fugueNestableTask", "fugueNestableTaskCollectionNoSelect", 
                   "fugueTransformTask", "fugueProcessTask", "fugueSaveAndUseTask", 
                   "fugueRenameColumnsTask", "fugueAlterColumnsTask", "fugueDropColumnsTask", 
                   "fugueDropnaTask", "fugueFillnaTask", "fugueSampleTask", 
                   "fugueTakeTask", "fugueZipTask", "fugueCreateTask", "fugueCreateDataTask", 
                   "fugueLoadTask", "fugueOutputTask", "fuguePrintTask", 
                   "fugueSaveTask", "fugueOutputTransformTask", "fugueModuleTask", 
                   "fugueSqlEngine", "fugueSingleFile", "fugueLoadColumns", 
                   "fugueSaveMode", "fugueFileFormat", "fuguePath", "fugueCheckpoint", 
                   "fugueCheckpointNamespace", "fugueYield", "fugueBroadcast", 
                   "fugueDataFrames", "fugueDataFramePair", "fugueDataFrame", 
                   "fugueDataFrameMember", "fugueAssignment", "fugueAssignmentSign", 
                   "fugueSingleOutputExtensionCommonWild", "fugueSingleOutputExtensionCommon", 
                   "fugueExtension", "fugueSampleMethod", "fugueZipType", 
                   "fuguePrepartition", "fuguePartitionAlgo", "fuguePartitionNum", 
                   "fuguePartitionNumber", "fugueParams", "fugueCols", "fugueColsSort", 
                   "fugueColSort", "fugueColumnIdentifier", "fugueRenameExpression", 
                   "fugueWildSchema", "fugueWildSchemaPair", "fugueSchemaOp", 
                   "fugueSchema", "fugueSchemaPair", "fugueSchemaKey", "fugueSchemaType", 
                   "fugueRenamePair", "fugueJson", "fugueJsonObj", "fugueJsonPairs", 
                   "fugueJsonPair", "fugueJsonKey", "fugueJsonArray", "fugueJsonValue", 
                   "fugueJsonNumber", "fugueJsonString", "fugueJsonBool", 
                   "fugueJsonNull", "fugueIdentifier", "singleStatement", 
                   "singleExpression", "singleTableIdentifier", "singleMultipartIdentifier", 
                   "singleFunctionIdentifier", "singleDataType", "singleTableSchema", 
                   "statement", "unsupportedHiveNativeCommands", "createTableHeader", 
                   "replaceTableHeader", "bucketSpec", "skewSpec", "locationSpec", 
                   "commentSpec", "query", "insertInto", "partitionSpecLocation", 
                   "partitionSpec", "partitionVal", "theNamespace", "describeFuncName", 
                   "describeColName", "ctes", "namedQuery", "tableProvider", 
                   "createTableClauses", "tablePropertyList", "tableProperty", 
                   "tablePropertyKey", "tablePropertyValue", "constantList", 
                   "nestedConstantList", "createFileFormat", "fileFormat", 
                   "storageHandler", "resource", "dmlStatementNoWith", "queryOrganization", 
                   "multiInsertQueryBody", "queryTerm", "queryPrimary", 
                   "sortItem", "fromStatement", "fromStatementBody", "querySpecification", 
                   "optionalFromClause", "transformClause", "selectClause", 
                   "setClause", "matchedClause", "notMatchedClause", "matchedAction", 
                   "notMatchedAction", "assignmentList", "assignment", "whereClause", 
                   "havingClause", "hint", "hintStatement", "fromClause", 
                   "aggregationClause", "groupingSet", "pivotClause", "pivotColumn", 
                   "pivotValue", "lateralView", "setQuantifier", "relation", 
                   "joinRelation", "joinType", "joinCriteria", "sample", 
                   "sampleMethod", "identifierList", "identifierSeq", "orderedIdentifierList", 
                   "orderedIdentifier", "identifierCommentList", "identifierComment", 
                   "relationPrimary", "inlineTable", "functionTable", "tableAlias", 
                   "rowFormat", "multipartIdentifierList", "multipartIdentifier", 
                   "tableIdentifier", "functionIdentifier", "namedExpression", 
                   "namedExpressionSeq", "transformList", "transform", "transformArgument", 
                   "expression", "booleanExpression", "predicate", "valueExpression", 
                   "primaryExpression", "constant", "comparisonOperator", 
                   "comparisonEqualOperator", "arithmeticOperator", "predicateOperator", 
                   "booleanValue", "interval", "errorCapturingMultiUnitsInterval", 
                   "multiUnitsInterval", "errorCapturingUnitToUnitInterval", 
                   "unitToUnitInterval", "intervalValue", "intervalUnit", 
                   "colPosition", "dataType", "qualifiedColTypeWithPositionList", 
                   "qualifiedColTypeWithPosition", "colTypeList", "colType", 
                   "complexColTypeList", "complexColType", "whenClause", 
                   "windowClause", "namedWindow", "windowSpec", "windowFrame", 
                   "frameBound", "qualifiedNameList", "functionName", "qualifiedName", 
                   "errorCapturingIdentifier", "errorCapturingIdentifierExtra", 
                   "identifier", "strictIdentifier", "quotedIdentifier", 
                   "number", "alterColumnAction", "ansiNonReserved", "strictNonReserved", 
                   "nonReserved" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    FILL=17
    TAKE=18
    HASH=19
    RAND=20
    EVEN=21
    PRESORT=22
    PERSIST=23
    BROADCAST=24
    PARAMS=25
    PROCESS=26
    OUTPUT=27
    OUTTRANSFORM=28
    ROWCOUNT=29
    CONCURRENCY=30
    PREPARTITION=31
    ZIP=32
    PRINT=33
    TITLE=34
    SAVE=35
    APPEND=36
    PARQUET=37
    CSV=38
    JSON=39
    SINGLE=40
    CHECKPOINT=41
    WEAK=42
    STRONG=43
    DETERMINISTIC=44
    YIELD=45
    CONNECT=46
    SAMPLE=47
    SEED=48
    APPROX=49
    SUB=50
    CALLBACK=51
    DATAFRAME=52
    FILE=53
    ADD=54
    AFTER=55
    ALL=56
    ALTER=57
    ANALYZE=58
    AND=59
    ANTI=60
    ANY=61
    ARCHIVE=62
    ARRAY=63
    AS=64
    ASC=65
    AT=66
    AUTHORIZATION=67
    BETWEEN=68
    BOTH=69
    BUCKET=70
    BUCKETS=71
    BY=72
    CACHE=73
    CASCADE=74
    CASE=75
    CAST=76
    CHANGE=77
    CHECK=78
    CLEAR=79
    CLUSTER=80
    CLUSTERED=81
    CODEGEN=82
    COLLATE=83
    COLLECTION=84
    COLUMN=85
    COLUMNS=86
    COMMENT=87
    COMMIT=88
    COMPACT=89
    COMPACTIONS=90
    COMPUTE=91
    CONCATENATE=92
    CONSTRAINT=93
    COST=94
    CREATE=95
    CROSS=96
    CUBE=97
    CURRENT=98
    CURRENT_DATE=99
    CURRENT_TIME=100
    CURRENT_TIMESTAMP=101
    CURRENT_USER=102
    DATA=103
    DATABASE=104
    DATABASES=105
    DAY=106
    DBPROPERTIES=107
    DEFINED=108
    DELETE=109
    DELIMITED=110
    DESC=111
    DESCRIBE=112
    DFS=113
    DIRECTORIES=114
    DIRECTORY=115
    DISTINCT=116
    DISTRIBUTE=117
    DROP=118
    ELSE=119
    END=120
    ESCAPE=121
    ESCAPED=122
    EXCEPT=123
    EXCHANGE=124
    EXISTS=125
    EXPLAIN=126
    EXPORT=127
    EXTENDED=128
    EXTERNAL=129
    EXTRACT=130
    FALSE=131
    FETCH=132
    FIELDS=133
    FILTER=134
    FILEFORMAT=135
    FIRST=136
    FOLLOWING=137
    FOR=138
    FOREIGN=139
    FORMAT=140
    FORMATTED=141
    FROM=142
    FULL=143
    FUNCTION=144
    FUNCTIONS=145
    GLOBAL=146
    GRANT=147
    GROUP=148
    GROUPING=149
    HAVING=150
    HOUR=151
    IF=152
    IGNORE=153
    IMPORT=154
    IN=155
    INDEX=156
    INDEXES=157
    INNER=158
    INPATH=159
    INPUTFORMAT=160
    INSERT=161
    INTERSECT=162
    INTERVAL=163
    INTO=164
    IS=165
    ITEMS=166
    JOIN=167
    KEYS=168
    LAST=169
    LATERAL=170
    LAZY=171
    LEADING=172
    LEFT=173
    LIKE=174
    LIMIT=175
    LINES=176
    LIST=177
    LOAD=178
    LOCAL=179
    LOCATION=180
    LOCK=181
    LOCKS=182
    LOGICAL=183
    MACRO=184
    MAP=185
    MATCHED=186
    MERGE=187
    MINUTE=188
    MONTH=189
    MSCK=190
    NAMESPACE=191
    NAMESPACES=192
    NATURAL=193
    NO=194
    NOT=195
    THENULL=196
    THENULLS=197
    OF=198
    ON=199
    ONLY=200
    OPTION=201
    OPTIONS=202
    OR=203
    ORDER=204
    OUT=205
    OUTER=206
    OUTPUTFORMAT=207
    OVER=208
    OVERLAPS=209
    OVERLAY=210
    OVERWRITE=211
    PARTITION=212
    PARTITIONED=213
    PARTITIONS=214
    PERCENTLIT=215
    PIVOT=216
    PLACING=217
    POSITION=218
    PRECEDING=219
    PRIMARY=220
    PRINCIPALS=221
    PROPERTIES=222
    PURGE=223
    QUERY=224
    RANGE=225
    RECORDREADER=226
    RECORDWRITER=227
    RECOVER=228
    REDUCE=229
    REFERENCES=230
    REFRESH=231
    RENAME=232
    REPAIR=233
    REPLACE=234
    RESET=235
    RESTRICT=236
    REVOKE=237
    RIGHT=238
    RLIKE=239
    ROLE=240
    ROLES=241
    ROLLBACK=242
    ROLLUP=243
    ROW=244
    ROWS=245
    SCHEMA=246
    SECOND=247
    SELECT=248
    SEMI=249
    SEPARATED=250
    SERDE=251
    SERDEPROPERTIES=252
    SESSION_USER=253
    SET=254
    SETMINUS=255
    SETS=256
    SHOW=257
    SKEWED=258
    SOME=259
    SORT=260
    SORTED=261
    START=262
    STATISTICS=263
    STORED=264
    STRATIFY=265
    STRUCT=266
    SUBSTR=267
    SUBSTRING=268
    TABLE=269
    TABLES=270
    TABLESAMPLE=271
    TBLPROPERTIES=272
    TEMPORARY=273
    TERMINATED=274
    THEN=275
    TO=276
    TOUCH=277
    TRAILING=278
    TRANSACTION=279
    TRANSACTIONS=280
    TRANSFORM=281
    TRIM=282
    TRUE=283
    TRUNCATE=284
    TYPE=285
    UNARCHIVE=286
    UNBOUNDED=287
    UNCACHE=288
    UNION=289
    UNIQUE=290
    UNKNOWN=291
    UNLOCK=292
    UNSET=293
    UPDATE=294
    USE=295
    USER=296
    USING=297
    VALUES=298
    VIEW=299
    VIEWS=300
    WHEN=301
    WHERE=302
    WINDOW=303
    WITH=304
    YEAR=305
    EQUAL=306
    DOUBLEEQUAL=307
    NSEQ=308
    NEQ=309
    NEQJ=310
    LT=311
    LTE=312
    GT=313
    GTE=314
    PLUS=315
    MINUS=316
    ASTERISK=317
    SLASH=318
    PERCENT=319
    DIV=320
    TILDE=321
    AMPERSAND=322
    PIPE=323
    CONCAT_PIPE=324
    HAT=325
    STRING=326
    BIGINT_LITERAL=327
    SMALLINT_LITERAL=328
    TINYINT_LITERAL=329
    INTEGER_VALUE=330
    EXPONENT_VALUE=331
    DECIMAL_VALUE=332
    DOUBLE_LITERAL=333
    BIGDECIMAL_LITERAL=334
    IDENTIFIER=335
    BACKQUOTED_IDENTIFIER=336
    SIMPLE_COMMENT=337
    BRACKETED_COMMENT=338
    WS=339
    UNRECOGNIZED=340

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class FugueLanguageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(fugue_sqlParser.EOF, 0)

        def fugueSingleTask(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.FugueSingleTaskContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.FugueSingleTaskContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueLanguage

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueLanguage" ):
                return visitor.visitFugueLanguage(self)
            else:
                return visitor.visitChildren(self)




    def fugueLanguage(self):

        localctx = fugue_sqlParser.FugueLanguageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_fugueLanguage)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 429 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 428
                self.fugueSingleTask()
                self.state = 431 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la - 17)) & ~0x3f) == 0 and ((1 << (_la - 17)) & -127238042109) != 0 or (((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & -1) != 0 or (((_la - 145)) & ~0x3f) == 0 and ((1 << (_la - 145)) & -1) != 0 or (((_la - 209)) & ~0x3f) == 0 and ((1 << (_la - 209)) & -1) != 0 or (((_la - 273)) & ~0x3f) == 0 and ((1 << (_la - 273)) & -4611545272349097985) != 0):
                    break

            self.state = 433
            self.match(fugue_sqlParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueSingleStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fugueSingleTask(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSingleTaskContext,0)


        def EOF(self):
            return self.getToken(fugue_sqlParser.EOF, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueSingleStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueSingleStatement" ):
                return visitor.visitFugueSingleStatement(self)
            else:
                return visitor.visitChildren(self)




    def fugueSingleStatement(self):

        localctx = fugue_sqlParser.FugueSingleStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_fugueSingleStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 435
            self.fugueSingleTask()
            self.state = 436
            self.match(fugue_sqlParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueSingleTaskContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fugueNestableTask(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueNestableTaskContext,0)


        def fugueOutputTransformTask(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueOutputTransformTaskContext,0)


        def fugueOutputTask(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueOutputTaskContext,0)


        def fuguePrintTask(self):
            return self.getTypedRuleContext(fugue_sqlParser.FuguePrintTaskContext,0)


        def fugueSaveTask(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSaveTaskContext,0)


        def fugueModuleTask(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueModuleTaskContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueSingleTask

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueSingleTask" ):
                return visitor.visitFugueSingleTask(self)
            else:
                return visitor.visitChildren(self)




    def fugueSingleTask(self):

        localctx = fugue_sqlParser.FugueSingleTaskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_fugueSingleTask)
        try:
            self.state = 444
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 438
                self.fugueNestableTask()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 439
                self.fugueOutputTransformTask()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 440
                self.fugueOutputTask()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 441
                self.fuguePrintTask()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 442
                self.fugueSaveTask()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 443
                self.fugueModuleTask()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueNestableTaskContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.assign = None # FugueAssignmentContext
            self.q = None # QueryContext
            self.checkpoint = None # FugueCheckpointContext
            self.broadcast = None # FugueBroadcastContext
            self.y = None # FugueYieldContext

        def query(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryContext,0)


        def fugueAssignment(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueAssignmentContext,0)


        def fugueCheckpoint(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueCheckpointContext,0)


        def fugueBroadcast(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueBroadcastContext,0)


        def fugueYield(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueYieldContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueNestableTask

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueNestableTask" ):
                return visitor.visitFugueNestableTask(self)
            else:
                return visitor.visitChildren(self)




    def fugueNestableTask(self):

        localctx = fugue_sqlParser.FugueNestableTaskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_fugueNestableTask)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 447
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.state = 446
                localctx.assign = self.fugueAssignment()


            self.state = 449
            localctx.q = self.query()
            self.state = 451
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
            if la_ == 1:
                self.state = 450
                localctx.checkpoint = self.fugueCheckpoint()


            self.state = 454
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==24:
                self.state = 453
                localctx.broadcast = self.fugueBroadcast()


            self.state = 457
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==45:
                self.state = 456
                localctx.y = self.fugueYield()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueNestableTaskCollectionNoSelectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fugueTransformTask(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueTransformTaskContext,0)


        def fugueProcessTask(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueProcessTaskContext,0)


        def fugueZipTask(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueZipTaskContext,0)


        def fugueCreateTask(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueCreateTaskContext,0)


        def fugueCreateDataTask(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueCreateDataTaskContext,0)


        def fugueLoadTask(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueLoadTaskContext,0)


        def fugueSaveAndUseTask(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSaveAndUseTaskContext,0)


        def fugueRenameColumnsTask(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueRenameColumnsTaskContext,0)


        def fugueAlterColumnsTask(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueAlterColumnsTaskContext,0)


        def fugueDropColumnsTask(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueDropColumnsTaskContext,0)


        def fugueDropnaTask(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueDropnaTaskContext,0)


        def fugueFillnaTask(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueFillnaTaskContext,0)


        def fugueSampleTask(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSampleTaskContext,0)


        def fugueTakeTask(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueTakeTaskContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueNestableTaskCollectionNoSelect

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueNestableTaskCollectionNoSelect" ):
                return visitor.visitFugueNestableTaskCollectionNoSelect(self)
            else:
                return visitor.visitChildren(self)




    def fugueNestableTaskCollectionNoSelect(self):

        localctx = fugue_sqlParser.FugueNestableTaskCollectionNoSelectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_fugueNestableTaskCollectionNoSelect)
        try:
            self.state = 473
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 459
                self.fugueTransformTask()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 460
                self.fugueProcessTask()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 461
                self.fugueZipTask()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 462
                self.fugueCreateTask()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 463
                self.fugueCreateDataTask()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 464
                self.fugueLoadTask()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 465
                self.fugueSaveAndUseTask()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 466
                self.fugueRenameColumnsTask()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 467
                self.fugueAlterColumnsTask()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 468
                self.fugueDropColumnsTask()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 469
                self.fugueDropnaTask()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 470
                self.fugueFillnaTask()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 471
                self.fugueSampleTask()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 472
                self.fugueTakeTask()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueTransformTaskContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.dfs = None # FugueDataFramesContext
            self.partition = None # FuguePrepartitionContext
            self.params = None # FugueSingleOutputExtensionCommonWildContext
            self.callback = None # FugueExtensionContext

        def TRANSFORM(self):
            return self.getToken(fugue_sqlParser.TRANSFORM, 0)

        def fugueSingleOutputExtensionCommonWild(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSingleOutputExtensionCommonWildContext,0)


        def CALLBACK(self):
            return self.getToken(fugue_sqlParser.CALLBACK, 0)

        def fugueDataFrames(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueDataFramesContext,0)


        def fuguePrepartition(self):
            return self.getTypedRuleContext(fugue_sqlParser.FuguePrepartitionContext,0)


        def fugueExtension(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueExtensionContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueTransformTask

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueTransformTask" ):
                return visitor.visitFugueTransformTask(self)
            else:
                return visitor.visitChildren(self)




    def fugueTransformTask(self):

        localctx = fugue_sqlParser.FugueTransformTaskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_fugueTransformTask)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 475
            self.match(fugue_sqlParser.TRANSFORM)
            self.state = 477
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.state = 476
                localctx.dfs = self.fugueDataFrames()


            self.state = 480
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 2151153664) != 0:
                self.state = 479
                localctx.partition = self.fuguePrepartition()


            self.state = 482
            localctx.params = self.fugueSingleOutputExtensionCommonWild()
            self.state = 485
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
            if la_ == 1:
                self.state = 483
                self.match(fugue_sqlParser.CALLBACK)
                self.state = 484
                localctx.callback = self.fugueExtension()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueProcessTaskContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.dfs = None # FugueDataFramesContext
            self.partition = None # FuguePrepartitionContext
            self.params = None # FugueSingleOutputExtensionCommonContext

        def PROCESS(self):
            return self.getToken(fugue_sqlParser.PROCESS, 0)

        def fugueSingleOutputExtensionCommon(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSingleOutputExtensionCommonContext,0)


        def fugueDataFrames(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueDataFramesContext,0)


        def fuguePrepartition(self):
            return self.getTypedRuleContext(fugue_sqlParser.FuguePrepartitionContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueProcessTask

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueProcessTask" ):
                return visitor.visitFugueProcessTask(self)
            else:
                return visitor.visitChildren(self)




    def fugueProcessTask(self):

        localctx = fugue_sqlParser.FugueProcessTaskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_fugueProcessTask)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 487
            self.match(fugue_sqlParser.PROCESS)
            self.state = 489
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.state = 488
                localctx.dfs = self.fugueDataFrames()


            self.state = 492
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 2151153664) != 0:
                self.state = 491
                localctx.partition = self.fuguePrepartition()


            self.state = 494
            localctx.params = self.fugueSingleOutputExtensionCommon()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueSaveAndUseTaskContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.df = None # FugueDataFrameContext
            self.partition = None # FuguePrepartitionContext
            self.m = None # FugueSaveModeContext
            self.single = None # FugueSingleFileContext
            self.fmt = None # FugueFileFormatContext
            self.path = None # FuguePathContext
            self.params = None # FugueParamsContext

        def SAVE(self):
            return self.getToken(fugue_sqlParser.SAVE, 0)

        def AND(self):
            return self.getToken(fugue_sqlParser.AND, 0)

        def USE(self):
            return self.getToken(fugue_sqlParser.USE, 0)

        def fugueSaveMode(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSaveModeContext,0)


        def fuguePath(self):
            return self.getTypedRuleContext(fugue_sqlParser.FuguePathContext,0)


        def fugueDataFrame(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueDataFrameContext,0)


        def fuguePrepartition(self):
            return self.getTypedRuleContext(fugue_sqlParser.FuguePrepartitionContext,0)


        def fugueSingleFile(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSingleFileContext,0)


        def fugueFileFormat(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueFileFormatContext,0)


        def fugueParams(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueParamsContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueSaveAndUseTask

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueSaveAndUseTask" ):
                return visitor.visitFugueSaveAndUseTask(self)
            else:
                return visitor.visitChildren(self)




    def fugueSaveAndUseTask(self):

        localctx = fugue_sqlParser.FugueSaveAndUseTaskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_fugueSaveAndUseTask)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 496
            self.match(fugue_sqlParser.SAVE)
            self.state = 497
            self.match(fugue_sqlParser.AND)
            self.state = 498
            self.match(fugue_sqlParser.USE)
            self.state = 500
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                self.state = 499
                localctx.df = self.fugueDataFrame()


            self.state = 503
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 2151153664) != 0:
                self.state = 502
                localctx.partition = self.fuguePrepartition()


            self.state = 505
            localctx.m = self.fugueSaveMode()
            self.state = 507
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==40:
                self.state = 506
                localctx.single = self.fugueSingleFile()


            self.state = 510
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 962072674304) != 0:
                self.state = 509
                localctx.fmt = self.fugueFileFormat()


            self.state = 512
            localctx.path = self.fuguePath()
            self.state = 514
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
            if la_ == 1:
                self.state = 513
                localctx.params = self.fugueParams()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueRenameColumnsTaskContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.cols = None # FugueRenameExpressionContext
            self.df = None # FugueDataFrameContext

        def RENAME(self):
            return self.getToken(fugue_sqlParser.RENAME, 0)

        def COLUMNS(self):
            return self.getToken(fugue_sqlParser.COLUMNS, 0)

        def fugueRenameExpression(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueRenameExpressionContext,0)


        def FROM(self):
            return self.getToken(fugue_sqlParser.FROM, 0)

        def fugueDataFrame(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueDataFrameContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueRenameColumnsTask

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueRenameColumnsTask" ):
                return visitor.visitFugueRenameColumnsTask(self)
            else:
                return visitor.visitChildren(self)




    def fugueRenameColumnsTask(self):

        localctx = fugue_sqlParser.FugueRenameColumnsTaskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_fugueRenameColumnsTask)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 516
            self.match(fugue_sqlParser.RENAME)
            self.state = 517
            self.match(fugue_sqlParser.COLUMNS)
            self.state = 518
            localctx.cols = self.fugueRenameExpression()
            self.state = 521
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
            if la_ == 1:
                self.state = 519
                self.match(fugue_sqlParser.FROM)
                self.state = 520
                localctx.df = self.fugueDataFrame()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueAlterColumnsTaskContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.cols = None # FugueSchemaContext
            self.df = None # FugueDataFrameContext

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)

        def COLUMNS(self):
            return self.getToken(fugue_sqlParser.COLUMNS, 0)

        def fugueSchema(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSchemaContext,0)


        def FROM(self):
            return self.getToken(fugue_sqlParser.FROM, 0)

        def fugueDataFrame(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueDataFrameContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueAlterColumnsTask

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueAlterColumnsTask" ):
                return visitor.visitFugueAlterColumnsTask(self)
            else:
                return visitor.visitChildren(self)




    def fugueAlterColumnsTask(self):

        localctx = fugue_sqlParser.FugueAlterColumnsTaskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_fugueAlterColumnsTask)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 523
            self.match(fugue_sqlParser.ALTER)
            self.state = 524
            self.match(fugue_sqlParser.COLUMNS)
            self.state = 525
            localctx.cols = self.fugueSchema()
            self.state = 528
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
            if la_ == 1:
                self.state = 526
                self.match(fugue_sqlParser.FROM)
                self.state = 527
                localctx.df = self.fugueDataFrame()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueDropColumnsTaskContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.cols = None # FugueColsContext
            self.df = None # FugueDataFrameContext

        def DROP(self):
            return self.getToken(fugue_sqlParser.DROP, 0)

        def COLUMNS(self):
            return self.getToken(fugue_sqlParser.COLUMNS, 0)

        def fugueCols(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueColsContext,0)


        def IF(self):
            return self.getToken(fugue_sqlParser.IF, 0)

        def EXISTS(self):
            return self.getToken(fugue_sqlParser.EXISTS, 0)

        def FROM(self):
            return self.getToken(fugue_sqlParser.FROM, 0)

        def fugueDataFrame(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueDataFrameContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueDropColumnsTask

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueDropColumnsTask" ):
                return visitor.visitFugueDropColumnsTask(self)
            else:
                return visitor.visitChildren(self)




    def fugueDropColumnsTask(self):

        localctx = fugue_sqlParser.FugueDropColumnsTaskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_fugueDropColumnsTask)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 530
            self.match(fugue_sqlParser.DROP)
            self.state = 531
            self.match(fugue_sqlParser.COLUMNS)
            self.state = 532
            localctx.cols = self.fugueCols()
            self.state = 535
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,19,self._ctx)
            if la_ == 1:
                self.state = 533
                self.match(fugue_sqlParser.IF)
                self.state = 534
                self.match(fugue_sqlParser.EXISTS)


            self.state = 539
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,20,self._ctx)
            if la_ == 1:
                self.state = 537
                self.match(fugue_sqlParser.FROM)
                self.state = 538
                localctx.df = self.fugueDataFrame()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueDropnaTaskContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.how = None # Token
            self.cols = None # FugueColsContext
            self.df = None # FugueDataFrameContext

        def DROP(self):
            return self.getToken(fugue_sqlParser.DROP, 0)

        def ROWS(self):
            return self.getToken(fugue_sqlParser.ROWS, 0)

        def IF(self):
            return self.getToken(fugue_sqlParser.IF, 0)

        def THENULL(self):
            return self.getToken(fugue_sqlParser.THENULL, 0)

        def THENULLS(self):
            return self.getToken(fugue_sqlParser.THENULLS, 0)

        def ALL(self):
            return self.getToken(fugue_sqlParser.ALL, 0)

        def ANY(self):
            return self.getToken(fugue_sqlParser.ANY, 0)

        def ON(self):
            return self.getToken(fugue_sqlParser.ON, 0)

        def FROM(self):
            return self.getToken(fugue_sqlParser.FROM, 0)

        def fugueCols(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueColsContext,0)


        def fugueDataFrame(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueDataFrameContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueDropnaTask

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueDropnaTask" ):
                return visitor.visitFugueDropnaTask(self)
            else:
                return visitor.visitChildren(self)




    def fugueDropnaTask(self):

        localctx = fugue_sqlParser.FugueDropnaTaskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_fugueDropnaTask)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 541
            self.match(fugue_sqlParser.DROP)
            self.state = 542
            self.match(fugue_sqlParser.ROWS)
            self.state = 543
            self.match(fugue_sqlParser.IF)
            self.state = 544
            localctx.how = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==56 or _la==61):
                localctx.how = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 545
            _la = self._input.LA(1)
            if not(_la==196 or _la==197):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 548
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,21,self._ctx)
            if la_ == 1:
                self.state = 546
                self.match(fugue_sqlParser.ON)
                self.state = 547
                localctx.cols = self.fugueCols()


            self.state = 552
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
            if la_ == 1:
                self.state = 550
                self.match(fugue_sqlParser.FROM)
                self.state = 551
                localctx.df = self.fugueDataFrame()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueFillnaTaskContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.params = None # FugueParamsContext
            self.df = None # FugueDataFrameContext

        def FILL(self):
            return self.getToken(fugue_sqlParser.FILL, 0)

        def THENULL(self):
            return self.getToken(fugue_sqlParser.THENULL, 0)

        def THENULLS(self):
            return self.getToken(fugue_sqlParser.THENULLS, 0)

        def fugueParams(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueParamsContext,0)


        def FROM(self):
            return self.getToken(fugue_sqlParser.FROM, 0)

        def fugueDataFrame(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueDataFrameContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueFillnaTask

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueFillnaTask" ):
                return visitor.visitFugueFillnaTask(self)
            else:
                return visitor.visitChildren(self)




    def fugueFillnaTask(self):

        localctx = fugue_sqlParser.FugueFillnaTaskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_fugueFillnaTask)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 554
            self.match(fugue_sqlParser.FILL)
            self.state = 555
            _la = self._input.LA(1)
            if not(_la==196 or _la==197):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 556
            localctx.params = self.fugueParams()
            self.state = 559
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
            if la_ == 1:
                self.state = 557
                self.match(fugue_sqlParser.FROM)
                self.state = 558
                localctx.df = self.fugueDataFrame()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueSampleTaskContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.method = None # FugueSampleMethodContext
            self.seed = None # Token
            self.df = None # FugueDataFrameContext
            self.by = None # FugueColsContext

        def SAMPLE(self):
            return self.getToken(fugue_sqlParser.SAMPLE, 0)

        def fugueSampleMethod(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSampleMethodContext,0)


        def REPLACE(self):
            return self.getToken(fugue_sqlParser.REPLACE, 0)

        def SEED(self):
            return self.getToken(fugue_sqlParser.SEED, 0)

        def FROM(self):
            return self.getToken(fugue_sqlParser.FROM, 0)

        def PREPARTITION(self):
            return self.getToken(fugue_sqlParser.PREPARTITION, 0)

        def BY(self):
            return self.getToken(fugue_sqlParser.BY, 0)

        def INTEGER_VALUE(self):
            return self.getToken(fugue_sqlParser.INTEGER_VALUE, 0)

        def fugueDataFrame(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueDataFrameContext,0)


        def fugueCols(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueColsContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueSampleTask

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueSampleTask" ):
                return visitor.visitFugueSampleTask(self)
            else:
                return visitor.visitChildren(self)




    def fugueSampleTask(self):

        localctx = fugue_sqlParser.FugueSampleTaskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_fugueSampleTask)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 561
            self.match(fugue_sqlParser.SAMPLE)
            self.state = 563
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==234:
                self.state = 562
                self.match(fugue_sqlParser.REPLACE)


            self.state = 565
            localctx.method = self.fugueSampleMethod()
            self.state = 568
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
            if la_ == 1:
                self.state = 566
                self.match(fugue_sqlParser.SEED)
                self.state = 567
                localctx.seed = self.match(fugue_sqlParser.INTEGER_VALUE)


            self.state = 572
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,26,self._ctx)
            if la_ == 1:
                self.state = 570
                self.match(fugue_sqlParser.FROM)
                self.state = 571
                localctx.df = self.fugueDataFrame()


            self.state = 577
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
            if la_ == 1:
                self.state = 574
                self.match(fugue_sqlParser.PREPARTITION)
                self.state = 575
                self.match(fugue_sqlParser.BY)
                self.state = 576
                localctx.by = self.fugueCols()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueTakeTaskContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.rows = None # Token
            self.df = None # FugueDataFrameContext
            self.partition = None # FuguePrepartitionContext
            self.presort = None # FugueColsSortContext
            self.na_position = None # Token

        def TAKE(self):
            return self.getToken(fugue_sqlParser.TAKE, 0)

        def FROM(self):
            return self.getToken(fugue_sqlParser.FROM, 0)

        def INTEGER_VALUE(self):
            return self.getToken(fugue_sqlParser.INTEGER_VALUE, 0)

        def ROW(self):
            return self.getToken(fugue_sqlParser.ROW, 0)

        def ROWS(self):
            return self.getToken(fugue_sqlParser.ROWS, 0)

        def fugueDataFrame(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueDataFrameContext,0)


        def THENULL(self):
            return self.getToken(fugue_sqlParser.THENULL, 0)

        def THENULLS(self):
            return self.getToken(fugue_sqlParser.THENULLS, 0)

        def PRESORT(self):
            return self.getToken(fugue_sqlParser.PRESORT, 0)

        def FIRST(self):
            return self.getToken(fugue_sqlParser.FIRST, 0)

        def LAST(self):
            return self.getToken(fugue_sqlParser.LAST, 0)

        def fuguePrepartition(self):
            return self.getTypedRuleContext(fugue_sqlParser.FuguePrepartitionContext,0)


        def fugueColsSort(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueColsSortContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueTakeTask

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueTakeTask" ):
                return visitor.visitFugueTakeTask(self)
            else:
                return visitor.visitChildren(self)




    def fugueTakeTask(self):

        localctx = fugue_sqlParser.FugueTakeTaskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_fugueTakeTask)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 579
            self.match(fugue_sqlParser.TAKE)
            self.state = 582
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
            if la_ == 1:
                self.state = 580
                localctx.rows = self.match(fugue_sqlParser.INTEGER_VALUE)
                self.state = 581
                _la = self._input.LA(1)
                if not(_la==244 or _la==245):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 586
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
            if la_ == 1:
                self.state = 584
                self.match(fugue_sqlParser.FROM)
                self.state = 585
                localctx.df = self.fugueDataFrame()


            self.state = 591
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                self.state = 588
                localctx.partition = self.fuguePrepartition()

            elif la_ == 2:
                self.state = 589
                self.match(fugue_sqlParser.PRESORT)
                self.state = 590
                localctx.presort = self.fugueColsSort()


            self.state = 595
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
            if la_ == 1:
                self.state = 593
                _la = self._input.LA(1)
                if not(_la==196 or _la==197):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 594
                localctx.na_position = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==136 or _la==169):
                    localctx.na_position = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueZipTaskContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.dfs = None # FugueDataFramesContext
            self.how = None # FugueZipTypeContext
            self.by = None # FugueColsContext
            self.presort = None # FugueColsSortContext

        def ZIP(self):
            return self.getToken(fugue_sqlParser.ZIP, 0)

        def fugueDataFrames(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueDataFramesContext,0)


        def BY(self):
            return self.getToken(fugue_sqlParser.BY, 0)

        def PRESORT(self):
            return self.getToken(fugue_sqlParser.PRESORT, 0)

        def fugueZipType(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueZipTypeContext,0)


        def fugueCols(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueColsContext,0)


        def fugueColsSort(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueColsSortContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueZipTask

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueZipTask" ):
                return visitor.visitFugueZipTask(self)
            else:
                return visitor.visitChildren(self)




    def fugueZipTask(self):

        localctx = fugue_sqlParser.FugueZipTaskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_fugueZipTask)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 597
            self.match(fugue_sqlParser.ZIP)
            self.state = 598
            localctx.dfs = self.fugueDataFrames()
            self.state = 600
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,32,self._ctx)
            if la_ == 1:
                self.state = 599
                localctx.how = self.fugueZipType()


            self.state = 604
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
            if la_ == 1:
                self.state = 602
                self.match(fugue_sqlParser.BY)
                self.state = 603
                localctx.by = self.fugueCols()


            self.state = 608
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
            if la_ == 1:
                self.state = 606
                self.match(fugue_sqlParser.PRESORT)
                self.state = 607
                localctx.presort = self.fugueColsSort()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueCreateTaskContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.params = None # FugueSingleOutputExtensionCommonContext

        def CREATE(self):
            return self.getToken(fugue_sqlParser.CREATE, 0)

        def fugueSingleOutputExtensionCommon(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSingleOutputExtensionCommonContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueCreateTask

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueCreateTask" ):
                return visitor.visitFugueCreateTask(self)
            else:
                return visitor.visitChildren(self)




    def fugueCreateTask(self):

        localctx = fugue_sqlParser.FugueCreateTaskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_fugueCreateTask)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 610
            self.match(fugue_sqlParser.CREATE)
            self.state = 611
            localctx.params = self.fugueSingleOutputExtensionCommon()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueCreateDataTaskContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.data = None # FugueJsonArrayContext
            self.schema = None # FugueSchemaContext

        def CREATE(self):
            return self.getToken(fugue_sqlParser.CREATE, 0)

        def SCHEMA(self):
            return self.getToken(fugue_sqlParser.SCHEMA, 0)

        def fugueJsonArray(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueJsonArrayContext,0)


        def fugueSchema(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSchemaContext,0)


        def DATA(self):
            return self.getToken(fugue_sqlParser.DATA, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueCreateDataTask

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueCreateDataTask" ):
                return visitor.visitFugueCreateDataTask(self)
            else:
                return visitor.visitChildren(self)




    def fugueCreateDataTask(self):

        localctx = fugue_sqlParser.FugueCreateDataTaskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_fugueCreateDataTask)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 613
            self.match(fugue_sqlParser.CREATE)
            self.state = 615
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==103:
                self.state = 614
                self.match(fugue_sqlParser.DATA)


            self.state = 617
            localctx.data = self.fugueJsonArray()
            self.state = 618
            self.match(fugue_sqlParser.SCHEMA)
            self.state = 619
            localctx.schema = self.fugueSchema()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueLoadTaskContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.fmt = None # FugueFileFormatContext
            self.path = None # FuguePathContext
            self.params = None # FugueParamsContext
            self.columns = None # FugueLoadColumnsContext

        def LOAD(self):
            return self.getToken(fugue_sqlParser.LOAD, 0)

        def fuguePath(self):
            return self.getTypedRuleContext(fugue_sqlParser.FuguePathContext,0)


        def COLUMNS(self):
            return self.getToken(fugue_sqlParser.COLUMNS, 0)

        def fugueFileFormat(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueFileFormatContext,0)


        def fugueParams(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueParamsContext,0)


        def fugueLoadColumns(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueLoadColumnsContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueLoadTask

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueLoadTask" ):
                return visitor.visitFugueLoadTask(self)
            else:
                return visitor.visitChildren(self)




    def fugueLoadTask(self):

        localctx = fugue_sqlParser.FugueLoadTaskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_fugueLoadTask)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 621
            self.match(fugue_sqlParser.LOAD)
            self.state = 623
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 962072674304) != 0:
                self.state = 622
                localctx.fmt = self.fugueFileFormat()


            self.state = 625
            localctx.path = self.fuguePath()
            self.state = 627
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,37,self._ctx)
            if la_ == 1:
                self.state = 626
                localctx.params = self.fugueParams()


            self.state = 631
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
            if la_ == 1:
                self.state = 629
                self.match(fugue_sqlParser.COLUMNS)
                self.state = 630
                localctx.columns = self.fugueLoadColumns()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueOutputTaskContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.dfs = None # FugueDataFramesContext
            self.partition = None # FuguePrepartitionContext
            self.fugueUsing = None # FugueExtensionContext
            self.params = None # FugueParamsContext

        def OUTPUT(self):
            return self.getToken(fugue_sqlParser.OUTPUT, 0)

        def USING(self):
            return self.getToken(fugue_sqlParser.USING, 0)

        def fugueExtension(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueExtensionContext,0)


        def fugueDataFrames(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueDataFramesContext,0)


        def fuguePrepartition(self):
            return self.getTypedRuleContext(fugue_sqlParser.FuguePrepartitionContext,0)


        def fugueParams(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueParamsContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueOutputTask

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueOutputTask" ):
                return visitor.visitFugueOutputTask(self)
            else:
                return visitor.visitChildren(self)




    def fugueOutputTask(self):

        localctx = fugue_sqlParser.FugueOutputTaskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_fugueOutputTask)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 633
            self.match(fugue_sqlParser.OUTPUT)
            self.state = 635
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
            if la_ == 1:
                self.state = 634
                localctx.dfs = self.fugueDataFrames()


            self.state = 638
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 2151153664) != 0:
                self.state = 637
                localctx.partition = self.fuguePrepartition()


            self.state = 640
            self.match(fugue_sqlParser.USING)
            self.state = 641
            localctx.fugueUsing = self.fugueExtension()
            self.state = 643
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 33554696) != 0:
                self.state = 642
                localctx.params = self.fugueParams()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FuguePrintTaskContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.rows = None # Token
            self.dfs = None # FugueDataFramesContext
            self.count = None # Token
            self.title = None # Token

        def PRINT(self):
            return self.getToken(fugue_sqlParser.PRINT, 0)

        def INTEGER_VALUE(self):
            return self.getToken(fugue_sqlParser.INTEGER_VALUE, 0)

        def ROW(self):
            return self.getToken(fugue_sqlParser.ROW, 0)

        def ROWS(self):
            return self.getToken(fugue_sqlParser.ROWS, 0)

        def FROM(self):
            return self.getToken(fugue_sqlParser.FROM, 0)

        def TITLE(self):
            return self.getToken(fugue_sqlParser.TITLE, 0)

        def fugueDataFrames(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueDataFramesContext,0)


        def ROWCOUNT(self):
            return self.getToken(fugue_sqlParser.ROWCOUNT, 0)

        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fuguePrintTask

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFuguePrintTask" ):
                return visitor.visitFuguePrintTask(self)
            else:
                return visitor.visitChildren(self)




    def fuguePrintTask(self):

        localctx = fugue_sqlParser.FuguePrintTaskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_fuguePrintTask)
        self._la = 0 # Token type
        try:
            self.state = 670
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 645
                self.match(fugue_sqlParser.PRINT)
                self.state = 646
                localctx.rows = self.match(fugue_sqlParser.INTEGER_VALUE)
                self.state = 647
                _la = self._input.LA(1)
                if not(_la==244 or _la==245):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 650
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
                if la_ == 1:
                    self.state = 648
                    self.match(fugue_sqlParser.FROM)
                    self.state = 649
                    localctx.dfs = self.fugueDataFrames()


                self.state = 653
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==29:
                    self.state = 652
                    localctx.count = self.match(fugue_sqlParser.ROWCOUNT)


                self.state = 657
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==34:
                    self.state = 655
                    self.match(fugue_sqlParser.TITLE)
                    self.state = 656
                    localctx.title = self.match(fugue_sqlParser.STRING)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 659
                self.match(fugue_sqlParser.PRINT)
                self.state = 661
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
                if la_ == 1:
                    self.state = 660
                    localctx.dfs = self.fugueDataFrames()


                self.state = 664
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==29:
                    self.state = 663
                    localctx.count = self.match(fugue_sqlParser.ROWCOUNT)


                self.state = 668
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==34:
                    self.state = 666
                    self.match(fugue_sqlParser.TITLE)
                    self.state = 667
                    localctx.title = self.match(fugue_sqlParser.STRING)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueSaveTaskContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.df = None # FugueDataFrameContext
            self.partition = None # FuguePrepartitionContext
            self.m = None # FugueSaveModeContext
            self.single = None # FugueSingleFileContext
            self.fmt = None # FugueFileFormatContext
            self.path = None # FuguePathContext
            self.params = None # FugueParamsContext

        def SAVE(self):
            return self.getToken(fugue_sqlParser.SAVE, 0)

        def fugueSaveMode(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSaveModeContext,0)


        def fuguePath(self):
            return self.getTypedRuleContext(fugue_sqlParser.FuguePathContext,0)


        def fugueDataFrame(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueDataFrameContext,0)


        def fuguePrepartition(self):
            return self.getTypedRuleContext(fugue_sqlParser.FuguePrepartitionContext,0)


        def fugueSingleFile(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSingleFileContext,0)


        def fugueFileFormat(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueFileFormatContext,0)


        def fugueParams(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueParamsContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueSaveTask

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueSaveTask" ):
                return visitor.visitFugueSaveTask(self)
            else:
                return visitor.visitChildren(self)




    def fugueSaveTask(self):

        localctx = fugue_sqlParser.FugueSaveTaskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_fugueSaveTask)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 672
            self.match(fugue_sqlParser.SAVE)
            self.state = 674
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
            if la_ == 1:
                self.state = 673
                localctx.df = self.fugueDataFrame()


            self.state = 677
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 2151153664) != 0:
                self.state = 676
                localctx.partition = self.fuguePrepartition()


            self.state = 679
            localctx.m = self.fugueSaveMode()
            self.state = 681
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==40:
                self.state = 680
                localctx.single = self.fugueSingleFile()


            self.state = 684
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 962072674304) != 0:
                self.state = 683
                localctx.fmt = self.fugueFileFormat()


            self.state = 686
            localctx.path = self.fuguePath()
            self.state = 688
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 33554696) != 0:
                self.state = 687
                localctx.params = self.fugueParams()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueOutputTransformTaskContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.dfs = None # FugueDataFramesContext
            self.partition = None # FuguePrepartitionContext
            self.fugueUsing = None # FugueExtensionContext
            self.params = None # FugueParamsContext
            self.callback = None # FugueExtensionContext

        def OUTTRANSFORM(self):
            return self.getToken(fugue_sqlParser.OUTTRANSFORM, 0)

        def USING(self):
            return self.getToken(fugue_sqlParser.USING, 0)

        def fugueExtension(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.FugueExtensionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.FugueExtensionContext,i)


        def CALLBACK(self):
            return self.getToken(fugue_sqlParser.CALLBACK, 0)

        def fugueDataFrames(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueDataFramesContext,0)


        def fuguePrepartition(self):
            return self.getTypedRuleContext(fugue_sqlParser.FuguePrepartitionContext,0)


        def fugueParams(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueParamsContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueOutputTransformTask

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueOutputTransformTask" ):
                return visitor.visitFugueOutputTransformTask(self)
            else:
                return visitor.visitChildren(self)




    def fugueOutputTransformTask(self):

        localctx = fugue_sqlParser.FugueOutputTransformTaskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_fugueOutputTransformTask)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 690
            self.match(fugue_sqlParser.OUTTRANSFORM)
            self.state = 692
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
            if la_ == 1:
                self.state = 691
                localctx.dfs = self.fugueDataFrames()


            self.state = 695
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 2151153664) != 0:
                self.state = 694
                localctx.partition = self.fuguePrepartition()


            self.state = 697
            self.match(fugue_sqlParser.USING)
            self.state = 698
            localctx.fugueUsing = self.fugueExtension()
            self.state = 700
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 33554696) != 0:
                self.state = 699
                localctx.params = self.fugueParams()


            self.state = 704
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==51:
                self.state = 702
                self.match(fugue_sqlParser.CALLBACK)
                self.state = 703
                localctx.callback = self.fugueExtension()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueModuleTaskContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.assign = None # FugueAssignmentContext
            self.dfs = None # FugueDataFramesContext
            self.fugueUsing = None # FugueExtensionContext
            self.params = None # FugueParamsContext

        def SUB(self):
            return self.getToken(fugue_sqlParser.SUB, 0)

        def USING(self):
            return self.getToken(fugue_sqlParser.USING, 0)

        def fugueExtension(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueExtensionContext,0)


        def fugueAssignment(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueAssignmentContext,0)


        def fugueDataFrames(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueDataFramesContext,0)


        def fugueParams(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueParamsContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueModuleTask

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueModuleTask" ):
                return visitor.visitFugueModuleTask(self)
            else:
                return visitor.visitChildren(self)




    def fugueModuleTask(self):

        localctx = fugue_sqlParser.FugueModuleTaskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_fugueModuleTask)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 707
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 54)) & ~0x3f) == 0 and ((1 << (_la - 54)) & -1) != 0 or (((_la - 118)) & ~0x3f) == 0 and ((1 << (_la - 118)) & -1) != 0 or (((_la - 182)) & ~0x3f) == 0 and ((1 << (_la - 182)) & -1) != 0 or (((_la - 246)) & ~0x3f) == 0 and ((1 << (_la - 246)) & 1152921504606846975) != 0 or (((_la - 320)) & ~0x3f) == 0 and ((1 << (_la - 320)) & 98305) != 0:
                self.state = 706
                localctx.assign = self.fugueAssignment()


            self.state = 709
            self.match(fugue_sqlParser.SUB)
            self.state = 711
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
            if la_ == 1:
                self.state = 710
                localctx.dfs = self.fugueDataFrames()


            self.state = 713
            self.match(fugue_sqlParser.USING)
            self.state = 714
            localctx.fugueUsing = self.fugueExtension()
            self.state = 716
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 33554696) != 0:
                self.state = 715
                localctx.params = self.fugueParams()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueSqlEngineContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.fugueUsing = None # FugueExtensionContext
            self.params = None # FugueParamsContext

        def CONNECT(self):
            return self.getToken(fugue_sqlParser.CONNECT, 0)

        def fugueExtension(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueExtensionContext,0)


        def fugueParams(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueParamsContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueSqlEngine

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueSqlEngine" ):
                return visitor.visitFugueSqlEngine(self)
            else:
                return visitor.visitChildren(self)




    def fugueSqlEngine(self):

        localctx = fugue_sqlParser.FugueSqlEngineContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_fugueSqlEngine)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 718
            self.match(fugue_sqlParser.CONNECT)
            self.state = 719
            localctx.fugueUsing = self.fugueExtension()
            self.state = 721
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 33554696) != 0:
                self.state = 720
                localctx.params = self.fugueParams()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueSingleFileContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.single = None # Token

        def SINGLE(self):
            return self.getToken(fugue_sqlParser.SINGLE, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueSingleFile

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueSingleFile" ):
                return visitor.visitFugueSingleFile(self)
            else:
                return visitor.visitChildren(self)




    def fugueSingleFile(self):

        localctx = fugue_sqlParser.FugueSingleFileContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_fugueSingleFile)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 723
            localctx.single = self.match(fugue_sqlParser.SINGLE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueLoadColumnsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.schema = None # FugueSchemaContext
            self.cols = None # FugueColsContext

        def fugueSchema(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSchemaContext,0)


        def fugueCols(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueColsContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueLoadColumns

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueLoadColumns" ):
                return visitor.visitFugueLoadColumns(self)
            else:
                return visitor.visitChildren(self)




    def fugueLoadColumns(self):

        localctx = fugue_sqlParser.FugueLoadColumnsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_fugueLoadColumns)
        try:
            self.state = 727
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 725
                localctx.schema = self.fugueSchema()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 726
                localctx.cols = self.fugueCols()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueSaveModeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TO(self):
            return self.getToken(fugue_sqlParser.TO, 0)

        def OVERWRITE(self):
            return self.getToken(fugue_sqlParser.OVERWRITE, 0)

        def APPEND(self):
            return self.getToken(fugue_sqlParser.APPEND, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueSaveMode

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueSaveMode" ):
                return visitor.visitFugueSaveMode(self)
            else:
                return visitor.visitChildren(self)




    def fugueSaveMode(self):

        localctx = fugue_sqlParser.FugueSaveModeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_fugueSaveMode)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 729
            _la = self._input.LA(1)
            if not(_la==36 or _la==211 or _la==276):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueFileFormatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARQUET(self):
            return self.getToken(fugue_sqlParser.PARQUET, 0)

        def CSV(self):
            return self.getToken(fugue_sqlParser.CSV, 0)

        def JSON(self):
            return self.getToken(fugue_sqlParser.JSON, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueFileFormat

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueFileFormat" ):
                return visitor.visitFugueFileFormat(self)
            else:
                return visitor.visitChildren(self)




    def fugueFileFormat(self):

        localctx = fugue_sqlParser.FugueFileFormatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_fugueFileFormat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 731
            _la = self._input.LA(1)
            if not(((_la) & ~0x3f) == 0 and ((1 << _la) & 962072674304) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FuguePathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fuguePath

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFuguePath" ):
                return visitor.visitFuguePath(self)
            else:
                return visitor.visitChildren(self)




    def fuguePath(self):

        localctx = fugue_sqlParser.FuguePathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_fuguePath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 733
            self.match(fugue_sqlParser.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueCheckpointContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueCheckpoint

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class FugueCheckpointDeterministicContext(FugueCheckpointContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.FugueCheckpointContext
            super().__init__(parser)
            self.ns = None # FugueCheckpointNamespaceContext
            self.partition = None # FuguePrepartitionContext
            self.single = None # FugueSingleFileContext
            self.params = None # FugueParamsContext
            self.copyFrom(ctx)

        def DETERMINISTIC(self):
            return self.getToken(fugue_sqlParser.DETERMINISTIC, 0)
        def CHECKPOINT(self):
            return self.getToken(fugue_sqlParser.CHECKPOINT, 0)
        def LAZY(self):
            return self.getToken(fugue_sqlParser.LAZY, 0)
        def fugueCheckpointNamespace(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueCheckpointNamespaceContext,0)

        def fuguePrepartition(self):
            return self.getTypedRuleContext(fugue_sqlParser.FuguePrepartitionContext,0)

        def fugueSingleFile(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSingleFileContext,0)

        def fugueParams(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueParamsContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueCheckpointDeterministic" ):
                return visitor.visitFugueCheckpointDeterministic(self)
            else:
                return visitor.visitChildren(self)


    class FugueCheckpointWeakContext(FugueCheckpointContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.FugueCheckpointContext
            super().__init__(parser)
            self.params = None # FugueParamsContext
            self.copyFrom(ctx)

        def PERSIST(self):
            return self.getToken(fugue_sqlParser.PERSIST, 0)
        def WEAK(self):
            return self.getToken(fugue_sqlParser.WEAK, 0)
        def CHECKPOINT(self):
            return self.getToken(fugue_sqlParser.CHECKPOINT, 0)
        def LAZY(self):
            return self.getToken(fugue_sqlParser.LAZY, 0)
        def fugueParams(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueParamsContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueCheckpointWeak" ):
                return visitor.visitFugueCheckpointWeak(self)
            else:
                return visitor.visitChildren(self)


    class FugueCheckpointStrongContext(FugueCheckpointContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.FugueCheckpointContext
            super().__init__(parser)
            self.partition = None # FuguePrepartitionContext
            self.single = None # FugueSingleFileContext
            self.params = None # FugueParamsContext
            self.copyFrom(ctx)

        def CHECKPOINT(self):
            return self.getToken(fugue_sqlParser.CHECKPOINT, 0)
        def LAZY(self):
            return self.getToken(fugue_sqlParser.LAZY, 0)
        def STRONG(self):
            return self.getToken(fugue_sqlParser.STRONG, 0)
        def fuguePrepartition(self):
            return self.getTypedRuleContext(fugue_sqlParser.FuguePrepartitionContext,0)

        def fugueSingleFile(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSingleFileContext,0)

        def fugueParams(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueParamsContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueCheckpointStrong" ):
                return visitor.visitFugueCheckpointStrong(self)
            else:
                return visitor.visitChildren(self)



    def fugueCheckpoint(self):

        localctx = fugue_sqlParser.FugueCheckpointContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_fugueCheckpoint)
        self._la = 0 # Token type
        try:
            self.state = 779
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.FugueCheckpointWeakContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 736
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==171:
                    self.state = 735
                    self.match(fugue_sqlParser.LAZY)


                self.state = 741
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [23]:
                    self.state = 738
                    self.match(fugue_sqlParser.PERSIST)
                    pass
                elif token in [42]:
                    self.state = 739
                    self.match(fugue_sqlParser.WEAK)
                    self.state = 740
                    self.match(fugue_sqlParser.CHECKPOINT)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 744
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((_la) & ~0x3f) == 0 and ((1 << _la) & 33554696) != 0:
                    self.state = 743
                    localctx.params = self.fugueParams()


                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.FugueCheckpointStrongContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 747
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==171:
                    self.state = 746
                    self.match(fugue_sqlParser.LAZY)


                self.state = 750
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==43:
                    self.state = 749
                    self.match(fugue_sqlParser.STRONG)


                self.state = 752
                self.match(fugue_sqlParser.CHECKPOINT)
                self.state = 754
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((_la) & ~0x3f) == 0 and ((1 << _la) & 2151153664) != 0:
                    self.state = 753
                    localctx.partition = self.fuguePrepartition()


                self.state = 757
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==40:
                    self.state = 756
                    localctx.single = self.fugueSingleFile()


                self.state = 760
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((_la) & ~0x3f) == 0 and ((1 << _la) & 33554696) != 0:
                    self.state = 759
                    localctx.params = self.fugueParams()


                pass

            elif la_ == 3:
                localctx = fugue_sqlParser.FugueCheckpointDeterministicContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 763
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==171:
                    self.state = 762
                    self.match(fugue_sqlParser.LAZY)


                self.state = 765
                self.match(fugue_sqlParser.DETERMINISTIC)
                self.state = 766
                self.match(fugue_sqlParser.CHECKPOINT)
                self.state = 768
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==326:
                    self.state = 767
                    localctx.ns = self.fugueCheckpointNamespace()


                self.state = 771
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((_la) & ~0x3f) == 0 and ((1 << _la) & 2151153664) != 0:
                    self.state = 770
                    localctx.partition = self.fuguePrepartition()


                self.state = 774
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==40:
                    self.state = 773
                    localctx.single = self.fugueSingleFile()


                self.state = 777
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((_la) & ~0x3f) == 0 and ((1 << _la) & 33554696) != 0:
                    self.state = 776
                    localctx.params = self.fugueParams()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueCheckpointNamespaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueCheckpointNamespace

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueCheckpointNamespace" ):
                return visitor.visitFugueCheckpointNamespace(self)
            else:
                return visitor.visitChildren(self)




    def fugueCheckpointNamespace(self):

        localctx = fugue_sqlParser.FugueCheckpointNamespaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_fugueCheckpointNamespace)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 781
            self.match(fugue_sqlParser.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueYieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # FugueIdentifierContext

        def YIELD(self):
            return self.getToken(fugue_sqlParser.YIELD, 0)

        def FILE(self):
            return self.getToken(fugue_sqlParser.FILE, 0)

        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)

        def VIEW(self):
            return self.getToken(fugue_sqlParser.VIEW, 0)

        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)

        def fugueIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueIdentifierContext,0)


        def DATAFRAME(self):
            return self.getToken(fugue_sqlParser.DATAFRAME, 0)

        def LOCAL(self):
            return self.getToken(fugue_sqlParser.LOCAL, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueYield

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueYield" ):
                return visitor.visitFugueYield(self)
            else:
                return visitor.visitChildren(self)




    def fugueYield(self):

        localctx = fugue_sqlParser.FugueYieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_fugueYield)
        self._la = 0 # Token type
        try:
            self.state = 798
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 783
                self.match(fugue_sqlParser.YIELD)
                self.state = 784
                _la = self._input.LA(1)
                if not(_la==53 or _la==269 or _la==299):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 787
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
                if la_ == 1:
                    self.state = 785
                    self.match(fugue_sqlParser.AS)
                    self.state = 786
                    localctx.name = self.fugueIdentifier()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 789
                self.match(fugue_sqlParser.YIELD)
                self.state = 791
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==179:
                    self.state = 790
                    self.match(fugue_sqlParser.LOCAL)


                self.state = 793
                self.match(fugue_sqlParser.DATAFRAME)
                self.state = 796
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,79,self._ctx)
                if la_ == 1:
                    self.state = 794
                    self.match(fugue_sqlParser.AS)
                    self.state = 795
                    localctx.name = self.fugueIdentifier()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueBroadcastContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BROADCAST(self):
            return self.getToken(fugue_sqlParser.BROADCAST, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueBroadcast

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueBroadcast" ):
                return visitor.visitFugueBroadcast(self)
            else:
                return visitor.visitChildren(self)




    def fugueBroadcast(self):

        localctx = fugue_sqlParser.FugueBroadcastContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_fugueBroadcast)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 800
            self.match(fugue_sqlParser.BROADCAST)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueDataFramesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueDataFrames

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class FugueDataFramesDictContext(FugueDataFramesContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.FugueDataFramesContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def fugueDataFramePair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.FugueDataFramePairContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.FugueDataFramePairContext,i)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueDataFramesDict" ):
                return visitor.visitFugueDataFramesDict(self)
            else:
                return visitor.visitChildren(self)


    class FugueDataFramesListContext(FugueDataFramesContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.FugueDataFramesContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def fugueDataFrame(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.FugueDataFrameContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.FugueDataFrameContext,i)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueDataFramesList" ):
                return visitor.visitFugueDataFramesList(self)
            else:
                return visitor.visitChildren(self)



    def fugueDataFrames(self):

        localctx = fugue_sqlParser.FugueDataFramesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_fugueDataFrames)
        try:
            self.state = 818
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.FugueDataFramesListContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 802
                self.fugueDataFrame()
                self.state = 807
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,81,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 803
                        self.match(fugue_sqlParser.T__0)
                        self.state = 804
                        self.fugueDataFrame() 
                    self.state = 809
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,81,self._ctx)

                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.FugueDataFramesDictContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 810
                self.fugueDataFramePair()
                self.state = 815
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,82,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 811
                        self.match(fugue_sqlParser.T__0)
                        self.state = 812
                        self.fugueDataFramePair() 
                    self.state = 817
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,82,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueDataFramePairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.key = None # FugueIdentifierContext
            self.value = None # FugueDataFrameContext

        def fugueIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueIdentifierContext,0)


        def EQUAL(self):
            return self.getToken(fugue_sqlParser.EQUAL, 0)

        def fugueDataFrame(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueDataFrameContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueDataFramePair

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueDataFramePair" ):
                return visitor.visitFugueDataFramePair(self)
            else:
                return visitor.visitChildren(self)




    def fugueDataFramePair(self):

        localctx = fugue_sqlParser.FugueDataFramePairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_fugueDataFramePair)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 820
            localctx.key = self.fugueIdentifier()
            self.state = 821
            _la = self._input.LA(1)
            if not(_la==2 or _la==306):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 822
            localctx.value = self.fugueDataFrame()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueDataFrameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueDataFrame

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class FugueDataFrameSourceContext(FugueDataFrameContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.FugueDataFrameContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def fugueIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueIdentifierContext,0)

        def fugueDataFrameMember(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueDataFrameMemberContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueDataFrameSource" ):
                return visitor.visitFugueDataFrameSource(self)
            else:
                return visitor.visitChildren(self)


    class FugueDataFrameNestedContext(FugueDataFrameContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.FugueDataFrameContext
            super().__init__(parser)
            self.task = None # FugueNestableTaskContext
            self.copyFrom(ctx)

        def fugueNestableTask(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueNestableTaskContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueDataFrameNested" ):
                return visitor.visitFugueDataFrameNested(self)
            else:
                return visitor.visitChildren(self)



    def fugueDataFrame(self):

        localctx = fugue_sqlParser.FugueDataFrameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_fugueDataFrame)
        try:
            self.state = 832
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 320, 335, 336]:
                localctx = fugue_sqlParser.FugueDataFrameSourceContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 824
                self.fugueIdentifier()
                self.state = 826
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
                if la_ == 1:
                    self.state = 825
                    self.fugueDataFrameMember()


                pass
            elif token in [3]:
                localctx = fugue_sqlParser.FugueDataFrameNestedContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 828
                self.match(fugue_sqlParser.T__2)
                self.state = 829
                localctx.task = self.fugueNestableTask()
                self.state = 830
                self.match(fugue_sqlParser.T__3)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueDataFrameMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.index = None # Token
            self.key = None # FugueIdentifierContext

        def INTEGER_VALUE(self):
            return self.getToken(fugue_sqlParser.INTEGER_VALUE, 0)

        def fugueIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueIdentifierContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueDataFrameMember

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueDataFrameMember" ):
                return visitor.visitFugueDataFrameMember(self)
            else:
                return visitor.visitChildren(self)




    def fugueDataFrameMember(self):

        localctx = fugue_sqlParser.FugueDataFrameMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_fugueDataFrameMember)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 834
            self.match(fugue_sqlParser.T__4)
            self.state = 837
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [330]:
                self.state = 835
                localctx.index = self.match(fugue_sqlParser.INTEGER_VALUE)
                pass
            elif token in [54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 320, 335, 336]:
                self.state = 836
                localctx.key = self.fugueIdentifier()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 839
            self.match(fugue_sqlParser.T__5)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueAssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.varname = None # FugueIdentifierContext
            self.sign = None # FugueAssignmentSignContext

        def fugueIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueIdentifierContext,0)


        def fugueAssignmentSign(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueAssignmentSignContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueAssignment

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueAssignment" ):
                return visitor.visitFugueAssignment(self)
            else:
                return visitor.visitChildren(self)




    def fugueAssignment(self):

        localctx = fugue_sqlParser.FugueAssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_fugueAssignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 841
            localctx.varname = self.fugueIdentifier()
            self.state = 842
            localctx.sign = self.fugueAssignmentSign()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueAssignmentSignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUAL(self):
            return self.getToken(fugue_sqlParser.EQUAL, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueAssignmentSign

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueAssignmentSign" ):
                return visitor.visitFugueAssignmentSign(self)
            else:
                return visitor.visitChildren(self)




    def fugueAssignmentSign(self):

        localctx = fugue_sqlParser.FugueAssignmentSignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_fugueAssignmentSign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 844
            self.match(fugue_sqlParser.EQUAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueSingleOutputExtensionCommonWildContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.fugueUsing = None # FugueExtensionContext
            self.params = None # FugueParamsContext
            self.schema = None # FugueWildSchemaContext

        def USING(self):
            return self.getToken(fugue_sqlParser.USING, 0)

        def fugueExtension(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueExtensionContext,0)


        def SCHEMA(self):
            return self.getToken(fugue_sqlParser.SCHEMA, 0)

        def fugueParams(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueParamsContext,0)


        def fugueWildSchema(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueWildSchemaContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueSingleOutputExtensionCommonWild

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueSingleOutputExtensionCommonWild" ):
                return visitor.visitFugueSingleOutputExtensionCommonWild(self)
            else:
                return visitor.visitChildren(self)




    def fugueSingleOutputExtensionCommonWild(self):

        localctx = fugue_sqlParser.FugueSingleOutputExtensionCommonWildContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_fugueSingleOutputExtensionCommonWild)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 846
            self.match(fugue_sqlParser.USING)
            self.state = 847
            localctx.fugueUsing = self.fugueExtension()
            self.state = 849
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
            if la_ == 1:
                self.state = 848
                localctx.params = self.fugueParams()


            self.state = 853
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
            if la_ == 1:
                self.state = 851
                self.match(fugue_sqlParser.SCHEMA)
                self.state = 852
                localctx.schema = self.fugueWildSchema()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueSingleOutputExtensionCommonContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.fugueUsing = None # FugueExtensionContext
            self.params = None # FugueParamsContext
            self.schema = None # FugueSchemaContext

        def USING(self):
            return self.getToken(fugue_sqlParser.USING, 0)

        def fugueExtension(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueExtensionContext,0)


        def SCHEMA(self):
            return self.getToken(fugue_sqlParser.SCHEMA, 0)

        def fugueParams(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueParamsContext,0)


        def fugueSchema(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSchemaContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueSingleOutputExtensionCommon

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueSingleOutputExtensionCommon" ):
                return visitor.visitFugueSingleOutputExtensionCommon(self)
            else:
                return visitor.visitChildren(self)




    def fugueSingleOutputExtensionCommon(self):

        localctx = fugue_sqlParser.FugueSingleOutputExtensionCommonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_fugueSingleOutputExtensionCommon)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 855
            self.match(fugue_sqlParser.USING)
            self.state = 856
            localctx.fugueUsing = self.fugueExtension()
            self.state = 858
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
            if la_ == 1:
                self.state = 857
                localctx.params = self.fugueParams()


            self.state = 862
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
            if la_ == 1:
                self.state = 860
                self.match(fugue_sqlParser.SCHEMA)
                self.state = 861
                localctx.schema = self.fugueSchema()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueExtensionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.domain = None # FugueIdentifierContext

        def fugueIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.FugueIdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.FugueIdentifierContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueExtension

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueExtension" ):
                return visitor.visitFugueExtension(self)
            else:
                return visitor.visitChildren(self)




    def fugueExtension(self):

        localctx = fugue_sqlParser.FugueExtensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_fugueExtension)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 867
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,91,self._ctx)
            if la_ == 1:
                self.state = 864
                localctx.domain = self.fugueIdentifier()
                self.state = 865
                self.match(fugue_sqlParser.T__1)


            self.state = 869
            self.fugueIdentifier()
            self.state = 874
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,92,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 870
                    self.match(fugue_sqlParser.T__6)
                    self.state = 871
                    self.fugueIdentifier() 
                self.state = 876
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,92,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueSampleMethodContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.percentage = None # Token
            self.rows = None # Token

        def PERCENTLIT(self):
            return self.getToken(fugue_sqlParser.PERCENTLIT, 0)

        def INTEGER_VALUE(self):
            return self.getToken(fugue_sqlParser.INTEGER_VALUE, 0)

        def DECIMAL_VALUE(self):
            return self.getToken(fugue_sqlParser.DECIMAL_VALUE, 0)

        def ROWS(self):
            return self.getToken(fugue_sqlParser.ROWS, 0)

        def APPROX(self):
            return self.getToken(fugue_sqlParser.APPROX, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueSampleMethod

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueSampleMethod" ):
                return visitor.visitFugueSampleMethod(self)
            else:
                return visitor.visitChildren(self)




    def fugueSampleMethod(self):

        localctx = fugue_sqlParser.FugueSampleMethodContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_fugueSampleMethod)
        self._la = 0 # Token type
        try:
            self.state = 884
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 877
                localctx.percentage = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==330 or _la==332):
                    localctx.percentage = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 878
                self.match(fugue_sqlParser.PERCENTLIT)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 880
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==49:
                    self.state = 879
                    self.match(fugue_sqlParser.APPROX)


                self.state = 882
                localctx.rows = self.match(fugue_sqlParser.INTEGER_VALUE)
                self.state = 883
                self.match(fugue_sqlParser.ROWS)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueZipTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CROSS(self):
            return self.getToken(fugue_sqlParser.CROSS, 0)

        def INNER(self):
            return self.getToken(fugue_sqlParser.INNER, 0)

        def LEFT(self):
            return self.getToken(fugue_sqlParser.LEFT, 0)

        def OUTER(self):
            return self.getToken(fugue_sqlParser.OUTER, 0)

        def RIGHT(self):
            return self.getToken(fugue_sqlParser.RIGHT, 0)

        def FULL(self):
            return self.getToken(fugue_sqlParser.FULL, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueZipType

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueZipType" ):
                return visitor.visitFugueZipType(self)
            else:
                return visitor.visitChildren(self)




    def fugueZipType(self):

        localctx = fugue_sqlParser.FugueZipTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_fugueZipType)
        try:
            self.state = 894
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [96]:
                self.enterOuterAlt(localctx, 1)
                self.state = 886
                self.match(fugue_sqlParser.CROSS)
                pass
            elif token in [158]:
                self.enterOuterAlt(localctx, 2)
                self.state = 887
                self.match(fugue_sqlParser.INNER)
                pass
            elif token in [173]:
                self.enterOuterAlt(localctx, 3)
                self.state = 888
                self.match(fugue_sqlParser.LEFT)
                self.state = 889
                self.match(fugue_sqlParser.OUTER)
                pass
            elif token in [238]:
                self.enterOuterAlt(localctx, 4)
                self.state = 890
                self.match(fugue_sqlParser.RIGHT)
                self.state = 891
                self.match(fugue_sqlParser.OUTER)
                pass
            elif token in [143]:
                self.enterOuterAlt(localctx, 5)
                self.state = 892
                self.match(fugue_sqlParser.FULL)
                self.state = 893
                self.match(fugue_sqlParser.OUTER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FuguePrepartitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.algo = None # FuguePartitionAlgoContext
            self.num = None # FuguePartitionNumContext
            self.by = None # FugueColsContext
            self.presort = None # FugueColsSortContext

        def PREPARTITION(self):
            return self.getToken(fugue_sqlParser.PREPARTITION, 0)

        def fuguePartitionNum(self):
            return self.getTypedRuleContext(fugue_sqlParser.FuguePartitionNumContext,0)


        def BY(self):
            return self.getToken(fugue_sqlParser.BY, 0)

        def PRESORT(self):
            return self.getToken(fugue_sqlParser.PRESORT, 0)

        def fuguePartitionAlgo(self):
            return self.getTypedRuleContext(fugue_sqlParser.FuguePartitionAlgoContext,0)


        def fugueCols(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueColsContext,0)


        def fugueColsSort(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueColsSortContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fuguePrepartition

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFuguePrepartition" ):
                return visitor.visitFuguePrepartition(self)
            else:
                return visitor.visitChildren(self)




    def fuguePrepartition(self):

        localctx = fugue_sqlParser.FuguePrepartitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_fuguePrepartition)
        self._la = 0 # Token type
        try:
            self.state = 919
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,101,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 897
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((_la) & ~0x3f) == 0 and ((1 << _la) & 3670016) != 0:
                    self.state = 896
                    localctx.algo = self.fuguePartitionAlgo()


                self.state = 899
                self.match(fugue_sqlParser.PREPARTITION)
                self.state = 900
                localctx.num = self.fuguePartitionNum(0)
                self.state = 903
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
                if la_ == 1:
                    self.state = 901
                    self.match(fugue_sqlParser.BY)
                    self.state = 902
                    localctx.by = self.fugueCols()


                self.state = 907
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,98,self._ctx)
                if la_ == 1:
                    self.state = 905
                    self.match(fugue_sqlParser.PRESORT)
                    self.state = 906
                    localctx.presort = self.fugueColsSort()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 910
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((_la) & ~0x3f) == 0 and ((1 << _la) & 3670016) != 0:
                    self.state = 909
                    localctx.algo = self.fuguePartitionAlgo()


                self.state = 912
                self.match(fugue_sqlParser.PREPARTITION)
                self.state = 913
                self.match(fugue_sqlParser.BY)
                self.state = 914
                localctx.by = self.fugueCols()
                self.state = 917
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,100,self._ctx)
                if la_ == 1:
                    self.state = 915
                    self.match(fugue_sqlParser.PRESORT)
                    self.state = 916
                    localctx.presort = self.fugueColsSort()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FuguePartitionAlgoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HASH(self):
            return self.getToken(fugue_sqlParser.HASH, 0)

        def RAND(self):
            return self.getToken(fugue_sqlParser.RAND, 0)

        def EVEN(self):
            return self.getToken(fugue_sqlParser.EVEN, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fuguePartitionAlgo

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFuguePartitionAlgo" ):
                return visitor.visitFuguePartitionAlgo(self)
            else:
                return visitor.visitChildren(self)




    def fuguePartitionAlgo(self):

        localctx = fugue_sqlParser.FuguePartitionAlgoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_fuguePartitionAlgo)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 921
            _la = self._input.LA(1)
            if not(((_la) & ~0x3f) == 0 and ((1 << _la) & 3670016) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FuguePartitionNumContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fuguePartitionNumber(self):
            return self.getTypedRuleContext(fugue_sqlParser.FuguePartitionNumberContext,0)


        def fuguePartitionNum(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.FuguePartitionNumContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.FuguePartitionNumContext,i)


        def PLUS(self):
            return self.getToken(fugue_sqlParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(fugue_sqlParser.MINUS, 0)

        def ASTERISK(self):
            return self.getToken(fugue_sqlParser.ASTERISK, 0)

        def SLASH(self):
            return self.getToken(fugue_sqlParser.SLASH, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fuguePartitionNum

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFuguePartitionNum" ):
                return visitor.visitFuguePartitionNum(self)
            else:
                return visitor.visitChildren(self)



    def fuguePartitionNum(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = fugue_sqlParser.FuguePartitionNumContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 94
        self.enterRecursionRule(localctx, 94, self.RULE_fuguePartitionNum, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 929
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [29, 30, 316, 330, 332]:
                self.state = 924
                self.fuguePartitionNumber()
                pass
            elif token in [3]:
                self.state = 925
                self.match(fugue_sqlParser.T__2)
                self.state = 926
                self.fuguePartitionNum(0)
                self.state = 927
                self.match(fugue_sqlParser.T__3)
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 936
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,103,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = fugue_sqlParser.FuguePartitionNumContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_fuguePartitionNum)
                    self.state = 931
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 932
                    _la = self._input.LA(1)
                    if not((((_la - 315)) & ~0x3f) == 0 and ((1 << (_la - 315)) & 15) != 0):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 933
                    self.fuguePartitionNum(2) 
                self.state = 938
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,103,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class FuguePartitionNumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECIMAL_VALUE(self):
            return self.getToken(fugue_sqlParser.DECIMAL_VALUE, 0)

        def MINUS(self):
            return self.getToken(fugue_sqlParser.MINUS, 0)

        def INTEGER_VALUE(self):
            return self.getToken(fugue_sqlParser.INTEGER_VALUE, 0)

        def ROWCOUNT(self):
            return self.getToken(fugue_sqlParser.ROWCOUNT, 0)

        def CONCURRENCY(self):
            return self.getToken(fugue_sqlParser.CONCURRENCY, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fuguePartitionNumber

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFuguePartitionNumber" ):
                return visitor.visitFuguePartitionNumber(self)
            else:
                return visitor.visitChildren(self)




    def fuguePartitionNumber(self):

        localctx = fugue_sqlParser.FuguePartitionNumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_fuguePartitionNumber)
        self._la = 0 # Token type
        try:
            self.state = 949
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 940
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==316:
                    self.state = 939
                    self.match(fugue_sqlParser.MINUS)


                self.state = 942
                self.match(fugue_sqlParser.DECIMAL_VALUE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 944
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==316:
                    self.state = 943
                    self.match(fugue_sqlParser.MINUS)


                self.state = 946
                self.match(fugue_sqlParser.INTEGER_VALUE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 947
                self.match(fugue_sqlParser.ROWCOUNT)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 948
                self.match(fugue_sqlParser.CONCURRENCY)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueParamsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueParams

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class FugueParamsPairsContext(FugueParamsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.FugueParamsContext
            super().__init__(parser)
            self.pairs = None # FugueJsonPairsContext
            self.copyFrom(ctx)

        def PARAMS(self):
            return self.getToken(fugue_sqlParser.PARAMS, 0)
        def fugueJsonPairs(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueJsonPairsContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueParamsPairs" ):
                return visitor.visitFugueParamsPairs(self)
            else:
                return visitor.visitChildren(self)


    class FugueParamsObjContext(FugueParamsContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.FugueParamsContext
            super().__init__(parser)
            self.obj = None # FugueJsonObjContext
            self.copyFrom(ctx)

        def fugueJsonObj(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueJsonObjContext,0)

        def PARAMS(self):
            return self.getToken(fugue_sqlParser.PARAMS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueParamsObj" ):
                return visitor.visitFugueParamsObj(self)
            else:
                return visitor.visitChildren(self)



    def fugueParams(self):

        localctx = fugue_sqlParser.FugueParamsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_fugueParams)
        self._la = 0 # Token type
        try:
            self.state = 957
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.FugueParamsPairsContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 951
                self.match(fugue_sqlParser.PARAMS)
                self.state = 952
                localctx.pairs = self.fugueJsonPairs()
                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.FugueParamsObjContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 954
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==25:
                    self.state = 953
                    self.match(fugue_sqlParser.PARAMS)


                self.state = 956
                localctx.obj = self.fugueJsonObj()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueColsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fugueColumnIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.FugueColumnIdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.FugueColumnIdentifierContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueCols

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueCols" ):
                return visitor.visitFugueCols(self)
            else:
                return visitor.visitChildren(self)




    def fugueCols(self):

        localctx = fugue_sqlParser.FugueColsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_fugueCols)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 959
            self.fugueColumnIdentifier()
            self.state = 964
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,109,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 960
                    self.match(fugue_sqlParser.T__0)
                    self.state = 961
                    self.fugueColumnIdentifier() 
                self.state = 966
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,109,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueColsSortContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fugueColSort(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.FugueColSortContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.FugueColSortContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueColsSort

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueColsSort" ):
                return visitor.visitFugueColsSort(self)
            else:
                return visitor.visitChildren(self)




    def fugueColsSort(self):

        localctx = fugue_sqlParser.FugueColsSortContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_fugueColsSort)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 967
            self.fugueColSort()
            self.state = 972
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,110,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 968
                    self.match(fugue_sqlParser.T__0)
                    self.state = 969
                    self.fugueColSort() 
                self.state = 974
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,110,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueColSortContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fugueColumnIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueColumnIdentifierContext,0)


        def ASC(self):
            return self.getToken(fugue_sqlParser.ASC, 0)

        def DESC(self):
            return self.getToken(fugue_sqlParser.DESC, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueColSort

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueColSort" ):
                return visitor.visitFugueColSort(self)
            else:
                return visitor.visitChildren(self)




    def fugueColSort(self):

        localctx = fugue_sqlParser.FugueColSortContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_fugueColSort)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 975
            self.fugueColumnIdentifier()
            self.state = 977
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
            if la_ == 1:
                self.state = 976
                _la = self._input.LA(1)
                if not(_la==65 or _la==111):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueColumnIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fugueIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueIdentifierContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueColumnIdentifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueColumnIdentifier" ):
                return visitor.visitFugueColumnIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def fugueColumnIdentifier(self):

        localctx = fugue_sqlParser.FugueColumnIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_fugueColumnIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 979
            self.fugueIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueRenameExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fugueRenamePair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.FugueRenamePairContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.FugueRenamePairContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueRenameExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueRenameExpression" ):
                return visitor.visitFugueRenameExpression(self)
            else:
                return visitor.visitChildren(self)




    def fugueRenameExpression(self):

        localctx = fugue_sqlParser.FugueRenameExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_fugueRenameExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 981
            self.fugueRenamePair()
            self.state = 986
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,112,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 982
                    self.match(fugue_sqlParser.T__0)
                    self.state = 983
                    self.fugueRenamePair() 
                self.state = 988
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,112,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueWildSchemaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fugueWildSchemaPair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.FugueWildSchemaPairContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.FugueWildSchemaPairContext,i)


        def fugueSchemaOp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.FugueSchemaOpContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.FugueSchemaOpContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueWildSchema

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueWildSchema" ):
                return visitor.visitFugueWildSchema(self)
            else:
                return visitor.visitChildren(self)




    def fugueWildSchema(self):

        localctx = fugue_sqlParser.FugueWildSchemaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_fugueWildSchema)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 989
            self.fugueWildSchemaPair()
            self.state = 994
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,113,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 990
                    self.match(fugue_sqlParser.T__0)
                    self.state = 991
                    self.fugueWildSchemaPair() 
                self.state = 996
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,113,self._ctx)

            self.state = 1000
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,114,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 997
                    self.fugueSchemaOp() 
                self.state = 1002
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,114,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueWildSchemaPairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.pair = None # FugueSchemaPairContext

        def fugueSchemaPair(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSchemaPairContext,0)


        def ASTERISK(self):
            return self.getToken(fugue_sqlParser.ASTERISK, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueWildSchemaPair

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueWildSchemaPair" ):
                return visitor.visitFugueWildSchemaPair(self)
            else:
                return visitor.visitChildren(self)




    def fugueWildSchemaPair(self):

        localctx = fugue_sqlParser.FugueWildSchemaPairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_fugueWildSchemaPair)
        try:
            self.state = 1005
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 320, 335, 336]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1003
                localctx.pair = self.fugueSchemaPair()
                pass
            elif token in [317]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1004
                self.match(fugue_sqlParser.ASTERISK)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueSchemaOpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fugueSchemaKey(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.FugueSchemaKeyContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.FugueSchemaKeyContext,i)


        def MINUS(self):
            return self.getToken(fugue_sqlParser.MINUS, 0)

        def TILDE(self):
            return self.getToken(fugue_sqlParser.TILDE, 0)

        def PLUS(self):
            return self.getToken(fugue_sqlParser.PLUS, 0)

        def fugueSchema(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSchemaContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueSchemaOp

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueSchemaOp" ):
                return visitor.visitFugueSchemaOp(self)
            else:
                return visitor.visitChildren(self)




    def fugueSchemaOp(self):

        localctx = fugue_sqlParser.FugueSchemaOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_fugueSchemaOp)
        self._la = 0 # Token type
        try:
            self.state = 1018
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [316, 321]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1007
                _la = self._input.LA(1)
                if not(_la==316 or _la==321):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1008
                self.fugueSchemaKey()
                self.state = 1013
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,116,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1009
                        self.match(fugue_sqlParser.T__0)
                        self.state = 1010
                        self.fugueSchemaKey() 
                    self.state = 1015
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,116,self._ctx)

                pass
            elif token in [315]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1016
                self.match(fugue_sqlParser.PLUS)
                self.state = 1017
                self.fugueSchema()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueSchemaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fugueSchemaPair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.FugueSchemaPairContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.FugueSchemaPairContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueSchema

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueSchema" ):
                return visitor.visitFugueSchema(self)
            else:
                return visitor.visitChildren(self)




    def fugueSchema(self):

        localctx = fugue_sqlParser.FugueSchemaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_fugueSchema)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1020
            self.fugueSchemaPair()
            self.state = 1025
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,118,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1021
                    self.match(fugue_sqlParser.T__0)
                    self.state = 1022
                    self.fugueSchemaPair() 
                self.state = 1027
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,118,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueSchemaPairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.key = None # FugueSchemaKeyContext
            self.value = None # FugueSchemaTypeContext

        def fugueSchemaKey(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSchemaKeyContext,0)


        def fugueSchemaType(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSchemaTypeContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueSchemaPair

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueSchemaPair" ):
                return visitor.visitFugueSchemaPair(self)
            else:
                return visitor.visitChildren(self)




    def fugueSchemaPair(self):

        localctx = fugue_sqlParser.FugueSchemaPairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_fugueSchemaPair)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1028
            localctx.key = self.fugueSchemaKey()
            self.state = 1029
            self.match(fugue_sqlParser.T__1)
            self.state = 1030
            localctx.value = self.fugueSchemaType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueSchemaKeyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fugueIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueIdentifierContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueSchemaKey

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueSchemaKey" ):
                return visitor.visitFugueSchemaKey(self)
            else:
                return visitor.visitChildren(self)




    def fugueSchemaKey(self):

        localctx = fugue_sqlParser.FugueSchemaKeyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_fugueSchemaKey)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1032
            self.fugueIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueSchemaTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueSchemaType

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class FugueSchemaSimpleTypeContext(FugueSchemaTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.FugueSchemaTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def fugueIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueIdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueSchemaSimpleType" ):
                return visitor.visitFugueSchemaSimpleType(self)
            else:
                return visitor.visitChildren(self)


    class FugueSchemaMapTypeContext(FugueSchemaTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.FugueSchemaTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LT(self):
            return self.getToken(fugue_sqlParser.LT, 0)
        def fugueSchemaType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.FugueSchemaTypeContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.FugueSchemaTypeContext,i)

        def GT(self):
            return self.getToken(fugue_sqlParser.GT, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueSchemaMapType" ):
                return visitor.visitFugueSchemaMapType(self)
            else:
                return visitor.visitChildren(self)


    class FugueSchemaStructTypeContext(FugueSchemaTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.FugueSchemaTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def fugueSchema(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSchemaContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueSchemaStructType" ):
                return visitor.visitFugueSchemaStructType(self)
            else:
                return visitor.visitChildren(self)


    class FugueSchemaListTypeContext(FugueSchemaTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.FugueSchemaTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def fugueSchemaType(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSchemaTypeContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueSchemaListType" ):
                return visitor.visitFugueSchemaListType(self)
            else:
                return visitor.visitChildren(self)



    def fugueSchemaType(self):

        localctx = fugue_sqlParser.FugueSchemaTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_fugueSchemaType)
        try:
            self.state = 1049
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 320, 335, 336]:
                localctx = fugue_sqlParser.FugueSchemaSimpleTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1034
                self.fugueIdentifier()
                pass
            elif token in [5]:
                localctx = fugue_sqlParser.FugueSchemaListTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1035
                self.match(fugue_sqlParser.T__4)
                self.state = 1036
                self.fugueSchemaType()
                self.state = 1037
                self.match(fugue_sqlParser.T__5)
                pass
            elif token in [8]:
                localctx = fugue_sqlParser.FugueSchemaStructTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1039
                self.match(fugue_sqlParser.T__7)
                self.state = 1040
                self.fugueSchema()
                self.state = 1041
                self.match(fugue_sqlParser.T__8)
                pass
            elif token in [311]:
                localctx = fugue_sqlParser.FugueSchemaMapTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1043
                self.match(fugue_sqlParser.LT)
                self.state = 1044
                self.fugueSchemaType()
                self.state = 1045
                self.match(fugue_sqlParser.T__0)
                self.state = 1046
                self.fugueSchemaType()
                self.state = 1047
                self.match(fugue_sqlParser.GT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueRenamePairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.key = None # FugueSchemaKeyContext
            self.value = None # FugueSchemaKeyContext

        def fugueSchemaKey(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.FugueSchemaKeyContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.FugueSchemaKeyContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueRenamePair

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueRenamePair" ):
                return visitor.visitFugueRenamePair(self)
            else:
                return visitor.visitChildren(self)




    def fugueRenamePair(self):

        localctx = fugue_sqlParser.FugueRenamePairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_fugueRenamePair)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1051
            localctx.key = self.fugueSchemaKey()
            self.state = 1052
            self.match(fugue_sqlParser.T__1)
            self.state = 1053
            localctx.value = self.fugueSchemaKey()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueJsonContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fugueJsonValue(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueJsonValueContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueJson

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueJson" ):
                return visitor.visitFugueJson(self)
            else:
                return visitor.visitChildren(self)




    def fugueJson(self):

        localctx = fugue_sqlParser.FugueJsonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_fugueJson)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1055
            self.fugueJsonValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueJsonObjContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fugueJsonPairs(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueJsonPairsContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueJsonObj

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueJsonObj" ):
                return visitor.visitFugueJsonObj(self)
            else:
                return visitor.visitChildren(self)




    def fugueJsonObj(self):

        localctx = fugue_sqlParser.FugueJsonObjContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_fugueJsonObj)
        self._la = 0 # Token type
        try:
            self.state = 1075
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,122,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1057
                self.match(fugue_sqlParser.T__7)
                self.state = 1058
                self.fugueJsonPairs()
                self.state = 1060
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 1059
                    self.match(fugue_sqlParser.T__0)


                self.state = 1062
                self.match(fugue_sqlParser.T__8)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1064
                self.match(fugue_sqlParser.T__7)
                self.state = 1065
                self.match(fugue_sqlParser.T__8)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1066
                self.match(fugue_sqlParser.T__2)
                self.state = 1067
                self.fugueJsonPairs()
                self.state = 1069
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 1068
                    self.match(fugue_sqlParser.T__0)


                self.state = 1071
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1073
                self.match(fugue_sqlParser.T__2)
                self.state = 1074
                self.match(fugue_sqlParser.T__3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueJsonPairsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fugueJsonPair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.FugueJsonPairContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.FugueJsonPairContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueJsonPairs

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueJsonPairs" ):
                return visitor.visitFugueJsonPairs(self)
            else:
                return visitor.visitChildren(self)




    def fugueJsonPairs(self):

        localctx = fugue_sqlParser.FugueJsonPairsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_fugueJsonPairs)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1077
            self.fugueJsonPair()
            self.state = 1082
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,123,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1078
                    self.match(fugue_sqlParser.T__0)
                    self.state = 1079
                    self.fugueJsonPair() 
                self.state = 1084
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,123,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueJsonPairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.key = None # FugueJsonKeyContext
            self.value = None # FugueJsonValueContext

        def fugueJsonKey(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueJsonKeyContext,0)


        def EQUAL(self):
            return self.getToken(fugue_sqlParser.EQUAL, 0)

        def fugueJsonValue(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueJsonValueContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueJsonPair

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueJsonPair" ):
                return visitor.visitFugueJsonPair(self)
            else:
                return visitor.visitChildren(self)




    def fugueJsonPair(self):

        localctx = fugue_sqlParser.FugueJsonPairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_fugueJsonPair)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1085
            localctx.key = self.fugueJsonKey()
            self.state = 1086
            _la = self._input.LA(1)
            if not(_la==2 or _la==306):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1087
            localctx.value = self.fugueJsonValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueJsonKeyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fugueIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueIdentifierContext,0)


        def fugueJsonString(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueJsonStringContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueJsonKey

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueJsonKey" ):
                return visitor.visitFugueJsonKey(self)
            else:
                return visitor.visitChildren(self)




    def fugueJsonKey(self):

        localctx = fugue_sqlParser.FugueJsonKeyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_fugueJsonKey)
        try:
            self.state = 1091
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 320, 335, 336]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1089
                self.fugueIdentifier()
                pass
            elif token in [326]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1090
                self.fugueJsonString()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueJsonArrayContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fugueJsonValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.FugueJsonValueContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.FugueJsonValueContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueJsonArray

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueJsonArray" ):
                return visitor.visitFugueJsonArray(self)
            else:
                return visitor.visitChildren(self)




    def fugueJsonArray(self):

        localctx = fugue_sqlParser.FugueJsonArrayContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_fugueJsonArray)
        self._la = 0 # Token type
        try:
            self.state = 1109
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,127,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1093
                self.match(fugue_sqlParser.T__4)
                self.state = 1094
                self.fugueJsonValue()
                self.state = 1099
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,125,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1095
                        self.match(fugue_sqlParser.T__0)
                        self.state = 1096
                        self.fugueJsonValue() 
                    self.state = 1101
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,125,self._ctx)

                self.state = 1103
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 1102
                    self.match(fugue_sqlParser.T__0)


                self.state = 1105
                self.match(fugue_sqlParser.T__5)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1107
                self.match(fugue_sqlParser.T__4)
                self.state = 1108
                self.match(fugue_sqlParser.T__5)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueJsonValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fugueJsonString(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueJsonStringContext,0)


        def fugueJsonNumber(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueJsonNumberContext,0)


        def fugueJsonObj(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueJsonObjContext,0)


        def fugueJsonArray(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueJsonArrayContext,0)


        def fugueJsonBool(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueJsonBoolContext,0)


        def fugueJsonNull(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueJsonNullContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueJsonValue

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueJsonValue" ):
                return visitor.visitFugueJsonValue(self)
            else:
                return visitor.visitChildren(self)




    def fugueJsonValue(self):

        localctx = fugue_sqlParser.FugueJsonValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_fugueJsonValue)
        try:
            self.state = 1117
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [326]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1111
                self.fugueJsonString()
                pass
            elif token in [316, 327, 328, 329, 330, 331, 332, 333, 334]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1112
                self.fugueJsonNumber()
                pass
            elif token in [3, 8]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1113
                self.fugueJsonObj()
                pass
            elif token in [5]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1114
                self.fugueJsonArray()
                pass
            elif token in [10, 11, 131, 283]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1115
                self.fugueJsonBool()
                pass
            elif token in [12, 196]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1116
                self.fugueJsonNull()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueJsonNumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def number(self):
            return self.getTypedRuleContext(fugue_sqlParser.NumberContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueJsonNumber

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueJsonNumber" ):
                return visitor.visitFugueJsonNumber(self)
            else:
                return visitor.visitChildren(self)




    def fugueJsonNumber(self):

        localctx = fugue_sqlParser.FugueJsonNumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_fugueJsonNumber)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1119
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueJsonStringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueJsonString

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueJsonString" ):
                return visitor.visitFugueJsonString(self)
            else:
                return visitor.visitChildren(self)




    def fugueJsonString(self):

        localctx = fugue_sqlParser.FugueJsonStringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_fugueJsonString)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1121
            self.match(fugue_sqlParser.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueJsonBoolContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(fugue_sqlParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(fugue_sqlParser.FALSE, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueJsonBool

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueJsonBool" ):
                return visitor.visitFugueJsonBool(self)
            else:
                return visitor.visitChildren(self)




    def fugueJsonBool(self):

        localctx = fugue_sqlParser.FugueJsonBoolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_fugueJsonBool)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1123
            _la = self._input.LA(1)
            if not(_la==10 or _la==11 or _la==131 or _la==283):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueJsonNullContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def THENULL(self):
            return self.getToken(fugue_sqlParser.THENULL, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueJsonNull

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueJsonNull" ):
                return visitor.visitFugueJsonNull(self)
            else:
                return visitor.visitChildren(self)




    def fugueJsonNull(self):

        localctx = fugue_sqlParser.FugueJsonNullContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_fugueJsonNull)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1125
            _la = self._input.LA(1)
            if not(_la==12 or _la==196):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FugueIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fugueIdentifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueIdentifier" ):
                return visitor.visitFugueIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def fugueIdentifier(self):

        localctx = fugue_sqlParser.FugueIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_fugueIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1127
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(fugue_sqlParser.StatementContext,0)


        def EOF(self):
            return self.getToken(fugue_sqlParser.EOF, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_singleStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleStatement" ):
                return visitor.visitSingleStatement(self)
            else:
                return visitor.visitChildren(self)




    def singleStatement(self):

        localctx = fugue_sqlParser.SingleStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_singleStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1129
            self.statement()
            self.state = 1133
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==13:
                self.state = 1130
                self.match(fugue_sqlParser.T__12)
                self.state = 1135
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1136
            self.match(fugue_sqlParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namedExpression(self):
            return self.getTypedRuleContext(fugue_sqlParser.NamedExpressionContext,0)


        def EOF(self):
            return self.getToken(fugue_sqlParser.EOF, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_singleExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleExpression" ):
                return visitor.visitSingleExpression(self)
            else:
                return visitor.visitChildren(self)




    def singleExpression(self):

        localctx = fugue_sqlParser.SingleExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_singleExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1138
            self.namedExpression()
            self.state = 1139
            self.match(fugue_sqlParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleTableIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.TableIdentifierContext,0)


        def EOF(self):
            return self.getToken(fugue_sqlParser.EOF, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_singleTableIdentifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleTableIdentifier" ):
                return visitor.visitSingleTableIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def singleTableIdentifier(self):

        localctx = fugue_sqlParser.SingleTableIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_singleTableIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1141
            self.tableIdentifier()
            self.state = 1142
            self.match(fugue_sqlParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleMultipartIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)


        def EOF(self):
            return self.getToken(fugue_sqlParser.EOF, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_singleMultipartIdentifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleMultipartIdentifier" ):
                return visitor.visitSingleMultipartIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def singleMultipartIdentifier(self):

        localctx = fugue_sqlParser.SingleMultipartIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_singleMultipartIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1144
            self.multipartIdentifier()
            self.state = 1145
            self.match(fugue_sqlParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleFunctionIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.FunctionIdentifierContext,0)


        def EOF(self):
            return self.getToken(fugue_sqlParser.EOF, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_singleFunctionIdentifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleFunctionIdentifier" ):
                return visitor.visitSingleFunctionIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def singleFunctionIdentifier(self):

        localctx = fugue_sqlParser.SingleFunctionIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_singleFunctionIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1147
            self.functionIdentifier()
            self.state = 1148
            self.match(fugue_sqlParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleDataTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dataType(self):
            return self.getTypedRuleContext(fugue_sqlParser.DataTypeContext,0)


        def EOF(self):
            return self.getToken(fugue_sqlParser.EOF, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_singleDataType

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleDataType" ):
                return visitor.visitSingleDataType(self)
            else:
                return visitor.visitChildren(self)




    def singleDataType(self):

        localctx = fugue_sqlParser.SingleDataTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_singleDataType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1150
            self.dataType()
            self.state = 1151
            self.match(fugue_sqlParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleTableSchemaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colTypeList(self):
            return self.getTypedRuleContext(fugue_sqlParser.ColTypeListContext,0)


        def EOF(self):
            return self.getToken(fugue_sqlParser.EOF, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_singleTableSchema

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleTableSchema" ):
                return visitor.visitSingleTableSchema(self)
            else:
                return visitor.visitChildren(self)




    def singleTableSchema(self):

        localctx = fugue_sqlParser.SingleTableSchemaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_singleTableSchema)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1153
            self.colTypeList()
            self.state = 1154
            self.match(fugue_sqlParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_statement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ExplainContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXPLAIN(self):
            return self.getToken(fugue_sqlParser.EXPLAIN, 0)
        def statement(self):
            return self.getTypedRuleContext(fugue_sqlParser.StatementContext,0)

        def LOGICAL(self):
            return self.getToken(fugue_sqlParser.LOGICAL, 0)
        def FORMATTED(self):
            return self.getToken(fugue_sqlParser.FORMATTED, 0)
        def EXTENDED(self):
            return self.getToken(fugue_sqlParser.EXTENDED, 0)
        def CODEGEN(self):
            return self.getToken(fugue_sqlParser.CODEGEN, 0)
        def COST(self):
            return self.getToken(fugue_sqlParser.COST, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExplain" ):
                return visitor.visitExplain(self)
            else:
                return visitor.visitChildren(self)


    class ResetConfigurationContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def RESET(self):
            return self.getToken(fugue_sqlParser.RESET, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitResetConfiguration" ):
                return visitor.visitResetConfiguration(self)
            else:
                return visitor.visitChildren(self)


    class AlterViewQueryContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)
        def VIEW(self):
            return self.getToken(fugue_sqlParser.VIEW, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def query(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryContext,0)

        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterViewQuery" ):
                return visitor.visitAlterViewQuery(self)
            else:
                return visitor.visitChildren(self)


    class UseContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def USE(self):
            return self.getToken(fugue_sqlParser.USE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def NAMESPACE(self):
            return self.getToken(fugue_sqlParser.NAMESPACE, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUse" ):
                return visitor.visitUse(self)
            else:
                return visitor.visitChildren(self)


    class DropNamespaceContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(fugue_sqlParser.DROP, 0)
        def theNamespace(self):
            return self.getTypedRuleContext(fugue_sqlParser.TheNamespaceContext,0)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def IF(self):
            return self.getToken(fugue_sqlParser.IF, 0)
        def EXISTS(self):
            return self.getToken(fugue_sqlParser.EXISTS, 0)
        def RESTRICT(self):
            return self.getToken(fugue_sqlParser.RESTRICT, 0)
        def CASCADE(self):
            return self.getToken(fugue_sqlParser.CASCADE, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropNamespace" ):
                return visitor.visitDropNamespace(self)
            else:
                return visitor.visitChildren(self)


    class CreateTempViewUsingContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(fugue_sqlParser.CREATE, 0)
        def TEMPORARY(self):
            return self.getToken(fugue_sqlParser.TEMPORARY, 0)
        def VIEW(self):
            return self.getToken(fugue_sqlParser.VIEW, 0)
        def tableIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.TableIdentifierContext,0)

        def tableProvider(self):
            return self.getTypedRuleContext(fugue_sqlParser.TableProviderContext,0)

        def OR(self):
            return self.getToken(fugue_sqlParser.OR, 0)
        def REPLACE(self):
            return self.getToken(fugue_sqlParser.REPLACE, 0)
        def GLOBAL(self):
            return self.getToken(fugue_sqlParser.GLOBAL, 0)
        def colTypeList(self):
            return self.getTypedRuleContext(fugue_sqlParser.ColTypeListContext,0)

        def OPTIONS(self):
            return self.getToken(fugue_sqlParser.OPTIONS, 0)
        def tablePropertyList(self):
            return self.getTypedRuleContext(fugue_sqlParser.TablePropertyListContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateTempViewUsing" ):
                return visitor.visitCreateTempViewUsing(self)
            else:
                return visitor.visitChildren(self)


    class RenameTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.ifrom = None # MultipartIdentifierContext
            self.to = None # MultipartIdentifierContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)
        def RENAME(self):
            return self.getToken(fugue_sqlParser.RENAME, 0)
        def TO(self):
            return self.getToken(fugue_sqlParser.TO, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def VIEW(self):
            return self.getToken(fugue_sqlParser.VIEW, 0)
        def multipartIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.MultipartIdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,i)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRenameTable" ):
                return visitor.visitRenameTable(self)
            else:
                return visitor.visitChildren(self)


    class FailNativeCommandContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SET(self):
            return self.getToken(fugue_sqlParser.SET, 0)
        def ROLE(self):
            return self.getToken(fugue_sqlParser.ROLE, 0)
        def unsupportedHiveNativeCommands(self):
            return self.getTypedRuleContext(fugue_sqlParser.UnsupportedHiveNativeCommandsContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFailNativeCommand" ):
                return visitor.visitFailNativeCommand(self)
            else:
                return visitor.visitChildren(self)


    class ClearCacheContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CLEAR(self):
            return self.getToken(fugue_sqlParser.CLEAR, 0)
        def CACHE(self):
            return self.getToken(fugue_sqlParser.CACHE, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClearCache" ):
                return visitor.visitClearCache(self)
            else:
                return visitor.visitChildren(self)


    class DropViewContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(fugue_sqlParser.DROP, 0)
        def VIEW(self):
            return self.getToken(fugue_sqlParser.VIEW, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def IF(self):
            return self.getToken(fugue_sqlParser.IF, 0)
        def EXISTS(self):
            return self.getToken(fugue_sqlParser.EXISTS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropView" ):
                return visitor.visitDropView(self)
            else:
                return visitor.visitChildren(self)


    class ShowTablesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.pattern = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(fugue_sqlParser.SHOW, 0)
        def TABLES(self):
            return self.getToken(fugue_sqlParser.TABLES, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def FROM(self):
            return self.getToken(fugue_sqlParser.FROM, 0)
        def IN(self):
            return self.getToken(fugue_sqlParser.IN, 0)
        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)
        def LIKE(self):
            return self.getToken(fugue_sqlParser.LIKE, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowTables" ):
                return visitor.visitShowTables(self)
            else:
                return visitor.visitChildren(self)


    class RecoverPartitionsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def RECOVER(self):
            return self.getToken(fugue_sqlParser.RECOVER, 0)
        def PARTITIONS(self):
            return self.getToken(fugue_sqlParser.PARTITIONS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRecoverPartitions" ):
                return visitor.visitRecoverPartitions(self)
            else:
                return visitor.visitChildren(self)


    class ShowCurrentNamespaceContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(fugue_sqlParser.SHOW, 0)
        def CURRENT(self):
            return self.getToken(fugue_sqlParser.CURRENT, 0)
        def NAMESPACE(self):
            return self.getToken(fugue_sqlParser.NAMESPACE, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowCurrentNamespace" ):
                return visitor.visitShowCurrentNamespace(self)
            else:
                return visitor.visitChildren(self)


    class RenameTablePartitionContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.ifrom = None # PartitionSpecContext
            self.to = None # PartitionSpecContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def RENAME(self):
            return self.getToken(fugue_sqlParser.RENAME, 0)
        def TO(self):
            return self.getToken(fugue_sqlParser.TO, 0)
        def partitionSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.PartitionSpecContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.PartitionSpecContext,i)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRenameTablePartition" ):
                return visitor.visitRenameTablePartition(self)
            else:
                return visitor.visitChildren(self)


    class RepairTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MSCK(self):
            return self.getToken(fugue_sqlParser.MSCK, 0)
        def REPAIR(self):
            return self.getToken(fugue_sqlParser.REPAIR, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRepairTable" ):
                return visitor.visitRepairTable(self)
            else:
                return visitor.visitChildren(self)


    class RefreshResourceContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REFRESH(self):
            return self.getToken(fugue_sqlParser.REFRESH, 0)
        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRefreshResource" ):
                return visitor.visitRefreshResource(self)
            else:
                return visitor.visitChildren(self)


    class ShowCreateTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(fugue_sqlParser.SHOW, 0)
        def CREATE(self):
            return self.getToken(fugue_sqlParser.CREATE, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)
        def SERDE(self):
            return self.getToken(fugue_sqlParser.SERDE, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowCreateTable" ):
                return visitor.visitShowCreateTable(self)
            else:
                return visitor.visitChildren(self)


    class ShowNamespacesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.pattern = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(fugue_sqlParser.SHOW, 0)
        def DATABASES(self):
            return self.getToken(fugue_sqlParser.DATABASES, 0)
        def NAMESPACES(self):
            return self.getToken(fugue_sqlParser.NAMESPACES, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def FROM(self):
            return self.getToken(fugue_sqlParser.FROM, 0)
        def IN(self):
            return self.getToken(fugue_sqlParser.IN, 0)
        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)
        def LIKE(self):
            return self.getToken(fugue_sqlParser.LIKE, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowNamespaces" ):
                return visitor.visitShowNamespaces(self)
            else:
                return visitor.visitChildren(self)


    class ShowColumnsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.table = None # MultipartIdentifierContext
            self.ns = None # MultipartIdentifierContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(fugue_sqlParser.SHOW, 0)
        def COLUMNS(self):
            return self.getToken(fugue_sqlParser.COLUMNS, 0)
        def FROM(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.FROM)
            else:
                return self.getToken(fugue_sqlParser.FROM, i)
        def IN(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.IN)
            else:
                return self.getToken(fugue_sqlParser.IN, i)
        def multipartIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.MultipartIdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,i)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowColumns" ):
                return visitor.visitShowColumns(self)
            else:
                return visitor.visitChildren(self)


    class ReplaceTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def replaceTableHeader(self):
            return self.getTypedRuleContext(fugue_sqlParser.ReplaceTableHeaderContext,0)

        def tableProvider(self):
            return self.getTypedRuleContext(fugue_sqlParser.TableProviderContext,0)

        def createTableClauses(self):
            return self.getTypedRuleContext(fugue_sqlParser.CreateTableClausesContext,0)

        def colTypeList(self):
            return self.getTypedRuleContext(fugue_sqlParser.ColTypeListContext,0)

        def query(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryContext,0)

        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReplaceTable" ):
                return visitor.visitReplaceTable(self)
            else:
                return visitor.visitChildren(self)


    class AddTablePartitionContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def ADD(self):
            return self.getToken(fugue_sqlParser.ADD, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def VIEW(self):
            return self.getToken(fugue_sqlParser.VIEW, 0)
        def IF(self):
            return self.getToken(fugue_sqlParser.IF, 0)
        def NOT(self):
            return self.getToken(fugue_sqlParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(fugue_sqlParser.EXISTS, 0)
        def partitionSpecLocation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.PartitionSpecLocationContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.PartitionSpecLocationContext,i)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAddTablePartition" ):
                return visitor.visitAddTablePartition(self)
            else:
                return visitor.visitChildren(self)


    class SetNamespaceLocationContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)
        def theNamespace(self):
            return self.getTypedRuleContext(fugue_sqlParser.TheNamespaceContext,0)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def SET(self):
            return self.getToken(fugue_sqlParser.SET, 0)
        def locationSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.LocationSpecContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetNamespaceLocation" ):
                return visitor.visitSetNamespaceLocation(self)
            else:
                return visitor.visitChildren(self)


    class RefreshTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REFRESH(self):
            return self.getToken(fugue_sqlParser.REFRESH, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRefreshTable" ):
                return visitor.visitRefreshTable(self)
            else:
                return visitor.visitChildren(self)


    class SetNamespacePropertiesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)
        def theNamespace(self):
            return self.getTypedRuleContext(fugue_sqlParser.TheNamespaceContext,0)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def SET(self):
            return self.getToken(fugue_sqlParser.SET, 0)
        def tablePropertyList(self):
            return self.getTypedRuleContext(fugue_sqlParser.TablePropertyListContext,0)

        def DBPROPERTIES(self):
            return self.getToken(fugue_sqlParser.DBPROPERTIES, 0)
        def PROPERTIES(self):
            return self.getToken(fugue_sqlParser.PROPERTIES, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetNamespaceProperties" ):
                return visitor.visitSetNamespaceProperties(self)
            else:
                return visitor.visitChildren(self)


    class ManageResourceContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)

        def ADD(self):
            return self.getToken(fugue_sqlParser.ADD, 0)
        def LIST(self):
            return self.getToken(fugue_sqlParser.LIST, 0)
        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitManageResource" ):
                return visitor.visitManageResource(self)
            else:
                return visitor.visitChildren(self)


    class AnalyzeContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ANALYZE(self):
            return self.getToken(fugue_sqlParser.ANALYZE, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def COMPUTE(self):
            return self.getToken(fugue_sqlParser.COMPUTE, 0)
        def STATISTICS(self):
            return self.getToken(fugue_sqlParser.STATISTICS, 0)
        def partitionSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.PartitionSpecContext,0)

        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)

        def FOR(self):
            return self.getToken(fugue_sqlParser.FOR, 0)
        def COLUMNS(self):
            return self.getToken(fugue_sqlParser.COLUMNS, 0)
        def identifierSeq(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierSeqContext,0)

        def ALL(self):
            return self.getToken(fugue_sqlParser.ALL, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnalyze" ):
                return visitor.visitAnalyze(self)
            else:
                return visitor.visitChildren(self)


    class CreateHiveTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.columns = None # ColTypeListContext
            self.partitionColumns = None # ColTypeListContext
            self.partitionColumnNames = None # IdentifierListContext
            self.tableProps = None # TablePropertyListContext
            self.copyFrom(ctx)

        def createTableHeader(self):
            return self.getTypedRuleContext(fugue_sqlParser.CreateTableHeaderContext,0)

        def commentSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.CommentSpecContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.CommentSpecContext,i)

        def bucketSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.BucketSpecContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.BucketSpecContext,i)

        def skewSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.SkewSpecContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.SkewSpecContext,i)

        def rowFormat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.RowFormatContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.RowFormatContext,i)

        def createFileFormat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.CreateFileFormatContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.CreateFileFormatContext,i)

        def locationSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.LocationSpecContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.LocationSpecContext,i)

        def query(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryContext,0)

        def colTypeList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ColTypeListContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ColTypeListContext,i)

        def PARTITIONED(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.PARTITIONED)
            else:
                return self.getToken(fugue_sqlParser.PARTITIONED, i)
        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.BY)
            else:
                return self.getToken(fugue_sqlParser.BY, i)
        def TBLPROPERTIES(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.TBLPROPERTIES)
            else:
                return self.getToken(fugue_sqlParser.TBLPROPERTIES, i)
        def identifierList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.IdentifierListContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.IdentifierListContext,i)

        def tablePropertyList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.TablePropertyListContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.TablePropertyListContext,i)

        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateHiveTable" ):
                return visitor.visitCreateHiveTable(self)
            else:
                return visitor.visitChildren(self)


    class CreateFunctionContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.className = None # Token
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(fugue_sqlParser.CREATE, 0)
        def FUNCTION(self):
            return self.getToken(fugue_sqlParser.FUNCTION, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)
        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)
        def OR(self):
            return self.getToken(fugue_sqlParser.OR, 0)
        def REPLACE(self):
            return self.getToken(fugue_sqlParser.REPLACE, 0)
        def TEMPORARY(self):
            return self.getToken(fugue_sqlParser.TEMPORARY, 0)
        def IF(self):
            return self.getToken(fugue_sqlParser.IF, 0)
        def NOT(self):
            return self.getToken(fugue_sqlParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(fugue_sqlParser.EXISTS, 0)
        def USING(self):
            return self.getToken(fugue_sqlParser.USING, 0)
        def resource(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ResourceContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ResourceContext,i)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateFunction" ):
                return visitor.visitCreateFunction(self)
            else:
                return visitor.visitChildren(self)


    class ShowTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.ns = None # MultipartIdentifierContext
            self.pattern = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(fugue_sqlParser.SHOW, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def EXTENDED(self):
            return self.getToken(fugue_sqlParser.EXTENDED, 0)
        def LIKE(self):
            return self.getToken(fugue_sqlParser.LIKE, 0)
        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)
        def partitionSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.PartitionSpecContext,0)

        def FROM(self):
            return self.getToken(fugue_sqlParser.FROM, 0)
        def IN(self):
            return self.getToken(fugue_sqlParser.IN, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowTable" ):
                return visitor.visitShowTable(self)
            else:
                return visitor.visitChildren(self)


    class HiveReplaceColumnsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.table = None # MultipartIdentifierContext
            self.columns = None # QualifiedColTypeWithPositionListContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def REPLACE(self):
            return self.getToken(fugue_sqlParser.REPLACE, 0)
        def COLUMNS(self):
            return self.getToken(fugue_sqlParser.COLUMNS, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def qualifiedColTypeWithPositionList(self):
            return self.getTypedRuleContext(fugue_sqlParser.QualifiedColTypeWithPositionListContext,0)

        def partitionSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.PartitionSpecContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHiveReplaceColumns" ):
                return visitor.visitHiveReplaceColumns(self)
            else:
                return visitor.visitChildren(self)


    class CommentNamespaceContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.comment = None # Token
            self.copyFrom(ctx)

        def COMMENT(self):
            return self.getToken(fugue_sqlParser.COMMENT, 0)
        def ON(self):
            return self.getToken(fugue_sqlParser.ON, 0)
        def theNamespace(self):
            return self.getTypedRuleContext(fugue_sqlParser.TheNamespaceContext,0)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def IS(self):
            return self.getToken(fugue_sqlParser.IS, 0)
        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)
        def THENULL(self):
            return self.getToken(fugue_sqlParser.THENULL, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCommentNamespace" ):
                return visitor.visitCommentNamespace(self)
            else:
                return visitor.visitChildren(self)


    class CreateTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def createTableHeader(self):
            return self.getTypedRuleContext(fugue_sqlParser.CreateTableHeaderContext,0)

        def tableProvider(self):
            return self.getTypedRuleContext(fugue_sqlParser.TableProviderContext,0)

        def createTableClauses(self):
            return self.getTypedRuleContext(fugue_sqlParser.CreateTableClausesContext,0)

        def colTypeList(self):
            return self.getTypedRuleContext(fugue_sqlParser.ColTypeListContext,0)

        def query(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryContext,0)

        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateTable" ):
                return visitor.visitCreateTable(self)
            else:
                return visitor.visitChildren(self)


    class DmlStatementContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def dmlStatementNoWith(self):
            return self.getTypedRuleContext(fugue_sqlParser.DmlStatementNoWithContext,0)

        def ctes(self):
            return self.getTypedRuleContext(fugue_sqlParser.CtesContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDmlStatement" ):
                return visitor.visitDmlStatement(self)
            else:
                return visitor.visitChildren(self)


    class CreateTableLikeContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.target = None # TableIdentifierContext
            self.source = None # TableIdentifierContext
            self.tableProps = None # TablePropertyListContext
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(fugue_sqlParser.CREATE, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def LIKE(self):
            return self.getToken(fugue_sqlParser.LIKE, 0)
        def tableIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.TableIdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.TableIdentifierContext,i)

        def IF(self):
            return self.getToken(fugue_sqlParser.IF, 0)
        def NOT(self):
            return self.getToken(fugue_sqlParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(fugue_sqlParser.EXISTS, 0)
        def tableProvider(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.TableProviderContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.TableProviderContext,i)

        def rowFormat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.RowFormatContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.RowFormatContext,i)

        def createFileFormat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.CreateFileFormatContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.CreateFileFormatContext,i)

        def locationSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.LocationSpecContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.LocationSpecContext,i)

        def TBLPROPERTIES(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.TBLPROPERTIES)
            else:
                return self.getToken(fugue_sqlParser.TBLPROPERTIES, i)
        def tablePropertyList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.TablePropertyListContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.TablePropertyListContext,i)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateTableLike" ):
                return visitor.visitCreateTableLike(self)
            else:
                return visitor.visitChildren(self)


    class UncacheTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def UNCACHE(self):
            return self.getToken(fugue_sqlParser.UNCACHE, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def IF(self):
            return self.getToken(fugue_sqlParser.IF, 0)
        def EXISTS(self):
            return self.getToken(fugue_sqlParser.EXISTS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUncacheTable" ):
                return visitor.visitUncacheTable(self)
            else:
                return visitor.visitChildren(self)


    class DropFunctionContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(fugue_sqlParser.DROP, 0)
        def FUNCTION(self):
            return self.getToken(fugue_sqlParser.FUNCTION, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def TEMPORARY(self):
            return self.getToken(fugue_sqlParser.TEMPORARY, 0)
        def IF(self):
            return self.getToken(fugue_sqlParser.IF, 0)
        def EXISTS(self):
            return self.getToken(fugue_sqlParser.EXISTS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropFunction" ):
                return visitor.visitDropFunction(self)
            else:
                return visitor.visitChildren(self)


    class DescribeRelationContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.option = None # Token
            self.copyFrom(ctx)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def DESC(self):
            return self.getToken(fugue_sqlParser.DESC, 0)
        def DESCRIBE(self):
            return self.getToken(fugue_sqlParser.DESCRIBE, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def partitionSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.PartitionSpecContext,0)

        def describeColName(self):
            return self.getTypedRuleContext(fugue_sqlParser.DescribeColNameContext,0)

        def EXTENDED(self):
            return self.getToken(fugue_sqlParser.EXTENDED, 0)
        def FORMATTED(self):
            return self.getToken(fugue_sqlParser.FORMATTED, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDescribeRelation" ):
                return visitor.visitDescribeRelation(self)
            else:
                return visitor.visitChildren(self)


    class LoadDataContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.path = None # Token
            self.copyFrom(ctx)

        def LOAD(self):
            return self.getToken(fugue_sqlParser.LOAD, 0)
        def DATA(self):
            return self.getToken(fugue_sqlParser.DATA, 0)
        def INPATH(self):
            return self.getToken(fugue_sqlParser.INPATH, 0)
        def INTO(self):
            return self.getToken(fugue_sqlParser.INTO, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)
        def LOCAL(self):
            return self.getToken(fugue_sqlParser.LOCAL, 0)
        def OVERWRITE(self):
            return self.getToken(fugue_sqlParser.OVERWRITE, 0)
        def partitionSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.PartitionSpecContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLoadData" ):
                return visitor.visitLoadData(self)
            else:
                return visitor.visitChildren(self)


    class ShowPartitionsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(fugue_sqlParser.SHOW, 0)
        def PARTITIONS(self):
            return self.getToken(fugue_sqlParser.PARTITIONS, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def partitionSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.PartitionSpecContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowPartitions" ):
                return visitor.visitShowPartitions(self)
            else:
                return visitor.visitChildren(self)


    class DescribeFunctionContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FUNCTION(self):
            return self.getToken(fugue_sqlParser.FUNCTION, 0)
        def describeFuncName(self):
            return self.getTypedRuleContext(fugue_sqlParser.DescribeFuncNameContext,0)

        def DESC(self):
            return self.getToken(fugue_sqlParser.DESC, 0)
        def DESCRIBE(self):
            return self.getToken(fugue_sqlParser.DESCRIBE, 0)
        def EXTENDED(self):
            return self.getToken(fugue_sqlParser.EXTENDED, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDescribeFunction" ):
                return visitor.visitDescribeFunction(self)
            else:
                return visitor.visitChildren(self)


    class RenameTableColumnContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.table = None # MultipartIdentifierContext
            self.ifrom = None # MultipartIdentifierContext
            self.to = None # ErrorCapturingIdentifierContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def RENAME(self):
            return self.getToken(fugue_sqlParser.RENAME, 0)
        def COLUMN(self):
            return self.getToken(fugue_sqlParser.COLUMN, 0)
        def TO(self):
            return self.getToken(fugue_sqlParser.TO, 0)
        def multipartIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.MultipartIdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,i)

        def errorCapturingIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.ErrorCapturingIdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRenameTableColumn" ):
                return visitor.visitRenameTableColumn(self)
            else:
                return visitor.visitChildren(self)


    class StatementDefaultContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def query(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatementDefault" ):
                return visitor.visitStatementDefault(self)
            else:
                return visitor.visitChildren(self)


    class HiveChangeColumnContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.table = None # MultipartIdentifierContext
            self.colName = None # MultipartIdentifierContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def CHANGE(self):
            return self.getToken(fugue_sqlParser.CHANGE, 0)
        def colType(self):
            return self.getTypedRuleContext(fugue_sqlParser.ColTypeContext,0)

        def multipartIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.MultipartIdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,i)

        def partitionSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.PartitionSpecContext,0)

        def COLUMN(self):
            return self.getToken(fugue_sqlParser.COLUMN, 0)
        def colPosition(self):
            return self.getTypedRuleContext(fugue_sqlParser.ColPositionContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHiveChangeColumn" ):
                return visitor.visitHiveChangeColumn(self)
            else:
                return visitor.visitChildren(self)


    class DescribeQueryContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def query(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryContext,0)

        def DESC(self):
            return self.getToken(fugue_sqlParser.DESC, 0)
        def DESCRIBE(self):
            return self.getToken(fugue_sqlParser.DESCRIBE, 0)
        def QUERY(self):
            return self.getToken(fugue_sqlParser.QUERY, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDescribeQuery" ):
                return visitor.visitDescribeQuery(self)
            else:
                return visitor.visitChildren(self)


    class TruncateTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TRUNCATE(self):
            return self.getToken(fugue_sqlParser.TRUNCATE, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def partitionSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.PartitionSpecContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTruncateTable" ):
                return visitor.visitTruncateTable(self)
            else:
                return visitor.visitChildren(self)


    class SetTableSerDeContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def SET(self):
            return self.getToken(fugue_sqlParser.SET, 0)
        def SERDE(self):
            return self.getToken(fugue_sqlParser.SERDE, 0)
        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)
        def partitionSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.PartitionSpecContext,0)

        def WITH(self):
            return self.getToken(fugue_sqlParser.WITH, 0)
        def SERDEPROPERTIES(self):
            return self.getToken(fugue_sqlParser.SERDEPROPERTIES, 0)
        def tablePropertyList(self):
            return self.getTypedRuleContext(fugue_sqlParser.TablePropertyListContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetTableSerDe" ):
                return visitor.visitSetTableSerDe(self)
            else:
                return visitor.visitChildren(self)


    class CreateViewContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(fugue_sqlParser.CREATE, 0)
        def VIEW(self):
            return self.getToken(fugue_sqlParser.VIEW, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)
        def query(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryContext,0)

        def OR(self):
            return self.getToken(fugue_sqlParser.OR, 0)
        def REPLACE(self):
            return self.getToken(fugue_sqlParser.REPLACE, 0)
        def TEMPORARY(self):
            return self.getToken(fugue_sqlParser.TEMPORARY, 0)
        def IF(self):
            return self.getToken(fugue_sqlParser.IF, 0)
        def NOT(self):
            return self.getToken(fugue_sqlParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(fugue_sqlParser.EXISTS, 0)
        def identifierCommentList(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierCommentListContext,0)

        def commentSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.CommentSpecContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.CommentSpecContext,i)

        def PARTITIONED(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.PARTITIONED)
            else:
                return self.getToken(fugue_sqlParser.PARTITIONED, i)
        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.ON)
            else:
                return self.getToken(fugue_sqlParser.ON, i)
        def identifierList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.IdentifierListContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.IdentifierListContext,i)

        def TBLPROPERTIES(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.TBLPROPERTIES)
            else:
                return self.getToken(fugue_sqlParser.TBLPROPERTIES, i)
        def tablePropertyList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.TablePropertyListContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.TablePropertyListContext,i)

        def GLOBAL(self):
            return self.getToken(fugue_sqlParser.GLOBAL, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateView" ):
                return visitor.visitCreateView(self)
            else:
                return visitor.visitChildren(self)


    class DropTablePartitionsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def DROP(self):
            return self.getToken(fugue_sqlParser.DROP, 0)
        def partitionSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.PartitionSpecContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.PartitionSpecContext,i)

        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def VIEW(self):
            return self.getToken(fugue_sqlParser.VIEW, 0)
        def IF(self):
            return self.getToken(fugue_sqlParser.IF, 0)
        def EXISTS(self):
            return self.getToken(fugue_sqlParser.EXISTS, 0)
        def PURGE(self):
            return self.getToken(fugue_sqlParser.PURGE, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropTablePartitions" ):
                return visitor.visitDropTablePartitions(self)
            else:
                return visitor.visitChildren(self)


    class SetConfigurationContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SET(self):
            return self.getToken(fugue_sqlParser.SET, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetConfiguration" ):
                return visitor.visitSetConfiguration(self)
            else:
                return visitor.visitChildren(self)


    class DropTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(fugue_sqlParser.DROP, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def IF(self):
            return self.getToken(fugue_sqlParser.IF, 0)
        def EXISTS(self):
            return self.getToken(fugue_sqlParser.EXISTS, 0)
        def PURGE(self):
            return self.getToken(fugue_sqlParser.PURGE, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropTable" ):
                return visitor.visitDropTable(self)
            else:
                return visitor.visitChildren(self)


    class DescribeNamespaceContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def theNamespace(self):
            return self.getTypedRuleContext(fugue_sqlParser.TheNamespaceContext,0)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def DESC(self):
            return self.getToken(fugue_sqlParser.DESC, 0)
        def DESCRIBE(self):
            return self.getToken(fugue_sqlParser.DESCRIBE, 0)
        def EXTENDED(self):
            return self.getToken(fugue_sqlParser.EXTENDED, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDescribeNamespace" ):
                return visitor.visitDescribeNamespace(self)
            else:
                return visitor.visitChildren(self)


    class AlterTableAlterColumnContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.table = None # MultipartIdentifierContext
            self.column = None # MultipartIdentifierContext
            self.copyFrom(ctx)

        def ALTER(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.ALTER)
            else:
                return self.getToken(fugue_sqlParser.ALTER, i)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def multipartIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.MultipartIdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,i)

        def CHANGE(self):
            return self.getToken(fugue_sqlParser.CHANGE, 0)
        def COLUMN(self):
            return self.getToken(fugue_sqlParser.COLUMN, 0)
        def alterColumnAction(self):
            return self.getTypedRuleContext(fugue_sqlParser.AlterColumnActionContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterTableAlterColumn" ):
                return visitor.visitAlterTableAlterColumn(self)
            else:
                return visitor.visitChildren(self)


    class CommentTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.comment = None # Token
            self.copyFrom(ctx)

        def COMMENT(self):
            return self.getToken(fugue_sqlParser.COMMENT, 0)
        def ON(self):
            return self.getToken(fugue_sqlParser.ON, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def IS(self):
            return self.getToken(fugue_sqlParser.IS, 0)
        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)
        def THENULL(self):
            return self.getToken(fugue_sqlParser.THENULL, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCommentTable" ):
                return visitor.visitCommentTable(self)
            else:
                return visitor.visitChildren(self)


    class CreateNamespaceContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(fugue_sqlParser.CREATE, 0)
        def theNamespace(self):
            return self.getTypedRuleContext(fugue_sqlParser.TheNamespaceContext,0)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def IF(self):
            return self.getToken(fugue_sqlParser.IF, 0)
        def NOT(self):
            return self.getToken(fugue_sqlParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(fugue_sqlParser.EXISTS, 0)
        def commentSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.CommentSpecContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.CommentSpecContext,i)

        def locationSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.LocationSpecContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.LocationSpecContext,i)

        def WITH(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.WITH)
            else:
                return self.getToken(fugue_sqlParser.WITH, i)
        def tablePropertyList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.TablePropertyListContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.TablePropertyListContext,i)

        def DBPROPERTIES(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.DBPROPERTIES)
            else:
                return self.getToken(fugue_sqlParser.DBPROPERTIES, i)
        def PROPERTIES(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.PROPERTIES)
            else:
                return self.getToken(fugue_sqlParser.PROPERTIES, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateNamespace" ):
                return visitor.visitCreateNamespace(self)
            else:
                return visitor.visitChildren(self)


    class ShowTblPropertiesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.table = None # MultipartIdentifierContext
            self.key = None # TablePropertyKeyContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(fugue_sqlParser.SHOW, 0)
        def TBLPROPERTIES(self):
            return self.getToken(fugue_sqlParser.TBLPROPERTIES, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def tablePropertyKey(self):
            return self.getTypedRuleContext(fugue_sqlParser.TablePropertyKeyContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowTblProperties" ):
                return visitor.visitShowTblProperties(self)
            else:
                return visitor.visitChildren(self)


    class UnsetTablePropertiesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def UNSET(self):
            return self.getToken(fugue_sqlParser.UNSET, 0)
        def TBLPROPERTIES(self):
            return self.getToken(fugue_sqlParser.TBLPROPERTIES, 0)
        def tablePropertyList(self):
            return self.getTypedRuleContext(fugue_sqlParser.TablePropertyListContext,0)

        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def VIEW(self):
            return self.getToken(fugue_sqlParser.VIEW, 0)
        def IF(self):
            return self.getToken(fugue_sqlParser.IF, 0)
        def EXISTS(self):
            return self.getToken(fugue_sqlParser.EXISTS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnsetTableProperties" ):
                return visitor.visitUnsetTableProperties(self)
            else:
                return visitor.visitChildren(self)


    class SetTableLocationContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def SET(self):
            return self.getToken(fugue_sqlParser.SET, 0)
        def locationSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.LocationSpecContext,0)

        def partitionSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.PartitionSpecContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetTableLocation" ):
                return visitor.visitSetTableLocation(self)
            else:
                return visitor.visitChildren(self)


    class DropTableColumnsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.columns = None # MultipartIdentifierListContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def DROP(self):
            return self.getToken(fugue_sqlParser.DROP, 0)
        def COLUMN(self):
            return self.getToken(fugue_sqlParser.COLUMN, 0)
        def COLUMNS(self):
            return self.getToken(fugue_sqlParser.COLUMNS, 0)
        def multipartIdentifierList(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierListContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropTableColumns" ):
                return visitor.visitDropTableColumns(self)
            else:
                return visitor.visitChildren(self)


    class ShowViewsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.pattern = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(fugue_sqlParser.SHOW, 0)
        def VIEWS(self):
            return self.getToken(fugue_sqlParser.VIEWS, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def FROM(self):
            return self.getToken(fugue_sqlParser.FROM, 0)
        def IN(self):
            return self.getToken(fugue_sqlParser.IN, 0)
        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)
        def LIKE(self):
            return self.getToken(fugue_sqlParser.LIKE, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowViews" ):
                return visitor.visitShowViews(self)
            else:
                return visitor.visitChildren(self)


    class ShowFunctionsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.pattern = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(fugue_sqlParser.SHOW, 0)
        def FUNCTIONS(self):
            return self.getToken(fugue_sqlParser.FUNCTIONS, 0)
        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def LIKE(self):
            return self.getToken(fugue_sqlParser.LIKE, 0)
        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowFunctions" ):
                return visitor.visitShowFunctions(self)
            else:
                return visitor.visitChildren(self)


    class CacheTableContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.options = None # TablePropertyListContext
            self.copyFrom(ctx)

        def CACHE(self):
            return self.getToken(fugue_sqlParser.CACHE, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def LAZY(self):
            return self.getToken(fugue_sqlParser.LAZY, 0)
        def OPTIONS(self):
            return self.getToken(fugue_sqlParser.OPTIONS, 0)
        def query(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryContext,0)

        def tablePropertyList(self):
            return self.getTypedRuleContext(fugue_sqlParser.TablePropertyListContext,0)

        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCacheTable" ):
                return visitor.visitCacheTable(self)
            else:
                return visitor.visitChildren(self)


    class AddTableColumnsContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.columns = None # QualifiedColTypeWithPositionListContext
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)
        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def ADD(self):
            return self.getToken(fugue_sqlParser.ADD, 0)
        def COLUMN(self):
            return self.getToken(fugue_sqlParser.COLUMN, 0)
        def COLUMNS(self):
            return self.getToken(fugue_sqlParser.COLUMNS, 0)
        def qualifiedColTypeWithPositionList(self):
            return self.getTypedRuleContext(fugue_sqlParser.QualifiedColTypeWithPositionListContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAddTableColumns" ):
                return visitor.visitAddTableColumns(self)
            else:
                return visitor.visitChildren(self)


    class SetTablePropertiesContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def SET(self):
            return self.getToken(fugue_sqlParser.SET, 0)
        def TBLPROPERTIES(self):
            return self.getToken(fugue_sqlParser.TBLPROPERTIES, 0)
        def tablePropertyList(self):
            return self.getTypedRuleContext(fugue_sqlParser.TablePropertyListContext,0)

        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def VIEW(self):
            return self.getToken(fugue_sqlParser.VIEW, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetTableProperties" ):
                return visitor.visitSetTableProperties(self)
            else:
                return visitor.visitChildren(self)



    def statement(self):

        localctx = fugue_sqlParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_statement)
        self._la = 0 # Token type
        try:
            self.state = 1861
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,235,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.StatementDefaultContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1156
                self.query()
                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.DmlStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1158
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==304:
                    self.state = 1157
                    self.ctes()


                self.state = 1160
                self.dmlStatementNoWith()
                pass

            elif la_ == 3:
                localctx = fugue_sqlParser.UseContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1161
                self.match(fugue_sqlParser.USE)
                self.state = 1163
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,131,self._ctx)
                if la_ == 1:
                    self.state = 1162
                    self.match(fugue_sqlParser.NAMESPACE)


                self.state = 1165
                self.multipartIdentifier()
                pass

            elif la_ == 4:
                localctx = fugue_sqlParser.CreateNamespaceContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1166
                self.match(fugue_sqlParser.CREATE)
                self.state = 1167
                self.theNamespace()
                self.state = 1171
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,132,self._ctx)
                if la_ == 1:
                    self.state = 1168
                    self.match(fugue_sqlParser.IF)
                    self.state = 1169
                    self.match(fugue_sqlParser.NOT)
                    self.state = 1170
                    self.match(fugue_sqlParser.EXISTS)


                self.state = 1173
                self.multipartIdentifier()
                self.state = 1181
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==87 or _la==180 or _la==304:
                    self.state = 1179
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [87]:
                        self.state = 1174
                        self.commentSpec()
                        pass
                    elif token in [180]:
                        self.state = 1175
                        self.locationSpec()
                        pass
                    elif token in [304]:
                        self.state = 1176
                        self.match(fugue_sqlParser.WITH)
                        self.state = 1177
                        _la = self._input.LA(1)
                        if not(_la==107 or _la==222):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1178
                        self.tablePropertyList()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1183
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 5:
                localctx = fugue_sqlParser.SetNamespacePropertiesContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1184
                self.match(fugue_sqlParser.ALTER)
                self.state = 1185
                self.theNamespace()
                self.state = 1186
                self.multipartIdentifier()
                self.state = 1187
                self.match(fugue_sqlParser.SET)
                self.state = 1188
                _la = self._input.LA(1)
                if not(_la==107 or _la==222):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1189
                self.tablePropertyList()
                pass

            elif la_ == 6:
                localctx = fugue_sqlParser.SetNamespaceLocationContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 1191
                self.match(fugue_sqlParser.ALTER)
                self.state = 1192
                self.theNamespace()
                self.state = 1193
                self.multipartIdentifier()
                self.state = 1194
                self.match(fugue_sqlParser.SET)
                self.state = 1195
                self.locationSpec()
                pass

            elif la_ == 7:
                localctx = fugue_sqlParser.DropNamespaceContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 1197
                self.match(fugue_sqlParser.DROP)
                self.state = 1198
                self.theNamespace()
                self.state = 1201
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,135,self._ctx)
                if la_ == 1:
                    self.state = 1199
                    self.match(fugue_sqlParser.IF)
                    self.state = 1200
                    self.match(fugue_sqlParser.EXISTS)


                self.state = 1203
                self.multipartIdentifier()
                self.state = 1205
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==74 or _la==236:
                    self.state = 1204
                    _la = self._input.LA(1)
                    if not(_la==74 or _la==236):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass

            elif la_ == 8:
                localctx = fugue_sqlParser.ShowNamespacesContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 1207
                self.match(fugue_sqlParser.SHOW)
                self.state = 1208
                _la = self._input.LA(1)
                if not(_la==105 or _la==192):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1211
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==142 or _la==155:
                    self.state = 1209
                    _la = self._input.LA(1)
                    if not(_la==142 or _la==155):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1210
                    self.multipartIdentifier()


                self.state = 1217
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==174 or _la==326:
                    self.state = 1214
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==174:
                        self.state = 1213
                        self.match(fugue_sqlParser.LIKE)


                    self.state = 1216
                    localctx.pattern = self.match(fugue_sqlParser.STRING)


                pass

            elif la_ == 9:
                localctx = fugue_sqlParser.CreateTableContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 1219
                self.createTableHeader()
                self.state = 1224
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==3:
                    self.state = 1220
                    self.match(fugue_sqlParser.T__2)
                    self.state = 1221
                    self.colTypeList()
                    self.state = 1222
                    self.match(fugue_sqlParser.T__3)


                self.state = 1226
                self.tableProvider()
                self.state = 1227
                self.createTableClauses()
                self.state = 1232
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la - 17)) & ~0x3f) == 0 and ((1 << (_la - 17)) & 141838610891267) != 0 or (((_la - 95)) & ~0x3f) == 0 and ((1 << (_la - 95)) & 140737496743937) != 0 or (((_la - 178)) & ~0x3f) == 0 and ((1 << (_la - 178)) & 20266198323167361) != 0 or (((_la - 248)) & ~0x3f) == 0 and ((1 << (_la - 248)) & 73183502536802305) != 0:
                    self.state = 1229
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==64:
                        self.state = 1228
                        self.match(fugue_sqlParser.AS)


                    self.state = 1231
                    self.query()


                pass

            elif la_ == 10:
                localctx = fugue_sqlParser.CreateHiveTableContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 1234
                self.createTableHeader()
                self.state = 1239
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==3:
                    self.state = 1235
                    self.match(fugue_sqlParser.T__2)
                    self.state = 1236
                    localctx.columns = self.colTypeList()
                    self.state = 1237
                    self.match(fugue_sqlParser.T__3)


                self.state = 1262
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==81 or _la==87 or _la==180 or _la==213 or (((_la - 244)) & ~0x3f) == 0 and ((1 << (_la - 244)) & 269500417) != 0:
                    self.state = 1260
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [87]:
                        self.state = 1241
                        self.commentSpec()
                        pass
                    elif token in [213]:
                        self.state = 1251
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,144,self._ctx)
                        if la_ == 1:
                            self.state = 1242
                            self.match(fugue_sqlParser.PARTITIONED)
                            self.state = 1243
                            self.match(fugue_sqlParser.BY)
                            self.state = 1244
                            self.match(fugue_sqlParser.T__2)
                            self.state = 1245
                            localctx.partitionColumns = self.colTypeList()
                            self.state = 1246
                            self.match(fugue_sqlParser.T__3)
                            pass

                        elif la_ == 2:
                            self.state = 1248
                            self.match(fugue_sqlParser.PARTITIONED)
                            self.state = 1249
                            self.match(fugue_sqlParser.BY)
                            self.state = 1250
                            localctx.partitionColumnNames = self.identifierList()
                            pass


                        pass
                    elif token in [81]:
                        self.state = 1253
                        self.bucketSpec()
                        pass
                    elif token in [258]:
                        self.state = 1254
                        self.skewSpec()
                        pass
                    elif token in [244]:
                        self.state = 1255
                        self.rowFormat()
                        pass
                    elif token in [264]:
                        self.state = 1256
                        self.createFileFormat()
                        pass
                    elif token in [180]:
                        self.state = 1257
                        self.locationSpec()
                        pass
                    elif token in [272]:
                        self.state = 1258
                        self.match(fugue_sqlParser.TBLPROPERTIES)
                        self.state = 1259
                        localctx.tableProps = self.tablePropertyList()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1264
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1269
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la - 17)) & ~0x3f) == 0 and ((1 << (_la - 17)) & 141838610891267) != 0 or (((_la - 95)) & ~0x3f) == 0 and ((1 << (_la - 95)) & 140737496743937) != 0 or (((_la - 178)) & ~0x3f) == 0 and ((1 << (_la - 178)) & 20266198323167361) != 0 or (((_la - 248)) & ~0x3f) == 0 and ((1 << (_la - 248)) & 73183502536802305) != 0:
                    self.state = 1266
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==64:
                        self.state = 1265
                        self.match(fugue_sqlParser.AS)


                    self.state = 1268
                    self.query()


                pass

            elif la_ == 11:
                localctx = fugue_sqlParser.CreateTableLikeContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 1271
                self.match(fugue_sqlParser.CREATE)
                self.state = 1272
                self.match(fugue_sqlParser.TABLE)
                self.state = 1276
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,149,self._ctx)
                if la_ == 1:
                    self.state = 1273
                    self.match(fugue_sqlParser.IF)
                    self.state = 1274
                    self.match(fugue_sqlParser.NOT)
                    self.state = 1275
                    self.match(fugue_sqlParser.EXISTS)


                self.state = 1278
                localctx.target = self.tableIdentifier()
                self.state = 1279
                self.match(fugue_sqlParser.LIKE)
                self.state = 1280
                localctx.source = self.tableIdentifier()
                self.state = 1289
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==180 or (((_la - 244)) & ~0x3f) == 0 and ((1 << (_la - 244)) & 9007199524225025) != 0:
                    self.state = 1287
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [297]:
                        self.state = 1281
                        self.tableProvider()
                        pass
                    elif token in [244]:
                        self.state = 1282
                        self.rowFormat()
                        pass
                    elif token in [264]:
                        self.state = 1283
                        self.createFileFormat()
                        pass
                    elif token in [180]:
                        self.state = 1284
                        self.locationSpec()
                        pass
                    elif token in [272]:
                        self.state = 1285
                        self.match(fugue_sqlParser.TBLPROPERTIES)
                        self.state = 1286
                        localctx.tableProps = self.tablePropertyList()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1291
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 12:
                localctx = fugue_sqlParser.ReplaceTableContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 1292
                self.replaceTableHeader()
                self.state = 1297
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==3:
                    self.state = 1293
                    self.match(fugue_sqlParser.T__2)
                    self.state = 1294
                    self.colTypeList()
                    self.state = 1295
                    self.match(fugue_sqlParser.T__3)


                self.state = 1299
                self.tableProvider()
                self.state = 1300
                self.createTableClauses()
                self.state = 1305
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la - 17)) & ~0x3f) == 0 and ((1 << (_la - 17)) & 141838610891267) != 0 or (((_la - 95)) & ~0x3f) == 0 and ((1 << (_la - 95)) & 140737496743937) != 0 or (((_la - 178)) & ~0x3f) == 0 and ((1 << (_la - 178)) & 20266198323167361) != 0 or (((_la - 248)) & ~0x3f) == 0 and ((1 << (_la - 248)) & 73183502536802305) != 0:
                    self.state = 1302
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==64:
                        self.state = 1301
                        self.match(fugue_sqlParser.AS)


                    self.state = 1304
                    self.query()


                pass

            elif la_ == 13:
                localctx = fugue_sqlParser.AnalyzeContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 1307
                self.match(fugue_sqlParser.ANALYZE)
                self.state = 1308
                self.match(fugue_sqlParser.TABLE)
                self.state = 1309
                self.multipartIdentifier()
                self.state = 1311
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==212:
                    self.state = 1310
                    self.partitionSpec()


                self.state = 1313
                self.match(fugue_sqlParser.COMPUTE)
                self.state = 1314
                self.match(fugue_sqlParser.STATISTICS)
                self.state = 1322
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,156,self._ctx)
                if la_ == 1:
                    self.state = 1315
                    self.identifier()

                elif la_ == 2:
                    self.state = 1316
                    self.match(fugue_sqlParser.FOR)
                    self.state = 1317
                    self.match(fugue_sqlParser.COLUMNS)
                    self.state = 1318
                    self.identifierSeq()

                elif la_ == 3:
                    self.state = 1319
                    self.match(fugue_sqlParser.FOR)
                    self.state = 1320
                    self.match(fugue_sqlParser.ALL)
                    self.state = 1321
                    self.match(fugue_sqlParser.COLUMNS)


                pass

            elif la_ == 14:
                localctx = fugue_sqlParser.AddTableColumnsContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 1324
                self.match(fugue_sqlParser.ALTER)
                self.state = 1325
                self.match(fugue_sqlParser.TABLE)
                self.state = 1326
                self.multipartIdentifier()
                self.state = 1327
                self.match(fugue_sqlParser.ADD)
                self.state = 1328
                _la = self._input.LA(1)
                if not(_la==85 or _la==86):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1329
                localctx.columns = self.qualifiedColTypeWithPositionList()
                pass

            elif la_ == 15:
                localctx = fugue_sqlParser.AddTableColumnsContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 1331
                self.match(fugue_sqlParser.ALTER)
                self.state = 1332
                self.match(fugue_sqlParser.TABLE)
                self.state = 1333
                self.multipartIdentifier()
                self.state = 1334
                self.match(fugue_sqlParser.ADD)
                self.state = 1335
                _la = self._input.LA(1)
                if not(_la==85 or _la==86):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1336
                self.match(fugue_sqlParser.T__2)
                self.state = 1337
                localctx.columns = self.qualifiedColTypeWithPositionList()
                self.state = 1338
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 16:
                localctx = fugue_sqlParser.RenameTableColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 1340
                self.match(fugue_sqlParser.ALTER)
                self.state = 1341
                self.match(fugue_sqlParser.TABLE)
                self.state = 1342
                localctx.table = self.multipartIdentifier()
                self.state = 1343
                self.match(fugue_sqlParser.RENAME)
                self.state = 1344
                self.match(fugue_sqlParser.COLUMN)
                self.state = 1345
                localctx.ifrom = self.multipartIdentifier()
                self.state = 1346
                self.match(fugue_sqlParser.TO)
                self.state = 1347
                localctx.to = self.errorCapturingIdentifier()
                pass

            elif la_ == 17:
                localctx = fugue_sqlParser.DropTableColumnsContext(self, localctx)
                self.enterOuterAlt(localctx, 17)
                self.state = 1349
                self.match(fugue_sqlParser.ALTER)
                self.state = 1350
                self.match(fugue_sqlParser.TABLE)
                self.state = 1351
                self.multipartIdentifier()
                self.state = 1352
                self.match(fugue_sqlParser.DROP)
                self.state = 1353
                _la = self._input.LA(1)
                if not(_la==85 or _la==86):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1354
                self.match(fugue_sqlParser.T__2)
                self.state = 1355
                localctx.columns = self.multipartIdentifierList()
                self.state = 1356
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 18:
                localctx = fugue_sqlParser.DropTableColumnsContext(self, localctx)
                self.enterOuterAlt(localctx, 18)
                self.state = 1358
                self.match(fugue_sqlParser.ALTER)
                self.state = 1359
                self.match(fugue_sqlParser.TABLE)
                self.state = 1360
                self.multipartIdentifier()
                self.state = 1361
                self.match(fugue_sqlParser.DROP)
                self.state = 1362
                _la = self._input.LA(1)
                if not(_la==85 or _la==86):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1363
                localctx.columns = self.multipartIdentifierList()
                pass

            elif la_ == 19:
                localctx = fugue_sqlParser.RenameTableContext(self, localctx)
                self.enterOuterAlt(localctx, 19)
                self.state = 1365
                self.match(fugue_sqlParser.ALTER)
                self.state = 1366
                _la = self._input.LA(1)
                if not(_la==269 or _la==299):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1367
                localctx.ifrom = self.multipartIdentifier()
                self.state = 1368
                self.match(fugue_sqlParser.RENAME)
                self.state = 1369
                self.match(fugue_sqlParser.TO)
                self.state = 1370
                localctx.to = self.multipartIdentifier()
                pass

            elif la_ == 20:
                localctx = fugue_sqlParser.SetTablePropertiesContext(self, localctx)
                self.enterOuterAlt(localctx, 20)
                self.state = 1372
                self.match(fugue_sqlParser.ALTER)
                self.state = 1373
                _la = self._input.LA(1)
                if not(_la==269 or _la==299):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1374
                self.multipartIdentifier()
                self.state = 1375
                self.match(fugue_sqlParser.SET)
                self.state = 1376
                self.match(fugue_sqlParser.TBLPROPERTIES)
                self.state = 1377
                self.tablePropertyList()
                pass

            elif la_ == 21:
                localctx = fugue_sqlParser.UnsetTablePropertiesContext(self, localctx)
                self.enterOuterAlt(localctx, 21)
                self.state = 1379
                self.match(fugue_sqlParser.ALTER)
                self.state = 1380
                _la = self._input.LA(1)
                if not(_la==269 or _la==299):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1381
                self.multipartIdentifier()
                self.state = 1382
                self.match(fugue_sqlParser.UNSET)
                self.state = 1383
                self.match(fugue_sqlParser.TBLPROPERTIES)
                self.state = 1386
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==152:
                    self.state = 1384
                    self.match(fugue_sqlParser.IF)
                    self.state = 1385
                    self.match(fugue_sqlParser.EXISTS)


                self.state = 1388
                self.tablePropertyList()
                pass

            elif la_ == 22:
                localctx = fugue_sqlParser.AlterTableAlterColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 22)
                self.state = 1390
                self.match(fugue_sqlParser.ALTER)
                self.state = 1391
                self.match(fugue_sqlParser.TABLE)
                self.state = 1392
                localctx.table = self.multipartIdentifier()
                self.state = 1393
                _la = self._input.LA(1)
                if not(_la==57 or _la==77):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1395
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,158,self._ctx)
                if la_ == 1:
                    self.state = 1394
                    self.match(fugue_sqlParser.COLUMN)


                self.state = 1397
                localctx.column = self.multipartIdentifier()
                self.state = 1399
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==55 or (((_la - 87)) & ~0x3f) == 0 and ((1 << (_la - 87)) & 562952100904961) != 0 or _la==254 or _la==285:
                    self.state = 1398
                    self.alterColumnAction()


                pass

            elif la_ == 23:
                localctx = fugue_sqlParser.HiveChangeColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 23)
                self.state = 1401
                self.match(fugue_sqlParser.ALTER)
                self.state = 1402
                self.match(fugue_sqlParser.TABLE)
                self.state = 1403
                localctx.table = self.multipartIdentifier()
                self.state = 1405
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==212:
                    self.state = 1404
                    self.partitionSpec()


                self.state = 1407
                self.match(fugue_sqlParser.CHANGE)
                self.state = 1409
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,161,self._ctx)
                if la_ == 1:
                    self.state = 1408
                    self.match(fugue_sqlParser.COLUMN)


                self.state = 1411
                localctx.colName = self.multipartIdentifier()
                self.state = 1412
                self.colType()
                self.state = 1414
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==55 or _la==136:
                    self.state = 1413
                    self.colPosition()


                pass

            elif la_ == 24:
                localctx = fugue_sqlParser.HiveReplaceColumnsContext(self, localctx)
                self.enterOuterAlt(localctx, 24)
                self.state = 1416
                self.match(fugue_sqlParser.ALTER)
                self.state = 1417
                self.match(fugue_sqlParser.TABLE)
                self.state = 1418
                localctx.table = self.multipartIdentifier()
                self.state = 1420
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==212:
                    self.state = 1419
                    self.partitionSpec()


                self.state = 1422
                self.match(fugue_sqlParser.REPLACE)
                self.state = 1423
                self.match(fugue_sqlParser.COLUMNS)
                self.state = 1424
                self.match(fugue_sqlParser.T__2)
                self.state = 1425
                localctx.columns = self.qualifiedColTypeWithPositionList()
                self.state = 1426
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 25:
                localctx = fugue_sqlParser.SetTableSerDeContext(self, localctx)
                self.enterOuterAlt(localctx, 25)
                self.state = 1428
                self.match(fugue_sqlParser.ALTER)
                self.state = 1429
                self.match(fugue_sqlParser.TABLE)
                self.state = 1430
                self.multipartIdentifier()
                self.state = 1432
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==212:
                    self.state = 1431
                    self.partitionSpec()


                self.state = 1434
                self.match(fugue_sqlParser.SET)
                self.state = 1435
                self.match(fugue_sqlParser.SERDE)
                self.state = 1436
                self.match(fugue_sqlParser.STRING)
                self.state = 1440
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==304:
                    self.state = 1437
                    self.match(fugue_sqlParser.WITH)
                    self.state = 1438
                    self.match(fugue_sqlParser.SERDEPROPERTIES)
                    self.state = 1439
                    self.tablePropertyList()


                pass

            elif la_ == 26:
                localctx = fugue_sqlParser.SetTableSerDeContext(self, localctx)
                self.enterOuterAlt(localctx, 26)
                self.state = 1442
                self.match(fugue_sqlParser.ALTER)
                self.state = 1443
                self.match(fugue_sqlParser.TABLE)
                self.state = 1444
                self.multipartIdentifier()
                self.state = 1446
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==212:
                    self.state = 1445
                    self.partitionSpec()


                self.state = 1448
                self.match(fugue_sqlParser.SET)
                self.state = 1449
                self.match(fugue_sqlParser.SERDEPROPERTIES)
                self.state = 1450
                self.tablePropertyList()
                pass

            elif la_ == 27:
                localctx = fugue_sqlParser.AddTablePartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 27)
                self.state = 1452
                self.match(fugue_sqlParser.ALTER)
                self.state = 1453
                _la = self._input.LA(1)
                if not(_la==269 or _la==299):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1454
                self.multipartIdentifier()
                self.state = 1455
                self.match(fugue_sqlParser.ADD)
                self.state = 1459
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==152:
                    self.state = 1456
                    self.match(fugue_sqlParser.IF)
                    self.state = 1457
                    self.match(fugue_sqlParser.NOT)
                    self.state = 1458
                    self.match(fugue_sqlParser.EXISTS)


                self.state = 1462 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1461
                    self.partitionSpecLocation()
                    self.state = 1464 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==212):
                        break

                pass

            elif la_ == 28:
                localctx = fugue_sqlParser.RenameTablePartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 28)
                self.state = 1466
                self.match(fugue_sqlParser.ALTER)
                self.state = 1467
                self.match(fugue_sqlParser.TABLE)
                self.state = 1468
                self.multipartIdentifier()
                self.state = 1469
                localctx.ifrom = self.partitionSpec()
                self.state = 1470
                self.match(fugue_sqlParser.RENAME)
                self.state = 1471
                self.match(fugue_sqlParser.TO)
                self.state = 1472
                localctx.to = self.partitionSpec()
                pass

            elif la_ == 29:
                localctx = fugue_sqlParser.DropTablePartitionsContext(self, localctx)
                self.enterOuterAlt(localctx, 29)
                self.state = 1474
                self.match(fugue_sqlParser.ALTER)
                self.state = 1475
                _la = self._input.LA(1)
                if not(_la==269 or _la==299):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1476
                self.multipartIdentifier()
                self.state = 1477
                self.match(fugue_sqlParser.DROP)
                self.state = 1480
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==152:
                    self.state = 1478
                    self.match(fugue_sqlParser.IF)
                    self.state = 1479
                    self.match(fugue_sqlParser.EXISTS)


                self.state = 1482
                self.partitionSpec()
                self.state = 1487
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1:
                    self.state = 1483
                    self.match(fugue_sqlParser.T__0)
                    self.state = 1484
                    self.partitionSpec()
                    self.state = 1489
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1491
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==223:
                    self.state = 1490
                    self.match(fugue_sqlParser.PURGE)


                pass

            elif la_ == 30:
                localctx = fugue_sqlParser.SetTableLocationContext(self, localctx)
                self.enterOuterAlt(localctx, 30)
                self.state = 1493
                self.match(fugue_sqlParser.ALTER)
                self.state = 1494
                self.match(fugue_sqlParser.TABLE)
                self.state = 1495
                self.multipartIdentifier()
                self.state = 1497
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==212:
                    self.state = 1496
                    self.partitionSpec()


                self.state = 1499
                self.match(fugue_sqlParser.SET)
                self.state = 1500
                self.locationSpec()
                pass

            elif la_ == 31:
                localctx = fugue_sqlParser.RecoverPartitionsContext(self, localctx)
                self.enterOuterAlt(localctx, 31)
                self.state = 1502
                self.match(fugue_sqlParser.ALTER)
                self.state = 1503
                self.match(fugue_sqlParser.TABLE)
                self.state = 1504
                self.multipartIdentifier()
                self.state = 1505
                self.match(fugue_sqlParser.RECOVER)
                self.state = 1506
                self.match(fugue_sqlParser.PARTITIONS)
                pass

            elif la_ == 32:
                localctx = fugue_sqlParser.DropTableContext(self, localctx)
                self.enterOuterAlt(localctx, 32)
                self.state = 1508
                self.match(fugue_sqlParser.DROP)
                self.state = 1509
                self.match(fugue_sqlParser.TABLE)
                self.state = 1512
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,173,self._ctx)
                if la_ == 1:
                    self.state = 1510
                    self.match(fugue_sqlParser.IF)
                    self.state = 1511
                    self.match(fugue_sqlParser.EXISTS)


                self.state = 1514
                self.multipartIdentifier()
                self.state = 1516
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==223:
                    self.state = 1515
                    self.match(fugue_sqlParser.PURGE)


                pass

            elif la_ == 33:
                localctx = fugue_sqlParser.DropViewContext(self, localctx)
                self.enterOuterAlt(localctx, 33)
                self.state = 1518
                self.match(fugue_sqlParser.DROP)
                self.state = 1519
                self.match(fugue_sqlParser.VIEW)
                self.state = 1522
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,175,self._ctx)
                if la_ == 1:
                    self.state = 1520
                    self.match(fugue_sqlParser.IF)
                    self.state = 1521
                    self.match(fugue_sqlParser.EXISTS)


                self.state = 1524
                self.multipartIdentifier()
                pass

            elif la_ == 34:
                localctx = fugue_sqlParser.CreateViewContext(self, localctx)
                self.enterOuterAlt(localctx, 34)
                self.state = 1525
                self.match(fugue_sqlParser.CREATE)
                self.state = 1528
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==203:
                    self.state = 1526
                    self.match(fugue_sqlParser.OR)
                    self.state = 1527
                    self.match(fugue_sqlParser.REPLACE)


                self.state = 1534
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==146 or _la==273:
                    self.state = 1531
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==146:
                        self.state = 1530
                        self.match(fugue_sqlParser.GLOBAL)


                    self.state = 1533
                    self.match(fugue_sqlParser.TEMPORARY)


                self.state = 1536
                self.match(fugue_sqlParser.VIEW)
                self.state = 1540
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,179,self._ctx)
                if la_ == 1:
                    self.state = 1537
                    self.match(fugue_sqlParser.IF)
                    self.state = 1538
                    self.match(fugue_sqlParser.NOT)
                    self.state = 1539
                    self.match(fugue_sqlParser.EXISTS)


                self.state = 1542
                self.multipartIdentifier()
                self.state = 1544
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==3:
                    self.state = 1543
                    self.identifierCommentList()


                self.state = 1554
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==87 or _la==213 or _la==272:
                    self.state = 1552
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [87]:
                        self.state = 1546
                        self.commentSpec()
                        pass
                    elif token in [213]:
                        self.state = 1547
                        self.match(fugue_sqlParser.PARTITIONED)
                        self.state = 1548
                        self.match(fugue_sqlParser.ON)
                        self.state = 1549
                        self.identifierList()
                        pass
                    elif token in [272]:
                        self.state = 1550
                        self.match(fugue_sqlParser.TBLPROPERTIES)
                        self.state = 1551
                        self.tablePropertyList()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 1556
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1557
                self.match(fugue_sqlParser.AS)
                self.state = 1558
                self.query()
                pass

            elif la_ == 35:
                localctx = fugue_sqlParser.CreateTempViewUsingContext(self, localctx)
                self.enterOuterAlt(localctx, 35)
                self.state = 1560
                self.match(fugue_sqlParser.CREATE)
                self.state = 1563
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==203:
                    self.state = 1561
                    self.match(fugue_sqlParser.OR)
                    self.state = 1562
                    self.match(fugue_sqlParser.REPLACE)


                self.state = 1566
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==146:
                    self.state = 1565
                    self.match(fugue_sqlParser.GLOBAL)


                self.state = 1568
                self.match(fugue_sqlParser.TEMPORARY)
                self.state = 1569
                self.match(fugue_sqlParser.VIEW)
                self.state = 1570
                self.tableIdentifier()
                self.state = 1575
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==3:
                    self.state = 1571
                    self.match(fugue_sqlParser.T__2)
                    self.state = 1572
                    self.colTypeList()
                    self.state = 1573
                    self.match(fugue_sqlParser.T__3)


                self.state = 1577
                self.tableProvider()
                self.state = 1580
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==202:
                    self.state = 1578
                    self.match(fugue_sqlParser.OPTIONS)
                    self.state = 1579
                    self.tablePropertyList()


                pass

            elif la_ == 36:
                localctx = fugue_sqlParser.AlterViewQueryContext(self, localctx)
                self.enterOuterAlt(localctx, 36)
                self.state = 1582
                self.match(fugue_sqlParser.ALTER)
                self.state = 1583
                self.match(fugue_sqlParser.VIEW)
                self.state = 1584
                self.multipartIdentifier()
                self.state = 1586
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==64:
                    self.state = 1585
                    self.match(fugue_sqlParser.AS)


                self.state = 1588
                self.query()
                pass

            elif la_ == 37:
                localctx = fugue_sqlParser.CreateFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 37)
                self.state = 1590
                self.match(fugue_sqlParser.CREATE)
                self.state = 1593
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==203:
                    self.state = 1591
                    self.match(fugue_sqlParser.OR)
                    self.state = 1592
                    self.match(fugue_sqlParser.REPLACE)


                self.state = 1596
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==273:
                    self.state = 1595
                    self.match(fugue_sqlParser.TEMPORARY)


                self.state = 1598
                self.match(fugue_sqlParser.FUNCTION)
                self.state = 1602
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,190,self._ctx)
                if la_ == 1:
                    self.state = 1599
                    self.match(fugue_sqlParser.IF)
                    self.state = 1600
                    self.match(fugue_sqlParser.NOT)
                    self.state = 1601
                    self.match(fugue_sqlParser.EXISTS)


                self.state = 1604
                self.multipartIdentifier()
                self.state = 1605
                self.match(fugue_sqlParser.AS)
                self.state = 1606
                localctx.className = self.match(fugue_sqlParser.STRING)
                self.state = 1616
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==297:
                    self.state = 1607
                    self.match(fugue_sqlParser.USING)
                    self.state = 1608
                    self.resource()
                    self.state = 1613
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1:
                        self.state = 1609
                        self.match(fugue_sqlParser.T__0)
                        self.state = 1610
                        self.resource()
                        self.state = 1615
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                pass

            elif la_ == 38:
                localctx = fugue_sqlParser.DropFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 38)
                self.state = 1618
                self.match(fugue_sqlParser.DROP)
                self.state = 1620
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==273:
                    self.state = 1619
                    self.match(fugue_sqlParser.TEMPORARY)


                self.state = 1622
                self.match(fugue_sqlParser.FUNCTION)
                self.state = 1625
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,194,self._ctx)
                if la_ == 1:
                    self.state = 1623
                    self.match(fugue_sqlParser.IF)
                    self.state = 1624
                    self.match(fugue_sqlParser.EXISTS)


                self.state = 1627
                self.multipartIdentifier()
                pass

            elif la_ == 39:
                localctx = fugue_sqlParser.ExplainContext(self, localctx)
                self.enterOuterAlt(localctx, 39)
                self.state = 1628
                self.match(fugue_sqlParser.EXPLAIN)
                self.state = 1630
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la - 82)) & ~0x3f) == 0 and ((1 << (_la - 82)) & 576531121047605249) != 0 or _la==183:
                    self.state = 1629
                    _la = self._input.LA(1)
                    if not((((_la - 82)) & ~0x3f) == 0 and ((1 << (_la - 82)) & 576531121047605249) != 0 or _la==183):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1632
                self.statement()
                pass

            elif la_ == 40:
                localctx = fugue_sqlParser.ShowTablesContext(self, localctx)
                self.enterOuterAlt(localctx, 40)
                self.state = 1633
                self.match(fugue_sqlParser.SHOW)
                self.state = 1634
                self.match(fugue_sqlParser.TABLES)
                self.state = 1637
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==142 or _la==155:
                    self.state = 1635
                    _la = self._input.LA(1)
                    if not(_la==142 or _la==155):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1636
                    self.multipartIdentifier()


                self.state = 1643
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==174 or _la==326:
                    self.state = 1640
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==174:
                        self.state = 1639
                        self.match(fugue_sqlParser.LIKE)


                    self.state = 1642
                    localctx.pattern = self.match(fugue_sqlParser.STRING)


                pass

            elif la_ == 41:
                localctx = fugue_sqlParser.ShowTableContext(self, localctx)
                self.enterOuterAlt(localctx, 41)
                self.state = 1645
                self.match(fugue_sqlParser.SHOW)
                self.state = 1646
                self.match(fugue_sqlParser.TABLE)
                self.state = 1647
                self.match(fugue_sqlParser.EXTENDED)
                self.state = 1650
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==142 or _la==155:
                    self.state = 1648
                    _la = self._input.LA(1)
                    if not(_la==142 or _la==155):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1649
                    localctx.ns = self.multipartIdentifier()


                self.state = 1652
                self.match(fugue_sqlParser.LIKE)
                self.state = 1653
                localctx.pattern = self.match(fugue_sqlParser.STRING)
                self.state = 1655
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==212:
                    self.state = 1654
                    self.partitionSpec()


                pass

            elif la_ == 42:
                localctx = fugue_sqlParser.ShowTblPropertiesContext(self, localctx)
                self.enterOuterAlt(localctx, 42)
                self.state = 1657
                self.match(fugue_sqlParser.SHOW)
                self.state = 1658
                self.match(fugue_sqlParser.TBLPROPERTIES)
                self.state = 1659
                localctx.table = self.multipartIdentifier()
                self.state = 1664
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==3:
                    self.state = 1660
                    self.match(fugue_sqlParser.T__2)
                    self.state = 1661
                    localctx.key = self.tablePropertyKey()
                    self.state = 1662
                    self.match(fugue_sqlParser.T__3)


                pass

            elif la_ == 43:
                localctx = fugue_sqlParser.ShowColumnsContext(self, localctx)
                self.enterOuterAlt(localctx, 43)
                self.state = 1666
                self.match(fugue_sqlParser.SHOW)
                self.state = 1667
                self.match(fugue_sqlParser.COLUMNS)
                self.state = 1668
                _la = self._input.LA(1)
                if not(_la==142 or _la==155):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1669
                localctx.table = self.multipartIdentifier()
                self.state = 1672
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==142 or _la==155:
                    self.state = 1670
                    _la = self._input.LA(1)
                    if not(_la==142 or _la==155):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1671
                    localctx.ns = self.multipartIdentifier()


                pass

            elif la_ == 44:
                localctx = fugue_sqlParser.ShowViewsContext(self, localctx)
                self.enterOuterAlt(localctx, 44)
                self.state = 1674
                self.match(fugue_sqlParser.SHOW)
                self.state = 1675
                self.match(fugue_sqlParser.VIEWS)
                self.state = 1678
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==142 or _la==155:
                    self.state = 1676
                    _la = self._input.LA(1)
                    if not(_la==142 or _la==155):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1677
                    self.multipartIdentifier()


                self.state = 1684
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==174 or _la==326:
                    self.state = 1681
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==174:
                        self.state = 1680
                        self.match(fugue_sqlParser.LIKE)


                    self.state = 1683
                    localctx.pattern = self.match(fugue_sqlParser.STRING)


                pass

            elif la_ == 45:
                localctx = fugue_sqlParser.ShowPartitionsContext(self, localctx)
                self.enterOuterAlt(localctx, 45)
                self.state = 1686
                self.match(fugue_sqlParser.SHOW)
                self.state = 1687
                self.match(fugue_sqlParser.PARTITIONS)
                self.state = 1688
                self.multipartIdentifier()
                self.state = 1690
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==212:
                    self.state = 1689
                    self.partitionSpec()


                pass

            elif la_ == 46:
                localctx = fugue_sqlParser.ShowFunctionsContext(self, localctx)
                self.enterOuterAlt(localctx, 46)
                self.state = 1692
                self.match(fugue_sqlParser.SHOW)
                self.state = 1694
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,207,self._ctx)
                if la_ == 1:
                    self.state = 1693
                    self.identifier()


                self.state = 1696
                self.match(fugue_sqlParser.FUNCTIONS)
                self.state = 1704
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la - 54)) & ~0x3f) == 0 and ((1 << (_la - 54)) & -1) != 0 or (((_la - 118)) & ~0x3f) == 0 and ((1 << (_la - 118)) & -1) != 0 or (((_la - 182)) & ~0x3f) == 0 and ((1 << (_la - 182)) & -1) != 0 or (((_la - 246)) & ~0x3f) == 0 and ((1 << (_la - 246)) & 1152921504606846975) != 0 or (((_la - 320)) & ~0x3f) == 0 and ((1 << (_la - 320)) & 98369) != 0:
                    self.state = 1698
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,208,self._ctx)
                    if la_ == 1:
                        self.state = 1697
                        self.match(fugue_sqlParser.LIKE)


                    self.state = 1702
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 320, 335, 336]:
                        self.state = 1700
                        self.multipartIdentifier()
                        pass
                    elif token in [326]:
                        self.state = 1701
                        localctx.pattern = self.match(fugue_sqlParser.STRING)
                        pass
                    else:
                        raise NoViableAltException(self)



                pass

            elif la_ == 47:
                localctx = fugue_sqlParser.ShowCreateTableContext(self, localctx)
                self.enterOuterAlt(localctx, 47)
                self.state = 1706
                self.match(fugue_sqlParser.SHOW)
                self.state = 1707
                self.match(fugue_sqlParser.CREATE)
                self.state = 1708
                self.match(fugue_sqlParser.TABLE)
                self.state = 1709
                self.multipartIdentifier()
                self.state = 1712
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==64:
                    self.state = 1710
                    self.match(fugue_sqlParser.AS)
                    self.state = 1711
                    self.match(fugue_sqlParser.SERDE)


                pass

            elif la_ == 48:
                localctx = fugue_sqlParser.ShowCurrentNamespaceContext(self, localctx)
                self.enterOuterAlt(localctx, 48)
                self.state = 1714
                self.match(fugue_sqlParser.SHOW)
                self.state = 1715
                self.match(fugue_sqlParser.CURRENT)
                self.state = 1716
                self.match(fugue_sqlParser.NAMESPACE)
                pass

            elif la_ == 49:
                localctx = fugue_sqlParser.DescribeFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 49)
                self.state = 1717
                _la = self._input.LA(1)
                if not(_la==111 or _la==112):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1718
                self.match(fugue_sqlParser.FUNCTION)
                self.state = 1720
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,212,self._ctx)
                if la_ == 1:
                    self.state = 1719
                    self.match(fugue_sqlParser.EXTENDED)


                self.state = 1722
                self.describeFuncName()
                pass

            elif la_ == 50:
                localctx = fugue_sqlParser.DescribeNamespaceContext(self, localctx)
                self.enterOuterAlt(localctx, 50)
                self.state = 1723
                _la = self._input.LA(1)
                if not(_la==111 or _la==112):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1724
                self.theNamespace()
                self.state = 1726
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,213,self._ctx)
                if la_ == 1:
                    self.state = 1725
                    self.match(fugue_sqlParser.EXTENDED)


                self.state = 1728
                self.multipartIdentifier()
                pass

            elif la_ == 51:
                localctx = fugue_sqlParser.DescribeRelationContext(self, localctx)
                self.enterOuterAlt(localctx, 51)
                self.state = 1730
                _la = self._input.LA(1)
                if not(_la==111 or _la==112):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1732
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,214,self._ctx)
                if la_ == 1:
                    self.state = 1731
                    self.match(fugue_sqlParser.TABLE)


                self.state = 1735
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,215,self._ctx)
                if la_ == 1:
                    self.state = 1734
                    localctx.option = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==128 or _la==141):
                        localctx.option = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1737
                self.multipartIdentifier()
                self.state = 1739
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,216,self._ctx)
                if la_ == 1:
                    self.state = 1738
                    self.partitionSpec()


                self.state = 1742
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la - 54)) & ~0x3f) == 0 and ((1 << (_la - 54)) & -1) != 0 or (((_la - 118)) & ~0x3f) == 0 and ((1 << (_la - 118)) & -1) != 0 or (((_la - 182)) & ~0x3f) == 0 and ((1 << (_la - 182)) & -1) != 0 or (((_la - 246)) & ~0x3f) == 0 and ((1 << (_la - 246)) & 1152921504606846975) != 0 or (((_la - 320)) & ~0x3f) == 0 and ((1 << (_la - 320)) & 98305) != 0:
                    self.state = 1741
                    self.describeColName()


                pass

            elif la_ == 52:
                localctx = fugue_sqlParser.DescribeQueryContext(self, localctx)
                self.enterOuterAlt(localctx, 52)
                self.state = 1744
                _la = self._input.LA(1)
                if not(_la==111 or _la==112):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1746
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==224:
                    self.state = 1745
                    self.match(fugue_sqlParser.QUERY)


                self.state = 1748
                self.query()
                pass

            elif la_ == 53:
                localctx = fugue_sqlParser.CommentNamespaceContext(self, localctx)
                self.enterOuterAlt(localctx, 53)
                self.state = 1749
                self.match(fugue_sqlParser.COMMENT)
                self.state = 1750
                self.match(fugue_sqlParser.ON)
                self.state = 1751
                self.theNamespace()
                self.state = 1752
                self.multipartIdentifier()
                self.state = 1753
                self.match(fugue_sqlParser.IS)
                self.state = 1754
                localctx.comment = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==196 or _la==326):
                    localctx.comment = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 54:
                localctx = fugue_sqlParser.CommentTableContext(self, localctx)
                self.enterOuterAlt(localctx, 54)
                self.state = 1756
                self.match(fugue_sqlParser.COMMENT)
                self.state = 1757
                self.match(fugue_sqlParser.ON)
                self.state = 1758
                self.match(fugue_sqlParser.TABLE)
                self.state = 1759
                self.multipartIdentifier()
                self.state = 1760
                self.match(fugue_sqlParser.IS)
                self.state = 1761
                localctx.comment = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==196 or _la==326):
                    localctx.comment = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 55:
                localctx = fugue_sqlParser.RefreshTableContext(self, localctx)
                self.enterOuterAlt(localctx, 55)
                self.state = 1763
                self.match(fugue_sqlParser.REFRESH)
                self.state = 1764
                self.match(fugue_sqlParser.TABLE)
                self.state = 1765
                self.multipartIdentifier()
                pass

            elif la_ == 56:
                localctx = fugue_sqlParser.RefreshResourceContext(self, localctx)
                self.enterOuterAlt(localctx, 56)
                self.state = 1766
                self.match(fugue_sqlParser.REFRESH)
                self.state = 1774
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,220,self._ctx)
                if la_ == 1:
                    self.state = 1767
                    self.match(fugue_sqlParser.STRING)
                    pass

                elif la_ == 2:
                    self.state = 1771
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,219,self._ctx)
                    while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1+1:
                            self.state = 1768
                            self.matchWildcard() 
                        self.state = 1773
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,219,self._ctx)

                    pass


                pass

            elif la_ == 57:
                localctx = fugue_sqlParser.CacheTableContext(self, localctx)
                self.enterOuterAlt(localctx, 57)
                self.state = 1776
                self.match(fugue_sqlParser.CACHE)
                self.state = 1778
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==171:
                    self.state = 1777
                    self.match(fugue_sqlParser.LAZY)


                self.state = 1780
                self.match(fugue_sqlParser.TABLE)
                self.state = 1781
                self.multipartIdentifier()
                self.state = 1784
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==202:
                    self.state = 1782
                    self.match(fugue_sqlParser.OPTIONS)
                    self.state = 1783
                    localctx.options = self.tablePropertyList()


                self.state = 1790
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la - 17)) & ~0x3f) == 0 and ((1 << (_la - 17)) & 141838610891267) != 0 or (((_la - 95)) & ~0x3f) == 0 and ((1 << (_la - 95)) & 140737496743937) != 0 or (((_la - 178)) & ~0x3f) == 0 and ((1 << (_la - 178)) & 20266198323167361) != 0 or (((_la - 248)) & ~0x3f) == 0 and ((1 << (_la - 248)) & 73183502536802305) != 0:
                    self.state = 1787
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==64:
                        self.state = 1786
                        self.match(fugue_sqlParser.AS)


                    self.state = 1789
                    self.query()


                pass

            elif la_ == 58:
                localctx = fugue_sqlParser.UncacheTableContext(self, localctx)
                self.enterOuterAlt(localctx, 58)
                self.state = 1792
                self.match(fugue_sqlParser.UNCACHE)
                self.state = 1793
                self.match(fugue_sqlParser.TABLE)
                self.state = 1796
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,225,self._ctx)
                if la_ == 1:
                    self.state = 1794
                    self.match(fugue_sqlParser.IF)
                    self.state = 1795
                    self.match(fugue_sqlParser.EXISTS)


                self.state = 1798
                self.multipartIdentifier()
                pass

            elif la_ == 59:
                localctx = fugue_sqlParser.ClearCacheContext(self, localctx)
                self.enterOuterAlt(localctx, 59)
                self.state = 1799
                self.match(fugue_sqlParser.CLEAR)
                self.state = 1800
                self.match(fugue_sqlParser.CACHE)
                pass

            elif la_ == 60:
                localctx = fugue_sqlParser.LoadDataContext(self, localctx)
                self.enterOuterAlt(localctx, 60)
                self.state = 1801
                self.match(fugue_sqlParser.LOAD)
                self.state = 1802
                self.match(fugue_sqlParser.DATA)
                self.state = 1804
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==179:
                    self.state = 1803
                    self.match(fugue_sqlParser.LOCAL)


                self.state = 1806
                self.match(fugue_sqlParser.INPATH)
                self.state = 1807
                localctx.path = self.match(fugue_sqlParser.STRING)
                self.state = 1809
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==211:
                    self.state = 1808
                    self.match(fugue_sqlParser.OVERWRITE)


                self.state = 1811
                self.match(fugue_sqlParser.INTO)
                self.state = 1812
                self.match(fugue_sqlParser.TABLE)
                self.state = 1813
                self.multipartIdentifier()
                self.state = 1815
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==212:
                    self.state = 1814
                    self.partitionSpec()


                pass

            elif la_ == 61:
                localctx = fugue_sqlParser.TruncateTableContext(self, localctx)
                self.enterOuterAlt(localctx, 61)
                self.state = 1817
                self.match(fugue_sqlParser.TRUNCATE)
                self.state = 1818
                self.match(fugue_sqlParser.TABLE)
                self.state = 1819
                self.multipartIdentifier()
                self.state = 1821
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==212:
                    self.state = 1820
                    self.partitionSpec()


                pass

            elif la_ == 62:
                localctx = fugue_sqlParser.RepairTableContext(self, localctx)
                self.enterOuterAlt(localctx, 62)
                self.state = 1823
                self.match(fugue_sqlParser.MSCK)
                self.state = 1824
                self.match(fugue_sqlParser.REPAIR)
                self.state = 1825
                self.match(fugue_sqlParser.TABLE)
                self.state = 1826
                self.multipartIdentifier()
                pass

            elif la_ == 63:
                localctx = fugue_sqlParser.ManageResourceContext(self, localctx)
                self.enterOuterAlt(localctx, 63)
                self.state = 1827
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==54 or _la==177):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1828
                self.identifier()
                self.state = 1836
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,231,self._ctx)
                if la_ == 1:
                    self.state = 1829
                    self.match(fugue_sqlParser.STRING)
                    pass

                elif la_ == 2:
                    self.state = 1833
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,230,self._ctx)
                    while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1+1:
                            self.state = 1830
                            self.matchWildcard() 
                        self.state = 1835
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,230,self._ctx)

                    pass


                pass

            elif la_ == 64:
                localctx = fugue_sqlParser.FailNativeCommandContext(self, localctx)
                self.enterOuterAlt(localctx, 64)
                self.state = 1838
                self.match(fugue_sqlParser.SET)
                self.state = 1839
                self.match(fugue_sqlParser.ROLE)
                self.state = 1843
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,232,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 1840
                        self.matchWildcard() 
                    self.state = 1845
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,232,self._ctx)

                pass

            elif la_ == 65:
                localctx = fugue_sqlParser.SetConfigurationContext(self, localctx)
                self.enterOuterAlt(localctx, 65)
                self.state = 1846
                self.match(fugue_sqlParser.SET)
                self.state = 1850
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,233,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 1847
                        self.matchWildcard() 
                    self.state = 1852
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,233,self._ctx)

                pass

            elif la_ == 66:
                localctx = fugue_sqlParser.ResetConfigurationContext(self, localctx)
                self.enterOuterAlt(localctx, 66)
                self.state = 1853
                self.match(fugue_sqlParser.RESET)
                pass

            elif la_ == 67:
                localctx = fugue_sqlParser.FailNativeCommandContext(self, localctx)
                self.enterOuterAlt(localctx, 67)
                self.state = 1854
                self.unsupportedHiveNativeCommands()
                self.state = 1858
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,234,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 1855
                        self.matchWildcard() 
                    self.state = 1860
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,234,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnsupportedHiveNativeCommandsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.kw1 = None # Token
            self.kw2 = None # Token
            self.kw3 = None # Token
            self.kw4 = None # Token
            self.kw5 = None # Token
            self.kw6 = None # Token

        def CREATE(self):
            return self.getToken(fugue_sqlParser.CREATE, 0)

        def ROLE(self):
            return self.getToken(fugue_sqlParser.ROLE, 0)

        def DROP(self):
            return self.getToken(fugue_sqlParser.DROP, 0)

        def GRANT(self):
            return self.getToken(fugue_sqlParser.GRANT, 0)

        def REVOKE(self):
            return self.getToken(fugue_sqlParser.REVOKE, 0)

        def SHOW(self):
            return self.getToken(fugue_sqlParser.SHOW, 0)

        def PRINCIPALS(self):
            return self.getToken(fugue_sqlParser.PRINCIPALS, 0)

        def ROLES(self):
            return self.getToken(fugue_sqlParser.ROLES, 0)

        def CURRENT(self):
            return self.getToken(fugue_sqlParser.CURRENT, 0)

        def EXPORT(self):
            return self.getToken(fugue_sqlParser.EXPORT, 0)

        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)

        def IMPORT(self):
            return self.getToken(fugue_sqlParser.IMPORT, 0)

        def COMPACTIONS(self):
            return self.getToken(fugue_sqlParser.COMPACTIONS, 0)

        def TRANSACTIONS(self):
            return self.getToken(fugue_sqlParser.TRANSACTIONS, 0)

        def INDEXES(self):
            return self.getToken(fugue_sqlParser.INDEXES, 0)

        def LOCKS(self):
            return self.getToken(fugue_sqlParser.LOCKS, 0)

        def INDEX(self):
            return self.getToken(fugue_sqlParser.INDEX, 0)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)

        def LOCK(self):
            return self.getToken(fugue_sqlParser.LOCK, 0)

        def DATABASE(self):
            return self.getToken(fugue_sqlParser.DATABASE, 0)

        def UNLOCK(self):
            return self.getToken(fugue_sqlParser.UNLOCK, 0)

        def TEMPORARY(self):
            return self.getToken(fugue_sqlParser.TEMPORARY, 0)

        def MACRO(self):
            return self.getToken(fugue_sqlParser.MACRO, 0)

        def tableIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.TableIdentifierContext,0)


        def NOT(self):
            return self.getToken(fugue_sqlParser.NOT, 0)

        def CLUSTERED(self):
            return self.getToken(fugue_sqlParser.CLUSTERED, 0)

        def BY(self):
            return self.getToken(fugue_sqlParser.BY, 0)

        def SORTED(self):
            return self.getToken(fugue_sqlParser.SORTED, 0)

        def SKEWED(self):
            return self.getToken(fugue_sqlParser.SKEWED, 0)

        def STORED(self):
            return self.getToken(fugue_sqlParser.STORED, 0)

        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)

        def DIRECTORIES(self):
            return self.getToken(fugue_sqlParser.DIRECTORIES, 0)

        def SET(self):
            return self.getToken(fugue_sqlParser.SET, 0)

        def LOCATION(self):
            return self.getToken(fugue_sqlParser.LOCATION, 0)

        def EXCHANGE(self):
            return self.getToken(fugue_sqlParser.EXCHANGE, 0)

        def PARTITION(self):
            return self.getToken(fugue_sqlParser.PARTITION, 0)

        def ARCHIVE(self):
            return self.getToken(fugue_sqlParser.ARCHIVE, 0)

        def UNARCHIVE(self):
            return self.getToken(fugue_sqlParser.UNARCHIVE, 0)

        def TOUCH(self):
            return self.getToken(fugue_sqlParser.TOUCH, 0)

        def COMPACT(self):
            return self.getToken(fugue_sqlParser.COMPACT, 0)

        def partitionSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.PartitionSpecContext,0)


        def CONCATENATE(self):
            return self.getToken(fugue_sqlParser.CONCATENATE, 0)

        def FILEFORMAT(self):
            return self.getToken(fugue_sqlParser.FILEFORMAT, 0)

        def REPLACE(self):
            return self.getToken(fugue_sqlParser.REPLACE, 0)

        def COLUMNS(self):
            return self.getToken(fugue_sqlParser.COLUMNS, 0)

        def START(self):
            return self.getToken(fugue_sqlParser.START, 0)

        def TRANSACTION(self):
            return self.getToken(fugue_sqlParser.TRANSACTION, 0)

        def COMMIT(self):
            return self.getToken(fugue_sqlParser.COMMIT, 0)

        def ROLLBACK(self):
            return self.getToken(fugue_sqlParser.ROLLBACK, 0)

        def DFS(self):
            return self.getToken(fugue_sqlParser.DFS, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_unsupportedHiveNativeCommands

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnsupportedHiveNativeCommands" ):
                return visitor.visitUnsupportedHiveNativeCommands(self)
            else:
                return visitor.visitChildren(self)




    def unsupportedHiveNativeCommands(self):

        localctx = fugue_sqlParser.UnsupportedHiveNativeCommandsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_unsupportedHiveNativeCommands)
        self._la = 0 # Token type
        try:
            self.state = 2031
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,243,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1863
                localctx.kw1 = self.match(fugue_sqlParser.CREATE)
                self.state = 1864
                localctx.kw2 = self.match(fugue_sqlParser.ROLE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1865
                localctx.kw1 = self.match(fugue_sqlParser.DROP)
                self.state = 1866
                localctx.kw2 = self.match(fugue_sqlParser.ROLE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1867
                localctx.kw1 = self.match(fugue_sqlParser.GRANT)
                self.state = 1869
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,236,self._ctx)
                if la_ == 1:
                    self.state = 1868
                    localctx.kw2 = self.match(fugue_sqlParser.ROLE)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1871
                localctx.kw1 = self.match(fugue_sqlParser.REVOKE)
                self.state = 1873
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,237,self._ctx)
                if la_ == 1:
                    self.state = 1872
                    localctx.kw2 = self.match(fugue_sqlParser.ROLE)


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1875
                localctx.kw1 = self.match(fugue_sqlParser.SHOW)
                self.state = 1876
                localctx.kw2 = self.match(fugue_sqlParser.GRANT)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1877
                localctx.kw1 = self.match(fugue_sqlParser.SHOW)
                self.state = 1878
                localctx.kw2 = self.match(fugue_sqlParser.ROLE)
                self.state = 1880
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,238,self._ctx)
                if la_ == 1:
                    self.state = 1879
                    localctx.kw3 = self.match(fugue_sqlParser.GRANT)


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1882
                localctx.kw1 = self.match(fugue_sqlParser.SHOW)
                self.state = 1883
                localctx.kw2 = self.match(fugue_sqlParser.PRINCIPALS)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1884
                localctx.kw1 = self.match(fugue_sqlParser.SHOW)
                self.state = 1885
                localctx.kw2 = self.match(fugue_sqlParser.ROLES)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1886
                localctx.kw1 = self.match(fugue_sqlParser.SHOW)
                self.state = 1887
                localctx.kw2 = self.match(fugue_sqlParser.CURRENT)
                self.state = 1888
                localctx.kw3 = self.match(fugue_sqlParser.ROLES)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1889
                localctx.kw1 = self.match(fugue_sqlParser.EXPORT)
                self.state = 1890
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1891
                localctx.kw1 = self.match(fugue_sqlParser.IMPORT)
                self.state = 1892
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1893
                localctx.kw1 = self.match(fugue_sqlParser.SHOW)
                self.state = 1894
                localctx.kw2 = self.match(fugue_sqlParser.COMPACTIONS)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1895
                localctx.kw1 = self.match(fugue_sqlParser.SHOW)
                self.state = 1896
                localctx.kw2 = self.match(fugue_sqlParser.CREATE)
                self.state = 1897
                localctx.kw3 = self.match(fugue_sqlParser.TABLE)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1898
                localctx.kw1 = self.match(fugue_sqlParser.SHOW)
                self.state = 1899
                localctx.kw2 = self.match(fugue_sqlParser.TRANSACTIONS)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1900
                localctx.kw1 = self.match(fugue_sqlParser.SHOW)
                self.state = 1901
                localctx.kw2 = self.match(fugue_sqlParser.INDEXES)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1902
                localctx.kw1 = self.match(fugue_sqlParser.SHOW)
                self.state = 1903
                localctx.kw2 = self.match(fugue_sqlParser.LOCKS)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 1904
                localctx.kw1 = self.match(fugue_sqlParser.CREATE)
                self.state = 1905
                localctx.kw2 = self.match(fugue_sqlParser.INDEX)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 1906
                localctx.kw1 = self.match(fugue_sqlParser.DROP)
                self.state = 1907
                localctx.kw2 = self.match(fugue_sqlParser.INDEX)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 1908
                localctx.kw1 = self.match(fugue_sqlParser.ALTER)
                self.state = 1909
                localctx.kw2 = self.match(fugue_sqlParser.INDEX)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 1910
                localctx.kw1 = self.match(fugue_sqlParser.LOCK)
                self.state = 1911
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 1912
                localctx.kw1 = self.match(fugue_sqlParser.LOCK)
                self.state = 1913
                localctx.kw2 = self.match(fugue_sqlParser.DATABASE)
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 1914
                localctx.kw1 = self.match(fugue_sqlParser.UNLOCK)
                self.state = 1915
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 1916
                localctx.kw1 = self.match(fugue_sqlParser.UNLOCK)
                self.state = 1917
                localctx.kw2 = self.match(fugue_sqlParser.DATABASE)
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 1918
                localctx.kw1 = self.match(fugue_sqlParser.CREATE)
                self.state = 1919
                localctx.kw2 = self.match(fugue_sqlParser.TEMPORARY)
                self.state = 1920
                localctx.kw3 = self.match(fugue_sqlParser.MACRO)
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 1921
                localctx.kw1 = self.match(fugue_sqlParser.DROP)
                self.state = 1922
                localctx.kw2 = self.match(fugue_sqlParser.TEMPORARY)
                self.state = 1923
                localctx.kw3 = self.match(fugue_sqlParser.MACRO)
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 1924
                localctx.kw1 = self.match(fugue_sqlParser.ALTER)
                self.state = 1925
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                self.state = 1926
                self.tableIdentifier()
                self.state = 1927
                localctx.kw3 = self.match(fugue_sqlParser.NOT)
                self.state = 1928
                localctx.kw4 = self.match(fugue_sqlParser.CLUSTERED)
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 1930
                localctx.kw1 = self.match(fugue_sqlParser.ALTER)
                self.state = 1931
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                self.state = 1932
                self.tableIdentifier()
                self.state = 1933
                localctx.kw3 = self.match(fugue_sqlParser.CLUSTERED)
                self.state = 1934
                localctx.kw4 = self.match(fugue_sqlParser.BY)
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 1936
                localctx.kw1 = self.match(fugue_sqlParser.ALTER)
                self.state = 1937
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                self.state = 1938
                self.tableIdentifier()
                self.state = 1939
                localctx.kw3 = self.match(fugue_sqlParser.NOT)
                self.state = 1940
                localctx.kw4 = self.match(fugue_sqlParser.SORTED)
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 1942
                localctx.kw1 = self.match(fugue_sqlParser.ALTER)
                self.state = 1943
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                self.state = 1944
                self.tableIdentifier()
                self.state = 1945
                localctx.kw3 = self.match(fugue_sqlParser.SKEWED)
                self.state = 1946
                localctx.kw4 = self.match(fugue_sqlParser.BY)
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 1948
                localctx.kw1 = self.match(fugue_sqlParser.ALTER)
                self.state = 1949
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                self.state = 1950
                self.tableIdentifier()
                self.state = 1951
                localctx.kw3 = self.match(fugue_sqlParser.NOT)
                self.state = 1952
                localctx.kw4 = self.match(fugue_sqlParser.SKEWED)
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 1954
                localctx.kw1 = self.match(fugue_sqlParser.ALTER)
                self.state = 1955
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                self.state = 1956
                self.tableIdentifier()
                self.state = 1957
                localctx.kw3 = self.match(fugue_sqlParser.NOT)
                self.state = 1958
                localctx.kw4 = self.match(fugue_sqlParser.STORED)
                self.state = 1959
                localctx.kw5 = self.match(fugue_sqlParser.AS)
                self.state = 1960
                localctx.kw6 = self.match(fugue_sqlParser.DIRECTORIES)
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 1962
                localctx.kw1 = self.match(fugue_sqlParser.ALTER)
                self.state = 1963
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                self.state = 1964
                self.tableIdentifier()
                self.state = 1965
                localctx.kw3 = self.match(fugue_sqlParser.SET)
                self.state = 1966
                localctx.kw4 = self.match(fugue_sqlParser.SKEWED)
                self.state = 1967
                localctx.kw5 = self.match(fugue_sqlParser.LOCATION)
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 1969
                localctx.kw1 = self.match(fugue_sqlParser.ALTER)
                self.state = 1970
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                self.state = 1971
                self.tableIdentifier()
                self.state = 1972
                localctx.kw3 = self.match(fugue_sqlParser.EXCHANGE)
                self.state = 1973
                localctx.kw4 = self.match(fugue_sqlParser.PARTITION)
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 1975
                localctx.kw1 = self.match(fugue_sqlParser.ALTER)
                self.state = 1976
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                self.state = 1977
                self.tableIdentifier()
                self.state = 1978
                localctx.kw3 = self.match(fugue_sqlParser.ARCHIVE)
                self.state = 1979
                localctx.kw4 = self.match(fugue_sqlParser.PARTITION)
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 1981
                localctx.kw1 = self.match(fugue_sqlParser.ALTER)
                self.state = 1982
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                self.state = 1983
                self.tableIdentifier()
                self.state = 1984
                localctx.kw3 = self.match(fugue_sqlParser.UNARCHIVE)
                self.state = 1985
                localctx.kw4 = self.match(fugue_sqlParser.PARTITION)
                pass

            elif la_ == 36:
                self.enterOuterAlt(localctx, 36)
                self.state = 1987
                localctx.kw1 = self.match(fugue_sqlParser.ALTER)
                self.state = 1988
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                self.state = 1989
                self.tableIdentifier()
                self.state = 1990
                localctx.kw3 = self.match(fugue_sqlParser.TOUCH)
                pass

            elif la_ == 37:
                self.enterOuterAlt(localctx, 37)
                self.state = 1992
                localctx.kw1 = self.match(fugue_sqlParser.ALTER)
                self.state = 1993
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                self.state = 1994
                self.tableIdentifier()
                self.state = 1996
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==212:
                    self.state = 1995
                    self.partitionSpec()


                self.state = 1998
                localctx.kw3 = self.match(fugue_sqlParser.COMPACT)
                pass

            elif la_ == 38:
                self.enterOuterAlt(localctx, 38)
                self.state = 2000
                localctx.kw1 = self.match(fugue_sqlParser.ALTER)
                self.state = 2001
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                self.state = 2002
                self.tableIdentifier()
                self.state = 2004
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==212:
                    self.state = 2003
                    self.partitionSpec()


                self.state = 2006
                localctx.kw3 = self.match(fugue_sqlParser.CONCATENATE)
                pass

            elif la_ == 39:
                self.enterOuterAlt(localctx, 39)
                self.state = 2008
                localctx.kw1 = self.match(fugue_sqlParser.ALTER)
                self.state = 2009
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                self.state = 2010
                self.tableIdentifier()
                self.state = 2012
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==212:
                    self.state = 2011
                    self.partitionSpec()


                self.state = 2014
                localctx.kw3 = self.match(fugue_sqlParser.SET)
                self.state = 2015
                localctx.kw4 = self.match(fugue_sqlParser.FILEFORMAT)
                pass

            elif la_ == 40:
                self.enterOuterAlt(localctx, 40)
                self.state = 2017
                localctx.kw1 = self.match(fugue_sqlParser.ALTER)
                self.state = 2018
                localctx.kw2 = self.match(fugue_sqlParser.TABLE)
                self.state = 2019
                self.tableIdentifier()
                self.state = 2021
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==212:
                    self.state = 2020
                    self.partitionSpec()


                self.state = 2023
                localctx.kw3 = self.match(fugue_sqlParser.REPLACE)
                self.state = 2024
                localctx.kw4 = self.match(fugue_sqlParser.COLUMNS)
                pass

            elif la_ == 41:
                self.enterOuterAlt(localctx, 41)
                self.state = 2026
                localctx.kw1 = self.match(fugue_sqlParser.START)
                self.state = 2027
                localctx.kw2 = self.match(fugue_sqlParser.TRANSACTION)
                pass

            elif la_ == 42:
                self.enterOuterAlt(localctx, 42)
                self.state = 2028
                localctx.kw1 = self.match(fugue_sqlParser.COMMIT)
                pass

            elif la_ == 43:
                self.enterOuterAlt(localctx, 43)
                self.state = 2029
                localctx.kw1 = self.match(fugue_sqlParser.ROLLBACK)
                pass

            elif la_ == 44:
                self.enterOuterAlt(localctx, 44)
                self.state = 2030
                localctx.kw1 = self.match(fugue_sqlParser.DFS)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateTableHeaderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(fugue_sqlParser.CREATE, 0)

        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)


        def TEMPORARY(self):
            return self.getToken(fugue_sqlParser.TEMPORARY, 0)

        def EXTERNAL(self):
            return self.getToken(fugue_sqlParser.EXTERNAL, 0)

        def IF(self):
            return self.getToken(fugue_sqlParser.IF, 0)

        def NOT(self):
            return self.getToken(fugue_sqlParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(fugue_sqlParser.EXISTS, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_createTableHeader

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateTableHeader" ):
                return visitor.visitCreateTableHeader(self)
            else:
                return visitor.visitChildren(self)




    def createTableHeader(self):

        localctx = fugue_sqlParser.CreateTableHeaderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_createTableHeader)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2033
            self.match(fugue_sqlParser.CREATE)
            self.state = 2035
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==273:
                self.state = 2034
                self.match(fugue_sqlParser.TEMPORARY)


            self.state = 2038
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==129:
                self.state = 2037
                self.match(fugue_sqlParser.EXTERNAL)


            self.state = 2040
            self.match(fugue_sqlParser.TABLE)
            self.state = 2044
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,246,self._ctx)
            if la_ == 1:
                self.state = 2041
                self.match(fugue_sqlParser.IF)
                self.state = 2042
                self.match(fugue_sqlParser.NOT)
                self.state = 2043
                self.match(fugue_sqlParser.EXISTS)


            self.state = 2046
            self.multipartIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReplaceTableHeaderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REPLACE(self):
            return self.getToken(fugue_sqlParser.REPLACE, 0)

        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)


        def CREATE(self):
            return self.getToken(fugue_sqlParser.CREATE, 0)

        def OR(self):
            return self.getToken(fugue_sqlParser.OR, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_replaceTableHeader

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReplaceTableHeader" ):
                return visitor.visitReplaceTableHeader(self)
            else:
                return visitor.visitChildren(self)




    def replaceTableHeader(self):

        localctx = fugue_sqlParser.ReplaceTableHeaderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_replaceTableHeader)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2050
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==95:
                self.state = 2048
                self.match(fugue_sqlParser.CREATE)
                self.state = 2049
                self.match(fugue_sqlParser.OR)


            self.state = 2052
            self.match(fugue_sqlParser.REPLACE)
            self.state = 2053
            self.match(fugue_sqlParser.TABLE)
            self.state = 2054
            self.multipartIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BucketSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLUSTERED(self):
            return self.getToken(fugue_sqlParser.CLUSTERED, 0)

        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.BY)
            else:
                return self.getToken(fugue_sqlParser.BY, i)

        def identifierList(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierListContext,0)


        def INTO(self):
            return self.getToken(fugue_sqlParser.INTO, 0)

        def INTEGER_VALUE(self):
            return self.getToken(fugue_sqlParser.INTEGER_VALUE, 0)

        def BUCKETS(self):
            return self.getToken(fugue_sqlParser.BUCKETS, 0)

        def SORTED(self):
            return self.getToken(fugue_sqlParser.SORTED, 0)

        def orderedIdentifierList(self):
            return self.getTypedRuleContext(fugue_sqlParser.OrderedIdentifierListContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_bucketSpec

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBucketSpec" ):
                return visitor.visitBucketSpec(self)
            else:
                return visitor.visitChildren(self)




    def bucketSpec(self):

        localctx = fugue_sqlParser.BucketSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_bucketSpec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2056
            self.match(fugue_sqlParser.CLUSTERED)
            self.state = 2057
            self.match(fugue_sqlParser.BY)
            self.state = 2058
            self.identifierList()
            self.state = 2062
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==261:
                self.state = 2059
                self.match(fugue_sqlParser.SORTED)
                self.state = 2060
                self.match(fugue_sqlParser.BY)
                self.state = 2061
                self.orderedIdentifierList()


            self.state = 2064
            self.match(fugue_sqlParser.INTO)
            self.state = 2065
            self.match(fugue_sqlParser.INTEGER_VALUE)
            self.state = 2066
            self.match(fugue_sqlParser.BUCKETS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SkewSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SKEWED(self):
            return self.getToken(fugue_sqlParser.SKEWED, 0)

        def BY(self):
            return self.getToken(fugue_sqlParser.BY, 0)

        def identifierList(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierListContext,0)


        def ON(self):
            return self.getToken(fugue_sqlParser.ON, 0)

        def constantList(self):
            return self.getTypedRuleContext(fugue_sqlParser.ConstantListContext,0)


        def nestedConstantList(self):
            return self.getTypedRuleContext(fugue_sqlParser.NestedConstantListContext,0)


        def STORED(self):
            return self.getToken(fugue_sqlParser.STORED, 0)

        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)

        def DIRECTORIES(self):
            return self.getToken(fugue_sqlParser.DIRECTORIES, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_skewSpec

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSkewSpec" ):
                return visitor.visitSkewSpec(self)
            else:
                return visitor.visitChildren(self)




    def skewSpec(self):

        localctx = fugue_sqlParser.SkewSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_skewSpec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2068
            self.match(fugue_sqlParser.SKEWED)
            self.state = 2069
            self.match(fugue_sqlParser.BY)
            self.state = 2070
            self.identifierList()
            self.state = 2071
            self.match(fugue_sqlParser.ON)
            self.state = 2074
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,249,self._ctx)
            if la_ == 1:
                self.state = 2072
                self.constantList()
                pass

            elif la_ == 2:
                self.state = 2073
                self.nestedConstantList()
                pass


            self.state = 2079
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,250,self._ctx)
            if la_ == 1:
                self.state = 2076
                self.match(fugue_sqlParser.STORED)
                self.state = 2077
                self.match(fugue_sqlParser.AS)
                self.state = 2078
                self.match(fugue_sqlParser.DIRECTORIES)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LocationSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCATION(self):
            return self.getToken(fugue_sqlParser.LOCATION, 0)

        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_locationSpec

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLocationSpec" ):
                return visitor.visitLocationSpec(self)
            else:
                return visitor.visitChildren(self)




    def locationSpec(self):

        localctx = fugue_sqlParser.LocationSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_locationSpec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2081
            self.match(fugue_sqlParser.LOCATION)
            self.state = 2082
            self.match(fugue_sqlParser.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommentSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMENT(self):
            return self.getToken(fugue_sqlParser.COMMENT, 0)

        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_commentSpec

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCommentSpec" ):
                return visitor.visitCommentSpec(self)
            else:
                return visitor.visitChildren(self)




    def commentSpec(self):

        localctx = fugue_sqlParser.CommentSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_commentSpec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2084
            self.match(fugue_sqlParser.COMMENT)
            self.state = 2085
            self.match(fugue_sqlParser.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def queryTerm(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryTermContext,0)


        def queryOrganization(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryOrganizationContext,0)


        def fugueSqlEngine(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueSqlEngineContext,0)


        def ctes(self):
            return self.getTypedRuleContext(fugue_sqlParser.CtesContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_query

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuery" ):
                return visitor.visitQuery(self)
            else:
                return visitor.visitChildren(self)




    def query(self):

        localctx = fugue_sqlParser.QueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_query)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2088
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==46:
                self.state = 2087
                self.fugueSqlEngine()


            self.state = 2091
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==304:
                self.state = 2090
                self.ctes()


            self.state = 2093
            self.queryTerm(0)
            self.state = 2094
            self.queryOrganization()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InsertIntoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_insertInto

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class InsertOverwriteHiveDirContext(InsertIntoContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.InsertIntoContext
            super().__init__(parser)
            self.path = None # Token
            self.copyFrom(ctx)

        def INSERT(self):
            return self.getToken(fugue_sqlParser.INSERT, 0)
        def OVERWRITE(self):
            return self.getToken(fugue_sqlParser.OVERWRITE, 0)
        def DIRECTORY(self):
            return self.getToken(fugue_sqlParser.DIRECTORY, 0)
        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)
        def LOCAL(self):
            return self.getToken(fugue_sqlParser.LOCAL, 0)
        def rowFormat(self):
            return self.getTypedRuleContext(fugue_sqlParser.RowFormatContext,0)

        def createFileFormat(self):
            return self.getTypedRuleContext(fugue_sqlParser.CreateFileFormatContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsertOverwriteHiveDir" ):
                return visitor.visitInsertOverwriteHiveDir(self)
            else:
                return visitor.visitChildren(self)


    class InsertOverwriteDirContext(InsertIntoContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.InsertIntoContext
            super().__init__(parser)
            self.path = None # Token
            self.options = None # TablePropertyListContext
            self.copyFrom(ctx)

        def INSERT(self):
            return self.getToken(fugue_sqlParser.INSERT, 0)
        def OVERWRITE(self):
            return self.getToken(fugue_sqlParser.OVERWRITE, 0)
        def DIRECTORY(self):
            return self.getToken(fugue_sqlParser.DIRECTORY, 0)
        def tableProvider(self):
            return self.getTypedRuleContext(fugue_sqlParser.TableProviderContext,0)

        def LOCAL(self):
            return self.getToken(fugue_sqlParser.LOCAL, 0)
        def OPTIONS(self):
            return self.getToken(fugue_sqlParser.OPTIONS, 0)
        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)
        def tablePropertyList(self):
            return self.getTypedRuleContext(fugue_sqlParser.TablePropertyListContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsertOverwriteDir" ):
                return visitor.visitInsertOverwriteDir(self)
            else:
                return visitor.visitChildren(self)


    class InsertOverwriteTableContext(InsertIntoContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.InsertIntoContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INSERT(self):
            return self.getToken(fugue_sqlParser.INSERT, 0)
        def OVERWRITE(self):
            return self.getToken(fugue_sqlParser.OVERWRITE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def partitionSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.PartitionSpecContext,0)

        def IF(self):
            return self.getToken(fugue_sqlParser.IF, 0)
        def NOT(self):
            return self.getToken(fugue_sqlParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(fugue_sqlParser.EXISTS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsertOverwriteTable" ):
                return visitor.visitInsertOverwriteTable(self)
            else:
                return visitor.visitChildren(self)


    class InsertIntoTableContext(InsertIntoContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.InsertIntoContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INSERT(self):
            return self.getToken(fugue_sqlParser.INSERT, 0)
        def INTO(self):
            return self.getToken(fugue_sqlParser.INTO, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def partitionSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.PartitionSpecContext,0)

        def IF(self):
            return self.getToken(fugue_sqlParser.IF, 0)
        def NOT(self):
            return self.getToken(fugue_sqlParser.NOT, 0)
        def EXISTS(self):
            return self.getToken(fugue_sqlParser.EXISTS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsertIntoTable" ):
                return visitor.visitInsertIntoTable(self)
            else:
                return visitor.visitChildren(self)



    def insertInto(self):

        localctx = fugue_sqlParser.InsertIntoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_insertInto)
        self._la = 0 # Token type
        try:
            self.state = 2151
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,265,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.InsertOverwriteTableContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2096
                self.match(fugue_sqlParser.INSERT)
                self.state = 2097
                self.match(fugue_sqlParser.OVERWRITE)
                self.state = 2099
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,253,self._ctx)
                if la_ == 1:
                    self.state = 2098
                    self.match(fugue_sqlParser.TABLE)


                self.state = 2101
                self.multipartIdentifier()
                self.state = 2108
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==212:
                    self.state = 2102
                    self.partitionSpec()
                    self.state = 2106
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==152:
                        self.state = 2103
                        self.match(fugue_sqlParser.IF)
                        self.state = 2104
                        self.match(fugue_sqlParser.NOT)
                        self.state = 2105
                        self.match(fugue_sqlParser.EXISTS)




                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.InsertIntoTableContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2110
                self.match(fugue_sqlParser.INSERT)
                self.state = 2111
                self.match(fugue_sqlParser.INTO)
                self.state = 2113
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,256,self._ctx)
                if la_ == 1:
                    self.state = 2112
                    self.match(fugue_sqlParser.TABLE)


                self.state = 2115
                self.multipartIdentifier()
                self.state = 2117
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==212:
                    self.state = 2116
                    self.partitionSpec()


                self.state = 2122
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==152:
                    self.state = 2119
                    self.match(fugue_sqlParser.IF)
                    self.state = 2120
                    self.match(fugue_sqlParser.NOT)
                    self.state = 2121
                    self.match(fugue_sqlParser.EXISTS)


                pass

            elif la_ == 3:
                localctx = fugue_sqlParser.InsertOverwriteHiveDirContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2124
                self.match(fugue_sqlParser.INSERT)
                self.state = 2125
                self.match(fugue_sqlParser.OVERWRITE)
                self.state = 2127
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==179:
                    self.state = 2126
                    self.match(fugue_sqlParser.LOCAL)


                self.state = 2129
                self.match(fugue_sqlParser.DIRECTORY)
                self.state = 2130
                localctx.path = self.match(fugue_sqlParser.STRING)
                self.state = 2132
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==244:
                    self.state = 2131
                    self.rowFormat()


                self.state = 2135
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==264:
                    self.state = 2134
                    self.createFileFormat()


                pass

            elif la_ == 4:
                localctx = fugue_sqlParser.InsertOverwriteDirContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2137
                self.match(fugue_sqlParser.INSERT)
                self.state = 2138
                self.match(fugue_sqlParser.OVERWRITE)
                self.state = 2140
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==179:
                    self.state = 2139
                    self.match(fugue_sqlParser.LOCAL)


                self.state = 2142
                self.match(fugue_sqlParser.DIRECTORY)
                self.state = 2144
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==326:
                    self.state = 2143
                    localctx.path = self.match(fugue_sqlParser.STRING)


                self.state = 2146
                self.tableProvider()
                self.state = 2149
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==202:
                    self.state = 2147
                    self.match(fugue_sqlParser.OPTIONS)
                    self.state = 2148
                    localctx.options = self.tablePropertyList()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionSpecLocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def partitionSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.PartitionSpecContext,0)


        def locationSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.LocationSpecContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_partitionSpecLocation

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartitionSpecLocation" ):
                return visitor.visitPartitionSpecLocation(self)
            else:
                return visitor.visitChildren(self)




    def partitionSpecLocation(self):

        localctx = fugue_sqlParser.PartitionSpecLocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_partitionSpecLocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2153
            self.partitionSpec()
            self.state = 2155
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==180:
                self.state = 2154
                self.locationSpec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION(self):
            return self.getToken(fugue_sqlParser.PARTITION, 0)

        def partitionVal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.PartitionValContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.PartitionValContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_partitionSpec

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartitionSpec" ):
                return visitor.visitPartitionSpec(self)
            else:
                return visitor.visitChildren(self)




    def partitionSpec(self):

        localctx = fugue_sqlParser.PartitionSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_partitionSpec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2157
            self.match(fugue_sqlParser.PARTITION)
            self.state = 2158
            self.match(fugue_sqlParser.T__2)
            self.state = 2159
            self.partitionVal()
            self.state = 2164
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1:
                self.state = 2160
                self.match(fugue_sqlParser.T__0)
                self.state = 2161
                self.partitionVal()
                self.state = 2166
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2167
            self.match(fugue_sqlParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionValContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)


        def EQUAL(self):
            return self.getToken(fugue_sqlParser.EQUAL, 0)

        def constant(self):
            return self.getTypedRuleContext(fugue_sqlParser.ConstantContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_partitionVal

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartitionVal" ):
                return visitor.visitPartitionVal(self)
            else:
                return visitor.visitChildren(self)




    def partitionVal(self):

        localctx = fugue_sqlParser.PartitionValContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_partitionVal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2169
            self.identifier()
            self.state = 2172
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==306:
                self.state = 2170
                self.match(fugue_sqlParser.EQUAL)
                self.state = 2171
                self.constant()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TheNamespaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAMESPACE(self):
            return self.getToken(fugue_sqlParser.NAMESPACE, 0)

        def DATABASE(self):
            return self.getToken(fugue_sqlParser.DATABASE, 0)

        def SCHEMA(self):
            return self.getToken(fugue_sqlParser.SCHEMA, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_theNamespace

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTheNamespace" ):
                return visitor.visitTheNamespace(self)
            else:
                return visitor.visitChildren(self)




    def theNamespace(self):

        localctx = fugue_sqlParser.TheNamespaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_theNamespace)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2174
            _la = self._input.LA(1)
            if not(_la==104 or _la==191 or _la==246):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DescribeFuncNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedName(self):
            return self.getTypedRuleContext(fugue_sqlParser.QualifiedNameContext,0)


        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)

        def comparisonOperator(self):
            return self.getTypedRuleContext(fugue_sqlParser.ComparisonOperatorContext,0)


        def arithmeticOperator(self):
            return self.getTypedRuleContext(fugue_sqlParser.ArithmeticOperatorContext,0)


        def predicateOperator(self):
            return self.getTypedRuleContext(fugue_sqlParser.PredicateOperatorContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_describeFuncName

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDescribeFuncName" ):
                return visitor.visitDescribeFuncName(self)
            else:
                return visitor.visitChildren(self)




    def describeFuncName(self):

        localctx = fugue_sqlParser.DescribeFuncNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_describeFuncName)
        try:
            self.state = 2181
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,269,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2176
                self.qualifiedName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2177
                self.match(fugue_sqlParser.STRING)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2178
                self.comparisonOperator()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2179
                self.arithmeticOperator()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2180
                self.predicateOperator()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DescribeColNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._identifier = None # IdentifierContext
            self.nameParts = list() # of IdentifierContexts

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_describeColName

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDescribeColName" ):
                return visitor.visitDescribeColName(self)
            else:
                return visitor.visitChildren(self)




    def describeColName(self):

        localctx = fugue_sqlParser.DescribeColNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_describeColName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2183
            localctx._identifier = self.identifier()
            localctx.nameParts.append(localctx._identifier)
            self.state = 2188
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==7:
                self.state = 2184
                self.match(fugue_sqlParser.T__6)
                self.state = 2185
                localctx._identifier = self.identifier()
                localctx.nameParts.append(localctx._identifier)
                self.state = 2190
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CtesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(fugue_sqlParser.WITH, 0)

        def namedQuery(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.NamedQueryContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.NamedQueryContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_ctes

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCtes" ):
                return visitor.visitCtes(self)
            else:
                return visitor.visitChildren(self)




    def ctes(self):

        localctx = fugue_sqlParser.CtesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_ctes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2191
            self.match(fugue_sqlParser.WITH)
            self.state = 2192
            self.namedQuery()
            self.state = 2197
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1:
                self.state = 2193
                self.match(fugue_sqlParser.T__0)
                self.state = 2194
                self.namedQuery()
                self.state = 2199
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedQueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # ErrorCapturingIdentifierContext
            self.columnAliases = None # IdentifierListContext

        def query(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryContext,0)


        def errorCapturingIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.ErrorCapturingIdentifierContext,0)


        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)

        def identifierList(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierListContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_namedQuery

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamedQuery" ):
                return visitor.visitNamedQuery(self)
            else:
                return visitor.visitChildren(self)




    def namedQuery(self):

        localctx = fugue_sqlParser.NamedQueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_namedQuery)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2200
            localctx.name = self.errorCapturingIdentifier()
            self.state = 2202
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,272,self._ctx)
            if la_ == 1:
                self.state = 2201
                localctx.columnAliases = self.identifierList()


            self.state = 2205
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==64:
                self.state = 2204
                self.match(fugue_sqlParser.AS)


            self.state = 2207
            self.match(fugue_sqlParser.T__2)
            self.state = 2208
            self.query()
            self.state = 2209
            self.match(fugue_sqlParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableProviderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(fugue_sqlParser.USING, 0)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_tableProvider

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableProvider" ):
                return visitor.visitTableProvider(self)
            else:
                return visitor.visitChildren(self)




    def tableProvider(self):

        localctx = fugue_sqlParser.TableProviderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_tableProvider)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2211
            self.match(fugue_sqlParser.USING)
            self.state = 2212
            self.multipartIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateTableClausesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.options = None # TablePropertyListContext
            self.partitioning = None # TransformListContext
            self.tableProps = None # TablePropertyListContext

        def bucketSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.BucketSpecContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.BucketSpecContext,i)


        def locationSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.LocationSpecContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.LocationSpecContext,i)


        def commentSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.CommentSpecContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.CommentSpecContext,i)


        def OPTIONS(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.OPTIONS)
            else:
                return self.getToken(fugue_sqlParser.OPTIONS, i)

        def PARTITIONED(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.PARTITIONED)
            else:
                return self.getToken(fugue_sqlParser.PARTITIONED, i)

        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.BY)
            else:
                return self.getToken(fugue_sqlParser.BY, i)

        def TBLPROPERTIES(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.TBLPROPERTIES)
            else:
                return self.getToken(fugue_sqlParser.TBLPROPERTIES, i)

        def tablePropertyList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.TablePropertyListContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.TablePropertyListContext,i)


        def transformList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.TransformListContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.TransformListContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_createTableClauses

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateTableClauses" ):
                return visitor.visitCreateTableClauses(self)
            else:
                return visitor.visitChildren(self)




    def createTableClauses(self):

        localctx = fugue_sqlParser.CreateTableClausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_createTableClauses)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2226
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==81 or _la==87 or (((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & 8594128897) != 0 or _la==272:
                self.state = 2224
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [202]:
                    self.state = 2214
                    self.match(fugue_sqlParser.OPTIONS)
                    self.state = 2215
                    localctx.options = self.tablePropertyList()
                    pass
                elif token in [213]:
                    self.state = 2216
                    self.match(fugue_sqlParser.PARTITIONED)
                    self.state = 2217
                    self.match(fugue_sqlParser.BY)
                    self.state = 2218
                    localctx.partitioning = self.transformList()
                    pass
                elif token in [81]:
                    self.state = 2219
                    self.bucketSpec()
                    pass
                elif token in [180]:
                    self.state = 2220
                    self.locationSpec()
                    pass
                elif token in [87]:
                    self.state = 2221
                    self.commentSpec()
                    pass
                elif token in [272]:
                    self.state = 2222
                    self.match(fugue_sqlParser.TBLPROPERTIES)
                    self.state = 2223
                    localctx.tableProps = self.tablePropertyList()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2228
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TablePropertyListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableProperty(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.TablePropertyContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.TablePropertyContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_tablePropertyList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTablePropertyList" ):
                return visitor.visitTablePropertyList(self)
            else:
                return visitor.visitChildren(self)




    def tablePropertyList(self):

        localctx = fugue_sqlParser.TablePropertyListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_tablePropertyList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2229
            self.match(fugue_sqlParser.T__2)
            self.state = 2230
            self.tableProperty()
            self.state = 2235
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1:
                self.state = 2231
                self.match(fugue_sqlParser.T__0)
                self.state = 2232
                self.tableProperty()
                self.state = 2237
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2238
            self.match(fugue_sqlParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TablePropertyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.key = None # TablePropertyKeyContext
            self.value = None # TablePropertyValueContext

        def tablePropertyKey(self):
            return self.getTypedRuleContext(fugue_sqlParser.TablePropertyKeyContext,0)


        def tablePropertyValue(self):
            return self.getTypedRuleContext(fugue_sqlParser.TablePropertyValueContext,0)


        def EQUAL(self):
            return self.getToken(fugue_sqlParser.EQUAL, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_tableProperty

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableProperty" ):
                return visitor.visitTableProperty(self)
            else:
                return visitor.visitChildren(self)




    def tableProperty(self):

        localctx = fugue_sqlParser.TablePropertyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_tableProperty)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2240
            localctx.key = self.tablePropertyKey()
            self.state = 2245
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==131 or (((_la - 283)) & ~0x3f) == 0 and ((1 << (_la - 283)) & 712483543187457) != 0:
                self.state = 2242
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==306:
                    self.state = 2241
                    self.match(fugue_sqlParser.EQUAL)


                self.state = 2244
                localctx.value = self.tablePropertyValue()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TablePropertyKeyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,i)


        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_tablePropertyKey

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTablePropertyKey" ):
                return visitor.visitTablePropertyKey(self)
            else:
                return visitor.visitChildren(self)




    def tablePropertyKey(self):

        localctx = fugue_sqlParser.TablePropertyKeyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_tablePropertyKey)
        self._la = 0 # Token type
        try:
            self.state = 2256
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 320, 335, 336]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2247
                self.identifier()
                self.state = 2252
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==7:
                    self.state = 2248
                    self.match(fugue_sqlParser.T__6)
                    self.state = 2249
                    self.identifier()
                    self.state = 2254
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [326]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2255
                self.match(fugue_sqlParser.STRING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TablePropertyValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGER_VALUE(self):
            return self.getToken(fugue_sqlParser.INTEGER_VALUE, 0)

        def DECIMAL_VALUE(self):
            return self.getToken(fugue_sqlParser.DECIMAL_VALUE, 0)

        def booleanValue(self):
            return self.getTypedRuleContext(fugue_sqlParser.BooleanValueContext,0)


        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_tablePropertyValue

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTablePropertyValue" ):
                return visitor.visitTablePropertyValue(self)
            else:
                return visitor.visitChildren(self)




    def tablePropertyValue(self):

        localctx = fugue_sqlParser.TablePropertyValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_tablePropertyValue)
        try:
            self.state = 2262
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [330]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2258
                self.match(fugue_sqlParser.INTEGER_VALUE)
                pass
            elif token in [332]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2259
                self.match(fugue_sqlParser.DECIMAL_VALUE)
                pass
            elif token in [131, 283]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2260
                self.booleanValue()
                pass
            elif token in [326]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2261
                self.match(fugue_sqlParser.STRING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ConstantContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ConstantContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_constantList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstantList" ):
                return visitor.visitConstantList(self)
            else:
                return visitor.visitChildren(self)




    def constantList(self):

        localctx = fugue_sqlParser.ConstantListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_constantList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2264
            self.match(fugue_sqlParser.T__2)
            self.state = 2265
            self.constant()
            self.state = 2270
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1:
                self.state = 2266
                self.match(fugue_sqlParser.T__0)
                self.state = 2267
                self.constant()
                self.state = 2272
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2273
            self.match(fugue_sqlParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NestedConstantListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constantList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ConstantListContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ConstantListContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_nestedConstantList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNestedConstantList" ):
                return visitor.visitNestedConstantList(self)
            else:
                return visitor.visitChildren(self)




    def nestedConstantList(self):

        localctx = fugue_sqlParser.NestedConstantListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_nestedConstantList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2275
            self.match(fugue_sqlParser.T__2)
            self.state = 2276
            self.constantList()
            self.state = 2281
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1:
                self.state = 2277
                self.match(fugue_sqlParser.T__0)
                self.state = 2278
                self.constantList()
                self.state = 2283
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2284
            self.match(fugue_sqlParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateFileFormatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STORED(self):
            return self.getToken(fugue_sqlParser.STORED, 0)

        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)

        def fileFormat(self):
            return self.getTypedRuleContext(fugue_sqlParser.FileFormatContext,0)


        def BY(self):
            return self.getToken(fugue_sqlParser.BY, 0)

        def storageHandler(self):
            return self.getTypedRuleContext(fugue_sqlParser.StorageHandlerContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_createFileFormat

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateFileFormat" ):
                return visitor.visitCreateFileFormat(self)
            else:
                return visitor.visitChildren(self)




    def createFileFormat(self):

        localctx = fugue_sqlParser.CreateFileFormatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_createFileFormat)
        try:
            self.state = 2292
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,284,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2286
                self.match(fugue_sqlParser.STORED)
                self.state = 2287
                self.match(fugue_sqlParser.AS)
                self.state = 2288
                self.fileFormat()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2289
                self.match(fugue_sqlParser.STORED)
                self.state = 2290
                self.match(fugue_sqlParser.BY)
                self.state = 2291
                self.storageHandler()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FileFormatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fileFormat

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TableFileFormatContext(FileFormatContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.FileFormatContext
            super().__init__(parser)
            self.inFmt = None # Token
            self.outFmt = None # Token
            self.copyFrom(ctx)

        def INPUTFORMAT(self):
            return self.getToken(fugue_sqlParser.INPUTFORMAT, 0)
        def OUTPUTFORMAT(self):
            return self.getToken(fugue_sqlParser.OUTPUTFORMAT, 0)
        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.STRING)
            else:
                return self.getToken(fugue_sqlParser.STRING, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableFileFormat" ):
                return visitor.visitTableFileFormat(self)
            else:
                return visitor.visitChildren(self)


    class GenericFileFormatContext(FileFormatContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.FileFormatContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGenericFileFormat" ):
                return visitor.visitGenericFileFormat(self)
            else:
                return visitor.visitChildren(self)



    def fileFormat(self):

        localctx = fugue_sqlParser.FileFormatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_fileFormat)
        try:
            self.state = 2299
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,285,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.TableFileFormatContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2294
                self.match(fugue_sqlParser.INPUTFORMAT)
                self.state = 2295
                localctx.inFmt = self.match(fugue_sqlParser.STRING)
                self.state = 2296
                self.match(fugue_sqlParser.OUTPUTFORMAT)
                self.state = 2297
                localctx.outFmt = self.match(fugue_sqlParser.STRING)
                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.GenericFileFormatContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2298
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StorageHandlerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)

        def WITH(self):
            return self.getToken(fugue_sqlParser.WITH, 0)

        def SERDEPROPERTIES(self):
            return self.getToken(fugue_sqlParser.SERDEPROPERTIES, 0)

        def tablePropertyList(self):
            return self.getTypedRuleContext(fugue_sqlParser.TablePropertyListContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_storageHandler

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStorageHandler" ):
                return visitor.visitStorageHandler(self)
            else:
                return visitor.visitChildren(self)




    def storageHandler(self):

        localctx = fugue_sqlParser.StorageHandlerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_storageHandler)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2301
            self.match(fugue_sqlParser.STRING)
            self.state = 2305
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,286,self._ctx)
            if la_ == 1:
                self.state = 2302
                self.match(fugue_sqlParser.WITH)
                self.state = 2303
                self.match(fugue_sqlParser.SERDEPROPERTIES)
                self.state = 2304
                self.tablePropertyList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResourceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)


        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_resource

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitResource" ):
                return visitor.visitResource(self)
            else:
                return visitor.visitChildren(self)




    def resource(self):

        localctx = fugue_sqlParser.ResourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_resource)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2307
            self.identifier()
            self.state = 2308
            self.match(fugue_sqlParser.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DmlStatementNoWithContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_dmlStatementNoWith

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class DeleteFromTableContext(DmlStatementNoWithContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.DmlStatementNoWithContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DELETE(self):
            return self.getToken(fugue_sqlParser.DELETE, 0)
        def FROM(self):
            return self.getToken(fugue_sqlParser.FROM, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def tableAlias(self):
            return self.getTypedRuleContext(fugue_sqlParser.TableAliasContext,0)

        def whereClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.WhereClauseContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeleteFromTable" ):
                return visitor.visitDeleteFromTable(self)
            else:
                return visitor.visitChildren(self)


    class SingleInsertQueryContext(DmlStatementNoWithContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.DmlStatementNoWithContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def insertInto(self):
            return self.getTypedRuleContext(fugue_sqlParser.InsertIntoContext,0)

        def queryTerm(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryTermContext,0)

        def queryOrganization(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryOrganizationContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleInsertQuery" ):
                return visitor.visitSingleInsertQuery(self)
            else:
                return visitor.visitChildren(self)


    class MultiInsertQueryContext(DmlStatementNoWithContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.DmlStatementNoWithContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def fromClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.FromClauseContext,0)

        def multiInsertQueryBody(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.MultiInsertQueryBodyContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.MultiInsertQueryBodyContext,i)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiInsertQuery" ):
                return visitor.visitMultiInsertQuery(self)
            else:
                return visitor.visitChildren(self)


    class UpdateTableContext(DmlStatementNoWithContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.DmlStatementNoWithContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def UPDATE(self):
            return self.getToken(fugue_sqlParser.UPDATE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def tableAlias(self):
            return self.getTypedRuleContext(fugue_sqlParser.TableAliasContext,0)

        def setClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.SetClauseContext,0)

        def whereClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.WhereClauseContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUpdateTable" ):
                return visitor.visitUpdateTable(self)
            else:
                return visitor.visitChildren(self)


    class MergeIntoTableContext(DmlStatementNoWithContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.DmlStatementNoWithContext
            super().__init__(parser)
            self.target = None # MultipartIdentifierContext
            self.targetAlias = None # TableAliasContext
            self.source = None # MultipartIdentifierContext
            self.sourceQuery = None # QueryContext
            self.sourceAlias = None # TableAliasContext
            self.mergeCondition = None # BooleanExpressionContext
            self.copyFrom(ctx)

        def MERGE(self):
            return self.getToken(fugue_sqlParser.MERGE, 0)
        def INTO(self):
            return self.getToken(fugue_sqlParser.INTO, 0)
        def USING(self):
            return self.getToken(fugue_sqlParser.USING, 0)
        def ON(self):
            return self.getToken(fugue_sqlParser.ON, 0)
        def multipartIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.MultipartIdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,i)

        def tableAlias(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.TableAliasContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.TableAliasContext,i)

        def booleanExpression(self):
            return self.getTypedRuleContext(fugue_sqlParser.BooleanExpressionContext,0)

        def query(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryContext,0)

        def matchedClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.MatchedClauseContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.MatchedClauseContext,i)

        def notMatchedClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.NotMatchedClauseContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.NotMatchedClauseContext,i)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMergeIntoTable" ):
                return visitor.visitMergeIntoTable(self)
            else:
                return visitor.visitChildren(self)



    def dmlStatementNoWith(self):

        localctx = fugue_sqlParser.DmlStatementNoWithContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_dmlStatementNoWith)
        self._la = 0 # Token type
        try:
            self.state = 2361
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [161]:
                localctx = fugue_sqlParser.SingleInsertQueryContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2310
                self.insertInto()
                self.state = 2311
                self.queryTerm(0)
                self.state = 2312
                self.queryOrganization()
                pass
            elif token in [142]:
                localctx = fugue_sqlParser.MultiInsertQueryContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2314
                self.fromClause()
                self.state = 2316 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2315
                    self.multiInsertQueryBody()
                    self.state = 2318 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==161):
                        break

                pass
            elif token in [109]:
                localctx = fugue_sqlParser.DeleteFromTableContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2320
                self.match(fugue_sqlParser.DELETE)
                self.state = 2321
                self.match(fugue_sqlParser.FROM)
                self.state = 2322
                self.multipartIdentifier()
                self.state = 2323
                self.tableAlias()
                self.state = 2325
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==302:
                    self.state = 2324
                    self.whereClause()


                pass
            elif token in [294]:
                localctx = fugue_sqlParser.UpdateTableContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2327
                self.match(fugue_sqlParser.UPDATE)
                self.state = 2328
                self.multipartIdentifier()
                self.state = 2329
                self.tableAlias()
                self.state = 2330
                self.setClause()
                self.state = 2332
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==302:
                    self.state = 2331
                    self.whereClause()


                pass
            elif token in [187]:
                localctx = fugue_sqlParser.MergeIntoTableContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2334
                self.match(fugue_sqlParser.MERGE)
                self.state = 2335
                self.match(fugue_sqlParser.INTO)
                self.state = 2336
                localctx.target = self.multipartIdentifier()
                self.state = 2337
                localctx.targetAlias = self.tableAlias()
                self.state = 2338
                self.match(fugue_sqlParser.USING)
                self.state = 2344
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 320, 335, 336]:
                    self.state = 2339
                    localctx.source = self.multipartIdentifier()
                    pass
                elif token in [3]:
                    self.state = 2340
                    self.match(fugue_sqlParser.T__2)
                    self.state = 2341
                    localctx.sourceQuery = self.query()
                    self.state = 2342
                    self.match(fugue_sqlParser.T__3)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2346
                localctx.sourceAlias = self.tableAlias()
                self.state = 2347
                self.match(fugue_sqlParser.ON)
                self.state = 2348
                localctx.mergeCondition = self.booleanExpression(0)
                self.state = 2352
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,291,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2349
                        self.matchedClause() 
                    self.state = 2354
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,291,self._ctx)

                self.state = 2358
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==301:
                    self.state = 2355
                    self.notMatchedClause()
                    self.state = 2360
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryOrganizationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._sortItem = None # SortItemContext
            self.order = list() # of SortItemContexts
            self._expression = None # ExpressionContext
            self.clusterBy = list() # of ExpressionContexts
            self.distributeBy = list() # of ExpressionContexts
            self.sort = list() # of SortItemContexts
            self.limit = None # ExpressionContext

        def ORDER(self):
            return self.getToken(fugue_sqlParser.ORDER, 0)

        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.BY)
            else:
                return self.getToken(fugue_sqlParser.BY, i)

        def CLUSTER(self):
            return self.getToken(fugue_sqlParser.CLUSTER, 0)

        def DISTRIBUTE(self):
            return self.getToken(fugue_sqlParser.DISTRIBUTE, 0)

        def SORT(self):
            return self.getToken(fugue_sqlParser.SORT, 0)

        def windowClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.WindowClauseContext,0)


        def LIMIT(self):
            return self.getToken(fugue_sqlParser.LIMIT, 0)

        def sortItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.SortItemContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.SortItemContext,i)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,i)


        def ALL(self):
            return self.getToken(fugue_sqlParser.ALL, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_queryOrganization

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQueryOrganization" ):
                return visitor.visitQueryOrganization(self)
            else:
                return visitor.visitChildren(self)




    def queryOrganization(self):

        localctx = fugue_sqlParser.QueryOrganizationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_queryOrganization)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2373
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,295,self._ctx)
            if la_ == 1:
                self.state = 2363
                self.match(fugue_sqlParser.ORDER)
                self.state = 2364
                self.match(fugue_sqlParser.BY)
                self.state = 2365
                localctx._sortItem = self.sortItem()
                localctx.order.append(localctx._sortItem)
                self.state = 2370
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,294,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2366
                        self.match(fugue_sqlParser.T__0)
                        self.state = 2367
                        localctx._sortItem = self.sortItem()
                        localctx.order.append(localctx._sortItem) 
                    self.state = 2372
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,294,self._ctx)



            self.state = 2385
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,297,self._ctx)
            if la_ == 1:
                self.state = 2375
                self.match(fugue_sqlParser.CLUSTER)
                self.state = 2376
                self.match(fugue_sqlParser.BY)
                self.state = 2377
                localctx._expression = self.expression()
                localctx.clusterBy.append(localctx._expression)
                self.state = 2382
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,296,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2378
                        self.match(fugue_sqlParser.T__0)
                        self.state = 2379
                        localctx._expression = self.expression()
                        localctx.clusterBy.append(localctx._expression) 
                    self.state = 2384
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,296,self._ctx)



            self.state = 2397
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,299,self._ctx)
            if la_ == 1:
                self.state = 2387
                self.match(fugue_sqlParser.DISTRIBUTE)
                self.state = 2388
                self.match(fugue_sqlParser.BY)
                self.state = 2389
                localctx._expression = self.expression()
                localctx.distributeBy.append(localctx._expression)
                self.state = 2394
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,298,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2390
                        self.match(fugue_sqlParser.T__0)
                        self.state = 2391
                        localctx._expression = self.expression()
                        localctx.distributeBy.append(localctx._expression) 
                    self.state = 2396
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,298,self._ctx)



            self.state = 2409
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,301,self._ctx)
            if la_ == 1:
                self.state = 2399
                self.match(fugue_sqlParser.SORT)
                self.state = 2400
                self.match(fugue_sqlParser.BY)
                self.state = 2401
                localctx._sortItem = self.sortItem()
                localctx.sort.append(localctx._sortItem)
                self.state = 2406
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,300,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2402
                        self.match(fugue_sqlParser.T__0)
                        self.state = 2403
                        localctx._sortItem = self.sortItem()
                        localctx.sort.append(localctx._sortItem) 
                    self.state = 2408
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,300,self._ctx)



            self.state = 2412
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,302,self._ctx)
            if la_ == 1:
                self.state = 2411
                self.windowClause()


            self.state = 2419
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,304,self._ctx)
            if la_ == 1:
                self.state = 2414
                self.match(fugue_sqlParser.LIMIT)
                self.state = 2417
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,303,self._ctx)
                if la_ == 1:
                    self.state = 2415
                    self.match(fugue_sqlParser.ALL)
                    pass

                elif la_ == 2:
                    self.state = 2416
                    localctx.limit = self.expression()
                    pass




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiInsertQueryBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def insertInto(self):
            return self.getTypedRuleContext(fugue_sqlParser.InsertIntoContext,0)


        def fromStatementBody(self):
            return self.getTypedRuleContext(fugue_sqlParser.FromStatementBodyContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_multiInsertQueryBody

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiInsertQueryBody" ):
                return visitor.visitMultiInsertQueryBody(self)
            else:
                return visitor.visitChildren(self)




    def multiInsertQueryBody(self):

        localctx = fugue_sqlParser.MultiInsertQueryBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_multiInsertQueryBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2421
            self.insertInto()
            self.state = 2422
            self.fromStatementBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryTermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_queryTerm

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class QueryTermDefaultContext(QueryTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.QueryTermContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def queryPrimary(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryPrimaryContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQueryTermDefault" ):
                return visitor.visitQueryTermDefault(self)
            else:
                return visitor.visitChildren(self)


    class FugueTermContext(QueryTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.QueryTermContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def fugueNestableTaskCollectionNoSelect(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueNestableTaskCollectionNoSelectContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFugueTerm" ):
                return visitor.visitFugueTerm(self)
            else:
                return visitor.visitChildren(self)


    class SetOperationContext(QueryTermContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.QueryTermContext
            super().__init__(parser)
            self.left = None # QueryTermContext
            self.theOperator = None # Token
            self.right = None # QueryTermContext
            self.copyFrom(ctx)

        def queryTerm(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.QueryTermContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.QueryTermContext,i)

        def INTERSECT(self):
            return self.getToken(fugue_sqlParser.INTERSECT, 0)
        def UNION(self):
            return self.getToken(fugue_sqlParser.UNION, 0)
        def EXCEPT(self):
            return self.getToken(fugue_sqlParser.EXCEPT, 0)
        def SETMINUS(self):
            return self.getToken(fugue_sqlParser.SETMINUS, 0)
        def setQuantifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.SetQuantifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetOperation" ):
                return visitor.visitSetOperation(self)
            else:
                return visitor.visitChildren(self)



    def queryTerm(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = fugue_sqlParser.QueryTermContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 230
        self.enterRecursionRule(localctx, 230, self.RULE_queryTerm, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2427
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [142, 185, 229, 248, 269, 298]:
                localctx = fugue_sqlParser.QueryTermDefaultContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 2425
                self.queryPrimary()
                pass
            elif token in [17, 18, 26, 32, 35, 47, 57, 95, 118, 178, 232, 281]:
                localctx = fugue_sqlParser.FugueTermContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 2426
                self.fugueNestableTaskCollectionNoSelect()
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 2449
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,310,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 2447
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,309,self._ctx)
                    if la_ == 1:
                        localctx = fugue_sqlParser.SetOperationContext(self, fugue_sqlParser.QueryTermContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_queryTerm)
                        self.state = 2429
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 2430
                        localctx.theOperator = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==123 or _la==162 or _la==255 or _la==289):
                            localctx.theOperator = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 2432
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==56 or _la==116:
                            self.state = 2431
                            self.setQuantifier()


                        self.state = 2434
                        localctx.right = self.queryTerm(4)
                        pass

                    elif la_ == 2:
                        localctx = fugue_sqlParser.SetOperationContext(self, fugue_sqlParser.QueryTermContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_queryTerm)
                        self.state = 2435
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 2436
                        localctx.theOperator = self.match(fugue_sqlParser.INTERSECT)
                        self.state = 2438
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==56 or _la==116:
                            self.state = 2437
                            self.setQuantifier()


                        self.state = 2440
                        localctx.right = self.queryTerm(3)
                        pass

                    elif la_ == 3:
                        localctx = fugue_sqlParser.SetOperationContext(self, fugue_sqlParser.QueryTermContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_queryTerm)
                        self.state = 2441
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 2442
                        localctx.theOperator = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==123 or _la==255 or _la==289):
                            localctx.theOperator = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 2444
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==56 or _la==116:
                            self.state = 2443
                            self.setQuantifier()


                        self.state = 2446
                        localctx.right = self.queryTerm(2)
                        pass

             
                self.state = 2451
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,310,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class QueryPrimaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_queryPrimary

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class QueryPrimaryDefaultContext(QueryPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.QueryPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def querySpecification(self):
            return self.getTypedRuleContext(fugue_sqlParser.QuerySpecificationContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQueryPrimaryDefault" ):
                return visitor.visitQueryPrimaryDefault(self)
            else:
                return visitor.visitChildren(self)


    class InlineTableDefault1Context(QueryPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.QueryPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def inlineTable(self):
            return self.getTypedRuleContext(fugue_sqlParser.InlineTableContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInlineTableDefault1" ):
                return visitor.visitInlineTableDefault1(self)
            else:
                return visitor.visitChildren(self)


    class FromStmtContext(QueryPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.QueryPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def fromStatement(self):
            return self.getTypedRuleContext(fugue_sqlParser.FromStatementContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFromStmt" ):
                return visitor.visitFromStmt(self)
            else:
                return visitor.visitChildren(self)


    class TableContext(QueryPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.QueryPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)
        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable" ):
                return visitor.visitTable(self)
            else:
                return visitor.visitChildren(self)



    def queryPrimary(self):

        localctx = fugue_sqlParser.QueryPrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_queryPrimary)
        try:
            self.state = 2457
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [185, 229, 248]:
                localctx = fugue_sqlParser.QueryPrimaryDefaultContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2452
                self.querySpecification()
                pass
            elif token in [142]:
                localctx = fugue_sqlParser.FromStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2453
                self.fromStatement()
                pass
            elif token in [269]:
                localctx = fugue_sqlParser.TableContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2454
                self.match(fugue_sqlParser.TABLE)
                self.state = 2455
                self.multipartIdentifier()
                pass
            elif token in [298]:
                localctx = fugue_sqlParser.InlineTableDefault1Context(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2456
                self.inlineTable()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SortItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ordering = None # Token
            self.nullOrder = None # Token

        def expression(self):
            return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,0)


        def THENULLS(self):
            return self.getToken(fugue_sqlParser.THENULLS, 0)

        def ASC(self):
            return self.getToken(fugue_sqlParser.ASC, 0)

        def DESC(self):
            return self.getToken(fugue_sqlParser.DESC, 0)

        def LAST(self):
            return self.getToken(fugue_sqlParser.LAST, 0)

        def FIRST(self):
            return self.getToken(fugue_sqlParser.FIRST, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_sortItem

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSortItem" ):
                return visitor.visitSortItem(self)
            else:
                return visitor.visitChildren(self)




    def sortItem(self):

        localctx = fugue_sqlParser.SortItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_sortItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2459
            self.expression()
            self.state = 2461
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,312,self._ctx)
            if la_ == 1:
                self.state = 2460
                localctx.ordering = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==65 or _la==111):
                    localctx.ordering = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2465
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,313,self._ctx)
            if la_ == 1:
                self.state = 2463
                self.match(fugue_sqlParser.THENULLS)
                self.state = 2464
                localctx.nullOrder = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==136 or _la==169):
                    localctx.nullOrder = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FromStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fromClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.FromClauseContext,0)


        def fromStatementBody(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.FromStatementBodyContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.FromStatementBodyContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fromStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFromStatement" ):
                return visitor.visitFromStatement(self)
            else:
                return visitor.visitChildren(self)




    def fromStatement(self):

        localctx = fugue_sqlParser.FromStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_fromStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2467
            self.fromClause()
            self.state = 2469 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2468
                    self.fromStatementBody()

                else:
                    raise NoViableAltException(self)
                self.state = 2471 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,314,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FromStatementBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def transformClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.TransformClauseContext,0)


        def queryOrganization(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryOrganizationContext,0)


        def whereClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.WhereClauseContext,0)


        def selectClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.SelectClauseContext,0)


        def lateralView(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.LateralViewContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.LateralViewContext,i)


        def aggregationClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.AggregationClauseContext,0)


        def havingClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.HavingClauseContext,0)


        def windowClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.WindowClauseContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fromStatementBody

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFromStatementBody" ):
                return visitor.visitFromStatementBody(self)
            else:
                return visitor.visitChildren(self)




    def fromStatementBody(self):

        localctx = fugue_sqlParser.FromStatementBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_fromStatementBody)
        try:
            self.state = 2500
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,321,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2473
                self.transformClause()
                self.state = 2475
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,315,self._ctx)
                if la_ == 1:
                    self.state = 2474
                    self.whereClause()


                self.state = 2477
                self.queryOrganization()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2479
                self.selectClause()
                self.state = 2483
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,316,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2480
                        self.lateralView() 
                    self.state = 2485
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,316,self._ctx)

                self.state = 2487
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,317,self._ctx)
                if la_ == 1:
                    self.state = 2486
                    self.whereClause()


                self.state = 2490
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,318,self._ctx)
                if la_ == 1:
                    self.state = 2489
                    self.aggregationClause()


                self.state = 2493
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,319,self._ctx)
                if la_ == 1:
                    self.state = 2492
                    self.havingClause()


                self.state = 2496
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,320,self._ctx)
                if la_ == 1:
                    self.state = 2495
                    self.windowClause()


                self.state = 2498
                self.queryOrganization()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuerySpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_querySpecification

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RegularQuerySpecificationContext(QuerySpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.QuerySpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def selectClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.SelectClauseContext,0)

        def optionalFromClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.OptionalFromClauseContext,0)

        def lateralView(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.LateralViewContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.LateralViewContext,i)

        def whereClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.WhereClauseContext,0)

        def aggregationClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.AggregationClauseContext,0)

        def havingClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.HavingClauseContext,0)

        def windowClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.WindowClauseContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRegularQuerySpecification" ):
                return visitor.visitRegularQuerySpecification(self)
            else:
                return visitor.visitChildren(self)


    class TransformQuerySpecificationContext(QuerySpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.QuerySpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def transformClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.TransformClauseContext,0)

        def optionalFromClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.OptionalFromClauseContext,0)

        def whereClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.WhereClauseContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTransformQuerySpecification" ):
                return visitor.visitTransformQuerySpecification(self)
            else:
                return visitor.visitChildren(self)



    def querySpecification(self):

        localctx = fugue_sqlParser.QuerySpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_querySpecification)
        try:
            self.state = 2527
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,328,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.TransformQuerySpecificationContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2502
                self.transformClause()
                self.state = 2503
                self.optionalFromClause()
                self.state = 2505
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,322,self._ctx)
                if la_ == 1:
                    self.state = 2504
                    self.whereClause()


                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.RegularQuerySpecificationContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2507
                self.selectClause()
                self.state = 2508
                self.optionalFromClause()
                self.state = 2512
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,323,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2509
                        self.lateralView() 
                    self.state = 2514
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,323,self._ctx)

                self.state = 2516
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,324,self._ctx)
                if la_ == 1:
                    self.state = 2515
                    self.whereClause()


                self.state = 2519
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,325,self._ctx)
                if la_ == 1:
                    self.state = 2518
                    self.aggregationClause()


                self.state = 2522
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,326,self._ctx)
                if la_ == 1:
                    self.state = 2521
                    self.havingClause()


                self.state = 2525
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,327,self._ctx)
                if la_ == 1:
                    self.state = 2524
                    self.windowClause()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptionalFromClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fromClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.FromClauseContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_optionalFromClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOptionalFromClause" ):
                return visitor.visitOptionalFromClause(self)
            else:
                return visitor.visitChildren(self)




    def optionalFromClause(self):

        localctx = fugue_sqlParser.OptionalFromClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_optionalFromClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2530
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,329,self._ctx)
            if la_ == 1:
                self.state = 2529
                self.fromClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransformClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.kind = None # Token
            self.inRowFormat = None # RowFormatContext
            self.recordWriter = None # Token
            self.script = None # Token
            self.outRowFormat = None # RowFormatContext
            self.recordReader = None # Token

        def USING(self):
            return self.getToken(fugue_sqlParser.USING, 0)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.STRING)
            else:
                return self.getToken(fugue_sqlParser.STRING, i)

        def SELECT(self):
            return self.getToken(fugue_sqlParser.SELECT, 0)

        def namedExpressionSeq(self):
            return self.getTypedRuleContext(fugue_sqlParser.NamedExpressionSeqContext,0)


        def TRANSFORM(self):
            return self.getToken(fugue_sqlParser.TRANSFORM, 0)

        def MAP(self):
            return self.getToken(fugue_sqlParser.MAP, 0)

        def REDUCE(self):
            return self.getToken(fugue_sqlParser.REDUCE, 0)

        def RECORDWRITER(self):
            return self.getToken(fugue_sqlParser.RECORDWRITER, 0)

        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)

        def RECORDREADER(self):
            return self.getToken(fugue_sqlParser.RECORDREADER, 0)

        def rowFormat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.RowFormatContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.RowFormatContext,i)


        def identifierSeq(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierSeqContext,0)


        def colTypeList(self):
            return self.getTypedRuleContext(fugue_sqlParser.ColTypeListContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_transformClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTransformClause" ):
                return visitor.visitTransformClause(self)
            else:
                return visitor.visitChildren(self)




    def transformClause(self):

        localctx = fugue_sqlParser.TransformClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_transformClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2542
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [248]:
                self.state = 2532
                self.match(fugue_sqlParser.SELECT)
                self.state = 2533
                localctx.kind = self.match(fugue_sqlParser.TRANSFORM)
                self.state = 2534
                self.match(fugue_sqlParser.T__2)
                self.state = 2535
                self.namedExpressionSeq()
                self.state = 2536
                self.match(fugue_sqlParser.T__3)
                pass
            elif token in [185]:
                self.state = 2538
                localctx.kind = self.match(fugue_sqlParser.MAP)
                self.state = 2539
                self.namedExpressionSeq()
                pass
            elif token in [229]:
                self.state = 2540
                localctx.kind = self.match(fugue_sqlParser.REDUCE)
                self.state = 2541
                self.namedExpressionSeq()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2545
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==244:
                self.state = 2544
                localctx.inRowFormat = self.rowFormat()


            self.state = 2549
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==227:
                self.state = 2547
                self.match(fugue_sqlParser.RECORDWRITER)
                self.state = 2548
                localctx.recordWriter = self.match(fugue_sqlParser.STRING)


            self.state = 2551
            self.match(fugue_sqlParser.USING)
            self.state = 2552
            localctx.script = self.match(fugue_sqlParser.STRING)
            self.state = 2565
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,335,self._ctx)
            if la_ == 1:
                self.state = 2553
                self.match(fugue_sqlParser.AS)
                self.state = 2563
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,334,self._ctx)
                if la_ == 1:
                    self.state = 2554
                    self.identifierSeq()
                    pass

                elif la_ == 2:
                    self.state = 2555
                    self.colTypeList()
                    pass

                elif la_ == 3:
                    self.state = 2556
                    self.match(fugue_sqlParser.T__2)
                    self.state = 2559
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,333,self._ctx)
                    if la_ == 1:
                        self.state = 2557
                        self.identifierSeq()
                        pass

                    elif la_ == 2:
                        self.state = 2558
                        self.colTypeList()
                        pass


                    self.state = 2561
                    self.match(fugue_sqlParser.T__3)
                    pass




            self.state = 2568
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,336,self._ctx)
            if la_ == 1:
                self.state = 2567
                localctx.outRowFormat = self.rowFormat()


            self.state = 2572
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,337,self._ctx)
            if la_ == 1:
                self.state = 2570
                self.match(fugue_sqlParser.RECORDREADER)
                self.state = 2571
                localctx.recordReader = self.match(fugue_sqlParser.STRING)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._hint = None # HintContext
            self.hints = list() # of HintContexts

        def SELECT(self):
            return self.getToken(fugue_sqlParser.SELECT, 0)

        def namedExpressionSeq(self):
            return self.getTypedRuleContext(fugue_sqlParser.NamedExpressionSeqContext,0)


        def setQuantifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.SetQuantifierContext,0)


        def hint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.HintContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.HintContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_selectClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectClause" ):
                return visitor.visitSelectClause(self)
            else:
                return visitor.visitChildren(self)




    def selectClause(self):

        localctx = fugue_sqlParser.SelectClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_selectClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2574
            self.match(fugue_sqlParser.SELECT)
            self.state = 2578
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==14:
                self.state = 2575
                localctx._hint = self.hint()
                localctx.hints.append(localctx._hint)
                self.state = 2580
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2582
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,339,self._ctx)
            if la_ == 1:
                self.state = 2581
                self.setQuantifier()


            self.state = 2584
            self.namedExpressionSeq()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(fugue_sqlParser.SET, 0)

        def assignmentList(self):
            return self.getTypedRuleContext(fugue_sqlParser.AssignmentListContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_setClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetClause" ):
                return visitor.visitSetClause(self)
            else:
                return visitor.visitChildren(self)




    def setClause(self):

        localctx = fugue_sqlParser.SetClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_setClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2586
            self.match(fugue_sqlParser.SET)
            self.state = 2587
            self.assignmentList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatchedClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.matchedCond = None # BooleanExpressionContext

        def WHEN(self):
            return self.getToken(fugue_sqlParser.WHEN, 0)

        def MATCHED(self):
            return self.getToken(fugue_sqlParser.MATCHED, 0)

        def THEN(self):
            return self.getToken(fugue_sqlParser.THEN, 0)

        def matchedAction(self):
            return self.getTypedRuleContext(fugue_sqlParser.MatchedActionContext,0)


        def AND(self):
            return self.getToken(fugue_sqlParser.AND, 0)

        def booleanExpression(self):
            return self.getTypedRuleContext(fugue_sqlParser.BooleanExpressionContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_matchedClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMatchedClause" ):
                return visitor.visitMatchedClause(self)
            else:
                return visitor.visitChildren(self)




    def matchedClause(self):

        localctx = fugue_sqlParser.MatchedClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_matchedClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2589
            self.match(fugue_sqlParser.WHEN)
            self.state = 2590
            self.match(fugue_sqlParser.MATCHED)
            self.state = 2593
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==59:
                self.state = 2591
                self.match(fugue_sqlParser.AND)
                self.state = 2592
                localctx.matchedCond = self.booleanExpression(0)


            self.state = 2595
            self.match(fugue_sqlParser.THEN)
            self.state = 2596
            self.matchedAction()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NotMatchedClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.notMatchedCond = None # BooleanExpressionContext

        def WHEN(self):
            return self.getToken(fugue_sqlParser.WHEN, 0)

        def NOT(self):
            return self.getToken(fugue_sqlParser.NOT, 0)

        def MATCHED(self):
            return self.getToken(fugue_sqlParser.MATCHED, 0)

        def THEN(self):
            return self.getToken(fugue_sqlParser.THEN, 0)

        def notMatchedAction(self):
            return self.getTypedRuleContext(fugue_sqlParser.NotMatchedActionContext,0)


        def AND(self):
            return self.getToken(fugue_sqlParser.AND, 0)

        def booleanExpression(self):
            return self.getTypedRuleContext(fugue_sqlParser.BooleanExpressionContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_notMatchedClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNotMatchedClause" ):
                return visitor.visitNotMatchedClause(self)
            else:
                return visitor.visitChildren(self)




    def notMatchedClause(self):

        localctx = fugue_sqlParser.NotMatchedClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_notMatchedClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2598
            self.match(fugue_sqlParser.WHEN)
            self.state = 2599
            self.match(fugue_sqlParser.NOT)
            self.state = 2600
            self.match(fugue_sqlParser.MATCHED)
            self.state = 2603
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==59:
                self.state = 2601
                self.match(fugue_sqlParser.AND)
                self.state = 2602
                localctx.notMatchedCond = self.booleanExpression(0)


            self.state = 2605
            self.match(fugue_sqlParser.THEN)
            self.state = 2606
            self.notMatchedAction()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MatchedActionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE(self):
            return self.getToken(fugue_sqlParser.DELETE, 0)

        def UPDATE(self):
            return self.getToken(fugue_sqlParser.UPDATE, 0)

        def SET(self):
            return self.getToken(fugue_sqlParser.SET, 0)

        def ASTERISK(self):
            return self.getToken(fugue_sqlParser.ASTERISK, 0)

        def assignmentList(self):
            return self.getTypedRuleContext(fugue_sqlParser.AssignmentListContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_matchedAction

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMatchedAction" ):
                return visitor.visitMatchedAction(self)
            else:
                return visitor.visitChildren(self)




    def matchedAction(self):

        localctx = fugue_sqlParser.MatchedActionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_matchedAction)
        try:
            self.state = 2615
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,342,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2608
                self.match(fugue_sqlParser.DELETE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2609
                self.match(fugue_sqlParser.UPDATE)
                self.state = 2610
                self.match(fugue_sqlParser.SET)
                self.state = 2611
                self.match(fugue_sqlParser.ASTERISK)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2612
                self.match(fugue_sqlParser.UPDATE)
                self.state = 2613
                self.match(fugue_sqlParser.SET)
                self.state = 2614
                self.assignmentList()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NotMatchedActionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.columns = None # MultipartIdentifierListContext

        def INSERT(self):
            return self.getToken(fugue_sqlParser.INSERT, 0)

        def ASTERISK(self):
            return self.getToken(fugue_sqlParser.ASTERISK, 0)

        def VALUES(self):
            return self.getToken(fugue_sqlParser.VALUES, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,i)


        def multipartIdentifierList(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierListContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_notMatchedAction

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNotMatchedAction" ):
                return visitor.visitNotMatchedAction(self)
            else:
                return visitor.visitChildren(self)




    def notMatchedAction(self):

        localctx = fugue_sqlParser.NotMatchedActionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_notMatchedAction)
        self._la = 0 # Token type
        try:
            self.state = 2635
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,344,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2617
                self.match(fugue_sqlParser.INSERT)
                self.state = 2618
                self.match(fugue_sqlParser.ASTERISK)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2619
                self.match(fugue_sqlParser.INSERT)
                self.state = 2620
                self.match(fugue_sqlParser.T__2)
                self.state = 2621
                localctx.columns = self.multipartIdentifierList()
                self.state = 2622
                self.match(fugue_sqlParser.T__3)
                self.state = 2623
                self.match(fugue_sqlParser.VALUES)
                self.state = 2624
                self.match(fugue_sqlParser.T__2)
                self.state = 2625
                self.expression()
                self.state = 2630
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1:
                    self.state = 2626
                    self.match(fugue_sqlParser.T__0)
                    self.state = 2627
                    self.expression()
                    self.state = 2632
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2633
                self.match(fugue_sqlParser.T__3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.AssignmentContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.AssignmentContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_assignmentList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignmentList" ):
                return visitor.visitAssignmentList(self)
            else:
                return visitor.visitChildren(self)




    def assignmentList(self):

        localctx = fugue_sqlParser.AssignmentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_assignmentList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2637
            self.assignment()
            self.state = 2642
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1:
                self.state = 2638
                self.match(fugue_sqlParser.T__0)
                self.state = 2639
                self.assignment()
                self.state = 2644
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.key = None # MultipartIdentifierContext
            self.value = None # ExpressionContext

        def EQUAL(self):
            return self.getToken(fugue_sqlParser.EQUAL, 0)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)


        def expression(self):
            return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_assignment

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignment" ):
                return visitor.visitAssignment(self)
            else:
                return visitor.visitChildren(self)




    def assignment(self):

        localctx = fugue_sqlParser.AssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_assignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2645
            localctx.key = self.multipartIdentifier()
            self.state = 2646
            self.match(fugue_sqlParser.EQUAL)
            self.state = 2647
            localctx.value = self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhereClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(fugue_sqlParser.WHERE, 0)

        def booleanExpression(self):
            return self.getTypedRuleContext(fugue_sqlParser.BooleanExpressionContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_whereClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhereClause" ):
                return visitor.visitWhereClause(self)
            else:
                return visitor.visitChildren(self)




    def whereClause(self):

        localctx = fugue_sqlParser.WhereClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_whereClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2649
            self.match(fugue_sqlParser.WHERE)
            self.state = 2650
            self.booleanExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HavingClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HAVING(self):
            return self.getToken(fugue_sqlParser.HAVING, 0)

        def booleanExpression(self):
            return self.getTypedRuleContext(fugue_sqlParser.BooleanExpressionContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_havingClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHavingClause" ):
                return visitor.visitHavingClause(self)
            else:
                return visitor.visitChildren(self)




    def havingClause(self):

        localctx = fugue_sqlParser.HavingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_havingClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2652
            self.match(fugue_sqlParser.HAVING)
            self.state = 2653
            self.booleanExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._hintStatement = None # HintStatementContext
            self.hintStatements = list() # of HintStatementContexts

        def hintStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.HintStatementContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.HintStatementContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_hint

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHint" ):
                return visitor.visitHint(self)
            else:
                return visitor.visitChildren(self)




    def hint(self):

        localctx = fugue_sqlParser.HintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_hint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2655
            self.match(fugue_sqlParser.T__13)
            self.state = 2656
            localctx._hintStatement = self.hintStatement()
            localctx.hintStatements.append(localctx._hintStatement)
            self.state = 2663
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((_la) & ~0x3f) == 0 and ((1 << _la) & -18014398509481982) != 0 or (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1) != 0 or (((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -1) != 0 or (((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & -1) != 0 or (((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & 1125899906842623) != 0 or (((_la - 320)) & ~0x3f) == 0 and ((1 << (_la - 320)) & 98305) != 0:
                self.state = 2658
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 2657
                    self.match(fugue_sqlParser.T__0)


                self.state = 2660
                localctx._hintStatement = self.hintStatement()
                localctx.hintStatements.append(localctx._hintStatement)
                self.state = 2665
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2666
            self.match(fugue_sqlParser.T__14)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HintStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.hintName = None # IdentifierContext
            self._primaryExpression = None # PrimaryExpressionContext
            self.parameters = list() # of PrimaryExpressionContexts

        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)


        def primaryExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.PrimaryExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.PrimaryExpressionContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_hintStatement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHintStatement" ):
                return visitor.visitHintStatement(self)
            else:
                return visitor.visitChildren(self)




    def hintStatement(self):

        localctx = fugue_sqlParser.HintStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_hintStatement)
        self._la = 0 # Token type
        try:
            self.state = 2681
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,349,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2668
                localctx.hintName = self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2669
                localctx.hintName = self.identifier()
                self.state = 2670
                self.match(fugue_sqlParser.T__2)
                self.state = 2671
                localctx._primaryExpression = self.primaryExpression(0)
                localctx.parameters.append(localctx._primaryExpression)
                self.state = 2676
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1:
                    self.state = 2672
                    self.match(fugue_sqlParser.T__0)
                    self.state = 2673
                    localctx._primaryExpression = self.primaryExpression(0)
                    localctx.parameters.append(localctx._primaryExpression)
                    self.state = 2678
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2679
                self.match(fugue_sqlParser.T__3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FromClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(fugue_sqlParser.FROM, 0)

        def relation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.RelationContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.RelationContext,i)


        def lateralView(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.LateralViewContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.LateralViewContext,i)


        def pivotClause(self):
            return self.getTypedRuleContext(fugue_sqlParser.PivotClauseContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_fromClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFromClause" ):
                return visitor.visitFromClause(self)
            else:
                return visitor.visitChildren(self)




    def fromClause(self):

        localctx = fugue_sqlParser.FromClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_fromClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2683
            self.match(fugue_sqlParser.FROM)
            self.state = 2684
            self.relation()
            self.state = 2689
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,350,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2685
                    self.match(fugue_sqlParser.T__0)
                    self.state = 2686
                    self.relation() 
                self.state = 2691
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,350,self._ctx)

            self.state = 2695
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,351,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2692
                    self.lateralView() 
                self.state = 2697
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,351,self._ctx)

            self.state = 2699
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,352,self._ctx)
            if la_ == 1:
                self.state = 2698
                self.pivotClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AggregationClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._expression = None # ExpressionContext
            self.groupingExpressions = list() # of ExpressionContexts
            self.kind = None # Token

        def GROUP(self):
            return self.getToken(fugue_sqlParser.GROUP, 0)

        def BY(self):
            return self.getToken(fugue_sqlParser.BY, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,i)


        def WITH(self):
            return self.getToken(fugue_sqlParser.WITH, 0)

        def SETS(self):
            return self.getToken(fugue_sqlParser.SETS, 0)

        def groupingSet(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.GroupingSetContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.GroupingSetContext,i)


        def ROLLUP(self):
            return self.getToken(fugue_sqlParser.ROLLUP, 0)

        def CUBE(self):
            return self.getToken(fugue_sqlParser.CUBE, 0)

        def GROUPING(self):
            return self.getToken(fugue_sqlParser.GROUPING, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_aggregationClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAggregationClause" ):
                return visitor.visitAggregationClause(self)
            else:
                return visitor.visitChildren(self)




    def aggregationClause(self):

        localctx = fugue_sqlParser.AggregationClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_aggregationClause)
        self._la = 0 # Token type
        try:
            self.state = 2745
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,357,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2701
                self.match(fugue_sqlParser.GROUP)
                self.state = 2702
                self.match(fugue_sqlParser.BY)
                self.state = 2703
                localctx._expression = self.expression()
                localctx.groupingExpressions.append(localctx._expression)
                self.state = 2708
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,353,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2704
                        self.match(fugue_sqlParser.T__0)
                        self.state = 2705
                        localctx._expression = self.expression()
                        localctx.groupingExpressions.append(localctx._expression) 
                    self.state = 2710
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,353,self._ctx)

                self.state = 2728
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,355,self._ctx)
                if la_ == 1:
                    self.state = 2711
                    self.match(fugue_sqlParser.WITH)
                    self.state = 2712
                    localctx.kind = self.match(fugue_sqlParser.ROLLUP)

                elif la_ == 2:
                    self.state = 2713
                    self.match(fugue_sqlParser.WITH)
                    self.state = 2714
                    localctx.kind = self.match(fugue_sqlParser.CUBE)

                elif la_ == 3:
                    self.state = 2715
                    localctx.kind = self.match(fugue_sqlParser.GROUPING)
                    self.state = 2716
                    self.match(fugue_sqlParser.SETS)
                    self.state = 2717
                    self.match(fugue_sqlParser.T__2)
                    self.state = 2718
                    self.groupingSet()
                    self.state = 2723
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1:
                        self.state = 2719
                        self.match(fugue_sqlParser.T__0)
                        self.state = 2720
                        self.groupingSet()
                        self.state = 2725
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2726
                    self.match(fugue_sqlParser.T__3)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2730
                self.match(fugue_sqlParser.GROUP)
                self.state = 2731
                self.match(fugue_sqlParser.BY)
                self.state = 2732
                localctx.kind = self.match(fugue_sqlParser.GROUPING)
                self.state = 2733
                self.match(fugue_sqlParser.SETS)
                self.state = 2734
                self.match(fugue_sqlParser.T__2)
                self.state = 2735
                self.groupingSet()
                self.state = 2740
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1:
                    self.state = 2736
                    self.match(fugue_sqlParser.T__0)
                    self.state = 2737
                    self.groupingSet()
                    self.state = 2742
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2743
                self.match(fugue_sqlParser.T__3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupingSetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_groupingSet

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroupingSet" ):
                return visitor.visitGroupingSet(self)
            else:
                return visitor.visitChildren(self)




    def groupingSet(self):

        localctx = fugue_sqlParser.GroupingSetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_groupingSet)
        self._la = 0 # Token type
        try:
            self.state = 2760
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,360,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2747
                self.match(fugue_sqlParser.T__2)
                self.state = 2756
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((_la) & ~0x3f) == 0 and ((1 << _la) & -18014398509481976) != 0 or (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1) != 0 or (((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -1) != 0 or (((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & -1) != 0 or (((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & 4036351166030807039) != 0 or (((_la - 320)) & ~0x3f) == 0 and ((1 << (_la - 320)) & 131011) != 0:
                    self.state = 2748
                    self.expression()
                    self.state = 2753
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1:
                        self.state = 2749
                        self.match(fugue_sqlParser.T__0)
                        self.state = 2750
                        self.expression()
                        self.state = 2755
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 2758
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2759
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PivotClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.aggregates = None # NamedExpressionSeqContext
            self._pivotValue = None # PivotValueContext
            self.pivotValues = list() # of PivotValueContexts

        def PIVOT(self):
            return self.getToken(fugue_sqlParser.PIVOT, 0)

        def FOR(self):
            return self.getToken(fugue_sqlParser.FOR, 0)

        def pivotColumn(self):
            return self.getTypedRuleContext(fugue_sqlParser.PivotColumnContext,0)


        def IN(self):
            return self.getToken(fugue_sqlParser.IN, 0)

        def namedExpressionSeq(self):
            return self.getTypedRuleContext(fugue_sqlParser.NamedExpressionSeqContext,0)


        def pivotValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.PivotValueContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.PivotValueContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_pivotClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPivotClause" ):
                return visitor.visitPivotClause(self)
            else:
                return visitor.visitChildren(self)




    def pivotClause(self):

        localctx = fugue_sqlParser.PivotClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_pivotClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2762
            self.match(fugue_sqlParser.PIVOT)
            self.state = 2763
            self.match(fugue_sqlParser.T__2)
            self.state = 2764
            localctx.aggregates = self.namedExpressionSeq()
            self.state = 2765
            self.match(fugue_sqlParser.FOR)
            self.state = 2766
            self.pivotColumn()
            self.state = 2767
            self.match(fugue_sqlParser.IN)
            self.state = 2768
            self.match(fugue_sqlParser.T__2)
            self.state = 2769
            localctx._pivotValue = self.pivotValue()
            localctx.pivotValues.append(localctx._pivotValue)
            self.state = 2774
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1:
                self.state = 2770
                self.match(fugue_sqlParser.T__0)
                self.state = 2771
                localctx._pivotValue = self.pivotValue()
                localctx.pivotValues.append(localctx._pivotValue)
                self.state = 2776
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2777
            self.match(fugue_sqlParser.T__3)
            self.state = 2778
            self.match(fugue_sqlParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PivotColumnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._identifier = None # IdentifierContext
            self.identifiers = list() # of IdentifierContexts

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_pivotColumn

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPivotColumn" ):
                return visitor.visitPivotColumn(self)
            else:
                return visitor.visitChildren(self)




    def pivotColumn(self):

        localctx = fugue_sqlParser.PivotColumnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_pivotColumn)
        self._la = 0 # Token type
        try:
            self.state = 2792
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 320, 335, 336]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2780
                localctx._identifier = self.identifier()
                localctx.identifiers.append(localctx._identifier)
                pass
            elif token in [3]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2781
                self.match(fugue_sqlParser.T__2)
                self.state = 2782
                localctx._identifier = self.identifier()
                localctx.identifiers.append(localctx._identifier)
                self.state = 2787
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1:
                    self.state = 2783
                    self.match(fugue_sqlParser.T__0)
                    self.state = 2784
                    localctx._identifier = self.identifier()
                    localctx.identifiers.append(localctx._identifier)
                    self.state = 2789
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2790
                self.match(fugue_sqlParser.T__3)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PivotValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,0)


        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)


        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_pivotValue

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPivotValue" ):
                return visitor.visitPivotValue(self)
            else:
                return visitor.visitChildren(self)




    def pivotValue(self):

        localctx = fugue_sqlParser.PivotValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_pivotValue)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2794
            self.expression()
            self.state = 2799
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 54)) & ~0x3f) == 0 and ((1 << (_la - 54)) & -1) != 0 or (((_la - 118)) & ~0x3f) == 0 and ((1 << (_la - 118)) & -1) != 0 or (((_la - 182)) & ~0x3f) == 0 and ((1 << (_la - 182)) & -1) != 0 or (((_la - 246)) & ~0x3f) == 0 and ((1 << (_la - 246)) & 1152921504606846975) != 0 or (((_la - 320)) & ~0x3f) == 0 and ((1 << (_la - 320)) & 98305) != 0:
                self.state = 2796
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,364,self._ctx)
                if la_ == 1:
                    self.state = 2795
                    self.match(fugue_sqlParser.AS)


                self.state = 2798
                self.identifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LateralViewContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.tblName = None # IdentifierContext
            self._identifier = None # IdentifierContext
            self.colName = list() # of IdentifierContexts

        def LATERAL(self):
            return self.getToken(fugue_sqlParser.LATERAL, 0)

        def VIEW(self):
            return self.getToken(fugue_sqlParser.VIEW, 0)

        def qualifiedName(self):
            return self.getTypedRuleContext(fugue_sqlParser.QualifiedNameContext,0)


        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,i)


        def OUTER(self):
            return self.getToken(fugue_sqlParser.OUTER, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,i)


        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_lateralView

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLateralView" ):
                return visitor.visitLateralView(self)
            else:
                return visitor.visitChildren(self)




    def lateralView(self):

        localctx = fugue_sqlParser.LateralViewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_lateralView)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2801
            self.match(fugue_sqlParser.LATERAL)
            self.state = 2802
            self.match(fugue_sqlParser.VIEW)
            self.state = 2804
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,366,self._ctx)
            if la_ == 1:
                self.state = 2803
                self.match(fugue_sqlParser.OUTER)


            self.state = 2806
            self.qualifiedName()
            self.state = 2807
            self.match(fugue_sqlParser.T__2)
            self.state = 2816
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & -18014398509481976) != 0 or (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1) != 0 or (((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -1) != 0 or (((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & -1) != 0 or (((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & 4036351166030807039) != 0 or (((_la - 320)) & ~0x3f) == 0 and ((1 << (_la - 320)) & 131011) != 0:
                self.state = 2808
                self.expression()
                self.state = 2813
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1:
                    self.state = 2809
                    self.match(fugue_sqlParser.T__0)
                    self.state = 2810
                    self.expression()
                    self.state = 2815
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2818
            self.match(fugue_sqlParser.T__3)
            self.state = 2819
            localctx.tblName = self.identifier()
            self.state = 2831
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,371,self._ctx)
            if la_ == 1:
                self.state = 2821
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,369,self._ctx)
                if la_ == 1:
                    self.state = 2820
                    self.match(fugue_sqlParser.AS)


                self.state = 2823
                localctx._identifier = self.identifier()
                localctx.colName.append(localctx._identifier)
                self.state = 2828
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,370,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2824
                        self.match(fugue_sqlParser.T__0)
                        self.state = 2825
                        localctx._identifier = self.identifier()
                        localctx.colName.append(localctx._identifier) 
                    self.state = 2830
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,370,self._ctx)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetQuantifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DISTINCT(self):
            return self.getToken(fugue_sqlParser.DISTINCT, 0)

        def ALL(self):
            return self.getToken(fugue_sqlParser.ALL, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_setQuantifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetQuantifier" ):
                return visitor.visitSetQuantifier(self)
            else:
                return visitor.visitChildren(self)




    def setQuantifier(self):

        localctx = fugue_sqlParser.SetQuantifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_setQuantifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2833
            _la = self._input.LA(1)
            if not(_la==56 or _la==116):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relationPrimary(self):
            return self.getTypedRuleContext(fugue_sqlParser.RelationPrimaryContext,0)


        def joinRelation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.JoinRelationContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.JoinRelationContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_relation

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelation" ):
                return visitor.visitRelation(self)
            else:
                return visitor.visitChildren(self)




    def relation(self):

        localctx = fugue_sqlParser.RelationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_relation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2835
            self.relationPrimary()
            self.state = 2839
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,372,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2836
                    self.joinRelation() 
                self.state = 2841
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,372,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinRelationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.right = None # RelationPrimaryContext

        def joinType(self):
            return self.getTypedRuleContext(fugue_sqlParser.JoinTypeContext,0)


        def JOIN(self):
            return self.getToken(fugue_sqlParser.JOIN, 0)

        def relationPrimary(self):
            return self.getTypedRuleContext(fugue_sqlParser.RelationPrimaryContext,0)


        def joinCriteria(self):
            return self.getTypedRuleContext(fugue_sqlParser.JoinCriteriaContext,0)


        def NATURAL(self):
            return self.getToken(fugue_sqlParser.NATURAL, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_joinRelation

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinRelation" ):
                return visitor.visitJoinRelation(self)
            else:
                return visitor.visitChildren(self)




    def joinRelation(self):

        localctx = fugue_sqlParser.JoinRelationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_joinRelation)
        try:
            self.state = 2853
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [60, 96, 143, 158, 167, 173, 238, 249]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2842
                self.joinType()
                self.state = 2843
                self.match(fugue_sqlParser.JOIN)
                self.state = 2844
                localctx.right = self.relationPrimary()
                self.state = 2846
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,373,self._ctx)
                if la_ == 1:
                    self.state = 2845
                    self.joinCriteria()


                pass
            elif token in [193]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2848
                self.match(fugue_sqlParser.NATURAL)
                self.state = 2849
                self.joinType()
                self.state = 2850
                self.match(fugue_sqlParser.JOIN)
                self.state = 2851
                localctx.right = self.relationPrimary()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INNER(self):
            return self.getToken(fugue_sqlParser.INNER, 0)

        def CROSS(self):
            return self.getToken(fugue_sqlParser.CROSS, 0)

        def LEFT(self):
            return self.getToken(fugue_sqlParser.LEFT, 0)

        def OUTER(self):
            return self.getToken(fugue_sqlParser.OUTER, 0)

        def SEMI(self):
            return self.getToken(fugue_sqlParser.SEMI, 0)

        def RIGHT(self):
            return self.getToken(fugue_sqlParser.RIGHT, 0)

        def FULL(self):
            return self.getToken(fugue_sqlParser.FULL, 0)

        def ANTI(self):
            return self.getToken(fugue_sqlParser.ANTI, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_joinType

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinType" ):
                return visitor.visitJoinType(self)
            else:
                return visitor.visitChildren(self)




    def joinType(self):

        localctx = fugue_sqlParser.JoinTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_joinType)
        self._la = 0 # Token type
        try:
            self.state = 2879
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,381,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2856
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==158:
                    self.state = 2855
                    self.match(fugue_sqlParser.INNER)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2858
                self.match(fugue_sqlParser.CROSS)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2859
                self.match(fugue_sqlParser.LEFT)
                self.state = 2861
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==206:
                    self.state = 2860
                    self.match(fugue_sqlParser.OUTER)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2864
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==173:
                    self.state = 2863
                    self.match(fugue_sqlParser.LEFT)


                self.state = 2866
                self.match(fugue_sqlParser.SEMI)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2867
                self.match(fugue_sqlParser.RIGHT)
                self.state = 2869
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==206:
                    self.state = 2868
                    self.match(fugue_sqlParser.OUTER)


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2871
                self.match(fugue_sqlParser.FULL)
                self.state = 2873
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==206:
                    self.state = 2872
                    self.match(fugue_sqlParser.OUTER)


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2876
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==173:
                    self.state = 2875
                    self.match(fugue_sqlParser.LEFT)


                self.state = 2878
                self.match(fugue_sqlParser.ANTI)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinCriteriaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(fugue_sqlParser.ON, 0)

        def booleanExpression(self):
            return self.getTypedRuleContext(fugue_sqlParser.BooleanExpressionContext,0)


        def USING(self):
            return self.getToken(fugue_sqlParser.USING, 0)

        def identifierList(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierListContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_joinCriteria

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoinCriteria" ):
                return visitor.visitJoinCriteria(self)
            else:
                return visitor.visitChildren(self)




    def joinCriteria(self):

        localctx = fugue_sqlParser.JoinCriteriaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_joinCriteria)
        try:
            self.state = 2885
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [199]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2881
                self.match(fugue_sqlParser.ON)
                self.state = 2882
                self.booleanExpression(0)
                pass
            elif token in [297]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2883
                self.match(fugue_sqlParser.USING)
                self.state = 2884
                self.identifierList()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SampleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLESAMPLE(self):
            return self.getToken(fugue_sqlParser.TABLESAMPLE, 0)

        def sampleMethod(self):
            return self.getTypedRuleContext(fugue_sqlParser.SampleMethodContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_sample

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSample" ):
                return visitor.visitSample(self)
            else:
                return visitor.visitChildren(self)




    def sample(self):

        localctx = fugue_sqlParser.SampleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_sample)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2887
            self.match(fugue_sqlParser.TABLESAMPLE)
            self.state = 2888
            self.match(fugue_sqlParser.T__2)
            self.state = 2890
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & -18014398509481976) != 0 or (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1) != 0 or (((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -1) != 0 or (((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & -1) != 0 or (((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & 4036351166030807039) != 0 or (((_la - 320)) & ~0x3f) == 0 and ((1 << (_la - 320)) & 131011) != 0:
                self.state = 2889
                self.sampleMethod()


            self.state = 2892
            self.match(fugue_sqlParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SampleMethodContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_sampleMethod

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SampleByRowsContext(SampleMethodContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.SampleMethodContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,0)

        def ROWS(self):
            return self.getToken(fugue_sqlParser.ROWS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSampleByRows" ):
                return visitor.visitSampleByRows(self)
            else:
                return visitor.visitChildren(self)


    class SampleByPercentileContext(SampleMethodContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.SampleMethodContext
            super().__init__(parser)
            self.negativeSign = None # Token
            self.percentage = None # Token
            self.copyFrom(ctx)

        def PERCENTLIT(self):
            return self.getToken(fugue_sqlParser.PERCENTLIT, 0)
        def INTEGER_VALUE(self):
            return self.getToken(fugue_sqlParser.INTEGER_VALUE, 0)
        def DECIMAL_VALUE(self):
            return self.getToken(fugue_sqlParser.DECIMAL_VALUE, 0)
        def MINUS(self):
            return self.getToken(fugue_sqlParser.MINUS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSampleByPercentile" ):
                return visitor.visitSampleByPercentile(self)
            else:
                return visitor.visitChildren(self)


    class SampleByBucketContext(SampleMethodContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.SampleMethodContext
            super().__init__(parser)
            self.sampleType = None # Token
            self.numerator = None # Token
            self.denominator = None # Token
            self.copyFrom(ctx)

        def OUT(self):
            return self.getToken(fugue_sqlParser.OUT, 0)
        def OF(self):
            return self.getToken(fugue_sqlParser.OF, 0)
        def BUCKET(self):
            return self.getToken(fugue_sqlParser.BUCKET, 0)
        def INTEGER_VALUE(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.INTEGER_VALUE)
            else:
                return self.getToken(fugue_sqlParser.INTEGER_VALUE, i)
        def ON(self):
            return self.getToken(fugue_sqlParser.ON, 0)
        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)

        def qualifiedName(self):
            return self.getTypedRuleContext(fugue_sqlParser.QualifiedNameContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSampleByBucket" ):
                return visitor.visitSampleByBucket(self)
            else:
                return visitor.visitChildren(self)


    class SampleByBytesContext(SampleMethodContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.SampleMethodContext
            super().__init__(parser)
            self.bytes = None # ExpressionContext
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSampleByBytes" ):
                return visitor.visitSampleByBytes(self)
            else:
                return visitor.visitChildren(self)



    def sampleMethod(self):

        localctx = fugue_sqlParser.SampleMethodContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_sampleMethod)
        self._la = 0 # Token type
        try:
            self.state = 2918
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,387,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.SampleByPercentileContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2895
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==316:
                    self.state = 2894
                    localctx.negativeSign = self.match(fugue_sqlParser.MINUS)


                self.state = 2897
                localctx.percentage = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==330 or _la==332):
                    localctx.percentage = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2898
                self.match(fugue_sqlParser.PERCENTLIT)
                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.SampleByRowsContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2899
                self.expression()
                self.state = 2900
                self.match(fugue_sqlParser.ROWS)
                pass

            elif la_ == 3:
                localctx = fugue_sqlParser.SampleByBucketContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2902
                localctx.sampleType = self.match(fugue_sqlParser.BUCKET)
                self.state = 2903
                localctx.numerator = self.match(fugue_sqlParser.INTEGER_VALUE)
                self.state = 2904
                self.match(fugue_sqlParser.OUT)
                self.state = 2905
                self.match(fugue_sqlParser.OF)
                self.state = 2906
                localctx.denominator = self.match(fugue_sqlParser.INTEGER_VALUE)
                self.state = 2915
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==199:
                    self.state = 2907
                    self.match(fugue_sqlParser.ON)
                    self.state = 2913
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,385,self._ctx)
                    if la_ == 1:
                        self.state = 2908
                        self.identifier()
                        pass

                    elif la_ == 2:
                        self.state = 2909
                        self.qualifiedName()
                        self.state = 2910
                        self.match(fugue_sqlParser.T__2)
                        self.state = 2911
                        self.match(fugue_sqlParser.T__3)
                        pass




                pass

            elif la_ == 4:
                localctx = fugue_sqlParser.SampleByBytesContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2917
                localctx.bytes = self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifierSeq(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierSeqContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_identifierList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifierList" ):
                return visitor.visitIdentifierList(self)
            else:
                return visitor.visitChildren(self)




    def identifierList(self):

        localctx = fugue_sqlParser.IdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_identifierList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2920
            self.match(fugue_sqlParser.T__2)
            self.state = 2921
            self.identifierSeq()
            self.state = 2922
            self.match(fugue_sqlParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierSeqContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._errorCapturingIdentifier = None # ErrorCapturingIdentifierContext
            self.ident = list() # of ErrorCapturingIdentifierContexts

        def errorCapturingIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ErrorCapturingIdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ErrorCapturingIdentifierContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_identifierSeq

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifierSeq" ):
                return visitor.visitIdentifierSeq(self)
            else:
                return visitor.visitChildren(self)




    def identifierSeq(self):

        localctx = fugue_sqlParser.IdentifierSeqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_identifierSeq)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2924
            localctx._errorCapturingIdentifier = self.errorCapturingIdentifier()
            localctx.ident.append(localctx._errorCapturingIdentifier)
            self.state = 2929
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,388,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2925
                    self.match(fugue_sqlParser.T__0)
                    self.state = 2926
                    localctx._errorCapturingIdentifier = self.errorCapturingIdentifier()
                    localctx.ident.append(localctx._errorCapturingIdentifier) 
                self.state = 2931
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,388,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderedIdentifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def orderedIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.OrderedIdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.OrderedIdentifierContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_orderedIdentifierList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrderedIdentifierList" ):
                return visitor.visitOrderedIdentifierList(self)
            else:
                return visitor.visitChildren(self)




    def orderedIdentifierList(self):

        localctx = fugue_sqlParser.OrderedIdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_orderedIdentifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2932
            self.match(fugue_sqlParser.T__2)
            self.state = 2933
            self.orderedIdentifier()
            self.state = 2938
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1:
                self.state = 2934
                self.match(fugue_sqlParser.T__0)
                self.state = 2935
                self.orderedIdentifier()
                self.state = 2940
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2941
            self.match(fugue_sqlParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderedIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.ident = None # ErrorCapturingIdentifierContext
            self.ordering = None # Token

        def errorCapturingIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.ErrorCapturingIdentifierContext,0)


        def ASC(self):
            return self.getToken(fugue_sqlParser.ASC, 0)

        def DESC(self):
            return self.getToken(fugue_sqlParser.DESC, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_orderedIdentifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrderedIdentifier" ):
                return visitor.visitOrderedIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def orderedIdentifier(self):

        localctx = fugue_sqlParser.OrderedIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_orderedIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2943
            localctx.ident = self.errorCapturingIdentifier()
            self.state = 2945
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==65 or _la==111:
                self.state = 2944
                localctx.ordering = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==65 or _la==111):
                    localctx.ordering = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierCommentListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifierComment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.IdentifierCommentContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.IdentifierCommentContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_identifierCommentList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifierCommentList" ):
                return visitor.visitIdentifierCommentList(self)
            else:
                return visitor.visitChildren(self)




    def identifierCommentList(self):

        localctx = fugue_sqlParser.IdentifierCommentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_identifierCommentList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2947
            self.match(fugue_sqlParser.T__2)
            self.state = 2948
            self.identifierComment()
            self.state = 2953
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1:
                self.state = 2949
                self.match(fugue_sqlParser.T__0)
                self.state = 2950
                self.identifierComment()
                self.state = 2955
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2956
            self.match(fugue_sqlParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierCommentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)


        def commentSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.CommentSpecContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_identifierComment

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifierComment" ):
                return visitor.visitIdentifierComment(self)
            else:
                return visitor.visitChildren(self)




    def identifierComment(self):

        localctx = fugue_sqlParser.IdentifierCommentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_identifierComment)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2958
            self.identifier()
            self.state = 2960
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==87:
                self.state = 2959
                self.commentSpec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelationPrimaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_relationPrimary

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TableValuedFunctionContext(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def functionTable(self):
            return self.getTypedRuleContext(fugue_sqlParser.FunctionTableContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableValuedFunction" ):
                return visitor.visitTableValuedFunction(self)
            else:
                return visitor.visitChildren(self)


    class InlineTableDefault2Context(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def inlineTable(self):
            return self.getTypedRuleContext(fugue_sqlParser.InlineTableContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInlineTableDefault2" ):
                return visitor.visitInlineTableDefault2(self)
            else:
                return visitor.visitChildren(self)


    class AliasedRelationContext(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def relation(self):
            return self.getTypedRuleContext(fugue_sqlParser.RelationContext,0)

        def tableAlias(self):
            return self.getTypedRuleContext(fugue_sqlParser.TableAliasContext,0)

        def sample(self):
            return self.getTypedRuleContext(fugue_sqlParser.SampleContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAliasedRelation" ):
                return visitor.visitAliasedRelation(self)
            else:
                return visitor.visitChildren(self)


    class AliasedQueryContext(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def query(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryContext,0)

        def tableAlias(self):
            return self.getTypedRuleContext(fugue_sqlParser.TableAliasContext,0)

        def sample(self):
            return self.getTypedRuleContext(fugue_sqlParser.SampleContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAliasedQuery" ):
                return visitor.visitAliasedQuery(self)
            else:
                return visitor.visitChildren(self)


    class TableNameContext(RelationPrimaryContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.RelationPrimaryContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)

        def tableAlias(self):
            return self.getTypedRuleContext(fugue_sqlParser.TableAliasContext,0)

        def fugueDataFrameMember(self):
            return self.getTypedRuleContext(fugue_sqlParser.FugueDataFrameMemberContext,0)

        def sample(self):
            return self.getTypedRuleContext(fugue_sqlParser.SampleContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableName" ):
                return visitor.visitTableName(self)
            else:
                return visitor.visitChildren(self)



    def relationPrimary(self):

        localctx = fugue_sqlParser.RelationPrimaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_relationPrimary)
        try:
            self.state = 2989
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,397,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.TableNameContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2962
                self.multipartIdentifier()
                self.state = 2964
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,393,self._ctx)
                if la_ == 1:
                    self.state = 2963
                    self.fugueDataFrameMember()


                self.state = 2967
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,394,self._ctx)
                if la_ == 1:
                    self.state = 2966
                    self.sample()


                self.state = 2969
                self.tableAlias()
                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.AliasedQueryContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2971
                self.match(fugue_sqlParser.T__2)
                self.state = 2972
                self.query()
                self.state = 2973
                self.match(fugue_sqlParser.T__3)
                self.state = 2975
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,395,self._ctx)
                if la_ == 1:
                    self.state = 2974
                    self.sample()


                self.state = 2977
                self.tableAlias()
                pass

            elif la_ == 3:
                localctx = fugue_sqlParser.AliasedRelationContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2979
                self.match(fugue_sqlParser.T__2)
                self.state = 2980
                self.relation()
                self.state = 2981
                self.match(fugue_sqlParser.T__3)
                self.state = 2983
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,396,self._ctx)
                if la_ == 1:
                    self.state = 2982
                    self.sample()


                self.state = 2985
                self.tableAlias()
                pass

            elif la_ == 4:
                localctx = fugue_sqlParser.InlineTableDefault2Context(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2987
                self.inlineTable()
                pass

            elif la_ == 5:
                localctx = fugue_sqlParser.TableValuedFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2988
                self.functionTable()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InlineTableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VALUES(self):
            return self.getToken(fugue_sqlParser.VALUES, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,i)


        def tableAlias(self):
            return self.getTypedRuleContext(fugue_sqlParser.TableAliasContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_inlineTable

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInlineTable" ):
                return visitor.visitInlineTable(self)
            else:
                return visitor.visitChildren(self)




    def inlineTable(self):

        localctx = fugue_sqlParser.InlineTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_inlineTable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2991
            self.match(fugue_sqlParser.VALUES)
            self.state = 2992
            self.expression()
            self.state = 2997
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,398,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2993
                    self.match(fugue_sqlParser.T__0)
                    self.state = 2994
                    self.expression() 
                self.state = 2999
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,398,self._ctx)

            self.state = 3000
            self.tableAlias()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionTableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.funcName = None # ErrorCapturingIdentifierContext

        def tableAlias(self):
            return self.getTypedRuleContext(fugue_sqlParser.TableAliasContext,0)


        def errorCapturingIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.ErrorCapturingIdentifierContext,0)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_functionTable

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionTable" ):
                return visitor.visitFunctionTable(self)
            else:
                return visitor.visitChildren(self)




    def functionTable(self):

        localctx = fugue_sqlParser.FunctionTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_functionTable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3002
            localctx.funcName = self.errorCapturingIdentifier()
            self.state = 3003
            self.match(fugue_sqlParser.T__2)
            self.state = 3012
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & -18014398509481976) != 0 or (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1) != 0 or (((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -1) != 0 or (((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & -1) != 0 or (((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & 4036351166030807039) != 0 or (((_la - 320)) & ~0x3f) == 0 and ((1 << (_la - 320)) & 131011) != 0:
                self.state = 3004
                self.expression()
                self.state = 3009
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1:
                    self.state = 3005
                    self.match(fugue_sqlParser.T__0)
                    self.state = 3006
                    self.expression()
                    self.state = 3011
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 3014
            self.match(fugue_sqlParser.T__3)
            self.state = 3015
            self.tableAlias()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableAliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def strictIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.StrictIdentifierContext,0)


        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)

        def identifierList(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierListContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_tableAlias

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableAlias" ):
                return visitor.visitTableAlias(self)
            else:
                return visitor.visitChildren(self)




    def tableAlias(self):

        localctx = fugue_sqlParser.TableAliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_tableAlias)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3024
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,403,self._ctx)
            if la_ == 1:
                self.state = 3018
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,401,self._ctx)
                if la_ == 1:
                    self.state = 3017
                    self.match(fugue_sqlParser.AS)


                self.state = 3020
                self.strictIdentifier()
                self.state = 3022
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,402,self._ctx)
                if la_ == 1:
                    self.state = 3021
                    self.identifierList()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RowFormatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_rowFormat

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RowFormatSerdeContext(RowFormatContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.RowFormatContext
            super().__init__(parser)
            self.name = None # Token
            self.props = None # TablePropertyListContext
            self.copyFrom(ctx)

        def ROW(self):
            return self.getToken(fugue_sqlParser.ROW, 0)
        def FORMAT(self):
            return self.getToken(fugue_sqlParser.FORMAT, 0)
        def SERDE(self):
            return self.getToken(fugue_sqlParser.SERDE, 0)
        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)
        def WITH(self):
            return self.getToken(fugue_sqlParser.WITH, 0)
        def SERDEPROPERTIES(self):
            return self.getToken(fugue_sqlParser.SERDEPROPERTIES, 0)
        def tablePropertyList(self):
            return self.getTypedRuleContext(fugue_sqlParser.TablePropertyListContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRowFormatSerde" ):
                return visitor.visitRowFormatSerde(self)
            else:
                return visitor.visitChildren(self)


    class RowFormatDelimitedContext(RowFormatContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.RowFormatContext
            super().__init__(parser)
            self.fieldsTerminatedBy = None # Token
            self.escapedBy = None # Token
            self.collectionItemsTerminatedBy = None # Token
            self.keysTerminatedBy = None # Token
            self.linesSeparatedBy = None # Token
            self.nullDefinedAs = None # Token
            self.copyFrom(ctx)

        def ROW(self):
            return self.getToken(fugue_sqlParser.ROW, 0)
        def FORMAT(self):
            return self.getToken(fugue_sqlParser.FORMAT, 0)
        def DELIMITED(self):
            return self.getToken(fugue_sqlParser.DELIMITED, 0)
        def FIELDS(self):
            return self.getToken(fugue_sqlParser.FIELDS, 0)
        def TERMINATED(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.TERMINATED)
            else:
                return self.getToken(fugue_sqlParser.TERMINATED, i)
        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.BY)
            else:
                return self.getToken(fugue_sqlParser.BY, i)
        def COLLECTION(self):
            return self.getToken(fugue_sqlParser.COLLECTION, 0)
        def ITEMS(self):
            return self.getToken(fugue_sqlParser.ITEMS, 0)
        def MAP(self):
            return self.getToken(fugue_sqlParser.MAP, 0)
        def KEYS(self):
            return self.getToken(fugue_sqlParser.KEYS, 0)
        def LINES(self):
            return self.getToken(fugue_sqlParser.LINES, 0)
        def THENULL(self):
            return self.getToken(fugue_sqlParser.THENULL, 0)
        def DEFINED(self):
            return self.getToken(fugue_sqlParser.DEFINED, 0)
        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)
        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.STRING)
            else:
                return self.getToken(fugue_sqlParser.STRING, i)
        def ESCAPED(self):
            return self.getToken(fugue_sqlParser.ESCAPED, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRowFormatDelimited" ):
                return visitor.visitRowFormatDelimited(self)
            else:
                return visitor.visitChildren(self)



    def rowFormat(self):

        localctx = fugue_sqlParser.RowFormatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_rowFormat)
        try:
            self.state = 3075
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,411,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.RowFormatSerdeContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3026
                self.match(fugue_sqlParser.ROW)
                self.state = 3027
                self.match(fugue_sqlParser.FORMAT)
                self.state = 3028
                self.match(fugue_sqlParser.SERDE)
                self.state = 3029
                localctx.name = self.match(fugue_sqlParser.STRING)
                self.state = 3033
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,404,self._ctx)
                if la_ == 1:
                    self.state = 3030
                    self.match(fugue_sqlParser.WITH)
                    self.state = 3031
                    self.match(fugue_sqlParser.SERDEPROPERTIES)
                    self.state = 3032
                    localctx.props = self.tablePropertyList()


                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.RowFormatDelimitedContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3035
                self.match(fugue_sqlParser.ROW)
                self.state = 3036
                self.match(fugue_sqlParser.FORMAT)
                self.state = 3037
                self.match(fugue_sqlParser.DELIMITED)
                self.state = 3047
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,406,self._ctx)
                if la_ == 1:
                    self.state = 3038
                    self.match(fugue_sqlParser.FIELDS)
                    self.state = 3039
                    self.match(fugue_sqlParser.TERMINATED)
                    self.state = 3040
                    self.match(fugue_sqlParser.BY)
                    self.state = 3041
                    localctx.fieldsTerminatedBy = self.match(fugue_sqlParser.STRING)
                    self.state = 3045
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,405,self._ctx)
                    if la_ == 1:
                        self.state = 3042
                        self.match(fugue_sqlParser.ESCAPED)
                        self.state = 3043
                        self.match(fugue_sqlParser.BY)
                        self.state = 3044
                        localctx.escapedBy = self.match(fugue_sqlParser.STRING)




                self.state = 3054
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,407,self._ctx)
                if la_ == 1:
                    self.state = 3049
                    self.match(fugue_sqlParser.COLLECTION)
                    self.state = 3050
                    self.match(fugue_sqlParser.ITEMS)
                    self.state = 3051
                    self.match(fugue_sqlParser.TERMINATED)
                    self.state = 3052
                    self.match(fugue_sqlParser.BY)
                    self.state = 3053
                    localctx.collectionItemsTerminatedBy = self.match(fugue_sqlParser.STRING)


                self.state = 3061
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,408,self._ctx)
                if la_ == 1:
                    self.state = 3056
                    self.match(fugue_sqlParser.MAP)
                    self.state = 3057
                    self.match(fugue_sqlParser.KEYS)
                    self.state = 3058
                    self.match(fugue_sqlParser.TERMINATED)
                    self.state = 3059
                    self.match(fugue_sqlParser.BY)
                    self.state = 3060
                    localctx.keysTerminatedBy = self.match(fugue_sqlParser.STRING)


                self.state = 3067
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,409,self._ctx)
                if la_ == 1:
                    self.state = 3063
                    self.match(fugue_sqlParser.LINES)
                    self.state = 3064
                    self.match(fugue_sqlParser.TERMINATED)
                    self.state = 3065
                    self.match(fugue_sqlParser.BY)
                    self.state = 3066
                    localctx.linesSeparatedBy = self.match(fugue_sqlParser.STRING)


                self.state = 3073
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,410,self._ctx)
                if la_ == 1:
                    self.state = 3069
                    self.match(fugue_sqlParser.THENULL)
                    self.state = 3070
                    self.match(fugue_sqlParser.DEFINED)
                    self.state = 3071
                    self.match(fugue_sqlParser.AS)
                    self.state = 3072
                    localctx.nullDefinedAs = self.match(fugue_sqlParser.STRING)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultipartIdentifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multipartIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.MultipartIdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_multipartIdentifierList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultipartIdentifierList" ):
                return visitor.visitMultipartIdentifierList(self)
            else:
                return visitor.visitChildren(self)




    def multipartIdentifierList(self):

        localctx = fugue_sqlParser.MultipartIdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_multipartIdentifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3077
            self.multipartIdentifier()
            self.state = 3082
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1:
                self.state = 3078
                self.match(fugue_sqlParser.T__0)
                self.state = 3079
                self.multipartIdentifier()
                self.state = 3084
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultipartIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._errorCapturingIdentifier = None # ErrorCapturingIdentifierContext
            self.parts = list() # of ErrorCapturingIdentifierContexts

        def errorCapturingIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ErrorCapturingIdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ErrorCapturingIdentifierContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_multipartIdentifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultipartIdentifier" ):
                return visitor.visitMultipartIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def multipartIdentifier(self):

        localctx = fugue_sqlParser.MultipartIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_multipartIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3085
            localctx._errorCapturingIdentifier = self.errorCapturingIdentifier()
            localctx.parts.append(localctx._errorCapturingIdentifier)
            self.state = 3090
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,413,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3086
                    self.match(fugue_sqlParser.T__6)
                    self.state = 3087
                    localctx._errorCapturingIdentifier = self.errorCapturingIdentifier()
                    localctx.parts.append(localctx._errorCapturingIdentifier) 
                self.state = 3092
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,413,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.db = None # ErrorCapturingIdentifierContext
            self.table = None # ErrorCapturingIdentifierContext

        def errorCapturingIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ErrorCapturingIdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ErrorCapturingIdentifierContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_tableIdentifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableIdentifier" ):
                return visitor.visitTableIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def tableIdentifier(self):

        localctx = fugue_sqlParser.TableIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_tableIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3096
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,414,self._ctx)
            if la_ == 1:
                self.state = 3093
                localctx.db = self.errorCapturingIdentifier()
                self.state = 3094
                self.match(fugue_sqlParser.T__6)


            self.state = 3098
            localctx.table = self.errorCapturingIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.db = None # ErrorCapturingIdentifierContext
            self.function = None # ErrorCapturingIdentifierContext

        def errorCapturingIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ErrorCapturingIdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ErrorCapturingIdentifierContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_functionIdentifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionIdentifier" ):
                return visitor.visitFunctionIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def functionIdentifier(self):

        localctx = fugue_sqlParser.FunctionIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_functionIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3103
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,415,self._ctx)
            if la_ == 1:
                self.state = 3100
                localctx.db = self.errorCapturingIdentifier()
                self.state = 3101
                self.match(fugue_sqlParser.T__6)


            self.state = 3105
            localctx.function = self.errorCapturingIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # ErrorCapturingIdentifierContext

        def expression(self):
            return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,0)


        def identifierList(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierListContext,0)


        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)

        def errorCapturingIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.ErrorCapturingIdentifierContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_namedExpression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamedExpression" ):
                return visitor.visitNamedExpression(self)
            else:
                return visitor.visitChildren(self)




    def namedExpression(self):

        localctx = fugue_sqlParser.NamedExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_namedExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3107
            self.expression()
            self.state = 3115
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,418,self._ctx)
            if la_ == 1:
                self.state = 3109
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,416,self._ctx)
                if la_ == 1:
                    self.state = 3108
                    self.match(fugue_sqlParser.AS)


                self.state = 3113
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 320, 335, 336]:
                    self.state = 3111
                    localctx.name = self.errorCapturingIdentifier()
                    pass
                elif token in [3]:
                    self.state = 3112
                    self.identifierList()
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedExpressionSeqContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namedExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.NamedExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.NamedExpressionContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_namedExpressionSeq

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamedExpressionSeq" ):
                return visitor.visitNamedExpressionSeq(self)
            else:
                return visitor.visitChildren(self)




    def namedExpressionSeq(self):

        localctx = fugue_sqlParser.NamedExpressionSeqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_namedExpressionSeq)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3117
            self.namedExpression()
            self.state = 3122
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,419,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3118
                    self.match(fugue_sqlParser.T__0)
                    self.state = 3119
                    self.namedExpression() 
                self.state = 3124
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,419,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransformListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._transform = None # TransformContext
            self.transforms = list() # of TransformContexts

        def transform(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.TransformContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.TransformContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_transformList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTransformList" ):
                return visitor.visitTransformList(self)
            else:
                return visitor.visitChildren(self)




    def transformList(self):

        localctx = fugue_sqlParser.TransformListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_transformList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3125
            self.match(fugue_sqlParser.T__2)
            self.state = 3126
            localctx._transform = self.transform()
            localctx.transforms.append(localctx._transform)
            self.state = 3131
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1:
                self.state = 3127
                self.match(fugue_sqlParser.T__0)
                self.state = 3128
                localctx._transform = self.transform()
                localctx.transforms.append(localctx._transform)
                self.state = 3133
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3134
            self.match(fugue_sqlParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransformContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_transform

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class IdentityTransformContext(TransformContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.TransformContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def qualifiedName(self):
            return self.getTypedRuleContext(fugue_sqlParser.QualifiedNameContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentityTransform" ):
                return visitor.visitIdentityTransform(self)
            else:
                return visitor.visitChildren(self)


    class ApplyTransformContext(TransformContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.TransformContext
            super().__init__(parser)
            self.transformName = None # IdentifierContext
            self._transformArgument = None # TransformArgumentContext
            self.argument = list() # of TransformArgumentContexts
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)

        def transformArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.TransformArgumentContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.TransformArgumentContext,i)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitApplyTransform" ):
                return visitor.visitApplyTransform(self)
            else:
                return visitor.visitChildren(self)



    def transform(self):

        localctx = fugue_sqlParser.TransformContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_transform)
        self._la = 0 # Token type
        try:
            self.state = 3149
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,422,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.IdentityTransformContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3136
                self.qualifiedName()
                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.ApplyTransformContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3137
                localctx.transformName = self.identifier()
                self.state = 3138
                self.match(fugue_sqlParser.T__2)
                self.state = 3139
                localctx._transformArgument = self.transformArgument()
                localctx.argument.append(localctx._transformArgument)
                self.state = 3144
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1:
                    self.state = 3140
                    self.match(fugue_sqlParser.T__0)
                    self.state = 3141
                    localctx._transformArgument = self.transformArgument()
                    localctx.argument.append(localctx._transformArgument)
                    self.state = 3146
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3147
                self.match(fugue_sqlParser.T__3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransformArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedName(self):
            return self.getTypedRuleContext(fugue_sqlParser.QualifiedNameContext,0)


        def constant(self):
            return self.getTypedRuleContext(fugue_sqlParser.ConstantContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_transformArgument

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTransformArgument" ):
                return visitor.visitTransformArgument(self)
            else:
                return visitor.visitChildren(self)




    def transformArgument(self):

        localctx = fugue_sqlParser.TransformArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_transformArgument)
        try:
            self.state = 3153
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,423,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3151
                self.qualifiedName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3152
                self.constant()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def booleanExpression(self):
            return self.getTypedRuleContext(fugue_sqlParser.BooleanExpressionContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_expression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)




    def expression(self):

        localctx = fugue_sqlParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3155
            self.booleanExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_booleanExpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class LogicalNotContext(BooleanExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.BooleanExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NOT(self):
            return self.getToken(fugue_sqlParser.NOT, 0)
        def booleanExpression(self):
            return self.getTypedRuleContext(fugue_sqlParser.BooleanExpressionContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogicalNot" ):
                return visitor.visitLogicalNot(self)
            else:
                return visitor.visitChildren(self)


    class PredicatedContext(BooleanExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.BooleanExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def valueExpression(self):
            return self.getTypedRuleContext(fugue_sqlParser.ValueExpressionContext,0)

        def predicate(self):
            return self.getTypedRuleContext(fugue_sqlParser.PredicateContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPredicated" ):
                return visitor.visitPredicated(self)
            else:
                return visitor.visitChildren(self)


    class ExistsContext(BooleanExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.BooleanExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXISTS(self):
            return self.getToken(fugue_sqlParser.EXISTS, 0)
        def query(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExists" ):
                return visitor.visitExists(self)
            else:
                return visitor.visitChildren(self)


    class LogicalBinaryContext(BooleanExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.BooleanExpressionContext
            super().__init__(parser)
            self.left = None # BooleanExpressionContext
            self.theOperator = None # Token
            self.right = None # BooleanExpressionContext
            self.copyFrom(ctx)

        def booleanExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.BooleanExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.BooleanExpressionContext,i)

        def AND(self):
            return self.getToken(fugue_sqlParser.AND, 0)
        def OR(self):
            return self.getToken(fugue_sqlParser.OR, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogicalBinary" ):
                return visitor.visitLogicalBinary(self)
            else:
                return visitor.visitChildren(self)



    def booleanExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = fugue_sqlParser.BooleanExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 340
        self.enterRecursionRule(localctx, 340, self.RULE_booleanExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3169
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,425,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.LogicalNotContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 3158
                self.match(fugue_sqlParser.NOT)
                self.state = 3159
                self.booleanExpression(5)
                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.ExistsContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3160
                self.match(fugue_sqlParser.EXISTS)
                self.state = 3161
                self.match(fugue_sqlParser.T__2)
                self.state = 3162
                self.query()
                self.state = 3163
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 3:
                localctx = fugue_sqlParser.PredicatedContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3165
                self.valueExpression(0)
                self.state = 3167
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,424,self._ctx)
                if la_ == 1:
                    self.state = 3166
                    self.predicate()


                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 3179
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,427,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 3177
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,426,self._ctx)
                    if la_ == 1:
                        localctx = fugue_sqlParser.LogicalBinaryContext(self, fugue_sqlParser.BooleanExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_booleanExpression)
                        self.state = 3171
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 3172
                        localctx.theOperator = self.match(fugue_sqlParser.AND)
                        self.state = 3173
                        localctx.right = self.booleanExpression(3)
                        pass

                    elif la_ == 2:
                        localctx = fugue_sqlParser.LogicalBinaryContext(self, fugue_sqlParser.BooleanExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_booleanExpression)
                        self.state = 3174
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 3175
                        localctx.theOperator = self.match(fugue_sqlParser.OR)
                        self.state = 3176
                        localctx.right = self.booleanExpression(2)
                        pass

             
                self.state = 3181
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,427,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class PredicateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.kind = None # Token
            self.lower = None # ValueExpressionContext
            self.upper = None # ValueExpressionContext
            self.pattern = None # ValueExpressionContext
            self.quantifier = None # Token
            self.escapeChar = None # Token
            self.right = None # ValueExpressionContext

        def AND(self):
            return self.getToken(fugue_sqlParser.AND, 0)

        def BETWEEN(self):
            return self.getToken(fugue_sqlParser.BETWEEN, 0)

        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ValueExpressionContext,i)


        def NOT(self):
            return self.getToken(fugue_sqlParser.NOT, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,i)


        def IN(self):
            return self.getToken(fugue_sqlParser.IN, 0)

        def query(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryContext,0)


        def RLIKE(self):
            return self.getToken(fugue_sqlParser.RLIKE, 0)

        def LIKE(self):
            return self.getToken(fugue_sqlParser.LIKE, 0)

        def ANY(self):
            return self.getToken(fugue_sqlParser.ANY, 0)

        def SOME(self):
            return self.getToken(fugue_sqlParser.SOME, 0)

        def ALL(self):
            return self.getToken(fugue_sqlParser.ALL, 0)

        def ESCAPE(self):
            return self.getToken(fugue_sqlParser.ESCAPE, 0)

        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)

        def IS(self):
            return self.getToken(fugue_sqlParser.IS, 0)

        def THENULL(self):
            return self.getToken(fugue_sqlParser.THENULL, 0)

        def TRUE(self):
            return self.getToken(fugue_sqlParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(fugue_sqlParser.FALSE, 0)

        def UNKNOWN(self):
            return self.getToken(fugue_sqlParser.UNKNOWN, 0)

        def FROM(self):
            return self.getToken(fugue_sqlParser.FROM, 0)

        def DISTINCT(self):
            return self.getToken(fugue_sqlParser.DISTINCT, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_predicate

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPredicate" ):
                return visitor.visitPredicate(self)
            else:
                return visitor.visitChildren(self)




    def predicate(self):

        localctx = fugue_sqlParser.PredicateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 342, self.RULE_predicate)
        self._la = 0 # Token type
        try:
            self.state = 3264
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,441,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3183
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==195:
                    self.state = 3182
                    self.match(fugue_sqlParser.NOT)


                self.state = 3185
                localctx.kind = self.match(fugue_sqlParser.BETWEEN)
                self.state = 3186
                localctx.lower = self.valueExpression(0)
                self.state = 3187
                self.match(fugue_sqlParser.AND)
                self.state = 3188
                localctx.upper = self.valueExpression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3191
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==195:
                    self.state = 3190
                    self.match(fugue_sqlParser.NOT)


                self.state = 3193
                localctx.kind = self.match(fugue_sqlParser.IN)
                self.state = 3194
                self.match(fugue_sqlParser.T__2)
                self.state = 3195
                self.expression()
                self.state = 3200
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1:
                    self.state = 3196
                    self.match(fugue_sqlParser.T__0)
                    self.state = 3197
                    self.expression()
                    self.state = 3202
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3203
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3206
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==195:
                    self.state = 3205
                    self.match(fugue_sqlParser.NOT)


                self.state = 3208
                localctx.kind = self.match(fugue_sqlParser.IN)
                self.state = 3209
                self.match(fugue_sqlParser.T__2)
                self.state = 3210
                self.query()
                self.state = 3211
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3214
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==195:
                    self.state = 3213
                    self.match(fugue_sqlParser.NOT)


                self.state = 3216
                localctx.kind = self.match(fugue_sqlParser.RLIKE)
                self.state = 3217
                localctx.pattern = self.valueExpression(0)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3219
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==195:
                    self.state = 3218
                    self.match(fugue_sqlParser.NOT)


                self.state = 3221
                localctx.kind = self.match(fugue_sqlParser.LIKE)
                self.state = 3222
                localctx.quantifier = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==56 or _la==61 or _la==259):
                    localctx.quantifier = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3236
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,435,self._ctx)
                if la_ == 1:
                    self.state = 3223
                    self.match(fugue_sqlParser.T__2)
                    self.state = 3224
                    self.match(fugue_sqlParser.T__3)
                    pass

                elif la_ == 2:
                    self.state = 3225
                    self.match(fugue_sqlParser.T__2)
                    self.state = 3226
                    self.expression()
                    self.state = 3231
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1:
                        self.state = 3227
                        self.match(fugue_sqlParser.T__0)
                        self.state = 3228
                        self.expression()
                        self.state = 3233
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 3234
                    self.match(fugue_sqlParser.T__3)
                    pass


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3239
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==195:
                    self.state = 3238
                    self.match(fugue_sqlParser.NOT)


                self.state = 3241
                localctx.kind = self.match(fugue_sqlParser.LIKE)
                self.state = 3242
                localctx.pattern = self.valueExpression(0)
                self.state = 3245
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,437,self._ctx)
                if la_ == 1:
                    self.state = 3243
                    self.match(fugue_sqlParser.ESCAPE)
                    self.state = 3244
                    localctx.escapeChar = self.match(fugue_sqlParser.STRING)


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 3247
                self.match(fugue_sqlParser.IS)
                self.state = 3249
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==195:
                    self.state = 3248
                    self.match(fugue_sqlParser.NOT)


                self.state = 3251
                localctx.kind = self.match(fugue_sqlParser.THENULL)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 3252
                self.match(fugue_sqlParser.IS)
                self.state = 3254
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==195:
                    self.state = 3253
                    self.match(fugue_sqlParser.NOT)


                self.state = 3256
                localctx.kind = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==131 or _la==283 or _la==291):
                    localctx.kind = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 3257
                self.match(fugue_sqlParser.IS)
                self.state = 3259
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==195:
                    self.state = 3258
                    self.match(fugue_sqlParser.NOT)


                self.state = 3261
                localctx.kind = self.match(fugue_sqlParser.DISTINCT)
                self.state = 3262
                self.match(fugue_sqlParser.FROM)
                self.state = 3263
                localctx.right = self.valueExpression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValueExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_valueExpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class ValueExpressionDefaultContext(ValueExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.ValueExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def primaryExpression(self):
            return self.getTypedRuleContext(fugue_sqlParser.PrimaryExpressionContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitValueExpressionDefault" ):
                return visitor.visitValueExpressionDefault(self)
            else:
                return visitor.visitChildren(self)


    class ComparisonContext(ValueExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.ValueExpressionContext
            super().__init__(parser)
            self.left = None # ValueExpressionContext
            self.right = None # ValueExpressionContext
            self.copyFrom(ctx)

        def comparisonOperator(self):
            return self.getTypedRuleContext(fugue_sqlParser.ComparisonOperatorContext,0)

        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ValueExpressionContext,i)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparison" ):
                return visitor.visitComparison(self)
            else:
                return visitor.visitChildren(self)


    class ArithmeticBinaryContext(ValueExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.ValueExpressionContext
            super().__init__(parser)
            self.left = None # ValueExpressionContext
            self.theOperator = None # Token
            self.right = None # ValueExpressionContext
            self.copyFrom(ctx)

        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ValueExpressionContext,i)

        def ASTERISK(self):
            return self.getToken(fugue_sqlParser.ASTERISK, 0)
        def SLASH(self):
            return self.getToken(fugue_sqlParser.SLASH, 0)
        def PERCENT(self):
            return self.getToken(fugue_sqlParser.PERCENT, 0)
        def DIV(self):
            return self.getToken(fugue_sqlParser.DIV, 0)
        def PLUS(self):
            return self.getToken(fugue_sqlParser.PLUS, 0)
        def MINUS(self):
            return self.getToken(fugue_sqlParser.MINUS, 0)
        def CONCAT_PIPE(self):
            return self.getToken(fugue_sqlParser.CONCAT_PIPE, 0)
        def AMPERSAND(self):
            return self.getToken(fugue_sqlParser.AMPERSAND, 0)
        def HAT(self):
            return self.getToken(fugue_sqlParser.HAT, 0)
        def PIPE(self):
            return self.getToken(fugue_sqlParser.PIPE, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArithmeticBinary" ):
                return visitor.visitArithmeticBinary(self)
            else:
                return visitor.visitChildren(self)


    class ArithmeticUnaryContext(ValueExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.ValueExpressionContext
            super().__init__(parser)
            self.theOperator = None # Token
            self.copyFrom(ctx)

        def valueExpression(self):
            return self.getTypedRuleContext(fugue_sqlParser.ValueExpressionContext,0)

        def MINUS(self):
            return self.getToken(fugue_sqlParser.MINUS, 0)
        def PLUS(self):
            return self.getToken(fugue_sqlParser.PLUS, 0)
        def TILDE(self):
            return self.getToken(fugue_sqlParser.TILDE, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArithmeticUnary" ):
                return visitor.visitArithmeticUnary(self)
            else:
                return visitor.visitChildren(self)



    def valueExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = fugue_sqlParser.ValueExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 344
        self.enterRecursionRule(localctx, 344, self.RULE_valueExpression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3270
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,442,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.ValueExpressionDefaultContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 3267
                self.primaryExpression(0)
                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.ArithmeticUnaryContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3268
                localctx.theOperator = self._input.LT(1)
                _la = self._input.LA(1)
                if not((((_la - 315)) & ~0x3f) == 0 and ((1 << (_la - 315)) & 67) != 0):
                    localctx.theOperator = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3269
                self.valueExpression(7)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 3293
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,444,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 3291
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,443,self._ctx)
                    if la_ == 1:
                        localctx = fugue_sqlParser.ArithmeticBinaryContext(self, fugue_sqlParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 3272
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 3273
                        localctx.theOperator = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not((((_la - 317)) & ~0x3f) == 0 and ((1 << (_la - 317)) & 15) != 0):
                            localctx.theOperator = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 3274
                        localctx.right = self.valueExpression(7)
                        pass

                    elif la_ == 2:
                        localctx = fugue_sqlParser.ArithmeticBinaryContext(self, fugue_sqlParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 3275
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 3276
                        localctx.theOperator = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not((((_la - 315)) & ~0x3f) == 0 and ((1 << (_la - 315)) & 515) != 0):
                            localctx.theOperator = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 3277
                        localctx.right = self.valueExpression(6)
                        pass

                    elif la_ == 3:
                        localctx = fugue_sqlParser.ArithmeticBinaryContext(self, fugue_sqlParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 3278
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 3279
                        localctx.theOperator = self.match(fugue_sqlParser.AMPERSAND)
                        self.state = 3280
                        localctx.right = self.valueExpression(5)
                        pass

                    elif la_ == 4:
                        localctx = fugue_sqlParser.ArithmeticBinaryContext(self, fugue_sqlParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 3281
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 3282
                        localctx.theOperator = self.match(fugue_sqlParser.HAT)
                        self.state = 3283
                        localctx.right = self.valueExpression(4)
                        pass

                    elif la_ == 5:
                        localctx = fugue_sqlParser.ArithmeticBinaryContext(self, fugue_sqlParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 3284
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 3285
                        localctx.theOperator = self.match(fugue_sqlParser.PIPE)
                        self.state = 3286
                        localctx.right = self.valueExpression(3)
                        pass

                    elif la_ == 6:
                        localctx = fugue_sqlParser.ComparisonContext(self, fugue_sqlParser.ValueExpressionContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_valueExpression)
                        self.state = 3287
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 3288
                        self.comparisonOperator()
                        self.state = 3289
                        localctx.right = self.valueExpression(2)
                        pass

             
                self.state = 3295
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,444,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class PrimaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_primaryExpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class StructContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self._namedExpression = None # NamedExpressionContext
            self.argument = list() # of NamedExpressionContexts
            self.copyFrom(ctx)

        def STRUCT(self):
            return self.getToken(fugue_sqlParser.STRUCT, 0)
        def namedExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.NamedExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.NamedExpressionContext,i)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStruct" ):
                return visitor.visitStruct(self)
            else:
                return visitor.visitChildren(self)


    class DereferenceContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.base = None # PrimaryExpressionContext
            self.fieldName = None # IdentifierContext
            self.copyFrom(ctx)

        def primaryExpression(self):
            return self.getTypedRuleContext(fugue_sqlParser.PrimaryExpressionContext,0)

        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDereference" ):
                return visitor.visitDereference(self)
            else:
                return visitor.visitChildren(self)


    class SimpleCaseContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.value = None # ExpressionContext
            self.elseExpression = None # ExpressionContext
            self.copyFrom(ctx)

        def CASE(self):
            return self.getToken(fugue_sqlParser.CASE, 0)
        def END(self):
            return self.getToken(fugue_sqlParser.END, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,i)

        def whenClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.WhenClauseContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.WhenClauseContext,i)

        def ELSE(self):
            return self.getToken(fugue_sqlParser.ELSE, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleCase" ):
                return visitor.visitSimpleCase(self)
            else:
                return visitor.visitChildren(self)


    class ColumnReferenceContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnReference" ):
                return visitor.visitColumnReference(self)
            else:
                return visitor.visitChildren(self)


    class RowConstructorContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def namedExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.NamedExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.NamedExpressionContext,i)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRowConstructor" ):
                return visitor.visitRowConstructor(self)
            else:
                return visitor.visitChildren(self)


    class LastContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LAST(self):
            return self.getToken(fugue_sqlParser.LAST, 0)
        def expression(self):
            return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,0)

        def IGNORE(self):
            return self.getToken(fugue_sqlParser.IGNORE, 0)
        def THENULLS(self):
            return self.getToken(fugue_sqlParser.THENULLS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLast" ):
                return visitor.visitLast(self)
            else:
                return visitor.visitChildren(self)


    class StarContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ASTERISK(self):
            return self.getToken(fugue_sqlParser.ASTERISK, 0)
        def qualifiedName(self):
            return self.getTypedRuleContext(fugue_sqlParser.QualifiedNameContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStar" ):
                return visitor.visitStar(self)
            else:
                return visitor.visitChildren(self)


    class OverlayContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.iinput = None # ValueExpressionContext
            self.replace = None # ValueExpressionContext
            self.position = None # ValueExpressionContext
            self.length = None # ValueExpressionContext
            self.copyFrom(ctx)

        def OVERLAY(self):
            return self.getToken(fugue_sqlParser.OVERLAY, 0)
        def PLACING(self):
            return self.getToken(fugue_sqlParser.PLACING, 0)
        def FROM(self):
            return self.getToken(fugue_sqlParser.FROM, 0)
        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ValueExpressionContext,i)

        def FOR(self):
            return self.getToken(fugue_sqlParser.FOR, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOverlay" ):
                return visitor.visitOverlay(self)
            else:
                return visitor.visitChildren(self)


    class SubscriptContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.value = None # PrimaryExpressionContext
            self.index = None # ValueExpressionContext
            self.copyFrom(ctx)

        def primaryExpression(self):
            return self.getTypedRuleContext(fugue_sqlParser.PrimaryExpressionContext,0)

        def valueExpression(self):
            return self.getTypedRuleContext(fugue_sqlParser.ValueExpressionContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubscript" ):
                return visitor.visitSubscript(self)
            else:
                return visitor.visitChildren(self)


    class SubqueryExpressionContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def query(self):
            return self.getTypedRuleContext(fugue_sqlParser.QueryContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubqueryExpression" ):
                return visitor.visitSubqueryExpression(self)
            else:
                return visitor.visitChildren(self)


    class SubstringContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.istr = None # ValueExpressionContext
            self.pos = None # ValueExpressionContext
            self.ilen = None # ValueExpressionContext
            self.copyFrom(ctx)

        def SUBSTR(self):
            return self.getToken(fugue_sqlParser.SUBSTR, 0)
        def SUBSTRING(self):
            return self.getToken(fugue_sqlParser.SUBSTRING, 0)
        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ValueExpressionContext,i)

        def FROM(self):
            return self.getToken(fugue_sqlParser.FROM, 0)
        def FOR(self):
            return self.getToken(fugue_sqlParser.FOR, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubstring" ):
                return visitor.visitSubstring(self)
            else:
                return visitor.visitChildren(self)


    class CurrentDatetimeContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.name = None # Token
            self.copyFrom(ctx)

        def CURRENT_DATE(self):
            return self.getToken(fugue_sqlParser.CURRENT_DATE, 0)
        def CURRENT_TIMESTAMP(self):
            return self.getToken(fugue_sqlParser.CURRENT_TIMESTAMP, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCurrentDatetime" ):
                return visitor.visitCurrentDatetime(self)
            else:
                return visitor.visitChildren(self)


    class CastContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CAST(self):
            return self.getToken(fugue_sqlParser.CAST, 0)
        def expression(self):
            return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,0)

        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)
        def dataType(self):
            return self.getTypedRuleContext(fugue_sqlParser.DataTypeContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCast" ):
                return visitor.visitCast(self)
            else:
                return visitor.visitChildren(self)


    class ConstantDefaultContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def constant(self):
            return self.getTypedRuleContext(fugue_sqlParser.ConstantContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstantDefault" ):
                return visitor.visitConstantDefault(self)
            else:
                return visitor.visitChildren(self)


    class LambdaContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,i)

        def expression(self):
            return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambda" ):
                return visitor.visitLambda(self)
            else:
                return visitor.visitChildren(self)


    class ParenthesizedExpressionContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParenthesizedExpression" ):
                return visitor.visitParenthesizedExpression(self)
            else:
                return visitor.visitChildren(self)


    class ExtractContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.field = None # IdentifierContext
            self.source = None # ValueExpressionContext
            self.copyFrom(ctx)

        def EXTRACT(self):
            return self.getToken(fugue_sqlParser.EXTRACT, 0)
        def FROM(self):
            return self.getToken(fugue_sqlParser.FROM, 0)
        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)

        def valueExpression(self):
            return self.getTypedRuleContext(fugue_sqlParser.ValueExpressionContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExtract" ):
                return visitor.visitExtract(self)
            else:
                return visitor.visitChildren(self)


    class TrimContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.trimOption = None # Token
            self.trimStr = None # ValueExpressionContext
            self.srcStr = None # ValueExpressionContext
            self.copyFrom(ctx)

        def TRIM(self):
            return self.getToken(fugue_sqlParser.TRIM, 0)
        def FROM(self):
            return self.getToken(fugue_sqlParser.FROM, 0)
        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ValueExpressionContext,i)

        def BOTH(self):
            return self.getToken(fugue_sqlParser.BOTH, 0)
        def LEADING(self):
            return self.getToken(fugue_sqlParser.LEADING, 0)
        def TRAILING(self):
            return self.getToken(fugue_sqlParser.TRAILING, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTrim" ):
                return visitor.visitTrim(self)
            else:
                return visitor.visitChildren(self)


    class FunctionCallContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self._expression = None # ExpressionContext
            self.argument = list() # of ExpressionContexts
            self.where = None # BooleanExpressionContext
            self.copyFrom(ctx)

        def functionName(self):
            return self.getTypedRuleContext(fugue_sqlParser.FunctionNameContext,0)

        def FILTER(self):
            return self.getToken(fugue_sqlParser.FILTER, 0)
        def WHERE(self):
            return self.getToken(fugue_sqlParser.WHERE, 0)
        def OVER(self):
            return self.getToken(fugue_sqlParser.OVER, 0)
        def windowSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.WindowSpecContext,0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,i)

        def booleanExpression(self):
            return self.getTypedRuleContext(fugue_sqlParser.BooleanExpressionContext,0)

        def setQuantifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.SetQuantifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionCall" ):
                return visitor.visitFunctionCall(self)
            else:
                return visitor.visitChildren(self)


    class SearchedCaseContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.elseExpression = None # ExpressionContext
            self.copyFrom(ctx)

        def CASE(self):
            return self.getToken(fugue_sqlParser.CASE, 0)
        def END(self):
            return self.getToken(fugue_sqlParser.END, 0)
        def whenClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.WhenClauseContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.WhenClauseContext,i)

        def ELSE(self):
            return self.getToken(fugue_sqlParser.ELSE, 0)
        def expression(self):
            return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSearchedCase" ):
                return visitor.visitSearchedCase(self)
            else:
                return visitor.visitChildren(self)


    class PositionContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.substr = None # ValueExpressionContext
            self.istr = None # ValueExpressionContext
            self.copyFrom(ctx)

        def POSITION(self):
            return self.getToken(fugue_sqlParser.POSITION, 0)
        def IN(self):
            return self.getToken(fugue_sqlParser.IN, 0)
        def valueExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ValueExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ValueExpressionContext,i)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPosition" ):
                return visitor.visitPosition(self)
            else:
                return visitor.visitChildren(self)


    class FirstContext(PrimaryExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.PrimaryExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FIRST(self):
            return self.getToken(fugue_sqlParser.FIRST, 0)
        def expression(self):
            return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,0)

        def IGNORE(self):
            return self.getToken(fugue_sqlParser.IGNORE, 0)
        def THENULLS(self):
            return self.getToken(fugue_sqlParser.THENULLS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFirst" ):
                return visitor.visitFirst(self)
            else:
                return visitor.visitChildren(self)



    def primaryExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = fugue_sqlParser.PrimaryExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 346
        self.enterRecursionRule(localctx, 346, self.RULE_primaryExpression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3480
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,464,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.CurrentDatetimeContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 3297
                localctx.name = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==99 or _la==101):
                    localctx.name = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.SearchedCaseContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3298
                self.match(fugue_sqlParser.CASE)
                self.state = 3300 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 3299
                    self.whenClause()
                    self.state = 3302 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==301):
                        break

                self.state = 3306
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==119:
                    self.state = 3304
                    self.match(fugue_sqlParser.ELSE)
                    self.state = 3305
                    localctx.elseExpression = self.expression()


                self.state = 3308
                self.match(fugue_sqlParser.END)
                pass

            elif la_ == 3:
                localctx = fugue_sqlParser.SimpleCaseContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3310
                self.match(fugue_sqlParser.CASE)
                self.state = 3311
                localctx.value = self.expression()
                self.state = 3313 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 3312
                    self.whenClause()
                    self.state = 3315 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==301):
                        break

                self.state = 3319
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==119:
                    self.state = 3317
                    self.match(fugue_sqlParser.ELSE)
                    self.state = 3318
                    localctx.elseExpression = self.expression()


                self.state = 3321
                self.match(fugue_sqlParser.END)
                pass

            elif la_ == 4:
                localctx = fugue_sqlParser.CastContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3323
                self.match(fugue_sqlParser.CAST)
                self.state = 3324
                self.match(fugue_sqlParser.T__2)
                self.state = 3325
                self.expression()
                self.state = 3326
                self.match(fugue_sqlParser.AS)
                self.state = 3327
                self.dataType()
                self.state = 3328
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 5:
                localctx = fugue_sqlParser.StructContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3330
                self.match(fugue_sqlParser.STRUCT)
                self.state = 3331
                self.match(fugue_sqlParser.T__2)
                self.state = 3340
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((_la) & ~0x3f) == 0 and ((1 << _la) & -18014398509481976) != 0 or (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1) != 0 or (((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -1) != 0 or (((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & -1) != 0 or (((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & 4036351166030807039) != 0 or (((_la - 320)) & ~0x3f) == 0 and ((1 << (_la - 320)) & 131011) != 0:
                    self.state = 3332
                    localctx._namedExpression = self.namedExpression()
                    localctx.argument.append(localctx._namedExpression)
                    self.state = 3337
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1:
                        self.state = 3333
                        self.match(fugue_sqlParser.T__0)
                        self.state = 3334
                        localctx._namedExpression = self.namedExpression()
                        localctx.argument.append(localctx._namedExpression)
                        self.state = 3339
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 3342
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 6:
                localctx = fugue_sqlParser.FirstContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3343
                self.match(fugue_sqlParser.FIRST)
                self.state = 3344
                self.match(fugue_sqlParser.T__2)
                self.state = 3345
                self.expression()
                self.state = 3348
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==153:
                    self.state = 3346
                    self.match(fugue_sqlParser.IGNORE)
                    self.state = 3347
                    self.match(fugue_sqlParser.THENULLS)


                self.state = 3350
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 7:
                localctx = fugue_sqlParser.LastContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3352
                self.match(fugue_sqlParser.LAST)
                self.state = 3353
                self.match(fugue_sqlParser.T__2)
                self.state = 3354
                self.expression()
                self.state = 3357
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==153:
                    self.state = 3355
                    self.match(fugue_sqlParser.IGNORE)
                    self.state = 3356
                    self.match(fugue_sqlParser.THENULLS)


                self.state = 3359
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 8:
                localctx = fugue_sqlParser.PositionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3361
                self.match(fugue_sqlParser.POSITION)
                self.state = 3362
                self.match(fugue_sqlParser.T__2)
                self.state = 3363
                localctx.substr = self.valueExpression(0)
                self.state = 3364
                self.match(fugue_sqlParser.IN)
                self.state = 3365
                localctx.istr = self.valueExpression(0)
                self.state = 3366
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 9:
                localctx = fugue_sqlParser.ConstantDefaultContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3368
                self.constant()
                pass

            elif la_ == 10:
                localctx = fugue_sqlParser.StarContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3369
                self.match(fugue_sqlParser.ASTERISK)
                pass

            elif la_ == 11:
                localctx = fugue_sqlParser.StarContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3370
                self.qualifiedName()
                self.state = 3371
                self.match(fugue_sqlParser.T__6)
                self.state = 3372
                self.match(fugue_sqlParser.ASTERISK)
                pass

            elif la_ == 12:
                localctx = fugue_sqlParser.RowConstructorContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3374
                self.match(fugue_sqlParser.T__2)
                self.state = 3375
                self.namedExpression()
                self.state = 3378 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 3376
                    self.match(fugue_sqlParser.T__0)
                    self.state = 3377
                    self.namedExpression()
                    self.state = 3380 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==1):
                        break

                self.state = 3382
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 13:
                localctx = fugue_sqlParser.SubqueryExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3384
                self.match(fugue_sqlParser.T__2)
                self.state = 3385
                self.query()
                self.state = 3386
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 14:
                localctx = fugue_sqlParser.FunctionCallContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3388
                self.functionName()
                self.state = 3389
                self.match(fugue_sqlParser.T__2)
                self.state = 3401
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((_la) & ~0x3f) == 0 and ((1 << _la) & -18014398509481976) != 0 or (((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & -1) != 0 or (((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & -1) != 0 or (((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & -1) != 0 or (((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & 4036351166030807039) != 0 or (((_la - 320)) & ~0x3f) == 0 and ((1 << (_la - 320)) & 131011) != 0:
                    self.state = 3391
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,454,self._ctx)
                    if la_ == 1:
                        self.state = 3390
                        self.setQuantifier()


                    self.state = 3393
                    localctx._expression = self.expression()
                    localctx.argument.append(localctx._expression)
                    self.state = 3398
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1:
                        self.state = 3394
                        self.match(fugue_sqlParser.T__0)
                        self.state = 3395
                        localctx._expression = self.expression()
                        localctx.argument.append(localctx._expression)
                        self.state = 3400
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 3403
                self.match(fugue_sqlParser.T__3)
                self.state = 3410
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,457,self._ctx)
                if la_ == 1:
                    self.state = 3404
                    self.match(fugue_sqlParser.FILTER)
                    self.state = 3405
                    self.match(fugue_sqlParser.T__2)
                    self.state = 3406
                    self.match(fugue_sqlParser.WHERE)
                    self.state = 3407
                    localctx.where = self.booleanExpression(0)
                    self.state = 3408
                    self.match(fugue_sqlParser.T__3)


                self.state = 3414
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,458,self._ctx)
                if la_ == 1:
                    self.state = 3412
                    self.match(fugue_sqlParser.OVER)
                    self.state = 3413
                    self.windowSpec()


                pass

            elif la_ == 15:
                localctx = fugue_sqlParser.LambdaContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3416
                self.identifier()
                self.state = 3417
                self.match(fugue_sqlParser.T__15)
                self.state = 3418
                self.expression()
                pass

            elif la_ == 16:
                localctx = fugue_sqlParser.LambdaContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3420
                self.match(fugue_sqlParser.T__2)
                self.state = 3421
                self.identifier()
                self.state = 3424 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 3422
                    self.match(fugue_sqlParser.T__0)
                    self.state = 3423
                    self.identifier()
                    self.state = 3426 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==1):
                        break

                self.state = 3428
                self.match(fugue_sqlParser.T__3)
                self.state = 3429
                self.match(fugue_sqlParser.T__15)
                self.state = 3430
                self.expression()
                pass

            elif la_ == 17:
                localctx = fugue_sqlParser.ColumnReferenceContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3432
                self.identifier()
                pass

            elif la_ == 18:
                localctx = fugue_sqlParser.ParenthesizedExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3433
                self.match(fugue_sqlParser.T__2)
                self.state = 3434
                self.expression()
                self.state = 3435
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 19:
                localctx = fugue_sqlParser.ExtractContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3437
                self.match(fugue_sqlParser.EXTRACT)
                self.state = 3438
                self.match(fugue_sqlParser.T__2)
                self.state = 3439
                localctx.field = self.identifier()
                self.state = 3440
                self.match(fugue_sqlParser.FROM)
                self.state = 3441
                localctx.source = self.valueExpression(0)
                self.state = 3442
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 20:
                localctx = fugue_sqlParser.SubstringContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3444
                _la = self._input.LA(1)
                if not(_la==267 or _la==268):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3445
                self.match(fugue_sqlParser.T__2)
                self.state = 3446
                localctx.istr = self.valueExpression(0)
                self.state = 3447
                _la = self._input.LA(1)
                if not(_la==1 or _la==142):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3448
                localctx.pos = self.valueExpression(0)
                self.state = 3451
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1 or _la==138:
                    self.state = 3449
                    _la = self._input.LA(1)
                    if not(_la==1 or _la==138):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 3450
                    localctx.ilen = self.valueExpression(0)


                self.state = 3453
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 21:
                localctx = fugue_sqlParser.TrimContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3455
                self.match(fugue_sqlParser.TRIM)
                self.state = 3456
                self.match(fugue_sqlParser.T__2)
                self.state = 3458
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,461,self._ctx)
                if la_ == 1:
                    self.state = 3457
                    localctx.trimOption = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==69 or _la==172 or _la==278):
                        localctx.trimOption = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 3461
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,462,self._ctx)
                if la_ == 1:
                    self.state = 3460
                    localctx.trimStr = self.valueExpression(0)


                self.state = 3463
                self.match(fugue_sqlParser.FROM)
                self.state = 3464
                localctx.srcStr = self.valueExpression(0)
                self.state = 3465
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 22:
                localctx = fugue_sqlParser.OverlayContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 3467
                self.match(fugue_sqlParser.OVERLAY)
                self.state = 3468
                self.match(fugue_sqlParser.T__2)
                self.state = 3469
                localctx.iinput = self.valueExpression(0)
                self.state = 3470
                self.match(fugue_sqlParser.PLACING)
                self.state = 3471
                localctx.replace = self.valueExpression(0)
                self.state = 3472
                self.match(fugue_sqlParser.FROM)
                self.state = 3473
                localctx.position = self.valueExpression(0)
                self.state = 3476
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==138:
                    self.state = 3474
                    self.match(fugue_sqlParser.FOR)
                    self.state = 3475
                    localctx.length = self.valueExpression(0)


                self.state = 3478
                self.match(fugue_sqlParser.T__3)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 3492
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,466,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 3490
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,465,self._ctx)
                    if la_ == 1:
                        localctx = fugue_sqlParser.SubscriptContext(self, fugue_sqlParser.PrimaryExpressionContext(self, _parentctx, _parentState))
                        localctx.value = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_primaryExpression)
                        self.state = 3482
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 3483
                        self.match(fugue_sqlParser.T__4)
                        self.state = 3484
                        localctx.index = self.valueExpression(0)
                        self.state = 3485
                        self.match(fugue_sqlParser.T__5)
                        pass

                    elif la_ == 2:
                        localctx = fugue_sqlParser.DereferenceContext(self, fugue_sqlParser.PrimaryExpressionContext(self, _parentctx, _parentState))
                        localctx.base = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_primaryExpression)
                        self.state = 3487
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 3488
                        self.match(fugue_sqlParser.T__6)
                        self.state = 3489
                        localctx.fieldName = self.identifier()
                        pass

             
                self.state = 3494
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,466,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ConstantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_constant

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class NullLiteralContext(ConstantContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.ConstantContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def THENULL(self):
            return self.getToken(fugue_sqlParser.THENULL, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNullLiteral" ):
                return visitor.visitNullLiteral(self)
            else:
                return visitor.visitChildren(self)


    class StringLiteralContext(ConstantContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.ConstantContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.STRING)
            else:
                return self.getToken(fugue_sqlParser.STRING, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringLiteral" ):
                return visitor.visitStringLiteral(self)
            else:
                return visitor.visitChildren(self)


    class TypeConstructorContext(ConstantContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.ConstantContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)

        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeConstructor" ):
                return visitor.visitTypeConstructor(self)
            else:
                return visitor.visitChildren(self)


    class IntervalLiteralContext(ConstantContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.ConstantContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def interval(self):
            return self.getTypedRuleContext(fugue_sqlParser.IntervalContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntervalLiteral" ):
                return visitor.visitIntervalLiteral(self)
            else:
                return visitor.visitChildren(self)


    class NumericLiteralContext(ConstantContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.ConstantContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def number(self):
            return self.getTypedRuleContext(fugue_sqlParser.NumberContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumericLiteral" ):
                return visitor.visitNumericLiteral(self)
            else:
                return visitor.visitChildren(self)


    class BooleanLiteralContext(ConstantContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.ConstantContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def booleanValue(self):
            return self.getTypedRuleContext(fugue_sqlParser.BooleanValueContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBooleanLiteral" ):
                return visitor.visitBooleanLiteral(self)
            else:
                return visitor.visitChildren(self)



    def constant(self):

        localctx = fugue_sqlParser.ConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 348, self.RULE_constant)
        try:
            self.state = 3507
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,468,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.NullLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3495
                self.match(fugue_sqlParser.THENULL)
                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.IntervalLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3496
                self.interval()
                pass

            elif la_ == 3:
                localctx = fugue_sqlParser.TypeConstructorContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3497
                self.identifier()
                self.state = 3498
                self.match(fugue_sqlParser.STRING)
                pass

            elif la_ == 4:
                localctx = fugue_sqlParser.NumericLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 3500
                self.number()
                pass

            elif la_ == 5:
                localctx = fugue_sqlParser.BooleanLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 3501
                self.booleanValue()
                pass

            elif la_ == 6:
                localctx = fugue_sqlParser.StringLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 3503 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 3502
                        self.match(fugue_sqlParser.STRING)

                    else:
                        raise NoViableAltException(self)
                    self.state = 3505 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,467,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComparisonOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comparisonEqualOperator(self):
            return self.getTypedRuleContext(fugue_sqlParser.ComparisonEqualOperatorContext,0)


        def NEQ(self):
            return self.getToken(fugue_sqlParser.NEQ, 0)

        def NEQJ(self):
            return self.getToken(fugue_sqlParser.NEQJ, 0)

        def LT(self):
            return self.getToken(fugue_sqlParser.LT, 0)

        def LTE(self):
            return self.getToken(fugue_sqlParser.LTE, 0)

        def GT(self):
            return self.getToken(fugue_sqlParser.GT, 0)

        def GTE(self):
            return self.getToken(fugue_sqlParser.GTE, 0)

        def NSEQ(self):
            return self.getToken(fugue_sqlParser.NSEQ, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_comparisonOperator

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparisonOperator" ):
                return visitor.visitComparisonOperator(self)
            else:
                return visitor.visitChildren(self)




    def comparisonOperator(self):

        localctx = fugue_sqlParser.ComparisonOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 350, self.RULE_comparisonOperator)
        try:
            self.state = 3517
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [306, 307]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3509
                self.comparisonEqualOperator()
                pass
            elif token in [309]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3510
                self.match(fugue_sqlParser.NEQ)
                pass
            elif token in [310]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3511
                self.match(fugue_sqlParser.NEQJ)
                pass
            elif token in [311]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3512
                self.match(fugue_sqlParser.LT)
                pass
            elif token in [312]:
                self.enterOuterAlt(localctx, 5)
                self.state = 3513
                self.match(fugue_sqlParser.LTE)
                pass
            elif token in [313]:
                self.enterOuterAlt(localctx, 6)
                self.state = 3514
                self.match(fugue_sqlParser.GT)
                pass
            elif token in [314]:
                self.enterOuterAlt(localctx, 7)
                self.state = 3515
                self.match(fugue_sqlParser.GTE)
                pass
            elif token in [308]:
                self.enterOuterAlt(localctx, 8)
                self.state = 3516
                self.match(fugue_sqlParser.NSEQ)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComparisonEqualOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOUBLEEQUAL(self):
            return self.getToken(fugue_sqlParser.DOUBLEEQUAL, 0)

        def EQUAL(self):
            return self.getToken(fugue_sqlParser.EQUAL, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_comparisonEqualOperator

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparisonEqualOperator" ):
                return visitor.visitComparisonEqualOperator(self)
            else:
                return visitor.visitChildren(self)




    def comparisonEqualOperator(self):

        localctx = fugue_sqlParser.ComparisonEqualOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 352, self.RULE_comparisonEqualOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3519
            _la = self._input.LA(1)
            if not(_la==306 or _la==307):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArithmeticOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLUS(self):
            return self.getToken(fugue_sqlParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(fugue_sqlParser.MINUS, 0)

        def ASTERISK(self):
            return self.getToken(fugue_sqlParser.ASTERISK, 0)

        def SLASH(self):
            return self.getToken(fugue_sqlParser.SLASH, 0)

        def PERCENT(self):
            return self.getToken(fugue_sqlParser.PERCENT, 0)

        def DIV(self):
            return self.getToken(fugue_sqlParser.DIV, 0)

        def TILDE(self):
            return self.getToken(fugue_sqlParser.TILDE, 0)

        def AMPERSAND(self):
            return self.getToken(fugue_sqlParser.AMPERSAND, 0)

        def PIPE(self):
            return self.getToken(fugue_sqlParser.PIPE, 0)

        def CONCAT_PIPE(self):
            return self.getToken(fugue_sqlParser.CONCAT_PIPE, 0)

        def HAT(self):
            return self.getToken(fugue_sqlParser.HAT, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_arithmeticOperator

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArithmeticOperator" ):
                return visitor.visitArithmeticOperator(self)
            else:
                return visitor.visitChildren(self)




    def arithmeticOperator(self):

        localctx = fugue_sqlParser.ArithmeticOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 354, self.RULE_arithmeticOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3521
            _la = self._input.LA(1)
            if not((((_la - 315)) & ~0x3f) == 0 and ((1 << (_la - 315)) & 2047) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PredicateOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OR(self):
            return self.getToken(fugue_sqlParser.OR, 0)

        def AND(self):
            return self.getToken(fugue_sqlParser.AND, 0)

        def IN(self):
            return self.getToken(fugue_sqlParser.IN, 0)

        def NOT(self):
            return self.getToken(fugue_sqlParser.NOT, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_predicateOperator

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPredicateOperator" ):
                return visitor.visitPredicateOperator(self)
            else:
                return visitor.visitChildren(self)




    def predicateOperator(self):

        localctx = fugue_sqlParser.PredicateOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 356, self.RULE_predicateOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3523
            _la = self._input.LA(1)
            if not(_la==59 or (((_la - 155)) & ~0x3f) == 0 and ((1 << (_la - 155)) & 282574488338433) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(fugue_sqlParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(fugue_sqlParser.FALSE, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_booleanValue

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBooleanValue" ):
                return visitor.visitBooleanValue(self)
            else:
                return visitor.visitChildren(self)




    def booleanValue(self):

        localctx = fugue_sqlParser.BooleanValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 358, self.RULE_booleanValue)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3525
            _la = self._input.LA(1)
            if not(_la==131 or _la==283):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTERVAL(self):
            return self.getToken(fugue_sqlParser.INTERVAL, 0)

        def errorCapturingMultiUnitsInterval(self):
            return self.getTypedRuleContext(fugue_sqlParser.ErrorCapturingMultiUnitsIntervalContext,0)


        def errorCapturingUnitToUnitInterval(self):
            return self.getTypedRuleContext(fugue_sqlParser.ErrorCapturingUnitToUnitIntervalContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_interval

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterval" ):
                return visitor.visitInterval(self)
            else:
                return visitor.visitChildren(self)




    def interval(self):

        localctx = fugue_sqlParser.IntervalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 360, self.RULE_interval)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3527
            self.match(fugue_sqlParser.INTERVAL)
            self.state = 3530
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,470,self._ctx)
            if la_ == 1:
                self.state = 3528
                self.errorCapturingMultiUnitsInterval()

            elif la_ == 2:
                self.state = 3529
                self.errorCapturingUnitToUnitInterval()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ErrorCapturingMultiUnitsIntervalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multiUnitsInterval(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultiUnitsIntervalContext,0)


        def unitToUnitInterval(self):
            return self.getTypedRuleContext(fugue_sqlParser.UnitToUnitIntervalContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_errorCapturingMultiUnitsInterval

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitErrorCapturingMultiUnitsInterval" ):
                return visitor.visitErrorCapturingMultiUnitsInterval(self)
            else:
                return visitor.visitChildren(self)




    def errorCapturingMultiUnitsInterval(self):

        localctx = fugue_sqlParser.ErrorCapturingMultiUnitsIntervalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 362, self.RULE_errorCapturingMultiUnitsInterval)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3532
            self.multiUnitsInterval()
            self.state = 3534
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,471,self._ctx)
            if la_ == 1:
                self.state = 3533
                self.unitToUnitInterval()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiUnitsIntervalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def intervalValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.IntervalValueContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.IntervalValueContext,i)


        def intervalUnit(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.IntervalUnitContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.IntervalUnitContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_multiUnitsInterval

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiUnitsInterval" ):
                return visitor.visitMultiUnitsInterval(self)
            else:
                return visitor.visitChildren(self)




    def multiUnitsInterval(self):

        localctx = fugue_sqlParser.MultiUnitsIntervalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 364, self.RULE_multiUnitsInterval)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3539 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 3536
                    self.intervalValue()
                    self.state = 3537
                    self.intervalUnit()

                else:
                    raise NoViableAltException(self)
                self.state = 3541 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,472,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ErrorCapturingUnitToUnitIntervalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.body = None # UnitToUnitIntervalContext
            self.error1 = None # MultiUnitsIntervalContext
            self.error2 = None # UnitToUnitIntervalContext

        def unitToUnitInterval(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.UnitToUnitIntervalContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.UnitToUnitIntervalContext,i)


        def multiUnitsInterval(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultiUnitsIntervalContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_errorCapturingUnitToUnitInterval

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitErrorCapturingUnitToUnitInterval" ):
                return visitor.visitErrorCapturingUnitToUnitInterval(self)
            else:
                return visitor.visitChildren(self)




    def errorCapturingUnitToUnitInterval(self):

        localctx = fugue_sqlParser.ErrorCapturingUnitToUnitIntervalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 366, self.RULE_errorCapturingUnitToUnitInterval)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3543
            localctx.body = self.unitToUnitInterval()
            self.state = 3546
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,473,self._ctx)
            if la_ == 1:
                self.state = 3544
                localctx.error1 = self.multiUnitsInterval()

            elif la_ == 2:
                self.state = 3545
                localctx.error2 = self.unitToUnitInterval()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnitToUnitIntervalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.value = None # IntervalValueContext
            self.ifrom = None # IntervalUnitContext
            self.to = None # IntervalUnitContext

        def TO(self):
            return self.getToken(fugue_sqlParser.TO, 0)

        def intervalValue(self):
            return self.getTypedRuleContext(fugue_sqlParser.IntervalValueContext,0)


        def intervalUnit(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.IntervalUnitContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.IntervalUnitContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_unitToUnitInterval

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnitToUnitInterval" ):
                return visitor.visitUnitToUnitInterval(self)
            else:
                return visitor.visitChildren(self)




    def unitToUnitInterval(self):

        localctx = fugue_sqlParser.UnitToUnitIntervalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 368, self.RULE_unitToUnitInterval)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3548
            localctx.value = self.intervalValue()
            self.state = 3549
            localctx.ifrom = self.intervalUnit()
            self.state = 3550
            self.match(fugue_sqlParser.TO)
            self.state = 3551
            localctx.to = self.intervalUnit()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTEGER_VALUE(self):
            return self.getToken(fugue_sqlParser.INTEGER_VALUE, 0)

        def DECIMAL_VALUE(self):
            return self.getToken(fugue_sqlParser.DECIMAL_VALUE, 0)

        def PLUS(self):
            return self.getToken(fugue_sqlParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(fugue_sqlParser.MINUS, 0)

        def STRING(self):
            return self.getToken(fugue_sqlParser.STRING, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_intervalValue

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntervalValue" ):
                return visitor.visitIntervalValue(self)
            else:
                return visitor.visitChildren(self)




    def intervalValue(self):

        localctx = fugue_sqlParser.IntervalValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 370, self.RULE_intervalValue)
        self._la = 0 # Token type
        try:
            self.state = 3558
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [315, 316, 330, 332]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3554
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==315 or _la==316:
                    self.state = 3553
                    _la = self._input.LA(1)
                    if not(_la==315 or _la==316):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 3556
                _la = self._input.LA(1)
                if not(_la==330 or _la==332):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [326]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3557
                self.match(fugue_sqlParser.STRING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalUnitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DAY(self):
            return self.getToken(fugue_sqlParser.DAY, 0)

        def HOUR(self):
            return self.getToken(fugue_sqlParser.HOUR, 0)

        def MINUTE(self):
            return self.getToken(fugue_sqlParser.MINUTE, 0)

        def MONTH(self):
            return self.getToken(fugue_sqlParser.MONTH, 0)

        def SECOND(self):
            return self.getToken(fugue_sqlParser.SECOND, 0)

        def YEAR(self):
            return self.getToken(fugue_sqlParser.YEAR, 0)

        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_intervalUnit

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntervalUnit" ):
                return visitor.visitIntervalUnit(self)
            else:
                return visitor.visitChildren(self)




    def intervalUnit(self):

        localctx = fugue_sqlParser.IntervalUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 372, self.RULE_intervalUnit)
        try:
            self.state = 3567
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,476,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3560
                self.match(fugue_sqlParser.DAY)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3561
                self.match(fugue_sqlParser.HOUR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3562
                self.match(fugue_sqlParser.MINUTE)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3563
                self.match(fugue_sqlParser.MONTH)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 3564
                self.match(fugue_sqlParser.SECOND)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 3565
                self.match(fugue_sqlParser.YEAR)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 3566
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColPositionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.position = None # Token
            self.afterCol = None # ErrorCapturingIdentifierContext

        def FIRST(self):
            return self.getToken(fugue_sqlParser.FIRST, 0)

        def AFTER(self):
            return self.getToken(fugue_sqlParser.AFTER, 0)

        def errorCapturingIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.ErrorCapturingIdentifierContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_colPosition

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColPosition" ):
                return visitor.visitColPosition(self)
            else:
                return visitor.visitChildren(self)




    def colPosition(self):

        localctx = fugue_sqlParser.ColPositionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 374, self.RULE_colPosition)
        try:
            self.state = 3572
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [136]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3569
                localctx.position = self.match(fugue_sqlParser.FIRST)
                pass
            elif token in [55]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3570
                localctx.position = self.match(fugue_sqlParser.AFTER)
                self.state = 3571
                localctx.afterCol = self.errorCapturingIdentifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_dataType

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ComplexDataTypeContext(DataTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.DataTypeContext
            super().__init__(parser)
            self.icomplex = None # Token
            self.copyFrom(ctx)

        def LT(self):
            return self.getToken(fugue_sqlParser.LT, 0)
        def dataType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.DataTypeContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.DataTypeContext,i)

        def GT(self):
            return self.getToken(fugue_sqlParser.GT, 0)
        def ARRAY(self):
            return self.getToken(fugue_sqlParser.ARRAY, 0)
        def MAP(self):
            return self.getToken(fugue_sqlParser.MAP, 0)
        def STRUCT(self):
            return self.getToken(fugue_sqlParser.STRUCT, 0)
        def NEQ(self):
            return self.getToken(fugue_sqlParser.NEQ, 0)
        def complexColTypeList(self):
            return self.getTypedRuleContext(fugue_sqlParser.ComplexColTypeListContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComplexDataType" ):
                return visitor.visitComplexDataType(self)
            else:
                return visitor.visitChildren(self)


    class PrimitiveDataTypeContext(DataTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.DataTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)

        def INTEGER_VALUE(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.INTEGER_VALUE)
            else:
                return self.getToken(fugue_sqlParser.INTEGER_VALUE, i)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimitiveDataType" ):
                return visitor.visitPrimitiveDataType(self)
            else:
                return visitor.visitChildren(self)



    def dataType(self):

        localctx = fugue_sqlParser.DataTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 376, self.RULE_dataType)
        self._la = 0 # Token type
        try:
            self.state = 3608
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,482,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.ComplexDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3574
                localctx.icomplex = self.match(fugue_sqlParser.ARRAY)
                self.state = 3575
                self.match(fugue_sqlParser.LT)
                self.state = 3576
                self.dataType()
                self.state = 3577
                self.match(fugue_sqlParser.GT)
                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.ComplexDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3579
                localctx.icomplex = self.match(fugue_sqlParser.MAP)
                self.state = 3580
                self.match(fugue_sqlParser.LT)
                self.state = 3581
                self.dataType()
                self.state = 3582
                self.match(fugue_sqlParser.T__0)
                self.state = 3583
                self.dataType()
                self.state = 3584
                self.match(fugue_sqlParser.GT)
                pass

            elif la_ == 3:
                localctx = fugue_sqlParser.ComplexDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3586
                localctx.icomplex = self.match(fugue_sqlParser.STRUCT)
                self.state = 3593
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [311]:
                    self.state = 3587
                    self.match(fugue_sqlParser.LT)
                    self.state = 3589
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la - 54)) & ~0x3f) == 0 and ((1 << (_la - 54)) & -1) != 0 or (((_la - 118)) & ~0x3f) == 0 and ((1 << (_la - 118)) & -1) != 0 or (((_la - 182)) & ~0x3f) == 0 and ((1 << (_la - 182)) & -1) != 0 or (((_la - 246)) & ~0x3f) == 0 and ((1 << (_la - 246)) & 1152921504606846975) != 0 or (((_la - 320)) & ~0x3f) == 0 and ((1 << (_la - 320)) & 98305) != 0:
                        self.state = 3588
                        self.complexColTypeList()


                    self.state = 3591
                    self.match(fugue_sqlParser.GT)
                    pass
                elif token in [309]:
                    self.state = 3592
                    self.match(fugue_sqlParser.NEQ)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 4:
                localctx = fugue_sqlParser.PrimitiveDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 3595
                self.identifier()
                self.state = 3606
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,481,self._ctx)
                if la_ == 1:
                    self.state = 3596
                    self.match(fugue_sqlParser.T__2)
                    self.state = 3597
                    self.match(fugue_sqlParser.INTEGER_VALUE)
                    self.state = 3602
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1:
                        self.state = 3598
                        self.match(fugue_sqlParser.T__0)
                        self.state = 3599
                        self.match(fugue_sqlParser.INTEGER_VALUE)
                        self.state = 3604
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 3605
                    self.match(fugue_sqlParser.T__3)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedColTypeWithPositionListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedColTypeWithPosition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.QualifiedColTypeWithPositionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.QualifiedColTypeWithPositionContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_qualifiedColTypeWithPositionList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualifiedColTypeWithPositionList" ):
                return visitor.visitQualifiedColTypeWithPositionList(self)
            else:
                return visitor.visitChildren(self)




    def qualifiedColTypeWithPositionList(self):

        localctx = fugue_sqlParser.QualifiedColTypeWithPositionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 378, self.RULE_qualifiedColTypeWithPositionList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3610
            self.qualifiedColTypeWithPosition()
            self.state = 3615
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1:
                self.state = 3611
                self.match(fugue_sqlParser.T__0)
                self.state = 3612
                self.qualifiedColTypeWithPosition()
                self.state = 3617
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedColTypeWithPositionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # MultipartIdentifierContext

        def dataType(self):
            return self.getTypedRuleContext(fugue_sqlParser.DataTypeContext,0)


        def multipartIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.MultipartIdentifierContext,0)


        def NOT(self):
            return self.getToken(fugue_sqlParser.NOT, 0)

        def THENULL(self):
            return self.getToken(fugue_sqlParser.THENULL, 0)

        def commentSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.CommentSpecContext,0)


        def colPosition(self):
            return self.getTypedRuleContext(fugue_sqlParser.ColPositionContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_qualifiedColTypeWithPosition

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualifiedColTypeWithPosition" ):
                return visitor.visitQualifiedColTypeWithPosition(self)
            else:
                return visitor.visitChildren(self)




    def qualifiedColTypeWithPosition(self):

        localctx = fugue_sqlParser.QualifiedColTypeWithPositionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 380, self.RULE_qualifiedColTypeWithPosition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3618
            localctx.name = self.multipartIdentifier()
            self.state = 3619
            self.dataType()
            self.state = 3622
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==195:
                self.state = 3620
                self.match(fugue_sqlParser.NOT)
                self.state = 3621
                self.match(fugue_sqlParser.THENULL)


            self.state = 3625
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==87:
                self.state = 3624
                self.commentSpec()


            self.state = 3628
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==55 or _la==136:
                self.state = 3627
                self.colPosition()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColTypeListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def colType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ColTypeContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ColTypeContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_colTypeList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColTypeList" ):
                return visitor.visitColTypeList(self)
            else:
                return visitor.visitChildren(self)




    def colTypeList(self):

        localctx = fugue_sqlParser.ColTypeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 382, self.RULE_colTypeList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3630
            self.colType()
            self.state = 3635
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,487,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3631
                    self.match(fugue_sqlParser.T__0)
                    self.state = 3632
                    self.colType() 
                self.state = 3637
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,487,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.colName = None # ErrorCapturingIdentifierContext

        def dataType(self):
            return self.getTypedRuleContext(fugue_sqlParser.DataTypeContext,0)


        def errorCapturingIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.ErrorCapturingIdentifierContext,0)


        def NOT(self):
            return self.getToken(fugue_sqlParser.NOT, 0)

        def THENULL(self):
            return self.getToken(fugue_sqlParser.THENULL, 0)

        def commentSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.CommentSpecContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_colType

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColType" ):
                return visitor.visitColType(self)
            else:
                return visitor.visitChildren(self)




    def colType(self):

        localctx = fugue_sqlParser.ColTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 384, self.RULE_colType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3638
            localctx.colName = self.errorCapturingIdentifier()
            self.state = 3639
            self.dataType()
            self.state = 3642
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,488,self._ctx)
            if la_ == 1:
                self.state = 3640
                self.match(fugue_sqlParser.NOT)
                self.state = 3641
                self.match(fugue_sqlParser.THENULL)


            self.state = 3645
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,489,self._ctx)
            if la_ == 1:
                self.state = 3644
                self.commentSpec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComplexColTypeListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def complexColType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ComplexColTypeContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ComplexColTypeContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_complexColTypeList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComplexColTypeList" ):
                return visitor.visitComplexColTypeList(self)
            else:
                return visitor.visitChildren(self)




    def complexColTypeList(self):

        localctx = fugue_sqlParser.ComplexColTypeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 386, self.RULE_complexColTypeList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3647
            self.complexColType()
            self.state = 3652
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1:
                self.state = 3648
                self.match(fugue_sqlParser.T__0)
                self.state = 3649
                self.complexColType()
                self.state = 3654
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComplexColTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)


        def dataType(self):
            return self.getTypedRuleContext(fugue_sqlParser.DataTypeContext,0)


        def NOT(self):
            return self.getToken(fugue_sqlParser.NOT, 0)

        def THENULL(self):
            return self.getToken(fugue_sqlParser.THENULL, 0)

        def commentSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.CommentSpecContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_complexColType

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComplexColType" ):
                return visitor.visitComplexColType(self)
            else:
                return visitor.visitChildren(self)




    def complexColType(self):

        localctx = fugue_sqlParser.ComplexColTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 388, self.RULE_complexColType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3655
            self.identifier()
            self.state = 3656
            self.match(fugue_sqlParser.T__1)
            self.state = 3657
            self.dataType()
            self.state = 3660
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==195:
                self.state = 3658
                self.match(fugue_sqlParser.NOT)
                self.state = 3659
                self.match(fugue_sqlParser.THENULL)


            self.state = 3663
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==87:
                self.state = 3662
                self.commentSpec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhenClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.condition = None # ExpressionContext
            self.result = None # ExpressionContext

        def WHEN(self):
            return self.getToken(fugue_sqlParser.WHEN, 0)

        def THEN(self):
            return self.getToken(fugue_sqlParser.THEN, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_whenClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhenClause" ):
                return visitor.visitWhenClause(self)
            else:
                return visitor.visitChildren(self)




    def whenClause(self):

        localctx = fugue_sqlParser.WhenClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 390, self.RULE_whenClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3665
            self.match(fugue_sqlParser.WHEN)
            self.state = 3666
            localctx.condition = self.expression()
            self.state = 3667
            self.match(fugue_sqlParser.THEN)
            self.state = 3668
            localctx.result = self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WINDOW(self):
            return self.getToken(fugue_sqlParser.WINDOW, 0)

        def namedWindow(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.NamedWindowContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.NamedWindowContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_windowClause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindowClause" ):
                return visitor.visitWindowClause(self)
            else:
                return visitor.visitChildren(self)




    def windowClause(self):

        localctx = fugue_sqlParser.WindowClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 392, self.RULE_windowClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3670
            self.match(fugue_sqlParser.WINDOW)
            self.state = 3671
            self.namedWindow()
            self.state = 3676
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,493,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3672
                    self.match(fugue_sqlParser.T__0)
                    self.state = 3673
                    self.namedWindow() 
                self.state = 3678
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,493,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedWindowContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.name = None # ErrorCapturingIdentifierContext

        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)

        def windowSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.WindowSpecContext,0)


        def errorCapturingIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.ErrorCapturingIdentifierContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_namedWindow

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamedWindow" ):
                return visitor.visitNamedWindow(self)
            else:
                return visitor.visitChildren(self)




    def namedWindow(self):

        localctx = fugue_sqlParser.NamedWindowContext(self, self._ctx, self.state)
        self.enterRule(localctx, 394, self.RULE_namedWindow)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3679
            localctx.name = self.errorCapturingIdentifier()
            self.state = 3680
            self.match(fugue_sqlParser.AS)
            self.state = 3681
            self.windowSpec()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_windowSpec

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class WindowRefContext(WindowSpecContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.WindowSpecContext
            super().__init__(parser)
            self.name = None # ErrorCapturingIdentifierContext
            self.copyFrom(ctx)

        def errorCapturingIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.ErrorCapturingIdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindowRef" ):
                return visitor.visitWindowRef(self)
            else:
                return visitor.visitChildren(self)


    class WindowDefContext(WindowSpecContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.WindowSpecContext
            super().__init__(parser)
            self._expression = None # ExpressionContext
            self.partition = list() # of ExpressionContexts
            self.copyFrom(ctx)

        def CLUSTER(self):
            return self.getToken(fugue_sqlParser.CLUSTER, 0)
        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.BY)
            else:
                return self.getToken(fugue_sqlParser.BY, i)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,i)

        def windowFrame(self):
            return self.getTypedRuleContext(fugue_sqlParser.WindowFrameContext,0)

        def sortItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.SortItemContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.SortItemContext,i)

        def PARTITION(self):
            return self.getToken(fugue_sqlParser.PARTITION, 0)
        def DISTRIBUTE(self):
            return self.getToken(fugue_sqlParser.DISTRIBUTE, 0)
        def ORDER(self):
            return self.getToken(fugue_sqlParser.ORDER, 0)
        def SORT(self):
            return self.getToken(fugue_sqlParser.SORT, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindowDef" ):
                return visitor.visitWindowDef(self)
            else:
                return visitor.visitChildren(self)



    def windowSpec(self):

        localctx = fugue_sqlParser.WindowSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 396, self.RULE_windowSpec)
        self._la = 0 # Token type
        try:
            self.state = 3729
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,501,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.WindowRefContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3683
                localctx.name = self.errorCapturingIdentifier()
                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.WindowRefContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3684
                self.match(fugue_sqlParser.T__2)
                self.state = 3685
                localctx.name = self.errorCapturingIdentifier()
                self.state = 3686
                self.match(fugue_sqlParser.T__3)
                pass

            elif la_ == 3:
                localctx = fugue_sqlParser.WindowDefContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3688
                self.match(fugue_sqlParser.T__2)
                self.state = 3723
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [80]:
                    self.state = 3689
                    self.match(fugue_sqlParser.CLUSTER)
                    self.state = 3690
                    self.match(fugue_sqlParser.BY)
                    self.state = 3691
                    localctx._expression = self.expression()
                    localctx.partition.append(localctx._expression)
                    self.state = 3696
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1:
                        self.state = 3692
                        self.match(fugue_sqlParser.T__0)
                        self.state = 3693
                        localctx._expression = self.expression()
                        localctx.partition.append(localctx._expression)
                        self.state = 3698
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [4, 117, 204, 212, 225, 245, 260]:
                    self.state = 3709
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==117 or _la==212:
                        self.state = 3699
                        _la = self._input.LA(1)
                        if not(_la==117 or _la==212):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 3700
                        self.match(fugue_sqlParser.BY)
                        self.state = 3701
                        localctx._expression = self.expression()
                        localctx.partition.append(localctx._expression)
                        self.state = 3706
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==1:
                            self.state = 3702
                            self.match(fugue_sqlParser.T__0)
                            self.state = 3703
                            localctx._expression = self.expression()
                            localctx.partition.append(localctx._expression)
                            self.state = 3708
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)



                    self.state = 3721
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==204 or _la==260:
                        self.state = 3711
                        _la = self._input.LA(1)
                        if not(_la==204 or _la==260):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 3712
                        self.match(fugue_sqlParser.BY)
                        self.state = 3713
                        self.sortItem()
                        self.state = 3718
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==1:
                            self.state = 3714
                            self.match(fugue_sqlParser.T__0)
                            self.state = 3715
                            self.sortItem()
                            self.state = 3720
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)



                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 3726
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==225 or _la==245:
                    self.state = 3725
                    self.windowFrame()


                self.state = 3728
                self.match(fugue_sqlParser.T__3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowFrameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.frameType = None # Token
            self.start = None # FrameBoundContext
            self.end = None # FrameBoundContext

        def RANGE(self):
            return self.getToken(fugue_sqlParser.RANGE, 0)

        def frameBound(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.FrameBoundContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.FrameBoundContext,i)


        def ROWS(self):
            return self.getToken(fugue_sqlParser.ROWS, 0)

        def BETWEEN(self):
            return self.getToken(fugue_sqlParser.BETWEEN, 0)

        def AND(self):
            return self.getToken(fugue_sqlParser.AND, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_windowFrame

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindowFrame" ):
                return visitor.visitWindowFrame(self)
            else:
                return visitor.visitChildren(self)




    def windowFrame(self):

        localctx = fugue_sqlParser.WindowFrameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 398, self.RULE_windowFrame)
        try:
            self.state = 3747
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,502,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3731
                localctx.frameType = self.match(fugue_sqlParser.RANGE)
                self.state = 3732
                localctx.start = self.frameBound()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3733
                localctx.frameType = self.match(fugue_sqlParser.ROWS)
                self.state = 3734
                localctx.start = self.frameBound()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3735
                localctx.frameType = self.match(fugue_sqlParser.RANGE)
                self.state = 3736
                self.match(fugue_sqlParser.BETWEEN)
                self.state = 3737
                localctx.start = self.frameBound()
                self.state = 3738
                self.match(fugue_sqlParser.AND)
                self.state = 3739
                localctx.end = self.frameBound()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3741
                localctx.frameType = self.match(fugue_sqlParser.ROWS)
                self.state = 3742
                self.match(fugue_sqlParser.BETWEEN)
                self.state = 3743
                localctx.start = self.frameBound()
                self.state = 3744
                self.match(fugue_sqlParser.AND)
                self.state = 3745
                localctx.end = self.frameBound()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FrameBoundContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.boundType = None # Token

        def UNBOUNDED(self):
            return self.getToken(fugue_sqlParser.UNBOUNDED, 0)

        def PRECEDING(self):
            return self.getToken(fugue_sqlParser.PRECEDING, 0)

        def FOLLOWING(self):
            return self.getToken(fugue_sqlParser.FOLLOWING, 0)

        def ROW(self):
            return self.getToken(fugue_sqlParser.ROW, 0)

        def CURRENT(self):
            return self.getToken(fugue_sqlParser.CURRENT, 0)

        def expression(self):
            return self.getTypedRuleContext(fugue_sqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_frameBound

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFrameBound" ):
                return visitor.visitFrameBound(self)
            else:
                return visitor.visitChildren(self)




    def frameBound(self):

        localctx = fugue_sqlParser.FrameBoundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 400, self.RULE_frameBound)
        self._la = 0 # Token type
        try:
            self.state = 3756
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,503,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3749
                self.match(fugue_sqlParser.UNBOUNDED)
                self.state = 3750
                localctx.boundType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==137 or _la==219):
                    localctx.boundType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3751
                localctx.boundType = self.match(fugue_sqlParser.CURRENT)
                self.state = 3752
                self.match(fugue_sqlParser.ROW)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3753
                self.expression()
                self.state = 3754
                localctx.boundType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==137 or _la==219):
                    localctx.boundType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedNameListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.QualifiedNameContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.QualifiedNameContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_qualifiedNameList

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualifiedNameList" ):
                return visitor.visitQualifiedNameList(self)
            else:
                return visitor.visitChildren(self)




    def qualifiedNameList(self):

        localctx = fugue_sqlParser.QualifiedNameListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 402, self.RULE_qualifiedNameList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3758
            self.qualifiedName()
            self.state = 3763
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1:
                self.state = 3759
                self.match(fugue_sqlParser.T__0)
                self.state = 3760
                self.qualifiedName()
                self.state = 3765
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedName(self):
            return self.getTypedRuleContext(fugue_sqlParser.QualifiedNameContext,0)


        def FILTER(self):
            return self.getToken(fugue_sqlParser.FILTER, 0)

        def LEFT(self):
            return self.getToken(fugue_sqlParser.LEFT, 0)

        def RIGHT(self):
            return self.getToken(fugue_sqlParser.RIGHT, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_functionName

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionName" ):
                return visitor.visitFunctionName(self)
            else:
                return visitor.visitChildren(self)




    def functionName(self):

        localctx = fugue_sqlParser.FunctionNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 404, self.RULE_functionName)
        try:
            self.state = 3770
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,505,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3766
                self.qualifiedName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3767
                self.match(fugue_sqlParser.FILTER)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3768
                self.match(fugue_sqlParser.LEFT)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3769
                self.match(fugue_sqlParser.RIGHT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,i)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_qualifiedName

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualifiedName" ):
                return visitor.visitQualifiedName(self)
            else:
                return visitor.visitChildren(self)




    def qualifiedName(self):

        localctx = fugue_sqlParser.QualifiedNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 406, self.RULE_qualifiedName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3772
            self.identifier()
            self.state = 3777
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,506,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3773
                    self.match(fugue_sqlParser.T__6)
                    self.state = 3774
                    self.identifier() 
                self.state = 3779
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,506,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ErrorCapturingIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_errorCapturingIdentifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitErrorCapturingIdentifier" ):
                return visitor.visitErrorCapturingIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def errorCapturingIdentifier(self):

        localctx = fugue_sqlParser.ErrorCapturingIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 408, self.RULE_errorCapturingIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3780
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ErrorCapturingIdentifierExtraContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_errorCapturingIdentifierExtra

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ErrorIdentContext(ErrorCapturingIdentifierExtraContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.ErrorCapturingIdentifierExtraContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MINUS(self, i:int=None):
            if i is None:
                return self.getTokens(fugue_sqlParser.MINUS)
            else:
                return self.getToken(fugue_sqlParser.MINUS, i)
        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(fugue_sqlParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(fugue_sqlParser.IdentifierContext,i)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitErrorIdent" ):
                return visitor.visitErrorIdent(self)
            else:
                return visitor.visitChildren(self)



    def errorCapturingIdentifierExtra(self):

        localctx = fugue_sqlParser.ErrorCapturingIdentifierExtraContext(self, self._ctx, self.state)
        self.enterRule(localctx, 410, self.RULE_errorCapturingIdentifierExtra)
        self._la = 0 # Token type
        try:
            localctx = fugue_sqlParser.ErrorIdentContext(self, localctx)
            self.enterOuterAlt(localctx, 1)
            self.state = 3784 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3782
                self.match(fugue_sqlParser.MINUS)
                self.state = 3783
                self.identifier()
                self.state = 3786 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==316):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def strictIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.StrictIdentifierContext,0)


        def strictNonReserved(self):
            return self.getTypedRuleContext(fugue_sqlParser.StrictNonReservedContext,0)


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_identifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifier" ):
                return visitor.visitIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def identifier(self):

        localctx = fugue_sqlParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 412, self.RULE_identifier)
        try:
            self.state = 3790
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 320, 335, 336]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3788
                self.strictIdentifier()
                pass
            elif token in [60, 96, 123, 143, 158, 162, 167, 173, 193, 199, 238, 249, 255, 289, 297]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3789
                self.strictNonReserved()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StrictIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_strictIdentifier

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class QuotedIdentifierAlternativeContext(StrictIdentifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StrictIdentifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def quotedIdentifier(self):
            return self.getTypedRuleContext(fugue_sqlParser.QuotedIdentifierContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuotedIdentifierAlternative" ):
                return visitor.visitQuotedIdentifierAlternative(self)
            else:
                return visitor.visitChildren(self)


    class UnquotedIdentifierContext(StrictIdentifierContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.StrictIdentifierContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IDENTIFIER(self):
            return self.getToken(fugue_sqlParser.IDENTIFIER, 0)
        def nonReserved(self):
            return self.getTypedRuleContext(fugue_sqlParser.NonReservedContext,0)


        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnquotedIdentifier" ):
                return visitor.visitUnquotedIdentifier(self)
            else:
                return visitor.visitChildren(self)



    def strictIdentifier(self):

        localctx = fugue_sqlParser.StrictIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 414, self.RULE_strictIdentifier)
        try:
            self.state = 3795
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [335]:
                localctx = fugue_sqlParser.UnquotedIdentifierContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3792
                self.match(fugue_sqlParser.IDENTIFIER)
                pass
            elif token in [336]:
                localctx = fugue_sqlParser.QuotedIdentifierAlternativeContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3793
                self.quotedIdentifier()
                pass
            elif token in [54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 165, 166, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 320]:
                localctx = fugue_sqlParser.UnquotedIdentifierContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3794
                self.nonReserved()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuotedIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BACKQUOTED_IDENTIFIER(self):
            return self.getToken(fugue_sqlParser.BACKQUOTED_IDENTIFIER, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_quotedIdentifier

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuotedIdentifier" ):
                return visitor.visitQuotedIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def quotedIdentifier(self):

        localctx = fugue_sqlParser.QuotedIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 416, self.RULE_quotedIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3797
            self.match(fugue_sqlParser.BACKQUOTED_IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return fugue_sqlParser.RULE_number

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class DecimalLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DECIMAL_VALUE(self):
            return self.getToken(fugue_sqlParser.DECIMAL_VALUE, 0)
        def MINUS(self):
            return self.getToken(fugue_sqlParser.MINUS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecimalLiteral" ):
                return visitor.visitDecimalLiteral(self)
            else:
                return visitor.visitChildren(self)


    class BigIntLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BIGINT_LITERAL(self):
            return self.getToken(fugue_sqlParser.BIGINT_LITERAL, 0)
        def MINUS(self):
            return self.getToken(fugue_sqlParser.MINUS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBigIntLiteral" ):
                return visitor.visitBigIntLiteral(self)
            else:
                return visitor.visitChildren(self)


    class TinyIntLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TINYINT_LITERAL(self):
            return self.getToken(fugue_sqlParser.TINYINT_LITERAL, 0)
        def MINUS(self):
            return self.getToken(fugue_sqlParser.MINUS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTinyIntLiteral" ):
                return visitor.visitTinyIntLiteral(self)
            else:
                return visitor.visitChildren(self)


    class LegacyDecimalLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXPONENT_VALUE(self):
            return self.getToken(fugue_sqlParser.EXPONENT_VALUE, 0)
        def DECIMAL_VALUE(self):
            return self.getToken(fugue_sqlParser.DECIMAL_VALUE, 0)
        def MINUS(self):
            return self.getToken(fugue_sqlParser.MINUS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLegacyDecimalLiteral" ):
                return visitor.visitLegacyDecimalLiteral(self)
            else:
                return visitor.visitChildren(self)


    class BigDecimalLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BIGDECIMAL_LITERAL(self):
            return self.getToken(fugue_sqlParser.BIGDECIMAL_LITERAL, 0)
        def MINUS(self):
            return self.getToken(fugue_sqlParser.MINUS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBigDecimalLiteral" ):
                return visitor.visitBigDecimalLiteral(self)
            else:
                return visitor.visitChildren(self)


    class ExponentLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXPONENT_VALUE(self):
            return self.getToken(fugue_sqlParser.EXPONENT_VALUE, 0)
        def MINUS(self):
            return self.getToken(fugue_sqlParser.MINUS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExponentLiteral" ):
                return visitor.visitExponentLiteral(self)
            else:
                return visitor.visitChildren(self)


    class DoubleLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DOUBLE_LITERAL(self):
            return self.getToken(fugue_sqlParser.DOUBLE_LITERAL, 0)
        def MINUS(self):
            return self.getToken(fugue_sqlParser.MINUS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDoubleLiteral" ):
                return visitor.visitDoubleLiteral(self)
            else:
                return visitor.visitChildren(self)


    class IntegerLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INTEGER_VALUE(self):
            return self.getToken(fugue_sqlParser.INTEGER_VALUE, 0)
        def MINUS(self):
            return self.getToken(fugue_sqlParser.MINUS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntegerLiteral" ):
                return visitor.visitIntegerLiteral(self)
            else:
                return visitor.visitChildren(self)


    class SmallIntLiteralContext(NumberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a fugue_sqlParser.NumberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SMALLINT_LITERAL(self):
            return self.getToken(fugue_sqlParser.SMALLINT_LITERAL, 0)
        def MINUS(self):
            return self.getToken(fugue_sqlParser.MINUS, 0)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSmallIntLiteral" ):
                return visitor.visitSmallIntLiteral(self)
            else:
                return visitor.visitChildren(self)



    def number(self):

        localctx = fugue_sqlParser.NumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 418, self.RULE_number)
        self._la = 0 # Token type
        try:
            self.state = 3835
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,519,self._ctx)
            if la_ == 1:
                localctx = fugue_sqlParser.ExponentLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3800
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==316:
                    self.state = 3799
                    self.match(fugue_sqlParser.MINUS)


                self.state = 3802
                self.match(fugue_sqlParser.EXPONENT_VALUE)
                pass

            elif la_ == 2:
                localctx = fugue_sqlParser.DecimalLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3804
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==316:
                    self.state = 3803
                    self.match(fugue_sqlParser.MINUS)


                self.state = 3806
                self.match(fugue_sqlParser.DECIMAL_VALUE)
                pass

            elif la_ == 3:
                localctx = fugue_sqlParser.LegacyDecimalLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3808
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==316:
                    self.state = 3807
                    self.match(fugue_sqlParser.MINUS)


                self.state = 3810
                _la = self._input.LA(1)
                if not(_la==331 or _la==332):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 4:
                localctx = fugue_sqlParser.IntegerLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 3812
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==316:
                    self.state = 3811
                    self.match(fugue_sqlParser.MINUS)


                self.state = 3814
                self.match(fugue_sqlParser.INTEGER_VALUE)
                pass

            elif la_ == 5:
                localctx = fugue_sqlParser.BigIntLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 3816
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==316:
                    self.state = 3815
                    self.match(fugue_sqlParser.MINUS)


                self.state = 3818
                self.match(fugue_sqlParser.BIGINT_LITERAL)
                pass

            elif la_ == 6:
                localctx = fugue_sqlParser.SmallIntLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 3820
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==316:
                    self.state = 3819
                    self.match(fugue_sqlParser.MINUS)


                self.state = 3822
                self.match(fugue_sqlParser.SMALLINT_LITERAL)
                pass

            elif la_ == 7:
                localctx = fugue_sqlParser.TinyIntLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 3824
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==316:
                    self.state = 3823
                    self.match(fugue_sqlParser.MINUS)


                self.state = 3826
                self.match(fugue_sqlParser.TINYINT_LITERAL)
                pass

            elif la_ == 8:
                localctx = fugue_sqlParser.DoubleLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 3828
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==316:
                    self.state = 3827
                    self.match(fugue_sqlParser.MINUS)


                self.state = 3830
                self.match(fugue_sqlParser.DOUBLE_LITERAL)
                pass

            elif la_ == 9:
                localctx = fugue_sqlParser.BigDecimalLiteralContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 3832
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==316:
                    self.state = 3831
                    self.match(fugue_sqlParser.MINUS)


                self.state = 3834
                self.match(fugue_sqlParser.BIGDECIMAL_LITERAL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterColumnActionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.setOrDrop = None # Token

        def TYPE(self):
            return self.getToken(fugue_sqlParser.TYPE, 0)

        def dataType(self):
            return self.getTypedRuleContext(fugue_sqlParser.DataTypeContext,0)


        def commentSpec(self):
            return self.getTypedRuleContext(fugue_sqlParser.CommentSpecContext,0)


        def colPosition(self):
            return self.getTypedRuleContext(fugue_sqlParser.ColPositionContext,0)


        def NOT(self):
            return self.getToken(fugue_sqlParser.NOT, 0)

        def THENULL(self):
            return self.getToken(fugue_sqlParser.THENULL, 0)

        def SET(self):
            return self.getToken(fugue_sqlParser.SET, 0)

        def DROP(self):
            return self.getToken(fugue_sqlParser.DROP, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_alterColumnAction

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterColumnAction" ):
                return visitor.visitAlterColumnAction(self)
            else:
                return visitor.visitChildren(self)




    def alterColumnAction(self):

        localctx = fugue_sqlParser.AlterColumnActionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 420, self.RULE_alterColumnAction)
        self._la = 0 # Token type
        try:
            self.state = 3844
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [285]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3837
                self.match(fugue_sqlParser.TYPE)
                self.state = 3838
                self.dataType()
                pass
            elif token in [87]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3839
                self.commentSpec()
                pass
            elif token in [55, 136]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3840
                self.colPosition()
                pass
            elif token in [118, 254]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3841
                localctx.setOrDrop = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==118 or _la==254):
                    localctx.setOrDrop = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3842
                self.match(fugue_sqlParser.NOT)
                self.state = 3843
                self.match(fugue_sqlParser.THENULL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnsiNonReservedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(fugue_sqlParser.ADD, 0)

        def AFTER(self):
            return self.getToken(fugue_sqlParser.AFTER, 0)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)

        def ANALYZE(self):
            return self.getToken(fugue_sqlParser.ANALYZE, 0)

        def ARCHIVE(self):
            return self.getToken(fugue_sqlParser.ARCHIVE, 0)

        def ARRAY(self):
            return self.getToken(fugue_sqlParser.ARRAY, 0)

        def ASC(self):
            return self.getToken(fugue_sqlParser.ASC, 0)

        def AT(self):
            return self.getToken(fugue_sqlParser.AT, 0)

        def BETWEEN(self):
            return self.getToken(fugue_sqlParser.BETWEEN, 0)

        def BUCKET(self):
            return self.getToken(fugue_sqlParser.BUCKET, 0)

        def BUCKETS(self):
            return self.getToken(fugue_sqlParser.BUCKETS, 0)

        def BY(self):
            return self.getToken(fugue_sqlParser.BY, 0)

        def CACHE(self):
            return self.getToken(fugue_sqlParser.CACHE, 0)

        def CASCADE(self):
            return self.getToken(fugue_sqlParser.CASCADE, 0)

        def CHANGE(self):
            return self.getToken(fugue_sqlParser.CHANGE, 0)

        def CLEAR(self):
            return self.getToken(fugue_sqlParser.CLEAR, 0)

        def CLUSTER(self):
            return self.getToken(fugue_sqlParser.CLUSTER, 0)

        def CLUSTERED(self):
            return self.getToken(fugue_sqlParser.CLUSTERED, 0)

        def CODEGEN(self):
            return self.getToken(fugue_sqlParser.CODEGEN, 0)

        def COLLECTION(self):
            return self.getToken(fugue_sqlParser.COLLECTION, 0)

        def COLUMNS(self):
            return self.getToken(fugue_sqlParser.COLUMNS, 0)

        def COMMENT(self):
            return self.getToken(fugue_sqlParser.COMMENT, 0)

        def COMMIT(self):
            return self.getToken(fugue_sqlParser.COMMIT, 0)

        def COMPACT(self):
            return self.getToken(fugue_sqlParser.COMPACT, 0)

        def COMPACTIONS(self):
            return self.getToken(fugue_sqlParser.COMPACTIONS, 0)

        def COMPUTE(self):
            return self.getToken(fugue_sqlParser.COMPUTE, 0)

        def CONCATENATE(self):
            return self.getToken(fugue_sqlParser.CONCATENATE, 0)

        def COST(self):
            return self.getToken(fugue_sqlParser.COST, 0)

        def CUBE(self):
            return self.getToken(fugue_sqlParser.CUBE, 0)

        def CURRENT(self):
            return self.getToken(fugue_sqlParser.CURRENT, 0)

        def DATA(self):
            return self.getToken(fugue_sqlParser.DATA, 0)

        def DATABASE(self):
            return self.getToken(fugue_sqlParser.DATABASE, 0)

        def DATABASES(self):
            return self.getToken(fugue_sqlParser.DATABASES, 0)

        def DBPROPERTIES(self):
            return self.getToken(fugue_sqlParser.DBPROPERTIES, 0)

        def DEFINED(self):
            return self.getToken(fugue_sqlParser.DEFINED, 0)

        def DELETE(self):
            return self.getToken(fugue_sqlParser.DELETE, 0)

        def DELIMITED(self):
            return self.getToken(fugue_sqlParser.DELIMITED, 0)

        def DESC(self):
            return self.getToken(fugue_sqlParser.DESC, 0)

        def DESCRIBE(self):
            return self.getToken(fugue_sqlParser.DESCRIBE, 0)

        def DFS(self):
            return self.getToken(fugue_sqlParser.DFS, 0)

        def DIRECTORIES(self):
            return self.getToken(fugue_sqlParser.DIRECTORIES, 0)

        def DIRECTORY(self):
            return self.getToken(fugue_sqlParser.DIRECTORY, 0)

        def DISTRIBUTE(self):
            return self.getToken(fugue_sqlParser.DISTRIBUTE, 0)

        def DIV(self):
            return self.getToken(fugue_sqlParser.DIV, 0)

        def DROP(self):
            return self.getToken(fugue_sqlParser.DROP, 0)

        def ESCAPED(self):
            return self.getToken(fugue_sqlParser.ESCAPED, 0)

        def EXCHANGE(self):
            return self.getToken(fugue_sqlParser.EXCHANGE, 0)

        def EXISTS(self):
            return self.getToken(fugue_sqlParser.EXISTS, 0)

        def EXPLAIN(self):
            return self.getToken(fugue_sqlParser.EXPLAIN, 0)

        def EXPORT(self):
            return self.getToken(fugue_sqlParser.EXPORT, 0)

        def EXTENDED(self):
            return self.getToken(fugue_sqlParser.EXTENDED, 0)

        def EXTERNAL(self):
            return self.getToken(fugue_sqlParser.EXTERNAL, 0)

        def EXTRACT(self):
            return self.getToken(fugue_sqlParser.EXTRACT, 0)

        def FIELDS(self):
            return self.getToken(fugue_sqlParser.FIELDS, 0)

        def FILEFORMAT(self):
            return self.getToken(fugue_sqlParser.FILEFORMAT, 0)

        def FIRST(self):
            return self.getToken(fugue_sqlParser.FIRST, 0)

        def FOLLOWING(self):
            return self.getToken(fugue_sqlParser.FOLLOWING, 0)

        def FORMAT(self):
            return self.getToken(fugue_sqlParser.FORMAT, 0)

        def FORMATTED(self):
            return self.getToken(fugue_sqlParser.FORMATTED, 0)

        def FUNCTION(self):
            return self.getToken(fugue_sqlParser.FUNCTION, 0)

        def FUNCTIONS(self):
            return self.getToken(fugue_sqlParser.FUNCTIONS, 0)

        def GLOBAL(self):
            return self.getToken(fugue_sqlParser.GLOBAL, 0)

        def GROUPING(self):
            return self.getToken(fugue_sqlParser.GROUPING, 0)

        def IF(self):
            return self.getToken(fugue_sqlParser.IF, 0)

        def IGNORE(self):
            return self.getToken(fugue_sqlParser.IGNORE, 0)

        def IMPORT(self):
            return self.getToken(fugue_sqlParser.IMPORT, 0)

        def INDEX(self):
            return self.getToken(fugue_sqlParser.INDEX, 0)

        def INDEXES(self):
            return self.getToken(fugue_sqlParser.INDEXES, 0)

        def INPATH(self):
            return self.getToken(fugue_sqlParser.INPATH, 0)

        def INPUTFORMAT(self):
            return self.getToken(fugue_sqlParser.INPUTFORMAT, 0)

        def INSERT(self):
            return self.getToken(fugue_sqlParser.INSERT, 0)

        def INTERVAL(self):
            return self.getToken(fugue_sqlParser.INTERVAL, 0)

        def ITEMS(self):
            return self.getToken(fugue_sqlParser.ITEMS, 0)

        def KEYS(self):
            return self.getToken(fugue_sqlParser.KEYS, 0)

        def LAST(self):
            return self.getToken(fugue_sqlParser.LAST, 0)

        def LATERAL(self):
            return self.getToken(fugue_sqlParser.LATERAL, 0)

        def LAZY(self):
            return self.getToken(fugue_sqlParser.LAZY, 0)

        def LIKE(self):
            return self.getToken(fugue_sqlParser.LIKE, 0)

        def LIMIT(self):
            return self.getToken(fugue_sqlParser.LIMIT, 0)

        def LINES(self):
            return self.getToken(fugue_sqlParser.LINES, 0)

        def LIST(self):
            return self.getToken(fugue_sqlParser.LIST, 0)

        def LOAD(self):
            return self.getToken(fugue_sqlParser.LOAD, 0)

        def LOCAL(self):
            return self.getToken(fugue_sqlParser.LOCAL, 0)

        def LOCATION(self):
            return self.getToken(fugue_sqlParser.LOCATION, 0)

        def LOCK(self):
            return self.getToken(fugue_sqlParser.LOCK, 0)

        def LOCKS(self):
            return self.getToken(fugue_sqlParser.LOCKS, 0)

        def LOGICAL(self):
            return self.getToken(fugue_sqlParser.LOGICAL, 0)

        def MACRO(self):
            return self.getToken(fugue_sqlParser.MACRO, 0)

        def MAP(self):
            return self.getToken(fugue_sqlParser.MAP, 0)

        def MATCHED(self):
            return self.getToken(fugue_sqlParser.MATCHED, 0)

        def MERGE(self):
            return self.getToken(fugue_sqlParser.MERGE, 0)

        def MSCK(self):
            return self.getToken(fugue_sqlParser.MSCK, 0)

        def NAMESPACE(self):
            return self.getToken(fugue_sqlParser.NAMESPACE, 0)

        def NAMESPACES(self):
            return self.getToken(fugue_sqlParser.NAMESPACES, 0)

        def NO(self):
            return self.getToken(fugue_sqlParser.NO, 0)

        def THENULLS(self):
            return self.getToken(fugue_sqlParser.THENULLS, 0)

        def OF(self):
            return self.getToken(fugue_sqlParser.OF, 0)

        def OPTION(self):
            return self.getToken(fugue_sqlParser.OPTION, 0)

        def OPTIONS(self):
            return self.getToken(fugue_sqlParser.OPTIONS, 0)

        def OUT(self):
            return self.getToken(fugue_sqlParser.OUT, 0)

        def OUTPUTFORMAT(self):
            return self.getToken(fugue_sqlParser.OUTPUTFORMAT, 0)

        def OVER(self):
            return self.getToken(fugue_sqlParser.OVER, 0)

        def OVERLAY(self):
            return self.getToken(fugue_sqlParser.OVERLAY, 0)

        def OVERWRITE(self):
            return self.getToken(fugue_sqlParser.OVERWRITE, 0)

        def PARTITION(self):
            return self.getToken(fugue_sqlParser.PARTITION, 0)

        def PARTITIONED(self):
            return self.getToken(fugue_sqlParser.PARTITIONED, 0)

        def PARTITIONS(self):
            return self.getToken(fugue_sqlParser.PARTITIONS, 0)

        def PERCENTLIT(self):
            return self.getToken(fugue_sqlParser.PERCENTLIT, 0)

        def PIVOT(self):
            return self.getToken(fugue_sqlParser.PIVOT, 0)

        def PLACING(self):
            return self.getToken(fugue_sqlParser.PLACING, 0)

        def POSITION(self):
            return self.getToken(fugue_sqlParser.POSITION, 0)

        def PRECEDING(self):
            return self.getToken(fugue_sqlParser.PRECEDING, 0)

        def PRINCIPALS(self):
            return self.getToken(fugue_sqlParser.PRINCIPALS, 0)

        def PROPERTIES(self):
            return self.getToken(fugue_sqlParser.PROPERTIES, 0)

        def PURGE(self):
            return self.getToken(fugue_sqlParser.PURGE, 0)

        def QUERY(self):
            return self.getToken(fugue_sqlParser.QUERY, 0)

        def RANGE(self):
            return self.getToken(fugue_sqlParser.RANGE, 0)

        def RECORDREADER(self):
            return self.getToken(fugue_sqlParser.RECORDREADER, 0)

        def RECORDWRITER(self):
            return self.getToken(fugue_sqlParser.RECORDWRITER, 0)

        def RECOVER(self):
            return self.getToken(fugue_sqlParser.RECOVER, 0)

        def REDUCE(self):
            return self.getToken(fugue_sqlParser.REDUCE, 0)

        def REFRESH(self):
            return self.getToken(fugue_sqlParser.REFRESH, 0)

        def RENAME(self):
            return self.getToken(fugue_sqlParser.RENAME, 0)

        def REPAIR(self):
            return self.getToken(fugue_sqlParser.REPAIR, 0)

        def REPLACE(self):
            return self.getToken(fugue_sqlParser.REPLACE, 0)

        def RESET(self):
            return self.getToken(fugue_sqlParser.RESET, 0)

        def RESTRICT(self):
            return self.getToken(fugue_sqlParser.RESTRICT, 0)

        def REVOKE(self):
            return self.getToken(fugue_sqlParser.REVOKE, 0)

        def RLIKE(self):
            return self.getToken(fugue_sqlParser.RLIKE, 0)

        def ROLE(self):
            return self.getToken(fugue_sqlParser.ROLE, 0)

        def ROLES(self):
            return self.getToken(fugue_sqlParser.ROLES, 0)

        def ROLLBACK(self):
            return self.getToken(fugue_sqlParser.ROLLBACK, 0)

        def ROLLUP(self):
            return self.getToken(fugue_sqlParser.ROLLUP, 0)

        def ROW(self):
            return self.getToken(fugue_sqlParser.ROW, 0)

        def ROWS(self):
            return self.getToken(fugue_sqlParser.ROWS, 0)

        def SCHEMA(self):
            return self.getToken(fugue_sqlParser.SCHEMA, 0)

        def SEPARATED(self):
            return self.getToken(fugue_sqlParser.SEPARATED, 0)

        def SERDE(self):
            return self.getToken(fugue_sqlParser.SERDE, 0)

        def SERDEPROPERTIES(self):
            return self.getToken(fugue_sqlParser.SERDEPROPERTIES, 0)

        def SET(self):
            return self.getToken(fugue_sqlParser.SET, 0)

        def SETS(self):
            return self.getToken(fugue_sqlParser.SETS, 0)

        def SHOW(self):
            return self.getToken(fugue_sqlParser.SHOW, 0)

        def SKEWED(self):
            return self.getToken(fugue_sqlParser.SKEWED, 0)

        def SORT(self):
            return self.getToken(fugue_sqlParser.SORT, 0)

        def SORTED(self):
            return self.getToken(fugue_sqlParser.SORTED, 0)

        def START(self):
            return self.getToken(fugue_sqlParser.START, 0)

        def STATISTICS(self):
            return self.getToken(fugue_sqlParser.STATISTICS, 0)

        def STORED(self):
            return self.getToken(fugue_sqlParser.STORED, 0)

        def STRATIFY(self):
            return self.getToken(fugue_sqlParser.STRATIFY, 0)

        def STRUCT(self):
            return self.getToken(fugue_sqlParser.STRUCT, 0)

        def SUBSTR(self):
            return self.getToken(fugue_sqlParser.SUBSTR, 0)

        def SUBSTRING(self):
            return self.getToken(fugue_sqlParser.SUBSTRING, 0)

        def TABLES(self):
            return self.getToken(fugue_sqlParser.TABLES, 0)

        def TABLESAMPLE(self):
            return self.getToken(fugue_sqlParser.TABLESAMPLE, 0)

        def TBLPROPERTIES(self):
            return self.getToken(fugue_sqlParser.TBLPROPERTIES, 0)

        def TEMPORARY(self):
            return self.getToken(fugue_sqlParser.TEMPORARY, 0)

        def TERMINATED(self):
            return self.getToken(fugue_sqlParser.TERMINATED, 0)

        def TOUCH(self):
            return self.getToken(fugue_sqlParser.TOUCH, 0)

        def TRANSACTION(self):
            return self.getToken(fugue_sqlParser.TRANSACTION, 0)

        def TRANSACTIONS(self):
            return self.getToken(fugue_sqlParser.TRANSACTIONS, 0)

        def TRANSFORM(self):
            return self.getToken(fugue_sqlParser.TRANSFORM, 0)

        def TRIM(self):
            return self.getToken(fugue_sqlParser.TRIM, 0)

        def TRUE(self):
            return self.getToken(fugue_sqlParser.TRUE, 0)

        def TRUNCATE(self):
            return self.getToken(fugue_sqlParser.TRUNCATE, 0)

        def UNARCHIVE(self):
            return self.getToken(fugue_sqlParser.UNARCHIVE, 0)

        def UNBOUNDED(self):
            return self.getToken(fugue_sqlParser.UNBOUNDED, 0)

        def UNCACHE(self):
            return self.getToken(fugue_sqlParser.UNCACHE, 0)

        def UNLOCK(self):
            return self.getToken(fugue_sqlParser.UNLOCK, 0)

        def UNSET(self):
            return self.getToken(fugue_sqlParser.UNSET, 0)

        def UPDATE(self):
            return self.getToken(fugue_sqlParser.UPDATE, 0)

        def USE(self):
            return self.getToken(fugue_sqlParser.USE, 0)

        def VALUES(self):
            return self.getToken(fugue_sqlParser.VALUES, 0)

        def VIEW(self):
            return self.getToken(fugue_sqlParser.VIEW, 0)

        def VIEWS(self):
            return self.getToken(fugue_sqlParser.VIEWS, 0)

        def WINDOW(self):
            return self.getToken(fugue_sqlParser.WINDOW, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_ansiNonReserved

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnsiNonReserved" ):
                return visitor.visitAnsiNonReserved(self)
            else:
                return visitor.visitChildren(self)




    def ansiNonReserved(self):

        localctx = fugue_sqlParser.AnsiNonReservedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 422, self.RULE_ansiNonReserved)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3846
            _la = self._input.LA(1)
            if not(((_la) & ~0x3f) == 0 and ((1 << _la) & -4125297258671374336) != 0 or (((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & -416585425744047125) != 0 or (((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & -1729409032347477549) != 0 or (((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & -2945371817272972903) != 0 or (((_la - 258)) & ~0x3f) == 0 and ((1 << (_la - 258)) & 4611729159090731005) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StrictNonReservedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANTI(self):
            return self.getToken(fugue_sqlParser.ANTI, 0)

        def CROSS(self):
            return self.getToken(fugue_sqlParser.CROSS, 0)

        def EXCEPT(self):
            return self.getToken(fugue_sqlParser.EXCEPT, 0)

        def FULL(self):
            return self.getToken(fugue_sqlParser.FULL, 0)

        def INNER(self):
            return self.getToken(fugue_sqlParser.INNER, 0)

        def INTERSECT(self):
            return self.getToken(fugue_sqlParser.INTERSECT, 0)

        def JOIN(self):
            return self.getToken(fugue_sqlParser.JOIN, 0)

        def LEFT(self):
            return self.getToken(fugue_sqlParser.LEFT, 0)

        def NATURAL(self):
            return self.getToken(fugue_sqlParser.NATURAL, 0)

        def ON(self):
            return self.getToken(fugue_sqlParser.ON, 0)

        def RIGHT(self):
            return self.getToken(fugue_sqlParser.RIGHT, 0)

        def SEMI(self):
            return self.getToken(fugue_sqlParser.SEMI, 0)

        def SETMINUS(self):
            return self.getToken(fugue_sqlParser.SETMINUS, 0)

        def UNION(self):
            return self.getToken(fugue_sqlParser.UNION, 0)

        def USING(self):
            return self.getToken(fugue_sqlParser.USING, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_strictNonReserved

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStrictNonReserved" ):
                return visitor.visitStrictNonReserved(self)
            else:
                return visitor.visitChildren(self)




    def strictNonReserved(self):

        localctx = fugue_sqlParser.StrictNonReservedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 424, self.RULE_strictNonReserved)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3848
            _la = self._input.LA(1)
            if not((((_la - 60)) & ~0x3f) == 0 and ((1 << (_la - 60)) & -9223371968135299071) != 0 or (((_la - 143)) & ~0x3f) == 0 and ((1 << (_la - 143)) & 73183495035846657) != 0 or (((_la - 238)) & ~0x3f) == 0 and ((1 << (_la - 238)) & 578712552117241857) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NonReservedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(fugue_sqlParser.ADD, 0)

        def AFTER(self):
            return self.getToken(fugue_sqlParser.AFTER, 0)

        def ALL(self):
            return self.getToken(fugue_sqlParser.ALL, 0)

        def ALTER(self):
            return self.getToken(fugue_sqlParser.ALTER, 0)

        def ANALYZE(self):
            return self.getToken(fugue_sqlParser.ANALYZE, 0)

        def AND(self):
            return self.getToken(fugue_sqlParser.AND, 0)

        def ANY(self):
            return self.getToken(fugue_sqlParser.ANY, 0)

        def ARCHIVE(self):
            return self.getToken(fugue_sqlParser.ARCHIVE, 0)

        def ARRAY(self):
            return self.getToken(fugue_sqlParser.ARRAY, 0)

        def AS(self):
            return self.getToken(fugue_sqlParser.AS, 0)

        def ASC(self):
            return self.getToken(fugue_sqlParser.ASC, 0)

        def AT(self):
            return self.getToken(fugue_sqlParser.AT, 0)

        def AUTHORIZATION(self):
            return self.getToken(fugue_sqlParser.AUTHORIZATION, 0)

        def BETWEEN(self):
            return self.getToken(fugue_sqlParser.BETWEEN, 0)

        def BOTH(self):
            return self.getToken(fugue_sqlParser.BOTH, 0)

        def BUCKET(self):
            return self.getToken(fugue_sqlParser.BUCKET, 0)

        def BUCKETS(self):
            return self.getToken(fugue_sqlParser.BUCKETS, 0)

        def BY(self):
            return self.getToken(fugue_sqlParser.BY, 0)

        def CACHE(self):
            return self.getToken(fugue_sqlParser.CACHE, 0)

        def CASCADE(self):
            return self.getToken(fugue_sqlParser.CASCADE, 0)

        def CASE(self):
            return self.getToken(fugue_sqlParser.CASE, 0)

        def CAST(self):
            return self.getToken(fugue_sqlParser.CAST, 0)

        def CHANGE(self):
            return self.getToken(fugue_sqlParser.CHANGE, 0)

        def CHECK(self):
            return self.getToken(fugue_sqlParser.CHECK, 0)

        def CLEAR(self):
            return self.getToken(fugue_sqlParser.CLEAR, 0)

        def CLUSTER(self):
            return self.getToken(fugue_sqlParser.CLUSTER, 0)

        def CLUSTERED(self):
            return self.getToken(fugue_sqlParser.CLUSTERED, 0)

        def CODEGEN(self):
            return self.getToken(fugue_sqlParser.CODEGEN, 0)

        def COLLATE(self):
            return self.getToken(fugue_sqlParser.COLLATE, 0)

        def COLLECTION(self):
            return self.getToken(fugue_sqlParser.COLLECTION, 0)

        def COLUMN(self):
            return self.getToken(fugue_sqlParser.COLUMN, 0)

        def COLUMNS(self):
            return self.getToken(fugue_sqlParser.COLUMNS, 0)

        def COMMENT(self):
            return self.getToken(fugue_sqlParser.COMMENT, 0)

        def COMMIT(self):
            return self.getToken(fugue_sqlParser.COMMIT, 0)

        def COMPACT(self):
            return self.getToken(fugue_sqlParser.COMPACT, 0)

        def COMPACTIONS(self):
            return self.getToken(fugue_sqlParser.COMPACTIONS, 0)

        def COMPUTE(self):
            return self.getToken(fugue_sqlParser.COMPUTE, 0)

        def CONCATENATE(self):
            return self.getToken(fugue_sqlParser.CONCATENATE, 0)

        def CONSTRAINT(self):
            return self.getToken(fugue_sqlParser.CONSTRAINT, 0)

        def COST(self):
            return self.getToken(fugue_sqlParser.COST, 0)

        def CREATE(self):
            return self.getToken(fugue_sqlParser.CREATE, 0)

        def CUBE(self):
            return self.getToken(fugue_sqlParser.CUBE, 0)

        def CURRENT(self):
            return self.getToken(fugue_sqlParser.CURRENT, 0)

        def CURRENT_DATE(self):
            return self.getToken(fugue_sqlParser.CURRENT_DATE, 0)

        def CURRENT_TIME(self):
            return self.getToken(fugue_sqlParser.CURRENT_TIME, 0)

        def CURRENT_TIMESTAMP(self):
            return self.getToken(fugue_sqlParser.CURRENT_TIMESTAMP, 0)

        def CURRENT_USER(self):
            return self.getToken(fugue_sqlParser.CURRENT_USER, 0)

        def DATA(self):
            return self.getToken(fugue_sqlParser.DATA, 0)

        def DATABASE(self):
            return self.getToken(fugue_sqlParser.DATABASE, 0)

        def DATABASES(self):
            return self.getToken(fugue_sqlParser.DATABASES, 0)

        def DAY(self):
            return self.getToken(fugue_sqlParser.DAY, 0)

        def DBPROPERTIES(self):
            return self.getToken(fugue_sqlParser.DBPROPERTIES, 0)

        def DEFINED(self):
            return self.getToken(fugue_sqlParser.DEFINED, 0)

        def DELETE(self):
            return self.getToken(fugue_sqlParser.DELETE, 0)

        def DELIMITED(self):
            return self.getToken(fugue_sqlParser.DELIMITED, 0)

        def DESC(self):
            return self.getToken(fugue_sqlParser.DESC, 0)

        def DESCRIBE(self):
            return self.getToken(fugue_sqlParser.DESCRIBE, 0)

        def DFS(self):
            return self.getToken(fugue_sqlParser.DFS, 0)

        def DIRECTORIES(self):
            return self.getToken(fugue_sqlParser.DIRECTORIES, 0)

        def DIRECTORY(self):
            return self.getToken(fugue_sqlParser.DIRECTORY, 0)

        def DISTINCT(self):
            return self.getToken(fugue_sqlParser.DISTINCT, 0)

        def DISTRIBUTE(self):
            return self.getToken(fugue_sqlParser.DISTRIBUTE, 0)

        def DIV(self):
            return self.getToken(fugue_sqlParser.DIV, 0)

        def DROP(self):
            return self.getToken(fugue_sqlParser.DROP, 0)

        def ELSE(self):
            return self.getToken(fugue_sqlParser.ELSE, 0)

        def END(self):
            return self.getToken(fugue_sqlParser.END, 0)

        def ESCAPE(self):
            return self.getToken(fugue_sqlParser.ESCAPE, 0)

        def ESCAPED(self):
            return self.getToken(fugue_sqlParser.ESCAPED, 0)

        def EXCHANGE(self):
            return self.getToken(fugue_sqlParser.EXCHANGE, 0)

        def EXISTS(self):
            return self.getToken(fugue_sqlParser.EXISTS, 0)

        def EXPLAIN(self):
            return self.getToken(fugue_sqlParser.EXPLAIN, 0)

        def EXPORT(self):
            return self.getToken(fugue_sqlParser.EXPORT, 0)

        def EXTENDED(self):
            return self.getToken(fugue_sqlParser.EXTENDED, 0)

        def EXTERNAL(self):
            return self.getToken(fugue_sqlParser.EXTERNAL, 0)

        def EXTRACT(self):
            return self.getToken(fugue_sqlParser.EXTRACT, 0)

        def FALSE(self):
            return self.getToken(fugue_sqlParser.FALSE, 0)

        def FETCH(self):
            return self.getToken(fugue_sqlParser.FETCH, 0)

        def FILTER(self):
            return self.getToken(fugue_sqlParser.FILTER, 0)

        def FIELDS(self):
            return self.getToken(fugue_sqlParser.FIELDS, 0)

        def FILEFORMAT(self):
            return self.getToken(fugue_sqlParser.FILEFORMAT, 0)

        def FIRST(self):
            return self.getToken(fugue_sqlParser.FIRST, 0)

        def FOLLOWING(self):
            return self.getToken(fugue_sqlParser.FOLLOWING, 0)

        def FOR(self):
            return self.getToken(fugue_sqlParser.FOR, 0)

        def FOREIGN(self):
            return self.getToken(fugue_sqlParser.FOREIGN, 0)

        def FORMAT(self):
            return self.getToken(fugue_sqlParser.FORMAT, 0)

        def FORMATTED(self):
            return self.getToken(fugue_sqlParser.FORMATTED, 0)

        def FROM(self):
            return self.getToken(fugue_sqlParser.FROM, 0)

        def FUNCTION(self):
            return self.getToken(fugue_sqlParser.FUNCTION, 0)

        def FUNCTIONS(self):
            return self.getToken(fugue_sqlParser.FUNCTIONS, 0)

        def GLOBAL(self):
            return self.getToken(fugue_sqlParser.GLOBAL, 0)

        def GRANT(self):
            return self.getToken(fugue_sqlParser.GRANT, 0)

        def GROUP(self):
            return self.getToken(fugue_sqlParser.GROUP, 0)

        def GROUPING(self):
            return self.getToken(fugue_sqlParser.GROUPING, 0)

        def HAVING(self):
            return self.getToken(fugue_sqlParser.HAVING, 0)

        def HOUR(self):
            return self.getToken(fugue_sqlParser.HOUR, 0)

        def IF(self):
            return self.getToken(fugue_sqlParser.IF, 0)

        def IGNORE(self):
            return self.getToken(fugue_sqlParser.IGNORE, 0)

        def IMPORT(self):
            return self.getToken(fugue_sqlParser.IMPORT, 0)

        def IN(self):
            return self.getToken(fugue_sqlParser.IN, 0)

        def INDEX(self):
            return self.getToken(fugue_sqlParser.INDEX, 0)

        def INDEXES(self):
            return self.getToken(fugue_sqlParser.INDEXES, 0)

        def INPATH(self):
            return self.getToken(fugue_sqlParser.INPATH, 0)

        def INPUTFORMAT(self):
            return self.getToken(fugue_sqlParser.INPUTFORMAT, 0)

        def INSERT(self):
            return self.getToken(fugue_sqlParser.INSERT, 0)

        def INTERVAL(self):
            return self.getToken(fugue_sqlParser.INTERVAL, 0)

        def INTO(self):
            return self.getToken(fugue_sqlParser.INTO, 0)

        def IS(self):
            return self.getToken(fugue_sqlParser.IS, 0)

        def ITEMS(self):
            return self.getToken(fugue_sqlParser.ITEMS, 0)

        def KEYS(self):
            return self.getToken(fugue_sqlParser.KEYS, 0)

        def LAST(self):
            return self.getToken(fugue_sqlParser.LAST, 0)

        def LATERAL(self):
            return self.getToken(fugue_sqlParser.LATERAL, 0)

        def LAZY(self):
            return self.getToken(fugue_sqlParser.LAZY, 0)

        def LEADING(self):
            return self.getToken(fugue_sqlParser.LEADING, 0)

        def LIKE(self):
            return self.getToken(fugue_sqlParser.LIKE, 0)

        def LIMIT(self):
            return self.getToken(fugue_sqlParser.LIMIT, 0)

        def LINES(self):
            return self.getToken(fugue_sqlParser.LINES, 0)

        def LIST(self):
            return self.getToken(fugue_sqlParser.LIST, 0)

        def LOAD(self):
            return self.getToken(fugue_sqlParser.LOAD, 0)

        def LOCAL(self):
            return self.getToken(fugue_sqlParser.LOCAL, 0)

        def LOCATION(self):
            return self.getToken(fugue_sqlParser.LOCATION, 0)

        def LOCK(self):
            return self.getToken(fugue_sqlParser.LOCK, 0)

        def LOCKS(self):
            return self.getToken(fugue_sqlParser.LOCKS, 0)

        def LOGICAL(self):
            return self.getToken(fugue_sqlParser.LOGICAL, 0)

        def MACRO(self):
            return self.getToken(fugue_sqlParser.MACRO, 0)

        def MAP(self):
            return self.getToken(fugue_sqlParser.MAP, 0)

        def MATCHED(self):
            return self.getToken(fugue_sqlParser.MATCHED, 0)

        def MERGE(self):
            return self.getToken(fugue_sqlParser.MERGE, 0)

        def MINUTE(self):
            return self.getToken(fugue_sqlParser.MINUTE, 0)

        def MONTH(self):
            return self.getToken(fugue_sqlParser.MONTH, 0)

        def MSCK(self):
            return self.getToken(fugue_sqlParser.MSCK, 0)

        def NAMESPACE(self):
            return self.getToken(fugue_sqlParser.NAMESPACE, 0)

        def NAMESPACES(self):
            return self.getToken(fugue_sqlParser.NAMESPACES, 0)

        def NO(self):
            return self.getToken(fugue_sqlParser.NO, 0)

        def NOT(self):
            return self.getToken(fugue_sqlParser.NOT, 0)

        def THENULL(self):
            return self.getToken(fugue_sqlParser.THENULL, 0)

        def THENULLS(self):
            return self.getToken(fugue_sqlParser.THENULLS, 0)

        def OF(self):
            return self.getToken(fugue_sqlParser.OF, 0)

        def ONLY(self):
            return self.getToken(fugue_sqlParser.ONLY, 0)

        def OPTION(self):
            return self.getToken(fugue_sqlParser.OPTION, 0)

        def OPTIONS(self):
            return self.getToken(fugue_sqlParser.OPTIONS, 0)

        def OR(self):
            return self.getToken(fugue_sqlParser.OR, 0)

        def ORDER(self):
            return self.getToken(fugue_sqlParser.ORDER, 0)

        def OUT(self):
            return self.getToken(fugue_sqlParser.OUT, 0)

        def OUTER(self):
            return self.getToken(fugue_sqlParser.OUTER, 0)

        def OUTPUTFORMAT(self):
            return self.getToken(fugue_sqlParser.OUTPUTFORMAT, 0)

        def OVER(self):
            return self.getToken(fugue_sqlParser.OVER, 0)

        def OVERLAPS(self):
            return self.getToken(fugue_sqlParser.OVERLAPS, 0)

        def OVERLAY(self):
            return self.getToken(fugue_sqlParser.OVERLAY, 0)

        def OVERWRITE(self):
            return self.getToken(fugue_sqlParser.OVERWRITE, 0)

        def PARTITION(self):
            return self.getToken(fugue_sqlParser.PARTITION, 0)

        def PARTITIONED(self):
            return self.getToken(fugue_sqlParser.PARTITIONED, 0)

        def PARTITIONS(self):
            return self.getToken(fugue_sqlParser.PARTITIONS, 0)

        def PERCENTLIT(self):
            return self.getToken(fugue_sqlParser.PERCENTLIT, 0)

        def PIVOT(self):
            return self.getToken(fugue_sqlParser.PIVOT, 0)

        def PLACING(self):
            return self.getToken(fugue_sqlParser.PLACING, 0)

        def POSITION(self):
            return self.getToken(fugue_sqlParser.POSITION, 0)

        def PRECEDING(self):
            return self.getToken(fugue_sqlParser.PRECEDING, 0)

        def PRIMARY(self):
            return self.getToken(fugue_sqlParser.PRIMARY, 0)

        def PRINCIPALS(self):
            return self.getToken(fugue_sqlParser.PRINCIPALS, 0)

        def PROPERTIES(self):
            return self.getToken(fugue_sqlParser.PROPERTIES, 0)

        def PURGE(self):
            return self.getToken(fugue_sqlParser.PURGE, 0)

        def QUERY(self):
            return self.getToken(fugue_sqlParser.QUERY, 0)

        def RANGE(self):
            return self.getToken(fugue_sqlParser.RANGE, 0)

        def RECORDREADER(self):
            return self.getToken(fugue_sqlParser.RECORDREADER, 0)

        def RECORDWRITER(self):
            return self.getToken(fugue_sqlParser.RECORDWRITER, 0)

        def RECOVER(self):
            return self.getToken(fugue_sqlParser.RECOVER, 0)

        def REDUCE(self):
            return self.getToken(fugue_sqlParser.REDUCE, 0)

        def REFERENCES(self):
            return self.getToken(fugue_sqlParser.REFERENCES, 0)

        def REFRESH(self):
            return self.getToken(fugue_sqlParser.REFRESH, 0)

        def RENAME(self):
            return self.getToken(fugue_sqlParser.RENAME, 0)

        def REPAIR(self):
            return self.getToken(fugue_sqlParser.REPAIR, 0)

        def REPLACE(self):
            return self.getToken(fugue_sqlParser.REPLACE, 0)

        def RESET(self):
            return self.getToken(fugue_sqlParser.RESET, 0)

        def RESTRICT(self):
            return self.getToken(fugue_sqlParser.RESTRICT, 0)

        def REVOKE(self):
            return self.getToken(fugue_sqlParser.REVOKE, 0)

        def RLIKE(self):
            return self.getToken(fugue_sqlParser.RLIKE, 0)

        def ROLE(self):
            return self.getToken(fugue_sqlParser.ROLE, 0)

        def ROLES(self):
            return self.getToken(fugue_sqlParser.ROLES, 0)

        def ROLLBACK(self):
            return self.getToken(fugue_sqlParser.ROLLBACK, 0)

        def ROLLUP(self):
            return self.getToken(fugue_sqlParser.ROLLUP, 0)

        def ROW(self):
            return self.getToken(fugue_sqlParser.ROW, 0)

        def ROWS(self):
            return self.getToken(fugue_sqlParser.ROWS, 0)

        def SCHEMA(self):
            return self.getToken(fugue_sqlParser.SCHEMA, 0)

        def SECOND(self):
            return self.getToken(fugue_sqlParser.SECOND, 0)

        def SELECT(self):
            return self.getToken(fugue_sqlParser.SELECT, 0)

        def SEPARATED(self):
            return self.getToken(fugue_sqlParser.SEPARATED, 0)

        def SERDE(self):
            return self.getToken(fugue_sqlParser.SERDE, 0)

        def SERDEPROPERTIES(self):
            return self.getToken(fugue_sqlParser.SERDEPROPERTIES, 0)

        def SESSION_USER(self):
            return self.getToken(fugue_sqlParser.SESSION_USER, 0)

        def SET(self):
            return self.getToken(fugue_sqlParser.SET, 0)

        def SETS(self):
            return self.getToken(fugue_sqlParser.SETS, 0)

        def SHOW(self):
            return self.getToken(fugue_sqlParser.SHOW, 0)

        def SKEWED(self):
            return self.getToken(fugue_sqlParser.SKEWED, 0)

        def SOME(self):
            return self.getToken(fugue_sqlParser.SOME, 0)

        def SORT(self):
            return self.getToken(fugue_sqlParser.SORT, 0)

        def SORTED(self):
            return self.getToken(fugue_sqlParser.SORTED, 0)

        def START(self):
            return self.getToken(fugue_sqlParser.START, 0)

        def STATISTICS(self):
            return self.getToken(fugue_sqlParser.STATISTICS, 0)

        def STORED(self):
            return self.getToken(fugue_sqlParser.STORED, 0)

        def STRATIFY(self):
            return self.getToken(fugue_sqlParser.STRATIFY, 0)

        def STRUCT(self):
            return self.getToken(fugue_sqlParser.STRUCT, 0)

        def SUBSTR(self):
            return self.getToken(fugue_sqlParser.SUBSTR, 0)

        def SUBSTRING(self):
            return self.getToken(fugue_sqlParser.SUBSTRING, 0)

        def TABLE(self):
            return self.getToken(fugue_sqlParser.TABLE, 0)

        def TABLES(self):
            return self.getToken(fugue_sqlParser.TABLES, 0)

        def TABLESAMPLE(self):
            return self.getToken(fugue_sqlParser.TABLESAMPLE, 0)

        def TBLPROPERTIES(self):
            return self.getToken(fugue_sqlParser.TBLPROPERTIES, 0)

        def TEMPORARY(self):
            return self.getToken(fugue_sqlParser.TEMPORARY, 0)

        def TERMINATED(self):
            return self.getToken(fugue_sqlParser.TERMINATED, 0)

        def THEN(self):
            return self.getToken(fugue_sqlParser.THEN, 0)

        def TO(self):
            return self.getToken(fugue_sqlParser.TO, 0)

        def TOUCH(self):
            return self.getToken(fugue_sqlParser.TOUCH, 0)

        def TRAILING(self):
            return self.getToken(fugue_sqlParser.TRAILING, 0)

        def TRANSACTION(self):
            return self.getToken(fugue_sqlParser.TRANSACTION, 0)

        def TRANSACTIONS(self):
            return self.getToken(fugue_sqlParser.TRANSACTIONS, 0)

        def TRANSFORM(self):
            return self.getToken(fugue_sqlParser.TRANSFORM, 0)

        def TRIM(self):
            return self.getToken(fugue_sqlParser.TRIM, 0)

        def TRUE(self):
            return self.getToken(fugue_sqlParser.TRUE, 0)

        def TRUNCATE(self):
            return self.getToken(fugue_sqlParser.TRUNCATE, 0)

        def TYPE(self):
            return self.getToken(fugue_sqlParser.TYPE, 0)

        def UNARCHIVE(self):
            return self.getToken(fugue_sqlParser.UNARCHIVE, 0)

        def UNBOUNDED(self):
            return self.getToken(fugue_sqlParser.UNBOUNDED, 0)

        def UNCACHE(self):
            return self.getToken(fugue_sqlParser.UNCACHE, 0)

        def UNIQUE(self):
            return self.getToken(fugue_sqlParser.UNIQUE, 0)

        def UNKNOWN(self):
            return self.getToken(fugue_sqlParser.UNKNOWN, 0)

        def UNLOCK(self):
            return self.getToken(fugue_sqlParser.UNLOCK, 0)

        def UNSET(self):
            return self.getToken(fugue_sqlParser.UNSET, 0)

        def UPDATE(self):
            return self.getToken(fugue_sqlParser.UPDATE, 0)

        def USE(self):
            return self.getToken(fugue_sqlParser.USE, 0)

        def USER(self):
            return self.getToken(fugue_sqlParser.USER, 0)

        def VALUES(self):
            return self.getToken(fugue_sqlParser.VALUES, 0)

        def VIEW(self):
            return self.getToken(fugue_sqlParser.VIEW, 0)

        def VIEWS(self):
            return self.getToken(fugue_sqlParser.VIEWS, 0)

        def WHEN(self):
            return self.getToken(fugue_sqlParser.WHEN, 0)

        def WHERE(self):
            return self.getToken(fugue_sqlParser.WHERE, 0)

        def WINDOW(self):
            return self.getToken(fugue_sqlParser.WINDOW, 0)

        def WITH(self):
            return self.getToken(fugue_sqlParser.WITH, 0)

        def YEAR(self):
            return self.getToken(fugue_sqlParser.YEAR, 0)

        def getRuleIndex(self):
            return fugue_sqlParser.RULE_nonReserved

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNonReserved" ):
                return visitor.visitNonReserved(self)
            else:
                return visitor.visitChildren(self)




    def nonReserved(self):

        localctx = fugue_sqlParser.NonReservedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 426, self.RULE_nonReserved)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3850
            _la = self._input.LA(1)
            if not((((_la - 54)) & ~0x3f) == 0 and ((1 << (_la - 54)) & -4398046511169) != 0 or (((_la - 118)) & ~0x3f) == 0 and ((1 << (_la - 118)) & -36610438703611937) != 0 or (((_la - 182)) & ~0x3f) == 0 and ((1 << (_la - 182)) & -72057594038061057) != 0 or (((_la - 246)) & ~0x3f) == 0 and ((1 << (_la - 246)) & 1150660908700138999) != 0 or _la==320):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[47] = self.fuguePartitionNum_sempred
        self._predicates[115] = self.queryTerm_sempred
        self._predicates[170] = self.booleanExpression_sempred
        self._predicates[172] = self.valueExpression_sempred
        self._predicates[173] = self.primaryExpression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def fuguePartitionNum_sempred(self, localctx:FuguePartitionNumContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 1)
         

    def queryTerm_sempred(self, localctx:QueryTermContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 1)
         

    def booleanExpression_sempred(self, localctx:BooleanExpressionContext, predIndex:int):
            if predIndex == 4:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 1)
         

    def valueExpression_sempred(self, localctx:ValueExpressionContext, predIndex:int):
            if predIndex == 6:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 1)
         

    def primaryExpression_sempred(self, localctx:PrimaryExpressionContext, predIndex:int):
            if predIndex == 12:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 6)
         




