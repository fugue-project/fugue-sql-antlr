
// Generated from fugue_sql.g4 by ANTLR 4.9.3


#include "fugue_sqlVisitor.h"

#include "fugue_sqlParser.h"


using namespace antlrcpp;
using namespace antlr4;

fugue_sqlParser::fugue_sqlParser(TokenStream *input) : Parser(input) {
  _interpreter = new atn::ParserATNSimulator(this, _atn, _decisionToDFA, _sharedContextCache);
}

fugue_sqlParser::~fugue_sqlParser() {
  delete _interpreter;
}

std::string fugue_sqlParser::getGrammarFileName() const {
  return "fugue_sql.g4";
}

const std::vector<std::string>& fugue_sqlParser::getRuleNames() const {
  return _ruleNames;
}

dfa::Vocabulary& fugue_sqlParser::getVocabulary() const {
  return _vocabulary;
}


//----------------- FugueLanguageContext ------------------------------------------------------------------

fugue_sqlParser::FugueLanguageContext::FugueLanguageContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* fugue_sqlParser::FugueLanguageContext::EOF() {
  return getToken(fugue_sqlParser::EOF, 0);
}

std::vector<fugue_sqlParser::FugueSingleTaskContext *> fugue_sqlParser::FugueLanguageContext::fugueSingleTask() {
  return getRuleContexts<fugue_sqlParser::FugueSingleTaskContext>();
}

fugue_sqlParser::FugueSingleTaskContext* fugue_sqlParser::FugueLanguageContext::fugueSingleTask(size_t i) {
  return getRuleContext<fugue_sqlParser::FugueSingleTaskContext>(i);
}


size_t fugue_sqlParser::FugueLanguageContext::getRuleIndex() const {
  return fugue_sqlParser::RuleFugueLanguage;
}


antlrcpp::Any fugue_sqlParser::FugueLanguageContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitFugueLanguage(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::FugueLanguageContext* fugue_sqlParser::fugueLanguage() {
  FugueLanguageContext *_localctx = _tracker.createInstance<FugueLanguageContext>(_ctx, getState());
  enterRule(_localctx, 0, fugue_sqlParser::RuleFugueLanguage);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(429); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(428);
      fugueSingleTask();
      setState(431); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (((((_la - 17) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 17)) & ((1ULL << (fugue_sqlParser::FILL - 17))
      | (1ULL << (fugue_sqlParser::TAKE - 17))
      | (1ULL << (fugue_sqlParser::PROCESS - 17))
      | (1ULL << (fugue_sqlParser::OUTPUT - 17))
      | (1ULL << (fugue_sqlParser::OUTTRANSFORM - 17))
      | (1ULL << (fugue_sqlParser::ZIP - 17))
      | (1ULL << (fugue_sqlParser::PRINT - 17))
      | (1ULL << (fugue_sqlParser::SAVE - 17))
      | (1ULL << (fugue_sqlParser::CONNECT - 17))
      | (1ULL << (fugue_sqlParser::SAMPLE - 17))
      | (1ULL << (fugue_sqlParser::SUB - 17))
      | (1ULL << (fugue_sqlParser::ADD - 17))
      | (1ULL << (fugue_sqlParser::AFTER - 17))
      | (1ULL << (fugue_sqlParser::ALL - 17))
      | (1ULL << (fugue_sqlParser::ALTER - 17))
      | (1ULL << (fugue_sqlParser::ANALYZE - 17))
      | (1ULL << (fugue_sqlParser::AND - 17))
      | (1ULL << (fugue_sqlParser::ANTI - 17))
      | (1ULL << (fugue_sqlParser::ANY - 17))
      | (1ULL << (fugue_sqlParser::ARCHIVE - 17))
      | (1ULL << (fugue_sqlParser::ARRAY - 17))
      | (1ULL << (fugue_sqlParser::AS - 17))
      | (1ULL << (fugue_sqlParser::ASC - 17))
      | (1ULL << (fugue_sqlParser::AT - 17))
      | (1ULL << (fugue_sqlParser::AUTHORIZATION - 17))
      | (1ULL << (fugue_sqlParser::BETWEEN - 17))
      | (1ULL << (fugue_sqlParser::BOTH - 17))
      | (1ULL << (fugue_sqlParser::BUCKET - 17))
      | (1ULL << (fugue_sqlParser::BUCKETS - 17))
      | (1ULL << (fugue_sqlParser::BY - 17))
      | (1ULL << (fugue_sqlParser::CACHE - 17))
      | (1ULL << (fugue_sqlParser::CASCADE - 17))
      | (1ULL << (fugue_sqlParser::CASE - 17))
      | (1ULL << (fugue_sqlParser::CAST - 17))
      | (1ULL << (fugue_sqlParser::CHANGE - 17))
      | (1ULL << (fugue_sqlParser::CHECK - 17))
      | (1ULL << (fugue_sqlParser::CLEAR - 17))
      | (1ULL << (fugue_sqlParser::CLUSTER - 17))
      | (1ULL << (fugue_sqlParser::CLUSTERED - 17)))) != 0) || ((((_la - 81) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 81)) & ((1ULL << (fugue_sqlParser::CODEGEN - 81))
      | (1ULL << (fugue_sqlParser::COLLATE - 81))
      | (1ULL << (fugue_sqlParser::COLLECTION - 81))
      | (1ULL << (fugue_sqlParser::COLUMN - 81))
      | (1ULL << (fugue_sqlParser::COLUMNS - 81))
      | (1ULL << (fugue_sqlParser::COMMENT - 81))
      | (1ULL << (fugue_sqlParser::COMMIT - 81))
      | (1ULL << (fugue_sqlParser::COMPACT - 81))
      | (1ULL << (fugue_sqlParser::COMPACTIONS - 81))
      | (1ULL << (fugue_sqlParser::COMPUTE - 81))
      | (1ULL << (fugue_sqlParser::CONCATENATE - 81))
      | (1ULL << (fugue_sqlParser::CONSTRAINT - 81))
      | (1ULL << (fugue_sqlParser::COST - 81))
      | (1ULL << (fugue_sqlParser::CREATE - 81))
      | (1ULL << (fugue_sqlParser::CROSS - 81))
      | (1ULL << (fugue_sqlParser::CUBE - 81))
      | (1ULL << (fugue_sqlParser::CURRENT - 81))
      | (1ULL << (fugue_sqlParser::CURRENT_DATE - 81))
      | (1ULL << (fugue_sqlParser::CURRENT_TIME - 81))
      | (1ULL << (fugue_sqlParser::CURRENT_TIMESTAMP - 81))
      | (1ULL << (fugue_sqlParser::CURRENT_USER - 81))
      | (1ULL << (fugue_sqlParser::DATA - 81))
      | (1ULL << (fugue_sqlParser::DATABASE - 81))
      | (1ULL << (fugue_sqlParser::DATABASES - 81))
      | (1ULL << (fugue_sqlParser::DAY - 81))
      | (1ULL << (fugue_sqlParser::DBPROPERTIES - 81))
      | (1ULL << (fugue_sqlParser::DEFINED - 81))
      | (1ULL << (fugue_sqlParser::DELETE - 81))
      | (1ULL << (fugue_sqlParser::DELIMITED - 81))
      | (1ULL << (fugue_sqlParser::DESC - 81))
      | (1ULL << (fugue_sqlParser::DESCRIBE - 81))
      | (1ULL << (fugue_sqlParser::DFS - 81))
      | (1ULL << (fugue_sqlParser::DIRECTORIES - 81))
      | (1ULL << (fugue_sqlParser::DIRECTORY - 81))
      | (1ULL << (fugue_sqlParser::DISTINCT - 81))
      | (1ULL << (fugue_sqlParser::DISTRIBUTE - 81))
      | (1ULL << (fugue_sqlParser::DROP - 81))
      | (1ULL << (fugue_sqlParser::ELSE - 81))
      | (1ULL << (fugue_sqlParser::END - 81))
      | (1ULL << (fugue_sqlParser::ESCAPE - 81))
      | (1ULL << (fugue_sqlParser::ESCAPED - 81))
      | (1ULL << (fugue_sqlParser::EXCEPT - 81))
      | (1ULL << (fugue_sqlParser::EXCHANGE - 81))
      | (1ULL << (fugue_sqlParser::EXISTS - 81))
      | (1ULL << (fugue_sqlParser::EXPLAIN - 81))
      | (1ULL << (fugue_sqlParser::EXPORT - 81))
      | (1ULL << (fugue_sqlParser::EXTENDED - 81))
      | (1ULL << (fugue_sqlParser::EXTERNAL - 81))
      | (1ULL << (fugue_sqlParser::EXTRACT - 81))
      | (1ULL << (fugue_sqlParser::FALSE - 81))
      | (1ULL << (fugue_sqlParser::FETCH - 81))
      | (1ULL << (fugue_sqlParser::FIELDS - 81))
      | (1ULL << (fugue_sqlParser::FILTER - 81))
      | (1ULL << (fugue_sqlParser::FILEFORMAT - 81))
      | (1ULL << (fugue_sqlParser::FIRST - 81))
      | (1ULL << (fugue_sqlParser::FOLLOWING - 81))
      | (1ULL << (fugue_sqlParser::FOR - 81))
      | (1ULL << (fugue_sqlParser::FOREIGN - 81))
      | (1ULL << (fugue_sqlParser::FORMAT - 81))
      | (1ULL << (fugue_sqlParser::FORMATTED - 81))
      | (1ULL << (fugue_sqlParser::FROM - 81))
      | (1ULL << (fugue_sqlParser::FULL - 81))
      | (1ULL << (fugue_sqlParser::FUNCTION - 81))
      | (1ULL << (fugue_sqlParser::FUNCTIONS - 81)))) != 0) || ((((_la - 145) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 145)) & ((1ULL << (fugue_sqlParser::GLOBAL - 145))
      | (1ULL << (fugue_sqlParser::GRANT - 145))
      | (1ULL << (fugue_sqlParser::GROUP - 145))
      | (1ULL << (fugue_sqlParser::GROUPING - 145))
      | (1ULL << (fugue_sqlParser::HAVING - 145))
      | (1ULL << (fugue_sqlParser::HOUR - 145))
      | (1ULL << (fugue_sqlParser::IF - 145))
      | (1ULL << (fugue_sqlParser::IGNORE - 145))
      | (1ULL << (fugue_sqlParser::IMPORT - 145))
      | (1ULL << (fugue_sqlParser::IN - 145))
      | (1ULL << (fugue_sqlParser::INDEX - 145))
      | (1ULL << (fugue_sqlParser::INDEXES - 145))
      | (1ULL << (fugue_sqlParser::INNER - 145))
      | (1ULL << (fugue_sqlParser::INPATH - 145))
      | (1ULL << (fugue_sqlParser::INPUTFORMAT - 145))
      | (1ULL << (fugue_sqlParser::INSERT - 145))
      | (1ULL << (fugue_sqlParser::INTERSECT - 145))
      | (1ULL << (fugue_sqlParser::INTERVAL - 145))
      | (1ULL << (fugue_sqlParser::INTO - 145))
      | (1ULL << (fugue_sqlParser::IS - 145))
      | (1ULL << (fugue_sqlParser::ITEMS - 145))
      | (1ULL << (fugue_sqlParser::JOIN - 145))
      | (1ULL << (fugue_sqlParser::KEYS - 145))
      | (1ULL << (fugue_sqlParser::LAST - 145))
      | (1ULL << (fugue_sqlParser::LATERAL - 145))
      | (1ULL << (fugue_sqlParser::LAZY - 145))
      | (1ULL << (fugue_sqlParser::LEADING - 145))
      | (1ULL << (fugue_sqlParser::LEFT - 145))
      | (1ULL << (fugue_sqlParser::LIKE - 145))
      | (1ULL << (fugue_sqlParser::LIMIT - 145))
      | (1ULL << (fugue_sqlParser::LINES - 145))
      | (1ULL << (fugue_sqlParser::LIST - 145))
      | (1ULL << (fugue_sqlParser::LOAD - 145))
      | (1ULL << (fugue_sqlParser::LOCAL - 145))
      | (1ULL << (fugue_sqlParser::LOCATION - 145))
      | (1ULL << (fugue_sqlParser::LOCK - 145))
      | (1ULL << (fugue_sqlParser::LOCKS - 145))
      | (1ULL << (fugue_sqlParser::LOGICAL - 145))
      | (1ULL << (fugue_sqlParser::MACRO - 145))
      | (1ULL << (fugue_sqlParser::MAP - 145))
      | (1ULL << (fugue_sqlParser::MATCHED - 145))
      | (1ULL << (fugue_sqlParser::MERGE - 145))
      | (1ULL << (fugue_sqlParser::MINUTE - 145))
      | (1ULL << (fugue_sqlParser::MONTH - 145))
      | (1ULL << (fugue_sqlParser::MSCK - 145))
      | (1ULL << (fugue_sqlParser::NAMESPACE - 145))
      | (1ULL << (fugue_sqlParser::NAMESPACES - 145))
      | (1ULL << (fugue_sqlParser::NATURAL - 145))
      | (1ULL << (fugue_sqlParser::NO - 145))
      | (1ULL << (fugue_sqlParser::NOT - 145))
      | (1ULL << (fugue_sqlParser::THENULL - 145))
      | (1ULL << (fugue_sqlParser::THENULLS - 145))
      | (1ULL << (fugue_sqlParser::OF - 145))
      | (1ULL << (fugue_sqlParser::ON - 145))
      | (1ULL << (fugue_sqlParser::ONLY - 145))
      | (1ULL << (fugue_sqlParser::OPTION - 145))
      | (1ULL << (fugue_sqlParser::OPTIONS - 145))
      | (1ULL << (fugue_sqlParser::OR - 145))
      | (1ULL << (fugue_sqlParser::ORDER - 145))
      | (1ULL << (fugue_sqlParser::OUT - 145))
      | (1ULL << (fugue_sqlParser::OUTER - 145))
      | (1ULL << (fugue_sqlParser::OUTPUTFORMAT - 145))
      | (1ULL << (fugue_sqlParser::OVER - 145))
      | (1ULL << (fugue_sqlParser::OVERLAPS - 145)))) != 0) || ((((_la - 209) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 209)) & ((1ULL << (fugue_sqlParser::OVERLAY - 209))
      | (1ULL << (fugue_sqlParser::OVERWRITE - 209))
      | (1ULL << (fugue_sqlParser::PARTITION - 209))
      | (1ULL << (fugue_sqlParser::PARTITIONED - 209))
      | (1ULL << (fugue_sqlParser::PARTITIONS - 209))
      | (1ULL << (fugue_sqlParser::PERCENTLIT - 209))
      | (1ULL << (fugue_sqlParser::PIVOT - 209))
      | (1ULL << (fugue_sqlParser::PLACING - 209))
      | (1ULL << (fugue_sqlParser::POSITION - 209))
      | (1ULL << (fugue_sqlParser::PRECEDING - 209))
      | (1ULL << (fugue_sqlParser::PRIMARY - 209))
      | (1ULL << (fugue_sqlParser::PRINCIPALS - 209))
      | (1ULL << (fugue_sqlParser::PROPERTIES - 209))
      | (1ULL << (fugue_sqlParser::PURGE - 209))
      | (1ULL << (fugue_sqlParser::QUERY - 209))
      | (1ULL << (fugue_sqlParser::RANGE - 209))
      | (1ULL << (fugue_sqlParser::RECORDREADER - 209))
      | (1ULL << (fugue_sqlParser::RECORDWRITER - 209))
      | (1ULL << (fugue_sqlParser::RECOVER - 209))
      | (1ULL << (fugue_sqlParser::REDUCE - 209))
      | (1ULL << (fugue_sqlParser::REFERENCES - 209))
      | (1ULL << (fugue_sqlParser::REFRESH - 209))
      | (1ULL << (fugue_sqlParser::RENAME - 209))
      | (1ULL << (fugue_sqlParser::REPAIR - 209))
      | (1ULL << (fugue_sqlParser::REPLACE - 209))
      | (1ULL << (fugue_sqlParser::RESET - 209))
      | (1ULL << (fugue_sqlParser::RESTRICT - 209))
      | (1ULL << (fugue_sqlParser::REVOKE - 209))
      | (1ULL << (fugue_sqlParser::RIGHT - 209))
      | (1ULL << (fugue_sqlParser::RLIKE - 209))
      | (1ULL << (fugue_sqlParser::ROLE - 209))
      | (1ULL << (fugue_sqlParser::ROLES - 209))
      | (1ULL << (fugue_sqlParser::ROLLBACK - 209))
      | (1ULL << (fugue_sqlParser::ROLLUP - 209))
      | (1ULL << (fugue_sqlParser::ROW - 209))
      | (1ULL << (fugue_sqlParser::ROWS - 209))
      | (1ULL << (fugue_sqlParser::SCHEMA - 209))
      | (1ULL << (fugue_sqlParser::SECOND - 209))
      | (1ULL << (fugue_sqlParser::SELECT - 209))
      | (1ULL << (fugue_sqlParser::SEMI - 209))
      | (1ULL << (fugue_sqlParser::SEPARATED - 209))
      | (1ULL << (fugue_sqlParser::SERDE - 209))
      | (1ULL << (fugue_sqlParser::SERDEPROPERTIES - 209))
      | (1ULL << (fugue_sqlParser::SESSION_USER - 209))
      | (1ULL << (fugue_sqlParser::SET - 209))
      | (1ULL << (fugue_sqlParser::SETMINUS - 209))
      | (1ULL << (fugue_sqlParser::SETS - 209))
      | (1ULL << (fugue_sqlParser::SHOW - 209))
      | (1ULL << (fugue_sqlParser::SKEWED - 209))
      | (1ULL << (fugue_sqlParser::SOME - 209))
      | (1ULL << (fugue_sqlParser::SORT - 209))
      | (1ULL << (fugue_sqlParser::SORTED - 209))
      | (1ULL << (fugue_sqlParser::START - 209))
      | (1ULL << (fugue_sqlParser::STATISTICS - 209))
      | (1ULL << (fugue_sqlParser::STORED - 209))
      | (1ULL << (fugue_sqlParser::STRATIFY - 209))
      | (1ULL << (fugue_sqlParser::STRUCT - 209))
      | (1ULL << (fugue_sqlParser::SUBSTR - 209))
      | (1ULL << (fugue_sqlParser::SUBSTRING - 209))
      | (1ULL << (fugue_sqlParser::TABLE - 209))
      | (1ULL << (fugue_sqlParser::TABLES - 209))
      | (1ULL << (fugue_sqlParser::TABLESAMPLE - 209))
      | (1ULL << (fugue_sqlParser::TBLPROPERTIES - 209))
      | (1ULL << (fugue_sqlParser::TEMPORARY - 209)))) != 0) || ((((_la - 273) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 273)) & ((1ULL << (fugue_sqlParser::TERMINATED - 273))
      | (1ULL << (fugue_sqlParser::THEN - 273))
      | (1ULL << (fugue_sqlParser::TO - 273))
      | (1ULL << (fugue_sqlParser::TOUCH - 273))
      | (1ULL << (fugue_sqlParser::TRAILING - 273))
      | (1ULL << (fugue_sqlParser::TRANSACTION - 273))
      | (1ULL << (fugue_sqlParser::TRANSACTIONS - 273))
      | (1ULL << (fugue_sqlParser::TRANSFORM - 273))
      | (1ULL << (fugue_sqlParser::TRIM - 273))
      | (1ULL << (fugue_sqlParser::TRUE - 273))
      | (1ULL << (fugue_sqlParser::TRUNCATE - 273))
      | (1ULL << (fugue_sqlParser::TYPE - 273))
      | (1ULL << (fugue_sqlParser::UNARCHIVE - 273))
      | (1ULL << (fugue_sqlParser::UNBOUNDED - 273))
      | (1ULL << (fugue_sqlParser::UNCACHE - 273))
      | (1ULL << (fugue_sqlParser::UNION - 273))
      | (1ULL << (fugue_sqlParser::UNIQUE - 273))
      | (1ULL << (fugue_sqlParser::UNKNOWN - 273))
      | (1ULL << (fugue_sqlParser::UNLOCK - 273))
      | (1ULL << (fugue_sqlParser::UNSET - 273))
      | (1ULL << (fugue_sqlParser::UPDATE - 273))
      | (1ULL << (fugue_sqlParser::USE - 273))
      | (1ULL << (fugue_sqlParser::USER - 273))
      | (1ULL << (fugue_sqlParser::USING - 273))
      | (1ULL << (fugue_sqlParser::VALUES - 273))
      | (1ULL << (fugue_sqlParser::VIEW - 273))
      | (1ULL << (fugue_sqlParser::VIEWS - 273))
      | (1ULL << (fugue_sqlParser::WHEN - 273))
      | (1ULL << (fugue_sqlParser::WHERE - 273))
      | (1ULL << (fugue_sqlParser::WINDOW - 273))
      | (1ULL << (fugue_sqlParser::WITH - 273))
      | (1ULL << (fugue_sqlParser::YEAR - 273))
      | (1ULL << (fugue_sqlParser::DIV - 273))
      | (1ULL << (fugue_sqlParser::IDENTIFIER - 273))
      | (1ULL << (fugue_sqlParser::BACKQUOTED_IDENTIFIER - 273)))) != 0));
    setState(433);
    match(fugue_sqlParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FugueSingleStatementContext ------------------------------------------------------------------

fugue_sqlParser::FugueSingleStatementContext::FugueSingleStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

fugue_sqlParser::FugueSingleTaskContext* fugue_sqlParser::FugueSingleStatementContext::fugueSingleTask() {
  return getRuleContext<fugue_sqlParser::FugueSingleTaskContext>(0);
}

tree::TerminalNode* fugue_sqlParser::FugueSingleStatementContext::EOF() {
  return getToken(fugue_sqlParser::EOF, 0);
}


size_t fugue_sqlParser::FugueSingleStatementContext::getRuleIndex() const {
  return fugue_sqlParser::RuleFugueSingleStatement;
}


antlrcpp::Any fugue_sqlParser::FugueSingleStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitFugueSingleStatement(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::FugueSingleStatementContext* fugue_sqlParser::fugueSingleStatement() {
  FugueSingleStatementContext *_localctx = _tracker.createInstance<FugueSingleStatementContext>(_ctx, getState());
  enterRule(_localctx, 2, fugue_sqlParser::RuleFugueSingleStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(435);
    fugueSingleTask();
    setState(436);
    match(fugue_sqlParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FugueSingleTaskContext ------------------------------------------------------------------

fugue_sqlParser::FugueSingleTaskContext::FugueSingleTaskContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

fugue_sqlParser::FugueNestableTaskContext* fugue_sqlParser::FugueSingleTaskContext::fugueNestableTask() {
  return getRuleContext<fugue_sqlParser::FugueNestableTaskContext>(0);
}

fugue_sqlParser::FugueOutputTransformTaskContext* fugue_sqlParser::FugueSingleTaskContext::fugueOutputTransformTask() {
  return getRuleContext<fugue_sqlParser::FugueOutputTransformTaskContext>(0);
}

fugue_sqlParser::FugueOutputTaskContext* fugue_sqlParser::FugueSingleTaskContext::fugueOutputTask() {
  return getRuleContext<fugue_sqlParser::FugueOutputTaskContext>(0);
}

fugue_sqlParser::FuguePrintTaskContext* fugue_sqlParser::FugueSingleTaskContext::fuguePrintTask() {
  return getRuleContext<fugue_sqlParser::FuguePrintTaskContext>(0);
}

fugue_sqlParser::FugueSaveTaskContext* fugue_sqlParser::FugueSingleTaskContext::fugueSaveTask() {
  return getRuleContext<fugue_sqlParser::FugueSaveTaskContext>(0);
}

fugue_sqlParser::FugueModuleTaskContext* fugue_sqlParser::FugueSingleTaskContext::fugueModuleTask() {
  return getRuleContext<fugue_sqlParser::FugueModuleTaskContext>(0);
}


size_t fugue_sqlParser::FugueSingleTaskContext::getRuleIndex() const {
  return fugue_sqlParser::RuleFugueSingleTask;
}


antlrcpp::Any fugue_sqlParser::FugueSingleTaskContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitFugueSingleTask(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::FugueSingleTaskContext* fugue_sqlParser::fugueSingleTask() {
  FugueSingleTaskContext *_localctx = _tracker.createInstance<FugueSingleTaskContext>(_ctx, getState());
  enterRule(_localctx, 4, fugue_sqlParser::RuleFugueSingleTask);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(444);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 1, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(438);
      fugueNestableTask();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(439);
      fugueOutputTransformTask();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(440);
      fugueOutputTask();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(441);
      fuguePrintTask();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(442);
      fugueSaveTask();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(443);
      fugueModuleTask();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FugueNestableTaskContext ------------------------------------------------------------------

fugue_sqlParser::FugueNestableTaskContext::FugueNestableTaskContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

fugue_sqlParser::QueryContext* fugue_sqlParser::FugueNestableTaskContext::query() {
  return getRuleContext<fugue_sqlParser::QueryContext>(0);
}

fugue_sqlParser::FugueAssignmentContext* fugue_sqlParser::FugueNestableTaskContext::fugueAssignment() {
  return getRuleContext<fugue_sqlParser::FugueAssignmentContext>(0);
}

fugue_sqlParser::FugueCheckpointContext* fugue_sqlParser::FugueNestableTaskContext::fugueCheckpoint() {
  return getRuleContext<fugue_sqlParser::FugueCheckpointContext>(0);
}

fugue_sqlParser::FugueBroadcastContext* fugue_sqlParser::FugueNestableTaskContext::fugueBroadcast() {
  return getRuleContext<fugue_sqlParser::FugueBroadcastContext>(0);
}

fugue_sqlParser::FugueYieldContext* fugue_sqlParser::FugueNestableTaskContext::fugueYield() {
  return getRuleContext<fugue_sqlParser::FugueYieldContext>(0);
}


size_t fugue_sqlParser::FugueNestableTaskContext::getRuleIndex() const {
  return fugue_sqlParser::RuleFugueNestableTask;
}


antlrcpp::Any fugue_sqlParser::FugueNestableTaskContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitFugueNestableTask(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::FugueNestableTaskContext* fugue_sqlParser::fugueNestableTask() {
  FugueNestableTaskContext *_localctx = _tracker.createInstance<FugueNestableTaskContext>(_ctx, getState());
  enterRule(_localctx, 6, fugue_sqlParser::RuleFugueNestableTask);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(447);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 2, _ctx)) {
    case 1: {
      setState(446);
      antlrcpp::downCast<FugueNestableTaskContext *>(_localctx)->assign = fugueAssignment();
      break;
    }

    default:
      break;
    }
    setState(449);
    antlrcpp::downCast<FugueNestableTaskContext *>(_localctx)->q = query();
    setState(451);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 3, _ctx)) {
    case 1: {
      setState(450);
      antlrcpp::downCast<FugueNestableTaskContext *>(_localctx)->checkpoint = fugueCheckpoint();
      break;
    }

    default:
      break;
    }
    setState(454);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == fugue_sqlParser::BROADCAST) {
      setState(453);
      antlrcpp::downCast<FugueNestableTaskContext *>(_localctx)->broadcast = fugueBroadcast();
    }
    setState(457);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == fugue_sqlParser::YIELD) {
      setState(456);
      antlrcpp::downCast<FugueNestableTaskContext *>(_localctx)->y = fugueYield();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FugueNestableTaskCollectionNoSelectContext ------------------------------------------------------------------

fugue_sqlParser::FugueNestableTaskCollectionNoSelectContext::FugueNestableTaskCollectionNoSelectContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

fugue_sqlParser::FugueTransformTaskContext* fugue_sqlParser::FugueNestableTaskCollectionNoSelectContext::fugueTransformTask() {
  return getRuleContext<fugue_sqlParser::FugueTransformTaskContext>(0);
}

fugue_sqlParser::FugueProcessTaskContext* fugue_sqlParser::FugueNestableTaskCollectionNoSelectContext::fugueProcessTask() {
  return getRuleContext<fugue_sqlParser::FugueProcessTaskContext>(0);
}

fugue_sqlParser::FugueZipTaskContext* fugue_sqlParser::FugueNestableTaskCollectionNoSelectContext::fugueZipTask() {
  return getRuleContext<fugue_sqlParser::FugueZipTaskContext>(0);
}

fugue_sqlParser::FugueCreateTaskContext* fugue_sqlParser::FugueNestableTaskCollectionNoSelectContext::fugueCreateTask() {
  return getRuleContext<fugue_sqlParser::FugueCreateTaskContext>(0);
}

fugue_sqlParser::FugueCreateDataTaskContext* fugue_sqlParser::FugueNestableTaskCollectionNoSelectContext::fugueCreateDataTask() {
  return getRuleContext<fugue_sqlParser::FugueCreateDataTaskContext>(0);
}

fugue_sqlParser::FugueLoadTaskContext* fugue_sqlParser::FugueNestableTaskCollectionNoSelectContext::fugueLoadTask() {
  return getRuleContext<fugue_sqlParser::FugueLoadTaskContext>(0);
}

fugue_sqlParser::FugueSaveAndUseTaskContext* fugue_sqlParser::FugueNestableTaskCollectionNoSelectContext::fugueSaveAndUseTask() {
  return getRuleContext<fugue_sqlParser::FugueSaveAndUseTaskContext>(0);
}

fugue_sqlParser::FugueRenameColumnsTaskContext* fugue_sqlParser::FugueNestableTaskCollectionNoSelectContext::fugueRenameColumnsTask() {
  return getRuleContext<fugue_sqlParser::FugueRenameColumnsTaskContext>(0);
}

fugue_sqlParser::FugueAlterColumnsTaskContext* fugue_sqlParser::FugueNestableTaskCollectionNoSelectContext::fugueAlterColumnsTask() {
  return getRuleContext<fugue_sqlParser::FugueAlterColumnsTaskContext>(0);
}

fugue_sqlParser::FugueDropColumnsTaskContext* fugue_sqlParser::FugueNestableTaskCollectionNoSelectContext::fugueDropColumnsTask() {
  return getRuleContext<fugue_sqlParser::FugueDropColumnsTaskContext>(0);
}

fugue_sqlParser::FugueDropnaTaskContext* fugue_sqlParser::FugueNestableTaskCollectionNoSelectContext::fugueDropnaTask() {
  return getRuleContext<fugue_sqlParser::FugueDropnaTaskContext>(0);
}

fugue_sqlParser::FugueFillnaTaskContext* fugue_sqlParser::FugueNestableTaskCollectionNoSelectContext::fugueFillnaTask() {
  return getRuleContext<fugue_sqlParser::FugueFillnaTaskContext>(0);
}

fugue_sqlParser::FugueSampleTaskContext* fugue_sqlParser::FugueNestableTaskCollectionNoSelectContext::fugueSampleTask() {
  return getRuleContext<fugue_sqlParser::FugueSampleTaskContext>(0);
}

fugue_sqlParser::FugueTakeTaskContext* fugue_sqlParser::FugueNestableTaskCollectionNoSelectContext::fugueTakeTask() {
  return getRuleContext<fugue_sqlParser::FugueTakeTaskContext>(0);
}


size_t fugue_sqlParser::FugueNestableTaskCollectionNoSelectContext::getRuleIndex() const {
  return fugue_sqlParser::RuleFugueNestableTaskCollectionNoSelect;
}


antlrcpp::Any fugue_sqlParser::FugueNestableTaskCollectionNoSelectContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitFugueNestableTaskCollectionNoSelect(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::FugueNestableTaskCollectionNoSelectContext* fugue_sqlParser::fugueNestableTaskCollectionNoSelect() {
  FugueNestableTaskCollectionNoSelectContext *_localctx = _tracker.createInstance<FugueNestableTaskCollectionNoSelectContext>(_ctx, getState());
  enterRule(_localctx, 8, fugue_sqlParser::RuleFugueNestableTaskCollectionNoSelect);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(473);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 6, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(459);
      fugueTransformTask();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(460);
      fugueProcessTask();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(461);
      fugueZipTask();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(462);
      fugueCreateTask();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(463);
      fugueCreateDataTask();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(464);
      fugueLoadTask();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(465);
      fugueSaveAndUseTask();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(466);
      fugueRenameColumnsTask();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(467);
      fugueAlterColumnsTask();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(468);
      fugueDropColumnsTask();
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(469);
      fugueDropnaTask();
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(470);
      fugueFillnaTask();
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(471);
      fugueSampleTask();
      break;
    }

    case 14: {
      enterOuterAlt(_localctx, 14);
      setState(472);
      fugueTakeTask();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FugueTransformTaskContext ------------------------------------------------------------------

fugue_sqlParser::FugueTransformTaskContext::FugueTransformTaskContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* fugue_sqlParser::FugueTransformTaskContext::TRANSFORM() {
  return getToken(fugue_sqlParser::TRANSFORM, 0);
}

fugue_sqlParser::FugueSingleOutputExtensionCommonWildContext* fugue_sqlParser::FugueTransformTaskContext::fugueSingleOutputExtensionCommonWild() {
  return getRuleContext<fugue_sqlParser::FugueSingleOutputExtensionCommonWildContext>(0);
}

tree::TerminalNode* fugue_sqlParser::FugueTransformTaskContext::CALLBACK() {
  return getToken(fugue_sqlParser::CALLBACK, 0);
}

fugue_sqlParser::FugueDataFramesContext* fugue_sqlParser::FugueTransformTaskContext::fugueDataFrames() {
  return getRuleContext<fugue_sqlParser::FugueDataFramesContext>(0);
}

fugue_sqlParser::FuguePrepartitionContext* fugue_sqlParser::FugueTransformTaskContext::fuguePrepartition() {
  return getRuleContext<fugue_sqlParser::FuguePrepartitionContext>(0);
}

fugue_sqlParser::FugueExtensionContext* fugue_sqlParser::FugueTransformTaskContext::fugueExtension() {
  return getRuleContext<fugue_sqlParser::FugueExtensionContext>(0);
}


size_t fugue_sqlParser::FugueTransformTaskContext::getRuleIndex() const {
  return fugue_sqlParser::RuleFugueTransformTask;
}


antlrcpp::Any fugue_sqlParser::FugueTransformTaskContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitFugueTransformTask(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::FugueTransformTaskContext* fugue_sqlParser::fugueTransformTask() {
  FugueTransformTaskContext *_localctx = _tracker.createInstance<FugueTransformTaskContext>(_ctx, getState());
  enterRule(_localctx, 10, fugue_sqlParser::RuleFugueTransformTask);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(475);
    match(fugue_sqlParser::TRANSFORM);
    setState(477);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 7, _ctx)) {
    case 1: {
      setState(476);
      antlrcpp::downCast<FugueTransformTaskContext *>(_localctx)->dfs = fugueDataFrames();
      break;
    }

    default:
      break;
    }
    setState(480);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << fugue_sqlParser::HASH)
      | (1ULL << fugue_sqlParser::RAND)
      | (1ULL << fugue_sqlParser::EVEN)
      | (1ULL << fugue_sqlParser::PREPARTITION))) != 0)) {
      setState(479);
      antlrcpp::downCast<FugueTransformTaskContext *>(_localctx)->partition = fuguePrepartition();
    }
    setState(482);
    antlrcpp::downCast<FugueTransformTaskContext *>(_localctx)->params = fugueSingleOutputExtensionCommonWild();
    setState(485);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 9, _ctx)) {
    case 1: {
      setState(483);
      match(fugue_sqlParser::CALLBACK);
      setState(484);
      antlrcpp::downCast<FugueTransformTaskContext *>(_localctx)->callback = fugueExtension();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FugueProcessTaskContext ------------------------------------------------------------------

fugue_sqlParser::FugueProcessTaskContext::FugueProcessTaskContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* fugue_sqlParser::FugueProcessTaskContext::PROCESS() {
  return getToken(fugue_sqlParser::PROCESS, 0);
}

fugue_sqlParser::FugueSingleOutputExtensionCommonContext* fugue_sqlParser::FugueProcessTaskContext::fugueSingleOutputExtensionCommon() {
  return getRuleContext<fugue_sqlParser::FugueSingleOutputExtensionCommonContext>(0);
}

fugue_sqlParser::FugueDataFramesContext* fugue_sqlParser::FugueProcessTaskContext::fugueDataFrames() {
  return getRuleContext<fugue_sqlParser::FugueDataFramesContext>(0);
}

fugue_sqlParser::FuguePrepartitionContext* fugue_sqlParser::FugueProcessTaskContext::fuguePrepartition() {
  return getRuleContext<fugue_sqlParser::FuguePrepartitionContext>(0);
}


size_t fugue_sqlParser::FugueProcessTaskContext::getRuleIndex() const {
  return fugue_sqlParser::RuleFugueProcessTask;
}


antlrcpp::Any fugue_sqlParser::FugueProcessTaskContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitFugueProcessTask(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::FugueProcessTaskContext* fugue_sqlParser::fugueProcessTask() {
  FugueProcessTaskContext *_localctx = _tracker.createInstance<FugueProcessTaskContext>(_ctx, getState());
  enterRule(_localctx, 12, fugue_sqlParser::RuleFugueProcessTask);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(487);
    match(fugue_sqlParser::PROCESS);
    setState(489);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 10, _ctx)) {
    case 1: {
      setState(488);
      antlrcpp::downCast<FugueProcessTaskContext *>(_localctx)->dfs = fugueDataFrames();
      break;
    }

    default:
      break;
    }
    setState(492);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << fugue_sqlParser::HASH)
      | (1ULL << fugue_sqlParser::RAND)
      | (1ULL << fugue_sqlParser::EVEN)
      | (1ULL << fugue_sqlParser::PREPARTITION))) != 0)) {
      setState(491);
      antlrcpp::downCast<FugueProcessTaskContext *>(_localctx)->partition = fuguePrepartition();
    }
    setState(494);
    antlrcpp::downCast<FugueProcessTaskContext *>(_localctx)->params = fugueSingleOutputExtensionCommon();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FugueSaveAndUseTaskContext ------------------------------------------------------------------

fugue_sqlParser::FugueSaveAndUseTaskContext::FugueSaveAndUseTaskContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* fugue_sqlParser::FugueSaveAndUseTaskContext::SAVE() {
  return getToken(fugue_sqlParser::SAVE, 0);
}

tree::TerminalNode* fugue_sqlParser::FugueSaveAndUseTaskContext::AND() {
  return getToken(fugue_sqlParser::AND, 0);
}

tree::TerminalNode* fugue_sqlParser::FugueSaveAndUseTaskContext::USE() {
  return getToken(fugue_sqlParser::USE, 0);
}

fugue_sqlParser::FugueSaveModeContext* fugue_sqlParser::FugueSaveAndUseTaskContext::fugueSaveMode() {
  return getRuleContext<fugue_sqlParser::FugueSaveModeContext>(0);
}

fugue_sqlParser::FuguePathContext* fugue_sqlParser::FugueSaveAndUseTaskContext::fuguePath() {
  return getRuleContext<fugue_sqlParser::FuguePathContext>(0);
}

fugue_sqlParser::FugueDataFrameContext* fugue_sqlParser::FugueSaveAndUseTaskContext::fugueDataFrame() {
  return getRuleContext<fugue_sqlParser::FugueDataFrameContext>(0);
}

fugue_sqlParser::FuguePrepartitionContext* fugue_sqlParser::FugueSaveAndUseTaskContext::fuguePrepartition() {
  return getRuleContext<fugue_sqlParser::FuguePrepartitionContext>(0);
}

fugue_sqlParser::FugueSingleFileContext* fugue_sqlParser::FugueSaveAndUseTaskContext::fugueSingleFile() {
  return getRuleContext<fugue_sqlParser::FugueSingleFileContext>(0);
}

fugue_sqlParser::FugueFileFormatContext* fugue_sqlParser::FugueSaveAndUseTaskContext::fugueFileFormat() {
  return getRuleContext<fugue_sqlParser::FugueFileFormatContext>(0);
}

fugue_sqlParser::FugueParamsContext* fugue_sqlParser::FugueSaveAndUseTaskContext::fugueParams() {
  return getRuleContext<fugue_sqlParser::FugueParamsContext>(0);
}


size_t fugue_sqlParser::FugueSaveAndUseTaskContext::getRuleIndex() const {
  return fugue_sqlParser::RuleFugueSaveAndUseTask;
}


antlrcpp::Any fugue_sqlParser::FugueSaveAndUseTaskContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitFugueSaveAndUseTask(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::FugueSaveAndUseTaskContext* fugue_sqlParser::fugueSaveAndUseTask() {
  FugueSaveAndUseTaskContext *_localctx = _tracker.createInstance<FugueSaveAndUseTaskContext>(_ctx, getState());
  enterRule(_localctx, 14, fugue_sqlParser::RuleFugueSaveAndUseTask);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(496);
    match(fugue_sqlParser::SAVE);
    setState(497);
    match(fugue_sqlParser::AND);
    setState(498);
    match(fugue_sqlParser::USE);
    setState(500);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 12, _ctx)) {
    case 1: {
      setState(499);
      antlrcpp::downCast<FugueSaveAndUseTaskContext *>(_localctx)->df = fugueDataFrame();
      break;
    }

    default:
      break;
    }
    setState(503);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << fugue_sqlParser::HASH)
      | (1ULL << fugue_sqlParser::RAND)
      | (1ULL << fugue_sqlParser::EVEN)
      | (1ULL << fugue_sqlParser::PREPARTITION))) != 0)) {
      setState(502);
      antlrcpp::downCast<FugueSaveAndUseTaskContext *>(_localctx)->partition = fuguePrepartition();
    }
    setState(505);
    antlrcpp::downCast<FugueSaveAndUseTaskContext *>(_localctx)->m = fugueSaveMode();
    setState(507);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == fugue_sqlParser::SINGLE) {
      setState(506);
      antlrcpp::downCast<FugueSaveAndUseTaskContext *>(_localctx)->single = fugueSingleFile();
    }
    setState(510);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << fugue_sqlParser::PARQUET)
      | (1ULL << fugue_sqlParser::CSV)
      | (1ULL << fugue_sqlParser::JSON))) != 0)) {
      setState(509);
      antlrcpp::downCast<FugueSaveAndUseTaskContext *>(_localctx)->fmt = fugueFileFormat();
    }
    setState(512);
    antlrcpp::downCast<FugueSaveAndUseTaskContext *>(_localctx)->path = fuguePath();
    setState(514);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 16, _ctx)) {
    case 1: {
      setState(513);
      antlrcpp::downCast<FugueSaveAndUseTaskContext *>(_localctx)->params = fugueParams();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FugueRenameColumnsTaskContext ------------------------------------------------------------------

fugue_sqlParser::FugueRenameColumnsTaskContext::FugueRenameColumnsTaskContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* fugue_sqlParser::FugueRenameColumnsTaskContext::RENAME() {
  return getToken(fugue_sqlParser::RENAME, 0);
}

tree::TerminalNode* fugue_sqlParser::FugueRenameColumnsTaskContext::COLUMNS() {
  return getToken(fugue_sqlParser::COLUMNS, 0);
}

fugue_sqlParser::FugueRenameExpressionContext* fugue_sqlParser::FugueRenameColumnsTaskContext::fugueRenameExpression() {
  return getRuleContext<fugue_sqlParser::FugueRenameExpressionContext>(0);
}

tree::TerminalNode* fugue_sqlParser::FugueRenameColumnsTaskContext::FROM() {
  return getToken(fugue_sqlParser::FROM, 0);
}

fugue_sqlParser::FugueDataFrameContext* fugue_sqlParser::FugueRenameColumnsTaskContext::fugueDataFrame() {
  return getRuleContext<fugue_sqlParser::FugueDataFrameContext>(0);
}


size_t fugue_sqlParser::FugueRenameColumnsTaskContext::getRuleIndex() const {
  return fugue_sqlParser::RuleFugueRenameColumnsTask;
}


antlrcpp::Any fugue_sqlParser::FugueRenameColumnsTaskContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitFugueRenameColumnsTask(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::FugueRenameColumnsTaskContext* fugue_sqlParser::fugueRenameColumnsTask() {
  FugueRenameColumnsTaskContext *_localctx = _tracker.createInstance<FugueRenameColumnsTaskContext>(_ctx, getState());
  enterRule(_localctx, 16, fugue_sqlParser::RuleFugueRenameColumnsTask);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(516);
    match(fugue_sqlParser::RENAME);
    setState(517);
    match(fugue_sqlParser::COLUMNS);
    setState(518);
    antlrcpp::downCast<FugueRenameColumnsTaskContext *>(_localctx)->cols = fugueRenameExpression();
    setState(521);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 17, _ctx)) {
    case 1: {
      setState(519);
      match(fugue_sqlParser::FROM);
      setState(520);
      antlrcpp::downCast<FugueRenameColumnsTaskContext *>(_localctx)->df = fugueDataFrame();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FugueAlterColumnsTaskContext ------------------------------------------------------------------

fugue_sqlParser::FugueAlterColumnsTaskContext::FugueAlterColumnsTaskContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* fugue_sqlParser::FugueAlterColumnsTaskContext::ALTER() {
  return getToken(fugue_sqlParser::ALTER, 0);
}

tree::TerminalNode* fugue_sqlParser::FugueAlterColumnsTaskContext::COLUMNS() {
  return getToken(fugue_sqlParser::COLUMNS, 0);
}

fugue_sqlParser::FugueSchemaContext* fugue_sqlParser::FugueAlterColumnsTaskContext::fugueSchema() {
  return getRuleContext<fugue_sqlParser::FugueSchemaContext>(0);
}

tree::TerminalNode* fugue_sqlParser::FugueAlterColumnsTaskContext::FROM() {
  return getToken(fugue_sqlParser::FROM, 0);
}

fugue_sqlParser::FugueDataFrameContext* fugue_sqlParser::FugueAlterColumnsTaskContext::fugueDataFrame() {
  return getRuleContext<fugue_sqlParser::FugueDataFrameContext>(0);
}


size_t fugue_sqlParser::FugueAlterColumnsTaskContext::getRuleIndex() const {
  return fugue_sqlParser::RuleFugueAlterColumnsTask;
}


antlrcpp::Any fugue_sqlParser::FugueAlterColumnsTaskContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitFugueAlterColumnsTask(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::FugueAlterColumnsTaskContext* fugue_sqlParser::fugueAlterColumnsTask() {
  FugueAlterColumnsTaskContext *_localctx = _tracker.createInstance<FugueAlterColumnsTaskContext>(_ctx, getState());
  enterRule(_localctx, 18, fugue_sqlParser::RuleFugueAlterColumnsTask);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(523);
    match(fugue_sqlParser::ALTER);
    setState(524);
    match(fugue_sqlParser::COLUMNS);
    setState(525);
    antlrcpp::downCast<FugueAlterColumnsTaskContext *>(_localctx)->cols = fugueSchema();
    setState(528);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 18, _ctx)) {
    case 1: {
      setState(526);
      match(fugue_sqlParser::FROM);
      setState(527);
      antlrcpp::downCast<FugueAlterColumnsTaskContext *>(_localctx)->df = fugueDataFrame();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FugueDropColumnsTaskContext ------------------------------------------------------------------

fugue_sqlParser::FugueDropColumnsTaskContext::FugueDropColumnsTaskContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* fugue_sqlParser::FugueDropColumnsTaskContext::DROP() {
  return getToken(fugue_sqlParser::DROP, 0);
}

tree::TerminalNode* fugue_sqlParser::FugueDropColumnsTaskContext::COLUMNS() {
  return getToken(fugue_sqlParser::COLUMNS, 0);
}

fugue_sqlParser::FugueColsContext* fugue_sqlParser::FugueDropColumnsTaskContext::fugueCols() {
  return getRuleContext<fugue_sqlParser::FugueColsContext>(0);
}

tree::TerminalNode* fugue_sqlParser::FugueDropColumnsTaskContext::IF() {
  return getToken(fugue_sqlParser::IF, 0);
}

tree::TerminalNode* fugue_sqlParser::FugueDropColumnsTaskContext::EXISTS() {
  return getToken(fugue_sqlParser::EXISTS, 0);
}

tree::TerminalNode* fugue_sqlParser::FugueDropColumnsTaskContext::FROM() {
  return getToken(fugue_sqlParser::FROM, 0);
}

fugue_sqlParser::FugueDataFrameContext* fugue_sqlParser::FugueDropColumnsTaskContext::fugueDataFrame() {
  return getRuleContext<fugue_sqlParser::FugueDataFrameContext>(0);
}


size_t fugue_sqlParser::FugueDropColumnsTaskContext::getRuleIndex() const {
  return fugue_sqlParser::RuleFugueDropColumnsTask;
}


antlrcpp::Any fugue_sqlParser::FugueDropColumnsTaskContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitFugueDropColumnsTask(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::FugueDropColumnsTaskContext* fugue_sqlParser::fugueDropColumnsTask() {
  FugueDropColumnsTaskContext *_localctx = _tracker.createInstance<FugueDropColumnsTaskContext>(_ctx, getState());
  enterRule(_localctx, 20, fugue_sqlParser::RuleFugueDropColumnsTask);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(530);
    match(fugue_sqlParser::DROP);
    setState(531);
    match(fugue_sqlParser::COLUMNS);
    setState(532);
    antlrcpp::downCast<FugueDropColumnsTaskContext *>(_localctx)->cols = fugueCols();
    setState(535);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 19, _ctx)) {
    case 1: {
      setState(533);
      match(fugue_sqlParser::IF);
      setState(534);
      match(fugue_sqlParser::EXISTS);
      break;
    }

    default:
      break;
    }
    setState(539);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 20, _ctx)) {
    case 1: {
      setState(537);
      match(fugue_sqlParser::FROM);
      setState(538);
      antlrcpp::downCast<FugueDropColumnsTaskContext *>(_localctx)->df = fugueDataFrame();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FugueDropnaTaskContext ------------------------------------------------------------------

fugue_sqlParser::FugueDropnaTaskContext::FugueDropnaTaskContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* fugue_sqlParser::FugueDropnaTaskContext::DROP() {
  return getToken(fugue_sqlParser::DROP, 0);
}

tree::TerminalNode* fugue_sqlParser::FugueDropnaTaskContext::ROWS() {
  return getToken(fugue_sqlParser::ROWS, 0);
}

tree::TerminalNode* fugue_sqlParser::FugueDropnaTaskContext::IF() {
  return getToken(fugue_sqlParser::IF, 0);
}

tree::TerminalNode* fugue_sqlParser::FugueDropnaTaskContext::THENULL() {
  return getToken(fugue_sqlParser::THENULL, 0);
}

tree::TerminalNode* fugue_sqlParser::FugueDropnaTaskContext::THENULLS() {
  return getToken(fugue_sqlParser::THENULLS, 0);
}

tree::TerminalNode* fugue_sqlParser::FugueDropnaTaskContext::ALL() {
  return getToken(fugue_sqlParser::ALL, 0);
}

tree::TerminalNode* fugue_sqlParser::FugueDropnaTaskContext::ANY() {
  return getToken(fugue_sqlParser::ANY, 0);
}

tree::TerminalNode* fugue_sqlParser::FugueDropnaTaskContext::ON() {
  return getToken(fugue_sqlParser::ON, 0);
}

tree::TerminalNode* fugue_sqlParser::FugueDropnaTaskContext::FROM() {
  return getToken(fugue_sqlParser::FROM, 0);
}

fugue_sqlParser::FugueColsContext* fugue_sqlParser::FugueDropnaTaskContext::fugueCols() {
  return getRuleContext<fugue_sqlParser::FugueColsContext>(0);
}

fugue_sqlParser::FugueDataFrameContext* fugue_sqlParser::FugueDropnaTaskContext::fugueDataFrame() {
  return getRuleContext<fugue_sqlParser::FugueDataFrameContext>(0);
}


size_t fugue_sqlParser::FugueDropnaTaskContext::getRuleIndex() const {
  return fugue_sqlParser::RuleFugueDropnaTask;
}


antlrcpp::Any fugue_sqlParser::FugueDropnaTaskContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitFugueDropnaTask(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::FugueDropnaTaskContext* fugue_sqlParser::fugueDropnaTask() {
  FugueDropnaTaskContext *_localctx = _tracker.createInstance<FugueDropnaTaskContext>(_ctx, getState());
  enterRule(_localctx, 22, fugue_sqlParser::RuleFugueDropnaTask);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(541);
    match(fugue_sqlParser::DROP);
    setState(542);
    match(fugue_sqlParser::ROWS);
    setState(543);
    match(fugue_sqlParser::IF);
    setState(544);
    antlrcpp::downCast<FugueDropnaTaskContext *>(_localctx)->how = _input->LT(1);
    _la = _input->LA(1);
    if (!(_la == fugue_sqlParser::ALL

    || _la == fugue_sqlParser::ANY)) {
      antlrcpp::downCast<FugueDropnaTaskContext *>(_localctx)->how = _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(545);
    _la = _input->LA(1);
    if (!(_la == fugue_sqlParser::THENULL

    || _la == fugue_sqlParser::THENULLS)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(548);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 21, _ctx)) {
    case 1: {
      setState(546);
      match(fugue_sqlParser::ON);
      setState(547);
      antlrcpp::downCast<FugueDropnaTaskContext *>(_localctx)->cols = fugueCols();
      break;
    }

    default:
      break;
    }
    setState(552);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 22, _ctx)) {
    case 1: {
      setState(550);
      match(fugue_sqlParser::FROM);
      setState(551);
      antlrcpp::downCast<FugueDropnaTaskContext *>(_localctx)->df = fugueDataFrame();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FugueFillnaTaskContext ------------------------------------------------------------------

fugue_sqlParser::FugueFillnaTaskContext::FugueFillnaTaskContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* fugue_sqlParser::FugueFillnaTaskContext::FILL() {
  return getToken(fugue_sqlParser::FILL, 0);
}

tree::TerminalNode* fugue_sqlParser::FugueFillnaTaskContext::THENULL() {
  return getToken(fugue_sqlParser::THENULL, 0);
}

tree::TerminalNode* fugue_sqlParser::FugueFillnaTaskContext::THENULLS() {
  return getToken(fugue_sqlParser::THENULLS, 0);
}

fugue_sqlParser::FugueParamsContext* fugue_sqlParser::FugueFillnaTaskContext::fugueParams() {
  return getRuleContext<fugue_sqlParser::FugueParamsContext>(0);
}

tree::TerminalNode* fugue_sqlParser::FugueFillnaTaskContext::FROM() {
  return getToken(fugue_sqlParser::FROM, 0);
}

fugue_sqlParser::FugueDataFrameContext* fugue_sqlParser::FugueFillnaTaskContext::fugueDataFrame() {
  return getRuleContext<fugue_sqlParser::FugueDataFrameContext>(0);
}


size_t fugue_sqlParser::FugueFillnaTaskContext::getRuleIndex() const {
  return fugue_sqlParser::RuleFugueFillnaTask;
}


antlrcpp::Any fugue_sqlParser::FugueFillnaTaskContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitFugueFillnaTask(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::FugueFillnaTaskContext* fugue_sqlParser::fugueFillnaTask() {
  FugueFillnaTaskContext *_localctx = _tracker.createInstance<FugueFillnaTaskContext>(_ctx, getState());
  enterRule(_localctx, 24, fugue_sqlParser::RuleFugueFillnaTask);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(554);
    match(fugue_sqlParser::FILL);
    setState(555);
    _la = _input->LA(1);
    if (!(_la == fugue_sqlParser::THENULL

    || _la == fugue_sqlParser::THENULLS)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(556);
    antlrcpp::downCast<FugueFillnaTaskContext *>(_localctx)->params = fugueParams();
    setState(559);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 23, _ctx)) {
    case 1: {
      setState(557);
      match(fugue_sqlParser::FROM);
      setState(558);
      antlrcpp::downCast<FugueFillnaTaskContext *>(_localctx)->df = fugueDataFrame();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FugueSampleTaskContext ------------------------------------------------------------------

fugue_sqlParser::FugueSampleTaskContext::FugueSampleTaskContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* fugue_sqlParser::FugueSampleTaskContext::SAMPLE() {
  return getToken(fugue_sqlParser::SAMPLE, 0);
}

fugue_sqlParser::FugueSampleMethodContext* fugue_sqlParser::FugueSampleTaskContext::fugueSampleMethod() {
  return getRuleContext<fugue_sqlParser::FugueSampleMethodContext>(0);
}

tree::TerminalNode* fugue_sqlParser::FugueSampleTaskContext::REPLACE() {
  return getToken(fugue_sqlParser::REPLACE, 0);
}

tree::TerminalNode* fugue_sqlParser::FugueSampleTaskContext::SEED() {
  return getToken(fugue_sqlParser::SEED, 0);
}

tree::TerminalNode* fugue_sqlParser::FugueSampleTaskContext::FROM() {
  return getToken(fugue_sqlParser::FROM, 0);
}

tree::TerminalNode* fugue_sqlParser::FugueSampleTaskContext::INTEGER_VALUE() {
  return getToken(fugue_sqlParser::INTEGER_VALUE, 0);
}

fugue_sqlParser::FugueDataFrameContext* fugue_sqlParser::FugueSampleTaskContext::fugueDataFrame() {
  return getRuleContext<fugue_sqlParser::FugueDataFrameContext>(0);
}


size_t fugue_sqlParser::FugueSampleTaskContext::getRuleIndex() const {
  return fugue_sqlParser::RuleFugueSampleTask;
}


antlrcpp::Any fugue_sqlParser::FugueSampleTaskContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitFugueSampleTask(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::FugueSampleTaskContext* fugue_sqlParser::fugueSampleTask() {
  FugueSampleTaskContext *_localctx = _tracker.createInstance<FugueSampleTaskContext>(_ctx, getState());
  enterRule(_localctx, 26, fugue_sqlParser::RuleFugueSampleTask);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(561);
    match(fugue_sqlParser::SAMPLE);
    setState(563);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == fugue_sqlParser::REPLACE) {
      setState(562);
      match(fugue_sqlParser::REPLACE);
    }
    setState(565);
    antlrcpp::downCast<FugueSampleTaskContext *>(_localctx)->method = fugueSampleMethod();
    setState(568);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 25, _ctx)) {
    case 1: {
      setState(566);
      match(fugue_sqlParser::SEED);
      setState(567);
      antlrcpp::downCast<FugueSampleTaskContext *>(_localctx)->seed = match(fugue_sqlParser::INTEGER_VALUE);
      break;
    }

    default:
      break;
    }
    setState(572);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 26, _ctx)) {
    case 1: {
      setState(570);
      match(fugue_sqlParser::FROM);
      setState(571);
      antlrcpp::downCast<FugueSampleTaskContext *>(_localctx)->df = fugueDataFrame();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FugueTakeTaskContext ------------------------------------------------------------------

fugue_sqlParser::FugueTakeTaskContext::FugueTakeTaskContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* fugue_sqlParser::FugueTakeTaskContext::TAKE() {
  return getToken(fugue_sqlParser::TAKE, 0);
}

tree::TerminalNode* fugue_sqlParser::FugueTakeTaskContext::FROM() {
  return getToken(fugue_sqlParser::FROM, 0);
}

tree::TerminalNode* fugue_sqlParser::FugueTakeTaskContext::INTEGER_VALUE() {
  return getToken(fugue_sqlParser::INTEGER_VALUE, 0);
}

tree::TerminalNode* fugue_sqlParser::FugueTakeTaskContext::ROW() {
  return getToken(fugue_sqlParser::ROW, 0);
}

tree::TerminalNode* fugue_sqlParser::FugueTakeTaskContext::ROWS() {
  return getToken(fugue_sqlParser::ROWS, 0);
}

fugue_sqlParser::FugueDataFrameContext* fugue_sqlParser::FugueTakeTaskContext::fugueDataFrame() {
  return getRuleContext<fugue_sqlParser::FugueDataFrameContext>(0);
}

tree::TerminalNode* fugue_sqlParser::FugueTakeTaskContext::THENULL() {
  return getToken(fugue_sqlParser::THENULL, 0);
}

tree::TerminalNode* fugue_sqlParser::FugueTakeTaskContext::THENULLS() {
  return getToken(fugue_sqlParser::THENULLS, 0);
}

tree::TerminalNode* fugue_sqlParser::FugueTakeTaskContext::PRESORT() {
  return getToken(fugue_sqlParser::PRESORT, 0);
}

tree::TerminalNode* fugue_sqlParser::FugueTakeTaskContext::FIRST() {
  return getToken(fugue_sqlParser::FIRST, 0);
}

tree::TerminalNode* fugue_sqlParser::FugueTakeTaskContext::LAST() {
  return getToken(fugue_sqlParser::LAST, 0);
}

fugue_sqlParser::FuguePrepartitionContext* fugue_sqlParser::FugueTakeTaskContext::fuguePrepartition() {
  return getRuleContext<fugue_sqlParser::FuguePrepartitionContext>(0);
}

fugue_sqlParser::FugueColsSortContext* fugue_sqlParser::FugueTakeTaskContext::fugueColsSort() {
  return getRuleContext<fugue_sqlParser::FugueColsSortContext>(0);
}


size_t fugue_sqlParser::FugueTakeTaskContext::getRuleIndex() const {
  return fugue_sqlParser::RuleFugueTakeTask;
}


antlrcpp::Any fugue_sqlParser::FugueTakeTaskContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitFugueTakeTask(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::FugueTakeTaskContext* fugue_sqlParser::fugueTakeTask() {
  FugueTakeTaskContext *_localctx = _tracker.createInstance<FugueTakeTaskContext>(_ctx, getState());
  enterRule(_localctx, 28, fugue_sqlParser::RuleFugueTakeTask);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(574);
    match(fugue_sqlParser::TAKE);
    setState(577);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 27, _ctx)) {
    case 1: {
      setState(575);
      antlrcpp::downCast<FugueTakeTaskContext *>(_localctx)->rows = match(fugue_sqlParser::INTEGER_VALUE);
      setState(576);
      _la = _input->LA(1);
      if (!(_la == fugue_sqlParser::ROW

      || _la == fugue_sqlParser::ROWS)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    default:
      break;
    }
    setState(581);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 28, _ctx)) {
    case 1: {
      setState(579);
      match(fugue_sqlParser::FROM);
      setState(580);
      antlrcpp::downCast<FugueTakeTaskContext *>(_localctx)->df = fugueDataFrame();
      break;
    }

    default:
      break;
    }
    setState(586);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 29, _ctx)) {
    case 1: {
      setState(583);
      antlrcpp::downCast<FugueTakeTaskContext *>(_localctx)->partition = fuguePrepartition();
      break;
    }

    case 2: {
      setState(584);
      match(fugue_sqlParser::PRESORT);
      setState(585);
      antlrcpp::downCast<FugueTakeTaskContext *>(_localctx)->presort = fugueColsSort();
      break;
    }

    default:
      break;
    }
    setState(590);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 30, _ctx)) {
    case 1: {
      setState(588);
      _la = _input->LA(1);
      if (!(_la == fugue_sqlParser::THENULL

      || _la == fugue_sqlParser::THENULLS)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(589);
      antlrcpp::downCast<FugueTakeTaskContext *>(_localctx)->na_position = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == fugue_sqlParser::FIRST

      || _la == fugue_sqlParser::LAST)) {
        antlrcpp::downCast<FugueTakeTaskContext *>(_localctx)->na_position = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FugueZipTaskContext ------------------------------------------------------------------

fugue_sqlParser::FugueZipTaskContext::FugueZipTaskContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* fugue_sqlParser::FugueZipTaskContext::ZIP() {
  return getToken(fugue_sqlParser::ZIP, 0);
}

fugue_sqlParser::FugueDataFramesContext* fugue_sqlParser::FugueZipTaskContext::fugueDataFrames() {
  return getRuleContext<fugue_sqlParser::FugueDataFramesContext>(0);
}

tree::TerminalNode* fugue_sqlParser::FugueZipTaskContext::BY() {
  return getToken(fugue_sqlParser::BY, 0);
}

tree::TerminalNode* fugue_sqlParser::FugueZipTaskContext::PRESORT() {
  return getToken(fugue_sqlParser::PRESORT, 0);
}

fugue_sqlParser::FugueZipTypeContext* fugue_sqlParser::FugueZipTaskContext::fugueZipType() {
  return getRuleContext<fugue_sqlParser::FugueZipTypeContext>(0);
}

fugue_sqlParser::FugueColsContext* fugue_sqlParser::FugueZipTaskContext::fugueCols() {
  return getRuleContext<fugue_sqlParser::FugueColsContext>(0);
}

fugue_sqlParser::FugueColsSortContext* fugue_sqlParser::FugueZipTaskContext::fugueColsSort() {
  return getRuleContext<fugue_sqlParser::FugueColsSortContext>(0);
}


size_t fugue_sqlParser::FugueZipTaskContext::getRuleIndex() const {
  return fugue_sqlParser::RuleFugueZipTask;
}


antlrcpp::Any fugue_sqlParser::FugueZipTaskContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitFugueZipTask(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::FugueZipTaskContext* fugue_sqlParser::fugueZipTask() {
  FugueZipTaskContext *_localctx = _tracker.createInstance<FugueZipTaskContext>(_ctx, getState());
  enterRule(_localctx, 30, fugue_sqlParser::RuleFugueZipTask);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(592);
    match(fugue_sqlParser::ZIP);
    setState(593);
    antlrcpp::downCast<FugueZipTaskContext *>(_localctx)->dfs = fugueDataFrames();
    setState(595);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 31, _ctx)) {
    case 1: {
      setState(594);
      antlrcpp::downCast<FugueZipTaskContext *>(_localctx)->how = fugueZipType();
      break;
    }

    default:
      break;
    }
    setState(599);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 32, _ctx)) {
    case 1: {
      setState(597);
      match(fugue_sqlParser::BY);
      setState(598);
      antlrcpp::downCast<FugueZipTaskContext *>(_localctx)->by = fugueCols();
      break;
    }

    default:
      break;
    }
    setState(603);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 33, _ctx)) {
    case 1: {
      setState(601);
      match(fugue_sqlParser::PRESORT);
      setState(602);
      antlrcpp::downCast<FugueZipTaskContext *>(_localctx)->presort = fugueColsSort();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FugueCreateTaskContext ------------------------------------------------------------------

fugue_sqlParser::FugueCreateTaskContext::FugueCreateTaskContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* fugue_sqlParser::FugueCreateTaskContext::CREATE() {
  return getToken(fugue_sqlParser::CREATE, 0);
}

fugue_sqlParser::FugueSingleOutputExtensionCommonContext* fugue_sqlParser::FugueCreateTaskContext::fugueSingleOutputExtensionCommon() {
  return getRuleContext<fugue_sqlParser::FugueSingleOutputExtensionCommonContext>(0);
}


size_t fugue_sqlParser::FugueCreateTaskContext::getRuleIndex() const {
  return fugue_sqlParser::RuleFugueCreateTask;
}


antlrcpp::Any fugue_sqlParser::FugueCreateTaskContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitFugueCreateTask(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::FugueCreateTaskContext* fugue_sqlParser::fugueCreateTask() {
  FugueCreateTaskContext *_localctx = _tracker.createInstance<FugueCreateTaskContext>(_ctx, getState());
  enterRule(_localctx, 32, fugue_sqlParser::RuleFugueCreateTask);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(605);
    match(fugue_sqlParser::CREATE);
    setState(606);
    antlrcpp::downCast<FugueCreateTaskContext *>(_localctx)->params = fugueSingleOutputExtensionCommon();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FugueCreateDataTaskContext ------------------------------------------------------------------

fugue_sqlParser::FugueCreateDataTaskContext::FugueCreateDataTaskContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* fugue_sqlParser::FugueCreateDataTaskContext::CREATE() {
  return getToken(fugue_sqlParser::CREATE, 0);
}

tree::TerminalNode* fugue_sqlParser::FugueCreateDataTaskContext::SCHEMA() {
  return getToken(fugue_sqlParser::SCHEMA, 0);
}

fugue_sqlParser::FugueJsonArrayContext* fugue_sqlParser::FugueCreateDataTaskContext::fugueJsonArray() {
  return getRuleContext<fugue_sqlParser::FugueJsonArrayContext>(0);
}

fugue_sqlParser::FugueSchemaContext* fugue_sqlParser::FugueCreateDataTaskContext::fugueSchema() {
  return getRuleContext<fugue_sqlParser::FugueSchemaContext>(0);
}

tree::TerminalNode* fugue_sqlParser::FugueCreateDataTaskContext::DATA() {
  return getToken(fugue_sqlParser::DATA, 0);
}


size_t fugue_sqlParser::FugueCreateDataTaskContext::getRuleIndex() const {
  return fugue_sqlParser::RuleFugueCreateDataTask;
}


antlrcpp::Any fugue_sqlParser::FugueCreateDataTaskContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitFugueCreateDataTask(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::FugueCreateDataTaskContext* fugue_sqlParser::fugueCreateDataTask() {
  FugueCreateDataTaskContext *_localctx = _tracker.createInstance<FugueCreateDataTaskContext>(_ctx, getState());
  enterRule(_localctx, 34, fugue_sqlParser::RuleFugueCreateDataTask);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(608);
    match(fugue_sqlParser::CREATE);
    setState(610);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == fugue_sqlParser::DATA) {
      setState(609);
      match(fugue_sqlParser::DATA);
    }
    setState(612);
    antlrcpp::downCast<FugueCreateDataTaskContext *>(_localctx)->data = fugueJsonArray();
    setState(613);
    match(fugue_sqlParser::SCHEMA);
    setState(614);
    antlrcpp::downCast<FugueCreateDataTaskContext *>(_localctx)->schema = fugueSchema();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FugueLoadTaskContext ------------------------------------------------------------------

fugue_sqlParser::FugueLoadTaskContext::FugueLoadTaskContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* fugue_sqlParser::FugueLoadTaskContext::LOAD() {
  return getToken(fugue_sqlParser::LOAD, 0);
}

fugue_sqlParser::FuguePathContext* fugue_sqlParser::FugueLoadTaskContext::fuguePath() {
  return getRuleContext<fugue_sqlParser::FuguePathContext>(0);
}

tree::TerminalNode* fugue_sqlParser::FugueLoadTaskContext::COLUMNS() {
  return getToken(fugue_sqlParser::COLUMNS, 0);
}

fugue_sqlParser::FugueFileFormatContext* fugue_sqlParser::FugueLoadTaskContext::fugueFileFormat() {
  return getRuleContext<fugue_sqlParser::FugueFileFormatContext>(0);
}

fugue_sqlParser::FugueParamsContext* fugue_sqlParser::FugueLoadTaskContext::fugueParams() {
  return getRuleContext<fugue_sqlParser::FugueParamsContext>(0);
}

fugue_sqlParser::FugueLoadColumnsContext* fugue_sqlParser::FugueLoadTaskContext::fugueLoadColumns() {
  return getRuleContext<fugue_sqlParser::FugueLoadColumnsContext>(0);
}


size_t fugue_sqlParser::FugueLoadTaskContext::getRuleIndex() const {
  return fugue_sqlParser::RuleFugueLoadTask;
}


antlrcpp::Any fugue_sqlParser::FugueLoadTaskContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitFugueLoadTask(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::FugueLoadTaskContext* fugue_sqlParser::fugueLoadTask() {
  FugueLoadTaskContext *_localctx = _tracker.createInstance<FugueLoadTaskContext>(_ctx, getState());
  enterRule(_localctx, 36, fugue_sqlParser::RuleFugueLoadTask);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(616);
    match(fugue_sqlParser::LOAD);
    setState(618);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << fugue_sqlParser::PARQUET)
      | (1ULL << fugue_sqlParser::CSV)
      | (1ULL << fugue_sqlParser::JSON))) != 0)) {
      setState(617);
      antlrcpp::downCast<FugueLoadTaskContext *>(_localctx)->fmt = fugueFileFormat();
    }
    setState(620);
    antlrcpp::downCast<FugueLoadTaskContext *>(_localctx)->path = fuguePath();
    setState(622);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 36, _ctx)) {
    case 1: {
      setState(621);
      antlrcpp::downCast<FugueLoadTaskContext *>(_localctx)->params = fugueParams();
      break;
    }

    default:
      break;
    }
    setState(626);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 37, _ctx)) {
    case 1: {
      setState(624);
      match(fugue_sqlParser::COLUMNS);
      setState(625);
      antlrcpp::downCast<FugueLoadTaskContext *>(_localctx)->columns = fugueLoadColumns();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FugueOutputTaskContext ------------------------------------------------------------------

fugue_sqlParser::FugueOutputTaskContext::FugueOutputTaskContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* fugue_sqlParser::FugueOutputTaskContext::OUTPUT() {
  return getToken(fugue_sqlParser::OUTPUT, 0);
}

tree::TerminalNode* fugue_sqlParser::FugueOutputTaskContext::USING() {
  return getToken(fugue_sqlParser::USING, 0);
}

fugue_sqlParser::FugueExtensionContext* fugue_sqlParser::FugueOutputTaskContext::fugueExtension() {
  return getRuleContext<fugue_sqlParser::FugueExtensionContext>(0);
}

fugue_sqlParser::FugueDataFramesContext* fugue_sqlParser::FugueOutputTaskContext::fugueDataFrames() {
  return getRuleContext<fugue_sqlParser::FugueDataFramesContext>(0);
}

fugue_sqlParser::FuguePrepartitionContext* fugue_sqlParser::FugueOutputTaskContext::fuguePrepartition() {
  return getRuleContext<fugue_sqlParser::FuguePrepartitionContext>(0);
}

fugue_sqlParser::FugueParamsContext* fugue_sqlParser::FugueOutputTaskContext::fugueParams() {
  return getRuleContext<fugue_sqlParser::FugueParamsContext>(0);
}


size_t fugue_sqlParser::FugueOutputTaskContext::getRuleIndex() const {
  return fugue_sqlParser::RuleFugueOutputTask;
}


antlrcpp::Any fugue_sqlParser::FugueOutputTaskContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitFugueOutputTask(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::FugueOutputTaskContext* fugue_sqlParser::fugueOutputTask() {
  FugueOutputTaskContext *_localctx = _tracker.createInstance<FugueOutputTaskContext>(_ctx, getState());
  enterRule(_localctx, 38, fugue_sqlParser::RuleFugueOutputTask);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(628);
    match(fugue_sqlParser::OUTPUT);
    setState(630);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 38, _ctx)) {
    case 1: {
      setState(629);
      antlrcpp::downCast<FugueOutputTaskContext *>(_localctx)->dfs = fugueDataFrames();
      break;
    }

    default:
      break;
    }
    setState(633);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << fugue_sqlParser::HASH)
      | (1ULL << fugue_sqlParser::RAND)
      | (1ULL << fugue_sqlParser::EVEN)
      | (1ULL << fugue_sqlParser::PREPARTITION))) != 0)) {
      setState(632);
      antlrcpp::downCast<FugueOutputTaskContext *>(_localctx)->partition = fuguePrepartition();
    }
    setState(635);
    match(fugue_sqlParser::USING);
    setState(636);
    antlrcpp::downCast<FugueOutputTaskContext *>(_localctx)->fugueUsing = fugueExtension();
    setState(638);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << fugue_sqlParser::T__2)
      | (1ULL << fugue_sqlParser::T__7)
      | (1ULL << fugue_sqlParser::PARAMS))) != 0)) {
      setState(637);
      antlrcpp::downCast<FugueOutputTaskContext *>(_localctx)->params = fugueParams();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FuguePrintTaskContext ------------------------------------------------------------------

fugue_sqlParser::FuguePrintTaskContext::FuguePrintTaskContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* fugue_sqlParser::FuguePrintTaskContext::PRINT() {
  return getToken(fugue_sqlParser::PRINT, 0);
}

tree::TerminalNode* fugue_sqlParser::FuguePrintTaskContext::INTEGER_VALUE() {
  return getToken(fugue_sqlParser::INTEGER_VALUE, 0);
}

tree::TerminalNode* fugue_sqlParser::FuguePrintTaskContext::ROW() {
  return getToken(fugue_sqlParser::ROW, 0);
}

tree::TerminalNode* fugue_sqlParser::FuguePrintTaskContext::ROWS() {
  return getToken(fugue_sqlParser::ROWS, 0);
}

tree::TerminalNode* fugue_sqlParser::FuguePrintTaskContext::FROM() {
  return getToken(fugue_sqlParser::FROM, 0);
}

tree::TerminalNode* fugue_sqlParser::FuguePrintTaskContext::TITLE() {
  return getToken(fugue_sqlParser::TITLE, 0);
}

fugue_sqlParser::FugueDataFramesContext* fugue_sqlParser::FuguePrintTaskContext::fugueDataFrames() {
  return getRuleContext<fugue_sqlParser::FugueDataFramesContext>(0);
}

tree::TerminalNode* fugue_sqlParser::FuguePrintTaskContext::ROWCOUNT() {
  return getToken(fugue_sqlParser::ROWCOUNT, 0);
}

tree::TerminalNode* fugue_sqlParser::FuguePrintTaskContext::STRING() {
  return getToken(fugue_sqlParser::STRING, 0);
}


size_t fugue_sqlParser::FuguePrintTaskContext::getRuleIndex() const {
  return fugue_sqlParser::RuleFuguePrintTask;
}


antlrcpp::Any fugue_sqlParser::FuguePrintTaskContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitFuguePrintTask(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::FuguePrintTaskContext* fugue_sqlParser::fuguePrintTask() {
  FuguePrintTaskContext *_localctx = _tracker.createInstance<FuguePrintTaskContext>(_ctx, getState());
  enterRule(_localctx, 40, fugue_sqlParser::RuleFuguePrintTask);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(665);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 47, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(640);
      match(fugue_sqlParser::PRINT);
      setState(641);
      antlrcpp::downCast<FuguePrintTaskContext *>(_localctx)->rows = match(fugue_sqlParser::INTEGER_VALUE);
      setState(642);
      _la = _input->LA(1);
      if (!(_la == fugue_sqlParser::ROW

      || _la == fugue_sqlParser::ROWS)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(645);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 41, _ctx)) {
      case 1: {
        setState(643);
        match(fugue_sqlParser::FROM);
        setState(644);
        antlrcpp::downCast<FuguePrintTaskContext *>(_localctx)->dfs = fugueDataFrames();
        break;
      }

      default:
        break;
      }
      setState(648);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::ROWCOUNT) {
        setState(647);
        antlrcpp::downCast<FuguePrintTaskContext *>(_localctx)->count = match(fugue_sqlParser::ROWCOUNT);
      }
      setState(652);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::TITLE) {
        setState(650);
        match(fugue_sqlParser::TITLE);
        setState(651);
        antlrcpp::downCast<FuguePrintTaskContext *>(_localctx)->title = match(fugue_sqlParser::STRING);
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(654);
      match(fugue_sqlParser::PRINT);
      setState(656);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 44, _ctx)) {
      case 1: {
        setState(655);
        antlrcpp::downCast<FuguePrintTaskContext *>(_localctx)->dfs = fugueDataFrames();
        break;
      }

      default:
        break;
      }
      setState(659);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::ROWCOUNT) {
        setState(658);
        antlrcpp::downCast<FuguePrintTaskContext *>(_localctx)->count = match(fugue_sqlParser::ROWCOUNT);
      }
      setState(663);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::TITLE) {
        setState(661);
        match(fugue_sqlParser::TITLE);
        setState(662);
        antlrcpp::downCast<FuguePrintTaskContext *>(_localctx)->title = match(fugue_sqlParser::STRING);
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FugueSaveTaskContext ------------------------------------------------------------------

fugue_sqlParser::FugueSaveTaskContext::FugueSaveTaskContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* fugue_sqlParser::FugueSaveTaskContext::SAVE() {
  return getToken(fugue_sqlParser::SAVE, 0);
}

fugue_sqlParser::FugueSaveModeContext* fugue_sqlParser::FugueSaveTaskContext::fugueSaveMode() {
  return getRuleContext<fugue_sqlParser::FugueSaveModeContext>(0);
}

fugue_sqlParser::FuguePathContext* fugue_sqlParser::FugueSaveTaskContext::fuguePath() {
  return getRuleContext<fugue_sqlParser::FuguePathContext>(0);
}

fugue_sqlParser::FugueDataFrameContext* fugue_sqlParser::FugueSaveTaskContext::fugueDataFrame() {
  return getRuleContext<fugue_sqlParser::FugueDataFrameContext>(0);
}

fugue_sqlParser::FuguePrepartitionContext* fugue_sqlParser::FugueSaveTaskContext::fuguePrepartition() {
  return getRuleContext<fugue_sqlParser::FuguePrepartitionContext>(0);
}

fugue_sqlParser::FugueSingleFileContext* fugue_sqlParser::FugueSaveTaskContext::fugueSingleFile() {
  return getRuleContext<fugue_sqlParser::FugueSingleFileContext>(0);
}

fugue_sqlParser::FugueFileFormatContext* fugue_sqlParser::FugueSaveTaskContext::fugueFileFormat() {
  return getRuleContext<fugue_sqlParser::FugueFileFormatContext>(0);
}

fugue_sqlParser::FugueParamsContext* fugue_sqlParser::FugueSaveTaskContext::fugueParams() {
  return getRuleContext<fugue_sqlParser::FugueParamsContext>(0);
}


size_t fugue_sqlParser::FugueSaveTaskContext::getRuleIndex() const {
  return fugue_sqlParser::RuleFugueSaveTask;
}


antlrcpp::Any fugue_sqlParser::FugueSaveTaskContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitFugueSaveTask(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::FugueSaveTaskContext* fugue_sqlParser::fugueSaveTask() {
  FugueSaveTaskContext *_localctx = _tracker.createInstance<FugueSaveTaskContext>(_ctx, getState());
  enterRule(_localctx, 42, fugue_sqlParser::RuleFugueSaveTask);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(667);
    match(fugue_sqlParser::SAVE);
    setState(669);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 48, _ctx)) {
    case 1: {
      setState(668);
      antlrcpp::downCast<FugueSaveTaskContext *>(_localctx)->df = fugueDataFrame();
      break;
    }

    default:
      break;
    }
    setState(672);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << fugue_sqlParser::HASH)
      | (1ULL << fugue_sqlParser::RAND)
      | (1ULL << fugue_sqlParser::EVEN)
      | (1ULL << fugue_sqlParser::PREPARTITION))) != 0)) {
      setState(671);
      antlrcpp::downCast<FugueSaveTaskContext *>(_localctx)->partition = fuguePrepartition();
    }
    setState(674);
    antlrcpp::downCast<FugueSaveTaskContext *>(_localctx)->m = fugueSaveMode();
    setState(676);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == fugue_sqlParser::SINGLE) {
      setState(675);
      antlrcpp::downCast<FugueSaveTaskContext *>(_localctx)->single = fugueSingleFile();
    }
    setState(679);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << fugue_sqlParser::PARQUET)
      | (1ULL << fugue_sqlParser::CSV)
      | (1ULL << fugue_sqlParser::JSON))) != 0)) {
      setState(678);
      antlrcpp::downCast<FugueSaveTaskContext *>(_localctx)->fmt = fugueFileFormat();
    }
    setState(681);
    antlrcpp::downCast<FugueSaveTaskContext *>(_localctx)->path = fuguePath();
    setState(683);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << fugue_sqlParser::T__2)
      | (1ULL << fugue_sqlParser::T__7)
      | (1ULL << fugue_sqlParser::PARAMS))) != 0)) {
      setState(682);
      antlrcpp::downCast<FugueSaveTaskContext *>(_localctx)->params = fugueParams();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FugueOutputTransformTaskContext ------------------------------------------------------------------

fugue_sqlParser::FugueOutputTransformTaskContext::FugueOutputTransformTaskContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* fugue_sqlParser::FugueOutputTransformTaskContext::OUTTRANSFORM() {
  return getToken(fugue_sqlParser::OUTTRANSFORM, 0);
}

tree::TerminalNode* fugue_sqlParser::FugueOutputTransformTaskContext::USING() {
  return getToken(fugue_sqlParser::USING, 0);
}

std::vector<fugue_sqlParser::FugueExtensionContext *> fugue_sqlParser::FugueOutputTransformTaskContext::fugueExtension() {
  return getRuleContexts<fugue_sqlParser::FugueExtensionContext>();
}

fugue_sqlParser::FugueExtensionContext* fugue_sqlParser::FugueOutputTransformTaskContext::fugueExtension(size_t i) {
  return getRuleContext<fugue_sqlParser::FugueExtensionContext>(i);
}

tree::TerminalNode* fugue_sqlParser::FugueOutputTransformTaskContext::CALLBACK() {
  return getToken(fugue_sqlParser::CALLBACK, 0);
}

fugue_sqlParser::FugueDataFramesContext* fugue_sqlParser::FugueOutputTransformTaskContext::fugueDataFrames() {
  return getRuleContext<fugue_sqlParser::FugueDataFramesContext>(0);
}

fugue_sqlParser::FuguePrepartitionContext* fugue_sqlParser::FugueOutputTransformTaskContext::fuguePrepartition() {
  return getRuleContext<fugue_sqlParser::FuguePrepartitionContext>(0);
}

fugue_sqlParser::FugueParamsContext* fugue_sqlParser::FugueOutputTransformTaskContext::fugueParams() {
  return getRuleContext<fugue_sqlParser::FugueParamsContext>(0);
}


size_t fugue_sqlParser::FugueOutputTransformTaskContext::getRuleIndex() const {
  return fugue_sqlParser::RuleFugueOutputTransformTask;
}


antlrcpp::Any fugue_sqlParser::FugueOutputTransformTaskContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitFugueOutputTransformTask(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::FugueOutputTransformTaskContext* fugue_sqlParser::fugueOutputTransformTask() {
  FugueOutputTransformTaskContext *_localctx = _tracker.createInstance<FugueOutputTransformTaskContext>(_ctx, getState());
  enterRule(_localctx, 44, fugue_sqlParser::RuleFugueOutputTransformTask);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(685);
    match(fugue_sqlParser::OUTTRANSFORM);
    setState(687);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 53, _ctx)) {
    case 1: {
      setState(686);
      antlrcpp::downCast<FugueOutputTransformTaskContext *>(_localctx)->dfs = fugueDataFrames();
      break;
    }

    default:
      break;
    }
    setState(690);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << fugue_sqlParser::HASH)
      | (1ULL << fugue_sqlParser::RAND)
      | (1ULL << fugue_sqlParser::EVEN)
      | (1ULL << fugue_sqlParser::PREPARTITION))) != 0)) {
      setState(689);
      antlrcpp::downCast<FugueOutputTransformTaskContext *>(_localctx)->partition = fuguePrepartition();
    }
    setState(692);
    match(fugue_sqlParser::USING);
    setState(693);
    antlrcpp::downCast<FugueOutputTransformTaskContext *>(_localctx)->fugueUsing = fugueExtension();
    setState(695);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << fugue_sqlParser::T__2)
      | (1ULL << fugue_sqlParser::T__7)
      | (1ULL << fugue_sqlParser::PARAMS))) != 0)) {
      setState(694);
      antlrcpp::downCast<FugueOutputTransformTaskContext *>(_localctx)->params = fugueParams();
    }
    setState(699);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == fugue_sqlParser::CALLBACK) {
      setState(697);
      match(fugue_sqlParser::CALLBACK);
      setState(698);
      antlrcpp::downCast<FugueOutputTransformTaskContext *>(_localctx)->callback = fugueExtension();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FugueModuleTaskContext ------------------------------------------------------------------

fugue_sqlParser::FugueModuleTaskContext::FugueModuleTaskContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* fugue_sqlParser::FugueModuleTaskContext::SUB() {
  return getToken(fugue_sqlParser::SUB, 0);
}

tree::TerminalNode* fugue_sqlParser::FugueModuleTaskContext::USING() {
  return getToken(fugue_sqlParser::USING, 0);
}

fugue_sqlParser::FugueExtensionContext* fugue_sqlParser::FugueModuleTaskContext::fugueExtension() {
  return getRuleContext<fugue_sqlParser::FugueExtensionContext>(0);
}

fugue_sqlParser::FugueAssignmentContext* fugue_sqlParser::FugueModuleTaskContext::fugueAssignment() {
  return getRuleContext<fugue_sqlParser::FugueAssignmentContext>(0);
}

fugue_sqlParser::FugueDataFramesContext* fugue_sqlParser::FugueModuleTaskContext::fugueDataFrames() {
  return getRuleContext<fugue_sqlParser::FugueDataFramesContext>(0);
}

fugue_sqlParser::FugueParamsContext* fugue_sqlParser::FugueModuleTaskContext::fugueParams() {
  return getRuleContext<fugue_sqlParser::FugueParamsContext>(0);
}


size_t fugue_sqlParser::FugueModuleTaskContext::getRuleIndex() const {
  return fugue_sqlParser::RuleFugueModuleTask;
}


antlrcpp::Any fugue_sqlParser::FugueModuleTaskContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitFugueModuleTask(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::FugueModuleTaskContext* fugue_sqlParser::fugueModuleTask() {
  FugueModuleTaskContext *_localctx = _tracker.createInstance<FugueModuleTaskContext>(_ctx, getState());
  enterRule(_localctx, 46, fugue_sqlParser::RuleFugueModuleTask);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(702);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 53) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 53)) & ((1ULL << (fugue_sqlParser::ADD - 53))
      | (1ULL << (fugue_sqlParser::AFTER - 53))
      | (1ULL << (fugue_sqlParser::ALL - 53))
      | (1ULL << (fugue_sqlParser::ALTER - 53))
      | (1ULL << (fugue_sqlParser::ANALYZE - 53))
      | (1ULL << (fugue_sqlParser::AND - 53))
      | (1ULL << (fugue_sqlParser::ANTI - 53))
      | (1ULL << (fugue_sqlParser::ANY - 53))
      | (1ULL << (fugue_sqlParser::ARCHIVE - 53))
      | (1ULL << (fugue_sqlParser::ARRAY - 53))
      | (1ULL << (fugue_sqlParser::AS - 53))
      | (1ULL << (fugue_sqlParser::ASC - 53))
      | (1ULL << (fugue_sqlParser::AT - 53))
      | (1ULL << (fugue_sqlParser::AUTHORIZATION - 53))
      | (1ULL << (fugue_sqlParser::BETWEEN - 53))
      | (1ULL << (fugue_sqlParser::BOTH - 53))
      | (1ULL << (fugue_sqlParser::BUCKET - 53))
      | (1ULL << (fugue_sqlParser::BUCKETS - 53))
      | (1ULL << (fugue_sqlParser::BY - 53))
      | (1ULL << (fugue_sqlParser::CACHE - 53))
      | (1ULL << (fugue_sqlParser::CASCADE - 53))
      | (1ULL << (fugue_sqlParser::CASE - 53))
      | (1ULL << (fugue_sqlParser::CAST - 53))
      | (1ULL << (fugue_sqlParser::CHANGE - 53))
      | (1ULL << (fugue_sqlParser::CHECK - 53))
      | (1ULL << (fugue_sqlParser::CLEAR - 53))
      | (1ULL << (fugue_sqlParser::CLUSTER - 53))
      | (1ULL << (fugue_sqlParser::CLUSTERED - 53))
      | (1ULL << (fugue_sqlParser::CODEGEN - 53))
      | (1ULL << (fugue_sqlParser::COLLATE - 53))
      | (1ULL << (fugue_sqlParser::COLLECTION - 53))
      | (1ULL << (fugue_sqlParser::COLUMN - 53))
      | (1ULL << (fugue_sqlParser::COLUMNS - 53))
      | (1ULL << (fugue_sqlParser::COMMENT - 53))
      | (1ULL << (fugue_sqlParser::COMMIT - 53))
      | (1ULL << (fugue_sqlParser::COMPACT - 53))
      | (1ULL << (fugue_sqlParser::COMPACTIONS - 53))
      | (1ULL << (fugue_sqlParser::COMPUTE - 53))
      | (1ULL << (fugue_sqlParser::CONCATENATE - 53))
      | (1ULL << (fugue_sqlParser::CONSTRAINT - 53))
      | (1ULL << (fugue_sqlParser::COST - 53))
      | (1ULL << (fugue_sqlParser::CREATE - 53))
      | (1ULL << (fugue_sqlParser::CROSS - 53))
      | (1ULL << (fugue_sqlParser::CUBE - 53))
      | (1ULL << (fugue_sqlParser::CURRENT - 53))
      | (1ULL << (fugue_sqlParser::CURRENT_DATE - 53))
      | (1ULL << (fugue_sqlParser::CURRENT_TIME - 53))
      | (1ULL << (fugue_sqlParser::CURRENT_TIMESTAMP - 53))
      | (1ULL << (fugue_sqlParser::CURRENT_USER - 53))
      | (1ULL << (fugue_sqlParser::DATA - 53))
      | (1ULL << (fugue_sqlParser::DATABASE - 53))
      | (1ULL << (fugue_sqlParser::DATABASES - 53))
      | (1ULL << (fugue_sqlParser::DAY - 53))
      | (1ULL << (fugue_sqlParser::DBPROPERTIES - 53))
      | (1ULL << (fugue_sqlParser::DEFINED - 53))
      | (1ULL << (fugue_sqlParser::DELETE - 53))
      | (1ULL << (fugue_sqlParser::DELIMITED - 53))
      | (1ULL << (fugue_sqlParser::DESC - 53))
      | (1ULL << (fugue_sqlParser::DESCRIBE - 53))
      | (1ULL << (fugue_sqlParser::DFS - 53))
      | (1ULL << (fugue_sqlParser::DIRECTORIES - 53))
      | (1ULL << (fugue_sqlParser::DIRECTORY - 53))
      | (1ULL << (fugue_sqlParser::DISTINCT - 53))
      | (1ULL << (fugue_sqlParser::DISTRIBUTE - 53)))) != 0) || ((((_la - 117) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 117)) & ((1ULL << (fugue_sqlParser::DROP - 117))
      | (1ULL << (fugue_sqlParser::ELSE - 117))
      | (1ULL << (fugue_sqlParser::END - 117))
      | (1ULL << (fugue_sqlParser::ESCAPE - 117))
      | (1ULL << (fugue_sqlParser::ESCAPED - 117))
      | (1ULL << (fugue_sqlParser::EXCEPT - 117))
      | (1ULL << (fugue_sqlParser::EXCHANGE - 117))
      | (1ULL << (fugue_sqlParser::EXISTS - 117))
      | (1ULL << (fugue_sqlParser::EXPLAIN - 117))
      | (1ULL << (fugue_sqlParser::EXPORT - 117))
      | (1ULL << (fugue_sqlParser::EXTENDED - 117))
      | (1ULL << (fugue_sqlParser::EXTERNAL - 117))
      | (1ULL << (fugue_sqlParser::EXTRACT - 117))
      | (1ULL << (fugue_sqlParser::FALSE - 117))
      | (1ULL << (fugue_sqlParser::FETCH - 117))
      | (1ULL << (fugue_sqlParser::FIELDS - 117))
      | (1ULL << (fugue_sqlParser::FILTER - 117))
      | (1ULL << (fugue_sqlParser::FILEFORMAT - 117))
      | (1ULL << (fugue_sqlParser::FIRST - 117))
      | (1ULL << (fugue_sqlParser::FOLLOWING - 117))
      | (1ULL << (fugue_sqlParser::FOR - 117))
      | (1ULL << (fugue_sqlParser::FOREIGN - 117))
      | (1ULL << (fugue_sqlParser::FORMAT - 117))
      | (1ULL << (fugue_sqlParser::FORMATTED - 117))
      | (1ULL << (fugue_sqlParser::FROM - 117))
      | (1ULL << (fugue_sqlParser::FULL - 117))
      | (1ULL << (fugue_sqlParser::FUNCTION - 117))
      | (1ULL << (fugue_sqlParser::FUNCTIONS - 117))
      | (1ULL << (fugue_sqlParser::GLOBAL - 117))
      | (1ULL << (fugue_sqlParser::GRANT - 117))
      | (1ULL << (fugue_sqlParser::GROUP - 117))
      | (1ULL << (fugue_sqlParser::GROUPING - 117))
      | (1ULL << (fugue_sqlParser::HAVING - 117))
      | (1ULL << (fugue_sqlParser::HOUR - 117))
      | (1ULL << (fugue_sqlParser::IF - 117))
      | (1ULL << (fugue_sqlParser::IGNORE - 117))
      | (1ULL << (fugue_sqlParser::IMPORT - 117))
      | (1ULL << (fugue_sqlParser::IN - 117))
      | (1ULL << (fugue_sqlParser::INDEX - 117))
      | (1ULL << (fugue_sqlParser::INDEXES - 117))
      | (1ULL << (fugue_sqlParser::INNER - 117))
      | (1ULL << (fugue_sqlParser::INPATH - 117))
      | (1ULL << (fugue_sqlParser::INPUTFORMAT - 117))
      | (1ULL << (fugue_sqlParser::INSERT - 117))
      | (1ULL << (fugue_sqlParser::INTERSECT - 117))
      | (1ULL << (fugue_sqlParser::INTERVAL - 117))
      | (1ULL << (fugue_sqlParser::INTO - 117))
      | (1ULL << (fugue_sqlParser::IS - 117))
      | (1ULL << (fugue_sqlParser::ITEMS - 117))
      | (1ULL << (fugue_sqlParser::JOIN - 117))
      | (1ULL << (fugue_sqlParser::KEYS - 117))
      | (1ULL << (fugue_sqlParser::LAST - 117))
      | (1ULL << (fugue_sqlParser::LATERAL - 117))
      | (1ULL << (fugue_sqlParser::LAZY - 117))
      | (1ULL << (fugue_sqlParser::LEADING - 117))
      | (1ULL << (fugue_sqlParser::LEFT - 117))
      | (1ULL << (fugue_sqlParser::LIKE - 117))
      | (1ULL << (fugue_sqlParser::LIMIT - 117))
      | (1ULL << (fugue_sqlParser::LINES - 117))
      | (1ULL << (fugue_sqlParser::LIST - 117))
      | (1ULL << (fugue_sqlParser::LOAD - 117))
      | (1ULL << (fugue_sqlParser::LOCAL - 117))
      | (1ULL << (fugue_sqlParser::LOCATION - 117))
      | (1ULL << (fugue_sqlParser::LOCK - 117)))) != 0) || ((((_la - 181) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 181)) & ((1ULL << (fugue_sqlParser::LOCKS - 181))
      | (1ULL << (fugue_sqlParser::LOGICAL - 181))
      | (1ULL << (fugue_sqlParser::MACRO - 181))
      | (1ULL << (fugue_sqlParser::MAP - 181))
      | (1ULL << (fugue_sqlParser::MATCHED - 181))
      | (1ULL << (fugue_sqlParser::MERGE - 181))
      | (1ULL << (fugue_sqlParser::MINUTE - 181))
      | (1ULL << (fugue_sqlParser::MONTH - 181))
      | (1ULL << (fugue_sqlParser::MSCK - 181))
      | (1ULL << (fugue_sqlParser::NAMESPACE - 181))
      | (1ULL << (fugue_sqlParser::NAMESPACES - 181))
      | (1ULL << (fugue_sqlParser::NATURAL - 181))
      | (1ULL << (fugue_sqlParser::NO - 181))
      | (1ULL << (fugue_sqlParser::NOT - 181))
      | (1ULL << (fugue_sqlParser::THENULL - 181))
      | (1ULL << (fugue_sqlParser::THENULLS - 181))
      | (1ULL << (fugue_sqlParser::OF - 181))
      | (1ULL << (fugue_sqlParser::ON - 181))
      | (1ULL << (fugue_sqlParser::ONLY - 181))
      | (1ULL << (fugue_sqlParser::OPTION - 181))
      | (1ULL << (fugue_sqlParser::OPTIONS - 181))
      | (1ULL << (fugue_sqlParser::OR - 181))
      | (1ULL << (fugue_sqlParser::ORDER - 181))
      | (1ULL << (fugue_sqlParser::OUT - 181))
      | (1ULL << (fugue_sqlParser::OUTER - 181))
      | (1ULL << (fugue_sqlParser::OUTPUTFORMAT - 181))
      | (1ULL << (fugue_sqlParser::OVER - 181))
      | (1ULL << (fugue_sqlParser::OVERLAPS - 181))
      | (1ULL << (fugue_sqlParser::OVERLAY - 181))
      | (1ULL << (fugue_sqlParser::OVERWRITE - 181))
      | (1ULL << (fugue_sqlParser::PARTITION - 181))
      | (1ULL << (fugue_sqlParser::PARTITIONED - 181))
      | (1ULL << (fugue_sqlParser::PARTITIONS - 181))
      | (1ULL << (fugue_sqlParser::PERCENTLIT - 181))
      | (1ULL << (fugue_sqlParser::PIVOT - 181))
      | (1ULL << (fugue_sqlParser::PLACING - 181))
      | (1ULL << (fugue_sqlParser::POSITION - 181))
      | (1ULL << (fugue_sqlParser::PRECEDING - 181))
      | (1ULL << (fugue_sqlParser::PRIMARY - 181))
      | (1ULL << (fugue_sqlParser::PRINCIPALS - 181))
      | (1ULL << (fugue_sqlParser::PROPERTIES - 181))
      | (1ULL << (fugue_sqlParser::PURGE - 181))
      | (1ULL << (fugue_sqlParser::QUERY - 181))
      | (1ULL << (fugue_sqlParser::RANGE - 181))
      | (1ULL << (fugue_sqlParser::RECORDREADER - 181))
      | (1ULL << (fugue_sqlParser::RECORDWRITER - 181))
      | (1ULL << (fugue_sqlParser::RECOVER - 181))
      | (1ULL << (fugue_sqlParser::REDUCE - 181))
      | (1ULL << (fugue_sqlParser::REFERENCES - 181))
      | (1ULL << (fugue_sqlParser::REFRESH - 181))
      | (1ULL << (fugue_sqlParser::RENAME - 181))
      | (1ULL << (fugue_sqlParser::REPAIR - 181))
      | (1ULL << (fugue_sqlParser::REPLACE - 181))
      | (1ULL << (fugue_sqlParser::RESET - 181))
      | (1ULL << (fugue_sqlParser::RESTRICT - 181))
      | (1ULL << (fugue_sqlParser::REVOKE - 181))
      | (1ULL << (fugue_sqlParser::RIGHT - 181))
      | (1ULL << (fugue_sqlParser::RLIKE - 181))
      | (1ULL << (fugue_sqlParser::ROLE - 181))
      | (1ULL << (fugue_sqlParser::ROLES - 181))
      | (1ULL << (fugue_sqlParser::ROLLBACK - 181))
      | (1ULL << (fugue_sqlParser::ROLLUP - 181))
      | (1ULL << (fugue_sqlParser::ROW - 181))
      | (1ULL << (fugue_sqlParser::ROWS - 181)))) != 0) || ((((_la - 245) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 245)) & ((1ULL << (fugue_sqlParser::SCHEMA - 245))
      | (1ULL << (fugue_sqlParser::SECOND - 245))
      | (1ULL << (fugue_sqlParser::SELECT - 245))
      | (1ULL << (fugue_sqlParser::SEMI - 245))
      | (1ULL << (fugue_sqlParser::SEPARATED - 245))
      | (1ULL << (fugue_sqlParser::SERDE - 245))
      | (1ULL << (fugue_sqlParser::SERDEPROPERTIES - 245))
      | (1ULL << (fugue_sqlParser::SESSION_USER - 245))
      | (1ULL << (fugue_sqlParser::SET - 245))
      | (1ULL << (fugue_sqlParser::SETMINUS - 245))
      | (1ULL << (fugue_sqlParser::SETS - 245))
      | (1ULL << (fugue_sqlParser::SHOW - 245))
      | (1ULL << (fugue_sqlParser::SKEWED - 245))
      | (1ULL << (fugue_sqlParser::SOME - 245))
      | (1ULL << (fugue_sqlParser::SORT - 245))
      | (1ULL << (fugue_sqlParser::SORTED - 245))
      | (1ULL << (fugue_sqlParser::START - 245))
      | (1ULL << (fugue_sqlParser::STATISTICS - 245))
      | (1ULL << (fugue_sqlParser::STORED - 245))
      | (1ULL << (fugue_sqlParser::STRATIFY - 245))
      | (1ULL << (fugue_sqlParser::STRUCT - 245))
      | (1ULL << (fugue_sqlParser::SUBSTR - 245))
      | (1ULL << (fugue_sqlParser::SUBSTRING - 245))
      | (1ULL << (fugue_sqlParser::TABLE - 245))
      | (1ULL << (fugue_sqlParser::TABLES - 245))
      | (1ULL << (fugue_sqlParser::TABLESAMPLE - 245))
      | (1ULL << (fugue_sqlParser::TBLPROPERTIES - 245))
      | (1ULL << (fugue_sqlParser::TEMPORARY - 245))
      | (1ULL << (fugue_sqlParser::TERMINATED - 245))
      | (1ULL << (fugue_sqlParser::THEN - 245))
      | (1ULL << (fugue_sqlParser::TO - 245))
      | (1ULL << (fugue_sqlParser::TOUCH - 245))
      | (1ULL << (fugue_sqlParser::TRAILING - 245))
      | (1ULL << (fugue_sqlParser::TRANSACTION - 245))
      | (1ULL << (fugue_sqlParser::TRANSACTIONS - 245))
      | (1ULL << (fugue_sqlParser::TRANSFORM - 245))
      | (1ULL << (fugue_sqlParser::TRIM - 245))
      | (1ULL << (fugue_sqlParser::TRUE - 245))
      | (1ULL << (fugue_sqlParser::TRUNCATE - 245))
      | (1ULL << (fugue_sqlParser::TYPE - 245))
      | (1ULL << (fugue_sqlParser::UNARCHIVE - 245))
      | (1ULL << (fugue_sqlParser::UNBOUNDED - 245))
      | (1ULL << (fugue_sqlParser::UNCACHE - 245))
      | (1ULL << (fugue_sqlParser::UNION - 245))
      | (1ULL << (fugue_sqlParser::UNIQUE - 245))
      | (1ULL << (fugue_sqlParser::UNKNOWN - 245))
      | (1ULL << (fugue_sqlParser::UNLOCK - 245))
      | (1ULL << (fugue_sqlParser::UNSET - 245))
      | (1ULL << (fugue_sqlParser::UPDATE - 245))
      | (1ULL << (fugue_sqlParser::USE - 245))
      | (1ULL << (fugue_sqlParser::USER - 245))
      | (1ULL << (fugue_sqlParser::USING - 245))
      | (1ULL << (fugue_sqlParser::VALUES - 245))
      | (1ULL << (fugue_sqlParser::VIEW - 245))
      | (1ULL << (fugue_sqlParser::VIEWS - 245))
      | (1ULL << (fugue_sqlParser::WHEN - 245))
      | (1ULL << (fugue_sqlParser::WHERE - 245))
      | (1ULL << (fugue_sqlParser::WINDOW - 245))
      | (1ULL << (fugue_sqlParser::WITH - 245))
      | (1ULL << (fugue_sqlParser::YEAR - 245)))) != 0) || ((((_la - 319) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 319)) & ((1ULL << (fugue_sqlParser::DIV - 319))
      | (1ULL << (fugue_sqlParser::IDENTIFIER - 319))
      | (1ULL << (fugue_sqlParser::BACKQUOTED_IDENTIFIER - 319)))) != 0)) {
      setState(701);
      antlrcpp::downCast<FugueModuleTaskContext *>(_localctx)->assign = fugueAssignment();
    }
    setState(704);
    match(fugue_sqlParser::SUB);
    setState(706);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 58, _ctx)) {
    case 1: {
      setState(705);
      antlrcpp::downCast<FugueModuleTaskContext *>(_localctx)->dfs = fugueDataFrames();
      break;
    }

    default:
      break;
    }
    setState(708);
    match(fugue_sqlParser::USING);
    setState(709);
    antlrcpp::downCast<FugueModuleTaskContext *>(_localctx)->fugueUsing = fugueExtension();
    setState(711);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << fugue_sqlParser::T__2)
      | (1ULL << fugue_sqlParser::T__7)
      | (1ULL << fugue_sqlParser::PARAMS))) != 0)) {
      setState(710);
      antlrcpp::downCast<FugueModuleTaskContext *>(_localctx)->params = fugueParams();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FugueSqlEngineContext ------------------------------------------------------------------

fugue_sqlParser::FugueSqlEngineContext::FugueSqlEngineContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* fugue_sqlParser::FugueSqlEngineContext::CONNECT() {
  return getToken(fugue_sqlParser::CONNECT, 0);
}

fugue_sqlParser::FugueExtensionContext* fugue_sqlParser::FugueSqlEngineContext::fugueExtension() {
  return getRuleContext<fugue_sqlParser::FugueExtensionContext>(0);
}

fugue_sqlParser::FugueParamsContext* fugue_sqlParser::FugueSqlEngineContext::fugueParams() {
  return getRuleContext<fugue_sqlParser::FugueParamsContext>(0);
}


size_t fugue_sqlParser::FugueSqlEngineContext::getRuleIndex() const {
  return fugue_sqlParser::RuleFugueSqlEngine;
}


antlrcpp::Any fugue_sqlParser::FugueSqlEngineContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitFugueSqlEngine(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::FugueSqlEngineContext* fugue_sqlParser::fugueSqlEngine() {
  FugueSqlEngineContext *_localctx = _tracker.createInstance<FugueSqlEngineContext>(_ctx, getState());
  enterRule(_localctx, 48, fugue_sqlParser::RuleFugueSqlEngine);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(713);
    match(fugue_sqlParser::CONNECT);
    setState(714);
    antlrcpp::downCast<FugueSqlEngineContext *>(_localctx)->fugueUsing = fugueExtension();
    setState(716);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << fugue_sqlParser::T__2)
      | (1ULL << fugue_sqlParser::T__7)
      | (1ULL << fugue_sqlParser::PARAMS))) != 0)) {
      setState(715);
      antlrcpp::downCast<FugueSqlEngineContext *>(_localctx)->params = fugueParams();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FugueSingleFileContext ------------------------------------------------------------------

fugue_sqlParser::FugueSingleFileContext::FugueSingleFileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* fugue_sqlParser::FugueSingleFileContext::SINGLE() {
  return getToken(fugue_sqlParser::SINGLE, 0);
}


size_t fugue_sqlParser::FugueSingleFileContext::getRuleIndex() const {
  return fugue_sqlParser::RuleFugueSingleFile;
}


antlrcpp::Any fugue_sqlParser::FugueSingleFileContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitFugueSingleFile(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::FugueSingleFileContext* fugue_sqlParser::fugueSingleFile() {
  FugueSingleFileContext *_localctx = _tracker.createInstance<FugueSingleFileContext>(_ctx, getState());
  enterRule(_localctx, 50, fugue_sqlParser::RuleFugueSingleFile);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(718);
    antlrcpp::downCast<FugueSingleFileContext *>(_localctx)->single = match(fugue_sqlParser::SINGLE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FugueLoadColumnsContext ------------------------------------------------------------------

fugue_sqlParser::FugueLoadColumnsContext::FugueLoadColumnsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

fugue_sqlParser::FugueSchemaContext* fugue_sqlParser::FugueLoadColumnsContext::fugueSchema() {
  return getRuleContext<fugue_sqlParser::FugueSchemaContext>(0);
}

fugue_sqlParser::FugueColsContext* fugue_sqlParser::FugueLoadColumnsContext::fugueCols() {
  return getRuleContext<fugue_sqlParser::FugueColsContext>(0);
}


size_t fugue_sqlParser::FugueLoadColumnsContext::getRuleIndex() const {
  return fugue_sqlParser::RuleFugueLoadColumns;
}


antlrcpp::Any fugue_sqlParser::FugueLoadColumnsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitFugueLoadColumns(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::FugueLoadColumnsContext* fugue_sqlParser::fugueLoadColumns() {
  FugueLoadColumnsContext *_localctx = _tracker.createInstance<FugueLoadColumnsContext>(_ctx, getState());
  enterRule(_localctx, 52, fugue_sqlParser::RuleFugueLoadColumns);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(722);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 61, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(720);
      antlrcpp::downCast<FugueLoadColumnsContext *>(_localctx)->schema = fugueSchema();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(721);
      antlrcpp::downCast<FugueLoadColumnsContext *>(_localctx)->cols = fugueCols();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FugueSaveModeContext ------------------------------------------------------------------

fugue_sqlParser::FugueSaveModeContext::FugueSaveModeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* fugue_sqlParser::FugueSaveModeContext::TO() {
  return getToken(fugue_sqlParser::TO, 0);
}

tree::TerminalNode* fugue_sqlParser::FugueSaveModeContext::OVERWRITE() {
  return getToken(fugue_sqlParser::OVERWRITE, 0);
}

tree::TerminalNode* fugue_sqlParser::FugueSaveModeContext::APPEND() {
  return getToken(fugue_sqlParser::APPEND, 0);
}


size_t fugue_sqlParser::FugueSaveModeContext::getRuleIndex() const {
  return fugue_sqlParser::RuleFugueSaveMode;
}


antlrcpp::Any fugue_sqlParser::FugueSaveModeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitFugueSaveMode(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::FugueSaveModeContext* fugue_sqlParser::fugueSaveMode() {
  FugueSaveModeContext *_localctx = _tracker.createInstance<FugueSaveModeContext>(_ctx, getState());
  enterRule(_localctx, 54, fugue_sqlParser::RuleFugueSaveMode);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(724);
    _la = _input->LA(1);
    if (!(_la == fugue_sqlParser::APPEND || _la == fugue_sqlParser::OVERWRITE || _la == fugue_sqlParser::TO)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FugueFileFormatContext ------------------------------------------------------------------

fugue_sqlParser::FugueFileFormatContext::FugueFileFormatContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* fugue_sqlParser::FugueFileFormatContext::PARQUET() {
  return getToken(fugue_sqlParser::PARQUET, 0);
}

tree::TerminalNode* fugue_sqlParser::FugueFileFormatContext::CSV() {
  return getToken(fugue_sqlParser::CSV, 0);
}

tree::TerminalNode* fugue_sqlParser::FugueFileFormatContext::JSON() {
  return getToken(fugue_sqlParser::JSON, 0);
}


size_t fugue_sqlParser::FugueFileFormatContext::getRuleIndex() const {
  return fugue_sqlParser::RuleFugueFileFormat;
}


antlrcpp::Any fugue_sqlParser::FugueFileFormatContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitFugueFileFormat(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::FugueFileFormatContext* fugue_sqlParser::fugueFileFormat() {
  FugueFileFormatContext *_localctx = _tracker.createInstance<FugueFileFormatContext>(_ctx, getState());
  enterRule(_localctx, 56, fugue_sqlParser::RuleFugueFileFormat);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(726);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << fugue_sqlParser::PARQUET)
      | (1ULL << fugue_sqlParser::CSV)
      | (1ULL << fugue_sqlParser::JSON))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FuguePathContext ------------------------------------------------------------------

fugue_sqlParser::FuguePathContext::FuguePathContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* fugue_sqlParser::FuguePathContext::STRING() {
  return getToken(fugue_sqlParser::STRING, 0);
}


size_t fugue_sqlParser::FuguePathContext::getRuleIndex() const {
  return fugue_sqlParser::RuleFuguePath;
}


antlrcpp::Any fugue_sqlParser::FuguePathContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitFuguePath(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::FuguePathContext* fugue_sqlParser::fuguePath() {
  FuguePathContext *_localctx = _tracker.createInstance<FuguePathContext>(_ctx, getState());
  enterRule(_localctx, 58, fugue_sqlParser::RuleFuguePath);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(728);
    match(fugue_sqlParser::STRING);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FugueCheckpointContext ------------------------------------------------------------------

fugue_sqlParser::FugueCheckpointContext::FugueCheckpointContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t fugue_sqlParser::FugueCheckpointContext::getRuleIndex() const {
  return fugue_sqlParser::RuleFugueCheckpoint;
}

void fugue_sqlParser::FugueCheckpointContext::copyFrom(FugueCheckpointContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- FugueCheckpointDeterministicContext ------------------------------------------------------------------

tree::TerminalNode* fugue_sqlParser::FugueCheckpointDeterministicContext::DETERMINISTIC() {
  return getToken(fugue_sqlParser::DETERMINISTIC, 0);
}

tree::TerminalNode* fugue_sqlParser::FugueCheckpointDeterministicContext::CHECKPOINT() {
  return getToken(fugue_sqlParser::CHECKPOINT, 0);
}

tree::TerminalNode* fugue_sqlParser::FugueCheckpointDeterministicContext::LAZY() {
  return getToken(fugue_sqlParser::LAZY, 0);
}

fugue_sqlParser::FugueCheckpointNamespaceContext* fugue_sqlParser::FugueCheckpointDeterministicContext::fugueCheckpointNamespace() {
  return getRuleContext<fugue_sqlParser::FugueCheckpointNamespaceContext>(0);
}

fugue_sqlParser::FuguePrepartitionContext* fugue_sqlParser::FugueCheckpointDeterministicContext::fuguePrepartition() {
  return getRuleContext<fugue_sqlParser::FuguePrepartitionContext>(0);
}

fugue_sqlParser::FugueSingleFileContext* fugue_sqlParser::FugueCheckpointDeterministicContext::fugueSingleFile() {
  return getRuleContext<fugue_sqlParser::FugueSingleFileContext>(0);
}

fugue_sqlParser::FugueParamsContext* fugue_sqlParser::FugueCheckpointDeterministicContext::fugueParams() {
  return getRuleContext<fugue_sqlParser::FugueParamsContext>(0);
}

fugue_sqlParser::FugueCheckpointDeterministicContext::FugueCheckpointDeterministicContext(FugueCheckpointContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::FugueCheckpointDeterministicContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitFugueCheckpointDeterministic(this);
  else
    return visitor->visitChildren(this);
}
//----------------- FugueCheckpointWeakContext ------------------------------------------------------------------

tree::TerminalNode* fugue_sqlParser::FugueCheckpointWeakContext::PERSIST() {
  return getToken(fugue_sqlParser::PERSIST, 0);
}

tree::TerminalNode* fugue_sqlParser::FugueCheckpointWeakContext::WEAK() {
  return getToken(fugue_sqlParser::WEAK, 0);
}

tree::TerminalNode* fugue_sqlParser::FugueCheckpointWeakContext::CHECKPOINT() {
  return getToken(fugue_sqlParser::CHECKPOINT, 0);
}

tree::TerminalNode* fugue_sqlParser::FugueCheckpointWeakContext::LAZY() {
  return getToken(fugue_sqlParser::LAZY, 0);
}

fugue_sqlParser::FugueParamsContext* fugue_sqlParser::FugueCheckpointWeakContext::fugueParams() {
  return getRuleContext<fugue_sqlParser::FugueParamsContext>(0);
}

fugue_sqlParser::FugueCheckpointWeakContext::FugueCheckpointWeakContext(FugueCheckpointContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::FugueCheckpointWeakContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitFugueCheckpointWeak(this);
  else
    return visitor->visitChildren(this);
}
//----------------- FugueCheckpointStrongContext ------------------------------------------------------------------

tree::TerminalNode* fugue_sqlParser::FugueCheckpointStrongContext::CHECKPOINT() {
  return getToken(fugue_sqlParser::CHECKPOINT, 0);
}

tree::TerminalNode* fugue_sqlParser::FugueCheckpointStrongContext::LAZY() {
  return getToken(fugue_sqlParser::LAZY, 0);
}

tree::TerminalNode* fugue_sqlParser::FugueCheckpointStrongContext::STRONG() {
  return getToken(fugue_sqlParser::STRONG, 0);
}

fugue_sqlParser::FuguePrepartitionContext* fugue_sqlParser::FugueCheckpointStrongContext::fuguePrepartition() {
  return getRuleContext<fugue_sqlParser::FuguePrepartitionContext>(0);
}

fugue_sqlParser::FugueSingleFileContext* fugue_sqlParser::FugueCheckpointStrongContext::fugueSingleFile() {
  return getRuleContext<fugue_sqlParser::FugueSingleFileContext>(0);
}

fugue_sqlParser::FugueParamsContext* fugue_sqlParser::FugueCheckpointStrongContext::fugueParams() {
  return getRuleContext<fugue_sqlParser::FugueParamsContext>(0);
}

fugue_sqlParser::FugueCheckpointStrongContext::FugueCheckpointStrongContext(FugueCheckpointContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::FugueCheckpointStrongContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitFugueCheckpointStrong(this);
  else
    return visitor->visitChildren(this);
}
fugue_sqlParser::FugueCheckpointContext* fugue_sqlParser::fugueCheckpoint() {
  FugueCheckpointContext *_localctx = _tracker.createInstance<FugueCheckpointContext>(_ctx, getState());
  enterRule(_localctx, 60, fugue_sqlParser::RuleFugueCheckpoint);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(774);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 75, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<fugue_sqlParser::FugueCheckpointWeakContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(731);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::LAZY) {
        setState(730);
        match(fugue_sqlParser::LAZY);
      }
      setState(736);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case fugue_sqlParser::PERSIST: {
          setState(733);
          match(fugue_sqlParser::PERSIST);
          break;
        }

        case fugue_sqlParser::WEAK: {
          setState(734);
          match(fugue_sqlParser::WEAK);
          setState(735);
          match(fugue_sqlParser::CHECKPOINT);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(739);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & ((1ULL << fugue_sqlParser::T__2)
        | (1ULL << fugue_sqlParser::T__7)
        | (1ULL << fugue_sqlParser::PARAMS))) != 0)) {
        setState(738);
        antlrcpp::downCast<FugueCheckpointWeakContext *>(_localctx)->params = fugueParams();
      }
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<fugue_sqlParser::FugueCheckpointStrongContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(742);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::LAZY) {
        setState(741);
        match(fugue_sqlParser::LAZY);
      }
      setState(745);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::STRONG) {
        setState(744);
        match(fugue_sqlParser::STRONG);
      }
      setState(747);
      match(fugue_sqlParser::CHECKPOINT);
      setState(749);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & ((1ULL << fugue_sqlParser::HASH)
        | (1ULL << fugue_sqlParser::RAND)
        | (1ULL << fugue_sqlParser::EVEN)
        | (1ULL << fugue_sqlParser::PREPARTITION))) != 0)) {
        setState(748);
        antlrcpp::downCast<FugueCheckpointStrongContext *>(_localctx)->partition = fuguePrepartition();
      }
      setState(752);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::SINGLE) {
        setState(751);
        antlrcpp::downCast<FugueCheckpointStrongContext *>(_localctx)->single = fugueSingleFile();
      }
      setState(755);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & ((1ULL << fugue_sqlParser::T__2)
        | (1ULL << fugue_sqlParser::T__7)
        | (1ULL << fugue_sqlParser::PARAMS))) != 0)) {
        setState(754);
        antlrcpp::downCast<FugueCheckpointStrongContext *>(_localctx)->params = fugueParams();
      }
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<fugue_sqlParser::FugueCheckpointDeterministicContext>(_localctx);
      enterOuterAlt(_localctx, 3);
      setState(758);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::LAZY) {
        setState(757);
        match(fugue_sqlParser::LAZY);
      }
      setState(760);
      match(fugue_sqlParser::DETERMINISTIC);
      setState(761);
      match(fugue_sqlParser::CHECKPOINT);
      setState(763);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::STRING) {
        setState(762);
        antlrcpp::downCast<FugueCheckpointDeterministicContext *>(_localctx)->ns = fugueCheckpointNamespace();
      }
      setState(766);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & ((1ULL << fugue_sqlParser::HASH)
        | (1ULL << fugue_sqlParser::RAND)
        | (1ULL << fugue_sqlParser::EVEN)
        | (1ULL << fugue_sqlParser::PREPARTITION))) != 0)) {
        setState(765);
        antlrcpp::downCast<FugueCheckpointDeterministicContext *>(_localctx)->partition = fuguePrepartition();
      }
      setState(769);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::SINGLE) {
        setState(768);
        antlrcpp::downCast<FugueCheckpointDeterministicContext *>(_localctx)->single = fugueSingleFile();
      }
      setState(772);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & ((1ULL << fugue_sqlParser::T__2)
        | (1ULL << fugue_sqlParser::T__7)
        | (1ULL << fugue_sqlParser::PARAMS))) != 0)) {
        setState(771);
        antlrcpp::downCast<FugueCheckpointDeterministicContext *>(_localctx)->params = fugueParams();
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FugueCheckpointNamespaceContext ------------------------------------------------------------------

fugue_sqlParser::FugueCheckpointNamespaceContext::FugueCheckpointNamespaceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* fugue_sqlParser::FugueCheckpointNamespaceContext::STRING() {
  return getToken(fugue_sqlParser::STRING, 0);
}


size_t fugue_sqlParser::FugueCheckpointNamespaceContext::getRuleIndex() const {
  return fugue_sqlParser::RuleFugueCheckpointNamespace;
}


antlrcpp::Any fugue_sqlParser::FugueCheckpointNamespaceContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitFugueCheckpointNamespace(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::FugueCheckpointNamespaceContext* fugue_sqlParser::fugueCheckpointNamespace() {
  FugueCheckpointNamespaceContext *_localctx = _tracker.createInstance<FugueCheckpointNamespaceContext>(_ctx, getState());
  enterRule(_localctx, 62, fugue_sqlParser::RuleFugueCheckpointNamespace);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(776);
    match(fugue_sqlParser::STRING);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FugueYieldContext ------------------------------------------------------------------

fugue_sqlParser::FugueYieldContext::FugueYieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* fugue_sqlParser::FugueYieldContext::YIELD() {
  return getToken(fugue_sqlParser::YIELD, 0);
}

tree::TerminalNode* fugue_sqlParser::FugueYieldContext::FILE() {
  return getToken(fugue_sqlParser::FILE, 0);
}

tree::TerminalNode* fugue_sqlParser::FugueYieldContext::AS() {
  return getToken(fugue_sqlParser::AS, 0);
}

fugue_sqlParser::FugueIdentifierContext* fugue_sqlParser::FugueYieldContext::fugueIdentifier() {
  return getRuleContext<fugue_sqlParser::FugueIdentifierContext>(0);
}

tree::TerminalNode* fugue_sqlParser::FugueYieldContext::DATAFRAME() {
  return getToken(fugue_sqlParser::DATAFRAME, 0);
}

tree::TerminalNode* fugue_sqlParser::FugueYieldContext::LOCAL() {
  return getToken(fugue_sqlParser::LOCAL, 0);
}


size_t fugue_sqlParser::FugueYieldContext::getRuleIndex() const {
  return fugue_sqlParser::RuleFugueYield;
}


antlrcpp::Any fugue_sqlParser::FugueYieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitFugueYield(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::FugueYieldContext* fugue_sqlParser::fugueYield() {
  FugueYieldContext *_localctx = _tracker.createInstance<FugueYieldContext>(_ctx, getState());
  enterRule(_localctx, 64, fugue_sqlParser::RuleFugueYield);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(793);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 79, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(778);
      match(fugue_sqlParser::YIELD);
      setState(779);
      match(fugue_sqlParser::FILE);
      setState(782);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 76, _ctx)) {
      case 1: {
        setState(780);
        match(fugue_sqlParser::AS);
        setState(781);
        antlrcpp::downCast<FugueYieldContext *>(_localctx)->name = fugueIdentifier();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(784);
      match(fugue_sqlParser::YIELD);
      setState(786);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::LOCAL) {
        setState(785);
        match(fugue_sqlParser::LOCAL);
      }
      setState(788);
      match(fugue_sqlParser::DATAFRAME);
      setState(791);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 78, _ctx)) {
      case 1: {
        setState(789);
        match(fugue_sqlParser::AS);
        setState(790);
        antlrcpp::downCast<FugueYieldContext *>(_localctx)->name = fugueIdentifier();
        break;
      }

      default:
        break;
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FugueBroadcastContext ------------------------------------------------------------------

fugue_sqlParser::FugueBroadcastContext::FugueBroadcastContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* fugue_sqlParser::FugueBroadcastContext::BROADCAST() {
  return getToken(fugue_sqlParser::BROADCAST, 0);
}


size_t fugue_sqlParser::FugueBroadcastContext::getRuleIndex() const {
  return fugue_sqlParser::RuleFugueBroadcast;
}


antlrcpp::Any fugue_sqlParser::FugueBroadcastContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitFugueBroadcast(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::FugueBroadcastContext* fugue_sqlParser::fugueBroadcast() {
  FugueBroadcastContext *_localctx = _tracker.createInstance<FugueBroadcastContext>(_ctx, getState());
  enterRule(_localctx, 66, fugue_sqlParser::RuleFugueBroadcast);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(795);
    match(fugue_sqlParser::BROADCAST);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FugueDataFramesContext ------------------------------------------------------------------

fugue_sqlParser::FugueDataFramesContext::FugueDataFramesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t fugue_sqlParser::FugueDataFramesContext::getRuleIndex() const {
  return fugue_sqlParser::RuleFugueDataFrames;
}

void fugue_sqlParser::FugueDataFramesContext::copyFrom(FugueDataFramesContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- FugueDataFramesDictContext ------------------------------------------------------------------

std::vector<fugue_sqlParser::FugueDataFramePairContext *> fugue_sqlParser::FugueDataFramesDictContext::fugueDataFramePair() {
  return getRuleContexts<fugue_sqlParser::FugueDataFramePairContext>();
}

fugue_sqlParser::FugueDataFramePairContext* fugue_sqlParser::FugueDataFramesDictContext::fugueDataFramePair(size_t i) {
  return getRuleContext<fugue_sqlParser::FugueDataFramePairContext>(i);
}

fugue_sqlParser::FugueDataFramesDictContext::FugueDataFramesDictContext(FugueDataFramesContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::FugueDataFramesDictContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitFugueDataFramesDict(this);
  else
    return visitor->visitChildren(this);
}
//----------------- FugueDataFramesListContext ------------------------------------------------------------------

std::vector<fugue_sqlParser::FugueDataFrameContext *> fugue_sqlParser::FugueDataFramesListContext::fugueDataFrame() {
  return getRuleContexts<fugue_sqlParser::FugueDataFrameContext>();
}

fugue_sqlParser::FugueDataFrameContext* fugue_sqlParser::FugueDataFramesListContext::fugueDataFrame(size_t i) {
  return getRuleContext<fugue_sqlParser::FugueDataFrameContext>(i);
}

fugue_sqlParser::FugueDataFramesListContext::FugueDataFramesListContext(FugueDataFramesContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::FugueDataFramesListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitFugueDataFramesList(this);
  else
    return visitor->visitChildren(this);
}
fugue_sqlParser::FugueDataFramesContext* fugue_sqlParser::fugueDataFrames() {
  FugueDataFramesContext *_localctx = _tracker.createInstance<FugueDataFramesContext>(_ctx, getState());
  enterRule(_localctx, 68, fugue_sqlParser::RuleFugueDataFrames);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(813);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 82, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<fugue_sqlParser::FugueDataFramesListContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(797);
      fugueDataFrame();
      setState(802);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 80, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(798);
          match(fugue_sqlParser::T__0);
          setState(799);
          fugueDataFrame(); 
        }
        setState(804);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 80, _ctx);
      }
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<fugue_sqlParser::FugueDataFramesDictContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(805);
      fugueDataFramePair();
      setState(810);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 81, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(806);
          match(fugue_sqlParser::T__0);
          setState(807);
          fugueDataFramePair(); 
        }
        setState(812);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 81, _ctx);
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FugueDataFramePairContext ------------------------------------------------------------------

fugue_sqlParser::FugueDataFramePairContext::FugueDataFramePairContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

fugue_sqlParser::FugueIdentifierContext* fugue_sqlParser::FugueDataFramePairContext::fugueIdentifier() {
  return getRuleContext<fugue_sqlParser::FugueIdentifierContext>(0);
}

tree::TerminalNode* fugue_sqlParser::FugueDataFramePairContext::EQUAL() {
  return getToken(fugue_sqlParser::EQUAL, 0);
}

fugue_sqlParser::FugueDataFrameContext* fugue_sqlParser::FugueDataFramePairContext::fugueDataFrame() {
  return getRuleContext<fugue_sqlParser::FugueDataFrameContext>(0);
}


size_t fugue_sqlParser::FugueDataFramePairContext::getRuleIndex() const {
  return fugue_sqlParser::RuleFugueDataFramePair;
}


antlrcpp::Any fugue_sqlParser::FugueDataFramePairContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitFugueDataFramePair(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::FugueDataFramePairContext* fugue_sqlParser::fugueDataFramePair() {
  FugueDataFramePairContext *_localctx = _tracker.createInstance<FugueDataFramePairContext>(_ctx, getState());
  enterRule(_localctx, 70, fugue_sqlParser::RuleFugueDataFramePair);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(815);
    antlrcpp::downCast<FugueDataFramePairContext *>(_localctx)->key = fugueIdentifier();
    setState(816);
    _la = _input->LA(1);
    if (!(_la == fugue_sqlParser::T__1 || _la == fugue_sqlParser::EQUAL)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(817);
    antlrcpp::downCast<FugueDataFramePairContext *>(_localctx)->value = fugueDataFrame();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FugueDataFrameContext ------------------------------------------------------------------

fugue_sqlParser::FugueDataFrameContext::FugueDataFrameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t fugue_sqlParser::FugueDataFrameContext::getRuleIndex() const {
  return fugue_sqlParser::RuleFugueDataFrame;
}

void fugue_sqlParser::FugueDataFrameContext::copyFrom(FugueDataFrameContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- FugueDataFrameSourceContext ------------------------------------------------------------------

fugue_sqlParser::FugueIdentifierContext* fugue_sqlParser::FugueDataFrameSourceContext::fugueIdentifier() {
  return getRuleContext<fugue_sqlParser::FugueIdentifierContext>(0);
}

fugue_sqlParser::FugueDataFrameMemberContext* fugue_sqlParser::FugueDataFrameSourceContext::fugueDataFrameMember() {
  return getRuleContext<fugue_sqlParser::FugueDataFrameMemberContext>(0);
}

fugue_sqlParser::FugueDataFrameSourceContext::FugueDataFrameSourceContext(FugueDataFrameContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::FugueDataFrameSourceContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitFugueDataFrameSource(this);
  else
    return visitor->visitChildren(this);
}
//----------------- FugueDataFrameNestedContext ------------------------------------------------------------------

fugue_sqlParser::FugueNestableTaskContext* fugue_sqlParser::FugueDataFrameNestedContext::fugueNestableTask() {
  return getRuleContext<fugue_sqlParser::FugueNestableTaskContext>(0);
}

fugue_sqlParser::FugueDataFrameNestedContext::FugueDataFrameNestedContext(FugueDataFrameContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::FugueDataFrameNestedContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitFugueDataFrameNested(this);
  else
    return visitor->visitChildren(this);
}
fugue_sqlParser::FugueDataFrameContext* fugue_sqlParser::fugueDataFrame() {
  FugueDataFrameContext *_localctx = _tracker.createInstance<FugueDataFrameContext>(_ctx, getState());
  enterRule(_localctx, 72, fugue_sqlParser::RuleFugueDataFrame);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(827);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case fugue_sqlParser::ADD:
      case fugue_sqlParser::AFTER:
      case fugue_sqlParser::ALL:
      case fugue_sqlParser::ALTER:
      case fugue_sqlParser::ANALYZE:
      case fugue_sqlParser::AND:
      case fugue_sqlParser::ANTI:
      case fugue_sqlParser::ANY:
      case fugue_sqlParser::ARCHIVE:
      case fugue_sqlParser::ARRAY:
      case fugue_sqlParser::AS:
      case fugue_sqlParser::ASC:
      case fugue_sqlParser::AT:
      case fugue_sqlParser::AUTHORIZATION:
      case fugue_sqlParser::BETWEEN:
      case fugue_sqlParser::BOTH:
      case fugue_sqlParser::BUCKET:
      case fugue_sqlParser::BUCKETS:
      case fugue_sqlParser::BY:
      case fugue_sqlParser::CACHE:
      case fugue_sqlParser::CASCADE:
      case fugue_sqlParser::CASE:
      case fugue_sqlParser::CAST:
      case fugue_sqlParser::CHANGE:
      case fugue_sqlParser::CHECK:
      case fugue_sqlParser::CLEAR:
      case fugue_sqlParser::CLUSTER:
      case fugue_sqlParser::CLUSTERED:
      case fugue_sqlParser::CODEGEN:
      case fugue_sqlParser::COLLATE:
      case fugue_sqlParser::COLLECTION:
      case fugue_sqlParser::COLUMN:
      case fugue_sqlParser::COLUMNS:
      case fugue_sqlParser::COMMENT:
      case fugue_sqlParser::COMMIT:
      case fugue_sqlParser::COMPACT:
      case fugue_sqlParser::COMPACTIONS:
      case fugue_sqlParser::COMPUTE:
      case fugue_sqlParser::CONCATENATE:
      case fugue_sqlParser::CONSTRAINT:
      case fugue_sqlParser::COST:
      case fugue_sqlParser::CREATE:
      case fugue_sqlParser::CROSS:
      case fugue_sqlParser::CUBE:
      case fugue_sqlParser::CURRENT:
      case fugue_sqlParser::CURRENT_DATE:
      case fugue_sqlParser::CURRENT_TIME:
      case fugue_sqlParser::CURRENT_TIMESTAMP:
      case fugue_sqlParser::CURRENT_USER:
      case fugue_sqlParser::DATA:
      case fugue_sqlParser::DATABASE:
      case fugue_sqlParser::DATABASES:
      case fugue_sqlParser::DAY:
      case fugue_sqlParser::DBPROPERTIES:
      case fugue_sqlParser::DEFINED:
      case fugue_sqlParser::DELETE:
      case fugue_sqlParser::DELIMITED:
      case fugue_sqlParser::DESC:
      case fugue_sqlParser::DESCRIBE:
      case fugue_sqlParser::DFS:
      case fugue_sqlParser::DIRECTORIES:
      case fugue_sqlParser::DIRECTORY:
      case fugue_sqlParser::DISTINCT:
      case fugue_sqlParser::DISTRIBUTE:
      case fugue_sqlParser::DROP:
      case fugue_sqlParser::ELSE:
      case fugue_sqlParser::END:
      case fugue_sqlParser::ESCAPE:
      case fugue_sqlParser::ESCAPED:
      case fugue_sqlParser::EXCEPT:
      case fugue_sqlParser::EXCHANGE:
      case fugue_sqlParser::EXISTS:
      case fugue_sqlParser::EXPLAIN:
      case fugue_sqlParser::EXPORT:
      case fugue_sqlParser::EXTENDED:
      case fugue_sqlParser::EXTERNAL:
      case fugue_sqlParser::EXTRACT:
      case fugue_sqlParser::FALSE:
      case fugue_sqlParser::FETCH:
      case fugue_sqlParser::FIELDS:
      case fugue_sqlParser::FILTER:
      case fugue_sqlParser::FILEFORMAT:
      case fugue_sqlParser::FIRST:
      case fugue_sqlParser::FOLLOWING:
      case fugue_sqlParser::FOR:
      case fugue_sqlParser::FOREIGN:
      case fugue_sqlParser::FORMAT:
      case fugue_sqlParser::FORMATTED:
      case fugue_sqlParser::FROM:
      case fugue_sqlParser::FULL:
      case fugue_sqlParser::FUNCTION:
      case fugue_sqlParser::FUNCTIONS:
      case fugue_sqlParser::GLOBAL:
      case fugue_sqlParser::GRANT:
      case fugue_sqlParser::GROUP:
      case fugue_sqlParser::GROUPING:
      case fugue_sqlParser::HAVING:
      case fugue_sqlParser::HOUR:
      case fugue_sqlParser::IF:
      case fugue_sqlParser::IGNORE:
      case fugue_sqlParser::IMPORT:
      case fugue_sqlParser::IN:
      case fugue_sqlParser::INDEX:
      case fugue_sqlParser::INDEXES:
      case fugue_sqlParser::INNER:
      case fugue_sqlParser::INPATH:
      case fugue_sqlParser::INPUTFORMAT:
      case fugue_sqlParser::INSERT:
      case fugue_sqlParser::INTERSECT:
      case fugue_sqlParser::INTERVAL:
      case fugue_sqlParser::INTO:
      case fugue_sqlParser::IS:
      case fugue_sqlParser::ITEMS:
      case fugue_sqlParser::JOIN:
      case fugue_sqlParser::KEYS:
      case fugue_sqlParser::LAST:
      case fugue_sqlParser::LATERAL:
      case fugue_sqlParser::LAZY:
      case fugue_sqlParser::LEADING:
      case fugue_sqlParser::LEFT:
      case fugue_sqlParser::LIKE:
      case fugue_sqlParser::LIMIT:
      case fugue_sqlParser::LINES:
      case fugue_sqlParser::LIST:
      case fugue_sqlParser::LOAD:
      case fugue_sqlParser::LOCAL:
      case fugue_sqlParser::LOCATION:
      case fugue_sqlParser::LOCK:
      case fugue_sqlParser::LOCKS:
      case fugue_sqlParser::LOGICAL:
      case fugue_sqlParser::MACRO:
      case fugue_sqlParser::MAP:
      case fugue_sqlParser::MATCHED:
      case fugue_sqlParser::MERGE:
      case fugue_sqlParser::MINUTE:
      case fugue_sqlParser::MONTH:
      case fugue_sqlParser::MSCK:
      case fugue_sqlParser::NAMESPACE:
      case fugue_sqlParser::NAMESPACES:
      case fugue_sqlParser::NATURAL:
      case fugue_sqlParser::NO:
      case fugue_sqlParser::NOT:
      case fugue_sqlParser::THENULL:
      case fugue_sqlParser::THENULLS:
      case fugue_sqlParser::OF:
      case fugue_sqlParser::ON:
      case fugue_sqlParser::ONLY:
      case fugue_sqlParser::OPTION:
      case fugue_sqlParser::OPTIONS:
      case fugue_sqlParser::OR:
      case fugue_sqlParser::ORDER:
      case fugue_sqlParser::OUT:
      case fugue_sqlParser::OUTER:
      case fugue_sqlParser::OUTPUTFORMAT:
      case fugue_sqlParser::OVER:
      case fugue_sqlParser::OVERLAPS:
      case fugue_sqlParser::OVERLAY:
      case fugue_sqlParser::OVERWRITE:
      case fugue_sqlParser::PARTITION:
      case fugue_sqlParser::PARTITIONED:
      case fugue_sqlParser::PARTITIONS:
      case fugue_sqlParser::PERCENTLIT:
      case fugue_sqlParser::PIVOT:
      case fugue_sqlParser::PLACING:
      case fugue_sqlParser::POSITION:
      case fugue_sqlParser::PRECEDING:
      case fugue_sqlParser::PRIMARY:
      case fugue_sqlParser::PRINCIPALS:
      case fugue_sqlParser::PROPERTIES:
      case fugue_sqlParser::PURGE:
      case fugue_sqlParser::QUERY:
      case fugue_sqlParser::RANGE:
      case fugue_sqlParser::RECORDREADER:
      case fugue_sqlParser::RECORDWRITER:
      case fugue_sqlParser::RECOVER:
      case fugue_sqlParser::REDUCE:
      case fugue_sqlParser::REFERENCES:
      case fugue_sqlParser::REFRESH:
      case fugue_sqlParser::RENAME:
      case fugue_sqlParser::REPAIR:
      case fugue_sqlParser::REPLACE:
      case fugue_sqlParser::RESET:
      case fugue_sqlParser::RESTRICT:
      case fugue_sqlParser::REVOKE:
      case fugue_sqlParser::RIGHT:
      case fugue_sqlParser::RLIKE:
      case fugue_sqlParser::ROLE:
      case fugue_sqlParser::ROLES:
      case fugue_sqlParser::ROLLBACK:
      case fugue_sqlParser::ROLLUP:
      case fugue_sqlParser::ROW:
      case fugue_sqlParser::ROWS:
      case fugue_sqlParser::SCHEMA:
      case fugue_sqlParser::SECOND:
      case fugue_sqlParser::SELECT:
      case fugue_sqlParser::SEMI:
      case fugue_sqlParser::SEPARATED:
      case fugue_sqlParser::SERDE:
      case fugue_sqlParser::SERDEPROPERTIES:
      case fugue_sqlParser::SESSION_USER:
      case fugue_sqlParser::SET:
      case fugue_sqlParser::SETMINUS:
      case fugue_sqlParser::SETS:
      case fugue_sqlParser::SHOW:
      case fugue_sqlParser::SKEWED:
      case fugue_sqlParser::SOME:
      case fugue_sqlParser::SORT:
      case fugue_sqlParser::SORTED:
      case fugue_sqlParser::START:
      case fugue_sqlParser::STATISTICS:
      case fugue_sqlParser::STORED:
      case fugue_sqlParser::STRATIFY:
      case fugue_sqlParser::STRUCT:
      case fugue_sqlParser::SUBSTR:
      case fugue_sqlParser::SUBSTRING:
      case fugue_sqlParser::TABLE:
      case fugue_sqlParser::TABLES:
      case fugue_sqlParser::TABLESAMPLE:
      case fugue_sqlParser::TBLPROPERTIES:
      case fugue_sqlParser::TEMPORARY:
      case fugue_sqlParser::TERMINATED:
      case fugue_sqlParser::THEN:
      case fugue_sqlParser::TO:
      case fugue_sqlParser::TOUCH:
      case fugue_sqlParser::TRAILING:
      case fugue_sqlParser::TRANSACTION:
      case fugue_sqlParser::TRANSACTIONS:
      case fugue_sqlParser::TRANSFORM:
      case fugue_sqlParser::TRIM:
      case fugue_sqlParser::TRUE:
      case fugue_sqlParser::TRUNCATE:
      case fugue_sqlParser::TYPE:
      case fugue_sqlParser::UNARCHIVE:
      case fugue_sqlParser::UNBOUNDED:
      case fugue_sqlParser::UNCACHE:
      case fugue_sqlParser::UNION:
      case fugue_sqlParser::UNIQUE:
      case fugue_sqlParser::UNKNOWN:
      case fugue_sqlParser::UNLOCK:
      case fugue_sqlParser::UNSET:
      case fugue_sqlParser::UPDATE:
      case fugue_sqlParser::USE:
      case fugue_sqlParser::USER:
      case fugue_sqlParser::USING:
      case fugue_sqlParser::VALUES:
      case fugue_sqlParser::VIEW:
      case fugue_sqlParser::VIEWS:
      case fugue_sqlParser::WHEN:
      case fugue_sqlParser::WHERE:
      case fugue_sqlParser::WINDOW:
      case fugue_sqlParser::WITH:
      case fugue_sqlParser::YEAR:
      case fugue_sqlParser::DIV:
      case fugue_sqlParser::IDENTIFIER:
      case fugue_sqlParser::BACKQUOTED_IDENTIFIER: {
        _localctx = _tracker.createInstance<fugue_sqlParser::FugueDataFrameSourceContext>(_localctx);
        enterOuterAlt(_localctx, 1);
        setState(819);
        fugueIdentifier();
        setState(821);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 83, _ctx)) {
        case 1: {
          setState(820);
          fugueDataFrameMember();
          break;
        }

        default:
          break;
        }
        break;
      }

      case fugue_sqlParser::T__2: {
        _localctx = _tracker.createInstance<fugue_sqlParser::FugueDataFrameNestedContext>(_localctx);
        enterOuterAlt(_localctx, 2);
        setState(823);
        match(fugue_sqlParser::T__2);
        setState(824);
        antlrcpp::downCast<FugueDataFrameNestedContext *>(_localctx)->task = fugueNestableTask();
        setState(825);
        match(fugue_sqlParser::T__3);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FugueDataFrameMemberContext ------------------------------------------------------------------

fugue_sqlParser::FugueDataFrameMemberContext::FugueDataFrameMemberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* fugue_sqlParser::FugueDataFrameMemberContext::INTEGER_VALUE() {
  return getToken(fugue_sqlParser::INTEGER_VALUE, 0);
}

fugue_sqlParser::FugueIdentifierContext* fugue_sqlParser::FugueDataFrameMemberContext::fugueIdentifier() {
  return getRuleContext<fugue_sqlParser::FugueIdentifierContext>(0);
}


size_t fugue_sqlParser::FugueDataFrameMemberContext::getRuleIndex() const {
  return fugue_sqlParser::RuleFugueDataFrameMember;
}


antlrcpp::Any fugue_sqlParser::FugueDataFrameMemberContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitFugueDataFrameMember(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::FugueDataFrameMemberContext* fugue_sqlParser::fugueDataFrameMember() {
  FugueDataFrameMemberContext *_localctx = _tracker.createInstance<FugueDataFrameMemberContext>(_ctx, getState());
  enterRule(_localctx, 74, fugue_sqlParser::RuleFugueDataFrameMember);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(829);
    match(fugue_sqlParser::T__4);
    setState(832);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case fugue_sqlParser::INTEGER_VALUE: {
        setState(830);
        antlrcpp::downCast<FugueDataFrameMemberContext *>(_localctx)->index = match(fugue_sqlParser::INTEGER_VALUE);
        break;
      }

      case fugue_sqlParser::ADD:
      case fugue_sqlParser::AFTER:
      case fugue_sqlParser::ALL:
      case fugue_sqlParser::ALTER:
      case fugue_sqlParser::ANALYZE:
      case fugue_sqlParser::AND:
      case fugue_sqlParser::ANTI:
      case fugue_sqlParser::ANY:
      case fugue_sqlParser::ARCHIVE:
      case fugue_sqlParser::ARRAY:
      case fugue_sqlParser::AS:
      case fugue_sqlParser::ASC:
      case fugue_sqlParser::AT:
      case fugue_sqlParser::AUTHORIZATION:
      case fugue_sqlParser::BETWEEN:
      case fugue_sqlParser::BOTH:
      case fugue_sqlParser::BUCKET:
      case fugue_sqlParser::BUCKETS:
      case fugue_sqlParser::BY:
      case fugue_sqlParser::CACHE:
      case fugue_sqlParser::CASCADE:
      case fugue_sqlParser::CASE:
      case fugue_sqlParser::CAST:
      case fugue_sqlParser::CHANGE:
      case fugue_sqlParser::CHECK:
      case fugue_sqlParser::CLEAR:
      case fugue_sqlParser::CLUSTER:
      case fugue_sqlParser::CLUSTERED:
      case fugue_sqlParser::CODEGEN:
      case fugue_sqlParser::COLLATE:
      case fugue_sqlParser::COLLECTION:
      case fugue_sqlParser::COLUMN:
      case fugue_sqlParser::COLUMNS:
      case fugue_sqlParser::COMMENT:
      case fugue_sqlParser::COMMIT:
      case fugue_sqlParser::COMPACT:
      case fugue_sqlParser::COMPACTIONS:
      case fugue_sqlParser::COMPUTE:
      case fugue_sqlParser::CONCATENATE:
      case fugue_sqlParser::CONSTRAINT:
      case fugue_sqlParser::COST:
      case fugue_sqlParser::CREATE:
      case fugue_sqlParser::CROSS:
      case fugue_sqlParser::CUBE:
      case fugue_sqlParser::CURRENT:
      case fugue_sqlParser::CURRENT_DATE:
      case fugue_sqlParser::CURRENT_TIME:
      case fugue_sqlParser::CURRENT_TIMESTAMP:
      case fugue_sqlParser::CURRENT_USER:
      case fugue_sqlParser::DATA:
      case fugue_sqlParser::DATABASE:
      case fugue_sqlParser::DATABASES:
      case fugue_sqlParser::DAY:
      case fugue_sqlParser::DBPROPERTIES:
      case fugue_sqlParser::DEFINED:
      case fugue_sqlParser::DELETE:
      case fugue_sqlParser::DELIMITED:
      case fugue_sqlParser::DESC:
      case fugue_sqlParser::DESCRIBE:
      case fugue_sqlParser::DFS:
      case fugue_sqlParser::DIRECTORIES:
      case fugue_sqlParser::DIRECTORY:
      case fugue_sqlParser::DISTINCT:
      case fugue_sqlParser::DISTRIBUTE:
      case fugue_sqlParser::DROP:
      case fugue_sqlParser::ELSE:
      case fugue_sqlParser::END:
      case fugue_sqlParser::ESCAPE:
      case fugue_sqlParser::ESCAPED:
      case fugue_sqlParser::EXCEPT:
      case fugue_sqlParser::EXCHANGE:
      case fugue_sqlParser::EXISTS:
      case fugue_sqlParser::EXPLAIN:
      case fugue_sqlParser::EXPORT:
      case fugue_sqlParser::EXTENDED:
      case fugue_sqlParser::EXTERNAL:
      case fugue_sqlParser::EXTRACT:
      case fugue_sqlParser::FALSE:
      case fugue_sqlParser::FETCH:
      case fugue_sqlParser::FIELDS:
      case fugue_sqlParser::FILTER:
      case fugue_sqlParser::FILEFORMAT:
      case fugue_sqlParser::FIRST:
      case fugue_sqlParser::FOLLOWING:
      case fugue_sqlParser::FOR:
      case fugue_sqlParser::FOREIGN:
      case fugue_sqlParser::FORMAT:
      case fugue_sqlParser::FORMATTED:
      case fugue_sqlParser::FROM:
      case fugue_sqlParser::FULL:
      case fugue_sqlParser::FUNCTION:
      case fugue_sqlParser::FUNCTIONS:
      case fugue_sqlParser::GLOBAL:
      case fugue_sqlParser::GRANT:
      case fugue_sqlParser::GROUP:
      case fugue_sqlParser::GROUPING:
      case fugue_sqlParser::HAVING:
      case fugue_sqlParser::HOUR:
      case fugue_sqlParser::IF:
      case fugue_sqlParser::IGNORE:
      case fugue_sqlParser::IMPORT:
      case fugue_sqlParser::IN:
      case fugue_sqlParser::INDEX:
      case fugue_sqlParser::INDEXES:
      case fugue_sqlParser::INNER:
      case fugue_sqlParser::INPATH:
      case fugue_sqlParser::INPUTFORMAT:
      case fugue_sqlParser::INSERT:
      case fugue_sqlParser::INTERSECT:
      case fugue_sqlParser::INTERVAL:
      case fugue_sqlParser::INTO:
      case fugue_sqlParser::IS:
      case fugue_sqlParser::ITEMS:
      case fugue_sqlParser::JOIN:
      case fugue_sqlParser::KEYS:
      case fugue_sqlParser::LAST:
      case fugue_sqlParser::LATERAL:
      case fugue_sqlParser::LAZY:
      case fugue_sqlParser::LEADING:
      case fugue_sqlParser::LEFT:
      case fugue_sqlParser::LIKE:
      case fugue_sqlParser::LIMIT:
      case fugue_sqlParser::LINES:
      case fugue_sqlParser::LIST:
      case fugue_sqlParser::LOAD:
      case fugue_sqlParser::LOCAL:
      case fugue_sqlParser::LOCATION:
      case fugue_sqlParser::LOCK:
      case fugue_sqlParser::LOCKS:
      case fugue_sqlParser::LOGICAL:
      case fugue_sqlParser::MACRO:
      case fugue_sqlParser::MAP:
      case fugue_sqlParser::MATCHED:
      case fugue_sqlParser::MERGE:
      case fugue_sqlParser::MINUTE:
      case fugue_sqlParser::MONTH:
      case fugue_sqlParser::MSCK:
      case fugue_sqlParser::NAMESPACE:
      case fugue_sqlParser::NAMESPACES:
      case fugue_sqlParser::NATURAL:
      case fugue_sqlParser::NO:
      case fugue_sqlParser::NOT:
      case fugue_sqlParser::THENULL:
      case fugue_sqlParser::THENULLS:
      case fugue_sqlParser::OF:
      case fugue_sqlParser::ON:
      case fugue_sqlParser::ONLY:
      case fugue_sqlParser::OPTION:
      case fugue_sqlParser::OPTIONS:
      case fugue_sqlParser::OR:
      case fugue_sqlParser::ORDER:
      case fugue_sqlParser::OUT:
      case fugue_sqlParser::OUTER:
      case fugue_sqlParser::OUTPUTFORMAT:
      case fugue_sqlParser::OVER:
      case fugue_sqlParser::OVERLAPS:
      case fugue_sqlParser::OVERLAY:
      case fugue_sqlParser::OVERWRITE:
      case fugue_sqlParser::PARTITION:
      case fugue_sqlParser::PARTITIONED:
      case fugue_sqlParser::PARTITIONS:
      case fugue_sqlParser::PERCENTLIT:
      case fugue_sqlParser::PIVOT:
      case fugue_sqlParser::PLACING:
      case fugue_sqlParser::POSITION:
      case fugue_sqlParser::PRECEDING:
      case fugue_sqlParser::PRIMARY:
      case fugue_sqlParser::PRINCIPALS:
      case fugue_sqlParser::PROPERTIES:
      case fugue_sqlParser::PURGE:
      case fugue_sqlParser::QUERY:
      case fugue_sqlParser::RANGE:
      case fugue_sqlParser::RECORDREADER:
      case fugue_sqlParser::RECORDWRITER:
      case fugue_sqlParser::RECOVER:
      case fugue_sqlParser::REDUCE:
      case fugue_sqlParser::REFERENCES:
      case fugue_sqlParser::REFRESH:
      case fugue_sqlParser::RENAME:
      case fugue_sqlParser::REPAIR:
      case fugue_sqlParser::REPLACE:
      case fugue_sqlParser::RESET:
      case fugue_sqlParser::RESTRICT:
      case fugue_sqlParser::REVOKE:
      case fugue_sqlParser::RIGHT:
      case fugue_sqlParser::RLIKE:
      case fugue_sqlParser::ROLE:
      case fugue_sqlParser::ROLES:
      case fugue_sqlParser::ROLLBACK:
      case fugue_sqlParser::ROLLUP:
      case fugue_sqlParser::ROW:
      case fugue_sqlParser::ROWS:
      case fugue_sqlParser::SCHEMA:
      case fugue_sqlParser::SECOND:
      case fugue_sqlParser::SELECT:
      case fugue_sqlParser::SEMI:
      case fugue_sqlParser::SEPARATED:
      case fugue_sqlParser::SERDE:
      case fugue_sqlParser::SERDEPROPERTIES:
      case fugue_sqlParser::SESSION_USER:
      case fugue_sqlParser::SET:
      case fugue_sqlParser::SETMINUS:
      case fugue_sqlParser::SETS:
      case fugue_sqlParser::SHOW:
      case fugue_sqlParser::SKEWED:
      case fugue_sqlParser::SOME:
      case fugue_sqlParser::SORT:
      case fugue_sqlParser::SORTED:
      case fugue_sqlParser::START:
      case fugue_sqlParser::STATISTICS:
      case fugue_sqlParser::STORED:
      case fugue_sqlParser::STRATIFY:
      case fugue_sqlParser::STRUCT:
      case fugue_sqlParser::SUBSTR:
      case fugue_sqlParser::SUBSTRING:
      case fugue_sqlParser::TABLE:
      case fugue_sqlParser::TABLES:
      case fugue_sqlParser::TABLESAMPLE:
      case fugue_sqlParser::TBLPROPERTIES:
      case fugue_sqlParser::TEMPORARY:
      case fugue_sqlParser::TERMINATED:
      case fugue_sqlParser::THEN:
      case fugue_sqlParser::TO:
      case fugue_sqlParser::TOUCH:
      case fugue_sqlParser::TRAILING:
      case fugue_sqlParser::TRANSACTION:
      case fugue_sqlParser::TRANSACTIONS:
      case fugue_sqlParser::TRANSFORM:
      case fugue_sqlParser::TRIM:
      case fugue_sqlParser::TRUE:
      case fugue_sqlParser::TRUNCATE:
      case fugue_sqlParser::TYPE:
      case fugue_sqlParser::UNARCHIVE:
      case fugue_sqlParser::UNBOUNDED:
      case fugue_sqlParser::UNCACHE:
      case fugue_sqlParser::UNION:
      case fugue_sqlParser::UNIQUE:
      case fugue_sqlParser::UNKNOWN:
      case fugue_sqlParser::UNLOCK:
      case fugue_sqlParser::UNSET:
      case fugue_sqlParser::UPDATE:
      case fugue_sqlParser::USE:
      case fugue_sqlParser::USER:
      case fugue_sqlParser::USING:
      case fugue_sqlParser::VALUES:
      case fugue_sqlParser::VIEW:
      case fugue_sqlParser::VIEWS:
      case fugue_sqlParser::WHEN:
      case fugue_sqlParser::WHERE:
      case fugue_sqlParser::WINDOW:
      case fugue_sqlParser::WITH:
      case fugue_sqlParser::YEAR:
      case fugue_sqlParser::DIV:
      case fugue_sqlParser::IDENTIFIER:
      case fugue_sqlParser::BACKQUOTED_IDENTIFIER: {
        setState(831);
        antlrcpp::downCast<FugueDataFrameMemberContext *>(_localctx)->key = fugueIdentifier();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(834);
    match(fugue_sqlParser::T__5);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FugueAssignmentContext ------------------------------------------------------------------

fugue_sqlParser::FugueAssignmentContext::FugueAssignmentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

fugue_sqlParser::FugueIdentifierContext* fugue_sqlParser::FugueAssignmentContext::fugueIdentifier() {
  return getRuleContext<fugue_sqlParser::FugueIdentifierContext>(0);
}

fugue_sqlParser::FugueAssignmentSignContext* fugue_sqlParser::FugueAssignmentContext::fugueAssignmentSign() {
  return getRuleContext<fugue_sqlParser::FugueAssignmentSignContext>(0);
}


size_t fugue_sqlParser::FugueAssignmentContext::getRuleIndex() const {
  return fugue_sqlParser::RuleFugueAssignment;
}


antlrcpp::Any fugue_sqlParser::FugueAssignmentContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitFugueAssignment(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::FugueAssignmentContext* fugue_sqlParser::fugueAssignment() {
  FugueAssignmentContext *_localctx = _tracker.createInstance<FugueAssignmentContext>(_ctx, getState());
  enterRule(_localctx, 76, fugue_sqlParser::RuleFugueAssignment);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(836);
    antlrcpp::downCast<FugueAssignmentContext *>(_localctx)->varname = fugueIdentifier();
    setState(837);
    antlrcpp::downCast<FugueAssignmentContext *>(_localctx)->sign = fugueAssignmentSign();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FugueAssignmentSignContext ------------------------------------------------------------------

fugue_sqlParser::FugueAssignmentSignContext::FugueAssignmentSignContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* fugue_sqlParser::FugueAssignmentSignContext::EQUAL() {
  return getToken(fugue_sqlParser::EQUAL, 0);
}


size_t fugue_sqlParser::FugueAssignmentSignContext::getRuleIndex() const {
  return fugue_sqlParser::RuleFugueAssignmentSign;
}


antlrcpp::Any fugue_sqlParser::FugueAssignmentSignContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitFugueAssignmentSign(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::FugueAssignmentSignContext* fugue_sqlParser::fugueAssignmentSign() {
  FugueAssignmentSignContext *_localctx = _tracker.createInstance<FugueAssignmentSignContext>(_ctx, getState());
  enterRule(_localctx, 78, fugue_sqlParser::RuleFugueAssignmentSign);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(839);
    match(fugue_sqlParser::EQUAL);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FugueSingleOutputExtensionCommonWildContext ------------------------------------------------------------------

fugue_sqlParser::FugueSingleOutputExtensionCommonWildContext::FugueSingleOutputExtensionCommonWildContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* fugue_sqlParser::FugueSingleOutputExtensionCommonWildContext::USING() {
  return getToken(fugue_sqlParser::USING, 0);
}

fugue_sqlParser::FugueExtensionContext* fugue_sqlParser::FugueSingleOutputExtensionCommonWildContext::fugueExtension() {
  return getRuleContext<fugue_sqlParser::FugueExtensionContext>(0);
}

tree::TerminalNode* fugue_sqlParser::FugueSingleOutputExtensionCommonWildContext::SCHEMA() {
  return getToken(fugue_sqlParser::SCHEMA, 0);
}

fugue_sqlParser::FugueParamsContext* fugue_sqlParser::FugueSingleOutputExtensionCommonWildContext::fugueParams() {
  return getRuleContext<fugue_sqlParser::FugueParamsContext>(0);
}

fugue_sqlParser::FugueWildSchemaContext* fugue_sqlParser::FugueSingleOutputExtensionCommonWildContext::fugueWildSchema() {
  return getRuleContext<fugue_sqlParser::FugueWildSchemaContext>(0);
}


size_t fugue_sqlParser::FugueSingleOutputExtensionCommonWildContext::getRuleIndex() const {
  return fugue_sqlParser::RuleFugueSingleOutputExtensionCommonWild;
}


antlrcpp::Any fugue_sqlParser::FugueSingleOutputExtensionCommonWildContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitFugueSingleOutputExtensionCommonWild(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::FugueSingleOutputExtensionCommonWildContext* fugue_sqlParser::fugueSingleOutputExtensionCommonWild() {
  FugueSingleOutputExtensionCommonWildContext *_localctx = _tracker.createInstance<FugueSingleOutputExtensionCommonWildContext>(_ctx, getState());
  enterRule(_localctx, 80, fugue_sqlParser::RuleFugueSingleOutputExtensionCommonWild);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(841);
    match(fugue_sqlParser::USING);
    setState(842);
    antlrcpp::downCast<FugueSingleOutputExtensionCommonWildContext *>(_localctx)->fugueUsing = fugueExtension();
    setState(844);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 86, _ctx)) {
    case 1: {
      setState(843);
      antlrcpp::downCast<FugueSingleOutputExtensionCommonWildContext *>(_localctx)->params = fugueParams();
      break;
    }

    default:
      break;
    }
    setState(848);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 87, _ctx)) {
    case 1: {
      setState(846);
      match(fugue_sqlParser::SCHEMA);
      setState(847);
      antlrcpp::downCast<FugueSingleOutputExtensionCommonWildContext *>(_localctx)->schema = fugueWildSchema();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FugueSingleOutputExtensionCommonContext ------------------------------------------------------------------

fugue_sqlParser::FugueSingleOutputExtensionCommonContext::FugueSingleOutputExtensionCommonContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* fugue_sqlParser::FugueSingleOutputExtensionCommonContext::USING() {
  return getToken(fugue_sqlParser::USING, 0);
}

fugue_sqlParser::FugueExtensionContext* fugue_sqlParser::FugueSingleOutputExtensionCommonContext::fugueExtension() {
  return getRuleContext<fugue_sqlParser::FugueExtensionContext>(0);
}

tree::TerminalNode* fugue_sqlParser::FugueSingleOutputExtensionCommonContext::SCHEMA() {
  return getToken(fugue_sqlParser::SCHEMA, 0);
}

fugue_sqlParser::FugueParamsContext* fugue_sqlParser::FugueSingleOutputExtensionCommonContext::fugueParams() {
  return getRuleContext<fugue_sqlParser::FugueParamsContext>(0);
}

fugue_sqlParser::FugueSchemaContext* fugue_sqlParser::FugueSingleOutputExtensionCommonContext::fugueSchema() {
  return getRuleContext<fugue_sqlParser::FugueSchemaContext>(0);
}


size_t fugue_sqlParser::FugueSingleOutputExtensionCommonContext::getRuleIndex() const {
  return fugue_sqlParser::RuleFugueSingleOutputExtensionCommon;
}


antlrcpp::Any fugue_sqlParser::FugueSingleOutputExtensionCommonContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitFugueSingleOutputExtensionCommon(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::FugueSingleOutputExtensionCommonContext* fugue_sqlParser::fugueSingleOutputExtensionCommon() {
  FugueSingleOutputExtensionCommonContext *_localctx = _tracker.createInstance<FugueSingleOutputExtensionCommonContext>(_ctx, getState());
  enterRule(_localctx, 82, fugue_sqlParser::RuleFugueSingleOutputExtensionCommon);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(850);
    match(fugue_sqlParser::USING);
    setState(851);
    antlrcpp::downCast<FugueSingleOutputExtensionCommonContext *>(_localctx)->fugueUsing = fugueExtension();
    setState(853);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 88, _ctx)) {
    case 1: {
      setState(852);
      antlrcpp::downCast<FugueSingleOutputExtensionCommonContext *>(_localctx)->params = fugueParams();
      break;
    }

    default:
      break;
    }
    setState(857);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 89, _ctx)) {
    case 1: {
      setState(855);
      match(fugue_sqlParser::SCHEMA);
      setState(856);
      antlrcpp::downCast<FugueSingleOutputExtensionCommonContext *>(_localctx)->schema = fugueSchema();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FugueExtensionContext ------------------------------------------------------------------

fugue_sqlParser::FugueExtensionContext::FugueExtensionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<fugue_sqlParser::FugueIdentifierContext *> fugue_sqlParser::FugueExtensionContext::fugueIdentifier() {
  return getRuleContexts<fugue_sqlParser::FugueIdentifierContext>();
}

fugue_sqlParser::FugueIdentifierContext* fugue_sqlParser::FugueExtensionContext::fugueIdentifier(size_t i) {
  return getRuleContext<fugue_sqlParser::FugueIdentifierContext>(i);
}


size_t fugue_sqlParser::FugueExtensionContext::getRuleIndex() const {
  return fugue_sqlParser::RuleFugueExtension;
}


antlrcpp::Any fugue_sqlParser::FugueExtensionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitFugueExtension(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::FugueExtensionContext* fugue_sqlParser::fugueExtension() {
  FugueExtensionContext *_localctx = _tracker.createInstance<FugueExtensionContext>(_ctx, getState());
  enterRule(_localctx, 84, fugue_sqlParser::RuleFugueExtension);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(859);
    fugueIdentifier();
    setState(864);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 90, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(860);
        match(fugue_sqlParser::T__6);
        setState(861);
        fugueIdentifier(); 
      }
      setState(866);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 90, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FugueSampleMethodContext ------------------------------------------------------------------

fugue_sqlParser::FugueSampleMethodContext::FugueSampleMethodContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* fugue_sqlParser::FugueSampleMethodContext::PERCENTLIT() {
  return getToken(fugue_sqlParser::PERCENTLIT, 0);
}

tree::TerminalNode* fugue_sqlParser::FugueSampleMethodContext::INTEGER_VALUE() {
  return getToken(fugue_sqlParser::INTEGER_VALUE, 0);
}

tree::TerminalNode* fugue_sqlParser::FugueSampleMethodContext::DECIMAL_VALUE() {
  return getToken(fugue_sqlParser::DECIMAL_VALUE, 0);
}

tree::TerminalNode* fugue_sqlParser::FugueSampleMethodContext::ROWS() {
  return getToken(fugue_sqlParser::ROWS, 0);
}


size_t fugue_sqlParser::FugueSampleMethodContext::getRuleIndex() const {
  return fugue_sqlParser::RuleFugueSampleMethod;
}


antlrcpp::Any fugue_sqlParser::FugueSampleMethodContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitFugueSampleMethod(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::FugueSampleMethodContext* fugue_sqlParser::fugueSampleMethod() {
  FugueSampleMethodContext *_localctx = _tracker.createInstance<FugueSampleMethodContext>(_ctx, getState());
  enterRule(_localctx, 86, fugue_sqlParser::RuleFugueSampleMethod);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(871);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 91, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(867);
      antlrcpp::downCast<FugueSampleMethodContext *>(_localctx)->percentage = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == fugue_sqlParser::INTEGER_VALUE

      || _la == fugue_sqlParser::DECIMAL_VALUE)) {
        antlrcpp::downCast<FugueSampleMethodContext *>(_localctx)->percentage = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(868);
      match(fugue_sqlParser::PERCENTLIT);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(869);
      antlrcpp::downCast<FugueSampleMethodContext *>(_localctx)->rows = match(fugue_sqlParser::INTEGER_VALUE);
      setState(870);
      match(fugue_sqlParser::ROWS);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FugueZipTypeContext ------------------------------------------------------------------

fugue_sqlParser::FugueZipTypeContext::FugueZipTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* fugue_sqlParser::FugueZipTypeContext::CROSS() {
  return getToken(fugue_sqlParser::CROSS, 0);
}

tree::TerminalNode* fugue_sqlParser::FugueZipTypeContext::INNER() {
  return getToken(fugue_sqlParser::INNER, 0);
}

tree::TerminalNode* fugue_sqlParser::FugueZipTypeContext::LEFT() {
  return getToken(fugue_sqlParser::LEFT, 0);
}

tree::TerminalNode* fugue_sqlParser::FugueZipTypeContext::OUTER() {
  return getToken(fugue_sqlParser::OUTER, 0);
}

tree::TerminalNode* fugue_sqlParser::FugueZipTypeContext::RIGHT() {
  return getToken(fugue_sqlParser::RIGHT, 0);
}

tree::TerminalNode* fugue_sqlParser::FugueZipTypeContext::FULL() {
  return getToken(fugue_sqlParser::FULL, 0);
}


size_t fugue_sqlParser::FugueZipTypeContext::getRuleIndex() const {
  return fugue_sqlParser::RuleFugueZipType;
}


antlrcpp::Any fugue_sqlParser::FugueZipTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitFugueZipType(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::FugueZipTypeContext* fugue_sqlParser::fugueZipType() {
  FugueZipTypeContext *_localctx = _tracker.createInstance<FugueZipTypeContext>(_ctx, getState());
  enterRule(_localctx, 88, fugue_sqlParser::RuleFugueZipType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(881);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case fugue_sqlParser::CROSS: {
        enterOuterAlt(_localctx, 1);
        setState(873);
        match(fugue_sqlParser::CROSS);
        break;
      }

      case fugue_sqlParser::INNER: {
        enterOuterAlt(_localctx, 2);
        setState(874);
        match(fugue_sqlParser::INNER);
        break;
      }

      case fugue_sqlParser::LEFT: {
        enterOuterAlt(_localctx, 3);
        setState(875);
        match(fugue_sqlParser::LEFT);
        setState(876);
        match(fugue_sqlParser::OUTER);
        break;
      }

      case fugue_sqlParser::RIGHT: {
        enterOuterAlt(_localctx, 4);
        setState(877);
        match(fugue_sqlParser::RIGHT);
        setState(878);
        match(fugue_sqlParser::OUTER);
        break;
      }

      case fugue_sqlParser::FULL: {
        enterOuterAlt(_localctx, 5);
        setState(879);
        match(fugue_sqlParser::FULL);
        setState(880);
        match(fugue_sqlParser::OUTER);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FuguePrepartitionContext ------------------------------------------------------------------

fugue_sqlParser::FuguePrepartitionContext::FuguePrepartitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* fugue_sqlParser::FuguePrepartitionContext::PREPARTITION() {
  return getToken(fugue_sqlParser::PREPARTITION, 0);
}

fugue_sqlParser::FuguePartitionNumContext* fugue_sqlParser::FuguePrepartitionContext::fuguePartitionNum() {
  return getRuleContext<fugue_sqlParser::FuguePartitionNumContext>(0);
}

tree::TerminalNode* fugue_sqlParser::FuguePrepartitionContext::BY() {
  return getToken(fugue_sqlParser::BY, 0);
}

tree::TerminalNode* fugue_sqlParser::FuguePrepartitionContext::PRESORT() {
  return getToken(fugue_sqlParser::PRESORT, 0);
}

fugue_sqlParser::FuguePartitionAlgoContext* fugue_sqlParser::FuguePrepartitionContext::fuguePartitionAlgo() {
  return getRuleContext<fugue_sqlParser::FuguePartitionAlgoContext>(0);
}

fugue_sqlParser::FugueColsContext* fugue_sqlParser::FuguePrepartitionContext::fugueCols() {
  return getRuleContext<fugue_sqlParser::FugueColsContext>(0);
}

fugue_sqlParser::FugueColsSortContext* fugue_sqlParser::FuguePrepartitionContext::fugueColsSort() {
  return getRuleContext<fugue_sqlParser::FugueColsSortContext>(0);
}


size_t fugue_sqlParser::FuguePrepartitionContext::getRuleIndex() const {
  return fugue_sqlParser::RuleFuguePrepartition;
}


antlrcpp::Any fugue_sqlParser::FuguePrepartitionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitFuguePrepartition(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::FuguePrepartitionContext* fugue_sqlParser::fuguePrepartition() {
  FuguePrepartitionContext *_localctx = _tracker.createInstance<FuguePrepartitionContext>(_ctx, getState());
  enterRule(_localctx, 90, fugue_sqlParser::RuleFuguePrepartition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(906);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 98, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(884);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & ((1ULL << fugue_sqlParser::HASH)
        | (1ULL << fugue_sqlParser::RAND)
        | (1ULL << fugue_sqlParser::EVEN))) != 0)) {
        setState(883);
        antlrcpp::downCast<FuguePrepartitionContext *>(_localctx)->algo = fuguePartitionAlgo();
      }
      setState(886);
      match(fugue_sqlParser::PREPARTITION);
      setState(887);
      antlrcpp::downCast<FuguePrepartitionContext *>(_localctx)->num = fuguePartitionNum(0);
      setState(890);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 94, _ctx)) {
      case 1: {
        setState(888);
        match(fugue_sqlParser::BY);
        setState(889);
        antlrcpp::downCast<FuguePrepartitionContext *>(_localctx)->by = fugueCols();
        break;
      }

      default:
        break;
      }
      setState(894);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 95, _ctx)) {
      case 1: {
        setState(892);
        match(fugue_sqlParser::PRESORT);
        setState(893);
        antlrcpp::downCast<FuguePrepartitionContext *>(_localctx)->presort = fugueColsSort();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(897);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & ((1ULL << fugue_sqlParser::HASH)
        | (1ULL << fugue_sqlParser::RAND)
        | (1ULL << fugue_sqlParser::EVEN))) != 0)) {
        setState(896);
        antlrcpp::downCast<FuguePrepartitionContext *>(_localctx)->algo = fuguePartitionAlgo();
      }
      setState(899);
      match(fugue_sqlParser::PREPARTITION);
      setState(900);
      match(fugue_sqlParser::BY);
      setState(901);
      antlrcpp::downCast<FuguePrepartitionContext *>(_localctx)->by = fugueCols();
      setState(904);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 97, _ctx)) {
      case 1: {
        setState(902);
        match(fugue_sqlParser::PRESORT);
        setState(903);
        antlrcpp::downCast<FuguePrepartitionContext *>(_localctx)->presort = fugueColsSort();
        break;
      }

      default:
        break;
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FuguePartitionAlgoContext ------------------------------------------------------------------

fugue_sqlParser::FuguePartitionAlgoContext::FuguePartitionAlgoContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* fugue_sqlParser::FuguePartitionAlgoContext::HASH() {
  return getToken(fugue_sqlParser::HASH, 0);
}

tree::TerminalNode* fugue_sqlParser::FuguePartitionAlgoContext::RAND() {
  return getToken(fugue_sqlParser::RAND, 0);
}

tree::TerminalNode* fugue_sqlParser::FuguePartitionAlgoContext::EVEN() {
  return getToken(fugue_sqlParser::EVEN, 0);
}


size_t fugue_sqlParser::FuguePartitionAlgoContext::getRuleIndex() const {
  return fugue_sqlParser::RuleFuguePartitionAlgo;
}


antlrcpp::Any fugue_sqlParser::FuguePartitionAlgoContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitFuguePartitionAlgo(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::FuguePartitionAlgoContext* fugue_sqlParser::fuguePartitionAlgo() {
  FuguePartitionAlgoContext *_localctx = _tracker.createInstance<FuguePartitionAlgoContext>(_ctx, getState());
  enterRule(_localctx, 92, fugue_sqlParser::RuleFuguePartitionAlgo);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(908);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << fugue_sqlParser::HASH)
      | (1ULL << fugue_sqlParser::RAND)
      | (1ULL << fugue_sqlParser::EVEN))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FuguePartitionNumContext ------------------------------------------------------------------

fugue_sqlParser::FuguePartitionNumContext::FuguePartitionNumContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

fugue_sqlParser::FuguePartitionNumberContext* fugue_sqlParser::FuguePartitionNumContext::fuguePartitionNumber() {
  return getRuleContext<fugue_sqlParser::FuguePartitionNumberContext>(0);
}

std::vector<fugue_sqlParser::FuguePartitionNumContext *> fugue_sqlParser::FuguePartitionNumContext::fuguePartitionNum() {
  return getRuleContexts<fugue_sqlParser::FuguePartitionNumContext>();
}

fugue_sqlParser::FuguePartitionNumContext* fugue_sqlParser::FuguePartitionNumContext::fuguePartitionNum(size_t i) {
  return getRuleContext<fugue_sqlParser::FuguePartitionNumContext>(i);
}

tree::TerminalNode* fugue_sqlParser::FuguePartitionNumContext::PLUS() {
  return getToken(fugue_sqlParser::PLUS, 0);
}

tree::TerminalNode* fugue_sqlParser::FuguePartitionNumContext::MINUS() {
  return getToken(fugue_sqlParser::MINUS, 0);
}

tree::TerminalNode* fugue_sqlParser::FuguePartitionNumContext::ASTERISK() {
  return getToken(fugue_sqlParser::ASTERISK, 0);
}

tree::TerminalNode* fugue_sqlParser::FuguePartitionNumContext::SLASH() {
  return getToken(fugue_sqlParser::SLASH, 0);
}


size_t fugue_sqlParser::FuguePartitionNumContext::getRuleIndex() const {
  return fugue_sqlParser::RuleFuguePartitionNum;
}


antlrcpp::Any fugue_sqlParser::FuguePartitionNumContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitFuguePartitionNum(this);
  else
    return visitor->visitChildren(this);
}


fugue_sqlParser::FuguePartitionNumContext* fugue_sqlParser::fuguePartitionNum() {
   return fuguePartitionNum(0);
}

fugue_sqlParser::FuguePartitionNumContext* fugue_sqlParser::fuguePartitionNum(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  fugue_sqlParser::FuguePartitionNumContext *_localctx = _tracker.createInstance<FuguePartitionNumContext>(_ctx, parentState);
  fugue_sqlParser::FuguePartitionNumContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 94;
  enterRecursionRule(_localctx, 94, fugue_sqlParser::RuleFuguePartitionNum, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(916);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case fugue_sqlParser::ROWCOUNT:
      case fugue_sqlParser::CONCURRENCY:
      case fugue_sqlParser::MINUS:
      case fugue_sqlParser::INTEGER_VALUE:
      case fugue_sqlParser::DECIMAL_VALUE: {
        setState(911);
        fuguePartitionNumber();
        break;
      }

      case fugue_sqlParser::T__2: {
        setState(912);
        match(fugue_sqlParser::T__2);
        setState(913);
        fuguePartitionNum(0);
        setState(914);
        match(fugue_sqlParser::T__3);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    _ctx->stop = _input->LT(-1);
    setState(923);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 100, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<FuguePartitionNumContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleFuguePartitionNum);
        setState(918);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(919);
        _la = _input->LA(1);
        if (!(((((_la - 314) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 314)) & ((1ULL << (fugue_sqlParser::PLUS - 314))
          | (1ULL << (fugue_sqlParser::MINUS - 314))
          | (1ULL << (fugue_sqlParser::ASTERISK - 314))
          | (1ULL << (fugue_sqlParser::SLASH - 314)))) != 0))) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(920);
        fuguePartitionNum(2); 
      }
      setState(925);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 100, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- FuguePartitionNumberContext ------------------------------------------------------------------

fugue_sqlParser::FuguePartitionNumberContext::FuguePartitionNumberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* fugue_sqlParser::FuguePartitionNumberContext::DECIMAL_VALUE() {
  return getToken(fugue_sqlParser::DECIMAL_VALUE, 0);
}

tree::TerminalNode* fugue_sqlParser::FuguePartitionNumberContext::MINUS() {
  return getToken(fugue_sqlParser::MINUS, 0);
}

tree::TerminalNode* fugue_sqlParser::FuguePartitionNumberContext::INTEGER_VALUE() {
  return getToken(fugue_sqlParser::INTEGER_VALUE, 0);
}

tree::TerminalNode* fugue_sqlParser::FuguePartitionNumberContext::ROWCOUNT() {
  return getToken(fugue_sqlParser::ROWCOUNT, 0);
}

tree::TerminalNode* fugue_sqlParser::FuguePartitionNumberContext::CONCURRENCY() {
  return getToken(fugue_sqlParser::CONCURRENCY, 0);
}


size_t fugue_sqlParser::FuguePartitionNumberContext::getRuleIndex() const {
  return fugue_sqlParser::RuleFuguePartitionNumber;
}


antlrcpp::Any fugue_sqlParser::FuguePartitionNumberContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitFuguePartitionNumber(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::FuguePartitionNumberContext* fugue_sqlParser::fuguePartitionNumber() {
  FuguePartitionNumberContext *_localctx = _tracker.createInstance<FuguePartitionNumberContext>(_ctx, getState());
  enterRule(_localctx, 96, fugue_sqlParser::RuleFuguePartitionNumber);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(936);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 103, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(927);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::MINUS) {
        setState(926);
        match(fugue_sqlParser::MINUS);
      }
      setState(929);
      match(fugue_sqlParser::DECIMAL_VALUE);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(931);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::MINUS) {
        setState(930);
        match(fugue_sqlParser::MINUS);
      }
      setState(933);
      match(fugue_sqlParser::INTEGER_VALUE);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(934);
      match(fugue_sqlParser::ROWCOUNT);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(935);
      match(fugue_sqlParser::CONCURRENCY);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FugueParamsContext ------------------------------------------------------------------

fugue_sqlParser::FugueParamsContext::FugueParamsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t fugue_sqlParser::FugueParamsContext::getRuleIndex() const {
  return fugue_sqlParser::RuleFugueParams;
}

void fugue_sqlParser::FugueParamsContext::copyFrom(FugueParamsContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- FugueParamsPairsContext ------------------------------------------------------------------

tree::TerminalNode* fugue_sqlParser::FugueParamsPairsContext::PARAMS() {
  return getToken(fugue_sqlParser::PARAMS, 0);
}

fugue_sqlParser::FugueJsonPairsContext* fugue_sqlParser::FugueParamsPairsContext::fugueJsonPairs() {
  return getRuleContext<fugue_sqlParser::FugueJsonPairsContext>(0);
}

fugue_sqlParser::FugueParamsPairsContext::FugueParamsPairsContext(FugueParamsContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::FugueParamsPairsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitFugueParamsPairs(this);
  else
    return visitor->visitChildren(this);
}
//----------------- FugueParamsObjContext ------------------------------------------------------------------

fugue_sqlParser::FugueJsonObjContext* fugue_sqlParser::FugueParamsObjContext::fugueJsonObj() {
  return getRuleContext<fugue_sqlParser::FugueJsonObjContext>(0);
}

tree::TerminalNode* fugue_sqlParser::FugueParamsObjContext::PARAMS() {
  return getToken(fugue_sqlParser::PARAMS, 0);
}

fugue_sqlParser::FugueParamsObjContext::FugueParamsObjContext(FugueParamsContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::FugueParamsObjContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitFugueParamsObj(this);
  else
    return visitor->visitChildren(this);
}
fugue_sqlParser::FugueParamsContext* fugue_sqlParser::fugueParams() {
  FugueParamsContext *_localctx = _tracker.createInstance<FugueParamsContext>(_ctx, getState());
  enterRule(_localctx, 98, fugue_sqlParser::RuleFugueParams);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(944);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 105, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<fugue_sqlParser::FugueParamsPairsContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(938);
      match(fugue_sqlParser::PARAMS);
      setState(939);
      antlrcpp::downCast<FugueParamsPairsContext *>(_localctx)->pairs = fugueJsonPairs();
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<fugue_sqlParser::FugueParamsObjContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(941);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::PARAMS) {
        setState(940);
        match(fugue_sqlParser::PARAMS);
      }
      setState(943);
      antlrcpp::downCast<FugueParamsObjContext *>(_localctx)->obj = fugueJsonObj();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FugueColsContext ------------------------------------------------------------------

fugue_sqlParser::FugueColsContext::FugueColsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<fugue_sqlParser::FugueColumnIdentifierContext *> fugue_sqlParser::FugueColsContext::fugueColumnIdentifier() {
  return getRuleContexts<fugue_sqlParser::FugueColumnIdentifierContext>();
}

fugue_sqlParser::FugueColumnIdentifierContext* fugue_sqlParser::FugueColsContext::fugueColumnIdentifier(size_t i) {
  return getRuleContext<fugue_sqlParser::FugueColumnIdentifierContext>(i);
}


size_t fugue_sqlParser::FugueColsContext::getRuleIndex() const {
  return fugue_sqlParser::RuleFugueCols;
}


antlrcpp::Any fugue_sqlParser::FugueColsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitFugueCols(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::FugueColsContext* fugue_sqlParser::fugueCols() {
  FugueColsContext *_localctx = _tracker.createInstance<FugueColsContext>(_ctx, getState());
  enterRule(_localctx, 100, fugue_sqlParser::RuleFugueCols);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(946);
    fugueColumnIdentifier();
    setState(951);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 106, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(947);
        match(fugue_sqlParser::T__0);
        setState(948);
        fugueColumnIdentifier(); 
      }
      setState(953);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 106, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FugueColsSortContext ------------------------------------------------------------------

fugue_sqlParser::FugueColsSortContext::FugueColsSortContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<fugue_sqlParser::FugueColSortContext *> fugue_sqlParser::FugueColsSortContext::fugueColSort() {
  return getRuleContexts<fugue_sqlParser::FugueColSortContext>();
}

fugue_sqlParser::FugueColSortContext* fugue_sqlParser::FugueColsSortContext::fugueColSort(size_t i) {
  return getRuleContext<fugue_sqlParser::FugueColSortContext>(i);
}


size_t fugue_sqlParser::FugueColsSortContext::getRuleIndex() const {
  return fugue_sqlParser::RuleFugueColsSort;
}


antlrcpp::Any fugue_sqlParser::FugueColsSortContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitFugueColsSort(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::FugueColsSortContext* fugue_sqlParser::fugueColsSort() {
  FugueColsSortContext *_localctx = _tracker.createInstance<FugueColsSortContext>(_ctx, getState());
  enterRule(_localctx, 102, fugue_sqlParser::RuleFugueColsSort);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(954);
    fugueColSort();
    setState(959);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 107, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(955);
        match(fugue_sqlParser::T__0);
        setState(956);
        fugueColSort(); 
      }
      setState(961);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 107, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FugueColSortContext ------------------------------------------------------------------

fugue_sqlParser::FugueColSortContext::FugueColSortContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

fugue_sqlParser::FugueColumnIdentifierContext* fugue_sqlParser::FugueColSortContext::fugueColumnIdentifier() {
  return getRuleContext<fugue_sqlParser::FugueColumnIdentifierContext>(0);
}

tree::TerminalNode* fugue_sqlParser::FugueColSortContext::ASC() {
  return getToken(fugue_sqlParser::ASC, 0);
}

tree::TerminalNode* fugue_sqlParser::FugueColSortContext::DESC() {
  return getToken(fugue_sqlParser::DESC, 0);
}


size_t fugue_sqlParser::FugueColSortContext::getRuleIndex() const {
  return fugue_sqlParser::RuleFugueColSort;
}


antlrcpp::Any fugue_sqlParser::FugueColSortContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitFugueColSort(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::FugueColSortContext* fugue_sqlParser::fugueColSort() {
  FugueColSortContext *_localctx = _tracker.createInstance<FugueColSortContext>(_ctx, getState());
  enterRule(_localctx, 104, fugue_sqlParser::RuleFugueColSort);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(962);
    fugueColumnIdentifier();
    setState(964);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 108, _ctx)) {
    case 1: {
      setState(963);
      _la = _input->LA(1);
      if (!(_la == fugue_sqlParser::ASC

      || _la == fugue_sqlParser::DESC)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FugueColumnIdentifierContext ------------------------------------------------------------------

fugue_sqlParser::FugueColumnIdentifierContext::FugueColumnIdentifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

fugue_sqlParser::FugueIdentifierContext* fugue_sqlParser::FugueColumnIdentifierContext::fugueIdentifier() {
  return getRuleContext<fugue_sqlParser::FugueIdentifierContext>(0);
}


size_t fugue_sqlParser::FugueColumnIdentifierContext::getRuleIndex() const {
  return fugue_sqlParser::RuleFugueColumnIdentifier;
}


antlrcpp::Any fugue_sqlParser::FugueColumnIdentifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitFugueColumnIdentifier(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::FugueColumnIdentifierContext* fugue_sqlParser::fugueColumnIdentifier() {
  FugueColumnIdentifierContext *_localctx = _tracker.createInstance<FugueColumnIdentifierContext>(_ctx, getState());
  enterRule(_localctx, 106, fugue_sqlParser::RuleFugueColumnIdentifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(966);
    fugueIdentifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FugueRenameExpressionContext ------------------------------------------------------------------

fugue_sqlParser::FugueRenameExpressionContext::FugueRenameExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<fugue_sqlParser::FugueRenamePairContext *> fugue_sqlParser::FugueRenameExpressionContext::fugueRenamePair() {
  return getRuleContexts<fugue_sqlParser::FugueRenamePairContext>();
}

fugue_sqlParser::FugueRenamePairContext* fugue_sqlParser::FugueRenameExpressionContext::fugueRenamePair(size_t i) {
  return getRuleContext<fugue_sqlParser::FugueRenamePairContext>(i);
}


size_t fugue_sqlParser::FugueRenameExpressionContext::getRuleIndex() const {
  return fugue_sqlParser::RuleFugueRenameExpression;
}


antlrcpp::Any fugue_sqlParser::FugueRenameExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitFugueRenameExpression(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::FugueRenameExpressionContext* fugue_sqlParser::fugueRenameExpression() {
  FugueRenameExpressionContext *_localctx = _tracker.createInstance<FugueRenameExpressionContext>(_ctx, getState());
  enterRule(_localctx, 108, fugue_sqlParser::RuleFugueRenameExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(968);
    fugueRenamePair();
    setState(973);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 109, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(969);
        match(fugue_sqlParser::T__0);
        setState(970);
        fugueRenamePair(); 
      }
      setState(975);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 109, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FugueWildSchemaContext ------------------------------------------------------------------

fugue_sqlParser::FugueWildSchemaContext::FugueWildSchemaContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<fugue_sqlParser::FugueWildSchemaPairContext *> fugue_sqlParser::FugueWildSchemaContext::fugueWildSchemaPair() {
  return getRuleContexts<fugue_sqlParser::FugueWildSchemaPairContext>();
}

fugue_sqlParser::FugueWildSchemaPairContext* fugue_sqlParser::FugueWildSchemaContext::fugueWildSchemaPair(size_t i) {
  return getRuleContext<fugue_sqlParser::FugueWildSchemaPairContext>(i);
}

std::vector<fugue_sqlParser::FugueSchemaOpContext *> fugue_sqlParser::FugueWildSchemaContext::fugueSchemaOp() {
  return getRuleContexts<fugue_sqlParser::FugueSchemaOpContext>();
}

fugue_sqlParser::FugueSchemaOpContext* fugue_sqlParser::FugueWildSchemaContext::fugueSchemaOp(size_t i) {
  return getRuleContext<fugue_sqlParser::FugueSchemaOpContext>(i);
}


size_t fugue_sqlParser::FugueWildSchemaContext::getRuleIndex() const {
  return fugue_sqlParser::RuleFugueWildSchema;
}


antlrcpp::Any fugue_sqlParser::FugueWildSchemaContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitFugueWildSchema(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::FugueWildSchemaContext* fugue_sqlParser::fugueWildSchema() {
  FugueWildSchemaContext *_localctx = _tracker.createInstance<FugueWildSchemaContext>(_ctx, getState());
  enterRule(_localctx, 110, fugue_sqlParser::RuleFugueWildSchema);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(976);
    fugueWildSchemaPair();
    setState(981);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 110, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(977);
        match(fugue_sqlParser::T__0);
        setState(978);
        fugueWildSchemaPair(); 
      }
      setState(983);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 110, _ctx);
    }
    setState(987);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 111, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(984);
        fugueSchemaOp(); 
      }
      setState(989);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 111, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FugueWildSchemaPairContext ------------------------------------------------------------------

fugue_sqlParser::FugueWildSchemaPairContext::FugueWildSchemaPairContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

fugue_sqlParser::FugueSchemaPairContext* fugue_sqlParser::FugueWildSchemaPairContext::fugueSchemaPair() {
  return getRuleContext<fugue_sqlParser::FugueSchemaPairContext>(0);
}

tree::TerminalNode* fugue_sqlParser::FugueWildSchemaPairContext::ASTERISK() {
  return getToken(fugue_sqlParser::ASTERISK, 0);
}


size_t fugue_sqlParser::FugueWildSchemaPairContext::getRuleIndex() const {
  return fugue_sqlParser::RuleFugueWildSchemaPair;
}


antlrcpp::Any fugue_sqlParser::FugueWildSchemaPairContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitFugueWildSchemaPair(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::FugueWildSchemaPairContext* fugue_sqlParser::fugueWildSchemaPair() {
  FugueWildSchemaPairContext *_localctx = _tracker.createInstance<FugueWildSchemaPairContext>(_ctx, getState());
  enterRule(_localctx, 112, fugue_sqlParser::RuleFugueWildSchemaPair);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(992);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case fugue_sqlParser::ADD:
      case fugue_sqlParser::AFTER:
      case fugue_sqlParser::ALL:
      case fugue_sqlParser::ALTER:
      case fugue_sqlParser::ANALYZE:
      case fugue_sqlParser::AND:
      case fugue_sqlParser::ANTI:
      case fugue_sqlParser::ANY:
      case fugue_sqlParser::ARCHIVE:
      case fugue_sqlParser::ARRAY:
      case fugue_sqlParser::AS:
      case fugue_sqlParser::ASC:
      case fugue_sqlParser::AT:
      case fugue_sqlParser::AUTHORIZATION:
      case fugue_sqlParser::BETWEEN:
      case fugue_sqlParser::BOTH:
      case fugue_sqlParser::BUCKET:
      case fugue_sqlParser::BUCKETS:
      case fugue_sqlParser::BY:
      case fugue_sqlParser::CACHE:
      case fugue_sqlParser::CASCADE:
      case fugue_sqlParser::CASE:
      case fugue_sqlParser::CAST:
      case fugue_sqlParser::CHANGE:
      case fugue_sqlParser::CHECK:
      case fugue_sqlParser::CLEAR:
      case fugue_sqlParser::CLUSTER:
      case fugue_sqlParser::CLUSTERED:
      case fugue_sqlParser::CODEGEN:
      case fugue_sqlParser::COLLATE:
      case fugue_sqlParser::COLLECTION:
      case fugue_sqlParser::COLUMN:
      case fugue_sqlParser::COLUMNS:
      case fugue_sqlParser::COMMENT:
      case fugue_sqlParser::COMMIT:
      case fugue_sqlParser::COMPACT:
      case fugue_sqlParser::COMPACTIONS:
      case fugue_sqlParser::COMPUTE:
      case fugue_sqlParser::CONCATENATE:
      case fugue_sqlParser::CONSTRAINT:
      case fugue_sqlParser::COST:
      case fugue_sqlParser::CREATE:
      case fugue_sqlParser::CROSS:
      case fugue_sqlParser::CUBE:
      case fugue_sqlParser::CURRENT:
      case fugue_sqlParser::CURRENT_DATE:
      case fugue_sqlParser::CURRENT_TIME:
      case fugue_sqlParser::CURRENT_TIMESTAMP:
      case fugue_sqlParser::CURRENT_USER:
      case fugue_sqlParser::DATA:
      case fugue_sqlParser::DATABASE:
      case fugue_sqlParser::DATABASES:
      case fugue_sqlParser::DAY:
      case fugue_sqlParser::DBPROPERTIES:
      case fugue_sqlParser::DEFINED:
      case fugue_sqlParser::DELETE:
      case fugue_sqlParser::DELIMITED:
      case fugue_sqlParser::DESC:
      case fugue_sqlParser::DESCRIBE:
      case fugue_sqlParser::DFS:
      case fugue_sqlParser::DIRECTORIES:
      case fugue_sqlParser::DIRECTORY:
      case fugue_sqlParser::DISTINCT:
      case fugue_sqlParser::DISTRIBUTE:
      case fugue_sqlParser::DROP:
      case fugue_sqlParser::ELSE:
      case fugue_sqlParser::END:
      case fugue_sqlParser::ESCAPE:
      case fugue_sqlParser::ESCAPED:
      case fugue_sqlParser::EXCEPT:
      case fugue_sqlParser::EXCHANGE:
      case fugue_sqlParser::EXISTS:
      case fugue_sqlParser::EXPLAIN:
      case fugue_sqlParser::EXPORT:
      case fugue_sqlParser::EXTENDED:
      case fugue_sqlParser::EXTERNAL:
      case fugue_sqlParser::EXTRACT:
      case fugue_sqlParser::FALSE:
      case fugue_sqlParser::FETCH:
      case fugue_sqlParser::FIELDS:
      case fugue_sqlParser::FILTER:
      case fugue_sqlParser::FILEFORMAT:
      case fugue_sqlParser::FIRST:
      case fugue_sqlParser::FOLLOWING:
      case fugue_sqlParser::FOR:
      case fugue_sqlParser::FOREIGN:
      case fugue_sqlParser::FORMAT:
      case fugue_sqlParser::FORMATTED:
      case fugue_sqlParser::FROM:
      case fugue_sqlParser::FULL:
      case fugue_sqlParser::FUNCTION:
      case fugue_sqlParser::FUNCTIONS:
      case fugue_sqlParser::GLOBAL:
      case fugue_sqlParser::GRANT:
      case fugue_sqlParser::GROUP:
      case fugue_sqlParser::GROUPING:
      case fugue_sqlParser::HAVING:
      case fugue_sqlParser::HOUR:
      case fugue_sqlParser::IF:
      case fugue_sqlParser::IGNORE:
      case fugue_sqlParser::IMPORT:
      case fugue_sqlParser::IN:
      case fugue_sqlParser::INDEX:
      case fugue_sqlParser::INDEXES:
      case fugue_sqlParser::INNER:
      case fugue_sqlParser::INPATH:
      case fugue_sqlParser::INPUTFORMAT:
      case fugue_sqlParser::INSERT:
      case fugue_sqlParser::INTERSECT:
      case fugue_sqlParser::INTERVAL:
      case fugue_sqlParser::INTO:
      case fugue_sqlParser::IS:
      case fugue_sqlParser::ITEMS:
      case fugue_sqlParser::JOIN:
      case fugue_sqlParser::KEYS:
      case fugue_sqlParser::LAST:
      case fugue_sqlParser::LATERAL:
      case fugue_sqlParser::LAZY:
      case fugue_sqlParser::LEADING:
      case fugue_sqlParser::LEFT:
      case fugue_sqlParser::LIKE:
      case fugue_sqlParser::LIMIT:
      case fugue_sqlParser::LINES:
      case fugue_sqlParser::LIST:
      case fugue_sqlParser::LOAD:
      case fugue_sqlParser::LOCAL:
      case fugue_sqlParser::LOCATION:
      case fugue_sqlParser::LOCK:
      case fugue_sqlParser::LOCKS:
      case fugue_sqlParser::LOGICAL:
      case fugue_sqlParser::MACRO:
      case fugue_sqlParser::MAP:
      case fugue_sqlParser::MATCHED:
      case fugue_sqlParser::MERGE:
      case fugue_sqlParser::MINUTE:
      case fugue_sqlParser::MONTH:
      case fugue_sqlParser::MSCK:
      case fugue_sqlParser::NAMESPACE:
      case fugue_sqlParser::NAMESPACES:
      case fugue_sqlParser::NATURAL:
      case fugue_sqlParser::NO:
      case fugue_sqlParser::NOT:
      case fugue_sqlParser::THENULL:
      case fugue_sqlParser::THENULLS:
      case fugue_sqlParser::OF:
      case fugue_sqlParser::ON:
      case fugue_sqlParser::ONLY:
      case fugue_sqlParser::OPTION:
      case fugue_sqlParser::OPTIONS:
      case fugue_sqlParser::OR:
      case fugue_sqlParser::ORDER:
      case fugue_sqlParser::OUT:
      case fugue_sqlParser::OUTER:
      case fugue_sqlParser::OUTPUTFORMAT:
      case fugue_sqlParser::OVER:
      case fugue_sqlParser::OVERLAPS:
      case fugue_sqlParser::OVERLAY:
      case fugue_sqlParser::OVERWRITE:
      case fugue_sqlParser::PARTITION:
      case fugue_sqlParser::PARTITIONED:
      case fugue_sqlParser::PARTITIONS:
      case fugue_sqlParser::PERCENTLIT:
      case fugue_sqlParser::PIVOT:
      case fugue_sqlParser::PLACING:
      case fugue_sqlParser::POSITION:
      case fugue_sqlParser::PRECEDING:
      case fugue_sqlParser::PRIMARY:
      case fugue_sqlParser::PRINCIPALS:
      case fugue_sqlParser::PROPERTIES:
      case fugue_sqlParser::PURGE:
      case fugue_sqlParser::QUERY:
      case fugue_sqlParser::RANGE:
      case fugue_sqlParser::RECORDREADER:
      case fugue_sqlParser::RECORDWRITER:
      case fugue_sqlParser::RECOVER:
      case fugue_sqlParser::REDUCE:
      case fugue_sqlParser::REFERENCES:
      case fugue_sqlParser::REFRESH:
      case fugue_sqlParser::RENAME:
      case fugue_sqlParser::REPAIR:
      case fugue_sqlParser::REPLACE:
      case fugue_sqlParser::RESET:
      case fugue_sqlParser::RESTRICT:
      case fugue_sqlParser::REVOKE:
      case fugue_sqlParser::RIGHT:
      case fugue_sqlParser::RLIKE:
      case fugue_sqlParser::ROLE:
      case fugue_sqlParser::ROLES:
      case fugue_sqlParser::ROLLBACK:
      case fugue_sqlParser::ROLLUP:
      case fugue_sqlParser::ROW:
      case fugue_sqlParser::ROWS:
      case fugue_sqlParser::SCHEMA:
      case fugue_sqlParser::SECOND:
      case fugue_sqlParser::SELECT:
      case fugue_sqlParser::SEMI:
      case fugue_sqlParser::SEPARATED:
      case fugue_sqlParser::SERDE:
      case fugue_sqlParser::SERDEPROPERTIES:
      case fugue_sqlParser::SESSION_USER:
      case fugue_sqlParser::SET:
      case fugue_sqlParser::SETMINUS:
      case fugue_sqlParser::SETS:
      case fugue_sqlParser::SHOW:
      case fugue_sqlParser::SKEWED:
      case fugue_sqlParser::SOME:
      case fugue_sqlParser::SORT:
      case fugue_sqlParser::SORTED:
      case fugue_sqlParser::START:
      case fugue_sqlParser::STATISTICS:
      case fugue_sqlParser::STORED:
      case fugue_sqlParser::STRATIFY:
      case fugue_sqlParser::STRUCT:
      case fugue_sqlParser::SUBSTR:
      case fugue_sqlParser::SUBSTRING:
      case fugue_sqlParser::TABLE:
      case fugue_sqlParser::TABLES:
      case fugue_sqlParser::TABLESAMPLE:
      case fugue_sqlParser::TBLPROPERTIES:
      case fugue_sqlParser::TEMPORARY:
      case fugue_sqlParser::TERMINATED:
      case fugue_sqlParser::THEN:
      case fugue_sqlParser::TO:
      case fugue_sqlParser::TOUCH:
      case fugue_sqlParser::TRAILING:
      case fugue_sqlParser::TRANSACTION:
      case fugue_sqlParser::TRANSACTIONS:
      case fugue_sqlParser::TRANSFORM:
      case fugue_sqlParser::TRIM:
      case fugue_sqlParser::TRUE:
      case fugue_sqlParser::TRUNCATE:
      case fugue_sqlParser::TYPE:
      case fugue_sqlParser::UNARCHIVE:
      case fugue_sqlParser::UNBOUNDED:
      case fugue_sqlParser::UNCACHE:
      case fugue_sqlParser::UNION:
      case fugue_sqlParser::UNIQUE:
      case fugue_sqlParser::UNKNOWN:
      case fugue_sqlParser::UNLOCK:
      case fugue_sqlParser::UNSET:
      case fugue_sqlParser::UPDATE:
      case fugue_sqlParser::USE:
      case fugue_sqlParser::USER:
      case fugue_sqlParser::USING:
      case fugue_sqlParser::VALUES:
      case fugue_sqlParser::VIEW:
      case fugue_sqlParser::VIEWS:
      case fugue_sqlParser::WHEN:
      case fugue_sqlParser::WHERE:
      case fugue_sqlParser::WINDOW:
      case fugue_sqlParser::WITH:
      case fugue_sqlParser::YEAR:
      case fugue_sqlParser::DIV:
      case fugue_sqlParser::IDENTIFIER:
      case fugue_sqlParser::BACKQUOTED_IDENTIFIER: {
        enterOuterAlt(_localctx, 1);
        setState(990);
        antlrcpp::downCast<FugueWildSchemaPairContext *>(_localctx)->pair = fugueSchemaPair();
        break;
      }

      case fugue_sqlParser::ASTERISK: {
        enterOuterAlt(_localctx, 2);
        setState(991);
        match(fugue_sqlParser::ASTERISK);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FugueSchemaOpContext ------------------------------------------------------------------

fugue_sqlParser::FugueSchemaOpContext::FugueSchemaOpContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<fugue_sqlParser::FugueSchemaKeyContext *> fugue_sqlParser::FugueSchemaOpContext::fugueSchemaKey() {
  return getRuleContexts<fugue_sqlParser::FugueSchemaKeyContext>();
}

fugue_sqlParser::FugueSchemaKeyContext* fugue_sqlParser::FugueSchemaOpContext::fugueSchemaKey(size_t i) {
  return getRuleContext<fugue_sqlParser::FugueSchemaKeyContext>(i);
}

tree::TerminalNode* fugue_sqlParser::FugueSchemaOpContext::MINUS() {
  return getToken(fugue_sqlParser::MINUS, 0);
}

tree::TerminalNode* fugue_sqlParser::FugueSchemaOpContext::TILDE() {
  return getToken(fugue_sqlParser::TILDE, 0);
}

tree::TerminalNode* fugue_sqlParser::FugueSchemaOpContext::PLUS() {
  return getToken(fugue_sqlParser::PLUS, 0);
}

fugue_sqlParser::FugueSchemaContext* fugue_sqlParser::FugueSchemaOpContext::fugueSchema() {
  return getRuleContext<fugue_sqlParser::FugueSchemaContext>(0);
}


size_t fugue_sqlParser::FugueSchemaOpContext::getRuleIndex() const {
  return fugue_sqlParser::RuleFugueSchemaOp;
}


antlrcpp::Any fugue_sqlParser::FugueSchemaOpContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitFugueSchemaOp(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::FugueSchemaOpContext* fugue_sqlParser::fugueSchemaOp() {
  FugueSchemaOpContext *_localctx = _tracker.createInstance<FugueSchemaOpContext>(_ctx, getState());
  enterRule(_localctx, 114, fugue_sqlParser::RuleFugueSchemaOp);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(1005);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case fugue_sqlParser::MINUS:
      case fugue_sqlParser::TILDE: {
        enterOuterAlt(_localctx, 1);
        setState(994);
        _la = _input->LA(1);
        if (!(_la == fugue_sqlParser::MINUS

        || _la == fugue_sqlParser::TILDE)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(995);
        fugueSchemaKey();
        setState(1000);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 113, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(996);
            match(fugue_sqlParser::T__0);
            setState(997);
            fugueSchemaKey(); 
          }
          setState(1002);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 113, _ctx);
        }
        break;
      }

      case fugue_sqlParser::PLUS: {
        enterOuterAlt(_localctx, 2);
        setState(1003);
        match(fugue_sqlParser::PLUS);
        setState(1004);
        fugueSchema();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FugueSchemaContext ------------------------------------------------------------------

fugue_sqlParser::FugueSchemaContext::FugueSchemaContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<fugue_sqlParser::FugueSchemaPairContext *> fugue_sqlParser::FugueSchemaContext::fugueSchemaPair() {
  return getRuleContexts<fugue_sqlParser::FugueSchemaPairContext>();
}

fugue_sqlParser::FugueSchemaPairContext* fugue_sqlParser::FugueSchemaContext::fugueSchemaPair(size_t i) {
  return getRuleContext<fugue_sqlParser::FugueSchemaPairContext>(i);
}


size_t fugue_sqlParser::FugueSchemaContext::getRuleIndex() const {
  return fugue_sqlParser::RuleFugueSchema;
}


antlrcpp::Any fugue_sqlParser::FugueSchemaContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitFugueSchema(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::FugueSchemaContext* fugue_sqlParser::fugueSchema() {
  FugueSchemaContext *_localctx = _tracker.createInstance<FugueSchemaContext>(_ctx, getState());
  enterRule(_localctx, 116, fugue_sqlParser::RuleFugueSchema);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1007);
    fugueSchemaPair();
    setState(1012);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 115, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1008);
        match(fugue_sqlParser::T__0);
        setState(1009);
        fugueSchemaPair(); 
      }
      setState(1014);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 115, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FugueSchemaPairContext ------------------------------------------------------------------

fugue_sqlParser::FugueSchemaPairContext::FugueSchemaPairContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

fugue_sqlParser::FugueSchemaKeyContext* fugue_sqlParser::FugueSchemaPairContext::fugueSchemaKey() {
  return getRuleContext<fugue_sqlParser::FugueSchemaKeyContext>(0);
}

fugue_sqlParser::FugueSchemaTypeContext* fugue_sqlParser::FugueSchemaPairContext::fugueSchemaType() {
  return getRuleContext<fugue_sqlParser::FugueSchemaTypeContext>(0);
}


size_t fugue_sqlParser::FugueSchemaPairContext::getRuleIndex() const {
  return fugue_sqlParser::RuleFugueSchemaPair;
}


antlrcpp::Any fugue_sqlParser::FugueSchemaPairContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitFugueSchemaPair(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::FugueSchemaPairContext* fugue_sqlParser::fugueSchemaPair() {
  FugueSchemaPairContext *_localctx = _tracker.createInstance<FugueSchemaPairContext>(_ctx, getState());
  enterRule(_localctx, 118, fugue_sqlParser::RuleFugueSchemaPair);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1015);
    antlrcpp::downCast<FugueSchemaPairContext *>(_localctx)->key = fugueSchemaKey();
    setState(1016);
    match(fugue_sqlParser::T__1);
    setState(1017);
    antlrcpp::downCast<FugueSchemaPairContext *>(_localctx)->value = fugueSchemaType();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FugueSchemaKeyContext ------------------------------------------------------------------

fugue_sqlParser::FugueSchemaKeyContext::FugueSchemaKeyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

fugue_sqlParser::FugueIdentifierContext* fugue_sqlParser::FugueSchemaKeyContext::fugueIdentifier() {
  return getRuleContext<fugue_sqlParser::FugueIdentifierContext>(0);
}


size_t fugue_sqlParser::FugueSchemaKeyContext::getRuleIndex() const {
  return fugue_sqlParser::RuleFugueSchemaKey;
}


antlrcpp::Any fugue_sqlParser::FugueSchemaKeyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitFugueSchemaKey(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::FugueSchemaKeyContext* fugue_sqlParser::fugueSchemaKey() {
  FugueSchemaKeyContext *_localctx = _tracker.createInstance<FugueSchemaKeyContext>(_ctx, getState());
  enterRule(_localctx, 120, fugue_sqlParser::RuleFugueSchemaKey);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1019);
    fugueIdentifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FugueSchemaTypeContext ------------------------------------------------------------------

fugue_sqlParser::FugueSchemaTypeContext::FugueSchemaTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t fugue_sqlParser::FugueSchemaTypeContext::getRuleIndex() const {
  return fugue_sqlParser::RuleFugueSchemaType;
}

void fugue_sqlParser::FugueSchemaTypeContext::copyFrom(FugueSchemaTypeContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- FugueSchemaSimpleTypeContext ------------------------------------------------------------------

fugue_sqlParser::FugueIdentifierContext* fugue_sqlParser::FugueSchemaSimpleTypeContext::fugueIdentifier() {
  return getRuleContext<fugue_sqlParser::FugueIdentifierContext>(0);
}

fugue_sqlParser::FugueSchemaSimpleTypeContext::FugueSchemaSimpleTypeContext(FugueSchemaTypeContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::FugueSchemaSimpleTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitFugueSchemaSimpleType(this);
  else
    return visitor->visitChildren(this);
}
//----------------- FugueSchemaStructTypeContext ------------------------------------------------------------------

fugue_sqlParser::FugueSchemaContext* fugue_sqlParser::FugueSchemaStructTypeContext::fugueSchema() {
  return getRuleContext<fugue_sqlParser::FugueSchemaContext>(0);
}

fugue_sqlParser::FugueSchemaStructTypeContext::FugueSchemaStructTypeContext(FugueSchemaTypeContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::FugueSchemaStructTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitFugueSchemaStructType(this);
  else
    return visitor->visitChildren(this);
}
//----------------- FugueSchemaListTypeContext ------------------------------------------------------------------

fugue_sqlParser::FugueSchemaTypeContext* fugue_sqlParser::FugueSchemaListTypeContext::fugueSchemaType() {
  return getRuleContext<fugue_sqlParser::FugueSchemaTypeContext>(0);
}

fugue_sqlParser::FugueSchemaListTypeContext::FugueSchemaListTypeContext(FugueSchemaTypeContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::FugueSchemaListTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitFugueSchemaListType(this);
  else
    return visitor->visitChildren(this);
}
fugue_sqlParser::FugueSchemaTypeContext* fugue_sqlParser::fugueSchemaType() {
  FugueSchemaTypeContext *_localctx = _tracker.createInstance<FugueSchemaTypeContext>(_ctx, getState());
  enterRule(_localctx, 122, fugue_sqlParser::RuleFugueSchemaType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1030);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case fugue_sqlParser::ADD:
      case fugue_sqlParser::AFTER:
      case fugue_sqlParser::ALL:
      case fugue_sqlParser::ALTER:
      case fugue_sqlParser::ANALYZE:
      case fugue_sqlParser::AND:
      case fugue_sqlParser::ANTI:
      case fugue_sqlParser::ANY:
      case fugue_sqlParser::ARCHIVE:
      case fugue_sqlParser::ARRAY:
      case fugue_sqlParser::AS:
      case fugue_sqlParser::ASC:
      case fugue_sqlParser::AT:
      case fugue_sqlParser::AUTHORIZATION:
      case fugue_sqlParser::BETWEEN:
      case fugue_sqlParser::BOTH:
      case fugue_sqlParser::BUCKET:
      case fugue_sqlParser::BUCKETS:
      case fugue_sqlParser::BY:
      case fugue_sqlParser::CACHE:
      case fugue_sqlParser::CASCADE:
      case fugue_sqlParser::CASE:
      case fugue_sqlParser::CAST:
      case fugue_sqlParser::CHANGE:
      case fugue_sqlParser::CHECK:
      case fugue_sqlParser::CLEAR:
      case fugue_sqlParser::CLUSTER:
      case fugue_sqlParser::CLUSTERED:
      case fugue_sqlParser::CODEGEN:
      case fugue_sqlParser::COLLATE:
      case fugue_sqlParser::COLLECTION:
      case fugue_sqlParser::COLUMN:
      case fugue_sqlParser::COLUMNS:
      case fugue_sqlParser::COMMENT:
      case fugue_sqlParser::COMMIT:
      case fugue_sqlParser::COMPACT:
      case fugue_sqlParser::COMPACTIONS:
      case fugue_sqlParser::COMPUTE:
      case fugue_sqlParser::CONCATENATE:
      case fugue_sqlParser::CONSTRAINT:
      case fugue_sqlParser::COST:
      case fugue_sqlParser::CREATE:
      case fugue_sqlParser::CROSS:
      case fugue_sqlParser::CUBE:
      case fugue_sqlParser::CURRENT:
      case fugue_sqlParser::CURRENT_DATE:
      case fugue_sqlParser::CURRENT_TIME:
      case fugue_sqlParser::CURRENT_TIMESTAMP:
      case fugue_sqlParser::CURRENT_USER:
      case fugue_sqlParser::DATA:
      case fugue_sqlParser::DATABASE:
      case fugue_sqlParser::DATABASES:
      case fugue_sqlParser::DAY:
      case fugue_sqlParser::DBPROPERTIES:
      case fugue_sqlParser::DEFINED:
      case fugue_sqlParser::DELETE:
      case fugue_sqlParser::DELIMITED:
      case fugue_sqlParser::DESC:
      case fugue_sqlParser::DESCRIBE:
      case fugue_sqlParser::DFS:
      case fugue_sqlParser::DIRECTORIES:
      case fugue_sqlParser::DIRECTORY:
      case fugue_sqlParser::DISTINCT:
      case fugue_sqlParser::DISTRIBUTE:
      case fugue_sqlParser::DROP:
      case fugue_sqlParser::ELSE:
      case fugue_sqlParser::END:
      case fugue_sqlParser::ESCAPE:
      case fugue_sqlParser::ESCAPED:
      case fugue_sqlParser::EXCEPT:
      case fugue_sqlParser::EXCHANGE:
      case fugue_sqlParser::EXISTS:
      case fugue_sqlParser::EXPLAIN:
      case fugue_sqlParser::EXPORT:
      case fugue_sqlParser::EXTENDED:
      case fugue_sqlParser::EXTERNAL:
      case fugue_sqlParser::EXTRACT:
      case fugue_sqlParser::FALSE:
      case fugue_sqlParser::FETCH:
      case fugue_sqlParser::FIELDS:
      case fugue_sqlParser::FILTER:
      case fugue_sqlParser::FILEFORMAT:
      case fugue_sqlParser::FIRST:
      case fugue_sqlParser::FOLLOWING:
      case fugue_sqlParser::FOR:
      case fugue_sqlParser::FOREIGN:
      case fugue_sqlParser::FORMAT:
      case fugue_sqlParser::FORMATTED:
      case fugue_sqlParser::FROM:
      case fugue_sqlParser::FULL:
      case fugue_sqlParser::FUNCTION:
      case fugue_sqlParser::FUNCTIONS:
      case fugue_sqlParser::GLOBAL:
      case fugue_sqlParser::GRANT:
      case fugue_sqlParser::GROUP:
      case fugue_sqlParser::GROUPING:
      case fugue_sqlParser::HAVING:
      case fugue_sqlParser::HOUR:
      case fugue_sqlParser::IF:
      case fugue_sqlParser::IGNORE:
      case fugue_sqlParser::IMPORT:
      case fugue_sqlParser::IN:
      case fugue_sqlParser::INDEX:
      case fugue_sqlParser::INDEXES:
      case fugue_sqlParser::INNER:
      case fugue_sqlParser::INPATH:
      case fugue_sqlParser::INPUTFORMAT:
      case fugue_sqlParser::INSERT:
      case fugue_sqlParser::INTERSECT:
      case fugue_sqlParser::INTERVAL:
      case fugue_sqlParser::INTO:
      case fugue_sqlParser::IS:
      case fugue_sqlParser::ITEMS:
      case fugue_sqlParser::JOIN:
      case fugue_sqlParser::KEYS:
      case fugue_sqlParser::LAST:
      case fugue_sqlParser::LATERAL:
      case fugue_sqlParser::LAZY:
      case fugue_sqlParser::LEADING:
      case fugue_sqlParser::LEFT:
      case fugue_sqlParser::LIKE:
      case fugue_sqlParser::LIMIT:
      case fugue_sqlParser::LINES:
      case fugue_sqlParser::LIST:
      case fugue_sqlParser::LOAD:
      case fugue_sqlParser::LOCAL:
      case fugue_sqlParser::LOCATION:
      case fugue_sqlParser::LOCK:
      case fugue_sqlParser::LOCKS:
      case fugue_sqlParser::LOGICAL:
      case fugue_sqlParser::MACRO:
      case fugue_sqlParser::MAP:
      case fugue_sqlParser::MATCHED:
      case fugue_sqlParser::MERGE:
      case fugue_sqlParser::MINUTE:
      case fugue_sqlParser::MONTH:
      case fugue_sqlParser::MSCK:
      case fugue_sqlParser::NAMESPACE:
      case fugue_sqlParser::NAMESPACES:
      case fugue_sqlParser::NATURAL:
      case fugue_sqlParser::NO:
      case fugue_sqlParser::NOT:
      case fugue_sqlParser::THENULL:
      case fugue_sqlParser::THENULLS:
      case fugue_sqlParser::OF:
      case fugue_sqlParser::ON:
      case fugue_sqlParser::ONLY:
      case fugue_sqlParser::OPTION:
      case fugue_sqlParser::OPTIONS:
      case fugue_sqlParser::OR:
      case fugue_sqlParser::ORDER:
      case fugue_sqlParser::OUT:
      case fugue_sqlParser::OUTER:
      case fugue_sqlParser::OUTPUTFORMAT:
      case fugue_sqlParser::OVER:
      case fugue_sqlParser::OVERLAPS:
      case fugue_sqlParser::OVERLAY:
      case fugue_sqlParser::OVERWRITE:
      case fugue_sqlParser::PARTITION:
      case fugue_sqlParser::PARTITIONED:
      case fugue_sqlParser::PARTITIONS:
      case fugue_sqlParser::PERCENTLIT:
      case fugue_sqlParser::PIVOT:
      case fugue_sqlParser::PLACING:
      case fugue_sqlParser::POSITION:
      case fugue_sqlParser::PRECEDING:
      case fugue_sqlParser::PRIMARY:
      case fugue_sqlParser::PRINCIPALS:
      case fugue_sqlParser::PROPERTIES:
      case fugue_sqlParser::PURGE:
      case fugue_sqlParser::QUERY:
      case fugue_sqlParser::RANGE:
      case fugue_sqlParser::RECORDREADER:
      case fugue_sqlParser::RECORDWRITER:
      case fugue_sqlParser::RECOVER:
      case fugue_sqlParser::REDUCE:
      case fugue_sqlParser::REFERENCES:
      case fugue_sqlParser::REFRESH:
      case fugue_sqlParser::RENAME:
      case fugue_sqlParser::REPAIR:
      case fugue_sqlParser::REPLACE:
      case fugue_sqlParser::RESET:
      case fugue_sqlParser::RESTRICT:
      case fugue_sqlParser::REVOKE:
      case fugue_sqlParser::RIGHT:
      case fugue_sqlParser::RLIKE:
      case fugue_sqlParser::ROLE:
      case fugue_sqlParser::ROLES:
      case fugue_sqlParser::ROLLBACK:
      case fugue_sqlParser::ROLLUP:
      case fugue_sqlParser::ROW:
      case fugue_sqlParser::ROWS:
      case fugue_sqlParser::SCHEMA:
      case fugue_sqlParser::SECOND:
      case fugue_sqlParser::SELECT:
      case fugue_sqlParser::SEMI:
      case fugue_sqlParser::SEPARATED:
      case fugue_sqlParser::SERDE:
      case fugue_sqlParser::SERDEPROPERTIES:
      case fugue_sqlParser::SESSION_USER:
      case fugue_sqlParser::SET:
      case fugue_sqlParser::SETMINUS:
      case fugue_sqlParser::SETS:
      case fugue_sqlParser::SHOW:
      case fugue_sqlParser::SKEWED:
      case fugue_sqlParser::SOME:
      case fugue_sqlParser::SORT:
      case fugue_sqlParser::SORTED:
      case fugue_sqlParser::START:
      case fugue_sqlParser::STATISTICS:
      case fugue_sqlParser::STORED:
      case fugue_sqlParser::STRATIFY:
      case fugue_sqlParser::STRUCT:
      case fugue_sqlParser::SUBSTR:
      case fugue_sqlParser::SUBSTRING:
      case fugue_sqlParser::TABLE:
      case fugue_sqlParser::TABLES:
      case fugue_sqlParser::TABLESAMPLE:
      case fugue_sqlParser::TBLPROPERTIES:
      case fugue_sqlParser::TEMPORARY:
      case fugue_sqlParser::TERMINATED:
      case fugue_sqlParser::THEN:
      case fugue_sqlParser::TO:
      case fugue_sqlParser::TOUCH:
      case fugue_sqlParser::TRAILING:
      case fugue_sqlParser::TRANSACTION:
      case fugue_sqlParser::TRANSACTIONS:
      case fugue_sqlParser::TRANSFORM:
      case fugue_sqlParser::TRIM:
      case fugue_sqlParser::TRUE:
      case fugue_sqlParser::TRUNCATE:
      case fugue_sqlParser::TYPE:
      case fugue_sqlParser::UNARCHIVE:
      case fugue_sqlParser::UNBOUNDED:
      case fugue_sqlParser::UNCACHE:
      case fugue_sqlParser::UNION:
      case fugue_sqlParser::UNIQUE:
      case fugue_sqlParser::UNKNOWN:
      case fugue_sqlParser::UNLOCK:
      case fugue_sqlParser::UNSET:
      case fugue_sqlParser::UPDATE:
      case fugue_sqlParser::USE:
      case fugue_sqlParser::USER:
      case fugue_sqlParser::USING:
      case fugue_sqlParser::VALUES:
      case fugue_sqlParser::VIEW:
      case fugue_sqlParser::VIEWS:
      case fugue_sqlParser::WHEN:
      case fugue_sqlParser::WHERE:
      case fugue_sqlParser::WINDOW:
      case fugue_sqlParser::WITH:
      case fugue_sqlParser::YEAR:
      case fugue_sqlParser::DIV:
      case fugue_sqlParser::IDENTIFIER:
      case fugue_sqlParser::BACKQUOTED_IDENTIFIER: {
        _localctx = _tracker.createInstance<fugue_sqlParser::FugueSchemaSimpleTypeContext>(_localctx);
        enterOuterAlt(_localctx, 1);
        setState(1021);
        fugueIdentifier();
        break;
      }

      case fugue_sqlParser::T__4: {
        _localctx = _tracker.createInstance<fugue_sqlParser::FugueSchemaListTypeContext>(_localctx);
        enterOuterAlt(_localctx, 2);
        setState(1022);
        match(fugue_sqlParser::T__4);
        setState(1023);
        fugueSchemaType();
        setState(1024);
        match(fugue_sqlParser::T__5);
        break;
      }

      case fugue_sqlParser::T__7: {
        _localctx = _tracker.createInstance<fugue_sqlParser::FugueSchemaStructTypeContext>(_localctx);
        enterOuterAlt(_localctx, 3);
        setState(1026);
        match(fugue_sqlParser::T__7);
        setState(1027);
        fugueSchema();
        setState(1028);
        match(fugue_sqlParser::T__8);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FugueRenamePairContext ------------------------------------------------------------------

fugue_sqlParser::FugueRenamePairContext::FugueRenamePairContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<fugue_sqlParser::FugueSchemaKeyContext *> fugue_sqlParser::FugueRenamePairContext::fugueSchemaKey() {
  return getRuleContexts<fugue_sqlParser::FugueSchemaKeyContext>();
}

fugue_sqlParser::FugueSchemaKeyContext* fugue_sqlParser::FugueRenamePairContext::fugueSchemaKey(size_t i) {
  return getRuleContext<fugue_sqlParser::FugueSchemaKeyContext>(i);
}


size_t fugue_sqlParser::FugueRenamePairContext::getRuleIndex() const {
  return fugue_sqlParser::RuleFugueRenamePair;
}


antlrcpp::Any fugue_sqlParser::FugueRenamePairContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitFugueRenamePair(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::FugueRenamePairContext* fugue_sqlParser::fugueRenamePair() {
  FugueRenamePairContext *_localctx = _tracker.createInstance<FugueRenamePairContext>(_ctx, getState());
  enterRule(_localctx, 124, fugue_sqlParser::RuleFugueRenamePair);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1032);
    antlrcpp::downCast<FugueRenamePairContext *>(_localctx)->key = fugueSchemaKey();
    setState(1033);
    match(fugue_sqlParser::T__1);
    setState(1034);
    antlrcpp::downCast<FugueRenamePairContext *>(_localctx)->value = fugueSchemaKey();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FugueJsonContext ------------------------------------------------------------------

fugue_sqlParser::FugueJsonContext::FugueJsonContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

fugue_sqlParser::FugueJsonValueContext* fugue_sqlParser::FugueJsonContext::fugueJsonValue() {
  return getRuleContext<fugue_sqlParser::FugueJsonValueContext>(0);
}


size_t fugue_sqlParser::FugueJsonContext::getRuleIndex() const {
  return fugue_sqlParser::RuleFugueJson;
}


antlrcpp::Any fugue_sqlParser::FugueJsonContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitFugueJson(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::FugueJsonContext* fugue_sqlParser::fugueJson() {
  FugueJsonContext *_localctx = _tracker.createInstance<FugueJsonContext>(_ctx, getState());
  enterRule(_localctx, 126, fugue_sqlParser::RuleFugueJson);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1036);
    fugueJsonValue();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FugueJsonObjContext ------------------------------------------------------------------

fugue_sqlParser::FugueJsonObjContext::FugueJsonObjContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

fugue_sqlParser::FugueJsonPairsContext* fugue_sqlParser::FugueJsonObjContext::fugueJsonPairs() {
  return getRuleContext<fugue_sqlParser::FugueJsonPairsContext>(0);
}


size_t fugue_sqlParser::FugueJsonObjContext::getRuleIndex() const {
  return fugue_sqlParser::RuleFugueJsonObj;
}


antlrcpp::Any fugue_sqlParser::FugueJsonObjContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitFugueJsonObj(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::FugueJsonObjContext* fugue_sqlParser::fugueJsonObj() {
  FugueJsonObjContext *_localctx = _tracker.createInstance<FugueJsonObjContext>(_ctx, getState());
  enterRule(_localctx, 128, fugue_sqlParser::RuleFugueJsonObj);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1056);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 119, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1038);
      match(fugue_sqlParser::T__7);
      setState(1039);
      fugueJsonPairs();
      setState(1041);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::T__0) {
        setState(1040);
        match(fugue_sqlParser::T__0);
      }
      setState(1043);
      match(fugue_sqlParser::T__8);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1045);
      match(fugue_sqlParser::T__7);
      setState(1046);
      match(fugue_sqlParser::T__8);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1047);
      match(fugue_sqlParser::T__2);
      setState(1048);
      fugueJsonPairs();
      setState(1050);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::T__0) {
        setState(1049);
        match(fugue_sqlParser::T__0);
      }
      setState(1052);
      match(fugue_sqlParser::T__3);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1054);
      match(fugue_sqlParser::T__2);
      setState(1055);
      match(fugue_sqlParser::T__3);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FugueJsonPairsContext ------------------------------------------------------------------

fugue_sqlParser::FugueJsonPairsContext::FugueJsonPairsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<fugue_sqlParser::FugueJsonPairContext *> fugue_sqlParser::FugueJsonPairsContext::fugueJsonPair() {
  return getRuleContexts<fugue_sqlParser::FugueJsonPairContext>();
}

fugue_sqlParser::FugueJsonPairContext* fugue_sqlParser::FugueJsonPairsContext::fugueJsonPair(size_t i) {
  return getRuleContext<fugue_sqlParser::FugueJsonPairContext>(i);
}


size_t fugue_sqlParser::FugueJsonPairsContext::getRuleIndex() const {
  return fugue_sqlParser::RuleFugueJsonPairs;
}


antlrcpp::Any fugue_sqlParser::FugueJsonPairsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitFugueJsonPairs(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::FugueJsonPairsContext* fugue_sqlParser::fugueJsonPairs() {
  FugueJsonPairsContext *_localctx = _tracker.createInstance<FugueJsonPairsContext>(_ctx, getState());
  enterRule(_localctx, 130, fugue_sqlParser::RuleFugueJsonPairs);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1058);
    fugueJsonPair();
    setState(1063);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 120, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1059);
        match(fugue_sqlParser::T__0);
        setState(1060);
        fugueJsonPair(); 
      }
      setState(1065);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 120, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FugueJsonPairContext ------------------------------------------------------------------

fugue_sqlParser::FugueJsonPairContext::FugueJsonPairContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

fugue_sqlParser::FugueJsonKeyContext* fugue_sqlParser::FugueJsonPairContext::fugueJsonKey() {
  return getRuleContext<fugue_sqlParser::FugueJsonKeyContext>(0);
}

tree::TerminalNode* fugue_sqlParser::FugueJsonPairContext::EQUAL() {
  return getToken(fugue_sqlParser::EQUAL, 0);
}

fugue_sqlParser::FugueJsonValueContext* fugue_sqlParser::FugueJsonPairContext::fugueJsonValue() {
  return getRuleContext<fugue_sqlParser::FugueJsonValueContext>(0);
}


size_t fugue_sqlParser::FugueJsonPairContext::getRuleIndex() const {
  return fugue_sqlParser::RuleFugueJsonPair;
}


antlrcpp::Any fugue_sqlParser::FugueJsonPairContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitFugueJsonPair(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::FugueJsonPairContext* fugue_sqlParser::fugueJsonPair() {
  FugueJsonPairContext *_localctx = _tracker.createInstance<FugueJsonPairContext>(_ctx, getState());
  enterRule(_localctx, 132, fugue_sqlParser::RuleFugueJsonPair);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1066);
    antlrcpp::downCast<FugueJsonPairContext *>(_localctx)->key = fugueJsonKey();
    setState(1067);
    _la = _input->LA(1);
    if (!(_la == fugue_sqlParser::T__1 || _la == fugue_sqlParser::EQUAL)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(1068);
    antlrcpp::downCast<FugueJsonPairContext *>(_localctx)->value = fugueJsonValue();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FugueJsonKeyContext ------------------------------------------------------------------

fugue_sqlParser::FugueJsonKeyContext::FugueJsonKeyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

fugue_sqlParser::FugueIdentifierContext* fugue_sqlParser::FugueJsonKeyContext::fugueIdentifier() {
  return getRuleContext<fugue_sqlParser::FugueIdentifierContext>(0);
}

fugue_sqlParser::FugueJsonStringContext* fugue_sqlParser::FugueJsonKeyContext::fugueJsonString() {
  return getRuleContext<fugue_sqlParser::FugueJsonStringContext>(0);
}


size_t fugue_sqlParser::FugueJsonKeyContext::getRuleIndex() const {
  return fugue_sqlParser::RuleFugueJsonKey;
}


antlrcpp::Any fugue_sqlParser::FugueJsonKeyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitFugueJsonKey(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::FugueJsonKeyContext* fugue_sqlParser::fugueJsonKey() {
  FugueJsonKeyContext *_localctx = _tracker.createInstance<FugueJsonKeyContext>(_ctx, getState());
  enterRule(_localctx, 134, fugue_sqlParser::RuleFugueJsonKey);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1072);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case fugue_sqlParser::ADD:
      case fugue_sqlParser::AFTER:
      case fugue_sqlParser::ALL:
      case fugue_sqlParser::ALTER:
      case fugue_sqlParser::ANALYZE:
      case fugue_sqlParser::AND:
      case fugue_sqlParser::ANTI:
      case fugue_sqlParser::ANY:
      case fugue_sqlParser::ARCHIVE:
      case fugue_sqlParser::ARRAY:
      case fugue_sqlParser::AS:
      case fugue_sqlParser::ASC:
      case fugue_sqlParser::AT:
      case fugue_sqlParser::AUTHORIZATION:
      case fugue_sqlParser::BETWEEN:
      case fugue_sqlParser::BOTH:
      case fugue_sqlParser::BUCKET:
      case fugue_sqlParser::BUCKETS:
      case fugue_sqlParser::BY:
      case fugue_sqlParser::CACHE:
      case fugue_sqlParser::CASCADE:
      case fugue_sqlParser::CASE:
      case fugue_sqlParser::CAST:
      case fugue_sqlParser::CHANGE:
      case fugue_sqlParser::CHECK:
      case fugue_sqlParser::CLEAR:
      case fugue_sqlParser::CLUSTER:
      case fugue_sqlParser::CLUSTERED:
      case fugue_sqlParser::CODEGEN:
      case fugue_sqlParser::COLLATE:
      case fugue_sqlParser::COLLECTION:
      case fugue_sqlParser::COLUMN:
      case fugue_sqlParser::COLUMNS:
      case fugue_sqlParser::COMMENT:
      case fugue_sqlParser::COMMIT:
      case fugue_sqlParser::COMPACT:
      case fugue_sqlParser::COMPACTIONS:
      case fugue_sqlParser::COMPUTE:
      case fugue_sqlParser::CONCATENATE:
      case fugue_sqlParser::CONSTRAINT:
      case fugue_sqlParser::COST:
      case fugue_sqlParser::CREATE:
      case fugue_sqlParser::CROSS:
      case fugue_sqlParser::CUBE:
      case fugue_sqlParser::CURRENT:
      case fugue_sqlParser::CURRENT_DATE:
      case fugue_sqlParser::CURRENT_TIME:
      case fugue_sqlParser::CURRENT_TIMESTAMP:
      case fugue_sqlParser::CURRENT_USER:
      case fugue_sqlParser::DATA:
      case fugue_sqlParser::DATABASE:
      case fugue_sqlParser::DATABASES:
      case fugue_sqlParser::DAY:
      case fugue_sqlParser::DBPROPERTIES:
      case fugue_sqlParser::DEFINED:
      case fugue_sqlParser::DELETE:
      case fugue_sqlParser::DELIMITED:
      case fugue_sqlParser::DESC:
      case fugue_sqlParser::DESCRIBE:
      case fugue_sqlParser::DFS:
      case fugue_sqlParser::DIRECTORIES:
      case fugue_sqlParser::DIRECTORY:
      case fugue_sqlParser::DISTINCT:
      case fugue_sqlParser::DISTRIBUTE:
      case fugue_sqlParser::DROP:
      case fugue_sqlParser::ELSE:
      case fugue_sqlParser::END:
      case fugue_sqlParser::ESCAPE:
      case fugue_sqlParser::ESCAPED:
      case fugue_sqlParser::EXCEPT:
      case fugue_sqlParser::EXCHANGE:
      case fugue_sqlParser::EXISTS:
      case fugue_sqlParser::EXPLAIN:
      case fugue_sqlParser::EXPORT:
      case fugue_sqlParser::EXTENDED:
      case fugue_sqlParser::EXTERNAL:
      case fugue_sqlParser::EXTRACT:
      case fugue_sqlParser::FALSE:
      case fugue_sqlParser::FETCH:
      case fugue_sqlParser::FIELDS:
      case fugue_sqlParser::FILTER:
      case fugue_sqlParser::FILEFORMAT:
      case fugue_sqlParser::FIRST:
      case fugue_sqlParser::FOLLOWING:
      case fugue_sqlParser::FOR:
      case fugue_sqlParser::FOREIGN:
      case fugue_sqlParser::FORMAT:
      case fugue_sqlParser::FORMATTED:
      case fugue_sqlParser::FROM:
      case fugue_sqlParser::FULL:
      case fugue_sqlParser::FUNCTION:
      case fugue_sqlParser::FUNCTIONS:
      case fugue_sqlParser::GLOBAL:
      case fugue_sqlParser::GRANT:
      case fugue_sqlParser::GROUP:
      case fugue_sqlParser::GROUPING:
      case fugue_sqlParser::HAVING:
      case fugue_sqlParser::HOUR:
      case fugue_sqlParser::IF:
      case fugue_sqlParser::IGNORE:
      case fugue_sqlParser::IMPORT:
      case fugue_sqlParser::IN:
      case fugue_sqlParser::INDEX:
      case fugue_sqlParser::INDEXES:
      case fugue_sqlParser::INNER:
      case fugue_sqlParser::INPATH:
      case fugue_sqlParser::INPUTFORMAT:
      case fugue_sqlParser::INSERT:
      case fugue_sqlParser::INTERSECT:
      case fugue_sqlParser::INTERVAL:
      case fugue_sqlParser::INTO:
      case fugue_sqlParser::IS:
      case fugue_sqlParser::ITEMS:
      case fugue_sqlParser::JOIN:
      case fugue_sqlParser::KEYS:
      case fugue_sqlParser::LAST:
      case fugue_sqlParser::LATERAL:
      case fugue_sqlParser::LAZY:
      case fugue_sqlParser::LEADING:
      case fugue_sqlParser::LEFT:
      case fugue_sqlParser::LIKE:
      case fugue_sqlParser::LIMIT:
      case fugue_sqlParser::LINES:
      case fugue_sqlParser::LIST:
      case fugue_sqlParser::LOAD:
      case fugue_sqlParser::LOCAL:
      case fugue_sqlParser::LOCATION:
      case fugue_sqlParser::LOCK:
      case fugue_sqlParser::LOCKS:
      case fugue_sqlParser::LOGICAL:
      case fugue_sqlParser::MACRO:
      case fugue_sqlParser::MAP:
      case fugue_sqlParser::MATCHED:
      case fugue_sqlParser::MERGE:
      case fugue_sqlParser::MINUTE:
      case fugue_sqlParser::MONTH:
      case fugue_sqlParser::MSCK:
      case fugue_sqlParser::NAMESPACE:
      case fugue_sqlParser::NAMESPACES:
      case fugue_sqlParser::NATURAL:
      case fugue_sqlParser::NO:
      case fugue_sqlParser::NOT:
      case fugue_sqlParser::THENULL:
      case fugue_sqlParser::THENULLS:
      case fugue_sqlParser::OF:
      case fugue_sqlParser::ON:
      case fugue_sqlParser::ONLY:
      case fugue_sqlParser::OPTION:
      case fugue_sqlParser::OPTIONS:
      case fugue_sqlParser::OR:
      case fugue_sqlParser::ORDER:
      case fugue_sqlParser::OUT:
      case fugue_sqlParser::OUTER:
      case fugue_sqlParser::OUTPUTFORMAT:
      case fugue_sqlParser::OVER:
      case fugue_sqlParser::OVERLAPS:
      case fugue_sqlParser::OVERLAY:
      case fugue_sqlParser::OVERWRITE:
      case fugue_sqlParser::PARTITION:
      case fugue_sqlParser::PARTITIONED:
      case fugue_sqlParser::PARTITIONS:
      case fugue_sqlParser::PERCENTLIT:
      case fugue_sqlParser::PIVOT:
      case fugue_sqlParser::PLACING:
      case fugue_sqlParser::POSITION:
      case fugue_sqlParser::PRECEDING:
      case fugue_sqlParser::PRIMARY:
      case fugue_sqlParser::PRINCIPALS:
      case fugue_sqlParser::PROPERTIES:
      case fugue_sqlParser::PURGE:
      case fugue_sqlParser::QUERY:
      case fugue_sqlParser::RANGE:
      case fugue_sqlParser::RECORDREADER:
      case fugue_sqlParser::RECORDWRITER:
      case fugue_sqlParser::RECOVER:
      case fugue_sqlParser::REDUCE:
      case fugue_sqlParser::REFERENCES:
      case fugue_sqlParser::REFRESH:
      case fugue_sqlParser::RENAME:
      case fugue_sqlParser::REPAIR:
      case fugue_sqlParser::REPLACE:
      case fugue_sqlParser::RESET:
      case fugue_sqlParser::RESTRICT:
      case fugue_sqlParser::REVOKE:
      case fugue_sqlParser::RIGHT:
      case fugue_sqlParser::RLIKE:
      case fugue_sqlParser::ROLE:
      case fugue_sqlParser::ROLES:
      case fugue_sqlParser::ROLLBACK:
      case fugue_sqlParser::ROLLUP:
      case fugue_sqlParser::ROW:
      case fugue_sqlParser::ROWS:
      case fugue_sqlParser::SCHEMA:
      case fugue_sqlParser::SECOND:
      case fugue_sqlParser::SELECT:
      case fugue_sqlParser::SEMI:
      case fugue_sqlParser::SEPARATED:
      case fugue_sqlParser::SERDE:
      case fugue_sqlParser::SERDEPROPERTIES:
      case fugue_sqlParser::SESSION_USER:
      case fugue_sqlParser::SET:
      case fugue_sqlParser::SETMINUS:
      case fugue_sqlParser::SETS:
      case fugue_sqlParser::SHOW:
      case fugue_sqlParser::SKEWED:
      case fugue_sqlParser::SOME:
      case fugue_sqlParser::SORT:
      case fugue_sqlParser::SORTED:
      case fugue_sqlParser::START:
      case fugue_sqlParser::STATISTICS:
      case fugue_sqlParser::STORED:
      case fugue_sqlParser::STRATIFY:
      case fugue_sqlParser::STRUCT:
      case fugue_sqlParser::SUBSTR:
      case fugue_sqlParser::SUBSTRING:
      case fugue_sqlParser::TABLE:
      case fugue_sqlParser::TABLES:
      case fugue_sqlParser::TABLESAMPLE:
      case fugue_sqlParser::TBLPROPERTIES:
      case fugue_sqlParser::TEMPORARY:
      case fugue_sqlParser::TERMINATED:
      case fugue_sqlParser::THEN:
      case fugue_sqlParser::TO:
      case fugue_sqlParser::TOUCH:
      case fugue_sqlParser::TRAILING:
      case fugue_sqlParser::TRANSACTION:
      case fugue_sqlParser::TRANSACTIONS:
      case fugue_sqlParser::TRANSFORM:
      case fugue_sqlParser::TRIM:
      case fugue_sqlParser::TRUE:
      case fugue_sqlParser::TRUNCATE:
      case fugue_sqlParser::TYPE:
      case fugue_sqlParser::UNARCHIVE:
      case fugue_sqlParser::UNBOUNDED:
      case fugue_sqlParser::UNCACHE:
      case fugue_sqlParser::UNION:
      case fugue_sqlParser::UNIQUE:
      case fugue_sqlParser::UNKNOWN:
      case fugue_sqlParser::UNLOCK:
      case fugue_sqlParser::UNSET:
      case fugue_sqlParser::UPDATE:
      case fugue_sqlParser::USE:
      case fugue_sqlParser::USER:
      case fugue_sqlParser::USING:
      case fugue_sqlParser::VALUES:
      case fugue_sqlParser::VIEW:
      case fugue_sqlParser::VIEWS:
      case fugue_sqlParser::WHEN:
      case fugue_sqlParser::WHERE:
      case fugue_sqlParser::WINDOW:
      case fugue_sqlParser::WITH:
      case fugue_sqlParser::YEAR:
      case fugue_sqlParser::DIV:
      case fugue_sqlParser::IDENTIFIER:
      case fugue_sqlParser::BACKQUOTED_IDENTIFIER: {
        enterOuterAlt(_localctx, 1);
        setState(1070);
        fugueIdentifier();
        break;
      }

      case fugue_sqlParser::STRING: {
        enterOuterAlt(_localctx, 2);
        setState(1071);
        fugueJsonString();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FugueJsonArrayContext ------------------------------------------------------------------

fugue_sqlParser::FugueJsonArrayContext::FugueJsonArrayContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<fugue_sqlParser::FugueJsonValueContext *> fugue_sqlParser::FugueJsonArrayContext::fugueJsonValue() {
  return getRuleContexts<fugue_sqlParser::FugueJsonValueContext>();
}

fugue_sqlParser::FugueJsonValueContext* fugue_sqlParser::FugueJsonArrayContext::fugueJsonValue(size_t i) {
  return getRuleContext<fugue_sqlParser::FugueJsonValueContext>(i);
}


size_t fugue_sqlParser::FugueJsonArrayContext::getRuleIndex() const {
  return fugue_sqlParser::RuleFugueJsonArray;
}


antlrcpp::Any fugue_sqlParser::FugueJsonArrayContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitFugueJsonArray(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::FugueJsonArrayContext* fugue_sqlParser::fugueJsonArray() {
  FugueJsonArrayContext *_localctx = _tracker.createInstance<FugueJsonArrayContext>(_ctx, getState());
  enterRule(_localctx, 136, fugue_sqlParser::RuleFugueJsonArray);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(1090);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 124, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1074);
      match(fugue_sqlParser::T__4);
      setState(1075);
      fugueJsonValue();
      setState(1080);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 122, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(1076);
          match(fugue_sqlParser::T__0);
          setState(1077);
          fugueJsonValue(); 
        }
        setState(1082);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 122, _ctx);
      }
      setState(1084);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::T__0) {
        setState(1083);
        match(fugue_sqlParser::T__0);
      }
      setState(1086);
      match(fugue_sqlParser::T__5);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1088);
      match(fugue_sqlParser::T__4);
      setState(1089);
      match(fugue_sqlParser::T__5);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FugueJsonValueContext ------------------------------------------------------------------

fugue_sqlParser::FugueJsonValueContext::FugueJsonValueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

fugue_sqlParser::FugueJsonStringContext* fugue_sqlParser::FugueJsonValueContext::fugueJsonString() {
  return getRuleContext<fugue_sqlParser::FugueJsonStringContext>(0);
}

fugue_sqlParser::FugueJsonNumberContext* fugue_sqlParser::FugueJsonValueContext::fugueJsonNumber() {
  return getRuleContext<fugue_sqlParser::FugueJsonNumberContext>(0);
}

fugue_sqlParser::FugueJsonObjContext* fugue_sqlParser::FugueJsonValueContext::fugueJsonObj() {
  return getRuleContext<fugue_sqlParser::FugueJsonObjContext>(0);
}

fugue_sqlParser::FugueJsonArrayContext* fugue_sqlParser::FugueJsonValueContext::fugueJsonArray() {
  return getRuleContext<fugue_sqlParser::FugueJsonArrayContext>(0);
}

fugue_sqlParser::FugueJsonBoolContext* fugue_sqlParser::FugueJsonValueContext::fugueJsonBool() {
  return getRuleContext<fugue_sqlParser::FugueJsonBoolContext>(0);
}

fugue_sqlParser::FugueJsonNullContext* fugue_sqlParser::FugueJsonValueContext::fugueJsonNull() {
  return getRuleContext<fugue_sqlParser::FugueJsonNullContext>(0);
}


size_t fugue_sqlParser::FugueJsonValueContext::getRuleIndex() const {
  return fugue_sqlParser::RuleFugueJsonValue;
}


antlrcpp::Any fugue_sqlParser::FugueJsonValueContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitFugueJsonValue(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::FugueJsonValueContext* fugue_sqlParser::fugueJsonValue() {
  FugueJsonValueContext *_localctx = _tracker.createInstance<FugueJsonValueContext>(_ctx, getState());
  enterRule(_localctx, 138, fugue_sqlParser::RuleFugueJsonValue);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1098);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case fugue_sqlParser::STRING: {
        enterOuterAlt(_localctx, 1);
        setState(1092);
        fugueJsonString();
        break;
      }

      case fugue_sqlParser::MINUS:
      case fugue_sqlParser::BIGINT_LITERAL:
      case fugue_sqlParser::SMALLINT_LITERAL:
      case fugue_sqlParser::TINYINT_LITERAL:
      case fugue_sqlParser::INTEGER_VALUE:
      case fugue_sqlParser::EXPONENT_VALUE:
      case fugue_sqlParser::DECIMAL_VALUE:
      case fugue_sqlParser::DOUBLE_LITERAL:
      case fugue_sqlParser::BIGDECIMAL_LITERAL: {
        enterOuterAlt(_localctx, 2);
        setState(1093);
        fugueJsonNumber();
        break;
      }

      case fugue_sqlParser::T__2:
      case fugue_sqlParser::T__7: {
        enterOuterAlt(_localctx, 3);
        setState(1094);
        fugueJsonObj();
        break;
      }

      case fugue_sqlParser::T__4: {
        enterOuterAlt(_localctx, 4);
        setState(1095);
        fugueJsonArray();
        break;
      }

      case fugue_sqlParser::T__9:
      case fugue_sqlParser::T__10:
      case fugue_sqlParser::FALSE:
      case fugue_sqlParser::TRUE: {
        enterOuterAlt(_localctx, 5);
        setState(1096);
        fugueJsonBool();
        break;
      }

      case fugue_sqlParser::T__11:
      case fugue_sqlParser::THENULL: {
        enterOuterAlt(_localctx, 6);
        setState(1097);
        fugueJsonNull();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FugueJsonNumberContext ------------------------------------------------------------------

fugue_sqlParser::FugueJsonNumberContext::FugueJsonNumberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

fugue_sqlParser::NumberContext* fugue_sqlParser::FugueJsonNumberContext::number() {
  return getRuleContext<fugue_sqlParser::NumberContext>(0);
}


size_t fugue_sqlParser::FugueJsonNumberContext::getRuleIndex() const {
  return fugue_sqlParser::RuleFugueJsonNumber;
}


antlrcpp::Any fugue_sqlParser::FugueJsonNumberContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitFugueJsonNumber(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::FugueJsonNumberContext* fugue_sqlParser::fugueJsonNumber() {
  FugueJsonNumberContext *_localctx = _tracker.createInstance<FugueJsonNumberContext>(_ctx, getState());
  enterRule(_localctx, 140, fugue_sqlParser::RuleFugueJsonNumber);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1100);
    number();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FugueJsonStringContext ------------------------------------------------------------------

fugue_sqlParser::FugueJsonStringContext::FugueJsonStringContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* fugue_sqlParser::FugueJsonStringContext::STRING() {
  return getToken(fugue_sqlParser::STRING, 0);
}


size_t fugue_sqlParser::FugueJsonStringContext::getRuleIndex() const {
  return fugue_sqlParser::RuleFugueJsonString;
}


antlrcpp::Any fugue_sqlParser::FugueJsonStringContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitFugueJsonString(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::FugueJsonStringContext* fugue_sqlParser::fugueJsonString() {
  FugueJsonStringContext *_localctx = _tracker.createInstance<FugueJsonStringContext>(_ctx, getState());
  enterRule(_localctx, 142, fugue_sqlParser::RuleFugueJsonString);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1102);
    match(fugue_sqlParser::STRING);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FugueJsonBoolContext ------------------------------------------------------------------

fugue_sqlParser::FugueJsonBoolContext::FugueJsonBoolContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* fugue_sqlParser::FugueJsonBoolContext::TRUE() {
  return getToken(fugue_sqlParser::TRUE, 0);
}

tree::TerminalNode* fugue_sqlParser::FugueJsonBoolContext::FALSE() {
  return getToken(fugue_sqlParser::FALSE, 0);
}


size_t fugue_sqlParser::FugueJsonBoolContext::getRuleIndex() const {
  return fugue_sqlParser::RuleFugueJsonBool;
}


antlrcpp::Any fugue_sqlParser::FugueJsonBoolContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitFugueJsonBool(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::FugueJsonBoolContext* fugue_sqlParser::fugueJsonBool() {
  FugueJsonBoolContext *_localctx = _tracker.createInstance<FugueJsonBoolContext>(_ctx, getState());
  enterRule(_localctx, 144, fugue_sqlParser::RuleFugueJsonBool);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1104);
    _la = _input->LA(1);
    if (!(_la == fugue_sqlParser::T__9

    || _la == fugue_sqlParser::T__10 || _la == fugue_sqlParser::FALSE || _la == fugue_sqlParser::TRUE)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FugueJsonNullContext ------------------------------------------------------------------

fugue_sqlParser::FugueJsonNullContext::FugueJsonNullContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* fugue_sqlParser::FugueJsonNullContext::THENULL() {
  return getToken(fugue_sqlParser::THENULL, 0);
}


size_t fugue_sqlParser::FugueJsonNullContext::getRuleIndex() const {
  return fugue_sqlParser::RuleFugueJsonNull;
}


antlrcpp::Any fugue_sqlParser::FugueJsonNullContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitFugueJsonNull(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::FugueJsonNullContext* fugue_sqlParser::fugueJsonNull() {
  FugueJsonNullContext *_localctx = _tracker.createInstance<FugueJsonNullContext>(_ctx, getState());
  enterRule(_localctx, 146, fugue_sqlParser::RuleFugueJsonNull);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1106);
    _la = _input->LA(1);
    if (!(_la == fugue_sqlParser::T__11 || _la == fugue_sqlParser::THENULL)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FugueIdentifierContext ------------------------------------------------------------------

fugue_sqlParser::FugueIdentifierContext::FugueIdentifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

fugue_sqlParser::IdentifierContext* fugue_sqlParser::FugueIdentifierContext::identifier() {
  return getRuleContext<fugue_sqlParser::IdentifierContext>(0);
}


size_t fugue_sqlParser::FugueIdentifierContext::getRuleIndex() const {
  return fugue_sqlParser::RuleFugueIdentifier;
}


antlrcpp::Any fugue_sqlParser::FugueIdentifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitFugueIdentifier(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::FugueIdentifierContext* fugue_sqlParser::fugueIdentifier() {
  FugueIdentifierContext *_localctx = _tracker.createInstance<FugueIdentifierContext>(_ctx, getState());
  enterRule(_localctx, 148, fugue_sqlParser::RuleFugueIdentifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1108);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SingleStatementContext ------------------------------------------------------------------

fugue_sqlParser::SingleStatementContext::SingleStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

fugue_sqlParser::StatementContext* fugue_sqlParser::SingleStatementContext::statement() {
  return getRuleContext<fugue_sqlParser::StatementContext>(0);
}

tree::TerminalNode* fugue_sqlParser::SingleStatementContext::EOF() {
  return getToken(fugue_sqlParser::EOF, 0);
}


size_t fugue_sqlParser::SingleStatementContext::getRuleIndex() const {
  return fugue_sqlParser::RuleSingleStatement;
}


antlrcpp::Any fugue_sqlParser::SingleStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitSingleStatement(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::SingleStatementContext* fugue_sqlParser::singleStatement() {
  SingleStatementContext *_localctx = _tracker.createInstance<SingleStatementContext>(_ctx, getState());
  enterRule(_localctx, 150, fugue_sqlParser::RuleSingleStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1110);
    statement();
    setState(1114);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == fugue_sqlParser::T__12) {
      setState(1111);
      match(fugue_sqlParser::T__12);
      setState(1116);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1117);
    match(fugue_sqlParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SingleExpressionContext ------------------------------------------------------------------

fugue_sqlParser::SingleExpressionContext::SingleExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

fugue_sqlParser::NamedExpressionContext* fugue_sqlParser::SingleExpressionContext::namedExpression() {
  return getRuleContext<fugue_sqlParser::NamedExpressionContext>(0);
}

tree::TerminalNode* fugue_sqlParser::SingleExpressionContext::EOF() {
  return getToken(fugue_sqlParser::EOF, 0);
}


size_t fugue_sqlParser::SingleExpressionContext::getRuleIndex() const {
  return fugue_sqlParser::RuleSingleExpression;
}


antlrcpp::Any fugue_sqlParser::SingleExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitSingleExpression(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::SingleExpressionContext* fugue_sqlParser::singleExpression() {
  SingleExpressionContext *_localctx = _tracker.createInstance<SingleExpressionContext>(_ctx, getState());
  enterRule(_localctx, 152, fugue_sqlParser::RuleSingleExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1119);
    namedExpression();
    setState(1120);
    match(fugue_sqlParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SingleTableIdentifierContext ------------------------------------------------------------------

fugue_sqlParser::SingleTableIdentifierContext::SingleTableIdentifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

fugue_sqlParser::TableIdentifierContext* fugue_sqlParser::SingleTableIdentifierContext::tableIdentifier() {
  return getRuleContext<fugue_sqlParser::TableIdentifierContext>(0);
}

tree::TerminalNode* fugue_sqlParser::SingleTableIdentifierContext::EOF() {
  return getToken(fugue_sqlParser::EOF, 0);
}


size_t fugue_sqlParser::SingleTableIdentifierContext::getRuleIndex() const {
  return fugue_sqlParser::RuleSingleTableIdentifier;
}


antlrcpp::Any fugue_sqlParser::SingleTableIdentifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitSingleTableIdentifier(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::SingleTableIdentifierContext* fugue_sqlParser::singleTableIdentifier() {
  SingleTableIdentifierContext *_localctx = _tracker.createInstance<SingleTableIdentifierContext>(_ctx, getState());
  enterRule(_localctx, 154, fugue_sqlParser::RuleSingleTableIdentifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1122);
    tableIdentifier();
    setState(1123);
    match(fugue_sqlParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SingleMultipartIdentifierContext ------------------------------------------------------------------

fugue_sqlParser::SingleMultipartIdentifierContext::SingleMultipartIdentifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

fugue_sqlParser::MultipartIdentifierContext* fugue_sqlParser::SingleMultipartIdentifierContext::multipartIdentifier() {
  return getRuleContext<fugue_sqlParser::MultipartIdentifierContext>(0);
}

tree::TerminalNode* fugue_sqlParser::SingleMultipartIdentifierContext::EOF() {
  return getToken(fugue_sqlParser::EOF, 0);
}


size_t fugue_sqlParser::SingleMultipartIdentifierContext::getRuleIndex() const {
  return fugue_sqlParser::RuleSingleMultipartIdentifier;
}


antlrcpp::Any fugue_sqlParser::SingleMultipartIdentifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitSingleMultipartIdentifier(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::SingleMultipartIdentifierContext* fugue_sqlParser::singleMultipartIdentifier() {
  SingleMultipartIdentifierContext *_localctx = _tracker.createInstance<SingleMultipartIdentifierContext>(_ctx, getState());
  enterRule(_localctx, 156, fugue_sqlParser::RuleSingleMultipartIdentifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1125);
    multipartIdentifier();
    setState(1126);
    match(fugue_sqlParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SingleFunctionIdentifierContext ------------------------------------------------------------------

fugue_sqlParser::SingleFunctionIdentifierContext::SingleFunctionIdentifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

fugue_sqlParser::FunctionIdentifierContext* fugue_sqlParser::SingleFunctionIdentifierContext::functionIdentifier() {
  return getRuleContext<fugue_sqlParser::FunctionIdentifierContext>(0);
}

tree::TerminalNode* fugue_sqlParser::SingleFunctionIdentifierContext::EOF() {
  return getToken(fugue_sqlParser::EOF, 0);
}


size_t fugue_sqlParser::SingleFunctionIdentifierContext::getRuleIndex() const {
  return fugue_sqlParser::RuleSingleFunctionIdentifier;
}


antlrcpp::Any fugue_sqlParser::SingleFunctionIdentifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitSingleFunctionIdentifier(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::SingleFunctionIdentifierContext* fugue_sqlParser::singleFunctionIdentifier() {
  SingleFunctionIdentifierContext *_localctx = _tracker.createInstance<SingleFunctionIdentifierContext>(_ctx, getState());
  enterRule(_localctx, 158, fugue_sqlParser::RuleSingleFunctionIdentifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1128);
    functionIdentifier();
    setState(1129);
    match(fugue_sqlParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SingleDataTypeContext ------------------------------------------------------------------

fugue_sqlParser::SingleDataTypeContext::SingleDataTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

fugue_sqlParser::DataTypeContext* fugue_sqlParser::SingleDataTypeContext::dataType() {
  return getRuleContext<fugue_sqlParser::DataTypeContext>(0);
}

tree::TerminalNode* fugue_sqlParser::SingleDataTypeContext::EOF() {
  return getToken(fugue_sqlParser::EOF, 0);
}


size_t fugue_sqlParser::SingleDataTypeContext::getRuleIndex() const {
  return fugue_sqlParser::RuleSingleDataType;
}


antlrcpp::Any fugue_sqlParser::SingleDataTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitSingleDataType(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::SingleDataTypeContext* fugue_sqlParser::singleDataType() {
  SingleDataTypeContext *_localctx = _tracker.createInstance<SingleDataTypeContext>(_ctx, getState());
  enterRule(_localctx, 160, fugue_sqlParser::RuleSingleDataType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1131);
    dataType();
    setState(1132);
    match(fugue_sqlParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SingleTableSchemaContext ------------------------------------------------------------------

fugue_sqlParser::SingleTableSchemaContext::SingleTableSchemaContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

fugue_sqlParser::ColTypeListContext* fugue_sqlParser::SingleTableSchemaContext::colTypeList() {
  return getRuleContext<fugue_sqlParser::ColTypeListContext>(0);
}

tree::TerminalNode* fugue_sqlParser::SingleTableSchemaContext::EOF() {
  return getToken(fugue_sqlParser::EOF, 0);
}


size_t fugue_sqlParser::SingleTableSchemaContext::getRuleIndex() const {
  return fugue_sqlParser::RuleSingleTableSchema;
}


antlrcpp::Any fugue_sqlParser::SingleTableSchemaContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitSingleTableSchema(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::SingleTableSchemaContext* fugue_sqlParser::singleTableSchema() {
  SingleTableSchemaContext *_localctx = _tracker.createInstance<SingleTableSchemaContext>(_ctx, getState());
  enterRule(_localctx, 162, fugue_sqlParser::RuleSingleTableSchema);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1134);
    colTypeList();
    setState(1135);
    match(fugue_sqlParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StatementContext ------------------------------------------------------------------

fugue_sqlParser::StatementContext::StatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t fugue_sqlParser::StatementContext::getRuleIndex() const {
  return fugue_sqlParser::RuleStatement;
}

void fugue_sqlParser::StatementContext::copyFrom(StatementContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- ExplainContext ------------------------------------------------------------------

tree::TerminalNode* fugue_sqlParser::ExplainContext::EXPLAIN() {
  return getToken(fugue_sqlParser::EXPLAIN, 0);
}

fugue_sqlParser::StatementContext* fugue_sqlParser::ExplainContext::statement() {
  return getRuleContext<fugue_sqlParser::StatementContext>(0);
}

tree::TerminalNode* fugue_sqlParser::ExplainContext::LOGICAL() {
  return getToken(fugue_sqlParser::LOGICAL, 0);
}

tree::TerminalNode* fugue_sqlParser::ExplainContext::FORMATTED() {
  return getToken(fugue_sqlParser::FORMATTED, 0);
}

tree::TerminalNode* fugue_sqlParser::ExplainContext::EXTENDED() {
  return getToken(fugue_sqlParser::EXTENDED, 0);
}

tree::TerminalNode* fugue_sqlParser::ExplainContext::CODEGEN() {
  return getToken(fugue_sqlParser::CODEGEN, 0);
}

tree::TerminalNode* fugue_sqlParser::ExplainContext::COST() {
  return getToken(fugue_sqlParser::COST, 0);
}

fugue_sqlParser::ExplainContext::ExplainContext(StatementContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::ExplainContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitExplain(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ResetConfigurationContext ------------------------------------------------------------------

tree::TerminalNode* fugue_sqlParser::ResetConfigurationContext::RESET() {
  return getToken(fugue_sqlParser::RESET, 0);
}

fugue_sqlParser::ResetConfigurationContext::ResetConfigurationContext(StatementContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::ResetConfigurationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitResetConfiguration(this);
  else
    return visitor->visitChildren(this);
}
//----------------- AlterViewQueryContext ------------------------------------------------------------------

tree::TerminalNode* fugue_sqlParser::AlterViewQueryContext::ALTER() {
  return getToken(fugue_sqlParser::ALTER, 0);
}

tree::TerminalNode* fugue_sqlParser::AlterViewQueryContext::VIEW() {
  return getToken(fugue_sqlParser::VIEW, 0);
}

fugue_sqlParser::MultipartIdentifierContext* fugue_sqlParser::AlterViewQueryContext::multipartIdentifier() {
  return getRuleContext<fugue_sqlParser::MultipartIdentifierContext>(0);
}

fugue_sqlParser::QueryContext* fugue_sqlParser::AlterViewQueryContext::query() {
  return getRuleContext<fugue_sqlParser::QueryContext>(0);
}

tree::TerminalNode* fugue_sqlParser::AlterViewQueryContext::AS() {
  return getToken(fugue_sqlParser::AS, 0);
}

fugue_sqlParser::AlterViewQueryContext::AlterViewQueryContext(StatementContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::AlterViewQueryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitAlterViewQuery(this);
  else
    return visitor->visitChildren(this);
}
//----------------- UseContext ------------------------------------------------------------------

tree::TerminalNode* fugue_sqlParser::UseContext::USE() {
  return getToken(fugue_sqlParser::USE, 0);
}

fugue_sqlParser::MultipartIdentifierContext* fugue_sqlParser::UseContext::multipartIdentifier() {
  return getRuleContext<fugue_sqlParser::MultipartIdentifierContext>(0);
}

tree::TerminalNode* fugue_sqlParser::UseContext::NAMESPACE() {
  return getToken(fugue_sqlParser::NAMESPACE, 0);
}

fugue_sqlParser::UseContext::UseContext(StatementContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::UseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitUse(this);
  else
    return visitor->visitChildren(this);
}
//----------------- DropNamespaceContext ------------------------------------------------------------------

tree::TerminalNode* fugue_sqlParser::DropNamespaceContext::DROP() {
  return getToken(fugue_sqlParser::DROP, 0);
}

fugue_sqlParser::TheNamespaceContext* fugue_sqlParser::DropNamespaceContext::theNamespace() {
  return getRuleContext<fugue_sqlParser::TheNamespaceContext>(0);
}

fugue_sqlParser::MultipartIdentifierContext* fugue_sqlParser::DropNamespaceContext::multipartIdentifier() {
  return getRuleContext<fugue_sqlParser::MultipartIdentifierContext>(0);
}

tree::TerminalNode* fugue_sqlParser::DropNamespaceContext::IF() {
  return getToken(fugue_sqlParser::IF, 0);
}

tree::TerminalNode* fugue_sqlParser::DropNamespaceContext::EXISTS() {
  return getToken(fugue_sqlParser::EXISTS, 0);
}

tree::TerminalNode* fugue_sqlParser::DropNamespaceContext::RESTRICT() {
  return getToken(fugue_sqlParser::RESTRICT, 0);
}

tree::TerminalNode* fugue_sqlParser::DropNamespaceContext::CASCADE() {
  return getToken(fugue_sqlParser::CASCADE, 0);
}

fugue_sqlParser::DropNamespaceContext::DropNamespaceContext(StatementContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::DropNamespaceContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitDropNamespace(this);
  else
    return visitor->visitChildren(this);
}
//----------------- CreateTempViewUsingContext ------------------------------------------------------------------

tree::TerminalNode* fugue_sqlParser::CreateTempViewUsingContext::CREATE() {
  return getToken(fugue_sqlParser::CREATE, 0);
}

tree::TerminalNode* fugue_sqlParser::CreateTempViewUsingContext::TEMPORARY() {
  return getToken(fugue_sqlParser::TEMPORARY, 0);
}

tree::TerminalNode* fugue_sqlParser::CreateTempViewUsingContext::VIEW() {
  return getToken(fugue_sqlParser::VIEW, 0);
}

fugue_sqlParser::TableIdentifierContext* fugue_sqlParser::CreateTempViewUsingContext::tableIdentifier() {
  return getRuleContext<fugue_sqlParser::TableIdentifierContext>(0);
}

fugue_sqlParser::TableProviderContext* fugue_sqlParser::CreateTempViewUsingContext::tableProvider() {
  return getRuleContext<fugue_sqlParser::TableProviderContext>(0);
}

tree::TerminalNode* fugue_sqlParser::CreateTempViewUsingContext::OR() {
  return getToken(fugue_sqlParser::OR, 0);
}

tree::TerminalNode* fugue_sqlParser::CreateTempViewUsingContext::REPLACE() {
  return getToken(fugue_sqlParser::REPLACE, 0);
}

tree::TerminalNode* fugue_sqlParser::CreateTempViewUsingContext::GLOBAL() {
  return getToken(fugue_sqlParser::GLOBAL, 0);
}

fugue_sqlParser::ColTypeListContext* fugue_sqlParser::CreateTempViewUsingContext::colTypeList() {
  return getRuleContext<fugue_sqlParser::ColTypeListContext>(0);
}

tree::TerminalNode* fugue_sqlParser::CreateTempViewUsingContext::OPTIONS() {
  return getToken(fugue_sqlParser::OPTIONS, 0);
}

fugue_sqlParser::TablePropertyListContext* fugue_sqlParser::CreateTempViewUsingContext::tablePropertyList() {
  return getRuleContext<fugue_sqlParser::TablePropertyListContext>(0);
}

fugue_sqlParser::CreateTempViewUsingContext::CreateTempViewUsingContext(StatementContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::CreateTempViewUsingContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitCreateTempViewUsing(this);
  else
    return visitor->visitChildren(this);
}
//----------------- RenameTableContext ------------------------------------------------------------------

tree::TerminalNode* fugue_sqlParser::RenameTableContext::ALTER() {
  return getToken(fugue_sqlParser::ALTER, 0);
}

tree::TerminalNode* fugue_sqlParser::RenameTableContext::RENAME() {
  return getToken(fugue_sqlParser::RENAME, 0);
}

tree::TerminalNode* fugue_sqlParser::RenameTableContext::TO() {
  return getToken(fugue_sqlParser::TO, 0);
}

tree::TerminalNode* fugue_sqlParser::RenameTableContext::TABLE() {
  return getToken(fugue_sqlParser::TABLE, 0);
}

tree::TerminalNode* fugue_sqlParser::RenameTableContext::VIEW() {
  return getToken(fugue_sqlParser::VIEW, 0);
}

std::vector<fugue_sqlParser::MultipartIdentifierContext *> fugue_sqlParser::RenameTableContext::multipartIdentifier() {
  return getRuleContexts<fugue_sqlParser::MultipartIdentifierContext>();
}

fugue_sqlParser::MultipartIdentifierContext* fugue_sqlParser::RenameTableContext::multipartIdentifier(size_t i) {
  return getRuleContext<fugue_sqlParser::MultipartIdentifierContext>(i);
}

fugue_sqlParser::RenameTableContext::RenameTableContext(StatementContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::RenameTableContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitRenameTable(this);
  else
    return visitor->visitChildren(this);
}
//----------------- FailNativeCommandContext ------------------------------------------------------------------

tree::TerminalNode* fugue_sqlParser::FailNativeCommandContext::SET() {
  return getToken(fugue_sqlParser::SET, 0);
}

tree::TerminalNode* fugue_sqlParser::FailNativeCommandContext::ROLE() {
  return getToken(fugue_sqlParser::ROLE, 0);
}

fugue_sqlParser::UnsupportedHiveNativeCommandsContext* fugue_sqlParser::FailNativeCommandContext::unsupportedHiveNativeCommands() {
  return getRuleContext<fugue_sqlParser::UnsupportedHiveNativeCommandsContext>(0);
}

fugue_sqlParser::FailNativeCommandContext::FailNativeCommandContext(StatementContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::FailNativeCommandContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitFailNativeCommand(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ClearCacheContext ------------------------------------------------------------------

tree::TerminalNode* fugue_sqlParser::ClearCacheContext::CLEAR() {
  return getToken(fugue_sqlParser::CLEAR, 0);
}

tree::TerminalNode* fugue_sqlParser::ClearCacheContext::CACHE() {
  return getToken(fugue_sqlParser::CACHE, 0);
}

fugue_sqlParser::ClearCacheContext::ClearCacheContext(StatementContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::ClearCacheContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitClearCache(this);
  else
    return visitor->visitChildren(this);
}
//----------------- DropViewContext ------------------------------------------------------------------

tree::TerminalNode* fugue_sqlParser::DropViewContext::DROP() {
  return getToken(fugue_sqlParser::DROP, 0);
}

tree::TerminalNode* fugue_sqlParser::DropViewContext::VIEW() {
  return getToken(fugue_sqlParser::VIEW, 0);
}

fugue_sqlParser::MultipartIdentifierContext* fugue_sqlParser::DropViewContext::multipartIdentifier() {
  return getRuleContext<fugue_sqlParser::MultipartIdentifierContext>(0);
}

tree::TerminalNode* fugue_sqlParser::DropViewContext::IF() {
  return getToken(fugue_sqlParser::IF, 0);
}

tree::TerminalNode* fugue_sqlParser::DropViewContext::EXISTS() {
  return getToken(fugue_sqlParser::EXISTS, 0);
}

fugue_sqlParser::DropViewContext::DropViewContext(StatementContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::DropViewContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitDropView(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ShowTablesContext ------------------------------------------------------------------

tree::TerminalNode* fugue_sqlParser::ShowTablesContext::SHOW() {
  return getToken(fugue_sqlParser::SHOW, 0);
}

tree::TerminalNode* fugue_sqlParser::ShowTablesContext::TABLES() {
  return getToken(fugue_sqlParser::TABLES, 0);
}

fugue_sqlParser::MultipartIdentifierContext* fugue_sqlParser::ShowTablesContext::multipartIdentifier() {
  return getRuleContext<fugue_sqlParser::MultipartIdentifierContext>(0);
}

tree::TerminalNode* fugue_sqlParser::ShowTablesContext::FROM() {
  return getToken(fugue_sqlParser::FROM, 0);
}

tree::TerminalNode* fugue_sqlParser::ShowTablesContext::IN() {
  return getToken(fugue_sqlParser::IN, 0);
}

tree::TerminalNode* fugue_sqlParser::ShowTablesContext::STRING() {
  return getToken(fugue_sqlParser::STRING, 0);
}

tree::TerminalNode* fugue_sqlParser::ShowTablesContext::LIKE() {
  return getToken(fugue_sqlParser::LIKE, 0);
}

fugue_sqlParser::ShowTablesContext::ShowTablesContext(StatementContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::ShowTablesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitShowTables(this);
  else
    return visitor->visitChildren(this);
}
//----------------- RecoverPartitionsContext ------------------------------------------------------------------

tree::TerminalNode* fugue_sqlParser::RecoverPartitionsContext::ALTER() {
  return getToken(fugue_sqlParser::ALTER, 0);
}

tree::TerminalNode* fugue_sqlParser::RecoverPartitionsContext::TABLE() {
  return getToken(fugue_sqlParser::TABLE, 0);
}

fugue_sqlParser::MultipartIdentifierContext* fugue_sqlParser::RecoverPartitionsContext::multipartIdentifier() {
  return getRuleContext<fugue_sqlParser::MultipartIdentifierContext>(0);
}

tree::TerminalNode* fugue_sqlParser::RecoverPartitionsContext::RECOVER() {
  return getToken(fugue_sqlParser::RECOVER, 0);
}

tree::TerminalNode* fugue_sqlParser::RecoverPartitionsContext::PARTITIONS() {
  return getToken(fugue_sqlParser::PARTITIONS, 0);
}

fugue_sqlParser::RecoverPartitionsContext::RecoverPartitionsContext(StatementContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::RecoverPartitionsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitRecoverPartitions(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ShowCurrentNamespaceContext ------------------------------------------------------------------

tree::TerminalNode* fugue_sqlParser::ShowCurrentNamespaceContext::SHOW() {
  return getToken(fugue_sqlParser::SHOW, 0);
}

tree::TerminalNode* fugue_sqlParser::ShowCurrentNamespaceContext::CURRENT() {
  return getToken(fugue_sqlParser::CURRENT, 0);
}

tree::TerminalNode* fugue_sqlParser::ShowCurrentNamespaceContext::NAMESPACE() {
  return getToken(fugue_sqlParser::NAMESPACE, 0);
}

fugue_sqlParser::ShowCurrentNamespaceContext::ShowCurrentNamespaceContext(StatementContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::ShowCurrentNamespaceContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitShowCurrentNamespace(this);
  else
    return visitor->visitChildren(this);
}
//----------------- RenameTablePartitionContext ------------------------------------------------------------------

tree::TerminalNode* fugue_sqlParser::RenameTablePartitionContext::ALTER() {
  return getToken(fugue_sqlParser::ALTER, 0);
}

tree::TerminalNode* fugue_sqlParser::RenameTablePartitionContext::TABLE() {
  return getToken(fugue_sqlParser::TABLE, 0);
}

fugue_sqlParser::MultipartIdentifierContext* fugue_sqlParser::RenameTablePartitionContext::multipartIdentifier() {
  return getRuleContext<fugue_sqlParser::MultipartIdentifierContext>(0);
}

tree::TerminalNode* fugue_sqlParser::RenameTablePartitionContext::RENAME() {
  return getToken(fugue_sqlParser::RENAME, 0);
}

tree::TerminalNode* fugue_sqlParser::RenameTablePartitionContext::TO() {
  return getToken(fugue_sqlParser::TO, 0);
}

std::vector<fugue_sqlParser::PartitionSpecContext *> fugue_sqlParser::RenameTablePartitionContext::partitionSpec() {
  return getRuleContexts<fugue_sqlParser::PartitionSpecContext>();
}

fugue_sqlParser::PartitionSpecContext* fugue_sqlParser::RenameTablePartitionContext::partitionSpec(size_t i) {
  return getRuleContext<fugue_sqlParser::PartitionSpecContext>(i);
}

fugue_sqlParser::RenameTablePartitionContext::RenameTablePartitionContext(StatementContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::RenameTablePartitionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitRenameTablePartition(this);
  else
    return visitor->visitChildren(this);
}
//----------------- RepairTableContext ------------------------------------------------------------------

tree::TerminalNode* fugue_sqlParser::RepairTableContext::MSCK() {
  return getToken(fugue_sqlParser::MSCK, 0);
}

tree::TerminalNode* fugue_sqlParser::RepairTableContext::REPAIR() {
  return getToken(fugue_sqlParser::REPAIR, 0);
}

tree::TerminalNode* fugue_sqlParser::RepairTableContext::TABLE() {
  return getToken(fugue_sqlParser::TABLE, 0);
}

fugue_sqlParser::MultipartIdentifierContext* fugue_sqlParser::RepairTableContext::multipartIdentifier() {
  return getRuleContext<fugue_sqlParser::MultipartIdentifierContext>(0);
}

fugue_sqlParser::RepairTableContext::RepairTableContext(StatementContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::RepairTableContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitRepairTable(this);
  else
    return visitor->visitChildren(this);
}
//----------------- RefreshResourceContext ------------------------------------------------------------------

tree::TerminalNode* fugue_sqlParser::RefreshResourceContext::REFRESH() {
  return getToken(fugue_sqlParser::REFRESH, 0);
}

tree::TerminalNode* fugue_sqlParser::RefreshResourceContext::STRING() {
  return getToken(fugue_sqlParser::STRING, 0);
}

fugue_sqlParser::RefreshResourceContext::RefreshResourceContext(StatementContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::RefreshResourceContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitRefreshResource(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ShowCreateTableContext ------------------------------------------------------------------

tree::TerminalNode* fugue_sqlParser::ShowCreateTableContext::SHOW() {
  return getToken(fugue_sqlParser::SHOW, 0);
}

tree::TerminalNode* fugue_sqlParser::ShowCreateTableContext::CREATE() {
  return getToken(fugue_sqlParser::CREATE, 0);
}

tree::TerminalNode* fugue_sqlParser::ShowCreateTableContext::TABLE() {
  return getToken(fugue_sqlParser::TABLE, 0);
}

fugue_sqlParser::MultipartIdentifierContext* fugue_sqlParser::ShowCreateTableContext::multipartIdentifier() {
  return getRuleContext<fugue_sqlParser::MultipartIdentifierContext>(0);
}

tree::TerminalNode* fugue_sqlParser::ShowCreateTableContext::AS() {
  return getToken(fugue_sqlParser::AS, 0);
}

tree::TerminalNode* fugue_sqlParser::ShowCreateTableContext::SERDE() {
  return getToken(fugue_sqlParser::SERDE, 0);
}

fugue_sqlParser::ShowCreateTableContext::ShowCreateTableContext(StatementContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::ShowCreateTableContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitShowCreateTable(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ShowNamespacesContext ------------------------------------------------------------------

tree::TerminalNode* fugue_sqlParser::ShowNamespacesContext::SHOW() {
  return getToken(fugue_sqlParser::SHOW, 0);
}

tree::TerminalNode* fugue_sqlParser::ShowNamespacesContext::DATABASES() {
  return getToken(fugue_sqlParser::DATABASES, 0);
}

tree::TerminalNode* fugue_sqlParser::ShowNamespacesContext::NAMESPACES() {
  return getToken(fugue_sqlParser::NAMESPACES, 0);
}

fugue_sqlParser::MultipartIdentifierContext* fugue_sqlParser::ShowNamespacesContext::multipartIdentifier() {
  return getRuleContext<fugue_sqlParser::MultipartIdentifierContext>(0);
}

tree::TerminalNode* fugue_sqlParser::ShowNamespacesContext::FROM() {
  return getToken(fugue_sqlParser::FROM, 0);
}

tree::TerminalNode* fugue_sqlParser::ShowNamespacesContext::IN() {
  return getToken(fugue_sqlParser::IN, 0);
}

tree::TerminalNode* fugue_sqlParser::ShowNamespacesContext::STRING() {
  return getToken(fugue_sqlParser::STRING, 0);
}

tree::TerminalNode* fugue_sqlParser::ShowNamespacesContext::LIKE() {
  return getToken(fugue_sqlParser::LIKE, 0);
}

fugue_sqlParser::ShowNamespacesContext::ShowNamespacesContext(StatementContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::ShowNamespacesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitShowNamespaces(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ShowColumnsContext ------------------------------------------------------------------

tree::TerminalNode* fugue_sqlParser::ShowColumnsContext::SHOW() {
  return getToken(fugue_sqlParser::SHOW, 0);
}

tree::TerminalNode* fugue_sqlParser::ShowColumnsContext::COLUMNS() {
  return getToken(fugue_sqlParser::COLUMNS, 0);
}

std::vector<tree::TerminalNode *> fugue_sqlParser::ShowColumnsContext::FROM() {
  return getTokens(fugue_sqlParser::FROM);
}

tree::TerminalNode* fugue_sqlParser::ShowColumnsContext::FROM(size_t i) {
  return getToken(fugue_sqlParser::FROM, i);
}

std::vector<tree::TerminalNode *> fugue_sqlParser::ShowColumnsContext::IN() {
  return getTokens(fugue_sqlParser::IN);
}

tree::TerminalNode* fugue_sqlParser::ShowColumnsContext::IN(size_t i) {
  return getToken(fugue_sqlParser::IN, i);
}

std::vector<fugue_sqlParser::MultipartIdentifierContext *> fugue_sqlParser::ShowColumnsContext::multipartIdentifier() {
  return getRuleContexts<fugue_sqlParser::MultipartIdentifierContext>();
}

fugue_sqlParser::MultipartIdentifierContext* fugue_sqlParser::ShowColumnsContext::multipartIdentifier(size_t i) {
  return getRuleContext<fugue_sqlParser::MultipartIdentifierContext>(i);
}

fugue_sqlParser::ShowColumnsContext::ShowColumnsContext(StatementContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::ShowColumnsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitShowColumns(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ReplaceTableContext ------------------------------------------------------------------

fugue_sqlParser::ReplaceTableHeaderContext* fugue_sqlParser::ReplaceTableContext::replaceTableHeader() {
  return getRuleContext<fugue_sqlParser::ReplaceTableHeaderContext>(0);
}

fugue_sqlParser::TableProviderContext* fugue_sqlParser::ReplaceTableContext::tableProvider() {
  return getRuleContext<fugue_sqlParser::TableProviderContext>(0);
}

fugue_sqlParser::CreateTableClausesContext* fugue_sqlParser::ReplaceTableContext::createTableClauses() {
  return getRuleContext<fugue_sqlParser::CreateTableClausesContext>(0);
}

fugue_sqlParser::ColTypeListContext* fugue_sqlParser::ReplaceTableContext::colTypeList() {
  return getRuleContext<fugue_sqlParser::ColTypeListContext>(0);
}

fugue_sqlParser::QueryContext* fugue_sqlParser::ReplaceTableContext::query() {
  return getRuleContext<fugue_sqlParser::QueryContext>(0);
}

tree::TerminalNode* fugue_sqlParser::ReplaceTableContext::AS() {
  return getToken(fugue_sqlParser::AS, 0);
}

fugue_sqlParser::ReplaceTableContext::ReplaceTableContext(StatementContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::ReplaceTableContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitReplaceTable(this);
  else
    return visitor->visitChildren(this);
}
//----------------- AddTablePartitionContext ------------------------------------------------------------------

tree::TerminalNode* fugue_sqlParser::AddTablePartitionContext::ALTER() {
  return getToken(fugue_sqlParser::ALTER, 0);
}

fugue_sqlParser::MultipartIdentifierContext* fugue_sqlParser::AddTablePartitionContext::multipartIdentifier() {
  return getRuleContext<fugue_sqlParser::MultipartIdentifierContext>(0);
}

tree::TerminalNode* fugue_sqlParser::AddTablePartitionContext::ADD() {
  return getToken(fugue_sqlParser::ADD, 0);
}

tree::TerminalNode* fugue_sqlParser::AddTablePartitionContext::TABLE() {
  return getToken(fugue_sqlParser::TABLE, 0);
}

tree::TerminalNode* fugue_sqlParser::AddTablePartitionContext::VIEW() {
  return getToken(fugue_sqlParser::VIEW, 0);
}

tree::TerminalNode* fugue_sqlParser::AddTablePartitionContext::IF() {
  return getToken(fugue_sqlParser::IF, 0);
}

tree::TerminalNode* fugue_sqlParser::AddTablePartitionContext::NOT() {
  return getToken(fugue_sqlParser::NOT, 0);
}

tree::TerminalNode* fugue_sqlParser::AddTablePartitionContext::EXISTS() {
  return getToken(fugue_sqlParser::EXISTS, 0);
}

std::vector<fugue_sqlParser::PartitionSpecLocationContext *> fugue_sqlParser::AddTablePartitionContext::partitionSpecLocation() {
  return getRuleContexts<fugue_sqlParser::PartitionSpecLocationContext>();
}

fugue_sqlParser::PartitionSpecLocationContext* fugue_sqlParser::AddTablePartitionContext::partitionSpecLocation(size_t i) {
  return getRuleContext<fugue_sqlParser::PartitionSpecLocationContext>(i);
}

fugue_sqlParser::AddTablePartitionContext::AddTablePartitionContext(StatementContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::AddTablePartitionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitAddTablePartition(this);
  else
    return visitor->visitChildren(this);
}
//----------------- SetNamespaceLocationContext ------------------------------------------------------------------

tree::TerminalNode* fugue_sqlParser::SetNamespaceLocationContext::ALTER() {
  return getToken(fugue_sqlParser::ALTER, 0);
}

fugue_sqlParser::TheNamespaceContext* fugue_sqlParser::SetNamespaceLocationContext::theNamespace() {
  return getRuleContext<fugue_sqlParser::TheNamespaceContext>(0);
}

fugue_sqlParser::MultipartIdentifierContext* fugue_sqlParser::SetNamespaceLocationContext::multipartIdentifier() {
  return getRuleContext<fugue_sqlParser::MultipartIdentifierContext>(0);
}

tree::TerminalNode* fugue_sqlParser::SetNamespaceLocationContext::SET() {
  return getToken(fugue_sqlParser::SET, 0);
}

fugue_sqlParser::LocationSpecContext* fugue_sqlParser::SetNamespaceLocationContext::locationSpec() {
  return getRuleContext<fugue_sqlParser::LocationSpecContext>(0);
}

fugue_sqlParser::SetNamespaceLocationContext::SetNamespaceLocationContext(StatementContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::SetNamespaceLocationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitSetNamespaceLocation(this);
  else
    return visitor->visitChildren(this);
}
//----------------- RefreshTableContext ------------------------------------------------------------------

tree::TerminalNode* fugue_sqlParser::RefreshTableContext::REFRESH() {
  return getToken(fugue_sqlParser::REFRESH, 0);
}

tree::TerminalNode* fugue_sqlParser::RefreshTableContext::TABLE() {
  return getToken(fugue_sqlParser::TABLE, 0);
}

fugue_sqlParser::MultipartIdentifierContext* fugue_sqlParser::RefreshTableContext::multipartIdentifier() {
  return getRuleContext<fugue_sqlParser::MultipartIdentifierContext>(0);
}

fugue_sqlParser::RefreshTableContext::RefreshTableContext(StatementContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::RefreshTableContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitRefreshTable(this);
  else
    return visitor->visitChildren(this);
}
//----------------- SetNamespacePropertiesContext ------------------------------------------------------------------

tree::TerminalNode* fugue_sqlParser::SetNamespacePropertiesContext::ALTER() {
  return getToken(fugue_sqlParser::ALTER, 0);
}

fugue_sqlParser::TheNamespaceContext* fugue_sqlParser::SetNamespacePropertiesContext::theNamespace() {
  return getRuleContext<fugue_sqlParser::TheNamespaceContext>(0);
}

fugue_sqlParser::MultipartIdentifierContext* fugue_sqlParser::SetNamespacePropertiesContext::multipartIdentifier() {
  return getRuleContext<fugue_sqlParser::MultipartIdentifierContext>(0);
}

tree::TerminalNode* fugue_sqlParser::SetNamespacePropertiesContext::SET() {
  return getToken(fugue_sqlParser::SET, 0);
}

fugue_sqlParser::TablePropertyListContext* fugue_sqlParser::SetNamespacePropertiesContext::tablePropertyList() {
  return getRuleContext<fugue_sqlParser::TablePropertyListContext>(0);
}

tree::TerminalNode* fugue_sqlParser::SetNamespacePropertiesContext::DBPROPERTIES() {
  return getToken(fugue_sqlParser::DBPROPERTIES, 0);
}

tree::TerminalNode* fugue_sqlParser::SetNamespacePropertiesContext::PROPERTIES() {
  return getToken(fugue_sqlParser::PROPERTIES, 0);
}

fugue_sqlParser::SetNamespacePropertiesContext::SetNamespacePropertiesContext(StatementContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::SetNamespacePropertiesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitSetNamespaceProperties(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ManageResourceContext ------------------------------------------------------------------

fugue_sqlParser::IdentifierContext* fugue_sqlParser::ManageResourceContext::identifier() {
  return getRuleContext<fugue_sqlParser::IdentifierContext>(0);
}

tree::TerminalNode* fugue_sqlParser::ManageResourceContext::ADD() {
  return getToken(fugue_sqlParser::ADD, 0);
}

tree::TerminalNode* fugue_sqlParser::ManageResourceContext::LIST() {
  return getToken(fugue_sqlParser::LIST, 0);
}

tree::TerminalNode* fugue_sqlParser::ManageResourceContext::STRING() {
  return getToken(fugue_sqlParser::STRING, 0);
}

fugue_sqlParser::ManageResourceContext::ManageResourceContext(StatementContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::ManageResourceContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitManageResource(this);
  else
    return visitor->visitChildren(this);
}
//----------------- AnalyzeContext ------------------------------------------------------------------

tree::TerminalNode* fugue_sqlParser::AnalyzeContext::ANALYZE() {
  return getToken(fugue_sqlParser::ANALYZE, 0);
}

tree::TerminalNode* fugue_sqlParser::AnalyzeContext::TABLE() {
  return getToken(fugue_sqlParser::TABLE, 0);
}

fugue_sqlParser::MultipartIdentifierContext* fugue_sqlParser::AnalyzeContext::multipartIdentifier() {
  return getRuleContext<fugue_sqlParser::MultipartIdentifierContext>(0);
}

tree::TerminalNode* fugue_sqlParser::AnalyzeContext::COMPUTE() {
  return getToken(fugue_sqlParser::COMPUTE, 0);
}

tree::TerminalNode* fugue_sqlParser::AnalyzeContext::STATISTICS() {
  return getToken(fugue_sqlParser::STATISTICS, 0);
}

fugue_sqlParser::PartitionSpecContext* fugue_sqlParser::AnalyzeContext::partitionSpec() {
  return getRuleContext<fugue_sqlParser::PartitionSpecContext>(0);
}

fugue_sqlParser::IdentifierContext* fugue_sqlParser::AnalyzeContext::identifier() {
  return getRuleContext<fugue_sqlParser::IdentifierContext>(0);
}

tree::TerminalNode* fugue_sqlParser::AnalyzeContext::FOR() {
  return getToken(fugue_sqlParser::FOR, 0);
}

tree::TerminalNode* fugue_sqlParser::AnalyzeContext::COLUMNS() {
  return getToken(fugue_sqlParser::COLUMNS, 0);
}

fugue_sqlParser::IdentifierSeqContext* fugue_sqlParser::AnalyzeContext::identifierSeq() {
  return getRuleContext<fugue_sqlParser::IdentifierSeqContext>(0);
}

tree::TerminalNode* fugue_sqlParser::AnalyzeContext::ALL() {
  return getToken(fugue_sqlParser::ALL, 0);
}

fugue_sqlParser::AnalyzeContext::AnalyzeContext(StatementContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::AnalyzeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitAnalyze(this);
  else
    return visitor->visitChildren(this);
}
//----------------- CreateHiveTableContext ------------------------------------------------------------------

fugue_sqlParser::CreateTableHeaderContext* fugue_sqlParser::CreateHiveTableContext::createTableHeader() {
  return getRuleContext<fugue_sqlParser::CreateTableHeaderContext>(0);
}

std::vector<fugue_sqlParser::CommentSpecContext *> fugue_sqlParser::CreateHiveTableContext::commentSpec() {
  return getRuleContexts<fugue_sqlParser::CommentSpecContext>();
}

fugue_sqlParser::CommentSpecContext* fugue_sqlParser::CreateHiveTableContext::commentSpec(size_t i) {
  return getRuleContext<fugue_sqlParser::CommentSpecContext>(i);
}

std::vector<fugue_sqlParser::BucketSpecContext *> fugue_sqlParser::CreateHiveTableContext::bucketSpec() {
  return getRuleContexts<fugue_sqlParser::BucketSpecContext>();
}

fugue_sqlParser::BucketSpecContext* fugue_sqlParser::CreateHiveTableContext::bucketSpec(size_t i) {
  return getRuleContext<fugue_sqlParser::BucketSpecContext>(i);
}

std::vector<fugue_sqlParser::SkewSpecContext *> fugue_sqlParser::CreateHiveTableContext::skewSpec() {
  return getRuleContexts<fugue_sqlParser::SkewSpecContext>();
}

fugue_sqlParser::SkewSpecContext* fugue_sqlParser::CreateHiveTableContext::skewSpec(size_t i) {
  return getRuleContext<fugue_sqlParser::SkewSpecContext>(i);
}

std::vector<fugue_sqlParser::RowFormatContext *> fugue_sqlParser::CreateHiveTableContext::rowFormat() {
  return getRuleContexts<fugue_sqlParser::RowFormatContext>();
}

fugue_sqlParser::RowFormatContext* fugue_sqlParser::CreateHiveTableContext::rowFormat(size_t i) {
  return getRuleContext<fugue_sqlParser::RowFormatContext>(i);
}

std::vector<fugue_sqlParser::CreateFileFormatContext *> fugue_sqlParser::CreateHiveTableContext::createFileFormat() {
  return getRuleContexts<fugue_sqlParser::CreateFileFormatContext>();
}

fugue_sqlParser::CreateFileFormatContext* fugue_sqlParser::CreateHiveTableContext::createFileFormat(size_t i) {
  return getRuleContext<fugue_sqlParser::CreateFileFormatContext>(i);
}

std::vector<fugue_sqlParser::LocationSpecContext *> fugue_sqlParser::CreateHiveTableContext::locationSpec() {
  return getRuleContexts<fugue_sqlParser::LocationSpecContext>();
}

fugue_sqlParser::LocationSpecContext* fugue_sqlParser::CreateHiveTableContext::locationSpec(size_t i) {
  return getRuleContext<fugue_sqlParser::LocationSpecContext>(i);
}

fugue_sqlParser::QueryContext* fugue_sqlParser::CreateHiveTableContext::query() {
  return getRuleContext<fugue_sqlParser::QueryContext>(0);
}

std::vector<fugue_sqlParser::ColTypeListContext *> fugue_sqlParser::CreateHiveTableContext::colTypeList() {
  return getRuleContexts<fugue_sqlParser::ColTypeListContext>();
}

fugue_sqlParser::ColTypeListContext* fugue_sqlParser::CreateHiveTableContext::colTypeList(size_t i) {
  return getRuleContext<fugue_sqlParser::ColTypeListContext>(i);
}

std::vector<tree::TerminalNode *> fugue_sqlParser::CreateHiveTableContext::PARTITIONED() {
  return getTokens(fugue_sqlParser::PARTITIONED);
}

tree::TerminalNode* fugue_sqlParser::CreateHiveTableContext::PARTITIONED(size_t i) {
  return getToken(fugue_sqlParser::PARTITIONED, i);
}

std::vector<tree::TerminalNode *> fugue_sqlParser::CreateHiveTableContext::BY() {
  return getTokens(fugue_sqlParser::BY);
}

tree::TerminalNode* fugue_sqlParser::CreateHiveTableContext::BY(size_t i) {
  return getToken(fugue_sqlParser::BY, i);
}

std::vector<tree::TerminalNode *> fugue_sqlParser::CreateHiveTableContext::TBLPROPERTIES() {
  return getTokens(fugue_sqlParser::TBLPROPERTIES);
}

tree::TerminalNode* fugue_sqlParser::CreateHiveTableContext::TBLPROPERTIES(size_t i) {
  return getToken(fugue_sqlParser::TBLPROPERTIES, i);
}

std::vector<fugue_sqlParser::IdentifierListContext *> fugue_sqlParser::CreateHiveTableContext::identifierList() {
  return getRuleContexts<fugue_sqlParser::IdentifierListContext>();
}

fugue_sqlParser::IdentifierListContext* fugue_sqlParser::CreateHiveTableContext::identifierList(size_t i) {
  return getRuleContext<fugue_sqlParser::IdentifierListContext>(i);
}

std::vector<fugue_sqlParser::TablePropertyListContext *> fugue_sqlParser::CreateHiveTableContext::tablePropertyList() {
  return getRuleContexts<fugue_sqlParser::TablePropertyListContext>();
}

fugue_sqlParser::TablePropertyListContext* fugue_sqlParser::CreateHiveTableContext::tablePropertyList(size_t i) {
  return getRuleContext<fugue_sqlParser::TablePropertyListContext>(i);
}

tree::TerminalNode* fugue_sqlParser::CreateHiveTableContext::AS() {
  return getToken(fugue_sqlParser::AS, 0);
}

fugue_sqlParser::CreateHiveTableContext::CreateHiveTableContext(StatementContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::CreateHiveTableContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitCreateHiveTable(this);
  else
    return visitor->visitChildren(this);
}
//----------------- CreateFunctionContext ------------------------------------------------------------------

tree::TerminalNode* fugue_sqlParser::CreateFunctionContext::CREATE() {
  return getToken(fugue_sqlParser::CREATE, 0);
}

tree::TerminalNode* fugue_sqlParser::CreateFunctionContext::FUNCTION() {
  return getToken(fugue_sqlParser::FUNCTION, 0);
}

fugue_sqlParser::MultipartIdentifierContext* fugue_sqlParser::CreateFunctionContext::multipartIdentifier() {
  return getRuleContext<fugue_sqlParser::MultipartIdentifierContext>(0);
}

tree::TerminalNode* fugue_sqlParser::CreateFunctionContext::AS() {
  return getToken(fugue_sqlParser::AS, 0);
}

tree::TerminalNode* fugue_sqlParser::CreateFunctionContext::STRING() {
  return getToken(fugue_sqlParser::STRING, 0);
}

tree::TerminalNode* fugue_sqlParser::CreateFunctionContext::OR() {
  return getToken(fugue_sqlParser::OR, 0);
}

tree::TerminalNode* fugue_sqlParser::CreateFunctionContext::REPLACE() {
  return getToken(fugue_sqlParser::REPLACE, 0);
}

tree::TerminalNode* fugue_sqlParser::CreateFunctionContext::TEMPORARY() {
  return getToken(fugue_sqlParser::TEMPORARY, 0);
}

tree::TerminalNode* fugue_sqlParser::CreateFunctionContext::IF() {
  return getToken(fugue_sqlParser::IF, 0);
}

tree::TerminalNode* fugue_sqlParser::CreateFunctionContext::NOT() {
  return getToken(fugue_sqlParser::NOT, 0);
}

tree::TerminalNode* fugue_sqlParser::CreateFunctionContext::EXISTS() {
  return getToken(fugue_sqlParser::EXISTS, 0);
}

tree::TerminalNode* fugue_sqlParser::CreateFunctionContext::USING() {
  return getToken(fugue_sqlParser::USING, 0);
}

std::vector<fugue_sqlParser::ResourceContext *> fugue_sqlParser::CreateFunctionContext::resource() {
  return getRuleContexts<fugue_sqlParser::ResourceContext>();
}

fugue_sqlParser::ResourceContext* fugue_sqlParser::CreateFunctionContext::resource(size_t i) {
  return getRuleContext<fugue_sqlParser::ResourceContext>(i);
}

fugue_sqlParser::CreateFunctionContext::CreateFunctionContext(StatementContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::CreateFunctionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitCreateFunction(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ShowTableContext ------------------------------------------------------------------

tree::TerminalNode* fugue_sqlParser::ShowTableContext::SHOW() {
  return getToken(fugue_sqlParser::SHOW, 0);
}

tree::TerminalNode* fugue_sqlParser::ShowTableContext::TABLE() {
  return getToken(fugue_sqlParser::TABLE, 0);
}

tree::TerminalNode* fugue_sqlParser::ShowTableContext::EXTENDED() {
  return getToken(fugue_sqlParser::EXTENDED, 0);
}

tree::TerminalNode* fugue_sqlParser::ShowTableContext::LIKE() {
  return getToken(fugue_sqlParser::LIKE, 0);
}

tree::TerminalNode* fugue_sqlParser::ShowTableContext::STRING() {
  return getToken(fugue_sqlParser::STRING, 0);
}

fugue_sqlParser::PartitionSpecContext* fugue_sqlParser::ShowTableContext::partitionSpec() {
  return getRuleContext<fugue_sqlParser::PartitionSpecContext>(0);
}

tree::TerminalNode* fugue_sqlParser::ShowTableContext::FROM() {
  return getToken(fugue_sqlParser::FROM, 0);
}

tree::TerminalNode* fugue_sqlParser::ShowTableContext::IN() {
  return getToken(fugue_sqlParser::IN, 0);
}

fugue_sqlParser::MultipartIdentifierContext* fugue_sqlParser::ShowTableContext::multipartIdentifier() {
  return getRuleContext<fugue_sqlParser::MultipartIdentifierContext>(0);
}

fugue_sqlParser::ShowTableContext::ShowTableContext(StatementContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::ShowTableContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitShowTable(this);
  else
    return visitor->visitChildren(this);
}
//----------------- HiveReplaceColumnsContext ------------------------------------------------------------------

tree::TerminalNode* fugue_sqlParser::HiveReplaceColumnsContext::ALTER() {
  return getToken(fugue_sqlParser::ALTER, 0);
}

tree::TerminalNode* fugue_sqlParser::HiveReplaceColumnsContext::TABLE() {
  return getToken(fugue_sqlParser::TABLE, 0);
}

tree::TerminalNode* fugue_sqlParser::HiveReplaceColumnsContext::REPLACE() {
  return getToken(fugue_sqlParser::REPLACE, 0);
}

tree::TerminalNode* fugue_sqlParser::HiveReplaceColumnsContext::COLUMNS() {
  return getToken(fugue_sqlParser::COLUMNS, 0);
}

fugue_sqlParser::MultipartIdentifierContext* fugue_sqlParser::HiveReplaceColumnsContext::multipartIdentifier() {
  return getRuleContext<fugue_sqlParser::MultipartIdentifierContext>(0);
}

fugue_sqlParser::QualifiedColTypeWithPositionListContext* fugue_sqlParser::HiveReplaceColumnsContext::qualifiedColTypeWithPositionList() {
  return getRuleContext<fugue_sqlParser::QualifiedColTypeWithPositionListContext>(0);
}

fugue_sqlParser::PartitionSpecContext* fugue_sqlParser::HiveReplaceColumnsContext::partitionSpec() {
  return getRuleContext<fugue_sqlParser::PartitionSpecContext>(0);
}

fugue_sqlParser::HiveReplaceColumnsContext::HiveReplaceColumnsContext(StatementContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::HiveReplaceColumnsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitHiveReplaceColumns(this);
  else
    return visitor->visitChildren(this);
}
//----------------- CommentNamespaceContext ------------------------------------------------------------------

tree::TerminalNode* fugue_sqlParser::CommentNamespaceContext::COMMENT() {
  return getToken(fugue_sqlParser::COMMENT, 0);
}

tree::TerminalNode* fugue_sqlParser::CommentNamespaceContext::ON() {
  return getToken(fugue_sqlParser::ON, 0);
}

fugue_sqlParser::TheNamespaceContext* fugue_sqlParser::CommentNamespaceContext::theNamespace() {
  return getRuleContext<fugue_sqlParser::TheNamespaceContext>(0);
}

fugue_sqlParser::MultipartIdentifierContext* fugue_sqlParser::CommentNamespaceContext::multipartIdentifier() {
  return getRuleContext<fugue_sqlParser::MultipartIdentifierContext>(0);
}

tree::TerminalNode* fugue_sqlParser::CommentNamespaceContext::IS() {
  return getToken(fugue_sqlParser::IS, 0);
}

tree::TerminalNode* fugue_sqlParser::CommentNamespaceContext::STRING() {
  return getToken(fugue_sqlParser::STRING, 0);
}

tree::TerminalNode* fugue_sqlParser::CommentNamespaceContext::THENULL() {
  return getToken(fugue_sqlParser::THENULL, 0);
}

fugue_sqlParser::CommentNamespaceContext::CommentNamespaceContext(StatementContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::CommentNamespaceContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitCommentNamespace(this);
  else
    return visitor->visitChildren(this);
}
//----------------- CreateTableContext ------------------------------------------------------------------

fugue_sqlParser::CreateTableHeaderContext* fugue_sqlParser::CreateTableContext::createTableHeader() {
  return getRuleContext<fugue_sqlParser::CreateTableHeaderContext>(0);
}

fugue_sqlParser::TableProviderContext* fugue_sqlParser::CreateTableContext::tableProvider() {
  return getRuleContext<fugue_sqlParser::TableProviderContext>(0);
}

fugue_sqlParser::CreateTableClausesContext* fugue_sqlParser::CreateTableContext::createTableClauses() {
  return getRuleContext<fugue_sqlParser::CreateTableClausesContext>(0);
}

fugue_sqlParser::ColTypeListContext* fugue_sqlParser::CreateTableContext::colTypeList() {
  return getRuleContext<fugue_sqlParser::ColTypeListContext>(0);
}

fugue_sqlParser::QueryContext* fugue_sqlParser::CreateTableContext::query() {
  return getRuleContext<fugue_sqlParser::QueryContext>(0);
}

tree::TerminalNode* fugue_sqlParser::CreateTableContext::AS() {
  return getToken(fugue_sqlParser::AS, 0);
}

fugue_sqlParser::CreateTableContext::CreateTableContext(StatementContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::CreateTableContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitCreateTable(this);
  else
    return visitor->visitChildren(this);
}
//----------------- DmlStatementContext ------------------------------------------------------------------

fugue_sqlParser::DmlStatementNoWithContext* fugue_sqlParser::DmlStatementContext::dmlStatementNoWith() {
  return getRuleContext<fugue_sqlParser::DmlStatementNoWithContext>(0);
}

fugue_sqlParser::CtesContext* fugue_sqlParser::DmlStatementContext::ctes() {
  return getRuleContext<fugue_sqlParser::CtesContext>(0);
}

fugue_sqlParser::DmlStatementContext::DmlStatementContext(StatementContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::DmlStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitDmlStatement(this);
  else
    return visitor->visitChildren(this);
}
//----------------- CreateTableLikeContext ------------------------------------------------------------------

tree::TerminalNode* fugue_sqlParser::CreateTableLikeContext::CREATE() {
  return getToken(fugue_sqlParser::CREATE, 0);
}

tree::TerminalNode* fugue_sqlParser::CreateTableLikeContext::TABLE() {
  return getToken(fugue_sqlParser::TABLE, 0);
}

tree::TerminalNode* fugue_sqlParser::CreateTableLikeContext::LIKE() {
  return getToken(fugue_sqlParser::LIKE, 0);
}

std::vector<fugue_sqlParser::TableIdentifierContext *> fugue_sqlParser::CreateTableLikeContext::tableIdentifier() {
  return getRuleContexts<fugue_sqlParser::TableIdentifierContext>();
}

fugue_sqlParser::TableIdentifierContext* fugue_sqlParser::CreateTableLikeContext::tableIdentifier(size_t i) {
  return getRuleContext<fugue_sqlParser::TableIdentifierContext>(i);
}

tree::TerminalNode* fugue_sqlParser::CreateTableLikeContext::IF() {
  return getToken(fugue_sqlParser::IF, 0);
}

tree::TerminalNode* fugue_sqlParser::CreateTableLikeContext::NOT() {
  return getToken(fugue_sqlParser::NOT, 0);
}

tree::TerminalNode* fugue_sqlParser::CreateTableLikeContext::EXISTS() {
  return getToken(fugue_sqlParser::EXISTS, 0);
}

std::vector<fugue_sqlParser::TableProviderContext *> fugue_sqlParser::CreateTableLikeContext::tableProvider() {
  return getRuleContexts<fugue_sqlParser::TableProviderContext>();
}

fugue_sqlParser::TableProviderContext* fugue_sqlParser::CreateTableLikeContext::tableProvider(size_t i) {
  return getRuleContext<fugue_sqlParser::TableProviderContext>(i);
}

std::vector<fugue_sqlParser::RowFormatContext *> fugue_sqlParser::CreateTableLikeContext::rowFormat() {
  return getRuleContexts<fugue_sqlParser::RowFormatContext>();
}

fugue_sqlParser::RowFormatContext* fugue_sqlParser::CreateTableLikeContext::rowFormat(size_t i) {
  return getRuleContext<fugue_sqlParser::RowFormatContext>(i);
}

std::vector<fugue_sqlParser::CreateFileFormatContext *> fugue_sqlParser::CreateTableLikeContext::createFileFormat() {
  return getRuleContexts<fugue_sqlParser::CreateFileFormatContext>();
}

fugue_sqlParser::CreateFileFormatContext* fugue_sqlParser::CreateTableLikeContext::createFileFormat(size_t i) {
  return getRuleContext<fugue_sqlParser::CreateFileFormatContext>(i);
}

std::vector<fugue_sqlParser::LocationSpecContext *> fugue_sqlParser::CreateTableLikeContext::locationSpec() {
  return getRuleContexts<fugue_sqlParser::LocationSpecContext>();
}

fugue_sqlParser::LocationSpecContext* fugue_sqlParser::CreateTableLikeContext::locationSpec(size_t i) {
  return getRuleContext<fugue_sqlParser::LocationSpecContext>(i);
}

std::vector<tree::TerminalNode *> fugue_sqlParser::CreateTableLikeContext::TBLPROPERTIES() {
  return getTokens(fugue_sqlParser::TBLPROPERTIES);
}

tree::TerminalNode* fugue_sqlParser::CreateTableLikeContext::TBLPROPERTIES(size_t i) {
  return getToken(fugue_sqlParser::TBLPROPERTIES, i);
}

std::vector<fugue_sqlParser::TablePropertyListContext *> fugue_sqlParser::CreateTableLikeContext::tablePropertyList() {
  return getRuleContexts<fugue_sqlParser::TablePropertyListContext>();
}

fugue_sqlParser::TablePropertyListContext* fugue_sqlParser::CreateTableLikeContext::tablePropertyList(size_t i) {
  return getRuleContext<fugue_sqlParser::TablePropertyListContext>(i);
}

fugue_sqlParser::CreateTableLikeContext::CreateTableLikeContext(StatementContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::CreateTableLikeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitCreateTableLike(this);
  else
    return visitor->visitChildren(this);
}
//----------------- UncacheTableContext ------------------------------------------------------------------

tree::TerminalNode* fugue_sqlParser::UncacheTableContext::UNCACHE() {
  return getToken(fugue_sqlParser::UNCACHE, 0);
}

tree::TerminalNode* fugue_sqlParser::UncacheTableContext::TABLE() {
  return getToken(fugue_sqlParser::TABLE, 0);
}

fugue_sqlParser::MultipartIdentifierContext* fugue_sqlParser::UncacheTableContext::multipartIdentifier() {
  return getRuleContext<fugue_sqlParser::MultipartIdentifierContext>(0);
}

tree::TerminalNode* fugue_sqlParser::UncacheTableContext::IF() {
  return getToken(fugue_sqlParser::IF, 0);
}

tree::TerminalNode* fugue_sqlParser::UncacheTableContext::EXISTS() {
  return getToken(fugue_sqlParser::EXISTS, 0);
}

fugue_sqlParser::UncacheTableContext::UncacheTableContext(StatementContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::UncacheTableContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitUncacheTable(this);
  else
    return visitor->visitChildren(this);
}
//----------------- DropFunctionContext ------------------------------------------------------------------

tree::TerminalNode* fugue_sqlParser::DropFunctionContext::DROP() {
  return getToken(fugue_sqlParser::DROP, 0);
}

tree::TerminalNode* fugue_sqlParser::DropFunctionContext::FUNCTION() {
  return getToken(fugue_sqlParser::FUNCTION, 0);
}

fugue_sqlParser::MultipartIdentifierContext* fugue_sqlParser::DropFunctionContext::multipartIdentifier() {
  return getRuleContext<fugue_sqlParser::MultipartIdentifierContext>(0);
}

tree::TerminalNode* fugue_sqlParser::DropFunctionContext::TEMPORARY() {
  return getToken(fugue_sqlParser::TEMPORARY, 0);
}

tree::TerminalNode* fugue_sqlParser::DropFunctionContext::IF() {
  return getToken(fugue_sqlParser::IF, 0);
}

tree::TerminalNode* fugue_sqlParser::DropFunctionContext::EXISTS() {
  return getToken(fugue_sqlParser::EXISTS, 0);
}

fugue_sqlParser::DropFunctionContext::DropFunctionContext(StatementContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::DropFunctionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitDropFunction(this);
  else
    return visitor->visitChildren(this);
}
//----------------- DescribeRelationContext ------------------------------------------------------------------

fugue_sqlParser::MultipartIdentifierContext* fugue_sqlParser::DescribeRelationContext::multipartIdentifier() {
  return getRuleContext<fugue_sqlParser::MultipartIdentifierContext>(0);
}

tree::TerminalNode* fugue_sqlParser::DescribeRelationContext::DESC() {
  return getToken(fugue_sqlParser::DESC, 0);
}

tree::TerminalNode* fugue_sqlParser::DescribeRelationContext::DESCRIBE() {
  return getToken(fugue_sqlParser::DESCRIBE, 0);
}

tree::TerminalNode* fugue_sqlParser::DescribeRelationContext::TABLE() {
  return getToken(fugue_sqlParser::TABLE, 0);
}

fugue_sqlParser::PartitionSpecContext* fugue_sqlParser::DescribeRelationContext::partitionSpec() {
  return getRuleContext<fugue_sqlParser::PartitionSpecContext>(0);
}

fugue_sqlParser::DescribeColNameContext* fugue_sqlParser::DescribeRelationContext::describeColName() {
  return getRuleContext<fugue_sqlParser::DescribeColNameContext>(0);
}

tree::TerminalNode* fugue_sqlParser::DescribeRelationContext::EXTENDED() {
  return getToken(fugue_sqlParser::EXTENDED, 0);
}

tree::TerminalNode* fugue_sqlParser::DescribeRelationContext::FORMATTED() {
  return getToken(fugue_sqlParser::FORMATTED, 0);
}

fugue_sqlParser::DescribeRelationContext::DescribeRelationContext(StatementContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::DescribeRelationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitDescribeRelation(this);
  else
    return visitor->visitChildren(this);
}
//----------------- LoadDataContext ------------------------------------------------------------------

tree::TerminalNode* fugue_sqlParser::LoadDataContext::LOAD() {
  return getToken(fugue_sqlParser::LOAD, 0);
}

tree::TerminalNode* fugue_sqlParser::LoadDataContext::DATA() {
  return getToken(fugue_sqlParser::DATA, 0);
}

tree::TerminalNode* fugue_sqlParser::LoadDataContext::INPATH() {
  return getToken(fugue_sqlParser::INPATH, 0);
}

tree::TerminalNode* fugue_sqlParser::LoadDataContext::INTO() {
  return getToken(fugue_sqlParser::INTO, 0);
}

tree::TerminalNode* fugue_sqlParser::LoadDataContext::TABLE() {
  return getToken(fugue_sqlParser::TABLE, 0);
}

fugue_sqlParser::MultipartIdentifierContext* fugue_sqlParser::LoadDataContext::multipartIdentifier() {
  return getRuleContext<fugue_sqlParser::MultipartIdentifierContext>(0);
}

tree::TerminalNode* fugue_sqlParser::LoadDataContext::STRING() {
  return getToken(fugue_sqlParser::STRING, 0);
}

tree::TerminalNode* fugue_sqlParser::LoadDataContext::LOCAL() {
  return getToken(fugue_sqlParser::LOCAL, 0);
}

tree::TerminalNode* fugue_sqlParser::LoadDataContext::OVERWRITE() {
  return getToken(fugue_sqlParser::OVERWRITE, 0);
}

fugue_sqlParser::PartitionSpecContext* fugue_sqlParser::LoadDataContext::partitionSpec() {
  return getRuleContext<fugue_sqlParser::PartitionSpecContext>(0);
}

fugue_sqlParser::LoadDataContext::LoadDataContext(StatementContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::LoadDataContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitLoadData(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ShowPartitionsContext ------------------------------------------------------------------

tree::TerminalNode* fugue_sqlParser::ShowPartitionsContext::SHOW() {
  return getToken(fugue_sqlParser::SHOW, 0);
}

tree::TerminalNode* fugue_sqlParser::ShowPartitionsContext::PARTITIONS() {
  return getToken(fugue_sqlParser::PARTITIONS, 0);
}

fugue_sqlParser::MultipartIdentifierContext* fugue_sqlParser::ShowPartitionsContext::multipartIdentifier() {
  return getRuleContext<fugue_sqlParser::MultipartIdentifierContext>(0);
}

fugue_sqlParser::PartitionSpecContext* fugue_sqlParser::ShowPartitionsContext::partitionSpec() {
  return getRuleContext<fugue_sqlParser::PartitionSpecContext>(0);
}

fugue_sqlParser::ShowPartitionsContext::ShowPartitionsContext(StatementContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::ShowPartitionsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitShowPartitions(this);
  else
    return visitor->visitChildren(this);
}
//----------------- DescribeFunctionContext ------------------------------------------------------------------

tree::TerminalNode* fugue_sqlParser::DescribeFunctionContext::FUNCTION() {
  return getToken(fugue_sqlParser::FUNCTION, 0);
}

fugue_sqlParser::DescribeFuncNameContext* fugue_sqlParser::DescribeFunctionContext::describeFuncName() {
  return getRuleContext<fugue_sqlParser::DescribeFuncNameContext>(0);
}

tree::TerminalNode* fugue_sqlParser::DescribeFunctionContext::DESC() {
  return getToken(fugue_sqlParser::DESC, 0);
}

tree::TerminalNode* fugue_sqlParser::DescribeFunctionContext::DESCRIBE() {
  return getToken(fugue_sqlParser::DESCRIBE, 0);
}

tree::TerminalNode* fugue_sqlParser::DescribeFunctionContext::EXTENDED() {
  return getToken(fugue_sqlParser::EXTENDED, 0);
}

fugue_sqlParser::DescribeFunctionContext::DescribeFunctionContext(StatementContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::DescribeFunctionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitDescribeFunction(this);
  else
    return visitor->visitChildren(this);
}
//----------------- RenameTableColumnContext ------------------------------------------------------------------

tree::TerminalNode* fugue_sqlParser::RenameTableColumnContext::ALTER() {
  return getToken(fugue_sqlParser::ALTER, 0);
}

tree::TerminalNode* fugue_sqlParser::RenameTableColumnContext::TABLE() {
  return getToken(fugue_sqlParser::TABLE, 0);
}

tree::TerminalNode* fugue_sqlParser::RenameTableColumnContext::RENAME() {
  return getToken(fugue_sqlParser::RENAME, 0);
}

tree::TerminalNode* fugue_sqlParser::RenameTableColumnContext::COLUMN() {
  return getToken(fugue_sqlParser::COLUMN, 0);
}

tree::TerminalNode* fugue_sqlParser::RenameTableColumnContext::TO() {
  return getToken(fugue_sqlParser::TO, 0);
}

std::vector<fugue_sqlParser::MultipartIdentifierContext *> fugue_sqlParser::RenameTableColumnContext::multipartIdentifier() {
  return getRuleContexts<fugue_sqlParser::MultipartIdentifierContext>();
}

fugue_sqlParser::MultipartIdentifierContext* fugue_sqlParser::RenameTableColumnContext::multipartIdentifier(size_t i) {
  return getRuleContext<fugue_sqlParser::MultipartIdentifierContext>(i);
}

fugue_sqlParser::ErrorCapturingIdentifierContext* fugue_sqlParser::RenameTableColumnContext::errorCapturingIdentifier() {
  return getRuleContext<fugue_sqlParser::ErrorCapturingIdentifierContext>(0);
}

fugue_sqlParser::RenameTableColumnContext::RenameTableColumnContext(StatementContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::RenameTableColumnContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitRenameTableColumn(this);
  else
    return visitor->visitChildren(this);
}
//----------------- StatementDefaultContext ------------------------------------------------------------------

fugue_sqlParser::QueryContext* fugue_sqlParser::StatementDefaultContext::query() {
  return getRuleContext<fugue_sqlParser::QueryContext>(0);
}

fugue_sqlParser::StatementDefaultContext::StatementDefaultContext(StatementContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::StatementDefaultContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitStatementDefault(this);
  else
    return visitor->visitChildren(this);
}
//----------------- HiveChangeColumnContext ------------------------------------------------------------------

tree::TerminalNode* fugue_sqlParser::HiveChangeColumnContext::ALTER() {
  return getToken(fugue_sqlParser::ALTER, 0);
}

tree::TerminalNode* fugue_sqlParser::HiveChangeColumnContext::TABLE() {
  return getToken(fugue_sqlParser::TABLE, 0);
}

tree::TerminalNode* fugue_sqlParser::HiveChangeColumnContext::CHANGE() {
  return getToken(fugue_sqlParser::CHANGE, 0);
}

fugue_sqlParser::ColTypeContext* fugue_sqlParser::HiveChangeColumnContext::colType() {
  return getRuleContext<fugue_sqlParser::ColTypeContext>(0);
}

std::vector<fugue_sqlParser::MultipartIdentifierContext *> fugue_sqlParser::HiveChangeColumnContext::multipartIdentifier() {
  return getRuleContexts<fugue_sqlParser::MultipartIdentifierContext>();
}

fugue_sqlParser::MultipartIdentifierContext* fugue_sqlParser::HiveChangeColumnContext::multipartIdentifier(size_t i) {
  return getRuleContext<fugue_sqlParser::MultipartIdentifierContext>(i);
}

fugue_sqlParser::PartitionSpecContext* fugue_sqlParser::HiveChangeColumnContext::partitionSpec() {
  return getRuleContext<fugue_sqlParser::PartitionSpecContext>(0);
}

tree::TerminalNode* fugue_sqlParser::HiveChangeColumnContext::COLUMN() {
  return getToken(fugue_sqlParser::COLUMN, 0);
}

fugue_sqlParser::ColPositionContext* fugue_sqlParser::HiveChangeColumnContext::colPosition() {
  return getRuleContext<fugue_sqlParser::ColPositionContext>(0);
}

fugue_sqlParser::HiveChangeColumnContext::HiveChangeColumnContext(StatementContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::HiveChangeColumnContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitHiveChangeColumn(this);
  else
    return visitor->visitChildren(this);
}
//----------------- DescribeQueryContext ------------------------------------------------------------------

fugue_sqlParser::QueryContext* fugue_sqlParser::DescribeQueryContext::query() {
  return getRuleContext<fugue_sqlParser::QueryContext>(0);
}

tree::TerminalNode* fugue_sqlParser::DescribeQueryContext::DESC() {
  return getToken(fugue_sqlParser::DESC, 0);
}

tree::TerminalNode* fugue_sqlParser::DescribeQueryContext::DESCRIBE() {
  return getToken(fugue_sqlParser::DESCRIBE, 0);
}

tree::TerminalNode* fugue_sqlParser::DescribeQueryContext::QUERY() {
  return getToken(fugue_sqlParser::QUERY, 0);
}

fugue_sqlParser::DescribeQueryContext::DescribeQueryContext(StatementContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::DescribeQueryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitDescribeQuery(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TruncateTableContext ------------------------------------------------------------------

tree::TerminalNode* fugue_sqlParser::TruncateTableContext::TRUNCATE() {
  return getToken(fugue_sqlParser::TRUNCATE, 0);
}

tree::TerminalNode* fugue_sqlParser::TruncateTableContext::TABLE() {
  return getToken(fugue_sqlParser::TABLE, 0);
}

fugue_sqlParser::MultipartIdentifierContext* fugue_sqlParser::TruncateTableContext::multipartIdentifier() {
  return getRuleContext<fugue_sqlParser::MultipartIdentifierContext>(0);
}

fugue_sqlParser::PartitionSpecContext* fugue_sqlParser::TruncateTableContext::partitionSpec() {
  return getRuleContext<fugue_sqlParser::PartitionSpecContext>(0);
}

fugue_sqlParser::TruncateTableContext::TruncateTableContext(StatementContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::TruncateTableContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitTruncateTable(this);
  else
    return visitor->visitChildren(this);
}
//----------------- SetTableSerDeContext ------------------------------------------------------------------

tree::TerminalNode* fugue_sqlParser::SetTableSerDeContext::ALTER() {
  return getToken(fugue_sqlParser::ALTER, 0);
}

tree::TerminalNode* fugue_sqlParser::SetTableSerDeContext::TABLE() {
  return getToken(fugue_sqlParser::TABLE, 0);
}

fugue_sqlParser::MultipartIdentifierContext* fugue_sqlParser::SetTableSerDeContext::multipartIdentifier() {
  return getRuleContext<fugue_sqlParser::MultipartIdentifierContext>(0);
}

tree::TerminalNode* fugue_sqlParser::SetTableSerDeContext::SET() {
  return getToken(fugue_sqlParser::SET, 0);
}

tree::TerminalNode* fugue_sqlParser::SetTableSerDeContext::SERDE() {
  return getToken(fugue_sqlParser::SERDE, 0);
}

tree::TerminalNode* fugue_sqlParser::SetTableSerDeContext::STRING() {
  return getToken(fugue_sqlParser::STRING, 0);
}

fugue_sqlParser::PartitionSpecContext* fugue_sqlParser::SetTableSerDeContext::partitionSpec() {
  return getRuleContext<fugue_sqlParser::PartitionSpecContext>(0);
}

tree::TerminalNode* fugue_sqlParser::SetTableSerDeContext::WITH() {
  return getToken(fugue_sqlParser::WITH, 0);
}

tree::TerminalNode* fugue_sqlParser::SetTableSerDeContext::SERDEPROPERTIES() {
  return getToken(fugue_sqlParser::SERDEPROPERTIES, 0);
}

fugue_sqlParser::TablePropertyListContext* fugue_sqlParser::SetTableSerDeContext::tablePropertyList() {
  return getRuleContext<fugue_sqlParser::TablePropertyListContext>(0);
}

fugue_sqlParser::SetTableSerDeContext::SetTableSerDeContext(StatementContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::SetTableSerDeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitSetTableSerDe(this);
  else
    return visitor->visitChildren(this);
}
//----------------- CreateViewContext ------------------------------------------------------------------

tree::TerminalNode* fugue_sqlParser::CreateViewContext::CREATE() {
  return getToken(fugue_sqlParser::CREATE, 0);
}

tree::TerminalNode* fugue_sqlParser::CreateViewContext::VIEW() {
  return getToken(fugue_sqlParser::VIEW, 0);
}

fugue_sqlParser::MultipartIdentifierContext* fugue_sqlParser::CreateViewContext::multipartIdentifier() {
  return getRuleContext<fugue_sqlParser::MultipartIdentifierContext>(0);
}

tree::TerminalNode* fugue_sqlParser::CreateViewContext::AS() {
  return getToken(fugue_sqlParser::AS, 0);
}

fugue_sqlParser::QueryContext* fugue_sqlParser::CreateViewContext::query() {
  return getRuleContext<fugue_sqlParser::QueryContext>(0);
}

tree::TerminalNode* fugue_sqlParser::CreateViewContext::OR() {
  return getToken(fugue_sqlParser::OR, 0);
}

tree::TerminalNode* fugue_sqlParser::CreateViewContext::REPLACE() {
  return getToken(fugue_sqlParser::REPLACE, 0);
}

tree::TerminalNode* fugue_sqlParser::CreateViewContext::TEMPORARY() {
  return getToken(fugue_sqlParser::TEMPORARY, 0);
}

tree::TerminalNode* fugue_sqlParser::CreateViewContext::IF() {
  return getToken(fugue_sqlParser::IF, 0);
}

tree::TerminalNode* fugue_sqlParser::CreateViewContext::NOT() {
  return getToken(fugue_sqlParser::NOT, 0);
}

tree::TerminalNode* fugue_sqlParser::CreateViewContext::EXISTS() {
  return getToken(fugue_sqlParser::EXISTS, 0);
}

fugue_sqlParser::IdentifierCommentListContext* fugue_sqlParser::CreateViewContext::identifierCommentList() {
  return getRuleContext<fugue_sqlParser::IdentifierCommentListContext>(0);
}

std::vector<fugue_sqlParser::CommentSpecContext *> fugue_sqlParser::CreateViewContext::commentSpec() {
  return getRuleContexts<fugue_sqlParser::CommentSpecContext>();
}

fugue_sqlParser::CommentSpecContext* fugue_sqlParser::CreateViewContext::commentSpec(size_t i) {
  return getRuleContext<fugue_sqlParser::CommentSpecContext>(i);
}

std::vector<tree::TerminalNode *> fugue_sqlParser::CreateViewContext::PARTITIONED() {
  return getTokens(fugue_sqlParser::PARTITIONED);
}

tree::TerminalNode* fugue_sqlParser::CreateViewContext::PARTITIONED(size_t i) {
  return getToken(fugue_sqlParser::PARTITIONED, i);
}

std::vector<tree::TerminalNode *> fugue_sqlParser::CreateViewContext::ON() {
  return getTokens(fugue_sqlParser::ON);
}

tree::TerminalNode* fugue_sqlParser::CreateViewContext::ON(size_t i) {
  return getToken(fugue_sqlParser::ON, i);
}

std::vector<fugue_sqlParser::IdentifierListContext *> fugue_sqlParser::CreateViewContext::identifierList() {
  return getRuleContexts<fugue_sqlParser::IdentifierListContext>();
}

fugue_sqlParser::IdentifierListContext* fugue_sqlParser::CreateViewContext::identifierList(size_t i) {
  return getRuleContext<fugue_sqlParser::IdentifierListContext>(i);
}

std::vector<tree::TerminalNode *> fugue_sqlParser::CreateViewContext::TBLPROPERTIES() {
  return getTokens(fugue_sqlParser::TBLPROPERTIES);
}

tree::TerminalNode* fugue_sqlParser::CreateViewContext::TBLPROPERTIES(size_t i) {
  return getToken(fugue_sqlParser::TBLPROPERTIES, i);
}

std::vector<fugue_sqlParser::TablePropertyListContext *> fugue_sqlParser::CreateViewContext::tablePropertyList() {
  return getRuleContexts<fugue_sqlParser::TablePropertyListContext>();
}

fugue_sqlParser::TablePropertyListContext* fugue_sqlParser::CreateViewContext::tablePropertyList(size_t i) {
  return getRuleContext<fugue_sqlParser::TablePropertyListContext>(i);
}

tree::TerminalNode* fugue_sqlParser::CreateViewContext::GLOBAL() {
  return getToken(fugue_sqlParser::GLOBAL, 0);
}

fugue_sqlParser::CreateViewContext::CreateViewContext(StatementContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::CreateViewContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitCreateView(this);
  else
    return visitor->visitChildren(this);
}
//----------------- DropTablePartitionsContext ------------------------------------------------------------------

tree::TerminalNode* fugue_sqlParser::DropTablePartitionsContext::ALTER() {
  return getToken(fugue_sqlParser::ALTER, 0);
}

fugue_sqlParser::MultipartIdentifierContext* fugue_sqlParser::DropTablePartitionsContext::multipartIdentifier() {
  return getRuleContext<fugue_sqlParser::MultipartIdentifierContext>(0);
}

tree::TerminalNode* fugue_sqlParser::DropTablePartitionsContext::DROP() {
  return getToken(fugue_sqlParser::DROP, 0);
}

std::vector<fugue_sqlParser::PartitionSpecContext *> fugue_sqlParser::DropTablePartitionsContext::partitionSpec() {
  return getRuleContexts<fugue_sqlParser::PartitionSpecContext>();
}

fugue_sqlParser::PartitionSpecContext* fugue_sqlParser::DropTablePartitionsContext::partitionSpec(size_t i) {
  return getRuleContext<fugue_sqlParser::PartitionSpecContext>(i);
}

tree::TerminalNode* fugue_sqlParser::DropTablePartitionsContext::TABLE() {
  return getToken(fugue_sqlParser::TABLE, 0);
}

tree::TerminalNode* fugue_sqlParser::DropTablePartitionsContext::VIEW() {
  return getToken(fugue_sqlParser::VIEW, 0);
}

tree::TerminalNode* fugue_sqlParser::DropTablePartitionsContext::IF() {
  return getToken(fugue_sqlParser::IF, 0);
}

tree::TerminalNode* fugue_sqlParser::DropTablePartitionsContext::EXISTS() {
  return getToken(fugue_sqlParser::EXISTS, 0);
}

tree::TerminalNode* fugue_sqlParser::DropTablePartitionsContext::PURGE() {
  return getToken(fugue_sqlParser::PURGE, 0);
}

fugue_sqlParser::DropTablePartitionsContext::DropTablePartitionsContext(StatementContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::DropTablePartitionsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitDropTablePartitions(this);
  else
    return visitor->visitChildren(this);
}
//----------------- SetConfigurationContext ------------------------------------------------------------------

tree::TerminalNode* fugue_sqlParser::SetConfigurationContext::SET() {
  return getToken(fugue_sqlParser::SET, 0);
}

fugue_sqlParser::SetConfigurationContext::SetConfigurationContext(StatementContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::SetConfigurationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitSetConfiguration(this);
  else
    return visitor->visitChildren(this);
}
//----------------- DropTableContext ------------------------------------------------------------------

tree::TerminalNode* fugue_sqlParser::DropTableContext::DROP() {
  return getToken(fugue_sqlParser::DROP, 0);
}

tree::TerminalNode* fugue_sqlParser::DropTableContext::TABLE() {
  return getToken(fugue_sqlParser::TABLE, 0);
}

fugue_sqlParser::MultipartIdentifierContext* fugue_sqlParser::DropTableContext::multipartIdentifier() {
  return getRuleContext<fugue_sqlParser::MultipartIdentifierContext>(0);
}

tree::TerminalNode* fugue_sqlParser::DropTableContext::IF() {
  return getToken(fugue_sqlParser::IF, 0);
}

tree::TerminalNode* fugue_sqlParser::DropTableContext::EXISTS() {
  return getToken(fugue_sqlParser::EXISTS, 0);
}

tree::TerminalNode* fugue_sqlParser::DropTableContext::PURGE() {
  return getToken(fugue_sqlParser::PURGE, 0);
}

fugue_sqlParser::DropTableContext::DropTableContext(StatementContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::DropTableContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitDropTable(this);
  else
    return visitor->visitChildren(this);
}
//----------------- DescribeNamespaceContext ------------------------------------------------------------------

fugue_sqlParser::TheNamespaceContext* fugue_sqlParser::DescribeNamespaceContext::theNamespace() {
  return getRuleContext<fugue_sqlParser::TheNamespaceContext>(0);
}

fugue_sqlParser::MultipartIdentifierContext* fugue_sqlParser::DescribeNamespaceContext::multipartIdentifier() {
  return getRuleContext<fugue_sqlParser::MultipartIdentifierContext>(0);
}

tree::TerminalNode* fugue_sqlParser::DescribeNamespaceContext::DESC() {
  return getToken(fugue_sqlParser::DESC, 0);
}

tree::TerminalNode* fugue_sqlParser::DescribeNamespaceContext::DESCRIBE() {
  return getToken(fugue_sqlParser::DESCRIBE, 0);
}

tree::TerminalNode* fugue_sqlParser::DescribeNamespaceContext::EXTENDED() {
  return getToken(fugue_sqlParser::EXTENDED, 0);
}

fugue_sqlParser::DescribeNamespaceContext::DescribeNamespaceContext(StatementContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::DescribeNamespaceContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitDescribeNamespace(this);
  else
    return visitor->visitChildren(this);
}
//----------------- AlterTableAlterColumnContext ------------------------------------------------------------------

std::vector<tree::TerminalNode *> fugue_sqlParser::AlterTableAlterColumnContext::ALTER() {
  return getTokens(fugue_sqlParser::ALTER);
}

tree::TerminalNode* fugue_sqlParser::AlterTableAlterColumnContext::ALTER(size_t i) {
  return getToken(fugue_sqlParser::ALTER, i);
}

tree::TerminalNode* fugue_sqlParser::AlterTableAlterColumnContext::TABLE() {
  return getToken(fugue_sqlParser::TABLE, 0);
}

std::vector<fugue_sqlParser::MultipartIdentifierContext *> fugue_sqlParser::AlterTableAlterColumnContext::multipartIdentifier() {
  return getRuleContexts<fugue_sqlParser::MultipartIdentifierContext>();
}

fugue_sqlParser::MultipartIdentifierContext* fugue_sqlParser::AlterTableAlterColumnContext::multipartIdentifier(size_t i) {
  return getRuleContext<fugue_sqlParser::MultipartIdentifierContext>(i);
}

tree::TerminalNode* fugue_sqlParser::AlterTableAlterColumnContext::CHANGE() {
  return getToken(fugue_sqlParser::CHANGE, 0);
}

tree::TerminalNode* fugue_sqlParser::AlterTableAlterColumnContext::COLUMN() {
  return getToken(fugue_sqlParser::COLUMN, 0);
}

fugue_sqlParser::AlterColumnActionContext* fugue_sqlParser::AlterTableAlterColumnContext::alterColumnAction() {
  return getRuleContext<fugue_sqlParser::AlterColumnActionContext>(0);
}

fugue_sqlParser::AlterTableAlterColumnContext::AlterTableAlterColumnContext(StatementContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::AlterTableAlterColumnContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitAlterTableAlterColumn(this);
  else
    return visitor->visitChildren(this);
}
//----------------- CommentTableContext ------------------------------------------------------------------

tree::TerminalNode* fugue_sqlParser::CommentTableContext::COMMENT() {
  return getToken(fugue_sqlParser::COMMENT, 0);
}

tree::TerminalNode* fugue_sqlParser::CommentTableContext::ON() {
  return getToken(fugue_sqlParser::ON, 0);
}

tree::TerminalNode* fugue_sqlParser::CommentTableContext::TABLE() {
  return getToken(fugue_sqlParser::TABLE, 0);
}

fugue_sqlParser::MultipartIdentifierContext* fugue_sqlParser::CommentTableContext::multipartIdentifier() {
  return getRuleContext<fugue_sqlParser::MultipartIdentifierContext>(0);
}

tree::TerminalNode* fugue_sqlParser::CommentTableContext::IS() {
  return getToken(fugue_sqlParser::IS, 0);
}

tree::TerminalNode* fugue_sqlParser::CommentTableContext::STRING() {
  return getToken(fugue_sqlParser::STRING, 0);
}

tree::TerminalNode* fugue_sqlParser::CommentTableContext::THENULL() {
  return getToken(fugue_sqlParser::THENULL, 0);
}

fugue_sqlParser::CommentTableContext::CommentTableContext(StatementContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::CommentTableContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitCommentTable(this);
  else
    return visitor->visitChildren(this);
}
//----------------- CreateNamespaceContext ------------------------------------------------------------------

tree::TerminalNode* fugue_sqlParser::CreateNamespaceContext::CREATE() {
  return getToken(fugue_sqlParser::CREATE, 0);
}

fugue_sqlParser::TheNamespaceContext* fugue_sqlParser::CreateNamespaceContext::theNamespace() {
  return getRuleContext<fugue_sqlParser::TheNamespaceContext>(0);
}

fugue_sqlParser::MultipartIdentifierContext* fugue_sqlParser::CreateNamespaceContext::multipartIdentifier() {
  return getRuleContext<fugue_sqlParser::MultipartIdentifierContext>(0);
}

tree::TerminalNode* fugue_sqlParser::CreateNamespaceContext::IF() {
  return getToken(fugue_sqlParser::IF, 0);
}

tree::TerminalNode* fugue_sqlParser::CreateNamespaceContext::NOT() {
  return getToken(fugue_sqlParser::NOT, 0);
}

tree::TerminalNode* fugue_sqlParser::CreateNamespaceContext::EXISTS() {
  return getToken(fugue_sqlParser::EXISTS, 0);
}

std::vector<fugue_sqlParser::CommentSpecContext *> fugue_sqlParser::CreateNamespaceContext::commentSpec() {
  return getRuleContexts<fugue_sqlParser::CommentSpecContext>();
}

fugue_sqlParser::CommentSpecContext* fugue_sqlParser::CreateNamespaceContext::commentSpec(size_t i) {
  return getRuleContext<fugue_sqlParser::CommentSpecContext>(i);
}

std::vector<fugue_sqlParser::LocationSpecContext *> fugue_sqlParser::CreateNamespaceContext::locationSpec() {
  return getRuleContexts<fugue_sqlParser::LocationSpecContext>();
}

fugue_sqlParser::LocationSpecContext* fugue_sqlParser::CreateNamespaceContext::locationSpec(size_t i) {
  return getRuleContext<fugue_sqlParser::LocationSpecContext>(i);
}

std::vector<tree::TerminalNode *> fugue_sqlParser::CreateNamespaceContext::WITH() {
  return getTokens(fugue_sqlParser::WITH);
}

tree::TerminalNode* fugue_sqlParser::CreateNamespaceContext::WITH(size_t i) {
  return getToken(fugue_sqlParser::WITH, i);
}

std::vector<fugue_sqlParser::TablePropertyListContext *> fugue_sqlParser::CreateNamespaceContext::tablePropertyList() {
  return getRuleContexts<fugue_sqlParser::TablePropertyListContext>();
}

fugue_sqlParser::TablePropertyListContext* fugue_sqlParser::CreateNamespaceContext::tablePropertyList(size_t i) {
  return getRuleContext<fugue_sqlParser::TablePropertyListContext>(i);
}

std::vector<tree::TerminalNode *> fugue_sqlParser::CreateNamespaceContext::DBPROPERTIES() {
  return getTokens(fugue_sqlParser::DBPROPERTIES);
}

tree::TerminalNode* fugue_sqlParser::CreateNamespaceContext::DBPROPERTIES(size_t i) {
  return getToken(fugue_sqlParser::DBPROPERTIES, i);
}

std::vector<tree::TerminalNode *> fugue_sqlParser::CreateNamespaceContext::PROPERTIES() {
  return getTokens(fugue_sqlParser::PROPERTIES);
}

tree::TerminalNode* fugue_sqlParser::CreateNamespaceContext::PROPERTIES(size_t i) {
  return getToken(fugue_sqlParser::PROPERTIES, i);
}

fugue_sqlParser::CreateNamespaceContext::CreateNamespaceContext(StatementContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::CreateNamespaceContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitCreateNamespace(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ShowTblPropertiesContext ------------------------------------------------------------------

tree::TerminalNode* fugue_sqlParser::ShowTblPropertiesContext::SHOW() {
  return getToken(fugue_sqlParser::SHOW, 0);
}

tree::TerminalNode* fugue_sqlParser::ShowTblPropertiesContext::TBLPROPERTIES() {
  return getToken(fugue_sqlParser::TBLPROPERTIES, 0);
}

fugue_sqlParser::MultipartIdentifierContext* fugue_sqlParser::ShowTblPropertiesContext::multipartIdentifier() {
  return getRuleContext<fugue_sqlParser::MultipartIdentifierContext>(0);
}

fugue_sqlParser::TablePropertyKeyContext* fugue_sqlParser::ShowTblPropertiesContext::tablePropertyKey() {
  return getRuleContext<fugue_sqlParser::TablePropertyKeyContext>(0);
}

fugue_sqlParser::ShowTblPropertiesContext::ShowTblPropertiesContext(StatementContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::ShowTblPropertiesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitShowTblProperties(this);
  else
    return visitor->visitChildren(this);
}
//----------------- UnsetTablePropertiesContext ------------------------------------------------------------------

tree::TerminalNode* fugue_sqlParser::UnsetTablePropertiesContext::ALTER() {
  return getToken(fugue_sqlParser::ALTER, 0);
}

fugue_sqlParser::MultipartIdentifierContext* fugue_sqlParser::UnsetTablePropertiesContext::multipartIdentifier() {
  return getRuleContext<fugue_sqlParser::MultipartIdentifierContext>(0);
}

tree::TerminalNode* fugue_sqlParser::UnsetTablePropertiesContext::UNSET() {
  return getToken(fugue_sqlParser::UNSET, 0);
}

tree::TerminalNode* fugue_sqlParser::UnsetTablePropertiesContext::TBLPROPERTIES() {
  return getToken(fugue_sqlParser::TBLPROPERTIES, 0);
}

fugue_sqlParser::TablePropertyListContext* fugue_sqlParser::UnsetTablePropertiesContext::tablePropertyList() {
  return getRuleContext<fugue_sqlParser::TablePropertyListContext>(0);
}

tree::TerminalNode* fugue_sqlParser::UnsetTablePropertiesContext::TABLE() {
  return getToken(fugue_sqlParser::TABLE, 0);
}

tree::TerminalNode* fugue_sqlParser::UnsetTablePropertiesContext::VIEW() {
  return getToken(fugue_sqlParser::VIEW, 0);
}

tree::TerminalNode* fugue_sqlParser::UnsetTablePropertiesContext::IF() {
  return getToken(fugue_sqlParser::IF, 0);
}

tree::TerminalNode* fugue_sqlParser::UnsetTablePropertiesContext::EXISTS() {
  return getToken(fugue_sqlParser::EXISTS, 0);
}

fugue_sqlParser::UnsetTablePropertiesContext::UnsetTablePropertiesContext(StatementContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::UnsetTablePropertiesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitUnsetTableProperties(this);
  else
    return visitor->visitChildren(this);
}
//----------------- SetTableLocationContext ------------------------------------------------------------------

tree::TerminalNode* fugue_sqlParser::SetTableLocationContext::ALTER() {
  return getToken(fugue_sqlParser::ALTER, 0);
}

tree::TerminalNode* fugue_sqlParser::SetTableLocationContext::TABLE() {
  return getToken(fugue_sqlParser::TABLE, 0);
}

fugue_sqlParser::MultipartIdentifierContext* fugue_sqlParser::SetTableLocationContext::multipartIdentifier() {
  return getRuleContext<fugue_sqlParser::MultipartIdentifierContext>(0);
}

tree::TerminalNode* fugue_sqlParser::SetTableLocationContext::SET() {
  return getToken(fugue_sqlParser::SET, 0);
}

fugue_sqlParser::LocationSpecContext* fugue_sqlParser::SetTableLocationContext::locationSpec() {
  return getRuleContext<fugue_sqlParser::LocationSpecContext>(0);
}

fugue_sqlParser::PartitionSpecContext* fugue_sqlParser::SetTableLocationContext::partitionSpec() {
  return getRuleContext<fugue_sqlParser::PartitionSpecContext>(0);
}

fugue_sqlParser::SetTableLocationContext::SetTableLocationContext(StatementContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::SetTableLocationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitSetTableLocation(this);
  else
    return visitor->visitChildren(this);
}
//----------------- DropTableColumnsContext ------------------------------------------------------------------

tree::TerminalNode* fugue_sqlParser::DropTableColumnsContext::ALTER() {
  return getToken(fugue_sqlParser::ALTER, 0);
}

tree::TerminalNode* fugue_sqlParser::DropTableColumnsContext::TABLE() {
  return getToken(fugue_sqlParser::TABLE, 0);
}

fugue_sqlParser::MultipartIdentifierContext* fugue_sqlParser::DropTableColumnsContext::multipartIdentifier() {
  return getRuleContext<fugue_sqlParser::MultipartIdentifierContext>(0);
}

tree::TerminalNode* fugue_sqlParser::DropTableColumnsContext::DROP() {
  return getToken(fugue_sqlParser::DROP, 0);
}

tree::TerminalNode* fugue_sqlParser::DropTableColumnsContext::COLUMN() {
  return getToken(fugue_sqlParser::COLUMN, 0);
}

tree::TerminalNode* fugue_sqlParser::DropTableColumnsContext::COLUMNS() {
  return getToken(fugue_sqlParser::COLUMNS, 0);
}

fugue_sqlParser::MultipartIdentifierListContext* fugue_sqlParser::DropTableColumnsContext::multipartIdentifierList() {
  return getRuleContext<fugue_sqlParser::MultipartIdentifierListContext>(0);
}

fugue_sqlParser::DropTableColumnsContext::DropTableColumnsContext(StatementContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::DropTableColumnsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitDropTableColumns(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ShowViewsContext ------------------------------------------------------------------

tree::TerminalNode* fugue_sqlParser::ShowViewsContext::SHOW() {
  return getToken(fugue_sqlParser::SHOW, 0);
}

tree::TerminalNode* fugue_sqlParser::ShowViewsContext::VIEWS() {
  return getToken(fugue_sqlParser::VIEWS, 0);
}

fugue_sqlParser::MultipartIdentifierContext* fugue_sqlParser::ShowViewsContext::multipartIdentifier() {
  return getRuleContext<fugue_sqlParser::MultipartIdentifierContext>(0);
}

tree::TerminalNode* fugue_sqlParser::ShowViewsContext::FROM() {
  return getToken(fugue_sqlParser::FROM, 0);
}

tree::TerminalNode* fugue_sqlParser::ShowViewsContext::IN() {
  return getToken(fugue_sqlParser::IN, 0);
}

tree::TerminalNode* fugue_sqlParser::ShowViewsContext::STRING() {
  return getToken(fugue_sqlParser::STRING, 0);
}

tree::TerminalNode* fugue_sqlParser::ShowViewsContext::LIKE() {
  return getToken(fugue_sqlParser::LIKE, 0);
}

fugue_sqlParser::ShowViewsContext::ShowViewsContext(StatementContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::ShowViewsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitShowViews(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ShowFunctionsContext ------------------------------------------------------------------

tree::TerminalNode* fugue_sqlParser::ShowFunctionsContext::SHOW() {
  return getToken(fugue_sqlParser::SHOW, 0);
}

tree::TerminalNode* fugue_sqlParser::ShowFunctionsContext::FUNCTIONS() {
  return getToken(fugue_sqlParser::FUNCTIONS, 0);
}

fugue_sqlParser::IdentifierContext* fugue_sqlParser::ShowFunctionsContext::identifier() {
  return getRuleContext<fugue_sqlParser::IdentifierContext>(0);
}

fugue_sqlParser::MultipartIdentifierContext* fugue_sqlParser::ShowFunctionsContext::multipartIdentifier() {
  return getRuleContext<fugue_sqlParser::MultipartIdentifierContext>(0);
}

tree::TerminalNode* fugue_sqlParser::ShowFunctionsContext::LIKE() {
  return getToken(fugue_sqlParser::LIKE, 0);
}

tree::TerminalNode* fugue_sqlParser::ShowFunctionsContext::STRING() {
  return getToken(fugue_sqlParser::STRING, 0);
}

fugue_sqlParser::ShowFunctionsContext::ShowFunctionsContext(StatementContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::ShowFunctionsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitShowFunctions(this);
  else
    return visitor->visitChildren(this);
}
//----------------- CacheTableContext ------------------------------------------------------------------

tree::TerminalNode* fugue_sqlParser::CacheTableContext::CACHE() {
  return getToken(fugue_sqlParser::CACHE, 0);
}

tree::TerminalNode* fugue_sqlParser::CacheTableContext::TABLE() {
  return getToken(fugue_sqlParser::TABLE, 0);
}

fugue_sqlParser::MultipartIdentifierContext* fugue_sqlParser::CacheTableContext::multipartIdentifier() {
  return getRuleContext<fugue_sqlParser::MultipartIdentifierContext>(0);
}

tree::TerminalNode* fugue_sqlParser::CacheTableContext::LAZY() {
  return getToken(fugue_sqlParser::LAZY, 0);
}

tree::TerminalNode* fugue_sqlParser::CacheTableContext::OPTIONS() {
  return getToken(fugue_sqlParser::OPTIONS, 0);
}

fugue_sqlParser::QueryContext* fugue_sqlParser::CacheTableContext::query() {
  return getRuleContext<fugue_sqlParser::QueryContext>(0);
}

fugue_sqlParser::TablePropertyListContext* fugue_sqlParser::CacheTableContext::tablePropertyList() {
  return getRuleContext<fugue_sqlParser::TablePropertyListContext>(0);
}

tree::TerminalNode* fugue_sqlParser::CacheTableContext::AS() {
  return getToken(fugue_sqlParser::AS, 0);
}

fugue_sqlParser::CacheTableContext::CacheTableContext(StatementContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::CacheTableContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitCacheTable(this);
  else
    return visitor->visitChildren(this);
}
//----------------- AddTableColumnsContext ------------------------------------------------------------------

tree::TerminalNode* fugue_sqlParser::AddTableColumnsContext::ALTER() {
  return getToken(fugue_sqlParser::ALTER, 0);
}

tree::TerminalNode* fugue_sqlParser::AddTableColumnsContext::TABLE() {
  return getToken(fugue_sqlParser::TABLE, 0);
}

fugue_sqlParser::MultipartIdentifierContext* fugue_sqlParser::AddTableColumnsContext::multipartIdentifier() {
  return getRuleContext<fugue_sqlParser::MultipartIdentifierContext>(0);
}

tree::TerminalNode* fugue_sqlParser::AddTableColumnsContext::ADD() {
  return getToken(fugue_sqlParser::ADD, 0);
}

tree::TerminalNode* fugue_sqlParser::AddTableColumnsContext::COLUMN() {
  return getToken(fugue_sqlParser::COLUMN, 0);
}

tree::TerminalNode* fugue_sqlParser::AddTableColumnsContext::COLUMNS() {
  return getToken(fugue_sqlParser::COLUMNS, 0);
}

fugue_sqlParser::QualifiedColTypeWithPositionListContext* fugue_sqlParser::AddTableColumnsContext::qualifiedColTypeWithPositionList() {
  return getRuleContext<fugue_sqlParser::QualifiedColTypeWithPositionListContext>(0);
}

fugue_sqlParser::AddTableColumnsContext::AddTableColumnsContext(StatementContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::AddTableColumnsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitAddTableColumns(this);
  else
    return visitor->visitChildren(this);
}
//----------------- SetTablePropertiesContext ------------------------------------------------------------------

tree::TerminalNode* fugue_sqlParser::SetTablePropertiesContext::ALTER() {
  return getToken(fugue_sqlParser::ALTER, 0);
}

fugue_sqlParser::MultipartIdentifierContext* fugue_sqlParser::SetTablePropertiesContext::multipartIdentifier() {
  return getRuleContext<fugue_sqlParser::MultipartIdentifierContext>(0);
}

tree::TerminalNode* fugue_sqlParser::SetTablePropertiesContext::SET() {
  return getToken(fugue_sqlParser::SET, 0);
}

tree::TerminalNode* fugue_sqlParser::SetTablePropertiesContext::TBLPROPERTIES() {
  return getToken(fugue_sqlParser::TBLPROPERTIES, 0);
}

fugue_sqlParser::TablePropertyListContext* fugue_sqlParser::SetTablePropertiesContext::tablePropertyList() {
  return getRuleContext<fugue_sqlParser::TablePropertyListContext>(0);
}

tree::TerminalNode* fugue_sqlParser::SetTablePropertiesContext::TABLE() {
  return getToken(fugue_sqlParser::TABLE, 0);
}

tree::TerminalNode* fugue_sqlParser::SetTablePropertiesContext::VIEW() {
  return getToken(fugue_sqlParser::VIEW, 0);
}

fugue_sqlParser::SetTablePropertiesContext::SetTablePropertiesContext(StatementContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::SetTablePropertiesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitSetTableProperties(this);
  else
    return visitor->visitChildren(this);
}
fugue_sqlParser::StatementContext* fugue_sqlParser::statement() {
  StatementContext *_localctx = _tracker.createInstance<StatementContext>(_ctx, getState());
  enterRule(_localctx, 164, fugue_sqlParser::RuleStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(1842);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 232, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<fugue_sqlParser::StatementDefaultContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(1137);
      query();
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<fugue_sqlParser::DmlStatementContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(1139);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::WITH) {
        setState(1138);
        ctes();
      }
      setState(1141);
      dmlStatementNoWith();
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<fugue_sqlParser::UseContext>(_localctx);
      enterOuterAlt(_localctx, 3);
      setState(1142);
      match(fugue_sqlParser::USE);
      setState(1144);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 128, _ctx)) {
      case 1: {
        setState(1143);
        match(fugue_sqlParser::NAMESPACE);
        break;
      }

      default:
        break;
      }
      setState(1146);
      multipartIdentifier();
      break;
    }

    case 4: {
      _localctx = _tracker.createInstance<fugue_sqlParser::CreateNamespaceContext>(_localctx);
      enterOuterAlt(_localctx, 4);
      setState(1147);
      match(fugue_sqlParser::CREATE);
      setState(1148);
      theNamespace();
      setState(1152);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 129, _ctx)) {
      case 1: {
        setState(1149);
        match(fugue_sqlParser::IF);
        setState(1150);
        match(fugue_sqlParser::NOT);
        setState(1151);
        match(fugue_sqlParser::EXISTS);
        break;
      }

      default:
        break;
      }
      setState(1154);
      multipartIdentifier();
      setState(1162);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == fugue_sqlParser::COMMENT || _la == fugue_sqlParser::LOCATION || _la == fugue_sqlParser::WITH) {
        setState(1160);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case fugue_sqlParser::COMMENT: {
            setState(1155);
            commentSpec();
            break;
          }

          case fugue_sqlParser::LOCATION: {
            setState(1156);
            locationSpec();
            break;
          }

          case fugue_sqlParser::WITH: {
            setState(1157);
            match(fugue_sqlParser::WITH);
            setState(1158);
            _la = _input->LA(1);
            if (!(_la == fugue_sqlParser::DBPROPERTIES || _la == fugue_sqlParser::PROPERTIES)) {
            _errHandler->recoverInline(this);
            }
            else {
              _errHandler->reportMatch(this);
              consume();
            }
            setState(1159);
            tablePropertyList();
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        setState(1164);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    case 5: {
      _localctx = _tracker.createInstance<fugue_sqlParser::SetNamespacePropertiesContext>(_localctx);
      enterOuterAlt(_localctx, 5);
      setState(1165);
      match(fugue_sqlParser::ALTER);
      setState(1166);
      theNamespace();
      setState(1167);
      multipartIdentifier();
      setState(1168);
      match(fugue_sqlParser::SET);
      setState(1169);
      _la = _input->LA(1);
      if (!(_la == fugue_sqlParser::DBPROPERTIES || _la == fugue_sqlParser::PROPERTIES)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(1170);
      tablePropertyList();
      break;
    }

    case 6: {
      _localctx = _tracker.createInstance<fugue_sqlParser::SetNamespaceLocationContext>(_localctx);
      enterOuterAlt(_localctx, 6);
      setState(1172);
      match(fugue_sqlParser::ALTER);
      setState(1173);
      theNamespace();
      setState(1174);
      multipartIdentifier();
      setState(1175);
      match(fugue_sqlParser::SET);
      setState(1176);
      locationSpec();
      break;
    }

    case 7: {
      _localctx = _tracker.createInstance<fugue_sqlParser::DropNamespaceContext>(_localctx);
      enterOuterAlt(_localctx, 7);
      setState(1178);
      match(fugue_sqlParser::DROP);
      setState(1179);
      theNamespace();
      setState(1182);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 132, _ctx)) {
      case 1: {
        setState(1180);
        match(fugue_sqlParser::IF);
        setState(1181);
        match(fugue_sqlParser::EXISTS);
        break;
      }

      default:
        break;
      }
      setState(1184);
      multipartIdentifier();
      setState(1186);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::CASCADE || _la == fugue_sqlParser::RESTRICT) {
        setState(1185);
        _la = _input->LA(1);
        if (!(_la == fugue_sqlParser::CASCADE || _la == fugue_sqlParser::RESTRICT)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
      }
      break;
    }

    case 8: {
      _localctx = _tracker.createInstance<fugue_sqlParser::ShowNamespacesContext>(_localctx);
      enterOuterAlt(_localctx, 8);
      setState(1188);
      match(fugue_sqlParser::SHOW);
      setState(1189);
      _la = _input->LA(1);
      if (!(_la == fugue_sqlParser::DATABASES || _la == fugue_sqlParser::NAMESPACES)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(1192);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::FROM

      || _la == fugue_sqlParser::IN) {
        setState(1190);
        _la = _input->LA(1);
        if (!(_la == fugue_sqlParser::FROM

        || _la == fugue_sqlParser::IN)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(1191);
        multipartIdentifier();
      }
      setState(1198);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::LIKE || _la == fugue_sqlParser::STRING) {
        setState(1195);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == fugue_sqlParser::LIKE) {
          setState(1194);
          match(fugue_sqlParser::LIKE);
        }
        setState(1197);
        antlrcpp::downCast<ShowNamespacesContext *>(_localctx)->pattern = match(fugue_sqlParser::STRING);
      }
      break;
    }

    case 9: {
      _localctx = _tracker.createInstance<fugue_sqlParser::CreateTableContext>(_localctx);
      enterOuterAlt(_localctx, 9);
      setState(1200);
      createTableHeader();
      setState(1205);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::T__2) {
        setState(1201);
        match(fugue_sqlParser::T__2);
        setState(1202);
        colTypeList();
        setState(1203);
        match(fugue_sqlParser::T__3);
      }
      setState(1207);
      tableProvider();
      setState(1208);
      createTableClauses();
      setState(1213);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & ((1ULL << fugue_sqlParser::FILL)
        | (1ULL << fugue_sqlParser::TAKE)
        | (1ULL << fugue_sqlParser::PROCESS)
        | (1ULL << fugue_sqlParser::ZIP)
        | (1ULL << fugue_sqlParser::SAVE)
        | (1ULL << fugue_sqlParser::CONNECT)
        | (1ULL << fugue_sqlParser::SAMPLE)
        | (1ULL << fugue_sqlParser::ALTER)
        | (1ULL << fugue_sqlParser::AS))) != 0) || ((((_la - 94) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 94)) & ((1ULL << (fugue_sqlParser::CREATE - 94))
        | (1ULL << (fugue_sqlParser::DROP - 94))
        | (1ULL << (fugue_sqlParser::FROM - 94)))) != 0) || ((((_la - 177) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 177)) & ((1ULL << (fugue_sqlParser::LOAD - 177))
        | (1ULL << (fugue_sqlParser::MAP - 177))
        | (1ULL << (fugue_sqlParser::REDUCE - 177))
        | (1ULL << (fugue_sqlParser::RENAME - 177)))) != 0) || ((((_la - 247) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 247)) & ((1ULL << (fugue_sqlParser::SELECT - 247))
        | (1ULL << (fugue_sqlParser::TABLE - 247))
        | (1ULL << (fugue_sqlParser::TRANSFORM - 247))
        | (1ULL << (fugue_sqlParser::VALUES - 247))
        | (1ULL << (fugue_sqlParser::WITH - 247)))) != 0)) {
        setState(1210);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == fugue_sqlParser::AS) {
          setState(1209);
          match(fugue_sqlParser::AS);
        }
        setState(1212);
        query();
      }
      break;
    }

    case 10: {
      _localctx = _tracker.createInstance<fugue_sqlParser::CreateHiveTableContext>(_localctx);
      enterOuterAlt(_localctx, 10);
      setState(1215);
      createTableHeader();
      setState(1220);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::T__2) {
        setState(1216);
        match(fugue_sqlParser::T__2);
        setState(1217);
        antlrcpp::downCast<CreateHiveTableContext *>(_localctx)->columns = colTypeList();
        setState(1218);
        match(fugue_sqlParser::T__3);
      }
      setState(1243);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == fugue_sqlParser::CLUSTERED

      || _la == fugue_sqlParser::COMMENT || _la == fugue_sqlParser::LOCATION

      || _la == fugue_sqlParser::PARTITIONED || ((((_la - 243) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 243)) & ((1ULL << (fugue_sqlParser::ROW - 243))
        | (1ULL << (fugue_sqlParser::SKEWED - 243))
        | (1ULL << (fugue_sqlParser::STORED - 243))
        | (1ULL << (fugue_sqlParser::TBLPROPERTIES - 243)))) != 0)) {
        setState(1241);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case fugue_sqlParser::COMMENT: {
            setState(1222);
            commentSpec();
            break;
          }

          case fugue_sqlParser::PARTITIONED: {
            setState(1232);
            _errHandler->sync(this);
            switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 141, _ctx)) {
            case 1: {
              setState(1223);
              match(fugue_sqlParser::PARTITIONED);
              setState(1224);
              match(fugue_sqlParser::BY);
              setState(1225);
              match(fugue_sqlParser::T__2);
              setState(1226);
              antlrcpp::downCast<CreateHiveTableContext *>(_localctx)->partitionColumns = colTypeList();
              setState(1227);
              match(fugue_sqlParser::T__3);
              break;
            }

            case 2: {
              setState(1229);
              match(fugue_sqlParser::PARTITIONED);
              setState(1230);
              match(fugue_sqlParser::BY);
              setState(1231);
              antlrcpp::downCast<CreateHiveTableContext *>(_localctx)->partitionColumnNames = identifierList();
              break;
            }

            default:
              break;
            }
            break;
          }

          case fugue_sqlParser::CLUSTERED: {
            setState(1234);
            bucketSpec();
            break;
          }

          case fugue_sqlParser::SKEWED: {
            setState(1235);
            skewSpec();
            break;
          }

          case fugue_sqlParser::ROW: {
            setState(1236);
            rowFormat();
            break;
          }

          case fugue_sqlParser::STORED: {
            setState(1237);
            createFileFormat();
            break;
          }

          case fugue_sqlParser::LOCATION: {
            setState(1238);
            locationSpec();
            break;
          }

          case fugue_sqlParser::TBLPROPERTIES: {
            setState(1239);
            match(fugue_sqlParser::TBLPROPERTIES);
            setState(1240);
            antlrcpp::downCast<CreateHiveTableContext *>(_localctx)->tableProps = tablePropertyList();
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        setState(1245);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1250);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & ((1ULL << fugue_sqlParser::FILL)
        | (1ULL << fugue_sqlParser::TAKE)
        | (1ULL << fugue_sqlParser::PROCESS)
        | (1ULL << fugue_sqlParser::ZIP)
        | (1ULL << fugue_sqlParser::SAVE)
        | (1ULL << fugue_sqlParser::CONNECT)
        | (1ULL << fugue_sqlParser::SAMPLE)
        | (1ULL << fugue_sqlParser::ALTER)
        | (1ULL << fugue_sqlParser::AS))) != 0) || ((((_la - 94) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 94)) & ((1ULL << (fugue_sqlParser::CREATE - 94))
        | (1ULL << (fugue_sqlParser::DROP - 94))
        | (1ULL << (fugue_sqlParser::FROM - 94)))) != 0) || ((((_la - 177) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 177)) & ((1ULL << (fugue_sqlParser::LOAD - 177))
        | (1ULL << (fugue_sqlParser::MAP - 177))
        | (1ULL << (fugue_sqlParser::REDUCE - 177))
        | (1ULL << (fugue_sqlParser::RENAME - 177)))) != 0) || ((((_la - 247) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 247)) & ((1ULL << (fugue_sqlParser::SELECT - 247))
        | (1ULL << (fugue_sqlParser::TABLE - 247))
        | (1ULL << (fugue_sqlParser::TRANSFORM - 247))
        | (1ULL << (fugue_sqlParser::VALUES - 247))
        | (1ULL << (fugue_sqlParser::WITH - 247)))) != 0)) {
        setState(1247);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == fugue_sqlParser::AS) {
          setState(1246);
          match(fugue_sqlParser::AS);
        }
        setState(1249);
        query();
      }
      break;
    }

    case 11: {
      _localctx = _tracker.createInstance<fugue_sqlParser::CreateTableLikeContext>(_localctx);
      enterOuterAlt(_localctx, 11);
      setState(1252);
      match(fugue_sqlParser::CREATE);
      setState(1253);
      match(fugue_sqlParser::TABLE);
      setState(1257);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 146, _ctx)) {
      case 1: {
        setState(1254);
        match(fugue_sqlParser::IF);
        setState(1255);
        match(fugue_sqlParser::NOT);
        setState(1256);
        match(fugue_sqlParser::EXISTS);
        break;
      }

      default:
        break;
      }
      setState(1259);
      antlrcpp::downCast<CreateTableLikeContext *>(_localctx)->target = tableIdentifier();
      setState(1260);
      match(fugue_sqlParser::LIKE);
      setState(1261);
      antlrcpp::downCast<CreateTableLikeContext *>(_localctx)->source = tableIdentifier();
      setState(1270);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == fugue_sqlParser::LOCATION || ((((_la - 243) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 243)) & ((1ULL << (fugue_sqlParser::ROW - 243))
        | (1ULL << (fugue_sqlParser::STORED - 243))
        | (1ULL << (fugue_sqlParser::TBLPROPERTIES - 243))
        | (1ULL << (fugue_sqlParser::USING - 243)))) != 0)) {
        setState(1268);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case fugue_sqlParser::USING: {
            setState(1262);
            tableProvider();
            break;
          }

          case fugue_sqlParser::ROW: {
            setState(1263);
            rowFormat();
            break;
          }

          case fugue_sqlParser::STORED: {
            setState(1264);
            createFileFormat();
            break;
          }

          case fugue_sqlParser::LOCATION: {
            setState(1265);
            locationSpec();
            break;
          }

          case fugue_sqlParser::TBLPROPERTIES: {
            setState(1266);
            match(fugue_sqlParser::TBLPROPERTIES);
            setState(1267);
            antlrcpp::downCast<CreateTableLikeContext *>(_localctx)->tableProps = tablePropertyList();
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        setState(1272);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    case 12: {
      _localctx = _tracker.createInstance<fugue_sqlParser::ReplaceTableContext>(_localctx);
      enterOuterAlt(_localctx, 12);
      setState(1273);
      replaceTableHeader();
      setState(1278);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::T__2) {
        setState(1274);
        match(fugue_sqlParser::T__2);
        setState(1275);
        colTypeList();
        setState(1276);
        match(fugue_sqlParser::T__3);
      }
      setState(1280);
      tableProvider();
      setState(1281);
      createTableClauses();
      setState(1286);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & ((1ULL << fugue_sqlParser::FILL)
        | (1ULL << fugue_sqlParser::TAKE)
        | (1ULL << fugue_sqlParser::PROCESS)
        | (1ULL << fugue_sqlParser::ZIP)
        | (1ULL << fugue_sqlParser::SAVE)
        | (1ULL << fugue_sqlParser::CONNECT)
        | (1ULL << fugue_sqlParser::SAMPLE)
        | (1ULL << fugue_sqlParser::ALTER)
        | (1ULL << fugue_sqlParser::AS))) != 0) || ((((_la - 94) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 94)) & ((1ULL << (fugue_sqlParser::CREATE - 94))
        | (1ULL << (fugue_sqlParser::DROP - 94))
        | (1ULL << (fugue_sqlParser::FROM - 94)))) != 0) || ((((_la - 177) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 177)) & ((1ULL << (fugue_sqlParser::LOAD - 177))
        | (1ULL << (fugue_sqlParser::MAP - 177))
        | (1ULL << (fugue_sqlParser::REDUCE - 177))
        | (1ULL << (fugue_sqlParser::RENAME - 177)))) != 0) || ((((_la - 247) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 247)) & ((1ULL << (fugue_sqlParser::SELECT - 247))
        | (1ULL << (fugue_sqlParser::TABLE - 247))
        | (1ULL << (fugue_sqlParser::TRANSFORM - 247))
        | (1ULL << (fugue_sqlParser::VALUES - 247))
        | (1ULL << (fugue_sqlParser::WITH - 247)))) != 0)) {
        setState(1283);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == fugue_sqlParser::AS) {
          setState(1282);
          match(fugue_sqlParser::AS);
        }
        setState(1285);
        query();
      }
      break;
    }

    case 13: {
      _localctx = _tracker.createInstance<fugue_sqlParser::AnalyzeContext>(_localctx);
      enterOuterAlt(_localctx, 13);
      setState(1288);
      match(fugue_sqlParser::ANALYZE);
      setState(1289);
      match(fugue_sqlParser::TABLE);
      setState(1290);
      multipartIdentifier();
      setState(1292);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::PARTITION) {
        setState(1291);
        partitionSpec();
      }
      setState(1294);
      match(fugue_sqlParser::COMPUTE);
      setState(1295);
      match(fugue_sqlParser::STATISTICS);
      setState(1303);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 153, _ctx)) {
      case 1: {
        setState(1296);
        identifier();
        break;
      }

      case 2: {
        setState(1297);
        match(fugue_sqlParser::FOR);
        setState(1298);
        match(fugue_sqlParser::COLUMNS);
        setState(1299);
        identifierSeq();
        break;
      }

      case 3: {
        setState(1300);
        match(fugue_sqlParser::FOR);
        setState(1301);
        match(fugue_sqlParser::ALL);
        setState(1302);
        match(fugue_sqlParser::COLUMNS);
        break;
      }

      default:
        break;
      }
      break;
    }

    case 14: {
      _localctx = _tracker.createInstance<fugue_sqlParser::AddTableColumnsContext>(_localctx);
      enterOuterAlt(_localctx, 14);
      setState(1305);
      match(fugue_sqlParser::ALTER);
      setState(1306);
      match(fugue_sqlParser::TABLE);
      setState(1307);
      multipartIdentifier();
      setState(1308);
      match(fugue_sqlParser::ADD);
      setState(1309);
      _la = _input->LA(1);
      if (!(_la == fugue_sqlParser::COLUMN

      || _la == fugue_sqlParser::COLUMNS)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(1310);
      antlrcpp::downCast<AddTableColumnsContext *>(_localctx)->columns = qualifiedColTypeWithPositionList();
      break;
    }

    case 15: {
      _localctx = _tracker.createInstance<fugue_sqlParser::AddTableColumnsContext>(_localctx);
      enterOuterAlt(_localctx, 15);
      setState(1312);
      match(fugue_sqlParser::ALTER);
      setState(1313);
      match(fugue_sqlParser::TABLE);
      setState(1314);
      multipartIdentifier();
      setState(1315);
      match(fugue_sqlParser::ADD);
      setState(1316);
      _la = _input->LA(1);
      if (!(_la == fugue_sqlParser::COLUMN

      || _la == fugue_sqlParser::COLUMNS)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(1317);
      match(fugue_sqlParser::T__2);
      setState(1318);
      antlrcpp::downCast<AddTableColumnsContext *>(_localctx)->columns = qualifiedColTypeWithPositionList();
      setState(1319);
      match(fugue_sqlParser::T__3);
      break;
    }

    case 16: {
      _localctx = _tracker.createInstance<fugue_sqlParser::RenameTableColumnContext>(_localctx);
      enterOuterAlt(_localctx, 16);
      setState(1321);
      match(fugue_sqlParser::ALTER);
      setState(1322);
      match(fugue_sqlParser::TABLE);
      setState(1323);
      antlrcpp::downCast<RenameTableColumnContext *>(_localctx)->table = multipartIdentifier();
      setState(1324);
      match(fugue_sqlParser::RENAME);
      setState(1325);
      match(fugue_sqlParser::COLUMN);
      setState(1326);
      antlrcpp::downCast<RenameTableColumnContext *>(_localctx)->ifrom = multipartIdentifier();
      setState(1327);
      match(fugue_sqlParser::TO);
      setState(1328);
      antlrcpp::downCast<RenameTableColumnContext *>(_localctx)->to = errorCapturingIdentifier();
      break;
    }

    case 17: {
      _localctx = _tracker.createInstance<fugue_sqlParser::DropTableColumnsContext>(_localctx);
      enterOuterAlt(_localctx, 17);
      setState(1330);
      match(fugue_sqlParser::ALTER);
      setState(1331);
      match(fugue_sqlParser::TABLE);
      setState(1332);
      multipartIdentifier();
      setState(1333);
      match(fugue_sqlParser::DROP);
      setState(1334);
      _la = _input->LA(1);
      if (!(_la == fugue_sqlParser::COLUMN

      || _la == fugue_sqlParser::COLUMNS)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(1335);
      match(fugue_sqlParser::T__2);
      setState(1336);
      antlrcpp::downCast<DropTableColumnsContext *>(_localctx)->columns = multipartIdentifierList();
      setState(1337);
      match(fugue_sqlParser::T__3);
      break;
    }

    case 18: {
      _localctx = _tracker.createInstance<fugue_sqlParser::DropTableColumnsContext>(_localctx);
      enterOuterAlt(_localctx, 18);
      setState(1339);
      match(fugue_sqlParser::ALTER);
      setState(1340);
      match(fugue_sqlParser::TABLE);
      setState(1341);
      multipartIdentifier();
      setState(1342);
      match(fugue_sqlParser::DROP);
      setState(1343);
      _la = _input->LA(1);
      if (!(_la == fugue_sqlParser::COLUMN

      || _la == fugue_sqlParser::COLUMNS)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(1344);
      antlrcpp::downCast<DropTableColumnsContext *>(_localctx)->columns = multipartIdentifierList();
      break;
    }

    case 19: {
      _localctx = _tracker.createInstance<fugue_sqlParser::RenameTableContext>(_localctx);
      enterOuterAlt(_localctx, 19);
      setState(1346);
      match(fugue_sqlParser::ALTER);
      setState(1347);
      _la = _input->LA(1);
      if (!(_la == fugue_sqlParser::TABLE

      || _la == fugue_sqlParser::VIEW)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(1348);
      antlrcpp::downCast<RenameTableContext *>(_localctx)->ifrom = multipartIdentifier();
      setState(1349);
      match(fugue_sqlParser::RENAME);
      setState(1350);
      match(fugue_sqlParser::TO);
      setState(1351);
      antlrcpp::downCast<RenameTableContext *>(_localctx)->to = multipartIdentifier();
      break;
    }

    case 20: {
      _localctx = _tracker.createInstance<fugue_sqlParser::SetTablePropertiesContext>(_localctx);
      enterOuterAlt(_localctx, 20);
      setState(1353);
      match(fugue_sqlParser::ALTER);
      setState(1354);
      _la = _input->LA(1);
      if (!(_la == fugue_sqlParser::TABLE

      || _la == fugue_sqlParser::VIEW)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(1355);
      multipartIdentifier();
      setState(1356);
      match(fugue_sqlParser::SET);
      setState(1357);
      match(fugue_sqlParser::TBLPROPERTIES);
      setState(1358);
      tablePropertyList();
      break;
    }

    case 21: {
      _localctx = _tracker.createInstance<fugue_sqlParser::UnsetTablePropertiesContext>(_localctx);
      enterOuterAlt(_localctx, 21);
      setState(1360);
      match(fugue_sqlParser::ALTER);
      setState(1361);
      _la = _input->LA(1);
      if (!(_la == fugue_sqlParser::TABLE

      || _la == fugue_sqlParser::VIEW)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(1362);
      multipartIdentifier();
      setState(1363);
      match(fugue_sqlParser::UNSET);
      setState(1364);
      match(fugue_sqlParser::TBLPROPERTIES);
      setState(1367);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::IF) {
        setState(1365);
        match(fugue_sqlParser::IF);
        setState(1366);
        match(fugue_sqlParser::EXISTS);
      }
      setState(1369);
      tablePropertyList();
      break;
    }

    case 22: {
      _localctx = _tracker.createInstance<fugue_sqlParser::AlterTableAlterColumnContext>(_localctx);
      enterOuterAlt(_localctx, 22);
      setState(1371);
      match(fugue_sqlParser::ALTER);
      setState(1372);
      match(fugue_sqlParser::TABLE);
      setState(1373);
      antlrcpp::downCast<AlterTableAlterColumnContext *>(_localctx)->table = multipartIdentifier();
      setState(1374);
      _la = _input->LA(1);
      if (!(_la == fugue_sqlParser::ALTER

      || _la == fugue_sqlParser::CHANGE)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(1376);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 155, _ctx)) {
      case 1: {
        setState(1375);
        match(fugue_sqlParser::COLUMN);
        break;
      }

      default:
        break;
      }
      setState(1378);
      antlrcpp::downCast<AlterTableAlterColumnContext *>(_localctx)->column = multipartIdentifier();
      setState(1380);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::AFTER || ((((_la - 86) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 86)) & ((1ULL << (fugue_sqlParser::COMMENT - 86))
        | (1ULL << (fugue_sqlParser::DROP - 86))
        | (1ULL << (fugue_sqlParser::FIRST - 86)))) != 0) || _la == fugue_sqlParser::SET

      || _la == fugue_sqlParser::TYPE) {
        setState(1379);
        alterColumnAction();
      }
      break;
    }

    case 23: {
      _localctx = _tracker.createInstance<fugue_sqlParser::HiveChangeColumnContext>(_localctx);
      enterOuterAlt(_localctx, 23);
      setState(1382);
      match(fugue_sqlParser::ALTER);
      setState(1383);
      match(fugue_sqlParser::TABLE);
      setState(1384);
      antlrcpp::downCast<HiveChangeColumnContext *>(_localctx)->table = multipartIdentifier();
      setState(1386);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::PARTITION) {
        setState(1385);
        partitionSpec();
      }
      setState(1388);
      match(fugue_sqlParser::CHANGE);
      setState(1390);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 158, _ctx)) {
      case 1: {
        setState(1389);
        match(fugue_sqlParser::COLUMN);
        break;
      }

      default:
        break;
      }
      setState(1392);
      antlrcpp::downCast<HiveChangeColumnContext *>(_localctx)->colName = multipartIdentifier();
      setState(1393);
      colType();
      setState(1395);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::AFTER || _la == fugue_sqlParser::FIRST) {
        setState(1394);
        colPosition();
      }
      break;
    }

    case 24: {
      _localctx = _tracker.createInstance<fugue_sqlParser::HiveReplaceColumnsContext>(_localctx);
      enterOuterAlt(_localctx, 24);
      setState(1397);
      match(fugue_sqlParser::ALTER);
      setState(1398);
      match(fugue_sqlParser::TABLE);
      setState(1399);
      antlrcpp::downCast<HiveReplaceColumnsContext *>(_localctx)->table = multipartIdentifier();
      setState(1401);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::PARTITION) {
        setState(1400);
        partitionSpec();
      }
      setState(1403);
      match(fugue_sqlParser::REPLACE);
      setState(1404);
      match(fugue_sqlParser::COLUMNS);
      setState(1405);
      match(fugue_sqlParser::T__2);
      setState(1406);
      antlrcpp::downCast<HiveReplaceColumnsContext *>(_localctx)->columns = qualifiedColTypeWithPositionList();
      setState(1407);
      match(fugue_sqlParser::T__3);
      break;
    }

    case 25: {
      _localctx = _tracker.createInstance<fugue_sqlParser::SetTableSerDeContext>(_localctx);
      enterOuterAlt(_localctx, 25);
      setState(1409);
      match(fugue_sqlParser::ALTER);
      setState(1410);
      match(fugue_sqlParser::TABLE);
      setState(1411);
      multipartIdentifier();
      setState(1413);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::PARTITION) {
        setState(1412);
        partitionSpec();
      }
      setState(1415);
      match(fugue_sqlParser::SET);
      setState(1416);
      match(fugue_sqlParser::SERDE);
      setState(1417);
      match(fugue_sqlParser::STRING);
      setState(1421);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::WITH) {
        setState(1418);
        match(fugue_sqlParser::WITH);
        setState(1419);
        match(fugue_sqlParser::SERDEPROPERTIES);
        setState(1420);
        tablePropertyList();
      }
      break;
    }

    case 26: {
      _localctx = _tracker.createInstance<fugue_sqlParser::SetTableSerDeContext>(_localctx);
      enterOuterAlt(_localctx, 26);
      setState(1423);
      match(fugue_sqlParser::ALTER);
      setState(1424);
      match(fugue_sqlParser::TABLE);
      setState(1425);
      multipartIdentifier();
      setState(1427);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::PARTITION) {
        setState(1426);
        partitionSpec();
      }
      setState(1429);
      match(fugue_sqlParser::SET);
      setState(1430);
      match(fugue_sqlParser::SERDEPROPERTIES);
      setState(1431);
      tablePropertyList();
      break;
    }

    case 27: {
      _localctx = _tracker.createInstance<fugue_sqlParser::AddTablePartitionContext>(_localctx);
      enterOuterAlt(_localctx, 27);
      setState(1433);
      match(fugue_sqlParser::ALTER);
      setState(1434);
      _la = _input->LA(1);
      if (!(_la == fugue_sqlParser::TABLE

      || _la == fugue_sqlParser::VIEW)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(1435);
      multipartIdentifier();
      setState(1436);
      match(fugue_sqlParser::ADD);
      setState(1440);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::IF) {
        setState(1437);
        match(fugue_sqlParser::IF);
        setState(1438);
        match(fugue_sqlParser::NOT);
        setState(1439);
        match(fugue_sqlParser::EXISTS);
      }
      setState(1443); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(1442);
        partitionSpecLocation();
        setState(1445); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (_la == fugue_sqlParser::PARTITION);
      break;
    }

    case 28: {
      _localctx = _tracker.createInstance<fugue_sqlParser::RenameTablePartitionContext>(_localctx);
      enterOuterAlt(_localctx, 28);
      setState(1447);
      match(fugue_sqlParser::ALTER);
      setState(1448);
      match(fugue_sqlParser::TABLE);
      setState(1449);
      multipartIdentifier();
      setState(1450);
      antlrcpp::downCast<RenameTablePartitionContext *>(_localctx)->ifrom = partitionSpec();
      setState(1451);
      match(fugue_sqlParser::RENAME);
      setState(1452);
      match(fugue_sqlParser::TO);
      setState(1453);
      antlrcpp::downCast<RenameTablePartitionContext *>(_localctx)->to = partitionSpec();
      break;
    }

    case 29: {
      _localctx = _tracker.createInstance<fugue_sqlParser::DropTablePartitionsContext>(_localctx);
      enterOuterAlt(_localctx, 29);
      setState(1455);
      match(fugue_sqlParser::ALTER);
      setState(1456);
      _la = _input->LA(1);
      if (!(_la == fugue_sqlParser::TABLE

      || _la == fugue_sqlParser::VIEW)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(1457);
      multipartIdentifier();
      setState(1458);
      match(fugue_sqlParser::DROP);
      setState(1461);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::IF) {
        setState(1459);
        match(fugue_sqlParser::IF);
        setState(1460);
        match(fugue_sqlParser::EXISTS);
      }
      setState(1463);
      partitionSpec();
      setState(1468);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == fugue_sqlParser::T__0) {
        setState(1464);
        match(fugue_sqlParser::T__0);
        setState(1465);
        partitionSpec();
        setState(1470);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1472);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::PURGE) {
        setState(1471);
        match(fugue_sqlParser::PURGE);
      }
      break;
    }

    case 30: {
      _localctx = _tracker.createInstance<fugue_sqlParser::SetTableLocationContext>(_localctx);
      enterOuterAlt(_localctx, 30);
      setState(1474);
      match(fugue_sqlParser::ALTER);
      setState(1475);
      match(fugue_sqlParser::TABLE);
      setState(1476);
      multipartIdentifier();
      setState(1478);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::PARTITION) {
        setState(1477);
        partitionSpec();
      }
      setState(1480);
      match(fugue_sqlParser::SET);
      setState(1481);
      locationSpec();
      break;
    }

    case 31: {
      _localctx = _tracker.createInstance<fugue_sqlParser::RecoverPartitionsContext>(_localctx);
      enterOuterAlt(_localctx, 31);
      setState(1483);
      match(fugue_sqlParser::ALTER);
      setState(1484);
      match(fugue_sqlParser::TABLE);
      setState(1485);
      multipartIdentifier();
      setState(1486);
      match(fugue_sqlParser::RECOVER);
      setState(1487);
      match(fugue_sqlParser::PARTITIONS);
      break;
    }

    case 32: {
      _localctx = _tracker.createInstance<fugue_sqlParser::DropTableContext>(_localctx);
      enterOuterAlt(_localctx, 32);
      setState(1489);
      match(fugue_sqlParser::DROP);
      setState(1490);
      match(fugue_sqlParser::TABLE);
      setState(1493);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 170, _ctx)) {
      case 1: {
        setState(1491);
        match(fugue_sqlParser::IF);
        setState(1492);
        match(fugue_sqlParser::EXISTS);
        break;
      }

      default:
        break;
      }
      setState(1495);
      multipartIdentifier();
      setState(1497);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::PURGE) {
        setState(1496);
        match(fugue_sqlParser::PURGE);
      }
      break;
    }

    case 33: {
      _localctx = _tracker.createInstance<fugue_sqlParser::DropViewContext>(_localctx);
      enterOuterAlt(_localctx, 33);
      setState(1499);
      match(fugue_sqlParser::DROP);
      setState(1500);
      match(fugue_sqlParser::VIEW);
      setState(1503);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 172, _ctx)) {
      case 1: {
        setState(1501);
        match(fugue_sqlParser::IF);
        setState(1502);
        match(fugue_sqlParser::EXISTS);
        break;
      }

      default:
        break;
      }
      setState(1505);
      multipartIdentifier();
      break;
    }

    case 34: {
      _localctx = _tracker.createInstance<fugue_sqlParser::CreateViewContext>(_localctx);
      enterOuterAlt(_localctx, 34);
      setState(1506);
      match(fugue_sqlParser::CREATE);
      setState(1509);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::OR) {
        setState(1507);
        match(fugue_sqlParser::OR);
        setState(1508);
        match(fugue_sqlParser::REPLACE);
      }
      setState(1515);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::GLOBAL || _la == fugue_sqlParser::TEMPORARY) {
        setState(1512);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == fugue_sqlParser::GLOBAL) {
          setState(1511);
          match(fugue_sqlParser::GLOBAL);
        }
        setState(1514);
        match(fugue_sqlParser::TEMPORARY);
      }
      setState(1517);
      match(fugue_sqlParser::VIEW);
      setState(1521);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 176, _ctx)) {
      case 1: {
        setState(1518);
        match(fugue_sqlParser::IF);
        setState(1519);
        match(fugue_sqlParser::NOT);
        setState(1520);
        match(fugue_sqlParser::EXISTS);
        break;
      }

      default:
        break;
      }
      setState(1523);
      multipartIdentifier();
      setState(1525);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::T__2) {
        setState(1524);
        identifierCommentList();
      }
      setState(1535);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == fugue_sqlParser::COMMENT || _la == fugue_sqlParser::PARTITIONED

      || _la == fugue_sqlParser::TBLPROPERTIES) {
        setState(1533);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case fugue_sqlParser::COMMENT: {
            setState(1527);
            commentSpec();
            break;
          }

          case fugue_sqlParser::PARTITIONED: {
            setState(1528);
            match(fugue_sqlParser::PARTITIONED);
            setState(1529);
            match(fugue_sqlParser::ON);
            setState(1530);
            identifierList();
            break;
          }

          case fugue_sqlParser::TBLPROPERTIES: {
            setState(1531);
            match(fugue_sqlParser::TBLPROPERTIES);
            setState(1532);
            tablePropertyList();
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        setState(1537);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1538);
      match(fugue_sqlParser::AS);
      setState(1539);
      query();
      break;
    }

    case 35: {
      _localctx = _tracker.createInstance<fugue_sqlParser::CreateTempViewUsingContext>(_localctx);
      enterOuterAlt(_localctx, 35);
      setState(1541);
      match(fugue_sqlParser::CREATE);
      setState(1544);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::OR) {
        setState(1542);
        match(fugue_sqlParser::OR);
        setState(1543);
        match(fugue_sqlParser::REPLACE);
      }
      setState(1547);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::GLOBAL) {
        setState(1546);
        match(fugue_sqlParser::GLOBAL);
      }
      setState(1549);
      match(fugue_sqlParser::TEMPORARY);
      setState(1550);
      match(fugue_sqlParser::VIEW);
      setState(1551);
      tableIdentifier();
      setState(1556);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::T__2) {
        setState(1552);
        match(fugue_sqlParser::T__2);
        setState(1553);
        colTypeList();
        setState(1554);
        match(fugue_sqlParser::T__3);
      }
      setState(1558);
      tableProvider();
      setState(1561);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::OPTIONS) {
        setState(1559);
        match(fugue_sqlParser::OPTIONS);
        setState(1560);
        tablePropertyList();
      }
      break;
    }

    case 36: {
      _localctx = _tracker.createInstance<fugue_sqlParser::AlterViewQueryContext>(_localctx);
      enterOuterAlt(_localctx, 36);
      setState(1563);
      match(fugue_sqlParser::ALTER);
      setState(1564);
      match(fugue_sqlParser::VIEW);
      setState(1565);
      multipartIdentifier();
      setState(1567);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::AS) {
        setState(1566);
        match(fugue_sqlParser::AS);
      }
      setState(1569);
      query();
      break;
    }

    case 37: {
      _localctx = _tracker.createInstance<fugue_sqlParser::CreateFunctionContext>(_localctx);
      enterOuterAlt(_localctx, 37);
      setState(1571);
      match(fugue_sqlParser::CREATE);
      setState(1574);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::OR) {
        setState(1572);
        match(fugue_sqlParser::OR);
        setState(1573);
        match(fugue_sqlParser::REPLACE);
      }
      setState(1577);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::TEMPORARY) {
        setState(1576);
        match(fugue_sqlParser::TEMPORARY);
      }
      setState(1579);
      match(fugue_sqlParser::FUNCTION);
      setState(1583);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 187, _ctx)) {
      case 1: {
        setState(1580);
        match(fugue_sqlParser::IF);
        setState(1581);
        match(fugue_sqlParser::NOT);
        setState(1582);
        match(fugue_sqlParser::EXISTS);
        break;
      }

      default:
        break;
      }
      setState(1585);
      multipartIdentifier();
      setState(1586);
      match(fugue_sqlParser::AS);
      setState(1587);
      antlrcpp::downCast<CreateFunctionContext *>(_localctx)->className = match(fugue_sqlParser::STRING);
      setState(1597);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::USING) {
        setState(1588);
        match(fugue_sqlParser::USING);
        setState(1589);
        resource();
        setState(1594);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == fugue_sqlParser::T__0) {
          setState(1590);
          match(fugue_sqlParser::T__0);
          setState(1591);
          resource();
          setState(1596);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
      }
      break;
    }

    case 38: {
      _localctx = _tracker.createInstance<fugue_sqlParser::DropFunctionContext>(_localctx);
      enterOuterAlt(_localctx, 38);
      setState(1599);
      match(fugue_sqlParser::DROP);
      setState(1601);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::TEMPORARY) {
        setState(1600);
        match(fugue_sqlParser::TEMPORARY);
      }
      setState(1603);
      match(fugue_sqlParser::FUNCTION);
      setState(1606);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 191, _ctx)) {
      case 1: {
        setState(1604);
        match(fugue_sqlParser::IF);
        setState(1605);
        match(fugue_sqlParser::EXISTS);
        break;
      }

      default:
        break;
      }
      setState(1608);
      multipartIdentifier();
      break;
    }

    case 39: {
      _localctx = _tracker.createInstance<fugue_sqlParser::ExplainContext>(_localctx);
      enterOuterAlt(_localctx, 39);
      setState(1609);
      match(fugue_sqlParser::EXPLAIN);
      setState(1611);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (((((_la - 81) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 81)) & ((1ULL << (fugue_sqlParser::CODEGEN - 81))
        | (1ULL << (fugue_sqlParser::COST - 81))
        | (1ULL << (fugue_sqlParser::EXTENDED - 81))
        | (1ULL << (fugue_sqlParser::FORMATTED - 81)))) != 0) || _la == fugue_sqlParser::LOGICAL) {
        setState(1610);
        _la = _input->LA(1);
        if (!(((((_la - 81) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 81)) & ((1ULL << (fugue_sqlParser::CODEGEN - 81))
          | (1ULL << (fugue_sqlParser::COST - 81))
          | (1ULL << (fugue_sqlParser::EXTENDED - 81))
          | (1ULL << (fugue_sqlParser::FORMATTED - 81)))) != 0) || _la == fugue_sqlParser::LOGICAL)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
      }
      setState(1613);
      statement();
      break;
    }

    case 40: {
      _localctx = _tracker.createInstance<fugue_sqlParser::ShowTablesContext>(_localctx);
      enterOuterAlt(_localctx, 40);
      setState(1614);
      match(fugue_sqlParser::SHOW);
      setState(1615);
      match(fugue_sqlParser::TABLES);
      setState(1618);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::FROM

      || _la == fugue_sqlParser::IN) {
        setState(1616);
        _la = _input->LA(1);
        if (!(_la == fugue_sqlParser::FROM

        || _la == fugue_sqlParser::IN)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(1617);
        multipartIdentifier();
      }
      setState(1624);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::LIKE || _la == fugue_sqlParser::STRING) {
        setState(1621);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == fugue_sqlParser::LIKE) {
          setState(1620);
          match(fugue_sqlParser::LIKE);
        }
        setState(1623);
        antlrcpp::downCast<ShowTablesContext *>(_localctx)->pattern = match(fugue_sqlParser::STRING);
      }
      break;
    }

    case 41: {
      _localctx = _tracker.createInstance<fugue_sqlParser::ShowTableContext>(_localctx);
      enterOuterAlt(_localctx, 41);
      setState(1626);
      match(fugue_sqlParser::SHOW);
      setState(1627);
      match(fugue_sqlParser::TABLE);
      setState(1628);
      match(fugue_sqlParser::EXTENDED);
      setState(1631);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::FROM

      || _la == fugue_sqlParser::IN) {
        setState(1629);
        _la = _input->LA(1);
        if (!(_la == fugue_sqlParser::FROM

        || _la == fugue_sqlParser::IN)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(1630);
        antlrcpp::downCast<ShowTableContext *>(_localctx)->ns = multipartIdentifier();
      }
      setState(1633);
      match(fugue_sqlParser::LIKE);
      setState(1634);
      antlrcpp::downCast<ShowTableContext *>(_localctx)->pattern = match(fugue_sqlParser::STRING);
      setState(1636);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::PARTITION) {
        setState(1635);
        partitionSpec();
      }
      break;
    }

    case 42: {
      _localctx = _tracker.createInstance<fugue_sqlParser::ShowTblPropertiesContext>(_localctx);
      enterOuterAlt(_localctx, 42);
      setState(1638);
      match(fugue_sqlParser::SHOW);
      setState(1639);
      match(fugue_sqlParser::TBLPROPERTIES);
      setState(1640);
      antlrcpp::downCast<ShowTblPropertiesContext *>(_localctx)->table = multipartIdentifier();
      setState(1645);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::T__2) {
        setState(1641);
        match(fugue_sqlParser::T__2);
        setState(1642);
        antlrcpp::downCast<ShowTblPropertiesContext *>(_localctx)->key = tablePropertyKey();
        setState(1643);
        match(fugue_sqlParser::T__3);
      }
      break;
    }

    case 43: {
      _localctx = _tracker.createInstance<fugue_sqlParser::ShowColumnsContext>(_localctx);
      enterOuterAlt(_localctx, 43);
      setState(1647);
      match(fugue_sqlParser::SHOW);
      setState(1648);
      match(fugue_sqlParser::COLUMNS);
      setState(1649);
      _la = _input->LA(1);
      if (!(_la == fugue_sqlParser::FROM

      || _la == fugue_sqlParser::IN)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(1650);
      antlrcpp::downCast<ShowColumnsContext *>(_localctx)->table = multipartIdentifier();
      setState(1653);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::FROM

      || _la == fugue_sqlParser::IN) {
        setState(1651);
        _la = _input->LA(1);
        if (!(_la == fugue_sqlParser::FROM

        || _la == fugue_sqlParser::IN)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(1652);
        antlrcpp::downCast<ShowColumnsContext *>(_localctx)->ns = multipartIdentifier();
      }
      break;
    }

    case 44: {
      _localctx = _tracker.createInstance<fugue_sqlParser::ShowViewsContext>(_localctx);
      enterOuterAlt(_localctx, 44);
      setState(1655);
      match(fugue_sqlParser::SHOW);
      setState(1656);
      match(fugue_sqlParser::VIEWS);
      setState(1659);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::FROM

      || _la == fugue_sqlParser::IN) {
        setState(1657);
        _la = _input->LA(1);
        if (!(_la == fugue_sqlParser::FROM

        || _la == fugue_sqlParser::IN)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(1658);
        multipartIdentifier();
      }
      setState(1665);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::LIKE || _la == fugue_sqlParser::STRING) {
        setState(1662);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == fugue_sqlParser::LIKE) {
          setState(1661);
          match(fugue_sqlParser::LIKE);
        }
        setState(1664);
        antlrcpp::downCast<ShowViewsContext *>(_localctx)->pattern = match(fugue_sqlParser::STRING);
      }
      break;
    }

    case 45: {
      _localctx = _tracker.createInstance<fugue_sqlParser::ShowPartitionsContext>(_localctx);
      enterOuterAlt(_localctx, 45);
      setState(1667);
      match(fugue_sqlParser::SHOW);
      setState(1668);
      match(fugue_sqlParser::PARTITIONS);
      setState(1669);
      multipartIdentifier();
      setState(1671);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::PARTITION) {
        setState(1670);
        partitionSpec();
      }
      break;
    }

    case 46: {
      _localctx = _tracker.createInstance<fugue_sqlParser::ShowFunctionsContext>(_localctx);
      enterOuterAlt(_localctx, 46);
      setState(1673);
      match(fugue_sqlParser::SHOW);
      setState(1675);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 204, _ctx)) {
      case 1: {
        setState(1674);
        identifier();
        break;
      }

      default:
        break;
      }
      setState(1677);
      match(fugue_sqlParser::FUNCTIONS);
      setState(1685);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (((((_la - 53) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 53)) & ((1ULL << (fugue_sqlParser::ADD - 53))
        | (1ULL << (fugue_sqlParser::AFTER - 53))
        | (1ULL << (fugue_sqlParser::ALL - 53))
        | (1ULL << (fugue_sqlParser::ALTER - 53))
        | (1ULL << (fugue_sqlParser::ANALYZE - 53))
        | (1ULL << (fugue_sqlParser::AND - 53))
        | (1ULL << (fugue_sqlParser::ANTI - 53))
        | (1ULL << (fugue_sqlParser::ANY - 53))
        | (1ULL << (fugue_sqlParser::ARCHIVE - 53))
        | (1ULL << (fugue_sqlParser::ARRAY - 53))
        | (1ULL << (fugue_sqlParser::AS - 53))
        | (1ULL << (fugue_sqlParser::ASC - 53))
        | (1ULL << (fugue_sqlParser::AT - 53))
        | (1ULL << (fugue_sqlParser::AUTHORIZATION - 53))
        | (1ULL << (fugue_sqlParser::BETWEEN - 53))
        | (1ULL << (fugue_sqlParser::BOTH - 53))
        | (1ULL << (fugue_sqlParser::BUCKET - 53))
        | (1ULL << (fugue_sqlParser::BUCKETS - 53))
        | (1ULL << (fugue_sqlParser::BY - 53))
        | (1ULL << (fugue_sqlParser::CACHE - 53))
        | (1ULL << (fugue_sqlParser::CASCADE - 53))
        | (1ULL << (fugue_sqlParser::CASE - 53))
        | (1ULL << (fugue_sqlParser::CAST - 53))
        | (1ULL << (fugue_sqlParser::CHANGE - 53))
        | (1ULL << (fugue_sqlParser::CHECK - 53))
        | (1ULL << (fugue_sqlParser::CLEAR - 53))
        | (1ULL << (fugue_sqlParser::CLUSTER - 53))
        | (1ULL << (fugue_sqlParser::CLUSTERED - 53))
        | (1ULL << (fugue_sqlParser::CODEGEN - 53))
        | (1ULL << (fugue_sqlParser::COLLATE - 53))
        | (1ULL << (fugue_sqlParser::COLLECTION - 53))
        | (1ULL << (fugue_sqlParser::COLUMN - 53))
        | (1ULL << (fugue_sqlParser::COLUMNS - 53))
        | (1ULL << (fugue_sqlParser::COMMENT - 53))
        | (1ULL << (fugue_sqlParser::COMMIT - 53))
        | (1ULL << (fugue_sqlParser::COMPACT - 53))
        | (1ULL << (fugue_sqlParser::COMPACTIONS - 53))
        | (1ULL << (fugue_sqlParser::COMPUTE - 53))
        | (1ULL << (fugue_sqlParser::CONCATENATE - 53))
        | (1ULL << (fugue_sqlParser::CONSTRAINT - 53))
        | (1ULL << (fugue_sqlParser::COST - 53))
        | (1ULL << (fugue_sqlParser::CREATE - 53))
        | (1ULL << (fugue_sqlParser::CROSS - 53))
        | (1ULL << (fugue_sqlParser::CUBE - 53))
        | (1ULL << (fugue_sqlParser::CURRENT - 53))
        | (1ULL << (fugue_sqlParser::CURRENT_DATE - 53))
        | (1ULL << (fugue_sqlParser::CURRENT_TIME - 53))
        | (1ULL << (fugue_sqlParser::CURRENT_TIMESTAMP - 53))
        | (1ULL << (fugue_sqlParser::CURRENT_USER - 53))
        | (1ULL << (fugue_sqlParser::DATA - 53))
        | (1ULL << (fugue_sqlParser::DATABASE - 53))
        | (1ULL << (fugue_sqlParser::DATABASES - 53))
        | (1ULL << (fugue_sqlParser::DAY - 53))
        | (1ULL << (fugue_sqlParser::DBPROPERTIES - 53))
        | (1ULL << (fugue_sqlParser::DEFINED - 53))
        | (1ULL << (fugue_sqlParser::DELETE - 53))
        | (1ULL << (fugue_sqlParser::DELIMITED - 53))
        | (1ULL << (fugue_sqlParser::DESC - 53))
        | (1ULL << (fugue_sqlParser::DESCRIBE - 53))
        | (1ULL << (fugue_sqlParser::DFS - 53))
        | (1ULL << (fugue_sqlParser::DIRECTORIES - 53))
        | (1ULL << (fugue_sqlParser::DIRECTORY - 53))
        | (1ULL << (fugue_sqlParser::DISTINCT - 53))
        | (1ULL << (fugue_sqlParser::DISTRIBUTE - 53)))) != 0) || ((((_la - 117) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 117)) & ((1ULL << (fugue_sqlParser::DROP - 117))
        | (1ULL << (fugue_sqlParser::ELSE - 117))
        | (1ULL << (fugue_sqlParser::END - 117))
        | (1ULL << (fugue_sqlParser::ESCAPE - 117))
        | (1ULL << (fugue_sqlParser::ESCAPED - 117))
        | (1ULL << (fugue_sqlParser::EXCEPT - 117))
        | (1ULL << (fugue_sqlParser::EXCHANGE - 117))
        | (1ULL << (fugue_sqlParser::EXISTS - 117))
        | (1ULL << (fugue_sqlParser::EXPLAIN - 117))
        | (1ULL << (fugue_sqlParser::EXPORT - 117))
        | (1ULL << (fugue_sqlParser::EXTENDED - 117))
        | (1ULL << (fugue_sqlParser::EXTERNAL - 117))
        | (1ULL << (fugue_sqlParser::EXTRACT - 117))
        | (1ULL << (fugue_sqlParser::FALSE - 117))
        | (1ULL << (fugue_sqlParser::FETCH - 117))
        | (1ULL << (fugue_sqlParser::FIELDS - 117))
        | (1ULL << (fugue_sqlParser::FILTER - 117))
        | (1ULL << (fugue_sqlParser::FILEFORMAT - 117))
        | (1ULL << (fugue_sqlParser::FIRST - 117))
        | (1ULL << (fugue_sqlParser::FOLLOWING - 117))
        | (1ULL << (fugue_sqlParser::FOR - 117))
        | (1ULL << (fugue_sqlParser::FOREIGN - 117))
        | (1ULL << (fugue_sqlParser::FORMAT - 117))
        | (1ULL << (fugue_sqlParser::FORMATTED - 117))
        | (1ULL << (fugue_sqlParser::FROM - 117))
        | (1ULL << (fugue_sqlParser::FULL - 117))
        | (1ULL << (fugue_sqlParser::FUNCTION - 117))
        | (1ULL << (fugue_sqlParser::FUNCTIONS - 117))
        | (1ULL << (fugue_sqlParser::GLOBAL - 117))
        | (1ULL << (fugue_sqlParser::GRANT - 117))
        | (1ULL << (fugue_sqlParser::GROUP - 117))
        | (1ULL << (fugue_sqlParser::GROUPING - 117))
        | (1ULL << (fugue_sqlParser::HAVING - 117))
        | (1ULL << (fugue_sqlParser::HOUR - 117))
        | (1ULL << (fugue_sqlParser::IF - 117))
        | (1ULL << (fugue_sqlParser::IGNORE - 117))
        | (1ULL << (fugue_sqlParser::IMPORT - 117))
        | (1ULL << (fugue_sqlParser::IN - 117))
        | (1ULL << (fugue_sqlParser::INDEX - 117))
        | (1ULL << (fugue_sqlParser::INDEXES - 117))
        | (1ULL << (fugue_sqlParser::INNER - 117))
        | (1ULL << (fugue_sqlParser::INPATH - 117))
        | (1ULL << (fugue_sqlParser::INPUTFORMAT - 117))
        | (1ULL << (fugue_sqlParser::INSERT - 117))
        | (1ULL << (fugue_sqlParser::INTERSECT - 117))
        | (1ULL << (fugue_sqlParser::INTERVAL - 117))
        | (1ULL << (fugue_sqlParser::INTO - 117))
        | (1ULL << (fugue_sqlParser::IS - 117))
        | (1ULL << (fugue_sqlParser::ITEMS - 117))
        | (1ULL << (fugue_sqlParser::JOIN - 117))
        | (1ULL << (fugue_sqlParser::KEYS - 117))
        | (1ULL << (fugue_sqlParser::LAST - 117))
        | (1ULL << (fugue_sqlParser::LATERAL - 117))
        | (1ULL << (fugue_sqlParser::LAZY - 117))
        | (1ULL << (fugue_sqlParser::LEADING - 117))
        | (1ULL << (fugue_sqlParser::LEFT - 117))
        | (1ULL << (fugue_sqlParser::LIKE - 117))
        | (1ULL << (fugue_sqlParser::LIMIT - 117))
        | (1ULL << (fugue_sqlParser::LINES - 117))
        | (1ULL << (fugue_sqlParser::LIST - 117))
        | (1ULL << (fugue_sqlParser::LOAD - 117))
        | (1ULL << (fugue_sqlParser::LOCAL - 117))
        | (1ULL << (fugue_sqlParser::LOCATION - 117))
        | (1ULL << (fugue_sqlParser::LOCK - 117)))) != 0) || ((((_la - 181) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 181)) & ((1ULL << (fugue_sqlParser::LOCKS - 181))
        | (1ULL << (fugue_sqlParser::LOGICAL - 181))
        | (1ULL << (fugue_sqlParser::MACRO - 181))
        | (1ULL << (fugue_sqlParser::MAP - 181))
        | (1ULL << (fugue_sqlParser::MATCHED - 181))
        | (1ULL << (fugue_sqlParser::MERGE - 181))
        | (1ULL << (fugue_sqlParser::MINUTE - 181))
        | (1ULL << (fugue_sqlParser::MONTH - 181))
        | (1ULL << (fugue_sqlParser::MSCK - 181))
        | (1ULL << (fugue_sqlParser::NAMESPACE - 181))
        | (1ULL << (fugue_sqlParser::NAMESPACES - 181))
        | (1ULL << (fugue_sqlParser::NATURAL - 181))
        | (1ULL << (fugue_sqlParser::NO - 181))
        | (1ULL << (fugue_sqlParser::NOT - 181))
        | (1ULL << (fugue_sqlParser::THENULL - 181))
        | (1ULL << (fugue_sqlParser::THENULLS - 181))
        | (1ULL << (fugue_sqlParser::OF - 181))
        | (1ULL << (fugue_sqlParser::ON - 181))
        | (1ULL << (fugue_sqlParser::ONLY - 181))
        | (1ULL << (fugue_sqlParser::OPTION - 181))
        | (1ULL << (fugue_sqlParser::OPTIONS - 181))
        | (1ULL << (fugue_sqlParser::OR - 181))
        | (1ULL << (fugue_sqlParser::ORDER - 181))
        | (1ULL << (fugue_sqlParser::OUT - 181))
        | (1ULL << (fugue_sqlParser::OUTER - 181))
        | (1ULL << (fugue_sqlParser::OUTPUTFORMAT - 181))
        | (1ULL << (fugue_sqlParser::OVER - 181))
        | (1ULL << (fugue_sqlParser::OVERLAPS - 181))
        | (1ULL << (fugue_sqlParser::OVERLAY - 181))
        | (1ULL << (fugue_sqlParser::OVERWRITE - 181))
        | (1ULL << (fugue_sqlParser::PARTITION - 181))
        | (1ULL << (fugue_sqlParser::PARTITIONED - 181))
        | (1ULL << (fugue_sqlParser::PARTITIONS - 181))
        | (1ULL << (fugue_sqlParser::PERCENTLIT - 181))
        | (1ULL << (fugue_sqlParser::PIVOT - 181))
        | (1ULL << (fugue_sqlParser::PLACING - 181))
        | (1ULL << (fugue_sqlParser::POSITION - 181))
        | (1ULL << (fugue_sqlParser::PRECEDING - 181))
        | (1ULL << (fugue_sqlParser::PRIMARY - 181))
        | (1ULL << (fugue_sqlParser::PRINCIPALS - 181))
        | (1ULL << (fugue_sqlParser::PROPERTIES - 181))
        | (1ULL << (fugue_sqlParser::PURGE - 181))
        | (1ULL << (fugue_sqlParser::QUERY - 181))
        | (1ULL << (fugue_sqlParser::RANGE - 181))
        | (1ULL << (fugue_sqlParser::RECORDREADER - 181))
        | (1ULL << (fugue_sqlParser::RECORDWRITER - 181))
        | (1ULL << (fugue_sqlParser::RECOVER - 181))
        | (1ULL << (fugue_sqlParser::REDUCE - 181))
        | (1ULL << (fugue_sqlParser::REFERENCES - 181))
        | (1ULL << (fugue_sqlParser::REFRESH - 181))
        | (1ULL << (fugue_sqlParser::RENAME - 181))
        | (1ULL << (fugue_sqlParser::REPAIR - 181))
        | (1ULL << (fugue_sqlParser::REPLACE - 181))
        | (1ULL << (fugue_sqlParser::RESET - 181))
        | (1ULL << (fugue_sqlParser::RESTRICT - 181))
        | (1ULL << (fugue_sqlParser::REVOKE - 181))
        | (1ULL << (fugue_sqlParser::RIGHT - 181))
        | (1ULL << (fugue_sqlParser::RLIKE - 181))
        | (1ULL << (fugue_sqlParser::ROLE - 181))
        | (1ULL << (fugue_sqlParser::ROLES - 181))
        | (1ULL << (fugue_sqlParser::ROLLBACK - 181))
        | (1ULL << (fugue_sqlParser::ROLLUP - 181))
        | (1ULL << (fugue_sqlParser::ROW - 181))
        | (1ULL << (fugue_sqlParser::ROWS - 181)))) != 0) || ((((_la - 245) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 245)) & ((1ULL << (fugue_sqlParser::SCHEMA - 245))
        | (1ULL << (fugue_sqlParser::SECOND - 245))
        | (1ULL << (fugue_sqlParser::SELECT - 245))
        | (1ULL << (fugue_sqlParser::SEMI - 245))
        | (1ULL << (fugue_sqlParser::SEPARATED - 245))
        | (1ULL << (fugue_sqlParser::SERDE - 245))
        | (1ULL << (fugue_sqlParser::SERDEPROPERTIES - 245))
        | (1ULL << (fugue_sqlParser::SESSION_USER - 245))
        | (1ULL << (fugue_sqlParser::SET - 245))
        | (1ULL << (fugue_sqlParser::SETMINUS - 245))
        | (1ULL << (fugue_sqlParser::SETS - 245))
        | (1ULL << (fugue_sqlParser::SHOW - 245))
        | (1ULL << (fugue_sqlParser::SKEWED - 245))
        | (1ULL << (fugue_sqlParser::SOME - 245))
        | (1ULL << (fugue_sqlParser::SORT - 245))
        | (1ULL << (fugue_sqlParser::SORTED - 245))
        | (1ULL << (fugue_sqlParser::START - 245))
        | (1ULL << (fugue_sqlParser::STATISTICS - 245))
        | (1ULL << (fugue_sqlParser::STORED - 245))
        | (1ULL << (fugue_sqlParser::STRATIFY - 245))
        | (1ULL << (fugue_sqlParser::STRUCT - 245))
        | (1ULL << (fugue_sqlParser::SUBSTR - 245))
        | (1ULL << (fugue_sqlParser::SUBSTRING - 245))
        | (1ULL << (fugue_sqlParser::TABLE - 245))
        | (1ULL << (fugue_sqlParser::TABLES - 245))
        | (1ULL << (fugue_sqlParser::TABLESAMPLE - 245))
        | (1ULL << (fugue_sqlParser::TBLPROPERTIES - 245))
        | (1ULL << (fugue_sqlParser::TEMPORARY - 245))
        | (1ULL << (fugue_sqlParser::TERMINATED - 245))
        | (1ULL << (fugue_sqlParser::THEN - 245))
        | (1ULL << (fugue_sqlParser::TO - 245))
        | (1ULL << (fugue_sqlParser::TOUCH - 245))
        | (1ULL << (fugue_sqlParser::TRAILING - 245))
        | (1ULL << (fugue_sqlParser::TRANSACTION - 245))
        | (1ULL << (fugue_sqlParser::TRANSACTIONS - 245))
        | (1ULL << (fugue_sqlParser::TRANSFORM - 245))
        | (1ULL << (fugue_sqlParser::TRIM - 245))
        | (1ULL << (fugue_sqlParser::TRUE - 245))
        | (1ULL << (fugue_sqlParser::TRUNCATE - 245))
        | (1ULL << (fugue_sqlParser::TYPE - 245))
        | (1ULL << (fugue_sqlParser::UNARCHIVE - 245))
        | (1ULL << (fugue_sqlParser::UNBOUNDED - 245))
        | (1ULL << (fugue_sqlParser::UNCACHE - 245))
        | (1ULL << (fugue_sqlParser::UNION - 245))
        | (1ULL << (fugue_sqlParser::UNIQUE - 245))
        | (1ULL << (fugue_sqlParser::UNKNOWN - 245))
        | (1ULL << (fugue_sqlParser::UNLOCK - 245))
        | (1ULL << (fugue_sqlParser::UNSET - 245))
        | (1ULL << (fugue_sqlParser::UPDATE - 245))
        | (1ULL << (fugue_sqlParser::USE - 245))
        | (1ULL << (fugue_sqlParser::USER - 245))
        | (1ULL << (fugue_sqlParser::USING - 245))
        | (1ULL << (fugue_sqlParser::VALUES - 245))
        | (1ULL << (fugue_sqlParser::VIEW - 245))
        | (1ULL << (fugue_sqlParser::VIEWS - 245))
        | (1ULL << (fugue_sqlParser::WHEN - 245))
        | (1ULL << (fugue_sqlParser::WHERE - 245))
        | (1ULL << (fugue_sqlParser::WINDOW - 245))
        | (1ULL << (fugue_sqlParser::WITH - 245))
        | (1ULL << (fugue_sqlParser::YEAR - 245)))) != 0) || ((((_la - 319) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 319)) & ((1ULL << (fugue_sqlParser::DIV - 319))
        | (1ULL << (fugue_sqlParser::STRING - 319))
        | (1ULL << (fugue_sqlParser::IDENTIFIER - 319))
        | (1ULL << (fugue_sqlParser::BACKQUOTED_IDENTIFIER - 319)))) != 0)) {
        setState(1679);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 205, _ctx)) {
        case 1: {
          setState(1678);
          match(fugue_sqlParser::LIKE);
          break;
        }

        default:
          break;
        }
        setState(1683);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case fugue_sqlParser::ADD:
          case fugue_sqlParser::AFTER:
          case fugue_sqlParser::ALL:
          case fugue_sqlParser::ALTER:
          case fugue_sqlParser::ANALYZE:
          case fugue_sqlParser::AND:
          case fugue_sqlParser::ANTI:
          case fugue_sqlParser::ANY:
          case fugue_sqlParser::ARCHIVE:
          case fugue_sqlParser::ARRAY:
          case fugue_sqlParser::AS:
          case fugue_sqlParser::ASC:
          case fugue_sqlParser::AT:
          case fugue_sqlParser::AUTHORIZATION:
          case fugue_sqlParser::BETWEEN:
          case fugue_sqlParser::BOTH:
          case fugue_sqlParser::BUCKET:
          case fugue_sqlParser::BUCKETS:
          case fugue_sqlParser::BY:
          case fugue_sqlParser::CACHE:
          case fugue_sqlParser::CASCADE:
          case fugue_sqlParser::CASE:
          case fugue_sqlParser::CAST:
          case fugue_sqlParser::CHANGE:
          case fugue_sqlParser::CHECK:
          case fugue_sqlParser::CLEAR:
          case fugue_sqlParser::CLUSTER:
          case fugue_sqlParser::CLUSTERED:
          case fugue_sqlParser::CODEGEN:
          case fugue_sqlParser::COLLATE:
          case fugue_sqlParser::COLLECTION:
          case fugue_sqlParser::COLUMN:
          case fugue_sqlParser::COLUMNS:
          case fugue_sqlParser::COMMENT:
          case fugue_sqlParser::COMMIT:
          case fugue_sqlParser::COMPACT:
          case fugue_sqlParser::COMPACTIONS:
          case fugue_sqlParser::COMPUTE:
          case fugue_sqlParser::CONCATENATE:
          case fugue_sqlParser::CONSTRAINT:
          case fugue_sqlParser::COST:
          case fugue_sqlParser::CREATE:
          case fugue_sqlParser::CROSS:
          case fugue_sqlParser::CUBE:
          case fugue_sqlParser::CURRENT:
          case fugue_sqlParser::CURRENT_DATE:
          case fugue_sqlParser::CURRENT_TIME:
          case fugue_sqlParser::CURRENT_TIMESTAMP:
          case fugue_sqlParser::CURRENT_USER:
          case fugue_sqlParser::DATA:
          case fugue_sqlParser::DATABASE:
          case fugue_sqlParser::DATABASES:
          case fugue_sqlParser::DAY:
          case fugue_sqlParser::DBPROPERTIES:
          case fugue_sqlParser::DEFINED:
          case fugue_sqlParser::DELETE:
          case fugue_sqlParser::DELIMITED:
          case fugue_sqlParser::DESC:
          case fugue_sqlParser::DESCRIBE:
          case fugue_sqlParser::DFS:
          case fugue_sqlParser::DIRECTORIES:
          case fugue_sqlParser::DIRECTORY:
          case fugue_sqlParser::DISTINCT:
          case fugue_sqlParser::DISTRIBUTE:
          case fugue_sqlParser::DROP:
          case fugue_sqlParser::ELSE:
          case fugue_sqlParser::END:
          case fugue_sqlParser::ESCAPE:
          case fugue_sqlParser::ESCAPED:
          case fugue_sqlParser::EXCEPT:
          case fugue_sqlParser::EXCHANGE:
          case fugue_sqlParser::EXISTS:
          case fugue_sqlParser::EXPLAIN:
          case fugue_sqlParser::EXPORT:
          case fugue_sqlParser::EXTENDED:
          case fugue_sqlParser::EXTERNAL:
          case fugue_sqlParser::EXTRACT:
          case fugue_sqlParser::FALSE:
          case fugue_sqlParser::FETCH:
          case fugue_sqlParser::FIELDS:
          case fugue_sqlParser::FILTER:
          case fugue_sqlParser::FILEFORMAT:
          case fugue_sqlParser::FIRST:
          case fugue_sqlParser::FOLLOWING:
          case fugue_sqlParser::FOR:
          case fugue_sqlParser::FOREIGN:
          case fugue_sqlParser::FORMAT:
          case fugue_sqlParser::FORMATTED:
          case fugue_sqlParser::FROM:
          case fugue_sqlParser::FULL:
          case fugue_sqlParser::FUNCTION:
          case fugue_sqlParser::FUNCTIONS:
          case fugue_sqlParser::GLOBAL:
          case fugue_sqlParser::GRANT:
          case fugue_sqlParser::GROUP:
          case fugue_sqlParser::GROUPING:
          case fugue_sqlParser::HAVING:
          case fugue_sqlParser::HOUR:
          case fugue_sqlParser::IF:
          case fugue_sqlParser::IGNORE:
          case fugue_sqlParser::IMPORT:
          case fugue_sqlParser::IN:
          case fugue_sqlParser::INDEX:
          case fugue_sqlParser::INDEXES:
          case fugue_sqlParser::INNER:
          case fugue_sqlParser::INPATH:
          case fugue_sqlParser::INPUTFORMAT:
          case fugue_sqlParser::INSERT:
          case fugue_sqlParser::INTERSECT:
          case fugue_sqlParser::INTERVAL:
          case fugue_sqlParser::INTO:
          case fugue_sqlParser::IS:
          case fugue_sqlParser::ITEMS:
          case fugue_sqlParser::JOIN:
          case fugue_sqlParser::KEYS:
          case fugue_sqlParser::LAST:
          case fugue_sqlParser::LATERAL:
          case fugue_sqlParser::LAZY:
          case fugue_sqlParser::LEADING:
          case fugue_sqlParser::LEFT:
          case fugue_sqlParser::LIKE:
          case fugue_sqlParser::LIMIT:
          case fugue_sqlParser::LINES:
          case fugue_sqlParser::LIST:
          case fugue_sqlParser::LOAD:
          case fugue_sqlParser::LOCAL:
          case fugue_sqlParser::LOCATION:
          case fugue_sqlParser::LOCK:
          case fugue_sqlParser::LOCKS:
          case fugue_sqlParser::LOGICAL:
          case fugue_sqlParser::MACRO:
          case fugue_sqlParser::MAP:
          case fugue_sqlParser::MATCHED:
          case fugue_sqlParser::MERGE:
          case fugue_sqlParser::MINUTE:
          case fugue_sqlParser::MONTH:
          case fugue_sqlParser::MSCK:
          case fugue_sqlParser::NAMESPACE:
          case fugue_sqlParser::NAMESPACES:
          case fugue_sqlParser::NATURAL:
          case fugue_sqlParser::NO:
          case fugue_sqlParser::NOT:
          case fugue_sqlParser::THENULL:
          case fugue_sqlParser::THENULLS:
          case fugue_sqlParser::OF:
          case fugue_sqlParser::ON:
          case fugue_sqlParser::ONLY:
          case fugue_sqlParser::OPTION:
          case fugue_sqlParser::OPTIONS:
          case fugue_sqlParser::OR:
          case fugue_sqlParser::ORDER:
          case fugue_sqlParser::OUT:
          case fugue_sqlParser::OUTER:
          case fugue_sqlParser::OUTPUTFORMAT:
          case fugue_sqlParser::OVER:
          case fugue_sqlParser::OVERLAPS:
          case fugue_sqlParser::OVERLAY:
          case fugue_sqlParser::OVERWRITE:
          case fugue_sqlParser::PARTITION:
          case fugue_sqlParser::PARTITIONED:
          case fugue_sqlParser::PARTITIONS:
          case fugue_sqlParser::PERCENTLIT:
          case fugue_sqlParser::PIVOT:
          case fugue_sqlParser::PLACING:
          case fugue_sqlParser::POSITION:
          case fugue_sqlParser::PRECEDING:
          case fugue_sqlParser::PRIMARY:
          case fugue_sqlParser::PRINCIPALS:
          case fugue_sqlParser::PROPERTIES:
          case fugue_sqlParser::PURGE:
          case fugue_sqlParser::QUERY:
          case fugue_sqlParser::RANGE:
          case fugue_sqlParser::RECORDREADER:
          case fugue_sqlParser::RECORDWRITER:
          case fugue_sqlParser::RECOVER:
          case fugue_sqlParser::REDUCE:
          case fugue_sqlParser::REFERENCES:
          case fugue_sqlParser::REFRESH:
          case fugue_sqlParser::RENAME:
          case fugue_sqlParser::REPAIR:
          case fugue_sqlParser::REPLACE:
          case fugue_sqlParser::RESET:
          case fugue_sqlParser::RESTRICT:
          case fugue_sqlParser::REVOKE:
          case fugue_sqlParser::RIGHT:
          case fugue_sqlParser::RLIKE:
          case fugue_sqlParser::ROLE:
          case fugue_sqlParser::ROLES:
          case fugue_sqlParser::ROLLBACK:
          case fugue_sqlParser::ROLLUP:
          case fugue_sqlParser::ROW:
          case fugue_sqlParser::ROWS:
          case fugue_sqlParser::SCHEMA:
          case fugue_sqlParser::SECOND:
          case fugue_sqlParser::SELECT:
          case fugue_sqlParser::SEMI:
          case fugue_sqlParser::SEPARATED:
          case fugue_sqlParser::SERDE:
          case fugue_sqlParser::SERDEPROPERTIES:
          case fugue_sqlParser::SESSION_USER:
          case fugue_sqlParser::SET:
          case fugue_sqlParser::SETMINUS:
          case fugue_sqlParser::SETS:
          case fugue_sqlParser::SHOW:
          case fugue_sqlParser::SKEWED:
          case fugue_sqlParser::SOME:
          case fugue_sqlParser::SORT:
          case fugue_sqlParser::SORTED:
          case fugue_sqlParser::START:
          case fugue_sqlParser::STATISTICS:
          case fugue_sqlParser::STORED:
          case fugue_sqlParser::STRATIFY:
          case fugue_sqlParser::STRUCT:
          case fugue_sqlParser::SUBSTR:
          case fugue_sqlParser::SUBSTRING:
          case fugue_sqlParser::TABLE:
          case fugue_sqlParser::TABLES:
          case fugue_sqlParser::TABLESAMPLE:
          case fugue_sqlParser::TBLPROPERTIES:
          case fugue_sqlParser::TEMPORARY:
          case fugue_sqlParser::TERMINATED:
          case fugue_sqlParser::THEN:
          case fugue_sqlParser::TO:
          case fugue_sqlParser::TOUCH:
          case fugue_sqlParser::TRAILING:
          case fugue_sqlParser::TRANSACTION:
          case fugue_sqlParser::TRANSACTIONS:
          case fugue_sqlParser::TRANSFORM:
          case fugue_sqlParser::TRIM:
          case fugue_sqlParser::TRUE:
          case fugue_sqlParser::TRUNCATE:
          case fugue_sqlParser::TYPE:
          case fugue_sqlParser::UNARCHIVE:
          case fugue_sqlParser::UNBOUNDED:
          case fugue_sqlParser::UNCACHE:
          case fugue_sqlParser::UNION:
          case fugue_sqlParser::UNIQUE:
          case fugue_sqlParser::UNKNOWN:
          case fugue_sqlParser::UNLOCK:
          case fugue_sqlParser::UNSET:
          case fugue_sqlParser::UPDATE:
          case fugue_sqlParser::USE:
          case fugue_sqlParser::USER:
          case fugue_sqlParser::USING:
          case fugue_sqlParser::VALUES:
          case fugue_sqlParser::VIEW:
          case fugue_sqlParser::VIEWS:
          case fugue_sqlParser::WHEN:
          case fugue_sqlParser::WHERE:
          case fugue_sqlParser::WINDOW:
          case fugue_sqlParser::WITH:
          case fugue_sqlParser::YEAR:
          case fugue_sqlParser::DIV:
          case fugue_sqlParser::IDENTIFIER:
          case fugue_sqlParser::BACKQUOTED_IDENTIFIER: {
            setState(1681);
            multipartIdentifier();
            break;
          }

          case fugue_sqlParser::STRING: {
            setState(1682);
            antlrcpp::downCast<ShowFunctionsContext *>(_localctx)->pattern = match(fugue_sqlParser::STRING);
            break;
          }

        default:
          throw NoViableAltException(this);
        }
      }
      break;
    }

    case 47: {
      _localctx = _tracker.createInstance<fugue_sqlParser::ShowCreateTableContext>(_localctx);
      enterOuterAlt(_localctx, 47);
      setState(1687);
      match(fugue_sqlParser::SHOW);
      setState(1688);
      match(fugue_sqlParser::CREATE);
      setState(1689);
      match(fugue_sqlParser::TABLE);
      setState(1690);
      multipartIdentifier();
      setState(1693);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::AS) {
        setState(1691);
        match(fugue_sqlParser::AS);
        setState(1692);
        match(fugue_sqlParser::SERDE);
      }
      break;
    }

    case 48: {
      _localctx = _tracker.createInstance<fugue_sqlParser::ShowCurrentNamespaceContext>(_localctx);
      enterOuterAlt(_localctx, 48);
      setState(1695);
      match(fugue_sqlParser::SHOW);
      setState(1696);
      match(fugue_sqlParser::CURRENT);
      setState(1697);
      match(fugue_sqlParser::NAMESPACE);
      break;
    }

    case 49: {
      _localctx = _tracker.createInstance<fugue_sqlParser::DescribeFunctionContext>(_localctx);
      enterOuterAlt(_localctx, 49);
      setState(1698);
      _la = _input->LA(1);
      if (!(_la == fugue_sqlParser::DESC

      || _la == fugue_sqlParser::DESCRIBE)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(1699);
      match(fugue_sqlParser::FUNCTION);
      setState(1701);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 209, _ctx)) {
      case 1: {
        setState(1700);
        match(fugue_sqlParser::EXTENDED);
        break;
      }

      default:
        break;
      }
      setState(1703);
      describeFuncName();
      break;
    }

    case 50: {
      _localctx = _tracker.createInstance<fugue_sqlParser::DescribeNamespaceContext>(_localctx);
      enterOuterAlt(_localctx, 50);
      setState(1704);
      _la = _input->LA(1);
      if (!(_la == fugue_sqlParser::DESC

      || _la == fugue_sqlParser::DESCRIBE)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(1705);
      theNamespace();
      setState(1707);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 210, _ctx)) {
      case 1: {
        setState(1706);
        match(fugue_sqlParser::EXTENDED);
        break;
      }

      default:
        break;
      }
      setState(1709);
      multipartIdentifier();
      break;
    }

    case 51: {
      _localctx = _tracker.createInstance<fugue_sqlParser::DescribeRelationContext>(_localctx);
      enterOuterAlt(_localctx, 51);
      setState(1711);
      _la = _input->LA(1);
      if (!(_la == fugue_sqlParser::DESC

      || _la == fugue_sqlParser::DESCRIBE)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(1713);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 211, _ctx)) {
      case 1: {
        setState(1712);
        match(fugue_sqlParser::TABLE);
        break;
      }

      default:
        break;
      }
      setState(1716);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 212, _ctx)) {
      case 1: {
        setState(1715);
        antlrcpp::downCast<DescribeRelationContext *>(_localctx)->option = _input->LT(1);
        _la = _input->LA(1);
        if (!(_la == fugue_sqlParser::EXTENDED

        || _la == fugue_sqlParser::FORMATTED)) {
          antlrcpp::downCast<DescribeRelationContext *>(_localctx)->option = _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      default:
        break;
      }
      setState(1718);
      multipartIdentifier();
      setState(1720);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 213, _ctx)) {
      case 1: {
        setState(1719);
        partitionSpec();
        break;
      }

      default:
        break;
      }
      setState(1723);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (((((_la - 53) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 53)) & ((1ULL << (fugue_sqlParser::ADD - 53))
        | (1ULL << (fugue_sqlParser::AFTER - 53))
        | (1ULL << (fugue_sqlParser::ALL - 53))
        | (1ULL << (fugue_sqlParser::ALTER - 53))
        | (1ULL << (fugue_sqlParser::ANALYZE - 53))
        | (1ULL << (fugue_sqlParser::AND - 53))
        | (1ULL << (fugue_sqlParser::ANTI - 53))
        | (1ULL << (fugue_sqlParser::ANY - 53))
        | (1ULL << (fugue_sqlParser::ARCHIVE - 53))
        | (1ULL << (fugue_sqlParser::ARRAY - 53))
        | (1ULL << (fugue_sqlParser::AS - 53))
        | (1ULL << (fugue_sqlParser::ASC - 53))
        | (1ULL << (fugue_sqlParser::AT - 53))
        | (1ULL << (fugue_sqlParser::AUTHORIZATION - 53))
        | (1ULL << (fugue_sqlParser::BETWEEN - 53))
        | (1ULL << (fugue_sqlParser::BOTH - 53))
        | (1ULL << (fugue_sqlParser::BUCKET - 53))
        | (1ULL << (fugue_sqlParser::BUCKETS - 53))
        | (1ULL << (fugue_sqlParser::BY - 53))
        | (1ULL << (fugue_sqlParser::CACHE - 53))
        | (1ULL << (fugue_sqlParser::CASCADE - 53))
        | (1ULL << (fugue_sqlParser::CASE - 53))
        | (1ULL << (fugue_sqlParser::CAST - 53))
        | (1ULL << (fugue_sqlParser::CHANGE - 53))
        | (1ULL << (fugue_sqlParser::CHECK - 53))
        | (1ULL << (fugue_sqlParser::CLEAR - 53))
        | (1ULL << (fugue_sqlParser::CLUSTER - 53))
        | (1ULL << (fugue_sqlParser::CLUSTERED - 53))
        | (1ULL << (fugue_sqlParser::CODEGEN - 53))
        | (1ULL << (fugue_sqlParser::COLLATE - 53))
        | (1ULL << (fugue_sqlParser::COLLECTION - 53))
        | (1ULL << (fugue_sqlParser::COLUMN - 53))
        | (1ULL << (fugue_sqlParser::COLUMNS - 53))
        | (1ULL << (fugue_sqlParser::COMMENT - 53))
        | (1ULL << (fugue_sqlParser::COMMIT - 53))
        | (1ULL << (fugue_sqlParser::COMPACT - 53))
        | (1ULL << (fugue_sqlParser::COMPACTIONS - 53))
        | (1ULL << (fugue_sqlParser::COMPUTE - 53))
        | (1ULL << (fugue_sqlParser::CONCATENATE - 53))
        | (1ULL << (fugue_sqlParser::CONSTRAINT - 53))
        | (1ULL << (fugue_sqlParser::COST - 53))
        | (1ULL << (fugue_sqlParser::CREATE - 53))
        | (1ULL << (fugue_sqlParser::CROSS - 53))
        | (1ULL << (fugue_sqlParser::CUBE - 53))
        | (1ULL << (fugue_sqlParser::CURRENT - 53))
        | (1ULL << (fugue_sqlParser::CURRENT_DATE - 53))
        | (1ULL << (fugue_sqlParser::CURRENT_TIME - 53))
        | (1ULL << (fugue_sqlParser::CURRENT_TIMESTAMP - 53))
        | (1ULL << (fugue_sqlParser::CURRENT_USER - 53))
        | (1ULL << (fugue_sqlParser::DATA - 53))
        | (1ULL << (fugue_sqlParser::DATABASE - 53))
        | (1ULL << (fugue_sqlParser::DATABASES - 53))
        | (1ULL << (fugue_sqlParser::DAY - 53))
        | (1ULL << (fugue_sqlParser::DBPROPERTIES - 53))
        | (1ULL << (fugue_sqlParser::DEFINED - 53))
        | (1ULL << (fugue_sqlParser::DELETE - 53))
        | (1ULL << (fugue_sqlParser::DELIMITED - 53))
        | (1ULL << (fugue_sqlParser::DESC - 53))
        | (1ULL << (fugue_sqlParser::DESCRIBE - 53))
        | (1ULL << (fugue_sqlParser::DFS - 53))
        | (1ULL << (fugue_sqlParser::DIRECTORIES - 53))
        | (1ULL << (fugue_sqlParser::DIRECTORY - 53))
        | (1ULL << (fugue_sqlParser::DISTINCT - 53))
        | (1ULL << (fugue_sqlParser::DISTRIBUTE - 53)))) != 0) || ((((_la - 117) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 117)) & ((1ULL << (fugue_sqlParser::DROP - 117))
        | (1ULL << (fugue_sqlParser::ELSE - 117))
        | (1ULL << (fugue_sqlParser::END - 117))
        | (1ULL << (fugue_sqlParser::ESCAPE - 117))
        | (1ULL << (fugue_sqlParser::ESCAPED - 117))
        | (1ULL << (fugue_sqlParser::EXCEPT - 117))
        | (1ULL << (fugue_sqlParser::EXCHANGE - 117))
        | (1ULL << (fugue_sqlParser::EXISTS - 117))
        | (1ULL << (fugue_sqlParser::EXPLAIN - 117))
        | (1ULL << (fugue_sqlParser::EXPORT - 117))
        | (1ULL << (fugue_sqlParser::EXTENDED - 117))
        | (1ULL << (fugue_sqlParser::EXTERNAL - 117))
        | (1ULL << (fugue_sqlParser::EXTRACT - 117))
        | (1ULL << (fugue_sqlParser::FALSE - 117))
        | (1ULL << (fugue_sqlParser::FETCH - 117))
        | (1ULL << (fugue_sqlParser::FIELDS - 117))
        | (1ULL << (fugue_sqlParser::FILTER - 117))
        | (1ULL << (fugue_sqlParser::FILEFORMAT - 117))
        | (1ULL << (fugue_sqlParser::FIRST - 117))
        | (1ULL << (fugue_sqlParser::FOLLOWING - 117))
        | (1ULL << (fugue_sqlParser::FOR - 117))
        | (1ULL << (fugue_sqlParser::FOREIGN - 117))
        | (1ULL << (fugue_sqlParser::FORMAT - 117))
        | (1ULL << (fugue_sqlParser::FORMATTED - 117))
        | (1ULL << (fugue_sqlParser::FROM - 117))
        | (1ULL << (fugue_sqlParser::FULL - 117))
        | (1ULL << (fugue_sqlParser::FUNCTION - 117))
        | (1ULL << (fugue_sqlParser::FUNCTIONS - 117))
        | (1ULL << (fugue_sqlParser::GLOBAL - 117))
        | (1ULL << (fugue_sqlParser::GRANT - 117))
        | (1ULL << (fugue_sqlParser::GROUP - 117))
        | (1ULL << (fugue_sqlParser::GROUPING - 117))
        | (1ULL << (fugue_sqlParser::HAVING - 117))
        | (1ULL << (fugue_sqlParser::HOUR - 117))
        | (1ULL << (fugue_sqlParser::IF - 117))
        | (1ULL << (fugue_sqlParser::IGNORE - 117))
        | (1ULL << (fugue_sqlParser::IMPORT - 117))
        | (1ULL << (fugue_sqlParser::IN - 117))
        | (1ULL << (fugue_sqlParser::INDEX - 117))
        | (1ULL << (fugue_sqlParser::INDEXES - 117))
        | (1ULL << (fugue_sqlParser::INNER - 117))
        | (1ULL << (fugue_sqlParser::INPATH - 117))
        | (1ULL << (fugue_sqlParser::INPUTFORMAT - 117))
        | (1ULL << (fugue_sqlParser::INSERT - 117))
        | (1ULL << (fugue_sqlParser::INTERSECT - 117))
        | (1ULL << (fugue_sqlParser::INTERVAL - 117))
        | (1ULL << (fugue_sqlParser::INTO - 117))
        | (1ULL << (fugue_sqlParser::IS - 117))
        | (1ULL << (fugue_sqlParser::ITEMS - 117))
        | (1ULL << (fugue_sqlParser::JOIN - 117))
        | (1ULL << (fugue_sqlParser::KEYS - 117))
        | (1ULL << (fugue_sqlParser::LAST - 117))
        | (1ULL << (fugue_sqlParser::LATERAL - 117))
        | (1ULL << (fugue_sqlParser::LAZY - 117))
        | (1ULL << (fugue_sqlParser::LEADING - 117))
        | (1ULL << (fugue_sqlParser::LEFT - 117))
        | (1ULL << (fugue_sqlParser::LIKE - 117))
        | (1ULL << (fugue_sqlParser::LIMIT - 117))
        | (1ULL << (fugue_sqlParser::LINES - 117))
        | (1ULL << (fugue_sqlParser::LIST - 117))
        | (1ULL << (fugue_sqlParser::LOAD - 117))
        | (1ULL << (fugue_sqlParser::LOCAL - 117))
        | (1ULL << (fugue_sqlParser::LOCATION - 117))
        | (1ULL << (fugue_sqlParser::LOCK - 117)))) != 0) || ((((_la - 181) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 181)) & ((1ULL << (fugue_sqlParser::LOCKS - 181))
        | (1ULL << (fugue_sqlParser::LOGICAL - 181))
        | (1ULL << (fugue_sqlParser::MACRO - 181))
        | (1ULL << (fugue_sqlParser::MAP - 181))
        | (1ULL << (fugue_sqlParser::MATCHED - 181))
        | (1ULL << (fugue_sqlParser::MERGE - 181))
        | (1ULL << (fugue_sqlParser::MINUTE - 181))
        | (1ULL << (fugue_sqlParser::MONTH - 181))
        | (1ULL << (fugue_sqlParser::MSCK - 181))
        | (1ULL << (fugue_sqlParser::NAMESPACE - 181))
        | (1ULL << (fugue_sqlParser::NAMESPACES - 181))
        | (1ULL << (fugue_sqlParser::NATURAL - 181))
        | (1ULL << (fugue_sqlParser::NO - 181))
        | (1ULL << (fugue_sqlParser::NOT - 181))
        | (1ULL << (fugue_sqlParser::THENULL - 181))
        | (1ULL << (fugue_sqlParser::THENULLS - 181))
        | (1ULL << (fugue_sqlParser::OF - 181))
        | (1ULL << (fugue_sqlParser::ON - 181))
        | (1ULL << (fugue_sqlParser::ONLY - 181))
        | (1ULL << (fugue_sqlParser::OPTION - 181))
        | (1ULL << (fugue_sqlParser::OPTIONS - 181))
        | (1ULL << (fugue_sqlParser::OR - 181))
        | (1ULL << (fugue_sqlParser::ORDER - 181))
        | (1ULL << (fugue_sqlParser::OUT - 181))
        | (1ULL << (fugue_sqlParser::OUTER - 181))
        | (1ULL << (fugue_sqlParser::OUTPUTFORMAT - 181))
        | (1ULL << (fugue_sqlParser::OVER - 181))
        | (1ULL << (fugue_sqlParser::OVERLAPS - 181))
        | (1ULL << (fugue_sqlParser::OVERLAY - 181))
        | (1ULL << (fugue_sqlParser::OVERWRITE - 181))
        | (1ULL << (fugue_sqlParser::PARTITION - 181))
        | (1ULL << (fugue_sqlParser::PARTITIONED - 181))
        | (1ULL << (fugue_sqlParser::PARTITIONS - 181))
        | (1ULL << (fugue_sqlParser::PERCENTLIT - 181))
        | (1ULL << (fugue_sqlParser::PIVOT - 181))
        | (1ULL << (fugue_sqlParser::PLACING - 181))
        | (1ULL << (fugue_sqlParser::POSITION - 181))
        | (1ULL << (fugue_sqlParser::PRECEDING - 181))
        | (1ULL << (fugue_sqlParser::PRIMARY - 181))
        | (1ULL << (fugue_sqlParser::PRINCIPALS - 181))
        | (1ULL << (fugue_sqlParser::PROPERTIES - 181))
        | (1ULL << (fugue_sqlParser::PURGE - 181))
        | (1ULL << (fugue_sqlParser::QUERY - 181))
        | (1ULL << (fugue_sqlParser::RANGE - 181))
        | (1ULL << (fugue_sqlParser::RECORDREADER - 181))
        | (1ULL << (fugue_sqlParser::RECORDWRITER - 181))
        | (1ULL << (fugue_sqlParser::RECOVER - 181))
        | (1ULL << (fugue_sqlParser::REDUCE - 181))
        | (1ULL << (fugue_sqlParser::REFERENCES - 181))
        | (1ULL << (fugue_sqlParser::REFRESH - 181))
        | (1ULL << (fugue_sqlParser::RENAME - 181))
        | (1ULL << (fugue_sqlParser::REPAIR - 181))
        | (1ULL << (fugue_sqlParser::REPLACE - 181))
        | (1ULL << (fugue_sqlParser::RESET - 181))
        | (1ULL << (fugue_sqlParser::RESTRICT - 181))
        | (1ULL << (fugue_sqlParser::REVOKE - 181))
        | (1ULL << (fugue_sqlParser::RIGHT - 181))
        | (1ULL << (fugue_sqlParser::RLIKE - 181))
        | (1ULL << (fugue_sqlParser::ROLE - 181))
        | (1ULL << (fugue_sqlParser::ROLES - 181))
        | (1ULL << (fugue_sqlParser::ROLLBACK - 181))
        | (1ULL << (fugue_sqlParser::ROLLUP - 181))
        | (1ULL << (fugue_sqlParser::ROW - 181))
        | (1ULL << (fugue_sqlParser::ROWS - 181)))) != 0) || ((((_la - 245) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 245)) & ((1ULL << (fugue_sqlParser::SCHEMA - 245))
        | (1ULL << (fugue_sqlParser::SECOND - 245))
        | (1ULL << (fugue_sqlParser::SELECT - 245))
        | (1ULL << (fugue_sqlParser::SEMI - 245))
        | (1ULL << (fugue_sqlParser::SEPARATED - 245))
        | (1ULL << (fugue_sqlParser::SERDE - 245))
        | (1ULL << (fugue_sqlParser::SERDEPROPERTIES - 245))
        | (1ULL << (fugue_sqlParser::SESSION_USER - 245))
        | (1ULL << (fugue_sqlParser::SET - 245))
        | (1ULL << (fugue_sqlParser::SETMINUS - 245))
        | (1ULL << (fugue_sqlParser::SETS - 245))
        | (1ULL << (fugue_sqlParser::SHOW - 245))
        | (1ULL << (fugue_sqlParser::SKEWED - 245))
        | (1ULL << (fugue_sqlParser::SOME - 245))
        | (1ULL << (fugue_sqlParser::SORT - 245))
        | (1ULL << (fugue_sqlParser::SORTED - 245))
        | (1ULL << (fugue_sqlParser::START - 245))
        | (1ULL << (fugue_sqlParser::STATISTICS - 245))
        | (1ULL << (fugue_sqlParser::STORED - 245))
        | (1ULL << (fugue_sqlParser::STRATIFY - 245))
        | (1ULL << (fugue_sqlParser::STRUCT - 245))
        | (1ULL << (fugue_sqlParser::SUBSTR - 245))
        | (1ULL << (fugue_sqlParser::SUBSTRING - 245))
        | (1ULL << (fugue_sqlParser::TABLE - 245))
        | (1ULL << (fugue_sqlParser::TABLES - 245))
        | (1ULL << (fugue_sqlParser::TABLESAMPLE - 245))
        | (1ULL << (fugue_sqlParser::TBLPROPERTIES - 245))
        | (1ULL << (fugue_sqlParser::TEMPORARY - 245))
        | (1ULL << (fugue_sqlParser::TERMINATED - 245))
        | (1ULL << (fugue_sqlParser::THEN - 245))
        | (1ULL << (fugue_sqlParser::TO - 245))
        | (1ULL << (fugue_sqlParser::TOUCH - 245))
        | (1ULL << (fugue_sqlParser::TRAILING - 245))
        | (1ULL << (fugue_sqlParser::TRANSACTION - 245))
        | (1ULL << (fugue_sqlParser::TRANSACTIONS - 245))
        | (1ULL << (fugue_sqlParser::TRANSFORM - 245))
        | (1ULL << (fugue_sqlParser::TRIM - 245))
        | (1ULL << (fugue_sqlParser::TRUE - 245))
        | (1ULL << (fugue_sqlParser::TRUNCATE - 245))
        | (1ULL << (fugue_sqlParser::TYPE - 245))
        | (1ULL << (fugue_sqlParser::UNARCHIVE - 245))
        | (1ULL << (fugue_sqlParser::UNBOUNDED - 245))
        | (1ULL << (fugue_sqlParser::UNCACHE - 245))
        | (1ULL << (fugue_sqlParser::UNION - 245))
        | (1ULL << (fugue_sqlParser::UNIQUE - 245))
        | (1ULL << (fugue_sqlParser::UNKNOWN - 245))
        | (1ULL << (fugue_sqlParser::UNLOCK - 245))
        | (1ULL << (fugue_sqlParser::UNSET - 245))
        | (1ULL << (fugue_sqlParser::UPDATE - 245))
        | (1ULL << (fugue_sqlParser::USE - 245))
        | (1ULL << (fugue_sqlParser::USER - 245))
        | (1ULL << (fugue_sqlParser::USING - 245))
        | (1ULL << (fugue_sqlParser::VALUES - 245))
        | (1ULL << (fugue_sqlParser::VIEW - 245))
        | (1ULL << (fugue_sqlParser::VIEWS - 245))
        | (1ULL << (fugue_sqlParser::WHEN - 245))
        | (1ULL << (fugue_sqlParser::WHERE - 245))
        | (1ULL << (fugue_sqlParser::WINDOW - 245))
        | (1ULL << (fugue_sqlParser::WITH - 245))
        | (1ULL << (fugue_sqlParser::YEAR - 245)))) != 0) || ((((_la - 319) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 319)) & ((1ULL << (fugue_sqlParser::DIV - 319))
        | (1ULL << (fugue_sqlParser::IDENTIFIER - 319))
        | (1ULL << (fugue_sqlParser::BACKQUOTED_IDENTIFIER - 319)))) != 0)) {
        setState(1722);
        describeColName();
      }
      break;
    }

    case 52: {
      _localctx = _tracker.createInstance<fugue_sqlParser::DescribeQueryContext>(_localctx);
      enterOuterAlt(_localctx, 52);
      setState(1725);
      _la = _input->LA(1);
      if (!(_la == fugue_sqlParser::DESC

      || _la == fugue_sqlParser::DESCRIBE)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(1727);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::QUERY) {
        setState(1726);
        match(fugue_sqlParser::QUERY);
      }
      setState(1729);
      query();
      break;
    }

    case 53: {
      _localctx = _tracker.createInstance<fugue_sqlParser::CommentNamespaceContext>(_localctx);
      enterOuterAlt(_localctx, 53);
      setState(1730);
      match(fugue_sqlParser::COMMENT);
      setState(1731);
      match(fugue_sqlParser::ON);
      setState(1732);
      theNamespace();
      setState(1733);
      multipartIdentifier();
      setState(1734);
      match(fugue_sqlParser::IS);
      setState(1735);
      antlrcpp::downCast<CommentNamespaceContext *>(_localctx)->comment = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == fugue_sqlParser::THENULL || _la == fugue_sqlParser::STRING)) {
        antlrcpp::downCast<CommentNamespaceContext *>(_localctx)->comment = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    case 54: {
      _localctx = _tracker.createInstance<fugue_sqlParser::CommentTableContext>(_localctx);
      enterOuterAlt(_localctx, 54);
      setState(1737);
      match(fugue_sqlParser::COMMENT);
      setState(1738);
      match(fugue_sqlParser::ON);
      setState(1739);
      match(fugue_sqlParser::TABLE);
      setState(1740);
      multipartIdentifier();
      setState(1741);
      match(fugue_sqlParser::IS);
      setState(1742);
      antlrcpp::downCast<CommentTableContext *>(_localctx)->comment = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == fugue_sqlParser::THENULL || _la == fugue_sqlParser::STRING)) {
        antlrcpp::downCast<CommentTableContext *>(_localctx)->comment = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    case 55: {
      _localctx = _tracker.createInstance<fugue_sqlParser::RefreshTableContext>(_localctx);
      enterOuterAlt(_localctx, 55);
      setState(1744);
      match(fugue_sqlParser::REFRESH);
      setState(1745);
      match(fugue_sqlParser::TABLE);
      setState(1746);
      multipartIdentifier();
      break;
    }

    case 56: {
      _localctx = _tracker.createInstance<fugue_sqlParser::RefreshResourceContext>(_localctx);
      enterOuterAlt(_localctx, 56);
      setState(1747);
      match(fugue_sqlParser::REFRESH);
      setState(1755);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 217, _ctx)) {
      case 1: {
        setState(1748);
        match(fugue_sqlParser::STRING);
        break;
      }

      case 2: {
        setState(1752);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 216, _ctx);
        while (alt != 1 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1 + 1) {
            setState(1749);
            matchWildcard(); 
          }
          setState(1754);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 216, _ctx);
        }
        break;
      }

      default:
        break;
      }
      break;
    }

    case 57: {
      _localctx = _tracker.createInstance<fugue_sqlParser::CacheTableContext>(_localctx);
      enterOuterAlt(_localctx, 57);
      setState(1757);
      match(fugue_sqlParser::CACHE);
      setState(1759);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::LAZY) {
        setState(1758);
        match(fugue_sqlParser::LAZY);
      }
      setState(1761);
      match(fugue_sqlParser::TABLE);
      setState(1762);
      multipartIdentifier();
      setState(1765);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::OPTIONS) {
        setState(1763);
        match(fugue_sqlParser::OPTIONS);
        setState(1764);
        antlrcpp::downCast<CacheTableContext *>(_localctx)->options = tablePropertyList();
      }
      setState(1771);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & ((1ULL << fugue_sqlParser::FILL)
        | (1ULL << fugue_sqlParser::TAKE)
        | (1ULL << fugue_sqlParser::PROCESS)
        | (1ULL << fugue_sqlParser::ZIP)
        | (1ULL << fugue_sqlParser::SAVE)
        | (1ULL << fugue_sqlParser::CONNECT)
        | (1ULL << fugue_sqlParser::SAMPLE)
        | (1ULL << fugue_sqlParser::ALTER)
        | (1ULL << fugue_sqlParser::AS))) != 0) || ((((_la - 94) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 94)) & ((1ULL << (fugue_sqlParser::CREATE - 94))
        | (1ULL << (fugue_sqlParser::DROP - 94))
        | (1ULL << (fugue_sqlParser::FROM - 94)))) != 0) || ((((_la - 177) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 177)) & ((1ULL << (fugue_sqlParser::LOAD - 177))
        | (1ULL << (fugue_sqlParser::MAP - 177))
        | (1ULL << (fugue_sqlParser::REDUCE - 177))
        | (1ULL << (fugue_sqlParser::RENAME - 177)))) != 0) || ((((_la - 247) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 247)) & ((1ULL << (fugue_sqlParser::SELECT - 247))
        | (1ULL << (fugue_sqlParser::TABLE - 247))
        | (1ULL << (fugue_sqlParser::TRANSFORM - 247))
        | (1ULL << (fugue_sqlParser::VALUES - 247))
        | (1ULL << (fugue_sqlParser::WITH - 247)))) != 0)) {
        setState(1768);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == fugue_sqlParser::AS) {
          setState(1767);
          match(fugue_sqlParser::AS);
        }
        setState(1770);
        query();
      }
      break;
    }

    case 58: {
      _localctx = _tracker.createInstance<fugue_sqlParser::UncacheTableContext>(_localctx);
      enterOuterAlt(_localctx, 58);
      setState(1773);
      match(fugue_sqlParser::UNCACHE);
      setState(1774);
      match(fugue_sqlParser::TABLE);
      setState(1777);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 222, _ctx)) {
      case 1: {
        setState(1775);
        match(fugue_sqlParser::IF);
        setState(1776);
        match(fugue_sqlParser::EXISTS);
        break;
      }

      default:
        break;
      }
      setState(1779);
      multipartIdentifier();
      break;
    }

    case 59: {
      _localctx = _tracker.createInstance<fugue_sqlParser::ClearCacheContext>(_localctx);
      enterOuterAlt(_localctx, 59);
      setState(1780);
      match(fugue_sqlParser::CLEAR);
      setState(1781);
      match(fugue_sqlParser::CACHE);
      break;
    }

    case 60: {
      _localctx = _tracker.createInstance<fugue_sqlParser::LoadDataContext>(_localctx);
      enterOuterAlt(_localctx, 60);
      setState(1782);
      match(fugue_sqlParser::LOAD);
      setState(1783);
      match(fugue_sqlParser::DATA);
      setState(1785);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::LOCAL) {
        setState(1784);
        match(fugue_sqlParser::LOCAL);
      }
      setState(1787);
      match(fugue_sqlParser::INPATH);
      setState(1788);
      antlrcpp::downCast<LoadDataContext *>(_localctx)->path = match(fugue_sqlParser::STRING);
      setState(1790);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::OVERWRITE) {
        setState(1789);
        match(fugue_sqlParser::OVERWRITE);
      }
      setState(1792);
      match(fugue_sqlParser::INTO);
      setState(1793);
      match(fugue_sqlParser::TABLE);
      setState(1794);
      multipartIdentifier();
      setState(1796);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::PARTITION) {
        setState(1795);
        partitionSpec();
      }
      break;
    }

    case 61: {
      _localctx = _tracker.createInstance<fugue_sqlParser::TruncateTableContext>(_localctx);
      enterOuterAlt(_localctx, 61);
      setState(1798);
      match(fugue_sqlParser::TRUNCATE);
      setState(1799);
      match(fugue_sqlParser::TABLE);
      setState(1800);
      multipartIdentifier();
      setState(1802);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::PARTITION) {
        setState(1801);
        partitionSpec();
      }
      break;
    }

    case 62: {
      _localctx = _tracker.createInstance<fugue_sqlParser::RepairTableContext>(_localctx);
      enterOuterAlt(_localctx, 62);
      setState(1804);
      match(fugue_sqlParser::MSCK);
      setState(1805);
      match(fugue_sqlParser::REPAIR);
      setState(1806);
      match(fugue_sqlParser::TABLE);
      setState(1807);
      multipartIdentifier();
      break;
    }

    case 63: {
      _localctx = _tracker.createInstance<fugue_sqlParser::ManageResourceContext>(_localctx);
      enterOuterAlt(_localctx, 63);
      setState(1808);
      antlrcpp::downCast<ManageResourceContext *>(_localctx)->op = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == fugue_sqlParser::ADD || _la == fugue_sqlParser::LIST)) {
        antlrcpp::downCast<ManageResourceContext *>(_localctx)->op = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(1809);
      identifier();
      setState(1817);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 228, _ctx)) {
      case 1: {
        setState(1810);
        match(fugue_sqlParser::STRING);
        break;
      }

      case 2: {
        setState(1814);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 227, _ctx);
        while (alt != 1 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1 + 1) {
            setState(1811);
            matchWildcard(); 
          }
          setState(1816);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 227, _ctx);
        }
        break;
      }

      default:
        break;
      }
      break;
    }

    case 64: {
      _localctx = _tracker.createInstance<fugue_sqlParser::FailNativeCommandContext>(_localctx);
      enterOuterAlt(_localctx, 64);
      setState(1819);
      match(fugue_sqlParser::SET);
      setState(1820);
      match(fugue_sqlParser::ROLE);
      setState(1824);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 229, _ctx);
      while (alt != 1 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1 + 1) {
          setState(1821);
          matchWildcard(); 
        }
        setState(1826);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 229, _ctx);
      }
      break;
    }

    case 65: {
      _localctx = _tracker.createInstance<fugue_sqlParser::SetConfigurationContext>(_localctx);
      enterOuterAlt(_localctx, 65);
      setState(1827);
      match(fugue_sqlParser::SET);
      setState(1831);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 230, _ctx);
      while (alt != 1 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1 + 1) {
          setState(1828);
          matchWildcard(); 
        }
        setState(1833);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 230, _ctx);
      }
      break;
    }

    case 66: {
      _localctx = _tracker.createInstance<fugue_sqlParser::ResetConfigurationContext>(_localctx);
      enterOuterAlt(_localctx, 66);
      setState(1834);
      match(fugue_sqlParser::RESET);
      break;
    }

    case 67: {
      _localctx = _tracker.createInstance<fugue_sqlParser::FailNativeCommandContext>(_localctx);
      enterOuterAlt(_localctx, 67);
      setState(1835);
      unsupportedHiveNativeCommands();
      setState(1839);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 231, _ctx);
      while (alt != 1 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1 + 1) {
          setState(1836);
          matchWildcard(); 
        }
        setState(1841);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 231, _ctx);
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnsupportedHiveNativeCommandsContext ------------------------------------------------------------------

fugue_sqlParser::UnsupportedHiveNativeCommandsContext::UnsupportedHiveNativeCommandsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* fugue_sqlParser::UnsupportedHiveNativeCommandsContext::CREATE() {
  return getToken(fugue_sqlParser::CREATE, 0);
}

tree::TerminalNode* fugue_sqlParser::UnsupportedHiveNativeCommandsContext::ROLE() {
  return getToken(fugue_sqlParser::ROLE, 0);
}

tree::TerminalNode* fugue_sqlParser::UnsupportedHiveNativeCommandsContext::DROP() {
  return getToken(fugue_sqlParser::DROP, 0);
}

tree::TerminalNode* fugue_sqlParser::UnsupportedHiveNativeCommandsContext::GRANT() {
  return getToken(fugue_sqlParser::GRANT, 0);
}

tree::TerminalNode* fugue_sqlParser::UnsupportedHiveNativeCommandsContext::REVOKE() {
  return getToken(fugue_sqlParser::REVOKE, 0);
}

tree::TerminalNode* fugue_sqlParser::UnsupportedHiveNativeCommandsContext::SHOW() {
  return getToken(fugue_sqlParser::SHOW, 0);
}

tree::TerminalNode* fugue_sqlParser::UnsupportedHiveNativeCommandsContext::PRINCIPALS() {
  return getToken(fugue_sqlParser::PRINCIPALS, 0);
}

tree::TerminalNode* fugue_sqlParser::UnsupportedHiveNativeCommandsContext::ROLES() {
  return getToken(fugue_sqlParser::ROLES, 0);
}

tree::TerminalNode* fugue_sqlParser::UnsupportedHiveNativeCommandsContext::CURRENT() {
  return getToken(fugue_sqlParser::CURRENT, 0);
}

tree::TerminalNode* fugue_sqlParser::UnsupportedHiveNativeCommandsContext::EXPORT() {
  return getToken(fugue_sqlParser::EXPORT, 0);
}

tree::TerminalNode* fugue_sqlParser::UnsupportedHiveNativeCommandsContext::TABLE() {
  return getToken(fugue_sqlParser::TABLE, 0);
}

tree::TerminalNode* fugue_sqlParser::UnsupportedHiveNativeCommandsContext::IMPORT() {
  return getToken(fugue_sqlParser::IMPORT, 0);
}

tree::TerminalNode* fugue_sqlParser::UnsupportedHiveNativeCommandsContext::COMPACTIONS() {
  return getToken(fugue_sqlParser::COMPACTIONS, 0);
}

tree::TerminalNode* fugue_sqlParser::UnsupportedHiveNativeCommandsContext::TRANSACTIONS() {
  return getToken(fugue_sqlParser::TRANSACTIONS, 0);
}

tree::TerminalNode* fugue_sqlParser::UnsupportedHiveNativeCommandsContext::INDEXES() {
  return getToken(fugue_sqlParser::INDEXES, 0);
}

tree::TerminalNode* fugue_sqlParser::UnsupportedHiveNativeCommandsContext::LOCKS() {
  return getToken(fugue_sqlParser::LOCKS, 0);
}

tree::TerminalNode* fugue_sqlParser::UnsupportedHiveNativeCommandsContext::INDEX() {
  return getToken(fugue_sqlParser::INDEX, 0);
}

tree::TerminalNode* fugue_sqlParser::UnsupportedHiveNativeCommandsContext::ALTER() {
  return getToken(fugue_sqlParser::ALTER, 0);
}

tree::TerminalNode* fugue_sqlParser::UnsupportedHiveNativeCommandsContext::LOCK() {
  return getToken(fugue_sqlParser::LOCK, 0);
}

tree::TerminalNode* fugue_sqlParser::UnsupportedHiveNativeCommandsContext::DATABASE() {
  return getToken(fugue_sqlParser::DATABASE, 0);
}

tree::TerminalNode* fugue_sqlParser::UnsupportedHiveNativeCommandsContext::UNLOCK() {
  return getToken(fugue_sqlParser::UNLOCK, 0);
}

tree::TerminalNode* fugue_sqlParser::UnsupportedHiveNativeCommandsContext::TEMPORARY() {
  return getToken(fugue_sqlParser::TEMPORARY, 0);
}

tree::TerminalNode* fugue_sqlParser::UnsupportedHiveNativeCommandsContext::MACRO() {
  return getToken(fugue_sqlParser::MACRO, 0);
}

fugue_sqlParser::TableIdentifierContext* fugue_sqlParser::UnsupportedHiveNativeCommandsContext::tableIdentifier() {
  return getRuleContext<fugue_sqlParser::TableIdentifierContext>(0);
}

tree::TerminalNode* fugue_sqlParser::UnsupportedHiveNativeCommandsContext::NOT() {
  return getToken(fugue_sqlParser::NOT, 0);
}

tree::TerminalNode* fugue_sqlParser::UnsupportedHiveNativeCommandsContext::CLUSTERED() {
  return getToken(fugue_sqlParser::CLUSTERED, 0);
}

tree::TerminalNode* fugue_sqlParser::UnsupportedHiveNativeCommandsContext::BY() {
  return getToken(fugue_sqlParser::BY, 0);
}

tree::TerminalNode* fugue_sqlParser::UnsupportedHiveNativeCommandsContext::SORTED() {
  return getToken(fugue_sqlParser::SORTED, 0);
}

tree::TerminalNode* fugue_sqlParser::UnsupportedHiveNativeCommandsContext::SKEWED() {
  return getToken(fugue_sqlParser::SKEWED, 0);
}

tree::TerminalNode* fugue_sqlParser::UnsupportedHiveNativeCommandsContext::STORED() {
  return getToken(fugue_sqlParser::STORED, 0);
}

tree::TerminalNode* fugue_sqlParser::UnsupportedHiveNativeCommandsContext::AS() {
  return getToken(fugue_sqlParser::AS, 0);
}

tree::TerminalNode* fugue_sqlParser::UnsupportedHiveNativeCommandsContext::DIRECTORIES() {
  return getToken(fugue_sqlParser::DIRECTORIES, 0);
}

tree::TerminalNode* fugue_sqlParser::UnsupportedHiveNativeCommandsContext::SET() {
  return getToken(fugue_sqlParser::SET, 0);
}

tree::TerminalNode* fugue_sqlParser::UnsupportedHiveNativeCommandsContext::LOCATION() {
  return getToken(fugue_sqlParser::LOCATION, 0);
}

tree::TerminalNode* fugue_sqlParser::UnsupportedHiveNativeCommandsContext::EXCHANGE() {
  return getToken(fugue_sqlParser::EXCHANGE, 0);
}

tree::TerminalNode* fugue_sqlParser::UnsupportedHiveNativeCommandsContext::PARTITION() {
  return getToken(fugue_sqlParser::PARTITION, 0);
}

tree::TerminalNode* fugue_sqlParser::UnsupportedHiveNativeCommandsContext::ARCHIVE() {
  return getToken(fugue_sqlParser::ARCHIVE, 0);
}

tree::TerminalNode* fugue_sqlParser::UnsupportedHiveNativeCommandsContext::UNARCHIVE() {
  return getToken(fugue_sqlParser::UNARCHIVE, 0);
}

tree::TerminalNode* fugue_sqlParser::UnsupportedHiveNativeCommandsContext::TOUCH() {
  return getToken(fugue_sqlParser::TOUCH, 0);
}

tree::TerminalNode* fugue_sqlParser::UnsupportedHiveNativeCommandsContext::COMPACT() {
  return getToken(fugue_sqlParser::COMPACT, 0);
}

fugue_sqlParser::PartitionSpecContext* fugue_sqlParser::UnsupportedHiveNativeCommandsContext::partitionSpec() {
  return getRuleContext<fugue_sqlParser::PartitionSpecContext>(0);
}

tree::TerminalNode* fugue_sqlParser::UnsupportedHiveNativeCommandsContext::CONCATENATE() {
  return getToken(fugue_sqlParser::CONCATENATE, 0);
}

tree::TerminalNode* fugue_sqlParser::UnsupportedHiveNativeCommandsContext::FILEFORMAT() {
  return getToken(fugue_sqlParser::FILEFORMAT, 0);
}

tree::TerminalNode* fugue_sqlParser::UnsupportedHiveNativeCommandsContext::REPLACE() {
  return getToken(fugue_sqlParser::REPLACE, 0);
}

tree::TerminalNode* fugue_sqlParser::UnsupportedHiveNativeCommandsContext::COLUMNS() {
  return getToken(fugue_sqlParser::COLUMNS, 0);
}

tree::TerminalNode* fugue_sqlParser::UnsupportedHiveNativeCommandsContext::START() {
  return getToken(fugue_sqlParser::START, 0);
}

tree::TerminalNode* fugue_sqlParser::UnsupportedHiveNativeCommandsContext::TRANSACTION() {
  return getToken(fugue_sqlParser::TRANSACTION, 0);
}

tree::TerminalNode* fugue_sqlParser::UnsupportedHiveNativeCommandsContext::COMMIT() {
  return getToken(fugue_sqlParser::COMMIT, 0);
}

tree::TerminalNode* fugue_sqlParser::UnsupportedHiveNativeCommandsContext::ROLLBACK() {
  return getToken(fugue_sqlParser::ROLLBACK, 0);
}

tree::TerminalNode* fugue_sqlParser::UnsupportedHiveNativeCommandsContext::DFS() {
  return getToken(fugue_sqlParser::DFS, 0);
}


size_t fugue_sqlParser::UnsupportedHiveNativeCommandsContext::getRuleIndex() const {
  return fugue_sqlParser::RuleUnsupportedHiveNativeCommands;
}


antlrcpp::Any fugue_sqlParser::UnsupportedHiveNativeCommandsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitUnsupportedHiveNativeCommands(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::UnsupportedHiveNativeCommandsContext* fugue_sqlParser::unsupportedHiveNativeCommands() {
  UnsupportedHiveNativeCommandsContext *_localctx = _tracker.createInstance<UnsupportedHiveNativeCommandsContext>(_ctx, getState());
  enterRule(_localctx, 166, fugue_sqlParser::RuleUnsupportedHiveNativeCommands);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2012);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 240, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1844);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw1 = match(fugue_sqlParser::CREATE);
      setState(1845);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw2 = match(fugue_sqlParser::ROLE);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1846);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw1 = match(fugue_sqlParser::DROP);
      setState(1847);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw2 = match(fugue_sqlParser::ROLE);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1848);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw1 = match(fugue_sqlParser::GRANT);
      setState(1850);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 233, _ctx)) {
      case 1: {
        setState(1849);
        antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw2 = match(fugue_sqlParser::ROLE);
        break;
      }

      default:
        break;
      }
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1852);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw1 = match(fugue_sqlParser::REVOKE);
      setState(1854);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 234, _ctx)) {
      case 1: {
        setState(1853);
        antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw2 = match(fugue_sqlParser::ROLE);
        break;
      }

      default:
        break;
      }
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1856);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw1 = match(fugue_sqlParser::SHOW);
      setState(1857);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw2 = match(fugue_sqlParser::GRANT);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1858);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw1 = match(fugue_sqlParser::SHOW);
      setState(1859);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw2 = match(fugue_sqlParser::ROLE);
      setState(1861);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 235, _ctx)) {
      case 1: {
        setState(1860);
        antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw3 = match(fugue_sqlParser::GRANT);
        break;
      }

      default:
        break;
      }
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(1863);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw1 = match(fugue_sqlParser::SHOW);
      setState(1864);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw2 = match(fugue_sqlParser::PRINCIPALS);
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(1865);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw1 = match(fugue_sqlParser::SHOW);
      setState(1866);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw2 = match(fugue_sqlParser::ROLES);
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(1867);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw1 = match(fugue_sqlParser::SHOW);
      setState(1868);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw2 = match(fugue_sqlParser::CURRENT);
      setState(1869);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw3 = match(fugue_sqlParser::ROLES);
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(1870);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw1 = match(fugue_sqlParser::EXPORT);
      setState(1871);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw2 = match(fugue_sqlParser::TABLE);
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(1872);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw1 = match(fugue_sqlParser::IMPORT);
      setState(1873);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw2 = match(fugue_sqlParser::TABLE);
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(1874);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw1 = match(fugue_sqlParser::SHOW);
      setState(1875);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw2 = match(fugue_sqlParser::COMPACTIONS);
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(1876);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw1 = match(fugue_sqlParser::SHOW);
      setState(1877);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw2 = match(fugue_sqlParser::CREATE);
      setState(1878);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw3 = match(fugue_sqlParser::TABLE);
      break;
    }

    case 14: {
      enterOuterAlt(_localctx, 14);
      setState(1879);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw1 = match(fugue_sqlParser::SHOW);
      setState(1880);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw2 = match(fugue_sqlParser::TRANSACTIONS);
      break;
    }

    case 15: {
      enterOuterAlt(_localctx, 15);
      setState(1881);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw1 = match(fugue_sqlParser::SHOW);
      setState(1882);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw2 = match(fugue_sqlParser::INDEXES);
      break;
    }

    case 16: {
      enterOuterAlt(_localctx, 16);
      setState(1883);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw1 = match(fugue_sqlParser::SHOW);
      setState(1884);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw2 = match(fugue_sqlParser::LOCKS);
      break;
    }

    case 17: {
      enterOuterAlt(_localctx, 17);
      setState(1885);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw1 = match(fugue_sqlParser::CREATE);
      setState(1886);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw2 = match(fugue_sqlParser::INDEX);
      break;
    }

    case 18: {
      enterOuterAlt(_localctx, 18);
      setState(1887);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw1 = match(fugue_sqlParser::DROP);
      setState(1888);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw2 = match(fugue_sqlParser::INDEX);
      break;
    }

    case 19: {
      enterOuterAlt(_localctx, 19);
      setState(1889);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw1 = match(fugue_sqlParser::ALTER);
      setState(1890);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw2 = match(fugue_sqlParser::INDEX);
      break;
    }

    case 20: {
      enterOuterAlt(_localctx, 20);
      setState(1891);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw1 = match(fugue_sqlParser::LOCK);
      setState(1892);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw2 = match(fugue_sqlParser::TABLE);
      break;
    }

    case 21: {
      enterOuterAlt(_localctx, 21);
      setState(1893);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw1 = match(fugue_sqlParser::LOCK);
      setState(1894);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw2 = match(fugue_sqlParser::DATABASE);
      break;
    }

    case 22: {
      enterOuterAlt(_localctx, 22);
      setState(1895);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw1 = match(fugue_sqlParser::UNLOCK);
      setState(1896);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw2 = match(fugue_sqlParser::TABLE);
      break;
    }

    case 23: {
      enterOuterAlt(_localctx, 23);
      setState(1897);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw1 = match(fugue_sqlParser::UNLOCK);
      setState(1898);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw2 = match(fugue_sqlParser::DATABASE);
      break;
    }

    case 24: {
      enterOuterAlt(_localctx, 24);
      setState(1899);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw1 = match(fugue_sqlParser::CREATE);
      setState(1900);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw2 = match(fugue_sqlParser::TEMPORARY);
      setState(1901);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw3 = match(fugue_sqlParser::MACRO);
      break;
    }

    case 25: {
      enterOuterAlt(_localctx, 25);
      setState(1902);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw1 = match(fugue_sqlParser::DROP);
      setState(1903);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw2 = match(fugue_sqlParser::TEMPORARY);
      setState(1904);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw3 = match(fugue_sqlParser::MACRO);
      break;
    }

    case 26: {
      enterOuterAlt(_localctx, 26);
      setState(1905);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw1 = match(fugue_sqlParser::ALTER);
      setState(1906);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw2 = match(fugue_sqlParser::TABLE);
      setState(1907);
      tableIdentifier();
      setState(1908);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw3 = match(fugue_sqlParser::NOT);
      setState(1909);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw4 = match(fugue_sqlParser::CLUSTERED);
      break;
    }

    case 27: {
      enterOuterAlt(_localctx, 27);
      setState(1911);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw1 = match(fugue_sqlParser::ALTER);
      setState(1912);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw2 = match(fugue_sqlParser::TABLE);
      setState(1913);
      tableIdentifier();
      setState(1914);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw3 = match(fugue_sqlParser::CLUSTERED);
      setState(1915);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw4 = match(fugue_sqlParser::BY);
      break;
    }

    case 28: {
      enterOuterAlt(_localctx, 28);
      setState(1917);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw1 = match(fugue_sqlParser::ALTER);
      setState(1918);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw2 = match(fugue_sqlParser::TABLE);
      setState(1919);
      tableIdentifier();
      setState(1920);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw3 = match(fugue_sqlParser::NOT);
      setState(1921);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw4 = match(fugue_sqlParser::SORTED);
      break;
    }

    case 29: {
      enterOuterAlt(_localctx, 29);
      setState(1923);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw1 = match(fugue_sqlParser::ALTER);
      setState(1924);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw2 = match(fugue_sqlParser::TABLE);
      setState(1925);
      tableIdentifier();
      setState(1926);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw3 = match(fugue_sqlParser::SKEWED);
      setState(1927);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw4 = match(fugue_sqlParser::BY);
      break;
    }

    case 30: {
      enterOuterAlt(_localctx, 30);
      setState(1929);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw1 = match(fugue_sqlParser::ALTER);
      setState(1930);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw2 = match(fugue_sqlParser::TABLE);
      setState(1931);
      tableIdentifier();
      setState(1932);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw3 = match(fugue_sqlParser::NOT);
      setState(1933);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw4 = match(fugue_sqlParser::SKEWED);
      break;
    }

    case 31: {
      enterOuterAlt(_localctx, 31);
      setState(1935);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw1 = match(fugue_sqlParser::ALTER);
      setState(1936);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw2 = match(fugue_sqlParser::TABLE);
      setState(1937);
      tableIdentifier();
      setState(1938);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw3 = match(fugue_sqlParser::NOT);
      setState(1939);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw4 = match(fugue_sqlParser::STORED);
      setState(1940);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw5 = match(fugue_sqlParser::AS);
      setState(1941);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw6 = match(fugue_sqlParser::DIRECTORIES);
      break;
    }

    case 32: {
      enterOuterAlt(_localctx, 32);
      setState(1943);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw1 = match(fugue_sqlParser::ALTER);
      setState(1944);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw2 = match(fugue_sqlParser::TABLE);
      setState(1945);
      tableIdentifier();
      setState(1946);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw3 = match(fugue_sqlParser::SET);
      setState(1947);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw4 = match(fugue_sqlParser::SKEWED);
      setState(1948);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw5 = match(fugue_sqlParser::LOCATION);
      break;
    }

    case 33: {
      enterOuterAlt(_localctx, 33);
      setState(1950);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw1 = match(fugue_sqlParser::ALTER);
      setState(1951);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw2 = match(fugue_sqlParser::TABLE);
      setState(1952);
      tableIdentifier();
      setState(1953);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw3 = match(fugue_sqlParser::EXCHANGE);
      setState(1954);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw4 = match(fugue_sqlParser::PARTITION);
      break;
    }

    case 34: {
      enterOuterAlt(_localctx, 34);
      setState(1956);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw1 = match(fugue_sqlParser::ALTER);
      setState(1957);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw2 = match(fugue_sqlParser::TABLE);
      setState(1958);
      tableIdentifier();
      setState(1959);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw3 = match(fugue_sqlParser::ARCHIVE);
      setState(1960);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw4 = match(fugue_sqlParser::PARTITION);
      break;
    }

    case 35: {
      enterOuterAlt(_localctx, 35);
      setState(1962);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw1 = match(fugue_sqlParser::ALTER);
      setState(1963);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw2 = match(fugue_sqlParser::TABLE);
      setState(1964);
      tableIdentifier();
      setState(1965);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw3 = match(fugue_sqlParser::UNARCHIVE);
      setState(1966);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw4 = match(fugue_sqlParser::PARTITION);
      break;
    }

    case 36: {
      enterOuterAlt(_localctx, 36);
      setState(1968);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw1 = match(fugue_sqlParser::ALTER);
      setState(1969);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw2 = match(fugue_sqlParser::TABLE);
      setState(1970);
      tableIdentifier();
      setState(1971);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw3 = match(fugue_sqlParser::TOUCH);
      break;
    }

    case 37: {
      enterOuterAlt(_localctx, 37);
      setState(1973);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw1 = match(fugue_sqlParser::ALTER);
      setState(1974);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw2 = match(fugue_sqlParser::TABLE);
      setState(1975);
      tableIdentifier();
      setState(1977);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::PARTITION) {
        setState(1976);
        partitionSpec();
      }
      setState(1979);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw3 = match(fugue_sqlParser::COMPACT);
      break;
    }

    case 38: {
      enterOuterAlt(_localctx, 38);
      setState(1981);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw1 = match(fugue_sqlParser::ALTER);
      setState(1982);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw2 = match(fugue_sqlParser::TABLE);
      setState(1983);
      tableIdentifier();
      setState(1985);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::PARTITION) {
        setState(1984);
        partitionSpec();
      }
      setState(1987);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw3 = match(fugue_sqlParser::CONCATENATE);
      break;
    }

    case 39: {
      enterOuterAlt(_localctx, 39);
      setState(1989);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw1 = match(fugue_sqlParser::ALTER);
      setState(1990);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw2 = match(fugue_sqlParser::TABLE);
      setState(1991);
      tableIdentifier();
      setState(1993);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::PARTITION) {
        setState(1992);
        partitionSpec();
      }
      setState(1995);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw3 = match(fugue_sqlParser::SET);
      setState(1996);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw4 = match(fugue_sqlParser::FILEFORMAT);
      break;
    }

    case 40: {
      enterOuterAlt(_localctx, 40);
      setState(1998);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw1 = match(fugue_sqlParser::ALTER);
      setState(1999);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw2 = match(fugue_sqlParser::TABLE);
      setState(2000);
      tableIdentifier();
      setState(2002);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::PARTITION) {
        setState(2001);
        partitionSpec();
      }
      setState(2004);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw3 = match(fugue_sqlParser::REPLACE);
      setState(2005);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw4 = match(fugue_sqlParser::COLUMNS);
      break;
    }

    case 41: {
      enterOuterAlt(_localctx, 41);
      setState(2007);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw1 = match(fugue_sqlParser::START);
      setState(2008);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw2 = match(fugue_sqlParser::TRANSACTION);
      break;
    }

    case 42: {
      enterOuterAlt(_localctx, 42);
      setState(2009);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw1 = match(fugue_sqlParser::COMMIT);
      break;
    }

    case 43: {
      enterOuterAlt(_localctx, 43);
      setState(2010);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw1 = match(fugue_sqlParser::ROLLBACK);
      break;
    }

    case 44: {
      enterOuterAlt(_localctx, 44);
      setState(2011);
      antlrcpp::downCast<UnsupportedHiveNativeCommandsContext *>(_localctx)->kw1 = match(fugue_sqlParser::DFS);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CreateTableHeaderContext ------------------------------------------------------------------

fugue_sqlParser::CreateTableHeaderContext::CreateTableHeaderContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* fugue_sqlParser::CreateTableHeaderContext::CREATE() {
  return getToken(fugue_sqlParser::CREATE, 0);
}

tree::TerminalNode* fugue_sqlParser::CreateTableHeaderContext::TABLE() {
  return getToken(fugue_sqlParser::TABLE, 0);
}

fugue_sqlParser::MultipartIdentifierContext* fugue_sqlParser::CreateTableHeaderContext::multipartIdentifier() {
  return getRuleContext<fugue_sqlParser::MultipartIdentifierContext>(0);
}

tree::TerminalNode* fugue_sqlParser::CreateTableHeaderContext::TEMPORARY() {
  return getToken(fugue_sqlParser::TEMPORARY, 0);
}

tree::TerminalNode* fugue_sqlParser::CreateTableHeaderContext::EXTERNAL() {
  return getToken(fugue_sqlParser::EXTERNAL, 0);
}

tree::TerminalNode* fugue_sqlParser::CreateTableHeaderContext::IF() {
  return getToken(fugue_sqlParser::IF, 0);
}

tree::TerminalNode* fugue_sqlParser::CreateTableHeaderContext::NOT() {
  return getToken(fugue_sqlParser::NOT, 0);
}

tree::TerminalNode* fugue_sqlParser::CreateTableHeaderContext::EXISTS() {
  return getToken(fugue_sqlParser::EXISTS, 0);
}


size_t fugue_sqlParser::CreateTableHeaderContext::getRuleIndex() const {
  return fugue_sqlParser::RuleCreateTableHeader;
}


antlrcpp::Any fugue_sqlParser::CreateTableHeaderContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitCreateTableHeader(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::CreateTableHeaderContext* fugue_sqlParser::createTableHeader() {
  CreateTableHeaderContext *_localctx = _tracker.createInstance<CreateTableHeaderContext>(_ctx, getState());
  enterRule(_localctx, 168, fugue_sqlParser::RuleCreateTableHeader);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2014);
    match(fugue_sqlParser::CREATE);
    setState(2016);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == fugue_sqlParser::TEMPORARY) {
      setState(2015);
      match(fugue_sqlParser::TEMPORARY);
    }
    setState(2019);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == fugue_sqlParser::EXTERNAL) {
      setState(2018);
      match(fugue_sqlParser::EXTERNAL);
    }
    setState(2021);
    match(fugue_sqlParser::TABLE);
    setState(2025);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 243, _ctx)) {
    case 1: {
      setState(2022);
      match(fugue_sqlParser::IF);
      setState(2023);
      match(fugue_sqlParser::NOT);
      setState(2024);
      match(fugue_sqlParser::EXISTS);
      break;
    }

    default:
      break;
    }
    setState(2027);
    multipartIdentifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReplaceTableHeaderContext ------------------------------------------------------------------

fugue_sqlParser::ReplaceTableHeaderContext::ReplaceTableHeaderContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* fugue_sqlParser::ReplaceTableHeaderContext::REPLACE() {
  return getToken(fugue_sqlParser::REPLACE, 0);
}

tree::TerminalNode* fugue_sqlParser::ReplaceTableHeaderContext::TABLE() {
  return getToken(fugue_sqlParser::TABLE, 0);
}

fugue_sqlParser::MultipartIdentifierContext* fugue_sqlParser::ReplaceTableHeaderContext::multipartIdentifier() {
  return getRuleContext<fugue_sqlParser::MultipartIdentifierContext>(0);
}

tree::TerminalNode* fugue_sqlParser::ReplaceTableHeaderContext::CREATE() {
  return getToken(fugue_sqlParser::CREATE, 0);
}

tree::TerminalNode* fugue_sqlParser::ReplaceTableHeaderContext::OR() {
  return getToken(fugue_sqlParser::OR, 0);
}


size_t fugue_sqlParser::ReplaceTableHeaderContext::getRuleIndex() const {
  return fugue_sqlParser::RuleReplaceTableHeader;
}


antlrcpp::Any fugue_sqlParser::ReplaceTableHeaderContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitReplaceTableHeader(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::ReplaceTableHeaderContext* fugue_sqlParser::replaceTableHeader() {
  ReplaceTableHeaderContext *_localctx = _tracker.createInstance<ReplaceTableHeaderContext>(_ctx, getState());
  enterRule(_localctx, 170, fugue_sqlParser::RuleReplaceTableHeader);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2031);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == fugue_sqlParser::CREATE) {
      setState(2029);
      match(fugue_sqlParser::CREATE);
      setState(2030);
      match(fugue_sqlParser::OR);
    }
    setState(2033);
    match(fugue_sqlParser::REPLACE);
    setState(2034);
    match(fugue_sqlParser::TABLE);
    setState(2035);
    multipartIdentifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BucketSpecContext ------------------------------------------------------------------

fugue_sqlParser::BucketSpecContext::BucketSpecContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* fugue_sqlParser::BucketSpecContext::CLUSTERED() {
  return getToken(fugue_sqlParser::CLUSTERED, 0);
}

std::vector<tree::TerminalNode *> fugue_sqlParser::BucketSpecContext::BY() {
  return getTokens(fugue_sqlParser::BY);
}

tree::TerminalNode* fugue_sqlParser::BucketSpecContext::BY(size_t i) {
  return getToken(fugue_sqlParser::BY, i);
}

fugue_sqlParser::IdentifierListContext* fugue_sqlParser::BucketSpecContext::identifierList() {
  return getRuleContext<fugue_sqlParser::IdentifierListContext>(0);
}

tree::TerminalNode* fugue_sqlParser::BucketSpecContext::INTO() {
  return getToken(fugue_sqlParser::INTO, 0);
}

tree::TerminalNode* fugue_sqlParser::BucketSpecContext::INTEGER_VALUE() {
  return getToken(fugue_sqlParser::INTEGER_VALUE, 0);
}

tree::TerminalNode* fugue_sqlParser::BucketSpecContext::BUCKETS() {
  return getToken(fugue_sqlParser::BUCKETS, 0);
}

tree::TerminalNode* fugue_sqlParser::BucketSpecContext::SORTED() {
  return getToken(fugue_sqlParser::SORTED, 0);
}

fugue_sqlParser::OrderedIdentifierListContext* fugue_sqlParser::BucketSpecContext::orderedIdentifierList() {
  return getRuleContext<fugue_sqlParser::OrderedIdentifierListContext>(0);
}


size_t fugue_sqlParser::BucketSpecContext::getRuleIndex() const {
  return fugue_sqlParser::RuleBucketSpec;
}


antlrcpp::Any fugue_sqlParser::BucketSpecContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitBucketSpec(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::BucketSpecContext* fugue_sqlParser::bucketSpec() {
  BucketSpecContext *_localctx = _tracker.createInstance<BucketSpecContext>(_ctx, getState());
  enterRule(_localctx, 172, fugue_sqlParser::RuleBucketSpec);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2037);
    match(fugue_sqlParser::CLUSTERED);
    setState(2038);
    match(fugue_sqlParser::BY);
    setState(2039);
    identifierList();
    setState(2043);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == fugue_sqlParser::SORTED) {
      setState(2040);
      match(fugue_sqlParser::SORTED);
      setState(2041);
      match(fugue_sqlParser::BY);
      setState(2042);
      orderedIdentifierList();
    }
    setState(2045);
    match(fugue_sqlParser::INTO);
    setState(2046);
    match(fugue_sqlParser::INTEGER_VALUE);
    setState(2047);
    match(fugue_sqlParser::BUCKETS);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SkewSpecContext ------------------------------------------------------------------

fugue_sqlParser::SkewSpecContext::SkewSpecContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* fugue_sqlParser::SkewSpecContext::SKEWED() {
  return getToken(fugue_sqlParser::SKEWED, 0);
}

tree::TerminalNode* fugue_sqlParser::SkewSpecContext::BY() {
  return getToken(fugue_sqlParser::BY, 0);
}

fugue_sqlParser::IdentifierListContext* fugue_sqlParser::SkewSpecContext::identifierList() {
  return getRuleContext<fugue_sqlParser::IdentifierListContext>(0);
}

tree::TerminalNode* fugue_sqlParser::SkewSpecContext::ON() {
  return getToken(fugue_sqlParser::ON, 0);
}

fugue_sqlParser::ConstantListContext* fugue_sqlParser::SkewSpecContext::constantList() {
  return getRuleContext<fugue_sqlParser::ConstantListContext>(0);
}

fugue_sqlParser::NestedConstantListContext* fugue_sqlParser::SkewSpecContext::nestedConstantList() {
  return getRuleContext<fugue_sqlParser::NestedConstantListContext>(0);
}

tree::TerminalNode* fugue_sqlParser::SkewSpecContext::STORED() {
  return getToken(fugue_sqlParser::STORED, 0);
}

tree::TerminalNode* fugue_sqlParser::SkewSpecContext::AS() {
  return getToken(fugue_sqlParser::AS, 0);
}

tree::TerminalNode* fugue_sqlParser::SkewSpecContext::DIRECTORIES() {
  return getToken(fugue_sqlParser::DIRECTORIES, 0);
}


size_t fugue_sqlParser::SkewSpecContext::getRuleIndex() const {
  return fugue_sqlParser::RuleSkewSpec;
}


antlrcpp::Any fugue_sqlParser::SkewSpecContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitSkewSpec(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::SkewSpecContext* fugue_sqlParser::skewSpec() {
  SkewSpecContext *_localctx = _tracker.createInstance<SkewSpecContext>(_ctx, getState());
  enterRule(_localctx, 174, fugue_sqlParser::RuleSkewSpec);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2049);
    match(fugue_sqlParser::SKEWED);
    setState(2050);
    match(fugue_sqlParser::BY);
    setState(2051);
    identifierList();
    setState(2052);
    match(fugue_sqlParser::ON);
    setState(2055);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 246, _ctx)) {
    case 1: {
      setState(2053);
      constantList();
      break;
    }

    case 2: {
      setState(2054);
      nestedConstantList();
      break;
    }

    default:
      break;
    }
    setState(2060);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 247, _ctx)) {
    case 1: {
      setState(2057);
      match(fugue_sqlParser::STORED);
      setState(2058);
      match(fugue_sqlParser::AS);
      setState(2059);
      match(fugue_sqlParser::DIRECTORIES);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LocationSpecContext ------------------------------------------------------------------

fugue_sqlParser::LocationSpecContext::LocationSpecContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* fugue_sqlParser::LocationSpecContext::LOCATION() {
  return getToken(fugue_sqlParser::LOCATION, 0);
}

tree::TerminalNode* fugue_sqlParser::LocationSpecContext::STRING() {
  return getToken(fugue_sqlParser::STRING, 0);
}


size_t fugue_sqlParser::LocationSpecContext::getRuleIndex() const {
  return fugue_sqlParser::RuleLocationSpec;
}


antlrcpp::Any fugue_sqlParser::LocationSpecContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitLocationSpec(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::LocationSpecContext* fugue_sqlParser::locationSpec() {
  LocationSpecContext *_localctx = _tracker.createInstance<LocationSpecContext>(_ctx, getState());
  enterRule(_localctx, 176, fugue_sqlParser::RuleLocationSpec);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2062);
    match(fugue_sqlParser::LOCATION);
    setState(2063);
    match(fugue_sqlParser::STRING);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CommentSpecContext ------------------------------------------------------------------

fugue_sqlParser::CommentSpecContext::CommentSpecContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* fugue_sqlParser::CommentSpecContext::COMMENT() {
  return getToken(fugue_sqlParser::COMMENT, 0);
}

tree::TerminalNode* fugue_sqlParser::CommentSpecContext::STRING() {
  return getToken(fugue_sqlParser::STRING, 0);
}


size_t fugue_sqlParser::CommentSpecContext::getRuleIndex() const {
  return fugue_sqlParser::RuleCommentSpec;
}


antlrcpp::Any fugue_sqlParser::CommentSpecContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitCommentSpec(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::CommentSpecContext* fugue_sqlParser::commentSpec() {
  CommentSpecContext *_localctx = _tracker.createInstance<CommentSpecContext>(_ctx, getState());
  enterRule(_localctx, 178, fugue_sqlParser::RuleCommentSpec);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2065);
    match(fugue_sqlParser::COMMENT);
    setState(2066);
    match(fugue_sqlParser::STRING);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- QueryContext ------------------------------------------------------------------

fugue_sqlParser::QueryContext::QueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

fugue_sqlParser::QueryTermContext* fugue_sqlParser::QueryContext::queryTerm() {
  return getRuleContext<fugue_sqlParser::QueryTermContext>(0);
}

fugue_sqlParser::QueryOrganizationContext* fugue_sqlParser::QueryContext::queryOrganization() {
  return getRuleContext<fugue_sqlParser::QueryOrganizationContext>(0);
}

fugue_sqlParser::FugueSqlEngineContext* fugue_sqlParser::QueryContext::fugueSqlEngine() {
  return getRuleContext<fugue_sqlParser::FugueSqlEngineContext>(0);
}

fugue_sqlParser::CtesContext* fugue_sqlParser::QueryContext::ctes() {
  return getRuleContext<fugue_sqlParser::CtesContext>(0);
}


size_t fugue_sqlParser::QueryContext::getRuleIndex() const {
  return fugue_sqlParser::RuleQuery;
}


antlrcpp::Any fugue_sqlParser::QueryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitQuery(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::QueryContext* fugue_sqlParser::query() {
  QueryContext *_localctx = _tracker.createInstance<QueryContext>(_ctx, getState());
  enterRule(_localctx, 180, fugue_sqlParser::RuleQuery);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2069);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == fugue_sqlParser::CONNECT) {
      setState(2068);
      fugueSqlEngine();
    }
    setState(2072);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == fugue_sqlParser::WITH) {
      setState(2071);
      ctes();
    }
    setState(2074);
    queryTerm(0);
    setState(2075);
    queryOrganization();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InsertIntoContext ------------------------------------------------------------------

fugue_sqlParser::InsertIntoContext::InsertIntoContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t fugue_sqlParser::InsertIntoContext::getRuleIndex() const {
  return fugue_sqlParser::RuleInsertInto;
}

void fugue_sqlParser::InsertIntoContext::copyFrom(InsertIntoContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- InsertOverwriteHiveDirContext ------------------------------------------------------------------

tree::TerminalNode* fugue_sqlParser::InsertOverwriteHiveDirContext::INSERT() {
  return getToken(fugue_sqlParser::INSERT, 0);
}

tree::TerminalNode* fugue_sqlParser::InsertOverwriteHiveDirContext::OVERWRITE() {
  return getToken(fugue_sqlParser::OVERWRITE, 0);
}

tree::TerminalNode* fugue_sqlParser::InsertOverwriteHiveDirContext::DIRECTORY() {
  return getToken(fugue_sqlParser::DIRECTORY, 0);
}

tree::TerminalNode* fugue_sqlParser::InsertOverwriteHiveDirContext::STRING() {
  return getToken(fugue_sqlParser::STRING, 0);
}

tree::TerminalNode* fugue_sqlParser::InsertOverwriteHiveDirContext::LOCAL() {
  return getToken(fugue_sqlParser::LOCAL, 0);
}

fugue_sqlParser::RowFormatContext* fugue_sqlParser::InsertOverwriteHiveDirContext::rowFormat() {
  return getRuleContext<fugue_sqlParser::RowFormatContext>(0);
}

fugue_sqlParser::CreateFileFormatContext* fugue_sqlParser::InsertOverwriteHiveDirContext::createFileFormat() {
  return getRuleContext<fugue_sqlParser::CreateFileFormatContext>(0);
}

fugue_sqlParser::InsertOverwriteHiveDirContext::InsertOverwriteHiveDirContext(InsertIntoContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::InsertOverwriteHiveDirContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitInsertOverwriteHiveDir(this);
  else
    return visitor->visitChildren(this);
}
//----------------- InsertOverwriteDirContext ------------------------------------------------------------------

tree::TerminalNode* fugue_sqlParser::InsertOverwriteDirContext::INSERT() {
  return getToken(fugue_sqlParser::INSERT, 0);
}

tree::TerminalNode* fugue_sqlParser::InsertOverwriteDirContext::OVERWRITE() {
  return getToken(fugue_sqlParser::OVERWRITE, 0);
}

tree::TerminalNode* fugue_sqlParser::InsertOverwriteDirContext::DIRECTORY() {
  return getToken(fugue_sqlParser::DIRECTORY, 0);
}

fugue_sqlParser::TableProviderContext* fugue_sqlParser::InsertOverwriteDirContext::tableProvider() {
  return getRuleContext<fugue_sqlParser::TableProviderContext>(0);
}

tree::TerminalNode* fugue_sqlParser::InsertOverwriteDirContext::LOCAL() {
  return getToken(fugue_sqlParser::LOCAL, 0);
}

tree::TerminalNode* fugue_sqlParser::InsertOverwriteDirContext::OPTIONS() {
  return getToken(fugue_sqlParser::OPTIONS, 0);
}

tree::TerminalNode* fugue_sqlParser::InsertOverwriteDirContext::STRING() {
  return getToken(fugue_sqlParser::STRING, 0);
}

fugue_sqlParser::TablePropertyListContext* fugue_sqlParser::InsertOverwriteDirContext::tablePropertyList() {
  return getRuleContext<fugue_sqlParser::TablePropertyListContext>(0);
}

fugue_sqlParser::InsertOverwriteDirContext::InsertOverwriteDirContext(InsertIntoContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::InsertOverwriteDirContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitInsertOverwriteDir(this);
  else
    return visitor->visitChildren(this);
}
//----------------- InsertOverwriteTableContext ------------------------------------------------------------------

tree::TerminalNode* fugue_sqlParser::InsertOverwriteTableContext::INSERT() {
  return getToken(fugue_sqlParser::INSERT, 0);
}

tree::TerminalNode* fugue_sqlParser::InsertOverwriteTableContext::OVERWRITE() {
  return getToken(fugue_sqlParser::OVERWRITE, 0);
}

fugue_sqlParser::MultipartIdentifierContext* fugue_sqlParser::InsertOverwriteTableContext::multipartIdentifier() {
  return getRuleContext<fugue_sqlParser::MultipartIdentifierContext>(0);
}

tree::TerminalNode* fugue_sqlParser::InsertOverwriteTableContext::TABLE() {
  return getToken(fugue_sqlParser::TABLE, 0);
}

fugue_sqlParser::PartitionSpecContext* fugue_sqlParser::InsertOverwriteTableContext::partitionSpec() {
  return getRuleContext<fugue_sqlParser::PartitionSpecContext>(0);
}

tree::TerminalNode* fugue_sqlParser::InsertOverwriteTableContext::IF() {
  return getToken(fugue_sqlParser::IF, 0);
}

tree::TerminalNode* fugue_sqlParser::InsertOverwriteTableContext::NOT() {
  return getToken(fugue_sqlParser::NOT, 0);
}

tree::TerminalNode* fugue_sqlParser::InsertOverwriteTableContext::EXISTS() {
  return getToken(fugue_sqlParser::EXISTS, 0);
}

fugue_sqlParser::InsertOverwriteTableContext::InsertOverwriteTableContext(InsertIntoContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::InsertOverwriteTableContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitInsertOverwriteTable(this);
  else
    return visitor->visitChildren(this);
}
//----------------- InsertIntoTableContext ------------------------------------------------------------------

tree::TerminalNode* fugue_sqlParser::InsertIntoTableContext::INSERT() {
  return getToken(fugue_sqlParser::INSERT, 0);
}

tree::TerminalNode* fugue_sqlParser::InsertIntoTableContext::INTO() {
  return getToken(fugue_sqlParser::INTO, 0);
}

fugue_sqlParser::MultipartIdentifierContext* fugue_sqlParser::InsertIntoTableContext::multipartIdentifier() {
  return getRuleContext<fugue_sqlParser::MultipartIdentifierContext>(0);
}

tree::TerminalNode* fugue_sqlParser::InsertIntoTableContext::TABLE() {
  return getToken(fugue_sqlParser::TABLE, 0);
}

fugue_sqlParser::PartitionSpecContext* fugue_sqlParser::InsertIntoTableContext::partitionSpec() {
  return getRuleContext<fugue_sqlParser::PartitionSpecContext>(0);
}

tree::TerminalNode* fugue_sqlParser::InsertIntoTableContext::IF() {
  return getToken(fugue_sqlParser::IF, 0);
}

tree::TerminalNode* fugue_sqlParser::InsertIntoTableContext::NOT() {
  return getToken(fugue_sqlParser::NOT, 0);
}

tree::TerminalNode* fugue_sqlParser::InsertIntoTableContext::EXISTS() {
  return getToken(fugue_sqlParser::EXISTS, 0);
}

fugue_sqlParser::InsertIntoTableContext::InsertIntoTableContext(InsertIntoContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::InsertIntoTableContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitInsertIntoTable(this);
  else
    return visitor->visitChildren(this);
}
fugue_sqlParser::InsertIntoContext* fugue_sqlParser::insertInto() {
  InsertIntoContext *_localctx = _tracker.createInstance<InsertIntoContext>(_ctx, getState());
  enterRule(_localctx, 182, fugue_sqlParser::RuleInsertInto);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2132);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 262, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<fugue_sqlParser::InsertOverwriteTableContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(2077);
      match(fugue_sqlParser::INSERT);
      setState(2078);
      match(fugue_sqlParser::OVERWRITE);
      setState(2080);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 250, _ctx)) {
      case 1: {
        setState(2079);
        match(fugue_sqlParser::TABLE);
        break;
      }

      default:
        break;
      }
      setState(2082);
      multipartIdentifier();
      setState(2089);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::PARTITION) {
        setState(2083);
        partitionSpec();
        setState(2087);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == fugue_sqlParser::IF) {
          setState(2084);
          match(fugue_sqlParser::IF);
          setState(2085);
          match(fugue_sqlParser::NOT);
          setState(2086);
          match(fugue_sqlParser::EXISTS);
        }
      }
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<fugue_sqlParser::InsertIntoTableContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(2091);
      match(fugue_sqlParser::INSERT);
      setState(2092);
      match(fugue_sqlParser::INTO);
      setState(2094);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 253, _ctx)) {
      case 1: {
        setState(2093);
        match(fugue_sqlParser::TABLE);
        break;
      }

      default:
        break;
      }
      setState(2096);
      multipartIdentifier();
      setState(2098);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::PARTITION) {
        setState(2097);
        partitionSpec();
      }
      setState(2103);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::IF) {
        setState(2100);
        match(fugue_sqlParser::IF);
        setState(2101);
        match(fugue_sqlParser::NOT);
        setState(2102);
        match(fugue_sqlParser::EXISTS);
      }
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<fugue_sqlParser::InsertOverwriteHiveDirContext>(_localctx);
      enterOuterAlt(_localctx, 3);
      setState(2105);
      match(fugue_sqlParser::INSERT);
      setState(2106);
      match(fugue_sqlParser::OVERWRITE);
      setState(2108);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::LOCAL) {
        setState(2107);
        match(fugue_sqlParser::LOCAL);
      }
      setState(2110);
      match(fugue_sqlParser::DIRECTORY);
      setState(2111);
      antlrcpp::downCast<InsertOverwriteHiveDirContext *>(_localctx)->path = match(fugue_sqlParser::STRING);
      setState(2113);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::ROW) {
        setState(2112);
        rowFormat();
      }
      setState(2116);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::STORED) {
        setState(2115);
        createFileFormat();
      }
      break;
    }

    case 4: {
      _localctx = _tracker.createInstance<fugue_sqlParser::InsertOverwriteDirContext>(_localctx);
      enterOuterAlt(_localctx, 4);
      setState(2118);
      match(fugue_sqlParser::INSERT);
      setState(2119);
      match(fugue_sqlParser::OVERWRITE);
      setState(2121);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::LOCAL) {
        setState(2120);
        match(fugue_sqlParser::LOCAL);
      }
      setState(2123);
      match(fugue_sqlParser::DIRECTORY);
      setState(2125);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::STRING) {
        setState(2124);
        antlrcpp::downCast<InsertOverwriteDirContext *>(_localctx)->path = match(fugue_sqlParser::STRING);
      }
      setState(2127);
      tableProvider();
      setState(2130);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::OPTIONS) {
        setState(2128);
        match(fugue_sqlParser::OPTIONS);
        setState(2129);
        antlrcpp::downCast<InsertOverwriteDirContext *>(_localctx)->options = tablePropertyList();
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PartitionSpecLocationContext ------------------------------------------------------------------

fugue_sqlParser::PartitionSpecLocationContext::PartitionSpecLocationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

fugue_sqlParser::PartitionSpecContext* fugue_sqlParser::PartitionSpecLocationContext::partitionSpec() {
  return getRuleContext<fugue_sqlParser::PartitionSpecContext>(0);
}

fugue_sqlParser::LocationSpecContext* fugue_sqlParser::PartitionSpecLocationContext::locationSpec() {
  return getRuleContext<fugue_sqlParser::LocationSpecContext>(0);
}


size_t fugue_sqlParser::PartitionSpecLocationContext::getRuleIndex() const {
  return fugue_sqlParser::RulePartitionSpecLocation;
}


antlrcpp::Any fugue_sqlParser::PartitionSpecLocationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitPartitionSpecLocation(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::PartitionSpecLocationContext* fugue_sqlParser::partitionSpecLocation() {
  PartitionSpecLocationContext *_localctx = _tracker.createInstance<PartitionSpecLocationContext>(_ctx, getState());
  enterRule(_localctx, 184, fugue_sqlParser::RulePartitionSpecLocation);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2134);
    partitionSpec();
    setState(2136);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == fugue_sqlParser::LOCATION) {
      setState(2135);
      locationSpec();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PartitionSpecContext ------------------------------------------------------------------

fugue_sqlParser::PartitionSpecContext::PartitionSpecContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* fugue_sqlParser::PartitionSpecContext::PARTITION() {
  return getToken(fugue_sqlParser::PARTITION, 0);
}

std::vector<fugue_sqlParser::PartitionValContext *> fugue_sqlParser::PartitionSpecContext::partitionVal() {
  return getRuleContexts<fugue_sqlParser::PartitionValContext>();
}

fugue_sqlParser::PartitionValContext* fugue_sqlParser::PartitionSpecContext::partitionVal(size_t i) {
  return getRuleContext<fugue_sqlParser::PartitionValContext>(i);
}


size_t fugue_sqlParser::PartitionSpecContext::getRuleIndex() const {
  return fugue_sqlParser::RulePartitionSpec;
}


antlrcpp::Any fugue_sqlParser::PartitionSpecContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitPartitionSpec(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::PartitionSpecContext* fugue_sqlParser::partitionSpec() {
  PartitionSpecContext *_localctx = _tracker.createInstance<PartitionSpecContext>(_ctx, getState());
  enterRule(_localctx, 186, fugue_sqlParser::RulePartitionSpec);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2138);
    match(fugue_sqlParser::PARTITION);
    setState(2139);
    match(fugue_sqlParser::T__2);
    setState(2140);
    partitionVal();
    setState(2145);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == fugue_sqlParser::T__0) {
      setState(2141);
      match(fugue_sqlParser::T__0);
      setState(2142);
      partitionVal();
      setState(2147);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2148);
    match(fugue_sqlParser::T__3);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PartitionValContext ------------------------------------------------------------------

fugue_sqlParser::PartitionValContext::PartitionValContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

fugue_sqlParser::IdentifierContext* fugue_sqlParser::PartitionValContext::identifier() {
  return getRuleContext<fugue_sqlParser::IdentifierContext>(0);
}

tree::TerminalNode* fugue_sqlParser::PartitionValContext::EQUAL() {
  return getToken(fugue_sqlParser::EQUAL, 0);
}

fugue_sqlParser::ConstantContext* fugue_sqlParser::PartitionValContext::constant() {
  return getRuleContext<fugue_sqlParser::ConstantContext>(0);
}


size_t fugue_sqlParser::PartitionValContext::getRuleIndex() const {
  return fugue_sqlParser::RulePartitionVal;
}


antlrcpp::Any fugue_sqlParser::PartitionValContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitPartitionVal(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::PartitionValContext* fugue_sqlParser::partitionVal() {
  PartitionValContext *_localctx = _tracker.createInstance<PartitionValContext>(_ctx, getState());
  enterRule(_localctx, 188, fugue_sqlParser::RulePartitionVal);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2150);
    identifier();
    setState(2153);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == fugue_sqlParser::EQUAL) {
      setState(2151);
      match(fugue_sqlParser::EQUAL);
      setState(2152);
      constant();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TheNamespaceContext ------------------------------------------------------------------

fugue_sqlParser::TheNamespaceContext::TheNamespaceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* fugue_sqlParser::TheNamespaceContext::NAMESPACE() {
  return getToken(fugue_sqlParser::NAMESPACE, 0);
}

tree::TerminalNode* fugue_sqlParser::TheNamespaceContext::DATABASE() {
  return getToken(fugue_sqlParser::DATABASE, 0);
}

tree::TerminalNode* fugue_sqlParser::TheNamespaceContext::SCHEMA() {
  return getToken(fugue_sqlParser::SCHEMA, 0);
}


size_t fugue_sqlParser::TheNamespaceContext::getRuleIndex() const {
  return fugue_sqlParser::RuleTheNamespace;
}


antlrcpp::Any fugue_sqlParser::TheNamespaceContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitTheNamespace(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::TheNamespaceContext* fugue_sqlParser::theNamespace() {
  TheNamespaceContext *_localctx = _tracker.createInstance<TheNamespaceContext>(_ctx, getState());
  enterRule(_localctx, 190, fugue_sqlParser::RuleTheNamespace);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2155);
    _la = _input->LA(1);
    if (!(_la == fugue_sqlParser::DATABASE || _la == fugue_sqlParser::NAMESPACE

    || _la == fugue_sqlParser::SCHEMA)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DescribeFuncNameContext ------------------------------------------------------------------

fugue_sqlParser::DescribeFuncNameContext::DescribeFuncNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

fugue_sqlParser::QualifiedNameContext* fugue_sqlParser::DescribeFuncNameContext::qualifiedName() {
  return getRuleContext<fugue_sqlParser::QualifiedNameContext>(0);
}

tree::TerminalNode* fugue_sqlParser::DescribeFuncNameContext::STRING() {
  return getToken(fugue_sqlParser::STRING, 0);
}

fugue_sqlParser::ComparisonOperatorContext* fugue_sqlParser::DescribeFuncNameContext::comparisonOperator() {
  return getRuleContext<fugue_sqlParser::ComparisonOperatorContext>(0);
}

fugue_sqlParser::ArithmeticOperatorContext* fugue_sqlParser::DescribeFuncNameContext::arithmeticOperator() {
  return getRuleContext<fugue_sqlParser::ArithmeticOperatorContext>(0);
}

fugue_sqlParser::PredicateOperatorContext* fugue_sqlParser::DescribeFuncNameContext::predicateOperator() {
  return getRuleContext<fugue_sqlParser::PredicateOperatorContext>(0);
}


size_t fugue_sqlParser::DescribeFuncNameContext::getRuleIndex() const {
  return fugue_sqlParser::RuleDescribeFuncName;
}


antlrcpp::Any fugue_sqlParser::DescribeFuncNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitDescribeFuncName(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::DescribeFuncNameContext* fugue_sqlParser::describeFuncName() {
  DescribeFuncNameContext *_localctx = _tracker.createInstance<DescribeFuncNameContext>(_ctx, getState());
  enterRule(_localctx, 192, fugue_sqlParser::RuleDescribeFuncName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2162);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 266, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2157);
      qualifiedName();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2158);
      match(fugue_sqlParser::STRING);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2159);
      comparisonOperator();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2160);
      arithmeticOperator();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(2161);
      predicateOperator();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DescribeColNameContext ------------------------------------------------------------------

fugue_sqlParser::DescribeColNameContext::DescribeColNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<fugue_sqlParser::IdentifierContext *> fugue_sqlParser::DescribeColNameContext::identifier() {
  return getRuleContexts<fugue_sqlParser::IdentifierContext>();
}

fugue_sqlParser::IdentifierContext* fugue_sqlParser::DescribeColNameContext::identifier(size_t i) {
  return getRuleContext<fugue_sqlParser::IdentifierContext>(i);
}


size_t fugue_sqlParser::DescribeColNameContext::getRuleIndex() const {
  return fugue_sqlParser::RuleDescribeColName;
}


antlrcpp::Any fugue_sqlParser::DescribeColNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitDescribeColName(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::DescribeColNameContext* fugue_sqlParser::describeColName() {
  DescribeColNameContext *_localctx = _tracker.createInstance<DescribeColNameContext>(_ctx, getState());
  enterRule(_localctx, 194, fugue_sqlParser::RuleDescribeColName);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2164);
    antlrcpp::downCast<DescribeColNameContext *>(_localctx)->identifierContext = identifier();
    antlrcpp::downCast<DescribeColNameContext *>(_localctx)->nameParts.push_back(antlrcpp::downCast<DescribeColNameContext *>(_localctx)->identifierContext);
    setState(2169);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == fugue_sqlParser::T__6) {
      setState(2165);
      match(fugue_sqlParser::T__6);
      setState(2166);
      antlrcpp::downCast<DescribeColNameContext *>(_localctx)->identifierContext = identifier();
      antlrcpp::downCast<DescribeColNameContext *>(_localctx)->nameParts.push_back(antlrcpp::downCast<DescribeColNameContext *>(_localctx)->identifierContext);
      setState(2171);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CtesContext ------------------------------------------------------------------

fugue_sqlParser::CtesContext::CtesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* fugue_sqlParser::CtesContext::WITH() {
  return getToken(fugue_sqlParser::WITH, 0);
}

std::vector<fugue_sqlParser::NamedQueryContext *> fugue_sqlParser::CtesContext::namedQuery() {
  return getRuleContexts<fugue_sqlParser::NamedQueryContext>();
}

fugue_sqlParser::NamedQueryContext* fugue_sqlParser::CtesContext::namedQuery(size_t i) {
  return getRuleContext<fugue_sqlParser::NamedQueryContext>(i);
}


size_t fugue_sqlParser::CtesContext::getRuleIndex() const {
  return fugue_sqlParser::RuleCtes;
}


antlrcpp::Any fugue_sqlParser::CtesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitCtes(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::CtesContext* fugue_sqlParser::ctes() {
  CtesContext *_localctx = _tracker.createInstance<CtesContext>(_ctx, getState());
  enterRule(_localctx, 196, fugue_sqlParser::RuleCtes);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2172);
    match(fugue_sqlParser::WITH);
    setState(2173);
    namedQuery();
    setState(2178);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == fugue_sqlParser::T__0) {
      setState(2174);
      match(fugue_sqlParser::T__0);
      setState(2175);
      namedQuery();
      setState(2180);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NamedQueryContext ------------------------------------------------------------------

fugue_sqlParser::NamedQueryContext::NamedQueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

fugue_sqlParser::QueryContext* fugue_sqlParser::NamedQueryContext::query() {
  return getRuleContext<fugue_sqlParser::QueryContext>(0);
}

fugue_sqlParser::ErrorCapturingIdentifierContext* fugue_sqlParser::NamedQueryContext::errorCapturingIdentifier() {
  return getRuleContext<fugue_sqlParser::ErrorCapturingIdentifierContext>(0);
}

tree::TerminalNode* fugue_sqlParser::NamedQueryContext::AS() {
  return getToken(fugue_sqlParser::AS, 0);
}

fugue_sqlParser::IdentifierListContext* fugue_sqlParser::NamedQueryContext::identifierList() {
  return getRuleContext<fugue_sqlParser::IdentifierListContext>(0);
}


size_t fugue_sqlParser::NamedQueryContext::getRuleIndex() const {
  return fugue_sqlParser::RuleNamedQuery;
}


antlrcpp::Any fugue_sqlParser::NamedQueryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitNamedQuery(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::NamedQueryContext* fugue_sqlParser::namedQuery() {
  NamedQueryContext *_localctx = _tracker.createInstance<NamedQueryContext>(_ctx, getState());
  enterRule(_localctx, 198, fugue_sqlParser::RuleNamedQuery);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2181);
    antlrcpp::downCast<NamedQueryContext *>(_localctx)->name = errorCapturingIdentifier();
    setState(2183);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 269, _ctx)) {
    case 1: {
      setState(2182);
      antlrcpp::downCast<NamedQueryContext *>(_localctx)->columnAliases = identifierList();
      break;
    }

    default:
      break;
    }
    setState(2186);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == fugue_sqlParser::AS) {
      setState(2185);
      match(fugue_sqlParser::AS);
    }
    setState(2188);
    match(fugue_sqlParser::T__2);
    setState(2189);
    query();
    setState(2190);
    match(fugue_sqlParser::T__3);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TableProviderContext ------------------------------------------------------------------

fugue_sqlParser::TableProviderContext::TableProviderContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* fugue_sqlParser::TableProviderContext::USING() {
  return getToken(fugue_sqlParser::USING, 0);
}

fugue_sqlParser::MultipartIdentifierContext* fugue_sqlParser::TableProviderContext::multipartIdentifier() {
  return getRuleContext<fugue_sqlParser::MultipartIdentifierContext>(0);
}


size_t fugue_sqlParser::TableProviderContext::getRuleIndex() const {
  return fugue_sqlParser::RuleTableProvider;
}


antlrcpp::Any fugue_sqlParser::TableProviderContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitTableProvider(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::TableProviderContext* fugue_sqlParser::tableProvider() {
  TableProviderContext *_localctx = _tracker.createInstance<TableProviderContext>(_ctx, getState());
  enterRule(_localctx, 200, fugue_sqlParser::RuleTableProvider);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2192);
    match(fugue_sqlParser::USING);
    setState(2193);
    multipartIdentifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CreateTableClausesContext ------------------------------------------------------------------

fugue_sqlParser::CreateTableClausesContext::CreateTableClausesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<fugue_sqlParser::BucketSpecContext *> fugue_sqlParser::CreateTableClausesContext::bucketSpec() {
  return getRuleContexts<fugue_sqlParser::BucketSpecContext>();
}

fugue_sqlParser::BucketSpecContext* fugue_sqlParser::CreateTableClausesContext::bucketSpec(size_t i) {
  return getRuleContext<fugue_sqlParser::BucketSpecContext>(i);
}

std::vector<fugue_sqlParser::LocationSpecContext *> fugue_sqlParser::CreateTableClausesContext::locationSpec() {
  return getRuleContexts<fugue_sqlParser::LocationSpecContext>();
}

fugue_sqlParser::LocationSpecContext* fugue_sqlParser::CreateTableClausesContext::locationSpec(size_t i) {
  return getRuleContext<fugue_sqlParser::LocationSpecContext>(i);
}

std::vector<fugue_sqlParser::CommentSpecContext *> fugue_sqlParser::CreateTableClausesContext::commentSpec() {
  return getRuleContexts<fugue_sqlParser::CommentSpecContext>();
}

fugue_sqlParser::CommentSpecContext* fugue_sqlParser::CreateTableClausesContext::commentSpec(size_t i) {
  return getRuleContext<fugue_sqlParser::CommentSpecContext>(i);
}

std::vector<tree::TerminalNode *> fugue_sqlParser::CreateTableClausesContext::OPTIONS() {
  return getTokens(fugue_sqlParser::OPTIONS);
}

tree::TerminalNode* fugue_sqlParser::CreateTableClausesContext::OPTIONS(size_t i) {
  return getToken(fugue_sqlParser::OPTIONS, i);
}

std::vector<tree::TerminalNode *> fugue_sqlParser::CreateTableClausesContext::PARTITIONED() {
  return getTokens(fugue_sqlParser::PARTITIONED);
}

tree::TerminalNode* fugue_sqlParser::CreateTableClausesContext::PARTITIONED(size_t i) {
  return getToken(fugue_sqlParser::PARTITIONED, i);
}

std::vector<tree::TerminalNode *> fugue_sqlParser::CreateTableClausesContext::BY() {
  return getTokens(fugue_sqlParser::BY);
}

tree::TerminalNode* fugue_sqlParser::CreateTableClausesContext::BY(size_t i) {
  return getToken(fugue_sqlParser::BY, i);
}

std::vector<tree::TerminalNode *> fugue_sqlParser::CreateTableClausesContext::TBLPROPERTIES() {
  return getTokens(fugue_sqlParser::TBLPROPERTIES);
}

tree::TerminalNode* fugue_sqlParser::CreateTableClausesContext::TBLPROPERTIES(size_t i) {
  return getToken(fugue_sqlParser::TBLPROPERTIES, i);
}

std::vector<fugue_sqlParser::TablePropertyListContext *> fugue_sqlParser::CreateTableClausesContext::tablePropertyList() {
  return getRuleContexts<fugue_sqlParser::TablePropertyListContext>();
}

fugue_sqlParser::TablePropertyListContext* fugue_sqlParser::CreateTableClausesContext::tablePropertyList(size_t i) {
  return getRuleContext<fugue_sqlParser::TablePropertyListContext>(i);
}

std::vector<fugue_sqlParser::TransformListContext *> fugue_sqlParser::CreateTableClausesContext::transformList() {
  return getRuleContexts<fugue_sqlParser::TransformListContext>();
}

fugue_sqlParser::TransformListContext* fugue_sqlParser::CreateTableClausesContext::transformList(size_t i) {
  return getRuleContext<fugue_sqlParser::TransformListContext>(i);
}


size_t fugue_sqlParser::CreateTableClausesContext::getRuleIndex() const {
  return fugue_sqlParser::RuleCreateTableClauses;
}


antlrcpp::Any fugue_sqlParser::CreateTableClausesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitCreateTableClauses(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::CreateTableClausesContext* fugue_sqlParser::createTableClauses() {
  CreateTableClausesContext *_localctx = _tracker.createInstance<CreateTableClausesContext>(_ctx, getState());
  enterRule(_localctx, 202, fugue_sqlParser::RuleCreateTableClauses);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2207);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == fugue_sqlParser::CLUSTERED

    || _la == fugue_sqlParser::COMMENT || ((((_la - 179) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 179)) & ((1ULL << (fugue_sqlParser::LOCATION - 179))
      | (1ULL << (fugue_sqlParser::OPTIONS - 179))
      | (1ULL << (fugue_sqlParser::PARTITIONED - 179)))) != 0) || _la == fugue_sqlParser::TBLPROPERTIES) {
      setState(2205);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case fugue_sqlParser::OPTIONS: {
          setState(2195);
          match(fugue_sqlParser::OPTIONS);
          setState(2196);
          antlrcpp::downCast<CreateTableClausesContext *>(_localctx)->options = tablePropertyList();
          break;
        }

        case fugue_sqlParser::PARTITIONED: {
          setState(2197);
          match(fugue_sqlParser::PARTITIONED);
          setState(2198);
          match(fugue_sqlParser::BY);
          setState(2199);
          antlrcpp::downCast<CreateTableClausesContext *>(_localctx)->partitioning = transformList();
          break;
        }

        case fugue_sqlParser::CLUSTERED: {
          setState(2200);
          bucketSpec();
          break;
        }

        case fugue_sqlParser::LOCATION: {
          setState(2201);
          locationSpec();
          break;
        }

        case fugue_sqlParser::COMMENT: {
          setState(2202);
          commentSpec();
          break;
        }

        case fugue_sqlParser::TBLPROPERTIES: {
          setState(2203);
          match(fugue_sqlParser::TBLPROPERTIES);
          setState(2204);
          antlrcpp::downCast<CreateTableClausesContext *>(_localctx)->tableProps = tablePropertyList();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(2209);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TablePropertyListContext ------------------------------------------------------------------

fugue_sqlParser::TablePropertyListContext::TablePropertyListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<fugue_sqlParser::TablePropertyContext *> fugue_sqlParser::TablePropertyListContext::tableProperty() {
  return getRuleContexts<fugue_sqlParser::TablePropertyContext>();
}

fugue_sqlParser::TablePropertyContext* fugue_sqlParser::TablePropertyListContext::tableProperty(size_t i) {
  return getRuleContext<fugue_sqlParser::TablePropertyContext>(i);
}


size_t fugue_sqlParser::TablePropertyListContext::getRuleIndex() const {
  return fugue_sqlParser::RuleTablePropertyList;
}


antlrcpp::Any fugue_sqlParser::TablePropertyListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitTablePropertyList(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::TablePropertyListContext* fugue_sqlParser::tablePropertyList() {
  TablePropertyListContext *_localctx = _tracker.createInstance<TablePropertyListContext>(_ctx, getState());
  enterRule(_localctx, 204, fugue_sqlParser::RuleTablePropertyList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2210);
    match(fugue_sqlParser::T__2);
    setState(2211);
    tableProperty();
    setState(2216);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == fugue_sqlParser::T__0) {
      setState(2212);
      match(fugue_sqlParser::T__0);
      setState(2213);
      tableProperty();
      setState(2218);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2219);
    match(fugue_sqlParser::T__3);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TablePropertyContext ------------------------------------------------------------------

fugue_sqlParser::TablePropertyContext::TablePropertyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

fugue_sqlParser::TablePropertyKeyContext* fugue_sqlParser::TablePropertyContext::tablePropertyKey() {
  return getRuleContext<fugue_sqlParser::TablePropertyKeyContext>(0);
}

fugue_sqlParser::TablePropertyValueContext* fugue_sqlParser::TablePropertyContext::tablePropertyValue() {
  return getRuleContext<fugue_sqlParser::TablePropertyValueContext>(0);
}

tree::TerminalNode* fugue_sqlParser::TablePropertyContext::EQUAL() {
  return getToken(fugue_sqlParser::EQUAL, 0);
}


size_t fugue_sqlParser::TablePropertyContext::getRuleIndex() const {
  return fugue_sqlParser::RuleTableProperty;
}


antlrcpp::Any fugue_sqlParser::TablePropertyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitTableProperty(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::TablePropertyContext* fugue_sqlParser::tableProperty() {
  TablePropertyContext *_localctx = _tracker.createInstance<TablePropertyContext>(_ctx, getState());
  enterRule(_localctx, 206, fugue_sqlParser::RuleTableProperty);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2221);
    antlrcpp::downCast<TablePropertyContext *>(_localctx)->key = tablePropertyKey();
    setState(2226);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == fugue_sqlParser::FALSE || ((((_la - 282) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 282)) & ((1ULL << (fugue_sqlParser::TRUE - 282))
      | (1ULL << (fugue_sqlParser::EQUAL - 282))
      | (1ULL << (fugue_sqlParser::STRING - 282))
      | (1ULL << (fugue_sqlParser::INTEGER_VALUE - 282))
      | (1ULL << (fugue_sqlParser::DECIMAL_VALUE - 282)))) != 0)) {
      setState(2223);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::EQUAL) {
        setState(2222);
        match(fugue_sqlParser::EQUAL);
      }
      setState(2225);
      antlrcpp::downCast<TablePropertyContext *>(_localctx)->value = tablePropertyValue();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TablePropertyKeyContext ------------------------------------------------------------------

fugue_sqlParser::TablePropertyKeyContext::TablePropertyKeyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<fugue_sqlParser::IdentifierContext *> fugue_sqlParser::TablePropertyKeyContext::identifier() {
  return getRuleContexts<fugue_sqlParser::IdentifierContext>();
}

fugue_sqlParser::IdentifierContext* fugue_sqlParser::TablePropertyKeyContext::identifier(size_t i) {
  return getRuleContext<fugue_sqlParser::IdentifierContext>(i);
}

tree::TerminalNode* fugue_sqlParser::TablePropertyKeyContext::STRING() {
  return getToken(fugue_sqlParser::STRING, 0);
}


size_t fugue_sqlParser::TablePropertyKeyContext::getRuleIndex() const {
  return fugue_sqlParser::RuleTablePropertyKey;
}


antlrcpp::Any fugue_sqlParser::TablePropertyKeyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitTablePropertyKey(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::TablePropertyKeyContext* fugue_sqlParser::tablePropertyKey() {
  TablePropertyKeyContext *_localctx = _tracker.createInstance<TablePropertyKeyContext>(_ctx, getState());
  enterRule(_localctx, 208, fugue_sqlParser::RuleTablePropertyKey);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2237);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case fugue_sqlParser::ADD:
      case fugue_sqlParser::AFTER:
      case fugue_sqlParser::ALL:
      case fugue_sqlParser::ALTER:
      case fugue_sqlParser::ANALYZE:
      case fugue_sqlParser::AND:
      case fugue_sqlParser::ANTI:
      case fugue_sqlParser::ANY:
      case fugue_sqlParser::ARCHIVE:
      case fugue_sqlParser::ARRAY:
      case fugue_sqlParser::AS:
      case fugue_sqlParser::ASC:
      case fugue_sqlParser::AT:
      case fugue_sqlParser::AUTHORIZATION:
      case fugue_sqlParser::BETWEEN:
      case fugue_sqlParser::BOTH:
      case fugue_sqlParser::BUCKET:
      case fugue_sqlParser::BUCKETS:
      case fugue_sqlParser::BY:
      case fugue_sqlParser::CACHE:
      case fugue_sqlParser::CASCADE:
      case fugue_sqlParser::CASE:
      case fugue_sqlParser::CAST:
      case fugue_sqlParser::CHANGE:
      case fugue_sqlParser::CHECK:
      case fugue_sqlParser::CLEAR:
      case fugue_sqlParser::CLUSTER:
      case fugue_sqlParser::CLUSTERED:
      case fugue_sqlParser::CODEGEN:
      case fugue_sqlParser::COLLATE:
      case fugue_sqlParser::COLLECTION:
      case fugue_sqlParser::COLUMN:
      case fugue_sqlParser::COLUMNS:
      case fugue_sqlParser::COMMENT:
      case fugue_sqlParser::COMMIT:
      case fugue_sqlParser::COMPACT:
      case fugue_sqlParser::COMPACTIONS:
      case fugue_sqlParser::COMPUTE:
      case fugue_sqlParser::CONCATENATE:
      case fugue_sqlParser::CONSTRAINT:
      case fugue_sqlParser::COST:
      case fugue_sqlParser::CREATE:
      case fugue_sqlParser::CROSS:
      case fugue_sqlParser::CUBE:
      case fugue_sqlParser::CURRENT:
      case fugue_sqlParser::CURRENT_DATE:
      case fugue_sqlParser::CURRENT_TIME:
      case fugue_sqlParser::CURRENT_TIMESTAMP:
      case fugue_sqlParser::CURRENT_USER:
      case fugue_sqlParser::DATA:
      case fugue_sqlParser::DATABASE:
      case fugue_sqlParser::DATABASES:
      case fugue_sqlParser::DAY:
      case fugue_sqlParser::DBPROPERTIES:
      case fugue_sqlParser::DEFINED:
      case fugue_sqlParser::DELETE:
      case fugue_sqlParser::DELIMITED:
      case fugue_sqlParser::DESC:
      case fugue_sqlParser::DESCRIBE:
      case fugue_sqlParser::DFS:
      case fugue_sqlParser::DIRECTORIES:
      case fugue_sqlParser::DIRECTORY:
      case fugue_sqlParser::DISTINCT:
      case fugue_sqlParser::DISTRIBUTE:
      case fugue_sqlParser::DROP:
      case fugue_sqlParser::ELSE:
      case fugue_sqlParser::END:
      case fugue_sqlParser::ESCAPE:
      case fugue_sqlParser::ESCAPED:
      case fugue_sqlParser::EXCEPT:
      case fugue_sqlParser::EXCHANGE:
      case fugue_sqlParser::EXISTS:
      case fugue_sqlParser::EXPLAIN:
      case fugue_sqlParser::EXPORT:
      case fugue_sqlParser::EXTENDED:
      case fugue_sqlParser::EXTERNAL:
      case fugue_sqlParser::EXTRACT:
      case fugue_sqlParser::FALSE:
      case fugue_sqlParser::FETCH:
      case fugue_sqlParser::FIELDS:
      case fugue_sqlParser::FILTER:
      case fugue_sqlParser::FILEFORMAT:
      case fugue_sqlParser::FIRST:
      case fugue_sqlParser::FOLLOWING:
      case fugue_sqlParser::FOR:
      case fugue_sqlParser::FOREIGN:
      case fugue_sqlParser::FORMAT:
      case fugue_sqlParser::FORMATTED:
      case fugue_sqlParser::FROM:
      case fugue_sqlParser::FULL:
      case fugue_sqlParser::FUNCTION:
      case fugue_sqlParser::FUNCTIONS:
      case fugue_sqlParser::GLOBAL:
      case fugue_sqlParser::GRANT:
      case fugue_sqlParser::GROUP:
      case fugue_sqlParser::GROUPING:
      case fugue_sqlParser::HAVING:
      case fugue_sqlParser::HOUR:
      case fugue_sqlParser::IF:
      case fugue_sqlParser::IGNORE:
      case fugue_sqlParser::IMPORT:
      case fugue_sqlParser::IN:
      case fugue_sqlParser::INDEX:
      case fugue_sqlParser::INDEXES:
      case fugue_sqlParser::INNER:
      case fugue_sqlParser::INPATH:
      case fugue_sqlParser::INPUTFORMAT:
      case fugue_sqlParser::INSERT:
      case fugue_sqlParser::INTERSECT:
      case fugue_sqlParser::INTERVAL:
      case fugue_sqlParser::INTO:
      case fugue_sqlParser::IS:
      case fugue_sqlParser::ITEMS:
      case fugue_sqlParser::JOIN:
      case fugue_sqlParser::KEYS:
      case fugue_sqlParser::LAST:
      case fugue_sqlParser::LATERAL:
      case fugue_sqlParser::LAZY:
      case fugue_sqlParser::LEADING:
      case fugue_sqlParser::LEFT:
      case fugue_sqlParser::LIKE:
      case fugue_sqlParser::LIMIT:
      case fugue_sqlParser::LINES:
      case fugue_sqlParser::LIST:
      case fugue_sqlParser::LOAD:
      case fugue_sqlParser::LOCAL:
      case fugue_sqlParser::LOCATION:
      case fugue_sqlParser::LOCK:
      case fugue_sqlParser::LOCKS:
      case fugue_sqlParser::LOGICAL:
      case fugue_sqlParser::MACRO:
      case fugue_sqlParser::MAP:
      case fugue_sqlParser::MATCHED:
      case fugue_sqlParser::MERGE:
      case fugue_sqlParser::MINUTE:
      case fugue_sqlParser::MONTH:
      case fugue_sqlParser::MSCK:
      case fugue_sqlParser::NAMESPACE:
      case fugue_sqlParser::NAMESPACES:
      case fugue_sqlParser::NATURAL:
      case fugue_sqlParser::NO:
      case fugue_sqlParser::NOT:
      case fugue_sqlParser::THENULL:
      case fugue_sqlParser::THENULLS:
      case fugue_sqlParser::OF:
      case fugue_sqlParser::ON:
      case fugue_sqlParser::ONLY:
      case fugue_sqlParser::OPTION:
      case fugue_sqlParser::OPTIONS:
      case fugue_sqlParser::OR:
      case fugue_sqlParser::ORDER:
      case fugue_sqlParser::OUT:
      case fugue_sqlParser::OUTER:
      case fugue_sqlParser::OUTPUTFORMAT:
      case fugue_sqlParser::OVER:
      case fugue_sqlParser::OVERLAPS:
      case fugue_sqlParser::OVERLAY:
      case fugue_sqlParser::OVERWRITE:
      case fugue_sqlParser::PARTITION:
      case fugue_sqlParser::PARTITIONED:
      case fugue_sqlParser::PARTITIONS:
      case fugue_sqlParser::PERCENTLIT:
      case fugue_sqlParser::PIVOT:
      case fugue_sqlParser::PLACING:
      case fugue_sqlParser::POSITION:
      case fugue_sqlParser::PRECEDING:
      case fugue_sqlParser::PRIMARY:
      case fugue_sqlParser::PRINCIPALS:
      case fugue_sqlParser::PROPERTIES:
      case fugue_sqlParser::PURGE:
      case fugue_sqlParser::QUERY:
      case fugue_sqlParser::RANGE:
      case fugue_sqlParser::RECORDREADER:
      case fugue_sqlParser::RECORDWRITER:
      case fugue_sqlParser::RECOVER:
      case fugue_sqlParser::REDUCE:
      case fugue_sqlParser::REFERENCES:
      case fugue_sqlParser::REFRESH:
      case fugue_sqlParser::RENAME:
      case fugue_sqlParser::REPAIR:
      case fugue_sqlParser::REPLACE:
      case fugue_sqlParser::RESET:
      case fugue_sqlParser::RESTRICT:
      case fugue_sqlParser::REVOKE:
      case fugue_sqlParser::RIGHT:
      case fugue_sqlParser::RLIKE:
      case fugue_sqlParser::ROLE:
      case fugue_sqlParser::ROLES:
      case fugue_sqlParser::ROLLBACK:
      case fugue_sqlParser::ROLLUP:
      case fugue_sqlParser::ROW:
      case fugue_sqlParser::ROWS:
      case fugue_sqlParser::SCHEMA:
      case fugue_sqlParser::SECOND:
      case fugue_sqlParser::SELECT:
      case fugue_sqlParser::SEMI:
      case fugue_sqlParser::SEPARATED:
      case fugue_sqlParser::SERDE:
      case fugue_sqlParser::SERDEPROPERTIES:
      case fugue_sqlParser::SESSION_USER:
      case fugue_sqlParser::SET:
      case fugue_sqlParser::SETMINUS:
      case fugue_sqlParser::SETS:
      case fugue_sqlParser::SHOW:
      case fugue_sqlParser::SKEWED:
      case fugue_sqlParser::SOME:
      case fugue_sqlParser::SORT:
      case fugue_sqlParser::SORTED:
      case fugue_sqlParser::START:
      case fugue_sqlParser::STATISTICS:
      case fugue_sqlParser::STORED:
      case fugue_sqlParser::STRATIFY:
      case fugue_sqlParser::STRUCT:
      case fugue_sqlParser::SUBSTR:
      case fugue_sqlParser::SUBSTRING:
      case fugue_sqlParser::TABLE:
      case fugue_sqlParser::TABLES:
      case fugue_sqlParser::TABLESAMPLE:
      case fugue_sqlParser::TBLPROPERTIES:
      case fugue_sqlParser::TEMPORARY:
      case fugue_sqlParser::TERMINATED:
      case fugue_sqlParser::THEN:
      case fugue_sqlParser::TO:
      case fugue_sqlParser::TOUCH:
      case fugue_sqlParser::TRAILING:
      case fugue_sqlParser::TRANSACTION:
      case fugue_sqlParser::TRANSACTIONS:
      case fugue_sqlParser::TRANSFORM:
      case fugue_sqlParser::TRIM:
      case fugue_sqlParser::TRUE:
      case fugue_sqlParser::TRUNCATE:
      case fugue_sqlParser::TYPE:
      case fugue_sqlParser::UNARCHIVE:
      case fugue_sqlParser::UNBOUNDED:
      case fugue_sqlParser::UNCACHE:
      case fugue_sqlParser::UNION:
      case fugue_sqlParser::UNIQUE:
      case fugue_sqlParser::UNKNOWN:
      case fugue_sqlParser::UNLOCK:
      case fugue_sqlParser::UNSET:
      case fugue_sqlParser::UPDATE:
      case fugue_sqlParser::USE:
      case fugue_sqlParser::USER:
      case fugue_sqlParser::USING:
      case fugue_sqlParser::VALUES:
      case fugue_sqlParser::VIEW:
      case fugue_sqlParser::VIEWS:
      case fugue_sqlParser::WHEN:
      case fugue_sqlParser::WHERE:
      case fugue_sqlParser::WINDOW:
      case fugue_sqlParser::WITH:
      case fugue_sqlParser::YEAR:
      case fugue_sqlParser::DIV:
      case fugue_sqlParser::IDENTIFIER:
      case fugue_sqlParser::BACKQUOTED_IDENTIFIER: {
        enterOuterAlt(_localctx, 1);
        setState(2228);
        identifier();
        setState(2233);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == fugue_sqlParser::T__6) {
          setState(2229);
          match(fugue_sqlParser::T__6);
          setState(2230);
          identifier();
          setState(2235);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

      case fugue_sqlParser::STRING: {
        enterOuterAlt(_localctx, 2);
        setState(2236);
        match(fugue_sqlParser::STRING);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TablePropertyValueContext ------------------------------------------------------------------

fugue_sqlParser::TablePropertyValueContext::TablePropertyValueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* fugue_sqlParser::TablePropertyValueContext::INTEGER_VALUE() {
  return getToken(fugue_sqlParser::INTEGER_VALUE, 0);
}

tree::TerminalNode* fugue_sqlParser::TablePropertyValueContext::DECIMAL_VALUE() {
  return getToken(fugue_sqlParser::DECIMAL_VALUE, 0);
}

fugue_sqlParser::BooleanValueContext* fugue_sqlParser::TablePropertyValueContext::booleanValue() {
  return getRuleContext<fugue_sqlParser::BooleanValueContext>(0);
}

tree::TerminalNode* fugue_sqlParser::TablePropertyValueContext::STRING() {
  return getToken(fugue_sqlParser::STRING, 0);
}


size_t fugue_sqlParser::TablePropertyValueContext::getRuleIndex() const {
  return fugue_sqlParser::RuleTablePropertyValue;
}


antlrcpp::Any fugue_sqlParser::TablePropertyValueContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitTablePropertyValue(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::TablePropertyValueContext* fugue_sqlParser::tablePropertyValue() {
  TablePropertyValueContext *_localctx = _tracker.createInstance<TablePropertyValueContext>(_ctx, getState());
  enterRule(_localctx, 210, fugue_sqlParser::RuleTablePropertyValue);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2243);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case fugue_sqlParser::INTEGER_VALUE: {
        enterOuterAlt(_localctx, 1);
        setState(2239);
        match(fugue_sqlParser::INTEGER_VALUE);
        break;
      }

      case fugue_sqlParser::DECIMAL_VALUE: {
        enterOuterAlt(_localctx, 2);
        setState(2240);
        match(fugue_sqlParser::DECIMAL_VALUE);
        break;
      }

      case fugue_sqlParser::FALSE:
      case fugue_sqlParser::TRUE: {
        enterOuterAlt(_localctx, 3);
        setState(2241);
        booleanValue();
        break;
      }

      case fugue_sqlParser::STRING: {
        enterOuterAlt(_localctx, 4);
        setState(2242);
        match(fugue_sqlParser::STRING);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConstantListContext ------------------------------------------------------------------

fugue_sqlParser::ConstantListContext::ConstantListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<fugue_sqlParser::ConstantContext *> fugue_sqlParser::ConstantListContext::constant() {
  return getRuleContexts<fugue_sqlParser::ConstantContext>();
}

fugue_sqlParser::ConstantContext* fugue_sqlParser::ConstantListContext::constant(size_t i) {
  return getRuleContext<fugue_sqlParser::ConstantContext>(i);
}


size_t fugue_sqlParser::ConstantListContext::getRuleIndex() const {
  return fugue_sqlParser::RuleConstantList;
}


antlrcpp::Any fugue_sqlParser::ConstantListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitConstantList(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::ConstantListContext* fugue_sqlParser::constantList() {
  ConstantListContext *_localctx = _tracker.createInstance<ConstantListContext>(_ctx, getState());
  enterRule(_localctx, 212, fugue_sqlParser::RuleConstantList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2245);
    match(fugue_sqlParser::T__2);
    setState(2246);
    constant();
    setState(2251);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == fugue_sqlParser::T__0) {
      setState(2247);
      match(fugue_sqlParser::T__0);
      setState(2248);
      constant();
      setState(2253);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2254);
    match(fugue_sqlParser::T__3);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NestedConstantListContext ------------------------------------------------------------------

fugue_sqlParser::NestedConstantListContext::NestedConstantListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<fugue_sqlParser::ConstantListContext *> fugue_sqlParser::NestedConstantListContext::constantList() {
  return getRuleContexts<fugue_sqlParser::ConstantListContext>();
}

fugue_sqlParser::ConstantListContext* fugue_sqlParser::NestedConstantListContext::constantList(size_t i) {
  return getRuleContext<fugue_sqlParser::ConstantListContext>(i);
}


size_t fugue_sqlParser::NestedConstantListContext::getRuleIndex() const {
  return fugue_sqlParser::RuleNestedConstantList;
}


antlrcpp::Any fugue_sqlParser::NestedConstantListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitNestedConstantList(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::NestedConstantListContext* fugue_sqlParser::nestedConstantList() {
  NestedConstantListContext *_localctx = _tracker.createInstance<NestedConstantListContext>(_ctx, getState());
  enterRule(_localctx, 214, fugue_sqlParser::RuleNestedConstantList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2256);
    match(fugue_sqlParser::T__2);
    setState(2257);
    constantList();
    setState(2262);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == fugue_sqlParser::T__0) {
      setState(2258);
      match(fugue_sqlParser::T__0);
      setState(2259);
      constantList();
      setState(2264);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2265);
    match(fugue_sqlParser::T__3);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CreateFileFormatContext ------------------------------------------------------------------

fugue_sqlParser::CreateFileFormatContext::CreateFileFormatContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* fugue_sqlParser::CreateFileFormatContext::STORED() {
  return getToken(fugue_sqlParser::STORED, 0);
}

tree::TerminalNode* fugue_sqlParser::CreateFileFormatContext::AS() {
  return getToken(fugue_sqlParser::AS, 0);
}

fugue_sqlParser::FileFormatContext* fugue_sqlParser::CreateFileFormatContext::fileFormat() {
  return getRuleContext<fugue_sqlParser::FileFormatContext>(0);
}

tree::TerminalNode* fugue_sqlParser::CreateFileFormatContext::BY() {
  return getToken(fugue_sqlParser::BY, 0);
}

fugue_sqlParser::StorageHandlerContext* fugue_sqlParser::CreateFileFormatContext::storageHandler() {
  return getRuleContext<fugue_sqlParser::StorageHandlerContext>(0);
}


size_t fugue_sqlParser::CreateFileFormatContext::getRuleIndex() const {
  return fugue_sqlParser::RuleCreateFileFormat;
}


antlrcpp::Any fugue_sqlParser::CreateFileFormatContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitCreateFileFormat(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::CreateFileFormatContext* fugue_sqlParser::createFileFormat() {
  CreateFileFormatContext *_localctx = _tracker.createInstance<CreateFileFormatContext>(_ctx, getState());
  enterRule(_localctx, 216, fugue_sqlParser::RuleCreateFileFormat);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2273);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 281, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2267);
      match(fugue_sqlParser::STORED);
      setState(2268);
      match(fugue_sqlParser::AS);
      setState(2269);
      fileFormat();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2270);
      match(fugue_sqlParser::STORED);
      setState(2271);
      match(fugue_sqlParser::BY);
      setState(2272);
      storageHandler();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FileFormatContext ------------------------------------------------------------------

fugue_sqlParser::FileFormatContext::FileFormatContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t fugue_sqlParser::FileFormatContext::getRuleIndex() const {
  return fugue_sqlParser::RuleFileFormat;
}

void fugue_sqlParser::FileFormatContext::copyFrom(FileFormatContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- TableFileFormatContext ------------------------------------------------------------------

tree::TerminalNode* fugue_sqlParser::TableFileFormatContext::INPUTFORMAT() {
  return getToken(fugue_sqlParser::INPUTFORMAT, 0);
}

tree::TerminalNode* fugue_sqlParser::TableFileFormatContext::OUTPUTFORMAT() {
  return getToken(fugue_sqlParser::OUTPUTFORMAT, 0);
}

std::vector<tree::TerminalNode *> fugue_sqlParser::TableFileFormatContext::STRING() {
  return getTokens(fugue_sqlParser::STRING);
}

tree::TerminalNode* fugue_sqlParser::TableFileFormatContext::STRING(size_t i) {
  return getToken(fugue_sqlParser::STRING, i);
}

fugue_sqlParser::TableFileFormatContext::TableFileFormatContext(FileFormatContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::TableFileFormatContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitTableFileFormat(this);
  else
    return visitor->visitChildren(this);
}
//----------------- GenericFileFormatContext ------------------------------------------------------------------

fugue_sqlParser::IdentifierContext* fugue_sqlParser::GenericFileFormatContext::identifier() {
  return getRuleContext<fugue_sqlParser::IdentifierContext>(0);
}

fugue_sqlParser::GenericFileFormatContext::GenericFileFormatContext(FileFormatContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::GenericFileFormatContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitGenericFileFormat(this);
  else
    return visitor->visitChildren(this);
}
fugue_sqlParser::FileFormatContext* fugue_sqlParser::fileFormat() {
  FileFormatContext *_localctx = _tracker.createInstance<FileFormatContext>(_ctx, getState());
  enterRule(_localctx, 218, fugue_sqlParser::RuleFileFormat);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2280);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 282, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<fugue_sqlParser::TableFileFormatContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(2275);
      match(fugue_sqlParser::INPUTFORMAT);
      setState(2276);
      antlrcpp::downCast<TableFileFormatContext *>(_localctx)->inFmt = match(fugue_sqlParser::STRING);
      setState(2277);
      match(fugue_sqlParser::OUTPUTFORMAT);
      setState(2278);
      antlrcpp::downCast<TableFileFormatContext *>(_localctx)->outFmt = match(fugue_sqlParser::STRING);
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<fugue_sqlParser::GenericFileFormatContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(2279);
      identifier();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StorageHandlerContext ------------------------------------------------------------------

fugue_sqlParser::StorageHandlerContext::StorageHandlerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* fugue_sqlParser::StorageHandlerContext::STRING() {
  return getToken(fugue_sqlParser::STRING, 0);
}

tree::TerminalNode* fugue_sqlParser::StorageHandlerContext::WITH() {
  return getToken(fugue_sqlParser::WITH, 0);
}

tree::TerminalNode* fugue_sqlParser::StorageHandlerContext::SERDEPROPERTIES() {
  return getToken(fugue_sqlParser::SERDEPROPERTIES, 0);
}

fugue_sqlParser::TablePropertyListContext* fugue_sqlParser::StorageHandlerContext::tablePropertyList() {
  return getRuleContext<fugue_sqlParser::TablePropertyListContext>(0);
}


size_t fugue_sqlParser::StorageHandlerContext::getRuleIndex() const {
  return fugue_sqlParser::RuleStorageHandler;
}


antlrcpp::Any fugue_sqlParser::StorageHandlerContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitStorageHandler(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::StorageHandlerContext* fugue_sqlParser::storageHandler() {
  StorageHandlerContext *_localctx = _tracker.createInstance<StorageHandlerContext>(_ctx, getState());
  enterRule(_localctx, 220, fugue_sqlParser::RuleStorageHandler);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2282);
    match(fugue_sqlParser::STRING);
    setState(2286);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 283, _ctx)) {
    case 1: {
      setState(2283);
      match(fugue_sqlParser::WITH);
      setState(2284);
      match(fugue_sqlParser::SERDEPROPERTIES);
      setState(2285);
      tablePropertyList();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ResourceContext ------------------------------------------------------------------

fugue_sqlParser::ResourceContext::ResourceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

fugue_sqlParser::IdentifierContext* fugue_sqlParser::ResourceContext::identifier() {
  return getRuleContext<fugue_sqlParser::IdentifierContext>(0);
}

tree::TerminalNode* fugue_sqlParser::ResourceContext::STRING() {
  return getToken(fugue_sqlParser::STRING, 0);
}


size_t fugue_sqlParser::ResourceContext::getRuleIndex() const {
  return fugue_sqlParser::RuleResource;
}


antlrcpp::Any fugue_sqlParser::ResourceContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitResource(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::ResourceContext* fugue_sqlParser::resource() {
  ResourceContext *_localctx = _tracker.createInstance<ResourceContext>(_ctx, getState());
  enterRule(_localctx, 222, fugue_sqlParser::RuleResource);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2288);
    identifier();
    setState(2289);
    match(fugue_sqlParser::STRING);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DmlStatementNoWithContext ------------------------------------------------------------------

fugue_sqlParser::DmlStatementNoWithContext::DmlStatementNoWithContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t fugue_sqlParser::DmlStatementNoWithContext::getRuleIndex() const {
  return fugue_sqlParser::RuleDmlStatementNoWith;
}

void fugue_sqlParser::DmlStatementNoWithContext::copyFrom(DmlStatementNoWithContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- DeleteFromTableContext ------------------------------------------------------------------

tree::TerminalNode* fugue_sqlParser::DeleteFromTableContext::DELETE() {
  return getToken(fugue_sqlParser::DELETE, 0);
}

tree::TerminalNode* fugue_sqlParser::DeleteFromTableContext::FROM() {
  return getToken(fugue_sqlParser::FROM, 0);
}

fugue_sqlParser::MultipartIdentifierContext* fugue_sqlParser::DeleteFromTableContext::multipartIdentifier() {
  return getRuleContext<fugue_sqlParser::MultipartIdentifierContext>(0);
}

fugue_sqlParser::TableAliasContext* fugue_sqlParser::DeleteFromTableContext::tableAlias() {
  return getRuleContext<fugue_sqlParser::TableAliasContext>(0);
}

fugue_sqlParser::WhereClauseContext* fugue_sqlParser::DeleteFromTableContext::whereClause() {
  return getRuleContext<fugue_sqlParser::WhereClauseContext>(0);
}

fugue_sqlParser::DeleteFromTableContext::DeleteFromTableContext(DmlStatementNoWithContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::DeleteFromTableContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitDeleteFromTable(this);
  else
    return visitor->visitChildren(this);
}
//----------------- SingleInsertQueryContext ------------------------------------------------------------------

fugue_sqlParser::InsertIntoContext* fugue_sqlParser::SingleInsertQueryContext::insertInto() {
  return getRuleContext<fugue_sqlParser::InsertIntoContext>(0);
}

fugue_sqlParser::QueryTermContext* fugue_sqlParser::SingleInsertQueryContext::queryTerm() {
  return getRuleContext<fugue_sqlParser::QueryTermContext>(0);
}

fugue_sqlParser::QueryOrganizationContext* fugue_sqlParser::SingleInsertQueryContext::queryOrganization() {
  return getRuleContext<fugue_sqlParser::QueryOrganizationContext>(0);
}

fugue_sqlParser::SingleInsertQueryContext::SingleInsertQueryContext(DmlStatementNoWithContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::SingleInsertQueryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitSingleInsertQuery(this);
  else
    return visitor->visitChildren(this);
}
//----------------- MultiInsertQueryContext ------------------------------------------------------------------

fugue_sqlParser::FromClauseContext* fugue_sqlParser::MultiInsertQueryContext::fromClause() {
  return getRuleContext<fugue_sqlParser::FromClauseContext>(0);
}

std::vector<fugue_sqlParser::MultiInsertQueryBodyContext *> fugue_sqlParser::MultiInsertQueryContext::multiInsertQueryBody() {
  return getRuleContexts<fugue_sqlParser::MultiInsertQueryBodyContext>();
}

fugue_sqlParser::MultiInsertQueryBodyContext* fugue_sqlParser::MultiInsertQueryContext::multiInsertQueryBody(size_t i) {
  return getRuleContext<fugue_sqlParser::MultiInsertQueryBodyContext>(i);
}

fugue_sqlParser::MultiInsertQueryContext::MultiInsertQueryContext(DmlStatementNoWithContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::MultiInsertQueryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitMultiInsertQuery(this);
  else
    return visitor->visitChildren(this);
}
//----------------- UpdateTableContext ------------------------------------------------------------------

tree::TerminalNode* fugue_sqlParser::UpdateTableContext::UPDATE() {
  return getToken(fugue_sqlParser::UPDATE, 0);
}

fugue_sqlParser::MultipartIdentifierContext* fugue_sqlParser::UpdateTableContext::multipartIdentifier() {
  return getRuleContext<fugue_sqlParser::MultipartIdentifierContext>(0);
}

fugue_sqlParser::TableAliasContext* fugue_sqlParser::UpdateTableContext::tableAlias() {
  return getRuleContext<fugue_sqlParser::TableAliasContext>(0);
}

fugue_sqlParser::SetClauseContext* fugue_sqlParser::UpdateTableContext::setClause() {
  return getRuleContext<fugue_sqlParser::SetClauseContext>(0);
}

fugue_sqlParser::WhereClauseContext* fugue_sqlParser::UpdateTableContext::whereClause() {
  return getRuleContext<fugue_sqlParser::WhereClauseContext>(0);
}

fugue_sqlParser::UpdateTableContext::UpdateTableContext(DmlStatementNoWithContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::UpdateTableContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitUpdateTable(this);
  else
    return visitor->visitChildren(this);
}
//----------------- MergeIntoTableContext ------------------------------------------------------------------

tree::TerminalNode* fugue_sqlParser::MergeIntoTableContext::MERGE() {
  return getToken(fugue_sqlParser::MERGE, 0);
}

tree::TerminalNode* fugue_sqlParser::MergeIntoTableContext::INTO() {
  return getToken(fugue_sqlParser::INTO, 0);
}

tree::TerminalNode* fugue_sqlParser::MergeIntoTableContext::USING() {
  return getToken(fugue_sqlParser::USING, 0);
}

tree::TerminalNode* fugue_sqlParser::MergeIntoTableContext::ON() {
  return getToken(fugue_sqlParser::ON, 0);
}

std::vector<fugue_sqlParser::MultipartIdentifierContext *> fugue_sqlParser::MergeIntoTableContext::multipartIdentifier() {
  return getRuleContexts<fugue_sqlParser::MultipartIdentifierContext>();
}

fugue_sqlParser::MultipartIdentifierContext* fugue_sqlParser::MergeIntoTableContext::multipartIdentifier(size_t i) {
  return getRuleContext<fugue_sqlParser::MultipartIdentifierContext>(i);
}

std::vector<fugue_sqlParser::TableAliasContext *> fugue_sqlParser::MergeIntoTableContext::tableAlias() {
  return getRuleContexts<fugue_sqlParser::TableAliasContext>();
}

fugue_sqlParser::TableAliasContext* fugue_sqlParser::MergeIntoTableContext::tableAlias(size_t i) {
  return getRuleContext<fugue_sqlParser::TableAliasContext>(i);
}

fugue_sqlParser::BooleanExpressionContext* fugue_sqlParser::MergeIntoTableContext::booleanExpression() {
  return getRuleContext<fugue_sqlParser::BooleanExpressionContext>(0);
}

fugue_sqlParser::QueryContext* fugue_sqlParser::MergeIntoTableContext::query() {
  return getRuleContext<fugue_sqlParser::QueryContext>(0);
}

std::vector<fugue_sqlParser::MatchedClauseContext *> fugue_sqlParser::MergeIntoTableContext::matchedClause() {
  return getRuleContexts<fugue_sqlParser::MatchedClauseContext>();
}

fugue_sqlParser::MatchedClauseContext* fugue_sqlParser::MergeIntoTableContext::matchedClause(size_t i) {
  return getRuleContext<fugue_sqlParser::MatchedClauseContext>(i);
}

std::vector<fugue_sqlParser::NotMatchedClauseContext *> fugue_sqlParser::MergeIntoTableContext::notMatchedClause() {
  return getRuleContexts<fugue_sqlParser::NotMatchedClauseContext>();
}

fugue_sqlParser::NotMatchedClauseContext* fugue_sqlParser::MergeIntoTableContext::notMatchedClause(size_t i) {
  return getRuleContext<fugue_sqlParser::NotMatchedClauseContext>(i);
}

fugue_sqlParser::MergeIntoTableContext::MergeIntoTableContext(DmlStatementNoWithContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::MergeIntoTableContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitMergeIntoTable(this);
  else
    return visitor->visitChildren(this);
}
fugue_sqlParser::DmlStatementNoWithContext* fugue_sqlParser::dmlStatementNoWith() {
  DmlStatementNoWithContext *_localctx = _tracker.createInstance<DmlStatementNoWithContext>(_ctx, getState());
  enterRule(_localctx, 224, fugue_sqlParser::RuleDmlStatementNoWith);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(2342);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case fugue_sqlParser::INSERT: {
        _localctx = _tracker.createInstance<fugue_sqlParser::SingleInsertQueryContext>(_localctx);
        enterOuterAlt(_localctx, 1);
        setState(2291);
        insertInto();
        setState(2292);
        queryTerm(0);
        setState(2293);
        queryOrganization();
        break;
      }

      case fugue_sqlParser::FROM: {
        _localctx = _tracker.createInstance<fugue_sqlParser::MultiInsertQueryContext>(_localctx);
        enterOuterAlt(_localctx, 2);
        setState(2295);
        fromClause();
        setState(2297); 
        _errHandler->sync(this);
        _la = _input->LA(1);
        do {
          setState(2296);
          multiInsertQueryBody();
          setState(2299); 
          _errHandler->sync(this);
          _la = _input->LA(1);
        } while (_la == fugue_sqlParser::INSERT);
        break;
      }

      case fugue_sqlParser::DELETE: {
        _localctx = _tracker.createInstance<fugue_sqlParser::DeleteFromTableContext>(_localctx);
        enterOuterAlt(_localctx, 3);
        setState(2301);
        match(fugue_sqlParser::DELETE);
        setState(2302);
        match(fugue_sqlParser::FROM);
        setState(2303);
        multipartIdentifier();
        setState(2304);
        tableAlias();
        setState(2306);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == fugue_sqlParser::WHERE) {
          setState(2305);
          whereClause();
        }
        break;
      }

      case fugue_sqlParser::UPDATE: {
        _localctx = _tracker.createInstance<fugue_sqlParser::UpdateTableContext>(_localctx);
        enterOuterAlt(_localctx, 4);
        setState(2308);
        match(fugue_sqlParser::UPDATE);
        setState(2309);
        multipartIdentifier();
        setState(2310);
        tableAlias();
        setState(2311);
        setClause();
        setState(2313);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == fugue_sqlParser::WHERE) {
          setState(2312);
          whereClause();
        }
        break;
      }

      case fugue_sqlParser::MERGE: {
        _localctx = _tracker.createInstance<fugue_sqlParser::MergeIntoTableContext>(_localctx);
        enterOuterAlt(_localctx, 5);
        setState(2315);
        match(fugue_sqlParser::MERGE);
        setState(2316);
        match(fugue_sqlParser::INTO);
        setState(2317);
        antlrcpp::downCast<MergeIntoTableContext *>(_localctx)->target = multipartIdentifier();
        setState(2318);
        antlrcpp::downCast<MergeIntoTableContext *>(_localctx)->targetAlias = tableAlias();
        setState(2319);
        match(fugue_sqlParser::USING);
        setState(2325);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case fugue_sqlParser::ADD:
          case fugue_sqlParser::AFTER:
          case fugue_sqlParser::ALL:
          case fugue_sqlParser::ALTER:
          case fugue_sqlParser::ANALYZE:
          case fugue_sqlParser::AND:
          case fugue_sqlParser::ANTI:
          case fugue_sqlParser::ANY:
          case fugue_sqlParser::ARCHIVE:
          case fugue_sqlParser::ARRAY:
          case fugue_sqlParser::AS:
          case fugue_sqlParser::ASC:
          case fugue_sqlParser::AT:
          case fugue_sqlParser::AUTHORIZATION:
          case fugue_sqlParser::BETWEEN:
          case fugue_sqlParser::BOTH:
          case fugue_sqlParser::BUCKET:
          case fugue_sqlParser::BUCKETS:
          case fugue_sqlParser::BY:
          case fugue_sqlParser::CACHE:
          case fugue_sqlParser::CASCADE:
          case fugue_sqlParser::CASE:
          case fugue_sqlParser::CAST:
          case fugue_sqlParser::CHANGE:
          case fugue_sqlParser::CHECK:
          case fugue_sqlParser::CLEAR:
          case fugue_sqlParser::CLUSTER:
          case fugue_sqlParser::CLUSTERED:
          case fugue_sqlParser::CODEGEN:
          case fugue_sqlParser::COLLATE:
          case fugue_sqlParser::COLLECTION:
          case fugue_sqlParser::COLUMN:
          case fugue_sqlParser::COLUMNS:
          case fugue_sqlParser::COMMENT:
          case fugue_sqlParser::COMMIT:
          case fugue_sqlParser::COMPACT:
          case fugue_sqlParser::COMPACTIONS:
          case fugue_sqlParser::COMPUTE:
          case fugue_sqlParser::CONCATENATE:
          case fugue_sqlParser::CONSTRAINT:
          case fugue_sqlParser::COST:
          case fugue_sqlParser::CREATE:
          case fugue_sqlParser::CROSS:
          case fugue_sqlParser::CUBE:
          case fugue_sqlParser::CURRENT:
          case fugue_sqlParser::CURRENT_DATE:
          case fugue_sqlParser::CURRENT_TIME:
          case fugue_sqlParser::CURRENT_TIMESTAMP:
          case fugue_sqlParser::CURRENT_USER:
          case fugue_sqlParser::DATA:
          case fugue_sqlParser::DATABASE:
          case fugue_sqlParser::DATABASES:
          case fugue_sqlParser::DAY:
          case fugue_sqlParser::DBPROPERTIES:
          case fugue_sqlParser::DEFINED:
          case fugue_sqlParser::DELETE:
          case fugue_sqlParser::DELIMITED:
          case fugue_sqlParser::DESC:
          case fugue_sqlParser::DESCRIBE:
          case fugue_sqlParser::DFS:
          case fugue_sqlParser::DIRECTORIES:
          case fugue_sqlParser::DIRECTORY:
          case fugue_sqlParser::DISTINCT:
          case fugue_sqlParser::DISTRIBUTE:
          case fugue_sqlParser::DROP:
          case fugue_sqlParser::ELSE:
          case fugue_sqlParser::END:
          case fugue_sqlParser::ESCAPE:
          case fugue_sqlParser::ESCAPED:
          case fugue_sqlParser::EXCEPT:
          case fugue_sqlParser::EXCHANGE:
          case fugue_sqlParser::EXISTS:
          case fugue_sqlParser::EXPLAIN:
          case fugue_sqlParser::EXPORT:
          case fugue_sqlParser::EXTENDED:
          case fugue_sqlParser::EXTERNAL:
          case fugue_sqlParser::EXTRACT:
          case fugue_sqlParser::FALSE:
          case fugue_sqlParser::FETCH:
          case fugue_sqlParser::FIELDS:
          case fugue_sqlParser::FILTER:
          case fugue_sqlParser::FILEFORMAT:
          case fugue_sqlParser::FIRST:
          case fugue_sqlParser::FOLLOWING:
          case fugue_sqlParser::FOR:
          case fugue_sqlParser::FOREIGN:
          case fugue_sqlParser::FORMAT:
          case fugue_sqlParser::FORMATTED:
          case fugue_sqlParser::FROM:
          case fugue_sqlParser::FULL:
          case fugue_sqlParser::FUNCTION:
          case fugue_sqlParser::FUNCTIONS:
          case fugue_sqlParser::GLOBAL:
          case fugue_sqlParser::GRANT:
          case fugue_sqlParser::GROUP:
          case fugue_sqlParser::GROUPING:
          case fugue_sqlParser::HAVING:
          case fugue_sqlParser::HOUR:
          case fugue_sqlParser::IF:
          case fugue_sqlParser::IGNORE:
          case fugue_sqlParser::IMPORT:
          case fugue_sqlParser::IN:
          case fugue_sqlParser::INDEX:
          case fugue_sqlParser::INDEXES:
          case fugue_sqlParser::INNER:
          case fugue_sqlParser::INPATH:
          case fugue_sqlParser::INPUTFORMAT:
          case fugue_sqlParser::INSERT:
          case fugue_sqlParser::INTERSECT:
          case fugue_sqlParser::INTERVAL:
          case fugue_sqlParser::INTO:
          case fugue_sqlParser::IS:
          case fugue_sqlParser::ITEMS:
          case fugue_sqlParser::JOIN:
          case fugue_sqlParser::KEYS:
          case fugue_sqlParser::LAST:
          case fugue_sqlParser::LATERAL:
          case fugue_sqlParser::LAZY:
          case fugue_sqlParser::LEADING:
          case fugue_sqlParser::LEFT:
          case fugue_sqlParser::LIKE:
          case fugue_sqlParser::LIMIT:
          case fugue_sqlParser::LINES:
          case fugue_sqlParser::LIST:
          case fugue_sqlParser::LOAD:
          case fugue_sqlParser::LOCAL:
          case fugue_sqlParser::LOCATION:
          case fugue_sqlParser::LOCK:
          case fugue_sqlParser::LOCKS:
          case fugue_sqlParser::LOGICAL:
          case fugue_sqlParser::MACRO:
          case fugue_sqlParser::MAP:
          case fugue_sqlParser::MATCHED:
          case fugue_sqlParser::MERGE:
          case fugue_sqlParser::MINUTE:
          case fugue_sqlParser::MONTH:
          case fugue_sqlParser::MSCK:
          case fugue_sqlParser::NAMESPACE:
          case fugue_sqlParser::NAMESPACES:
          case fugue_sqlParser::NATURAL:
          case fugue_sqlParser::NO:
          case fugue_sqlParser::NOT:
          case fugue_sqlParser::THENULL:
          case fugue_sqlParser::THENULLS:
          case fugue_sqlParser::OF:
          case fugue_sqlParser::ON:
          case fugue_sqlParser::ONLY:
          case fugue_sqlParser::OPTION:
          case fugue_sqlParser::OPTIONS:
          case fugue_sqlParser::OR:
          case fugue_sqlParser::ORDER:
          case fugue_sqlParser::OUT:
          case fugue_sqlParser::OUTER:
          case fugue_sqlParser::OUTPUTFORMAT:
          case fugue_sqlParser::OVER:
          case fugue_sqlParser::OVERLAPS:
          case fugue_sqlParser::OVERLAY:
          case fugue_sqlParser::OVERWRITE:
          case fugue_sqlParser::PARTITION:
          case fugue_sqlParser::PARTITIONED:
          case fugue_sqlParser::PARTITIONS:
          case fugue_sqlParser::PERCENTLIT:
          case fugue_sqlParser::PIVOT:
          case fugue_sqlParser::PLACING:
          case fugue_sqlParser::POSITION:
          case fugue_sqlParser::PRECEDING:
          case fugue_sqlParser::PRIMARY:
          case fugue_sqlParser::PRINCIPALS:
          case fugue_sqlParser::PROPERTIES:
          case fugue_sqlParser::PURGE:
          case fugue_sqlParser::QUERY:
          case fugue_sqlParser::RANGE:
          case fugue_sqlParser::RECORDREADER:
          case fugue_sqlParser::RECORDWRITER:
          case fugue_sqlParser::RECOVER:
          case fugue_sqlParser::REDUCE:
          case fugue_sqlParser::REFERENCES:
          case fugue_sqlParser::REFRESH:
          case fugue_sqlParser::RENAME:
          case fugue_sqlParser::REPAIR:
          case fugue_sqlParser::REPLACE:
          case fugue_sqlParser::RESET:
          case fugue_sqlParser::RESTRICT:
          case fugue_sqlParser::REVOKE:
          case fugue_sqlParser::RIGHT:
          case fugue_sqlParser::RLIKE:
          case fugue_sqlParser::ROLE:
          case fugue_sqlParser::ROLES:
          case fugue_sqlParser::ROLLBACK:
          case fugue_sqlParser::ROLLUP:
          case fugue_sqlParser::ROW:
          case fugue_sqlParser::ROWS:
          case fugue_sqlParser::SCHEMA:
          case fugue_sqlParser::SECOND:
          case fugue_sqlParser::SELECT:
          case fugue_sqlParser::SEMI:
          case fugue_sqlParser::SEPARATED:
          case fugue_sqlParser::SERDE:
          case fugue_sqlParser::SERDEPROPERTIES:
          case fugue_sqlParser::SESSION_USER:
          case fugue_sqlParser::SET:
          case fugue_sqlParser::SETMINUS:
          case fugue_sqlParser::SETS:
          case fugue_sqlParser::SHOW:
          case fugue_sqlParser::SKEWED:
          case fugue_sqlParser::SOME:
          case fugue_sqlParser::SORT:
          case fugue_sqlParser::SORTED:
          case fugue_sqlParser::START:
          case fugue_sqlParser::STATISTICS:
          case fugue_sqlParser::STORED:
          case fugue_sqlParser::STRATIFY:
          case fugue_sqlParser::STRUCT:
          case fugue_sqlParser::SUBSTR:
          case fugue_sqlParser::SUBSTRING:
          case fugue_sqlParser::TABLE:
          case fugue_sqlParser::TABLES:
          case fugue_sqlParser::TABLESAMPLE:
          case fugue_sqlParser::TBLPROPERTIES:
          case fugue_sqlParser::TEMPORARY:
          case fugue_sqlParser::TERMINATED:
          case fugue_sqlParser::THEN:
          case fugue_sqlParser::TO:
          case fugue_sqlParser::TOUCH:
          case fugue_sqlParser::TRAILING:
          case fugue_sqlParser::TRANSACTION:
          case fugue_sqlParser::TRANSACTIONS:
          case fugue_sqlParser::TRANSFORM:
          case fugue_sqlParser::TRIM:
          case fugue_sqlParser::TRUE:
          case fugue_sqlParser::TRUNCATE:
          case fugue_sqlParser::TYPE:
          case fugue_sqlParser::UNARCHIVE:
          case fugue_sqlParser::UNBOUNDED:
          case fugue_sqlParser::UNCACHE:
          case fugue_sqlParser::UNION:
          case fugue_sqlParser::UNIQUE:
          case fugue_sqlParser::UNKNOWN:
          case fugue_sqlParser::UNLOCK:
          case fugue_sqlParser::UNSET:
          case fugue_sqlParser::UPDATE:
          case fugue_sqlParser::USE:
          case fugue_sqlParser::USER:
          case fugue_sqlParser::USING:
          case fugue_sqlParser::VALUES:
          case fugue_sqlParser::VIEW:
          case fugue_sqlParser::VIEWS:
          case fugue_sqlParser::WHEN:
          case fugue_sqlParser::WHERE:
          case fugue_sqlParser::WINDOW:
          case fugue_sqlParser::WITH:
          case fugue_sqlParser::YEAR:
          case fugue_sqlParser::DIV:
          case fugue_sqlParser::IDENTIFIER:
          case fugue_sqlParser::BACKQUOTED_IDENTIFIER: {
            setState(2320);
            antlrcpp::downCast<MergeIntoTableContext *>(_localctx)->source = multipartIdentifier();
            break;
          }

          case fugue_sqlParser::T__2: {
            setState(2321);
            match(fugue_sqlParser::T__2);
            setState(2322);
            antlrcpp::downCast<MergeIntoTableContext *>(_localctx)->sourceQuery = query();
            setState(2323);
            match(fugue_sqlParser::T__3);
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        setState(2327);
        antlrcpp::downCast<MergeIntoTableContext *>(_localctx)->sourceAlias = tableAlias();
        setState(2328);
        match(fugue_sqlParser::ON);
        setState(2329);
        antlrcpp::downCast<MergeIntoTableContext *>(_localctx)->mergeCondition = booleanExpression(0);
        setState(2333);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 288, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(2330);
            matchedClause(); 
          }
          setState(2335);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 288, _ctx);
        }
        setState(2339);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == fugue_sqlParser::WHEN) {
          setState(2336);
          notMatchedClause();
          setState(2341);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- QueryOrganizationContext ------------------------------------------------------------------

fugue_sqlParser::QueryOrganizationContext::QueryOrganizationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* fugue_sqlParser::QueryOrganizationContext::ORDER() {
  return getToken(fugue_sqlParser::ORDER, 0);
}

std::vector<tree::TerminalNode *> fugue_sqlParser::QueryOrganizationContext::BY() {
  return getTokens(fugue_sqlParser::BY);
}

tree::TerminalNode* fugue_sqlParser::QueryOrganizationContext::BY(size_t i) {
  return getToken(fugue_sqlParser::BY, i);
}

tree::TerminalNode* fugue_sqlParser::QueryOrganizationContext::CLUSTER() {
  return getToken(fugue_sqlParser::CLUSTER, 0);
}

tree::TerminalNode* fugue_sqlParser::QueryOrganizationContext::DISTRIBUTE() {
  return getToken(fugue_sqlParser::DISTRIBUTE, 0);
}

tree::TerminalNode* fugue_sqlParser::QueryOrganizationContext::SORT() {
  return getToken(fugue_sqlParser::SORT, 0);
}

fugue_sqlParser::WindowClauseContext* fugue_sqlParser::QueryOrganizationContext::windowClause() {
  return getRuleContext<fugue_sqlParser::WindowClauseContext>(0);
}

tree::TerminalNode* fugue_sqlParser::QueryOrganizationContext::LIMIT() {
  return getToken(fugue_sqlParser::LIMIT, 0);
}

std::vector<fugue_sqlParser::SortItemContext *> fugue_sqlParser::QueryOrganizationContext::sortItem() {
  return getRuleContexts<fugue_sqlParser::SortItemContext>();
}

fugue_sqlParser::SortItemContext* fugue_sqlParser::QueryOrganizationContext::sortItem(size_t i) {
  return getRuleContext<fugue_sqlParser::SortItemContext>(i);
}

std::vector<fugue_sqlParser::ExpressionContext *> fugue_sqlParser::QueryOrganizationContext::expression() {
  return getRuleContexts<fugue_sqlParser::ExpressionContext>();
}

fugue_sqlParser::ExpressionContext* fugue_sqlParser::QueryOrganizationContext::expression(size_t i) {
  return getRuleContext<fugue_sqlParser::ExpressionContext>(i);
}

tree::TerminalNode* fugue_sqlParser::QueryOrganizationContext::ALL() {
  return getToken(fugue_sqlParser::ALL, 0);
}


size_t fugue_sqlParser::QueryOrganizationContext::getRuleIndex() const {
  return fugue_sqlParser::RuleQueryOrganization;
}


antlrcpp::Any fugue_sqlParser::QueryOrganizationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitQueryOrganization(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::QueryOrganizationContext* fugue_sqlParser::queryOrganization() {
  QueryOrganizationContext *_localctx = _tracker.createInstance<QueryOrganizationContext>(_ctx, getState());
  enterRule(_localctx, 226, fugue_sqlParser::RuleQueryOrganization);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2354);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 292, _ctx)) {
    case 1: {
      setState(2344);
      match(fugue_sqlParser::ORDER);
      setState(2345);
      match(fugue_sqlParser::BY);
      setState(2346);
      antlrcpp::downCast<QueryOrganizationContext *>(_localctx)->sortItemContext = sortItem();
      antlrcpp::downCast<QueryOrganizationContext *>(_localctx)->order.push_back(antlrcpp::downCast<QueryOrganizationContext *>(_localctx)->sortItemContext);
      setState(2351);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 291, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(2347);
          match(fugue_sqlParser::T__0);
          setState(2348);
          antlrcpp::downCast<QueryOrganizationContext *>(_localctx)->sortItemContext = sortItem();
          antlrcpp::downCast<QueryOrganizationContext *>(_localctx)->order.push_back(antlrcpp::downCast<QueryOrganizationContext *>(_localctx)->sortItemContext); 
        }
        setState(2353);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 291, _ctx);
      }
      break;
    }

    default:
      break;
    }
    setState(2366);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 294, _ctx)) {
    case 1: {
      setState(2356);
      match(fugue_sqlParser::CLUSTER);
      setState(2357);
      match(fugue_sqlParser::BY);
      setState(2358);
      antlrcpp::downCast<QueryOrganizationContext *>(_localctx)->expressionContext = expression();
      antlrcpp::downCast<QueryOrganizationContext *>(_localctx)->clusterBy.push_back(antlrcpp::downCast<QueryOrganizationContext *>(_localctx)->expressionContext);
      setState(2363);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 293, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(2359);
          match(fugue_sqlParser::T__0);
          setState(2360);
          antlrcpp::downCast<QueryOrganizationContext *>(_localctx)->expressionContext = expression();
          antlrcpp::downCast<QueryOrganizationContext *>(_localctx)->clusterBy.push_back(antlrcpp::downCast<QueryOrganizationContext *>(_localctx)->expressionContext); 
        }
        setState(2365);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 293, _ctx);
      }
      break;
    }

    default:
      break;
    }
    setState(2378);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 296, _ctx)) {
    case 1: {
      setState(2368);
      match(fugue_sqlParser::DISTRIBUTE);
      setState(2369);
      match(fugue_sqlParser::BY);
      setState(2370);
      antlrcpp::downCast<QueryOrganizationContext *>(_localctx)->expressionContext = expression();
      antlrcpp::downCast<QueryOrganizationContext *>(_localctx)->distributeBy.push_back(antlrcpp::downCast<QueryOrganizationContext *>(_localctx)->expressionContext);
      setState(2375);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 295, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(2371);
          match(fugue_sqlParser::T__0);
          setState(2372);
          antlrcpp::downCast<QueryOrganizationContext *>(_localctx)->expressionContext = expression();
          antlrcpp::downCast<QueryOrganizationContext *>(_localctx)->distributeBy.push_back(antlrcpp::downCast<QueryOrganizationContext *>(_localctx)->expressionContext); 
        }
        setState(2377);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 295, _ctx);
      }
      break;
    }

    default:
      break;
    }
    setState(2390);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 298, _ctx)) {
    case 1: {
      setState(2380);
      match(fugue_sqlParser::SORT);
      setState(2381);
      match(fugue_sqlParser::BY);
      setState(2382);
      antlrcpp::downCast<QueryOrganizationContext *>(_localctx)->sortItemContext = sortItem();
      antlrcpp::downCast<QueryOrganizationContext *>(_localctx)->sort.push_back(antlrcpp::downCast<QueryOrganizationContext *>(_localctx)->sortItemContext);
      setState(2387);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 297, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(2383);
          match(fugue_sqlParser::T__0);
          setState(2384);
          antlrcpp::downCast<QueryOrganizationContext *>(_localctx)->sortItemContext = sortItem();
          antlrcpp::downCast<QueryOrganizationContext *>(_localctx)->sort.push_back(antlrcpp::downCast<QueryOrganizationContext *>(_localctx)->sortItemContext); 
        }
        setState(2389);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 297, _ctx);
      }
      break;
    }

    default:
      break;
    }
    setState(2393);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 299, _ctx)) {
    case 1: {
      setState(2392);
      windowClause();
      break;
    }

    default:
      break;
    }
    setState(2400);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 301, _ctx)) {
    case 1: {
      setState(2395);
      match(fugue_sqlParser::LIMIT);
      setState(2398);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 300, _ctx)) {
      case 1: {
        setState(2396);
        match(fugue_sqlParser::ALL);
        break;
      }

      case 2: {
        setState(2397);
        antlrcpp::downCast<QueryOrganizationContext *>(_localctx)->limit = expression();
        break;
      }

      default:
        break;
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MultiInsertQueryBodyContext ------------------------------------------------------------------

fugue_sqlParser::MultiInsertQueryBodyContext::MultiInsertQueryBodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

fugue_sqlParser::InsertIntoContext* fugue_sqlParser::MultiInsertQueryBodyContext::insertInto() {
  return getRuleContext<fugue_sqlParser::InsertIntoContext>(0);
}

fugue_sqlParser::FromStatementBodyContext* fugue_sqlParser::MultiInsertQueryBodyContext::fromStatementBody() {
  return getRuleContext<fugue_sqlParser::FromStatementBodyContext>(0);
}


size_t fugue_sqlParser::MultiInsertQueryBodyContext::getRuleIndex() const {
  return fugue_sqlParser::RuleMultiInsertQueryBody;
}


antlrcpp::Any fugue_sqlParser::MultiInsertQueryBodyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitMultiInsertQueryBody(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::MultiInsertQueryBodyContext* fugue_sqlParser::multiInsertQueryBody() {
  MultiInsertQueryBodyContext *_localctx = _tracker.createInstance<MultiInsertQueryBodyContext>(_ctx, getState());
  enterRule(_localctx, 228, fugue_sqlParser::RuleMultiInsertQueryBody);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2402);
    insertInto();
    setState(2403);
    fromStatementBody();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- QueryTermContext ------------------------------------------------------------------

fugue_sqlParser::QueryTermContext::QueryTermContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t fugue_sqlParser::QueryTermContext::getRuleIndex() const {
  return fugue_sqlParser::RuleQueryTerm;
}

void fugue_sqlParser::QueryTermContext::copyFrom(QueryTermContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- QueryTermDefaultContext ------------------------------------------------------------------

fugue_sqlParser::QueryPrimaryContext* fugue_sqlParser::QueryTermDefaultContext::queryPrimary() {
  return getRuleContext<fugue_sqlParser::QueryPrimaryContext>(0);
}

fugue_sqlParser::QueryTermDefaultContext::QueryTermDefaultContext(QueryTermContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::QueryTermDefaultContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitQueryTermDefault(this);
  else
    return visitor->visitChildren(this);
}
//----------------- FugueTermContext ------------------------------------------------------------------

fugue_sqlParser::FugueNestableTaskCollectionNoSelectContext* fugue_sqlParser::FugueTermContext::fugueNestableTaskCollectionNoSelect() {
  return getRuleContext<fugue_sqlParser::FugueNestableTaskCollectionNoSelectContext>(0);
}

fugue_sqlParser::FugueTermContext::FugueTermContext(QueryTermContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::FugueTermContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitFugueTerm(this);
  else
    return visitor->visitChildren(this);
}
//----------------- SetOperationContext ------------------------------------------------------------------

std::vector<fugue_sqlParser::QueryTermContext *> fugue_sqlParser::SetOperationContext::queryTerm() {
  return getRuleContexts<fugue_sqlParser::QueryTermContext>();
}

fugue_sqlParser::QueryTermContext* fugue_sqlParser::SetOperationContext::queryTerm(size_t i) {
  return getRuleContext<fugue_sqlParser::QueryTermContext>(i);
}

tree::TerminalNode* fugue_sqlParser::SetOperationContext::INTERSECT() {
  return getToken(fugue_sqlParser::INTERSECT, 0);
}

tree::TerminalNode* fugue_sqlParser::SetOperationContext::UNION() {
  return getToken(fugue_sqlParser::UNION, 0);
}

tree::TerminalNode* fugue_sqlParser::SetOperationContext::EXCEPT() {
  return getToken(fugue_sqlParser::EXCEPT, 0);
}

tree::TerminalNode* fugue_sqlParser::SetOperationContext::SETMINUS() {
  return getToken(fugue_sqlParser::SETMINUS, 0);
}

fugue_sqlParser::SetQuantifierContext* fugue_sqlParser::SetOperationContext::setQuantifier() {
  return getRuleContext<fugue_sqlParser::SetQuantifierContext>(0);
}

fugue_sqlParser::SetOperationContext::SetOperationContext(QueryTermContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::SetOperationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitSetOperation(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::QueryTermContext* fugue_sqlParser::queryTerm() {
   return queryTerm(0);
}

fugue_sqlParser::QueryTermContext* fugue_sqlParser::queryTerm(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  fugue_sqlParser::QueryTermContext *_localctx = _tracker.createInstance<QueryTermContext>(_ctx, parentState);
  fugue_sqlParser::QueryTermContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 230;
  enterRecursionRule(_localctx, 230, fugue_sqlParser::RuleQueryTerm, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2408);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case fugue_sqlParser::FROM:
      case fugue_sqlParser::MAP:
      case fugue_sqlParser::REDUCE:
      case fugue_sqlParser::SELECT:
      case fugue_sqlParser::TABLE:
      case fugue_sqlParser::VALUES: {
        _localctx = _tracker.createInstance<QueryTermDefaultContext>(_localctx);
        _ctx = _localctx;
        previousContext = _localctx;

        setState(2406);
        queryPrimary();
        break;
      }

      case fugue_sqlParser::FILL:
      case fugue_sqlParser::TAKE:
      case fugue_sqlParser::PROCESS:
      case fugue_sqlParser::ZIP:
      case fugue_sqlParser::SAVE:
      case fugue_sqlParser::SAMPLE:
      case fugue_sqlParser::ALTER:
      case fugue_sqlParser::CREATE:
      case fugue_sqlParser::DROP:
      case fugue_sqlParser::LOAD:
      case fugue_sqlParser::RENAME:
      case fugue_sqlParser::TRANSFORM: {
        _localctx = _tracker.createInstance<FugueTermContext>(_localctx);
        _ctx = _localctx;
        previousContext = _localctx;
        setState(2407);
        fugueNestableTaskCollectionNoSelect();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    _ctx->stop = _input->LT(-1);
    setState(2430);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 307, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(2428);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 306, _ctx)) {
        case 1: {
          auto newContext = _tracker.createInstance<SetOperationContext>(_tracker.createInstance<QueryTermContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->left = previousContext;
          pushNewRecursionContext(newContext, startState, RuleQueryTerm);
          setState(2410);

          if (!(precpred(_ctx, 3))) throw FailedPredicateException(this, "precpred(_ctx, 3)");
          setState(2411);
          antlrcpp::downCast<SetOperationContext *>(_localctx)->theOperator = _input->LT(1);
          _la = _input->LA(1);
          if (!(_la == fugue_sqlParser::EXCEPT

          || _la == fugue_sqlParser::INTERSECT || _la == fugue_sqlParser::SETMINUS

          || _la == fugue_sqlParser::UNION)) {
            antlrcpp::downCast<SetOperationContext *>(_localctx)->theOperator = _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
          setState(2413);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == fugue_sqlParser::ALL

          || _la == fugue_sqlParser::DISTINCT) {
            setState(2412);
            setQuantifier();
          }
          setState(2415);
          antlrcpp::downCast<SetOperationContext *>(_localctx)->right = queryTerm(4);
          break;
        }

        case 2: {
          auto newContext = _tracker.createInstance<SetOperationContext>(_tracker.createInstance<QueryTermContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->left = previousContext;
          pushNewRecursionContext(newContext, startState, RuleQueryTerm);
          setState(2416);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(2417);
          antlrcpp::downCast<SetOperationContext *>(_localctx)->theOperator = match(fugue_sqlParser::INTERSECT);
          setState(2419);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == fugue_sqlParser::ALL

          || _la == fugue_sqlParser::DISTINCT) {
            setState(2418);
            setQuantifier();
          }
          setState(2421);
          antlrcpp::downCast<SetOperationContext *>(_localctx)->right = queryTerm(3);
          break;
        }

        case 3: {
          auto newContext = _tracker.createInstance<SetOperationContext>(_tracker.createInstance<QueryTermContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->left = previousContext;
          pushNewRecursionContext(newContext, startState, RuleQueryTerm);
          setState(2422);

          if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
          setState(2423);
          antlrcpp::downCast<SetOperationContext *>(_localctx)->theOperator = _input->LT(1);
          _la = _input->LA(1);
          if (!(_la == fugue_sqlParser::EXCEPT || _la == fugue_sqlParser::SETMINUS

          || _la == fugue_sqlParser::UNION)) {
            antlrcpp::downCast<SetOperationContext *>(_localctx)->theOperator = _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
          setState(2425);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == fugue_sqlParser::ALL

          || _la == fugue_sqlParser::DISTINCT) {
            setState(2424);
            setQuantifier();
          }
          setState(2427);
          antlrcpp::downCast<SetOperationContext *>(_localctx)->right = queryTerm(2);
          break;
        }

        default:
          break;
        } 
      }
      setState(2432);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 307, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- QueryPrimaryContext ------------------------------------------------------------------

fugue_sqlParser::QueryPrimaryContext::QueryPrimaryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t fugue_sqlParser::QueryPrimaryContext::getRuleIndex() const {
  return fugue_sqlParser::RuleQueryPrimary;
}

void fugue_sqlParser::QueryPrimaryContext::copyFrom(QueryPrimaryContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- QueryPrimaryDefaultContext ------------------------------------------------------------------

fugue_sqlParser::QuerySpecificationContext* fugue_sqlParser::QueryPrimaryDefaultContext::querySpecification() {
  return getRuleContext<fugue_sqlParser::QuerySpecificationContext>(0);
}

fugue_sqlParser::QueryPrimaryDefaultContext::QueryPrimaryDefaultContext(QueryPrimaryContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::QueryPrimaryDefaultContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitQueryPrimaryDefault(this);
  else
    return visitor->visitChildren(this);
}
//----------------- InlineTableDefault1Context ------------------------------------------------------------------

fugue_sqlParser::InlineTableContext* fugue_sqlParser::InlineTableDefault1Context::inlineTable() {
  return getRuleContext<fugue_sqlParser::InlineTableContext>(0);
}

fugue_sqlParser::InlineTableDefault1Context::InlineTableDefault1Context(QueryPrimaryContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::InlineTableDefault1Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitInlineTableDefault1(this);
  else
    return visitor->visitChildren(this);
}
//----------------- FromStmtContext ------------------------------------------------------------------

fugue_sqlParser::FromStatementContext* fugue_sqlParser::FromStmtContext::fromStatement() {
  return getRuleContext<fugue_sqlParser::FromStatementContext>(0);
}

fugue_sqlParser::FromStmtContext::FromStmtContext(QueryPrimaryContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::FromStmtContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitFromStmt(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TableContext ------------------------------------------------------------------

tree::TerminalNode* fugue_sqlParser::TableContext::TABLE() {
  return getToken(fugue_sqlParser::TABLE, 0);
}

fugue_sqlParser::MultipartIdentifierContext* fugue_sqlParser::TableContext::multipartIdentifier() {
  return getRuleContext<fugue_sqlParser::MultipartIdentifierContext>(0);
}

fugue_sqlParser::TableContext::TableContext(QueryPrimaryContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::TableContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitTable(this);
  else
    return visitor->visitChildren(this);
}
fugue_sqlParser::QueryPrimaryContext* fugue_sqlParser::queryPrimary() {
  QueryPrimaryContext *_localctx = _tracker.createInstance<QueryPrimaryContext>(_ctx, getState());
  enterRule(_localctx, 232, fugue_sqlParser::RuleQueryPrimary);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2438);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case fugue_sqlParser::MAP:
      case fugue_sqlParser::REDUCE:
      case fugue_sqlParser::SELECT: {
        _localctx = _tracker.createInstance<fugue_sqlParser::QueryPrimaryDefaultContext>(_localctx);
        enterOuterAlt(_localctx, 1);
        setState(2433);
        querySpecification();
        break;
      }

      case fugue_sqlParser::FROM: {
        _localctx = _tracker.createInstance<fugue_sqlParser::FromStmtContext>(_localctx);
        enterOuterAlt(_localctx, 2);
        setState(2434);
        fromStatement();
        break;
      }

      case fugue_sqlParser::TABLE: {
        _localctx = _tracker.createInstance<fugue_sqlParser::TableContext>(_localctx);
        enterOuterAlt(_localctx, 3);
        setState(2435);
        match(fugue_sqlParser::TABLE);
        setState(2436);
        multipartIdentifier();
        break;
      }

      case fugue_sqlParser::VALUES: {
        _localctx = _tracker.createInstance<fugue_sqlParser::InlineTableDefault1Context>(_localctx);
        enterOuterAlt(_localctx, 4);
        setState(2437);
        inlineTable();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SortItemContext ------------------------------------------------------------------

fugue_sqlParser::SortItemContext::SortItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

fugue_sqlParser::ExpressionContext* fugue_sqlParser::SortItemContext::expression() {
  return getRuleContext<fugue_sqlParser::ExpressionContext>(0);
}

tree::TerminalNode* fugue_sqlParser::SortItemContext::THENULLS() {
  return getToken(fugue_sqlParser::THENULLS, 0);
}

tree::TerminalNode* fugue_sqlParser::SortItemContext::ASC() {
  return getToken(fugue_sqlParser::ASC, 0);
}

tree::TerminalNode* fugue_sqlParser::SortItemContext::DESC() {
  return getToken(fugue_sqlParser::DESC, 0);
}

tree::TerminalNode* fugue_sqlParser::SortItemContext::LAST() {
  return getToken(fugue_sqlParser::LAST, 0);
}

tree::TerminalNode* fugue_sqlParser::SortItemContext::FIRST() {
  return getToken(fugue_sqlParser::FIRST, 0);
}


size_t fugue_sqlParser::SortItemContext::getRuleIndex() const {
  return fugue_sqlParser::RuleSortItem;
}


antlrcpp::Any fugue_sqlParser::SortItemContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitSortItem(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::SortItemContext* fugue_sqlParser::sortItem() {
  SortItemContext *_localctx = _tracker.createInstance<SortItemContext>(_ctx, getState());
  enterRule(_localctx, 234, fugue_sqlParser::RuleSortItem);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2440);
    expression();
    setState(2442);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 309, _ctx)) {
    case 1: {
      setState(2441);
      antlrcpp::downCast<SortItemContext *>(_localctx)->ordering = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == fugue_sqlParser::ASC

      || _la == fugue_sqlParser::DESC)) {
        antlrcpp::downCast<SortItemContext *>(_localctx)->ordering = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    default:
      break;
    }
    setState(2446);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 310, _ctx)) {
    case 1: {
      setState(2444);
      match(fugue_sqlParser::THENULLS);
      setState(2445);
      antlrcpp::downCast<SortItemContext *>(_localctx)->nullOrder = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == fugue_sqlParser::FIRST

      || _la == fugue_sqlParser::LAST)) {
        antlrcpp::downCast<SortItemContext *>(_localctx)->nullOrder = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FromStatementContext ------------------------------------------------------------------

fugue_sqlParser::FromStatementContext::FromStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

fugue_sqlParser::FromClauseContext* fugue_sqlParser::FromStatementContext::fromClause() {
  return getRuleContext<fugue_sqlParser::FromClauseContext>(0);
}

std::vector<fugue_sqlParser::FromStatementBodyContext *> fugue_sqlParser::FromStatementContext::fromStatementBody() {
  return getRuleContexts<fugue_sqlParser::FromStatementBodyContext>();
}

fugue_sqlParser::FromStatementBodyContext* fugue_sqlParser::FromStatementContext::fromStatementBody(size_t i) {
  return getRuleContext<fugue_sqlParser::FromStatementBodyContext>(i);
}


size_t fugue_sqlParser::FromStatementContext::getRuleIndex() const {
  return fugue_sqlParser::RuleFromStatement;
}


antlrcpp::Any fugue_sqlParser::FromStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitFromStatement(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::FromStatementContext* fugue_sqlParser::fromStatement() {
  FromStatementContext *_localctx = _tracker.createInstance<FromStatementContext>(_ctx, getState());
  enterRule(_localctx, 236, fugue_sqlParser::RuleFromStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2448);
    fromClause();
    setState(2450); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(2449);
              fromStatementBody();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(2452); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 311, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FromStatementBodyContext ------------------------------------------------------------------

fugue_sqlParser::FromStatementBodyContext::FromStatementBodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

fugue_sqlParser::TransformClauseContext* fugue_sqlParser::FromStatementBodyContext::transformClause() {
  return getRuleContext<fugue_sqlParser::TransformClauseContext>(0);
}

fugue_sqlParser::QueryOrganizationContext* fugue_sqlParser::FromStatementBodyContext::queryOrganization() {
  return getRuleContext<fugue_sqlParser::QueryOrganizationContext>(0);
}

fugue_sqlParser::WhereClauseContext* fugue_sqlParser::FromStatementBodyContext::whereClause() {
  return getRuleContext<fugue_sqlParser::WhereClauseContext>(0);
}

fugue_sqlParser::SelectClauseContext* fugue_sqlParser::FromStatementBodyContext::selectClause() {
  return getRuleContext<fugue_sqlParser::SelectClauseContext>(0);
}

std::vector<fugue_sqlParser::LateralViewContext *> fugue_sqlParser::FromStatementBodyContext::lateralView() {
  return getRuleContexts<fugue_sqlParser::LateralViewContext>();
}

fugue_sqlParser::LateralViewContext* fugue_sqlParser::FromStatementBodyContext::lateralView(size_t i) {
  return getRuleContext<fugue_sqlParser::LateralViewContext>(i);
}

fugue_sqlParser::AggregationClauseContext* fugue_sqlParser::FromStatementBodyContext::aggregationClause() {
  return getRuleContext<fugue_sqlParser::AggregationClauseContext>(0);
}

fugue_sqlParser::HavingClauseContext* fugue_sqlParser::FromStatementBodyContext::havingClause() {
  return getRuleContext<fugue_sqlParser::HavingClauseContext>(0);
}

fugue_sqlParser::WindowClauseContext* fugue_sqlParser::FromStatementBodyContext::windowClause() {
  return getRuleContext<fugue_sqlParser::WindowClauseContext>(0);
}


size_t fugue_sqlParser::FromStatementBodyContext::getRuleIndex() const {
  return fugue_sqlParser::RuleFromStatementBody;
}


antlrcpp::Any fugue_sqlParser::FromStatementBodyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitFromStatementBody(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::FromStatementBodyContext* fugue_sqlParser::fromStatementBody() {
  FromStatementBodyContext *_localctx = _tracker.createInstance<FromStatementBodyContext>(_ctx, getState());
  enterRule(_localctx, 238, fugue_sqlParser::RuleFromStatementBody);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(2481);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 318, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2454);
      transformClause();
      setState(2456);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 312, _ctx)) {
      case 1: {
        setState(2455);
        whereClause();
        break;
      }

      default:
        break;
      }
      setState(2458);
      queryOrganization();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2460);
      selectClause();
      setState(2464);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 313, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(2461);
          lateralView(); 
        }
        setState(2466);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 313, _ctx);
      }
      setState(2468);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 314, _ctx)) {
      case 1: {
        setState(2467);
        whereClause();
        break;
      }

      default:
        break;
      }
      setState(2471);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 315, _ctx)) {
      case 1: {
        setState(2470);
        aggregationClause();
        break;
      }

      default:
        break;
      }
      setState(2474);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 316, _ctx)) {
      case 1: {
        setState(2473);
        havingClause();
        break;
      }

      default:
        break;
      }
      setState(2477);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 317, _ctx)) {
      case 1: {
        setState(2476);
        windowClause();
        break;
      }

      default:
        break;
      }
      setState(2479);
      queryOrganization();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- QuerySpecificationContext ------------------------------------------------------------------

fugue_sqlParser::QuerySpecificationContext::QuerySpecificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t fugue_sqlParser::QuerySpecificationContext::getRuleIndex() const {
  return fugue_sqlParser::RuleQuerySpecification;
}

void fugue_sqlParser::QuerySpecificationContext::copyFrom(QuerySpecificationContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- RegularQuerySpecificationContext ------------------------------------------------------------------

fugue_sqlParser::SelectClauseContext* fugue_sqlParser::RegularQuerySpecificationContext::selectClause() {
  return getRuleContext<fugue_sqlParser::SelectClauseContext>(0);
}

fugue_sqlParser::OptionalFromClauseContext* fugue_sqlParser::RegularQuerySpecificationContext::optionalFromClause() {
  return getRuleContext<fugue_sqlParser::OptionalFromClauseContext>(0);
}

std::vector<fugue_sqlParser::LateralViewContext *> fugue_sqlParser::RegularQuerySpecificationContext::lateralView() {
  return getRuleContexts<fugue_sqlParser::LateralViewContext>();
}

fugue_sqlParser::LateralViewContext* fugue_sqlParser::RegularQuerySpecificationContext::lateralView(size_t i) {
  return getRuleContext<fugue_sqlParser::LateralViewContext>(i);
}

fugue_sqlParser::WhereClauseContext* fugue_sqlParser::RegularQuerySpecificationContext::whereClause() {
  return getRuleContext<fugue_sqlParser::WhereClauseContext>(0);
}

fugue_sqlParser::AggregationClauseContext* fugue_sqlParser::RegularQuerySpecificationContext::aggregationClause() {
  return getRuleContext<fugue_sqlParser::AggregationClauseContext>(0);
}

fugue_sqlParser::HavingClauseContext* fugue_sqlParser::RegularQuerySpecificationContext::havingClause() {
  return getRuleContext<fugue_sqlParser::HavingClauseContext>(0);
}

fugue_sqlParser::WindowClauseContext* fugue_sqlParser::RegularQuerySpecificationContext::windowClause() {
  return getRuleContext<fugue_sqlParser::WindowClauseContext>(0);
}

fugue_sqlParser::RegularQuerySpecificationContext::RegularQuerySpecificationContext(QuerySpecificationContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::RegularQuerySpecificationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitRegularQuerySpecification(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TransformQuerySpecificationContext ------------------------------------------------------------------

fugue_sqlParser::TransformClauseContext* fugue_sqlParser::TransformQuerySpecificationContext::transformClause() {
  return getRuleContext<fugue_sqlParser::TransformClauseContext>(0);
}

fugue_sqlParser::OptionalFromClauseContext* fugue_sqlParser::TransformQuerySpecificationContext::optionalFromClause() {
  return getRuleContext<fugue_sqlParser::OptionalFromClauseContext>(0);
}

fugue_sqlParser::WhereClauseContext* fugue_sqlParser::TransformQuerySpecificationContext::whereClause() {
  return getRuleContext<fugue_sqlParser::WhereClauseContext>(0);
}

fugue_sqlParser::TransformQuerySpecificationContext::TransformQuerySpecificationContext(QuerySpecificationContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::TransformQuerySpecificationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitTransformQuerySpecification(this);
  else
    return visitor->visitChildren(this);
}
fugue_sqlParser::QuerySpecificationContext* fugue_sqlParser::querySpecification() {
  QuerySpecificationContext *_localctx = _tracker.createInstance<QuerySpecificationContext>(_ctx, getState());
  enterRule(_localctx, 240, fugue_sqlParser::RuleQuerySpecification);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(2508);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 325, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<fugue_sqlParser::TransformQuerySpecificationContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(2483);
      transformClause();
      setState(2484);
      optionalFromClause();
      setState(2486);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 319, _ctx)) {
      case 1: {
        setState(2485);
        whereClause();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<fugue_sqlParser::RegularQuerySpecificationContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(2488);
      selectClause();
      setState(2489);
      optionalFromClause();
      setState(2493);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 320, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(2490);
          lateralView(); 
        }
        setState(2495);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 320, _ctx);
      }
      setState(2497);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 321, _ctx)) {
      case 1: {
        setState(2496);
        whereClause();
        break;
      }

      default:
        break;
      }
      setState(2500);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 322, _ctx)) {
      case 1: {
        setState(2499);
        aggregationClause();
        break;
      }

      default:
        break;
      }
      setState(2503);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 323, _ctx)) {
      case 1: {
        setState(2502);
        havingClause();
        break;
      }

      default:
        break;
      }
      setState(2506);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 324, _ctx)) {
      case 1: {
        setState(2505);
        windowClause();
        break;
      }

      default:
        break;
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OptionalFromClauseContext ------------------------------------------------------------------

fugue_sqlParser::OptionalFromClauseContext::OptionalFromClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

fugue_sqlParser::FromClauseContext* fugue_sqlParser::OptionalFromClauseContext::fromClause() {
  return getRuleContext<fugue_sqlParser::FromClauseContext>(0);
}


size_t fugue_sqlParser::OptionalFromClauseContext::getRuleIndex() const {
  return fugue_sqlParser::RuleOptionalFromClause;
}


antlrcpp::Any fugue_sqlParser::OptionalFromClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitOptionalFromClause(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::OptionalFromClauseContext* fugue_sqlParser::optionalFromClause() {
  OptionalFromClauseContext *_localctx = _tracker.createInstance<OptionalFromClauseContext>(_ctx, getState());
  enterRule(_localctx, 242, fugue_sqlParser::RuleOptionalFromClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2511);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 326, _ctx)) {
    case 1: {
      setState(2510);
      fromClause();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TransformClauseContext ------------------------------------------------------------------

fugue_sqlParser::TransformClauseContext::TransformClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* fugue_sqlParser::TransformClauseContext::USING() {
  return getToken(fugue_sqlParser::USING, 0);
}

std::vector<tree::TerminalNode *> fugue_sqlParser::TransformClauseContext::STRING() {
  return getTokens(fugue_sqlParser::STRING);
}

tree::TerminalNode* fugue_sqlParser::TransformClauseContext::STRING(size_t i) {
  return getToken(fugue_sqlParser::STRING, i);
}

tree::TerminalNode* fugue_sqlParser::TransformClauseContext::SELECT() {
  return getToken(fugue_sqlParser::SELECT, 0);
}

fugue_sqlParser::NamedExpressionSeqContext* fugue_sqlParser::TransformClauseContext::namedExpressionSeq() {
  return getRuleContext<fugue_sqlParser::NamedExpressionSeqContext>(0);
}

tree::TerminalNode* fugue_sqlParser::TransformClauseContext::TRANSFORM() {
  return getToken(fugue_sqlParser::TRANSFORM, 0);
}

tree::TerminalNode* fugue_sqlParser::TransformClauseContext::MAP() {
  return getToken(fugue_sqlParser::MAP, 0);
}

tree::TerminalNode* fugue_sqlParser::TransformClauseContext::REDUCE() {
  return getToken(fugue_sqlParser::REDUCE, 0);
}

tree::TerminalNode* fugue_sqlParser::TransformClauseContext::RECORDWRITER() {
  return getToken(fugue_sqlParser::RECORDWRITER, 0);
}

tree::TerminalNode* fugue_sqlParser::TransformClauseContext::AS() {
  return getToken(fugue_sqlParser::AS, 0);
}

tree::TerminalNode* fugue_sqlParser::TransformClauseContext::RECORDREADER() {
  return getToken(fugue_sqlParser::RECORDREADER, 0);
}

std::vector<fugue_sqlParser::RowFormatContext *> fugue_sqlParser::TransformClauseContext::rowFormat() {
  return getRuleContexts<fugue_sqlParser::RowFormatContext>();
}

fugue_sqlParser::RowFormatContext* fugue_sqlParser::TransformClauseContext::rowFormat(size_t i) {
  return getRuleContext<fugue_sqlParser::RowFormatContext>(i);
}

fugue_sqlParser::IdentifierSeqContext* fugue_sqlParser::TransformClauseContext::identifierSeq() {
  return getRuleContext<fugue_sqlParser::IdentifierSeqContext>(0);
}

fugue_sqlParser::ColTypeListContext* fugue_sqlParser::TransformClauseContext::colTypeList() {
  return getRuleContext<fugue_sqlParser::ColTypeListContext>(0);
}


size_t fugue_sqlParser::TransformClauseContext::getRuleIndex() const {
  return fugue_sqlParser::RuleTransformClause;
}


antlrcpp::Any fugue_sqlParser::TransformClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitTransformClause(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::TransformClauseContext* fugue_sqlParser::transformClause() {
  TransformClauseContext *_localctx = _tracker.createInstance<TransformClauseContext>(_ctx, getState());
  enterRule(_localctx, 244, fugue_sqlParser::RuleTransformClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2523);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case fugue_sqlParser::SELECT: {
        setState(2513);
        match(fugue_sqlParser::SELECT);
        setState(2514);
        antlrcpp::downCast<TransformClauseContext *>(_localctx)->kind = match(fugue_sqlParser::TRANSFORM);
        setState(2515);
        match(fugue_sqlParser::T__2);
        setState(2516);
        namedExpressionSeq();
        setState(2517);
        match(fugue_sqlParser::T__3);
        break;
      }

      case fugue_sqlParser::MAP: {
        setState(2519);
        antlrcpp::downCast<TransformClauseContext *>(_localctx)->kind = match(fugue_sqlParser::MAP);
        setState(2520);
        namedExpressionSeq();
        break;
      }

      case fugue_sqlParser::REDUCE: {
        setState(2521);
        antlrcpp::downCast<TransformClauseContext *>(_localctx)->kind = match(fugue_sqlParser::REDUCE);
        setState(2522);
        namedExpressionSeq();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(2526);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == fugue_sqlParser::ROW) {
      setState(2525);
      antlrcpp::downCast<TransformClauseContext *>(_localctx)->inRowFormat = rowFormat();
    }
    setState(2530);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == fugue_sqlParser::RECORDWRITER) {
      setState(2528);
      match(fugue_sqlParser::RECORDWRITER);
      setState(2529);
      antlrcpp::downCast<TransformClauseContext *>(_localctx)->recordWriter = match(fugue_sqlParser::STRING);
    }
    setState(2532);
    match(fugue_sqlParser::USING);
    setState(2533);
    antlrcpp::downCast<TransformClauseContext *>(_localctx)->script = match(fugue_sqlParser::STRING);
    setState(2546);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 332, _ctx)) {
    case 1: {
      setState(2534);
      match(fugue_sqlParser::AS);
      setState(2544);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 331, _ctx)) {
      case 1: {
        setState(2535);
        identifierSeq();
        break;
      }

      case 2: {
        setState(2536);
        colTypeList();
        break;
      }

      case 3: {
        setState(2537);
        match(fugue_sqlParser::T__2);
        setState(2540);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 330, _ctx)) {
        case 1: {
          setState(2538);
          identifierSeq();
          break;
        }

        case 2: {
          setState(2539);
          colTypeList();
          break;
        }

        default:
          break;
        }
        setState(2542);
        match(fugue_sqlParser::T__3);
        break;
      }

      default:
        break;
      }
      break;
    }

    default:
      break;
    }
    setState(2549);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 333, _ctx)) {
    case 1: {
      setState(2548);
      antlrcpp::downCast<TransformClauseContext *>(_localctx)->outRowFormat = rowFormat();
      break;
    }

    default:
      break;
    }
    setState(2553);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 334, _ctx)) {
    case 1: {
      setState(2551);
      match(fugue_sqlParser::RECORDREADER);
      setState(2552);
      antlrcpp::downCast<TransformClauseContext *>(_localctx)->recordReader = match(fugue_sqlParser::STRING);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SelectClauseContext ------------------------------------------------------------------

fugue_sqlParser::SelectClauseContext::SelectClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* fugue_sqlParser::SelectClauseContext::SELECT() {
  return getToken(fugue_sqlParser::SELECT, 0);
}

fugue_sqlParser::NamedExpressionSeqContext* fugue_sqlParser::SelectClauseContext::namedExpressionSeq() {
  return getRuleContext<fugue_sqlParser::NamedExpressionSeqContext>(0);
}

fugue_sqlParser::SetQuantifierContext* fugue_sqlParser::SelectClauseContext::setQuantifier() {
  return getRuleContext<fugue_sqlParser::SetQuantifierContext>(0);
}

std::vector<fugue_sqlParser::HintContext *> fugue_sqlParser::SelectClauseContext::hint() {
  return getRuleContexts<fugue_sqlParser::HintContext>();
}

fugue_sqlParser::HintContext* fugue_sqlParser::SelectClauseContext::hint(size_t i) {
  return getRuleContext<fugue_sqlParser::HintContext>(i);
}


size_t fugue_sqlParser::SelectClauseContext::getRuleIndex() const {
  return fugue_sqlParser::RuleSelectClause;
}


antlrcpp::Any fugue_sqlParser::SelectClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitSelectClause(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::SelectClauseContext* fugue_sqlParser::selectClause() {
  SelectClauseContext *_localctx = _tracker.createInstance<SelectClauseContext>(_ctx, getState());
  enterRule(_localctx, 246, fugue_sqlParser::RuleSelectClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2555);
    match(fugue_sqlParser::SELECT);
    setState(2559);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == fugue_sqlParser::T__13) {
      setState(2556);
      antlrcpp::downCast<SelectClauseContext *>(_localctx)->hintContext = hint();
      antlrcpp::downCast<SelectClauseContext *>(_localctx)->hints.push_back(antlrcpp::downCast<SelectClauseContext *>(_localctx)->hintContext);
      setState(2561);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2563);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 336, _ctx)) {
    case 1: {
      setState(2562);
      setQuantifier();
      break;
    }

    default:
      break;
    }
    setState(2565);
    namedExpressionSeq();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SetClauseContext ------------------------------------------------------------------

fugue_sqlParser::SetClauseContext::SetClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* fugue_sqlParser::SetClauseContext::SET() {
  return getToken(fugue_sqlParser::SET, 0);
}

fugue_sqlParser::AssignmentListContext* fugue_sqlParser::SetClauseContext::assignmentList() {
  return getRuleContext<fugue_sqlParser::AssignmentListContext>(0);
}


size_t fugue_sqlParser::SetClauseContext::getRuleIndex() const {
  return fugue_sqlParser::RuleSetClause;
}


antlrcpp::Any fugue_sqlParser::SetClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitSetClause(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::SetClauseContext* fugue_sqlParser::setClause() {
  SetClauseContext *_localctx = _tracker.createInstance<SetClauseContext>(_ctx, getState());
  enterRule(_localctx, 248, fugue_sqlParser::RuleSetClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2567);
    match(fugue_sqlParser::SET);
    setState(2568);
    assignmentList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MatchedClauseContext ------------------------------------------------------------------

fugue_sqlParser::MatchedClauseContext::MatchedClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* fugue_sqlParser::MatchedClauseContext::WHEN() {
  return getToken(fugue_sqlParser::WHEN, 0);
}

tree::TerminalNode* fugue_sqlParser::MatchedClauseContext::MATCHED() {
  return getToken(fugue_sqlParser::MATCHED, 0);
}

tree::TerminalNode* fugue_sqlParser::MatchedClauseContext::THEN() {
  return getToken(fugue_sqlParser::THEN, 0);
}

fugue_sqlParser::MatchedActionContext* fugue_sqlParser::MatchedClauseContext::matchedAction() {
  return getRuleContext<fugue_sqlParser::MatchedActionContext>(0);
}

tree::TerminalNode* fugue_sqlParser::MatchedClauseContext::AND() {
  return getToken(fugue_sqlParser::AND, 0);
}

fugue_sqlParser::BooleanExpressionContext* fugue_sqlParser::MatchedClauseContext::booleanExpression() {
  return getRuleContext<fugue_sqlParser::BooleanExpressionContext>(0);
}


size_t fugue_sqlParser::MatchedClauseContext::getRuleIndex() const {
  return fugue_sqlParser::RuleMatchedClause;
}


antlrcpp::Any fugue_sqlParser::MatchedClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitMatchedClause(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::MatchedClauseContext* fugue_sqlParser::matchedClause() {
  MatchedClauseContext *_localctx = _tracker.createInstance<MatchedClauseContext>(_ctx, getState());
  enterRule(_localctx, 250, fugue_sqlParser::RuleMatchedClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2570);
    match(fugue_sqlParser::WHEN);
    setState(2571);
    match(fugue_sqlParser::MATCHED);
    setState(2574);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == fugue_sqlParser::AND) {
      setState(2572);
      match(fugue_sqlParser::AND);
      setState(2573);
      antlrcpp::downCast<MatchedClauseContext *>(_localctx)->matchedCond = booleanExpression(0);
    }
    setState(2576);
    match(fugue_sqlParser::THEN);
    setState(2577);
    matchedAction();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NotMatchedClauseContext ------------------------------------------------------------------

fugue_sqlParser::NotMatchedClauseContext::NotMatchedClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* fugue_sqlParser::NotMatchedClauseContext::WHEN() {
  return getToken(fugue_sqlParser::WHEN, 0);
}

tree::TerminalNode* fugue_sqlParser::NotMatchedClauseContext::NOT() {
  return getToken(fugue_sqlParser::NOT, 0);
}

tree::TerminalNode* fugue_sqlParser::NotMatchedClauseContext::MATCHED() {
  return getToken(fugue_sqlParser::MATCHED, 0);
}

tree::TerminalNode* fugue_sqlParser::NotMatchedClauseContext::THEN() {
  return getToken(fugue_sqlParser::THEN, 0);
}

fugue_sqlParser::NotMatchedActionContext* fugue_sqlParser::NotMatchedClauseContext::notMatchedAction() {
  return getRuleContext<fugue_sqlParser::NotMatchedActionContext>(0);
}

tree::TerminalNode* fugue_sqlParser::NotMatchedClauseContext::AND() {
  return getToken(fugue_sqlParser::AND, 0);
}

fugue_sqlParser::BooleanExpressionContext* fugue_sqlParser::NotMatchedClauseContext::booleanExpression() {
  return getRuleContext<fugue_sqlParser::BooleanExpressionContext>(0);
}


size_t fugue_sqlParser::NotMatchedClauseContext::getRuleIndex() const {
  return fugue_sqlParser::RuleNotMatchedClause;
}


antlrcpp::Any fugue_sqlParser::NotMatchedClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitNotMatchedClause(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::NotMatchedClauseContext* fugue_sqlParser::notMatchedClause() {
  NotMatchedClauseContext *_localctx = _tracker.createInstance<NotMatchedClauseContext>(_ctx, getState());
  enterRule(_localctx, 252, fugue_sqlParser::RuleNotMatchedClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2579);
    match(fugue_sqlParser::WHEN);
    setState(2580);
    match(fugue_sqlParser::NOT);
    setState(2581);
    match(fugue_sqlParser::MATCHED);
    setState(2584);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == fugue_sqlParser::AND) {
      setState(2582);
      match(fugue_sqlParser::AND);
      setState(2583);
      antlrcpp::downCast<NotMatchedClauseContext *>(_localctx)->notMatchedCond = booleanExpression(0);
    }
    setState(2586);
    match(fugue_sqlParser::THEN);
    setState(2587);
    notMatchedAction();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MatchedActionContext ------------------------------------------------------------------

fugue_sqlParser::MatchedActionContext::MatchedActionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* fugue_sqlParser::MatchedActionContext::DELETE() {
  return getToken(fugue_sqlParser::DELETE, 0);
}

tree::TerminalNode* fugue_sqlParser::MatchedActionContext::UPDATE() {
  return getToken(fugue_sqlParser::UPDATE, 0);
}

tree::TerminalNode* fugue_sqlParser::MatchedActionContext::SET() {
  return getToken(fugue_sqlParser::SET, 0);
}

tree::TerminalNode* fugue_sqlParser::MatchedActionContext::ASTERISK() {
  return getToken(fugue_sqlParser::ASTERISK, 0);
}

fugue_sqlParser::AssignmentListContext* fugue_sqlParser::MatchedActionContext::assignmentList() {
  return getRuleContext<fugue_sqlParser::AssignmentListContext>(0);
}


size_t fugue_sqlParser::MatchedActionContext::getRuleIndex() const {
  return fugue_sqlParser::RuleMatchedAction;
}


antlrcpp::Any fugue_sqlParser::MatchedActionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitMatchedAction(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::MatchedActionContext* fugue_sqlParser::matchedAction() {
  MatchedActionContext *_localctx = _tracker.createInstance<MatchedActionContext>(_ctx, getState());
  enterRule(_localctx, 254, fugue_sqlParser::RuleMatchedAction);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2596);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 339, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2589);
      match(fugue_sqlParser::DELETE);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2590);
      match(fugue_sqlParser::UPDATE);
      setState(2591);
      match(fugue_sqlParser::SET);
      setState(2592);
      match(fugue_sqlParser::ASTERISK);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2593);
      match(fugue_sqlParser::UPDATE);
      setState(2594);
      match(fugue_sqlParser::SET);
      setState(2595);
      assignmentList();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NotMatchedActionContext ------------------------------------------------------------------

fugue_sqlParser::NotMatchedActionContext::NotMatchedActionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* fugue_sqlParser::NotMatchedActionContext::INSERT() {
  return getToken(fugue_sqlParser::INSERT, 0);
}

tree::TerminalNode* fugue_sqlParser::NotMatchedActionContext::ASTERISK() {
  return getToken(fugue_sqlParser::ASTERISK, 0);
}

tree::TerminalNode* fugue_sqlParser::NotMatchedActionContext::VALUES() {
  return getToken(fugue_sqlParser::VALUES, 0);
}

std::vector<fugue_sqlParser::ExpressionContext *> fugue_sqlParser::NotMatchedActionContext::expression() {
  return getRuleContexts<fugue_sqlParser::ExpressionContext>();
}

fugue_sqlParser::ExpressionContext* fugue_sqlParser::NotMatchedActionContext::expression(size_t i) {
  return getRuleContext<fugue_sqlParser::ExpressionContext>(i);
}

fugue_sqlParser::MultipartIdentifierListContext* fugue_sqlParser::NotMatchedActionContext::multipartIdentifierList() {
  return getRuleContext<fugue_sqlParser::MultipartIdentifierListContext>(0);
}


size_t fugue_sqlParser::NotMatchedActionContext::getRuleIndex() const {
  return fugue_sqlParser::RuleNotMatchedAction;
}


antlrcpp::Any fugue_sqlParser::NotMatchedActionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitNotMatchedAction(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::NotMatchedActionContext* fugue_sqlParser::notMatchedAction() {
  NotMatchedActionContext *_localctx = _tracker.createInstance<NotMatchedActionContext>(_ctx, getState());
  enterRule(_localctx, 256, fugue_sqlParser::RuleNotMatchedAction);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2616);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 341, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2598);
      match(fugue_sqlParser::INSERT);
      setState(2599);
      match(fugue_sqlParser::ASTERISK);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2600);
      match(fugue_sqlParser::INSERT);
      setState(2601);
      match(fugue_sqlParser::T__2);
      setState(2602);
      antlrcpp::downCast<NotMatchedActionContext *>(_localctx)->columns = multipartIdentifierList();
      setState(2603);
      match(fugue_sqlParser::T__3);
      setState(2604);
      match(fugue_sqlParser::VALUES);
      setState(2605);
      match(fugue_sqlParser::T__2);
      setState(2606);
      expression();
      setState(2611);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == fugue_sqlParser::T__0) {
        setState(2607);
        match(fugue_sqlParser::T__0);
        setState(2608);
        expression();
        setState(2613);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(2614);
      match(fugue_sqlParser::T__3);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AssignmentListContext ------------------------------------------------------------------

fugue_sqlParser::AssignmentListContext::AssignmentListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<fugue_sqlParser::AssignmentContext *> fugue_sqlParser::AssignmentListContext::assignment() {
  return getRuleContexts<fugue_sqlParser::AssignmentContext>();
}

fugue_sqlParser::AssignmentContext* fugue_sqlParser::AssignmentListContext::assignment(size_t i) {
  return getRuleContext<fugue_sqlParser::AssignmentContext>(i);
}


size_t fugue_sqlParser::AssignmentListContext::getRuleIndex() const {
  return fugue_sqlParser::RuleAssignmentList;
}


antlrcpp::Any fugue_sqlParser::AssignmentListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitAssignmentList(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::AssignmentListContext* fugue_sqlParser::assignmentList() {
  AssignmentListContext *_localctx = _tracker.createInstance<AssignmentListContext>(_ctx, getState());
  enterRule(_localctx, 258, fugue_sqlParser::RuleAssignmentList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2618);
    assignment();
    setState(2623);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == fugue_sqlParser::T__0) {
      setState(2619);
      match(fugue_sqlParser::T__0);
      setState(2620);
      assignment();
      setState(2625);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AssignmentContext ------------------------------------------------------------------

fugue_sqlParser::AssignmentContext::AssignmentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* fugue_sqlParser::AssignmentContext::EQUAL() {
  return getToken(fugue_sqlParser::EQUAL, 0);
}

fugue_sqlParser::MultipartIdentifierContext* fugue_sqlParser::AssignmentContext::multipartIdentifier() {
  return getRuleContext<fugue_sqlParser::MultipartIdentifierContext>(0);
}

fugue_sqlParser::ExpressionContext* fugue_sqlParser::AssignmentContext::expression() {
  return getRuleContext<fugue_sqlParser::ExpressionContext>(0);
}


size_t fugue_sqlParser::AssignmentContext::getRuleIndex() const {
  return fugue_sqlParser::RuleAssignment;
}


antlrcpp::Any fugue_sqlParser::AssignmentContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitAssignment(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::AssignmentContext* fugue_sqlParser::assignment() {
  AssignmentContext *_localctx = _tracker.createInstance<AssignmentContext>(_ctx, getState());
  enterRule(_localctx, 260, fugue_sqlParser::RuleAssignment);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2626);
    antlrcpp::downCast<AssignmentContext *>(_localctx)->key = multipartIdentifier();
    setState(2627);
    match(fugue_sqlParser::EQUAL);
    setState(2628);
    antlrcpp::downCast<AssignmentContext *>(_localctx)->value = expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WhereClauseContext ------------------------------------------------------------------

fugue_sqlParser::WhereClauseContext::WhereClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* fugue_sqlParser::WhereClauseContext::WHERE() {
  return getToken(fugue_sqlParser::WHERE, 0);
}

fugue_sqlParser::BooleanExpressionContext* fugue_sqlParser::WhereClauseContext::booleanExpression() {
  return getRuleContext<fugue_sqlParser::BooleanExpressionContext>(0);
}


size_t fugue_sqlParser::WhereClauseContext::getRuleIndex() const {
  return fugue_sqlParser::RuleWhereClause;
}


antlrcpp::Any fugue_sqlParser::WhereClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitWhereClause(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::WhereClauseContext* fugue_sqlParser::whereClause() {
  WhereClauseContext *_localctx = _tracker.createInstance<WhereClauseContext>(_ctx, getState());
  enterRule(_localctx, 262, fugue_sqlParser::RuleWhereClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2630);
    match(fugue_sqlParser::WHERE);
    setState(2631);
    booleanExpression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- HavingClauseContext ------------------------------------------------------------------

fugue_sqlParser::HavingClauseContext::HavingClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* fugue_sqlParser::HavingClauseContext::HAVING() {
  return getToken(fugue_sqlParser::HAVING, 0);
}

fugue_sqlParser::BooleanExpressionContext* fugue_sqlParser::HavingClauseContext::booleanExpression() {
  return getRuleContext<fugue_sqlParser::BooleanExpressionContext>(0);
}


size_t fugue_sqlParser::HavingClauseContext::getRuleIndex() const {
  return fugue_sqlParser::RuleHavingClause;
}


antlrcpp::Any fugue_sqlParser::HavingClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitHavingClause(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::HavingClauseContext* fugue_sqlParser::havingClause() {
  HavingClauseContext *_localctx = _tracker.createInstance<HavingClauseContext>(_ctx, getState());
  enterRule(_localctx, 264, fugue_sqlParser::RuleHavingClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2633);
    match(fugue_sqlParser::HAVING);
    setState(2634);
    booleanExpression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- HintContext ------------------------------------------------------------------

fugue_sqlParser::HintContext::HintContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<fugue_sqlParser::HintStatementContext *> fugue_sqlParser::HintContext::hintStatement() {
  return getRuleContexts<fugue_sqlParser::HintStatementContext>();
}

fugue_sqlParser::HintStatementContext* fugue_sqlParser::HintContext::hintStatement(size_t i) {
  return getRuleContext<fugue_sqlParser::HintStatementContext>(i);
}


size_t fugue_sqlParser::HintContext::getRuleIndex() const {
  return fugue_sqlParser::RuleHint;
}


antlrcpp::Any fugue_sqlParser::HintContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitHint(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::HintContext* fugue_sqlParser::hint() {
  HintContext *_localctx = _tracker.createInstance<HintContext>(_ctx, getState());
  enterRule(_localctx, 266, fugue_sqlParser::RuleHint);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2636);
    match(fugue_sqlParser::T__13);
    setState(2637);
    antlrcpp::downCast<HintContext *>(_localctx)->hintStatementContext = hintStatement();
    antlrcpp::downCast<HintContext *>(_localctx)->hintStatements.push_back(antlrcpp::downCast<HintContext *>(_localctx)->hintStatementContext);
    setState(2644);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << fugue_sqlParser::T__0)
      | (1ULL << fugue_sqlParser::ADD)
      | (1ULL << fugue_sqlParser::AFTER)
      | (1ULL << fugue_sqlParser::ALL)
      | (1ULL << fugue_sqlParser::ALTER)
      | (1ULL << fugue_sqlParser::ANALYZE)
      | (1ULL << fugue_sqlParser::AND)
      | (1ULL << fugue_sqlParser::ANTI)
      | (1ULL << fugue_sqlParser::ANY)
      | (1ULL << fugue_sqlParser::ARCHIVE)
      | (1ULL << fugue_sqlParser::ARRAY)
      | (1ULL << fugue_sqlParser::AS))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & ((1ULL << (fugue_sqlParser::ASC - 64))
      | (1ULL << (fugue_sqlParser::AT - 64))
      | (1ULL << (fugue_sqlParser::AUTHORIZATION - 64))
      | (1ULL << (fugue_sqlParser::BETWEEN - 64))
      | (1ULL << (fugue_sqlParser::BOTH - 64))
      | (1ULL << (fugue_sqlParser::BUCKET - 64))
      | (1ULL << (fugue_sqlParser::BUCKETS - 64))
      | (1ULL << (fugue_sqlParser::BY - 64))
      | (1ULL << (fugue_sqlParser::CACHE - 64))
      | (1ULL << (fugue_sqlParser::CASCADE - 64))
      | (1ULL << (fugue_sqlParser::CASE - 64))
      | (1ULL << (fugue_sqlParser::CAST - 64))
      | (1ULL << (fugue_sqlParser::CHANGE - 64))
      | (1ULL << (fugue_sqlParser::CHECK - 64))
      | (1ULL << (fugue_sqlParser::CLEAR - 64))
      | (1ULL << (fugue_sqlParser::CLUSTER - 64))
      | (1ULL << (fugue_sqlParser::CLUSTERED - 64))
      | (1ULL << (fugue_sqlParser::CODEGEN - 64))
      | (1ULL << (fugue_sqlParser::COLLATE - 64))
      | (1ULL << (fugue_sqlParser::COLLECTION - 64))
      | (1ULL << (fugue_sqlParser::COLUMN - 64))
      | (1ULL << (fugue_sqlParser::COLUMNS - 64))
      | (1ULL << (fugue_sqlParser::COMMENT - 64))
      | (1ULL << (fugue_sqlParser::COMMIT - 64))
      | (1ULL << (fugue_sqlParser::COMPACT - 64))
      | (1ULL << (fugue_sqlParser::COMPACTIONS - 64))
      | (1ULL << (fugue_sqlParser::COMPUTE - 64))
      | (1ULL << (fugue_sqlParser::CONCATENATE - 64))
      | (1ULL << (fugue_sqlParser::CONSTRAINT - 64))
      | (1ULL << (fugue_sqlParser::COST - 64))
      | (1ULL << (fugue_sqlParser::CREATE - 64))
      | (1ULL << (fugue_sqlParser::CROSS - 64))
      | (1ULL << (fugue_sqlParser::CUBE - 64))
      | (1ULL << (fugue_sqlParser::CURRENT - 64))
      | (1ULL << (fugue_sqlParser::CURRENT_DATE - 64))
      | (1ULL << (fugue_sqlParser::CURRENT_TIME - 64))
      | (1ULL << (fugue_sqlParser::CURRENT_TIMESTAMP - 64))
      | (1ULL << (fugue_sqlParser::CURRENT_USER - 64))
      | (1ULL << (fugue_sqlParser::DATA - 64))
      | (1ULL << (fugue_sqlParser::DATABASE - 64))
      | (1ULL << (fugue_sqlParser::DATABASES - 64))
      | (1ULL << (fugue_sqlParser::DAY - 64))
      | (1ULL << (fugue_sqlParser::DBPROPERTIES - 64))
      | (1ULL << (fugue_sqlParser::DEFINED - 64))
      | (1ULL << (fugue_sqlParser::DELETE - 64))
      | (1ULL << (fugue_sqlParser::DELIMITED - 64))
      | (1ULL << (fugue_sqlParser::DESC - 64))
      | (1ULL << (fugue_sqlParser::DESCRIBE - 64))
      | (1ULL << (fugue_sqlParser::DFS - 64))
      | (1ULL << (fugue_sqlParser::DIRECTORIES - 64))
      | (1ULL << (fugue_sqlParser::DIRECTORY - 64))
      | (1ULL << (fugue_sqlParser::DISTINCT - 64))
      | (1ULL << (fugue_sqlParser::DISTRIBUTE - 64))
      | (1ULL << (fugue_sqlParser::DROP - 64))
      | (1ULL << (fugue_sqlParser::ELSE - 64))
      | (1ULL << (fugue_sqlParser::END - 64))
      | (1ULL << (fugue_sqlParser::ESCAPE - 64))
      | (1ULL << (fugue_sqlParser::ESCAPED - 64))
      | (1ULL << (fugue_sqlParser::EXCEPT - 64))
      | (1ULL << (fugue_sqlParser::EXCHANGE - 64))
      | (1ULL << (fugue_sqlParser::EXISTS - 64))
      | (1ULL << (fugue_sqlParser::EXPLAIN - 64))
      | (1ULL << (fugue_sqlParser::EXPORT - 64))
      | (1ULL << (fugue_sqlParser::EXTENDED - 64)))) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 128)) & ((1ULL << (fugue_sqlParser::EXTERNAL - 128))
      | (1ULL << (fugue_sqlParser::EXTRACT - 128))
      | (1ULL << (fugue_sqlParser::FALSE - 128))
      | (1ULL << (fugue_sqlParser::FETCH - 128))
      | (1ULL << (fugue_sqlParser::FIELDS - 128))
      | (1ULL << (fugue_sqlParser::FILTER - 128))
      | (1ULL << (fugue_sqlParser::FILEFORMAT - 128))
      | (1ULL << (fugue_sqlParser::FIRST - 128))
      | (1ULL << (fugue_sqlParser::FOLLOWING - 128))
      | (1ULL << (fugue_sqlParser::FOR - 128))
      | (1ULL << (fugue_sqlParser::FOREIGN - 128))
      | (1ULL << (fugue_sqlParser::FORMAT - 128))
      | (1ULL << (fugue_sqlParser::FORMATTED - 128))
      | (1ULL << (fugue_sqlParser::FROM - 128))
      | (1ULL << (fugue_sqlParser::FULL - 128))
      | (1ULL << (fugue_sqlParser::FUNCTION - 128))
      | (1ULL << (fugue_sqlParser::FUNCTIONS - 128))
      | (1ULL << (fugue_sqlParser::GLOBAL - 128))
      | (1ULL << (fugue_sqlParser::GRANT - 128))
      | (1ULL << (fugue_sqlParser::GROUP - 128))
      | (1ULL << (fugue_sqlParser::GROUPING - 128))
      | (1ULL << (fugue_sqlParser::HAVING - 128))
      | (1ULL << (fugue_sqlParser::HOUR - 128))
      | (1ULL << (fugue_sqlParser::IF - 128))
      | (1ULL << (fugue_sqlParser::IGNORE - 128))
      | (1ULL << (fugue_sqlParser::IMPORT - 128))
      | (1ULL << (fugue_sqlParser::IN - 128))
      | (1ULL << (fugue_sqlParser::INDEX - 128))
      | (1ULL << (fugue_sqlParser::INDEXES - 128))
      | (1ULL << (fugue_sqlParser::INNER - 128))
      | (1ULL << (fugue_sqlParser::INPATH - 128))
      | (1ULL << (fugue_sqlParser::INPUTFORMAT - 128))
      | (1ULL << (fugue_sqlParser::INSERT - 128))
      | (1ULL << (fugue_sqlParser::INTERSECT - 128))
      | (1ULL << (fugue_sqlParser::INTERVAL - 128))
      | (1ULL << (fugue_sqlParser::INTO - 128))
      | (1ULL << (fugue_sqlParser::IS - 128))
      | (1ULL << (fugue_sqlParser::ITEMS - 128))
      | (1ULL << (fugue_sqlParser::JOIN - 128))
      | (1ULL << (fugue_sqlParser::KEYS - 128))
      | (1ULL << (fugue_sqlParser::LAST - 128))
      | (1ULL << (fugue_sqlParser::LATERAL - 128))
      | (1ULL << (fugue_sqlParser::LAZY - 128))
      | (1ULL << (fugue_sqlParser::LEADING - 128))
      | (1ULL << (fugue_sqlParser::LEFT - 128))
      | (1ULL << (fugue_sqlParser::LIKE - 128))
      | (1ULL << (fugue_sqlParser::LIMIT - 128))
      | (1ULL << (fugue_sqlParser::LINES - 128))
      | (1ULL << (fugue_sqlParser::LIST - 128))
      | (1ULL << (fugue_sqlParser::LOAD - 128))
      | (1ULL << (fugue_sqlParser::LOCAL - 128))
      | (1ULL << (fugue_sqlParser::LOCATION - 128))
      | (1ULL << (fugue_sqlParser::LOCK - 128))
      | (1ULL << (fugue_sqlParser::LOCKS - 128))
      | (1ULL << (fugue_sqlParser::LOGICAL - 128))
      | (1ULL << (fugue_sqlParser::MACRO - 128))
      | (1ULL << (fugue_sqlParser::MAP - 128))
      | (1ULL << (fugue_sqlParser::MATCHED - 128))
      | (1ULL << (fugue_sqlParser::MERGE - 128))
      | (1ULL << (fugue_sqlParser::MINUTE - 128))
      | (1ULL << (fugue_sqlParser::MONTH - 128))
      | (1ULL << (fugue_sqlParser::MSCK - 128))
      | (1ULL << (fugue_sqlParser::NAMESPACE - 128))
      | (1ULL << (fugue_sqlParser::NAMESPACES - 128)))) != 0) || ((((_la - 192) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 192)) & ((1ULL << (fugue_sqlParser::NATURAL - 192))
      | (1ULL << (fugue_sqlParser::NO - 192))
      | (1ULL << (fugue_sqlParser::NOT - 192))
      | (1ULL << (fugue_sqlParser::THENULL - 192))
      | (1ULL << (fugue_sqlParser::THENULLS - 192))
      | (1ULL << (fugue_sqlParser::OF - 192))
      | (1ULL << (fugue_sqlParser::ON - 192))
      | (1ULL << (fugue_sqlParser::ONLY - 192))
      | (1ULL << (fugue_sqlParser::OPTION - 192))
      | (1ULL << (fugue_sqlParser::OPTIONS - 192))
      | (1ULL << (fugue_sqlParser::OR - 192))
      | (1ULL << (fugue_sqlParser::ORDER - 192))
      | (1ULL << (fugue_sqlParser::OUT - 192))
      | (1ULL << (fugue_sqlParser::OUTER - 192))
      | (1ULL << (fugue_sqlParser::OUTPUTFORMAT - 192))
      | (1ULL << (fugue_sqlParser::OVER - 192))
      | (1ULL << (fugue_sqlParser::OVERLAPS - 192))
      | (1ULL << (fugue_sqlParser::OVERLAY - 192))
      | (1ULL << (fugue_sqlParser::OVERWRITE - 192))
      | (1ULL << (fugue_sqlParser::PARTITION - 192))
      | (1ULL << (fugue_sqlParser::PARTITIONED - 192))
      | (1ULL << (fugue_sqlParser::PARTITIONS - 192))
      | (1ULL << (fugue_sqlParser::PERCENTLIT - 192))
      | (1ULL << (fugue_sqlParser::PIVOT - 192))
      | (1ULL << (fugue_sqlParser::PLACING - 192))
      | (1ULL << (fugue_sqlParser::POSITION - 192))
      | (1ULL << (fugue_sqlParser::PRECEDING - 192))
      | (1ULL << (fugue_sqlParser::PRIMARY - 192))
      | (1ULL << (fugue_sqlParser::PRINCIPALS - 192))
      | (1ULL << (fugue_sqlParser::PROPERTIES - 192))
      | (1ULL << (fugue_sqlParser::PURGE - 192))
      | (1ULL << (fugue_sqlParser::QUERY - 192))
      | (1ULL << (fugue_sqlParser::RANGE - 192))
      | (1ULL << (fugue_sqlParser::RECORDREADER - 192))
      | (1ULL << (fugue_sqlParser::RECORDWRITER - 192))
      | (1ULL << (fugue_sqlParser::RECOVER - 192))
      | (1ULL << (fugue_sqlParser::REDUCE - 192))
      | (1ULL << (fugue_sqlParser::REFERENCES - 192))
      | (1ULL << (fugue_sqlParser::REFRESH - 192))
      | (1ULL << (fugue_sqlParser::RENAME - 192))
      | (1ULL << (fugue_sqlParser::REPAIR - 192))
      | (1ULL << (fugue_sqlParser::REPLACE - 192))
      | (1ULL << (fugue_sqlParser::RESET - 192))
      | (1ULL << (fugue_sqlParser::RESTRICT - 192))
      | (1ULL << (fugue_sqlParser::REVOKE - 192))
      | (1ULL << (fugue_sqlParser::RIGHT - 192))
      | (1ULL << (fugue_sqlParser::RLIKE - 192))
      | (1ULL << (fugue_sqlParser::ROLE - 192))
      | (1ULL << (fugue_sqlParser::ROLES - 192))
      | (1ULL << (fugue_sqlParser::ROLLBACK - 192))
      | (1ULL << (fugue_sqlParser::ROLLUP - 192))
      | (1ULL << (fugue_sqlParser::ROW - 192))
      | (1ULL << (fugue_sqlParser::ROWS - 192))
      | (1ULL << (fugue_sqlParser::SCHEMA - 192))
      | (1ULL << (fugue_sqlParser::SECOND - 192))
      | (1ULL << (fugue_sqlParser::SELECT - 192))
      | (1ULL << (fugue_sqlParser::SEMI - 192))
      | (1ULL << (fugue_sqlParser::SEPARATED - 192))
      | (1ULL << (fugue_sqlParser::SERDE - 192))
      | (1ULL << (fugue_sqlParser::SERDEPROPERTIES - 192))
      | (1ULL << (fugue_sqlParser::SESSION_USER - 192))
      | (1ULL << (fugue_sqlParser::SET - 192))
      | (1ULL << (fugue_sqlParser::SETMINUS - 192))
      | (1ULL << (fugue_sqlParser::SETS - 192)))) != 0) || ((((_la - 256) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 256)) & ((1ULL << (fugue_sqlParser::SHOW - 256))
      | (1ULL << (fugue_sqlParser::SKEWED - 256))
      | (1ULL << (fugue_sqlParser::SOME - 256))
      | (1ULL << (fugue_sqlParser::SORT - 256))
      | (1ULL << (fugue_sqlParser::SORTED - 256))
      | (1ULL << (fugue_sqlParser::START - 256))
      | (1ULL << (fugue_sqlParser::STATISTICS - 256))
      | (1ULL << (fugue_sqlParser::STORED - 256))
      | (1ULL << (fugue_sqlParser::STRATIFY - 256))
      | (1ULL << (fugue_sqlParser::STRUCT - 256))
      | (1ULL << (fugue_sqlParser::SUBSTR - 256))
      | (1ULL << (fugue_sqlParser::SUBSTRING - 256))
      | (1ULL << (fugue_sqlParser::TABLE - 256))
      | (1ULL << (fugue_sqlParser::TABLES - 256))
      | (1ULL << (fugue_sqlParser::TABLESAMPLE - 256))
      | (1ULL << (fugue_sqlParser::TBLPROPERTIES - 256))
      | (1ULL << (fugue_sqlParser::TEMPORARY - 256))
      | (1ULL << (fugue_sqlParser::TERMINATED - 256))
      | (1ULL << (fugue_sqlParser::THEN - 256))
      | (1ULL << (fugue_sqlParser::TO - 256))
      | (1ULL << (fugue_sqlParser::TOUCH - 256))
      | (1ULL << (fugue_sqlParser::TRAILING - 256))
      | (1ULL << (fugue_sqlParser::TRANSACTION - 256))
      | (1ULL << (fugue_sqlParser::TRANSACTIONS - 256))
      | (1ULL << (fugue_sqlParser::TRANSFORM - 256))
      | (1ULL << (fugue_sqlParser::TRIM - 256))
      | (1ULL << (fugue_sqlParser::TRUE - 256))
      | (1ULL << (fugue_sqlParser::TRUNCATE - 256))
      | (1ULL << (fugue_sqlParser::TYPE - 256))
      | (1ULL << (fugue_sqlParser::UNARCHIVE - 256))
      | (1ULL << (fugue_sqlParser::UNBOUNDED - 256))
      | (1ULL << (fugue_sqlParser::UNCACHE - 256))
      | (1ULL << (fugue_sqlParser::UNION - 256))
      | (1ULL << (fugue_sqlParser::UNIQUE - 256))
      | (1ULL << (fugue_sqlParser::UNKNOWN - 256))
      | (1ULL << (fugue_sqlParser::UNLOCK - 256))
      | (1ULL << (fugue_sqlParser::UNSET - 256))
      | (1ULL << (fugue_sqlParser::UPDATE - 256))
      | (1ULL << (fugue_sqlParser::USE - 256))
      | (1ULL << (fugue_sqlParser::USER - 256))
      | (1ULL << (fugue_sqlParser::USING - 256))
      | (1ULL << (fugue_sqlParser::VALUES - 256))
      | (1ULL << (fugue_sqlParser::VIEW - 256))
      | (1ULL << (fugue_sqlParser::VIEWS - 256))
      | (1ULL << (fugue_sqlParser::WHEN - 256))
      | (1ULL << (fugue_sqlParser::WHERE - 256))
      | (1ULL << (fugue_sqlParser::WINDOW - 256))
      | (1ULL << (fugue_sqlParser::WITH - 256))
      | (1ULL << (fugue_sqlParser::YEAR - 256))
      | (1ULL << (fugue_sqlParser::DIV - 256)))) != 0) || _la == fugue_sqlParser::IDENTIFIER

    || _la == fugue_sqlParser::BACKQUOTED_IDENTIFIER) {
      setState(2639);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::T__0) {
        setState(2638);
        match(fugue_sqlParser::T__0);
      }
      setState(2641);
      antlrcpp::downCast<HintContext *>(_localctx)->hintStatementContext = hintStatement();
      antlrcpp::downCast<HintContext *>(_localctx)->hintStatements.push_back(antlrcpp::downCast<HintContext *>(_localctx)->hintStatementContext);
      setState(2646);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2647);
    match(fugue_sqlParser::T__14);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- HintStatementContext ------------------------------------------------------------------

fugue_sqlParser::HintStatementContext::HintStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

fugue_sqlParser::IdentifierContext* fugue_sqlParser::HintStatementContext::identifier() {
  return getRuleContext<fugue_sqlParser::IdentifierContext>(0);
}

std::vector<fugue_sqlParser::PrimaryExpressionContext *> fugue_sqlParser::HintStatementContext::primaryExpression() {
  return getRuleContexts<fugue_sqlParser::PrimaryExpressionContext>();
}

fugue_sqlParser::PrimaryExpressionContext* fugue_sqlParser::HintStatementContext::primaryExpression(size_t i) {
  return getRuleContext<fugue_sqlParser::PrimaryExpressionContext>(i);
}


size_t fugue_sqlParser::HintStatementContext::getRuleIndex() const {
  return fugue_sqlParser::RuleHintStatement;
}


antlrcpp::Any fugue_sqlParser::HintStatementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitHintStatement(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::HintStatementContext* fugue_sqlParser::hintStatement() {
  HintStatementContext *_localctx = _tracker.createInstance<HintStatementContext>(_ctx, getState());
  enterRule(_localctx, 268, fugue_sqlParser::RuleHintStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2662);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 346, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2649);
      antlrcpp::downCast<HintStatementContext *>(_localctx)->hintName = identifier();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2650);
      antlrcpp::downCast<HintStatementContext *>(_localctx)->hintName = identifier();
      setState(2651);
      match(fugue_sqlParser::T__2);
      setState(2652);
      antlrcpp::downCast<HintStatementContext *>(_localctx)->primaryExpressionContext = primaryExpression(0);
      antlrcpp::downCast<HintStatementContext *>(_localctx)->parameters.push_back(antlrcpp::downCast<HintStatementContext *>(_localctx)->primaryExpressionContext);
      setState(2657);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == fugue_sqlParser::T__0) {
        setState(2653);
        match(fugue_sqlParser::T__0);
        setState(2654);
        antlrcpp::downCast<HintStatementContext *>(_localctx)->primaryExpressionContext = primaryExpression(0);
        antlrcpp::downCast<HintStatementContext *>(_localctx)->parameters.push_back(antlrcpp::downCast<HintStatementContext *>(_localctx)->primaryExpressionContext);
        setState(2659);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(2660);
      match(fugue_sqlParser::T__3);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FromClauseContext ------------------------------------------------------------------

fugue_sqlParser::FromClauseContext::FromClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* fugue_sqlParser::FromClauseContext::FROM() {
  return getToken(fugue_sqlParser::FROM, 0);
}

std::vector<fugue_sqlParser::RelationContext *> fugue_sqlParser::FromClauseContext::relation() {
  return getRuleContexts<fugue_sqlParser::RelationContext>();
}

fugue_sqlParser::RelationContext* fugue_sqlParser::FromClauseContext::relation(size_t i) {
  return getRuleContext<fugue_sqlParser::RelationContext>(i);
}

std::vector<fugue_sqlParser::LateralViewContext *> fugue_sqlParser::FromClauseContext::lateralView() {
  return getRuleContexts<fugue_sqlParser::LateralViewContext>();
}

fugue_sqlParser::LateralViewContext* fugue_sqlParser::FromClauseContext::lateralView(size_t i) {
  return getRuleContext<fugue_sqlParser::LateralViewContext>(i);
}

fugue_sqlParser::PivotClauseContext* fugue_sqlParser::FromClauseContext::pivotClause() {
  return getRuleContext<fugue_sqlParser::PivotClauseContext>(0);
}


size_t fugue_sqlParser::FromClauseContext::getRuleIndex() const {
  return fugue_sqlParser::RuleFromClause;
}


antlrcpp::Any fugue_sqlParser::FromClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitFromClause(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::FromClauseContext* fugue_sqlParser::fromClause() {
  FromClauseContext *_localctx = _tracker.createInstance<FromClauseContext>(_ctx, getState());
  enterRule(_localctx, 270, fugue_sqlParser::RuleFromClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2664);
    match(fugue_sqlParser::FROM);
    setState(2665);
    relation();
    setState(2670);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 347, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2666);
        match(fugue_sqlParser::T__0);
        setState(2667);
        relation(); 
      }
      setState(2672);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 347, _ctx);
    }
    setState(2676);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 348, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2673);
        lateralView(); 
      }
      setState(2678);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 348, _ctx);
    }
    setState(2680);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 349, _ctx)) {
    case 1: {
      setState(2679);
      pivotClause();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AggregationClauseContext ------------------------------------------------------------------

fugue_sqlParser::AggregationClauseContext::AggregationClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* fugue_sqlParser::AggregationClauseContext::GROUP() {
  return getToken(fugue_sqlParser::GROUP, 0);
}

tree::TerminalNode* fugue_sqlParser::AggregationClauseContext::BY() {
  return getToken(fugue_sqlParser::BY, 0);
}

std::vector<fugue_sqlParser::ExpressionContext *> fugue_sqlParser::AggregationClauseContext::expression() {
  return getRuleContexts<fugue_sqlParser::ExpressionContext>();
}

fugue_sqlParser::ExpressionContext* fugue_sqlParser::AggregationClauseContext::expression(size_t i) {
  return getRuleContext<fugue_sqlParser::ExpressionContext>(i);
}

tree::TerminalNode* fugue_sqlParser::AggregationClauseContext::WITH() {
  return getToken(fugue_sqlParser::WITH, 0);
}

tree::TerminalNode* fugue_sqlParser::AggregationClauseContext::SETS() {
  return getToken(fugue_sqlParser::SETS, 0);
}

std::vector<fugue_sqlParser::GroupingSetContext *> fugue_sqlParser::AggregationClauseContext::groupingSet() {
  return getRuleContexts<fugue_sqlParser::GroupingSetContext>();
}

fugue_sqlParser::GroupingSetContext* fugue_sqlParser::AggregationClauseContext::groupingSet(size_t i) {
  return getRuleContext<fugue_sqlParser::GroupingSetContext>(i);
}

tree::TerminalNode* fugue_sqlParser::AggregationClauseContext::ROLLUP() {
  return getToken(fugue_sqlParser::ROLLUP, 0);
}

tree::TerminalNode* fugue_sqlParser::AggregationClauseContext::CUBE() {
  return getToken(fugue_sqlParser::CUBE, 0);
}

tree::TerminalNode* fugue_sqlParser::AggregationClauseContext::GROUPING() {
  return getToken(fugue_sqlParser::GROUPING, 0);
}


size_t fugue_sqlParser::AggregationClauseContext::getRuleIndex() const {
  return fugue_sqlParser::RuleAggregationClause;
}


antlrcpp::Any fugue_sqlParser::AggregationClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitAggregationClause(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::AggregationClauseContext* fugue_sqlParser::aggregationClause() {
  AggregationClauseContext *_localctx = _tracker.createInstance<AggregationClauseContext>(_ctx, getState());
  enterRule(_localctx, 272, fugue_sqlParser::RuleAggregationClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(2726);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 354, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2682);
      match(fugue_sqlParser::GROUP);
      setState(2683);
      match(fugue_sqlParser::BY);
      setState(2684);
      antlrcpp::downCast<AggregationClauseContext *>(_localctx)->expressionContext = expression();
      antlrcpp::downCast<AggregationClauseContext *>(_localctx)->groupingExpressions.push_back(antlrcpp::downCast<AggregationClauseContext *>(_localctx)->expressionContext);
      setState(2689);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 350, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(2685);
          match(fugue_sqlParser::T__0);
          setState(2686);
          antlrcpp::downCast<AggregationClauseContext *>(_localctx)->expressionContext = expression();
          antlrcpp::downCast<AggregationClauseContext *>(_localctx)->groupingExpressions.push_back(antlrcpp::downCast<AggregationClauseContext *>(_localctx)->expressionContext); 
        }
        setState(2691);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 350, _ctx);
      }
      setState(2709);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 352, _ctx)) {
      case 1: {
        setState(2692);
        match(fugue_sqlParser::WITH);
        setState(2693);
        antlrcpp::downCast<AggregationClauseContext *>(_localctx)->kind = match(fugue_sqlParser::ROLLUP);
        break;
      }

      case 2: {
        setState(2694);
        match(fugue_sqlParser::WITH);
        setState(2695);
        antlrcpp::downCast<AggregationClauseContext *>(_localctx)->kind = match(fugue_sqlParser::CUBE);
        break;
      }

      case 3: {
        setState(2696);
        antlrcpp::downCast<AggregationClauseContext *>(_localctx)->kind = match(fugue_sqlParser::GROUPING);
        setState(2697);
        match(fugue_sqlParser::SETS);
        setState(2698);
        match(fugue_sqlParser::T__2);
        setState(2699);
        groupingSet();
        setState(2704);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == fugue_sqlParser::T__0) {
          setState(2700);
          match(fugue_sqlParser::T__0);
          setState(2701);
          groupingSet();
          setState(2706);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(2707);
        match(fugue_sqlParser::T__3);
        break;
      }

      default:
        break;
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2711);
      match(fugue_sqlParser::GROUP);
      setState(2712);
      match(fugue_sqlParser::BY);
      setState(2713);
      antlrcpp::downCast<AggregationClauseContext *>(_localctx)->kind = match(fugue_sqlParser::GROUPING);
      setState(2714);
      match(fugue_sqlParser::SETS);
      setState(2715);
      match(fugue_sqlParser::T__2);
      setState(2716);
      groupingSet();
      setState(2721);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == fugue_sqlParser::T__0) {
        setState(2717);
        match(fugue_sqlParser::T__0);
        setState(2718);
        groupingSet();
        setState(2723);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(2724);
      match(fugue_sqlParser::T__3);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GroupingSetContext ------------------------------------------------------------------

fugue_sqlParser::GroupingSetContext::GroupingSetContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<fugue_sqlParser::ExpressionContext *> fugue_sqlParser::GroupingSetContext::expression() {
  return getRuleContexts<fugue_sqlParser::ExpressionContext>();
}

fugue_sqlParser::ExpressionContext* fugue_sqlParser::GroupingSetContext::expression(size_t i) {
  return getRuleContext<fugue_sqlParser::ExpressionContext>(i);
}


size_t fugue_sqlParser::GroupingSetContext::getRuleIndex() const {
  return fugue_sqlParser::RuleGroupingSet;
}


antlrcpp::Any fugue_sqlParser::GroupingSetContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitGroupingSet(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::GroupingSetContext* fugue_sqlParser::groupingSet() {
  GroupingSetContext *_localctx = _tracker.createInstance<GroupingSetContext>(_ctx, getState());
  enterRule(_localctx, 274, fugue_sqlParser::RuleGroupingSet);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2741);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 357, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2728);
      match(fugue_sqlParser::T__2);
      setState(2737);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & ((1ULL << fugue_sqlParser::T__2)
        | (1ULL << fugue_sqlParser::ADD)
        | (1ULL << fugue_sqlParser::AFTER)
        | (1ULL << fugue_sqlParser::ALL)
        | (1ULL << fugue_sqlParser::ALTER)
        | (1ULL << fugue_sqlParser::ANALYZE)
        | (1ULL << fugue_sqlParser::AND)
        | (1ULL << fugue_sqlParser::ANTI)
        | (1ULL << fugue_sqlParser::ANY)
        | (1ULL << fugue_sqlParser::ARCHIVE)
        | (1ULL << fugue_sqlParser::ARRAY)
        | (1ULL << fugue_sqlParser::AS))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & ((1ULL << (fugue_sqlParser::ASC - 64))
        | (1ULL << (fugue_sqlParser::AT - 64))
        | (1ULL << (fugue_sqlParser::AUTHORIZATION - 64))
        | (1ULL << (fugue_sqlParser::BETWEEN - 64))
        | (1ULL << (fugue_sqlParser::BOTH - 64))
        | (1ULL << (fugue_sqlParser::BUCKET - 64))
        | (1ULL << (fugue_sqlParser::BUCKETS - 64))
        | (1ULL << (fugue_sqlParser::BY - 64))
        | (1ULL << (fugue_sqlParser::CACHE - 64))
        | (1ULL << (fugue_sqlParser::CASCADE - 64))
        | (1ULL << (fugue_sqlParser::CASE - 64))
        | (1ULL << (fugue_sqlParser::CAST - 64))
        | (1ULL << (fugue_sqlParser::CHANGE - 64))
        | (1ULL << (fugue_sqlParser::CHECK - 64))
        | (1ULL << (fugue_sqlParser::CLEAR - 64))
        | (1ULL << (fugue_sqlParser::CLUSTER - 64))
        | (1ULL << (fugue_sqlParser::CLUSTERED - 64))
        | (1ULL << (fugue_sqlParser::CODEGEN - 64))
        | (1ULL << (fugue_sqlParser::COLLATE - 64))
        | (1ULL << (fugue_sqlParser::COLLECTION - 64))
        | (1ULL << (fugue_sqlParser::COLUMN - 64))
        | (1ULL << (fugue_sqlParser::COLUMNS - 64))
        | (1ULL << (fugue_sqlParser::COMMENT - 64))
        | (1ULL << (fugue_sqlParser::COMMIT - 64))
        | (1ULL << (fugue_sqlParser::COMPACT - 64))
        | (1ULL << (fugue_sqlParser::COMPACTIONS - 64))
        | (1ULL << (fugue_sqlParser::COMPUTE - 64))
        | (1ULL << (fugue_sqlParser::CONCATENATE - 64))
        | (1ULL << (fugue_sqlParser::CONSTRAINT - 64))
        | (1ULL << (fugue_sqlParser::COST - 64))
        | (1ULL << (fugue_sqlParser::CREATE - 64))
        | (1ULL << (fugue_sqlParser::CROSS - 64))
        | (1ULL << (fugue_sqlParser::CUBE - 64))
        | (1ULL << (fugue_sqlParser::CURRENT - 64))
        | (1ULL << (fugue_sqlParser::CURRENT_DATE - 64))
        | (1ULL << (fugue_sqlParser::CURRENT_TIME - 64))
        | (1ULL << (fugue_sqlParser::CURRENT_TIMESTAMP - 64))
        | (1ULL << (fugue_sqlParser::CURRENT_USER - 64))
        | (1ULL << (fugue_sqlParser::DATA - 64))
        | (1ULL << (fugue_sqlParser::DATABASE - 64))
        | (1ULL << (fugue_sqlParser::DATABASES - 64))
        | (1ULL << (fugue_sqlParser::DAY - 64))
        | (1ULL << (fugue_sqlParser::DBPROPERTIES - 64))
        | (1ULL << (fugue_sqlParser::DEFINED - 64))
        | (1ULL << (fugue_sqlParser::DELETE - 64))
        | (1ULL << (fugue_sqlParser::DELIMITED - 64))
        | (1ULL << (fugue_sqlParser::DESC - 64))
        | (1ULL << (fugue_sqlParser::DESCRIBE - 64))
        | (1ULL << (fugue_sqlParser::DFS - 64))
        | (1ULL << (fugue_sqlParser::DIRECTORIES - 64))
        | (1ULL << (fugue_sqlParser::DIRECTORY - 64))
        | (1ULL << (fugue_sqlParser::DISTINCT - 64))
        | (1ULL << (fugue_sqlParser::DISTRIBUTE - 64))
        | (1ULL << (fugue_sqlParser::DROP - 64))
        | (1ULL << (fugue_sqlParser::ELSE - 64))
        | (1ULL << (fugue_sqlParser::END - 64))
        | (1ULL << (fugue_sqlParser::ESCAPE - 64))
        | (1ULL << (fugue_sqlParser::ESCAPED - 64))
        | (1ULL << (fugue_sqlParser::EXCEPT - 64))
        | (1ULL << (fugue_sqlParser::EXCHANGE - 64))
        | (1ULL << (fugue_sqlParser::EXISTS - 64))
        | (1ULL << (fugue_sqlParser::EXPLAIN - 64))
        | (1ULL << (fugue_sqlParser::EXPORT - 64))
        | (1ULL << (fugue_sqlParser::EXTENDED - 64)))) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 128)) & ((1ULL << (fugue_sqlParser::EXTERNAL - 128))
        | (1ULL << (fugue_sqlParser::EXTRACT - 128))
        | (1ULL << (fugue_sqlParser::FALSE - 128))
        | (1ULL << (fugue_sqlParser::FETCH - 128))
        | (1ULL << (fugue_sqlParser::FIELDS - 128))
        | (1ULL << (fugue_sqlParser::FILTER - 128))
        | (1ULL << (fugue_sqlParser::FILEFORMAT - 128))
        | (1ULL << (fugue_sqlParser::FIRST - 128))
        | (1ULL << (fugue_sqlParser::FOLLOWING - 128))
        | (1ULL << (fugue_sqlParser::FOR - 128))
        | (1ULL << (fugue_sqlParser::FOREIGN - 128))
        | (1ULL << (fugue_sqlParser::FORMAT - 128))
        | (1ULL << (fugue_sqlParser::FORMATTED - 128))
        | (1ULL << (fugue_sqlParser::FROM - 128))
        | (1ULL << (fugue_sqlParser::FULL - 128))
        | (1ULL << (fugue_sqlParser::FUNCTION - 128))
        | (1ULL << (fugue_sqlParser::FUNCTIONS - 128))
        | (1ULL << (fugue_sqlParser::GLOBAL - 128))
        | (1ULL << (fugue_sqlParser::GRANT - 128))
        | (1ULL << (fugue_sqlParser::GROUP - 128))
        | (1ULL << (fugue_sqlParser::GROUPING - 128))
        | (1ULL << (fugue_sqlParser::HAVING - 128))
        | (1ULL << (fugue_sqlParser::HOUR - 128))
        | (1ULL << (fugue_sqlParser::IF - 128))
        | (1ULL << (fugue_sqlParser::IGNORE - 128))
        | (1ULL << (fugue_sqlParser::IMPORT - 128))
        | (1ULL << (fugue_sqlParser::IN - 128))
        | (1ULL << (fugue_sqlParser::INDEX - 128))
        | (1ULL << (fugue_sqlParser::INDEXES - 128))
        | (1ULL << (fugue_sqlParser::INNER - 128))
        | (1ULL << (fugue_sqlParser::INPATH - 128))
        | (1ULL << (fugue_sqlParser::INPUTFORMAT - 128))
        | (1ULL << (fugue_sqlParser::INSERT - 128))
        | (1ULL << (fugue_sqlParser::INTERSECT - 128))
        | (1ULL << (fugue_sqlParser::INTERVAL - 128))
        | (1ULL << (fugue_sqlParser::INTO - 128))
        | (1ULL << (fugue_sqlParser::IS - 128))
        | (1ULL << (fugue_sqlParser::ITEMS - 128))
        | (1ULL << (fugue_sqlParser::JOIN - 128))
        | (1ULL << (fugue_sqlParser::KEYS - 128))
        | (1ULL << (fugue_sqlParser::LAST - 128))
        | (1ULL << (fugue_sqlParser::LATERAL - 128))
        | (1ULL << (fugue_sqlParser::LAZY - 128))
        | (1ULL << (fugue_sqlParser::LEADING - 128))
        | (1ULL << (fugue_sqlParser::LEFT - 128))
        | (1ULL << (fugue_sqlParser::LIKE - 128))
        | (1ULL << (fugue_sqlParser::LIMIT - 128))
        | (1ULL << (fugue_sqlParser::LINES - 128))
        | (1ULL << (fugue_sqlParser::LIST - 128))
        | (1ULL << (fugue_sqlParser::LOAD - 128))
        | (1ULL << (fugue_sqlParser::LOCAL - 128))
        | (1ULL << (fugue_sqlParser::LOCATION - 128))
        | (1ULL << (fugue_sqlParser::LOCK - 128))
        | (1ULL << (fugue_sqlParser::LOCKS - 128))
        | (1ULL << (fugue_sqlParser::LOGICAL - 128))
        | (1ULL << (fugue_sqlParser::MACRO - 128))
        | (1ULL << (fugue_sqlParser::MAP - 128))
        | (1ULL << (fugue_sqlParser::MATCHED - 128))
        | (1ULL << (fugue_sqlParser::MERGE - 128))
        | (1ULL << (fugue_sqlParser::MINUTE - 128))
        | (1ULL << (fugue_sqlParser::MONTH - 128))
        | (1ULL << (fugue_sqlParser::MSCK - 128))
        | (1ULL << (fugue_sqlParser::NAMESPACE - 128))
        | (1ULL << (fugue_sqlParser::NAMESPACES - 128)))) != 0) || ((((_la - 192) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 192)) & ((1ULL << (fugue_sqlParser::NATURAL - 192))
        | (1ULL << (fugue_sqlParser::NO - 192))
        | (1ULL << (fugue_sqlParser::NOT - 192))
        | (1ULL << (fugue_sqlParser::THENULL - 192))
        | (1ULL << (fugue_sqlParser::THENULLS - 192))
        | (1ULL << (fugue_sqlParser::OF - 192))
        | (1ULL << (fugue_sqlParser::ON - 192))
        | (1ULL << (fugue_sqlParser::ONLY - 192))
        | (1ULL << (fugue_sqlParser::OPTION - 192))
        | (1ULL << (fugue_sqlParser::OPTIONS - 192))
        | (1ULL << (fugue_sqlParser::OR - 192))
        | (1ULL << (fugue_sqlParser::ORDER - 192))
        | (1ULL << (fugue_sqlParser::OUT - 192))
        | (1ULL << (fugue_sqlParser::OUTER - 192))
        | (1ULL << (fugue_sqlParser::OUTPUTFORMAT - 192))
        | (1ULL << (fugue_sqlParser::OVER - 192))
        | (1ULL << (fugue_sqlParser::OVERLAPS - 192))
        | (1ULL << (fugue_sqlParser::OVERLAY - 192))
        | (1ULL << (fugue_sqlParser::OVERWRITE - 192))
        | (1ULL << (fugue_sqlParser::PARTITION - 192))
        | (1ULL << (fugue_sqlParser::PARTITIONED - 192))
        | (1ULL << (fugue_sqlParser::PARTITIONS - 192))
        | (1ULL << (fugue_sqlParser::PERCENTLIT - 192))
        | (1ULL << (fugue_sqlParser::PIVOT - 192))
        | (1ULL << (fugue_sqlParser::PLACING - 192))
        | (1ULL << (fugue_sqlParser::POSITION - 192))
        | (1ULL << (fugue_sqlParser::PRECEDING - 192))
        | (1ULL << (fugue_sqlParser::PRIMARY - 192))
        | (1ULL << (fugue_sqlParser::PRINCIPALS - 192))
        | (1ULL << (fugue_sqlParser::PROPERTIES - 192))
        | (1ULL << (fugue_sqlParser::PURGE - 192))
        | (1ULL << (fugue_sqlParser::QUERY - 192))
        | (1ULL << (fugue_sqlParser::RANGE - 192))
        | (1ULL << (fugue_sqlParser::RECORDREADER - 192))
        | (1ULL << (fugue_sqlParser::RECORDWRITER - 192))
        | (1ULL << (fugue_sqlParser::RECOVER - 192))
        | (1ULL << (fugue_sqlParser::REDUCE - 192))
        | (1ULL << (fugue_sqlParser::REFERENCES - 192))
        | (1ULL << (fugue_sqlParser::REFRESH - 192))
        | (1ULL << (fugue_sqlParser::RENAME - 192))
        | (1ULL << (fugue_sqlParser::REPAIR - 192))
        | (1ULL << (fugue_sqlParser::REPLACE - 192))
        | (1ULL << (fugue_sqlParser::RESET - 192))
        | (1ULL << (fugue_sqlParser::RESTRICT - 192))
        | (1ULL << (fugue_sqlParser::REVOKE - 192))
        | (1ULL << (fugue_sqlParser::RIGHT - 192))
        | (1ULL << (fugue_sqlParser::RLIKE - 192))
        | (1ULL << (fugue_sqlParser::ROLE - 192))
        | (1ULL << (fugue_sqlParser::ROLES - 192))
        | (1ULL << (fugue_sqlParser::ROLLBACK - 192))
        | (1ULL << (fugue_sqlParser::ROLLUP - 192))
        | (1ULL << (fugue_sqlParser::ROW - 192))
        | (1ULL << (fugue_sqlParser::ROWS - 192))
        | (1ULL << (fugue_sqlParser::SCHEMA - 192))
        | (1ULL << (fugue_sqlParser::SECOND - 192))
        | (1ULL << (fugue_sqlParser::SELECT - 192))
        | (1ULL << (fugue_sqlParser::SEMI - 192))
        | (1ULL << (fugue_sqlParser::SEPARATED - 192))
        | (1ULL << (fugue_sqlParser::SERDE - 192))
        | (1ULL << (fugue_sqlParser::SERDEPROPERTIES - 192))
        | (1ULL << (fugue_sqlParser::SESSION_USER - 192))
        | (1ULL << (fugue_sqlParser::SET - 192))
        | (1ULL << (fugue_sqlParser::SETMINUS - 192))
        | (1ULL << (fugue_sqlParser::SETS - 192)))) != 0) || ((((_la - 256) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 256)) & ((1ULL << (fugue_sqlParser::SHOW - 256))
        | (1ULL << (fugue_sqlParser::SKEWED - 256))
        | (1ULL << (fugue_sqlParser::SOME - 256))
        | (1ULL << (fugue_sqlParser::SORT - 256))
        | (1ULL << (fugue_sqlParser::SORTED - 256))
        | (1ULL << (fugue_sqlParser::START - 256))
        | (1ULL << (fugue_sqlParser::STATISTICS - 256))
        | (1ULL << (fugue_sqlParser::STORED - 256))
        | (1ULL << (fugue_sqlParser::STRATIFY - 256))
        | (1ULL << (fugue_sqlParser::STRUCT - 256))
        | (1ULL << (fugue_sqlParser::SUBSTR - 256))
        | (1ULL << (fugue_sqlParser::SUBSTRING - 256))
        | (1ULL << (fugue_sqlParser::TABLE - 256))
        | (1ULL << (fugue_sqlParser::TABLES - 256))
        | (1ULL << (fugue_sqlParser::TABLESAMPLE - 256))
        | (1ULL << (fugue_sqlParser::TBLPROPERTIES - 256))
        | (1ULL << (fugue_sqlParser::TEMPORARY - 256))
        | (1ULL << (fugue_sqlParser::TERMINATED - 256))
        | (1ULL << (fugue_sqlParser::THEN - 256))
        | (1ULL << (fugue_sqlParser::TO - 256))
        | (1ULL << (fugue_sqlParser::TOUCH - 256))
        | (1ULL << (fugue_sqlParser::TRAILING - 256))
        | (1ULL << (fugue_sqlParser::TRANSACTION - 256))
        | (1ULL << (fugue_sqlParser::TRANSACTIONS - 256))
        | (1ULL << (fugue_sqlParser::TRANSFORM - 256))
        | (1ULL << (fugue_sqlParser::TRIM - 256))
        | (1ULL << (fugue_sqlParser::TRUE - 256))
        | (1ULL << (fugue_sqlParser::TRUNCATE - 256))
        | (1ULL << (fugue_sqlParser::TYPE - 256))
        | (1ULL << (fugue_sqlParser::UNARCHIVE - 256))
        | (1ULL << (fugue_sqlParser::UNBOUNDED - 256))
        | (1ULL << (fugue_sqlParser::UNCACHE - 256))
        | (1ULL << (fugue_sqlParser::UNION - 256))
        | (1ULL << (fugue_sqlParser::UNIQUE - 256))
        | (1ULL << (fugue_sqlParser::UNKNOWN - 256))
        | (1ULL << (fugue_sqlParser::UNLOCK - 256))
        | (1ULL << (fugue_sqlParser::UNSET - 256))
        | (1ULL << (fugue_sqlParser::UPDATE - 256))
        | (1ULL << (fugue_sqlParser::USE - 256))
        | (1ULL << (fugue_sqlParser::USER - 256))
        | (1ULL << (fugue_sqlParser::USING - 256))
        | (1ULL << (fugue_sqlParser::VALUES - 256))
        | (1ULL << (fugue_sqlParser::VIEW - 256))
        | (1ULL << (fugue_sqlParser::VIEWS - 256))
        | (1ULL << (fugue_sqlParser::WHEN - 256))
        | (1ULL << (fugue_sqlParser::WHERE - 256))
        | (1ULL << (fugue_sqlParser::WINDOW - 256))
        | (1ULL << (fugue_sqlParser::WITH - 256))
        | (1ULL << (fugue_sqlParser::YEAR - 256))
        | (1ULL << (fugue_sqlParser::PLUS - 256))
        | (1ULL << (fugue_sqlParser::MINUS - 256))
        | (1ULL << (fugue_sqlParser::ASTERISK - 256))
        | (1ULL << (fugue_sqlParser::DIV - 256)))) != 0) || ((((_la - 320) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 320)) & ((1ULL << (fugue_sqlParser::TILDE - 320))
        | (1ULL << (fugue_sqlParser::STRING - 320))
        | (1ULL << (fugue_sqlParser::BIGINT_LITERAL - 320))
        | (1ULL << (fugue_sqlParser::SMALLINT_LITERAL - 320))
        | (1ULL << (fugue_sqlParser::TINYINT_LITERAL - 320))
        | (1ULL << (fugue_sqlParser::INTEGER_VALUE - 320))
        | (1ULL << (fugue_sqlParser::EXPONENT_VALUE - 320))
        | (1ULL << (fugue_sqlParser::DECIMAL_VALUE - 320))
        | (1ULL << (fugue_sqlParser::DOUBLE_LITERAL - 320))
        | (1ULL << (fugue_sqlParser::BIGDECIMAL_LITERAL - 320))
        | (1ULL << (fugue_sqlParser::IDENTIFIER - 320))
        | (1ULL << (fugue_sqlParser::BACKQUOTED_IDENTIFIER - 320)))) != 0)) {
        setState(2729);
        expression();
        setState(2734);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == fugue_sqlParser::T__0) {
          setState(2730);
          match(fugue_sqlParser::T__0);
          setState(2731);
          expression();
          setState(2736);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
      }
      setState(2739);
      match(fugue_sqlParser::T__3);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2740);
      expression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PivotClauseContext ------------------------------------------------------------------

fugue_sqlParser::PivotClauseContext::PivotClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* fugue_sqlParser::PivotClauseContext::PIVOT() {
  return getToken(fugue_sqlParser::PIVOT, 0);
}

tree::TerminalNode* fugue_sqlParser::PivotClauseContext::FOR() {
  return getToken(fugue_sqlParser::FOR, 0);
}

fugue_sqlParser::PivotColumnContext* fugue_sqlParser::PivotClauseContext::pivotColumn() {
  return getRuleContext<fugue_sqlParser::PivotColumnContext>(0);
}

tree::TerminalNode* fugue_sqlParser::PivotClauseContext::IN() {
  return getToken(fugue_sqlParser::IN, 0);
}

fugue_sqlParser::NamedExpressionSeqContext* fugue_sqlParser::PivotClauseContext::namedExpressionSeq() {
  return getRuleContext<fugue_sqlParser::NamedExpressionSeqContext>(0);
}

std::vector<fugue_sqlParser::PivotValueContext *> fugue_sqlParser::PivotClauseContext::pivotValue() {
  return getRuleContexts<fugue_sqlParser::PivotValueContext>();
}

fugue_sqlParser::PivotValueContext* fugue_sqlParser::PivotClauseContext::pivotValue(size_t i) {
  return getRuleContext<fugue_sqlParser::PivotValueContext>(i);
}


size_t fugue_sqlParser::PivotClauseContext::getRuleIndex() const {
  return fugue_sqlParser::RulePivotClause;
}


antlrcpp::Any fugue_sqlParser::PivotClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitPivotClause(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::PivotClauseContext* fugue_sqlParser::pivotClause() {
  PivotClauseContext *_localctx = _tracker.createInstance<PivotClauseContext>(_ctx, getState());
  enterRule(_localctx, 276, fugue_sqlParser::RulePivotClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2743);
    match(fugue_sqlParser::PIVOT);
    setState(2744);
    match(fugue_sqlParser::T__2);
    setState(2745);
    antlrcpp::downCast<PivotClauseContext *>(_localctx)->aggregates = namedExpressionSeq();
    setState(2746);
    match(fugue_sqlParser::FOR);
    setState(2747);
    pivotColumn();
    setState(2748);
    match(fugue_sqlParser::IN);
    setState(2749);
    match(fugue_sqlParser::T__2);
    setState(2750);
    antlrcpp::downCast<PivotClauseContext *>(_localctx)->pivotValueContext = pivotValue();
    antlrcpp::downCast<PivotClauseContext *>(_localctx)->pivotValues.push_back(antlrcpp::downCast<PivotClauseContext *>(_localctx)->pivotValueContext);
    setState(2755);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == fugue_sqlParser::T__0) {
      setState(2751);
      match(fugue_sqlParser::T__0);
      setState(2752);
      antlrcpp::downCast<PivotClauseContext *>(_localctx)->pivotValueContext = pivotValue();
      antlrcpp::downCast<PivotClauseContext *>(_localctx)->pivotValues.push_back(antlrcpp::downCast<PivotClauseContext *>(_localctx)->pivotValueContext);
      setState(2757);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2758);
    match(fugue_sqlParser::T__3);
    setState(2759);
    match(fugue_sqlParser::T__3);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PivotColumnContext ------------------------------------------------------------------

fugue_sqlParser::PivotColumnContext::PivotColumnContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<fugue_sqlParser::IdentifierContext *> fugue_sqlParser::PivotColumnContext::identifier() {
  return getRuleContexts<fugue_sqlParser::IdentifierContext>();
}

fugue_sqlParser::IdentifierContext* fugue_sqlParser::PivotColumnContext::identifier(size_t i) {
  return getRuleContext<fugue_sqlParser::IdentifierContext>(i);
}


size_t fugue_sqlParser::PivotColumnContext::getRuleIndex() const {
  return fugue_sqlParser::RulePivotColumn;
}


antlrcpp::Any fugue_sqlParser::PivotColumnContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitPivotColumn(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::PivotColumnContext* fugue_sqlParser::pivotColumn() {
  PivotColumnContext *_localctx = _tracker.createInstance<PivotColumnContext>(_ctx, getState());
  enterRule(_localctx, 278, fugue_sqlParser::RulePivotColumn);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2773);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case fugue_sqlParser::ADD:
      case fugue_sqlParser::AFTER:
      case fugue_sqlParser::ALL:
      case fugue_sqlParser::ALTER:
      case fugue_sqlParser::ANALYZE:
      case fugue_sqlParser::AND:
      case fugue_sqlParser::ANTI:
      case fugue_sqlParser::ANY:
      case fugue_sqlParser::ARCHIVE:
      case fugue_sqlParser::ARRAY:
      case fugue_sqlParser::AS:
      case fugue_sqlParser::ASC:
      case fugue_sqlParser::AT:
      case fugue_sqlParser::AUTHORIZATION:
      case fugue_sqlParser::BETWEEN:
      case fugue_sqlParser::BOTH:
      case fugue_sqlParser::BUCKET:
      case fugue_sqlParser::BUCKETS:
      case fugue_sqlParser::BY:
      case fugue_sqlParser::CACHE:
      case fugue_sqlParser::CASCADE:
      case fugue_sqlParser::CASE:
      case fugue_sqlParser::CAST:
      case fugue_sqlParser::CHANGE:
      case fugue_sqlParser::CHECK:
      case fugue_sqlParser::CLEAR:
      case fugue_sqlParser::CLUSTER:
      case fugue_sqlParser::CLUSTERED:
      case fugue_sqlParser::CODEGEN:
      case fugue_sqlParser::COLLATE:
      case fugue_sqlParser::COLLECTION:
      case fugue_sqlParser::COLUMN:
      case fugue_sqlParser::COLUMNS:
      case fugue_sqlParser::COMMENT:
      case fugue_sqlParser::COMMIT:
      case fugue_sqlParser::COMPACT:
      case fugue_sqlParser::COMPACTIONS:
      case fugue_sqlParser::COMPUTE:
      case fugue_sqlParser::CONCATENATE:
      case fugue_sqlParser::CONSTRAINT:
      case fugue_sqlParser::COST:
      case fugue_sqlParser::CREATE:
      case fugue_sqlParser::CROSS:
      case fugue_sqlParser::CUBE:
      case fugue_sqlParser::CURRENT:
      case fugue_sqlParser::CURRENT_DATE:
      case fugue_sqlParser::CURRENT_TIME:
      case fugue_sqlParser::CURRENT_TIMESTAMP:
      case fugue_sqlParser::CURRENT_USER:
      case fugue_sqlParser::DATA:
      case fugue_sqlParser::DATABASE:
      case fugue_sqlParser::DATABASES:
      case fugue_sqlParser::DAY:
      case fugue_sqlParser::DBPROPERTIES:
      case fugue_sqlParser::DEFINED:
      case fugue_sqlParser::DELETE:
      case fugue_sqlParser::DELIMITED:
      case fugue_sqlParser::DESC:
      case fugue_sqlParser::DESCRIBE:
      case fugue_sqlParser::DFS:
      case fugue_sqlParser::DIRECTORIES:
      case fugue_sqlParser::DIRECTORY:
      case fugue_sqlParser::DISTINCT:
      case fugue_sqlParser::DISTRIBUTE:
      case fugue_sqlParser::DROP:
      case fugue_sqlParser::ELSE:
      case fugue_sqlParser::END:
      case fugue_sqlParser::ESCAPE:
      case fugue_sqlParser::ESCAPED:
      case fugue_sqlParser::EXCEPT:
      case fugue_sqlParser::EXCHANGE:
      case fugue_sqlParser::EXISTS:
      case fugue_sqlParser::EXPLAIN:
      case fugue_sqlParser::EXPORT:
      case fugue_sqlParser::EXTENDED:
      case fugue_sqlParser::EXTERNAL:
      case fugue_sqlParser::EXTRACT:
      case fugue_sqlParser::FALSE:
      case fugue_sqlParser::FETCH:
      case fugue_sqlParser::FIELDS:
      case fugue_sqlParser::FILTER:
      case fugue_sqlParser::FILEFORMAT:
      case fugue_sqlParser::FIRST:
      case fugue_sqlParser::FOLLOWING:
      case fugue_sqlParser::FOR:
      case fugue_sqlParser::FOREIGN:
      case fugue_sqlParser::FORMAT:
      case fugue_sqlParser::FORMATTED:
      case fugue_sqlParser::FROM:
      case fugue_sqlParser::FULL:
      case fugue_sqlParser::FUNCTION:
      case fugue_sqlParser::FUNCTIONS:
      case fugue_sqlParser::GLOBAL:
      case fugue_sqlParser::GRANT:
      case fugue_sqlParser::GROUP:
      case fugue_sqlParser::GROUPING:
      case fugue_sqlParser::HAVING:
      case fugue_sqlParser::HOUR:
      case fugue_sqlParser::IF:
      case fugue_sqlParser::IGNORE:
      case fugue_sqlParser::IMPORT:
      case fugue_sqlParser::IN:
      case fugue_sqlParser::INDEX:
      case fugue_sqlParser::INDEXES:
      case fugue_sqlParser::INNER:
      case fugue_sqlParser::INPATH:
      case fugue_sqlParser::INPUTFORMAT:
      case fugue_sqlParser::INSERT:
      case fugue_sqlParser::INTERSECT:
      case fugue_sqlParser::INTERVAL:
      case fugue_sqlParser::INTO:
      case fugue_sqlParser::IS:
      case fugue_sqlParser::ITEMS:
      case fugue_sqlParser::JOIN:
      case fugue_sqlParser::KEYS:
      case fugue_sqlParser::LAST:
      case fugue_sqlParser::LATERAL:
      case fugue_sqlParser::LAZY:
      case fugue_sqlParser::LEADING:
      case fugue_sqlParser::LEFT:
      case fugue_sqlParser::LIKE:
      case fugue_sqlParser::LIMIT:
      case fugue_sqlParser::LINES:
      case fugue_sqlParser::LIST:
      case fugue_sqlParser::LOAD:
      case fugue_sqlParser::LOCAL:
      case fugue_sqlParser::LOCATION:
      case fugue_sqlParser::LOCK:
      case fugue_sqlParser::LOCKS:
      case fugue_sqlParser::LOGICAL:
      case fugue_sqlParser::MACRO:
      case fugue_sqlParser::MAP:
      case fugue_sqlParser::MATCHED:
      case fugue_sqlParser::MERGE:
      case fugue_sqlParser::MINUTE:
      case fugue_sqlParser::MONTH:
      case fugue_sqlParser::MSCK:
      case fugue_sqlParser::NAMESPACE:
      case fugue_sqlParser::NAMESPACES:
      case fugue_sqlParser::NATURAL:
      case fugue_sqlParser::NO:
      case fugue_sqlParser::NOT:
      case fugue_sqlParser::THENULL:
      case fugue_sqlParser::THENULLS:
      case fugue_sqlParser::OF:
      case fugue_sqlParser::ON:
      case fugue_sqlParser::ONLY:
      case fugue_sqlParser::OPTION:
      case fugue_sqlParser::OPTIONS:
      case fugue_sqlParser::OR:
      case fugue_sqlParser::ORDER:
      case fugue_sqlParser::OUT:
      case fugue_sqlParser::OUTER:
      case fugue_sqlParser::OUTPUTFORMAT:
      case fugue_sqlParser::OVER:
      case fugue_sqlParser::OVERLAPS:
      case fugue_sqlParser::OVERLAY:
      case fugue_sqlParser::OVERWRITE:
      case fugue_sqlParser::PARTITION:
      case fugue_sqlParser::PARTITIONED:
      case fugue_sqlParser::PARTITIONS:
      case fugue_sqlParser::PERCENTLIT:
      case fugue_sqlParser::PIVOT:
      case fugue_sqlParser::PLACING:
      case fugue_sqlParser::POSITION:
      case fugue_sqlParser::PRECEDING:
      case fugue_sqlParser::PRIMARY:
      case fugue_sqlParser::PRINCIPALS:
      case fugue_sqlParser::PROPERTIES:
      case fugue_sqlParser::PURGE:
      case fugue_sqlParser::QUERY:
      case fugue_sqlParser::RANGE:
      case fugue_sqlParser::RECORDREADER:
      case fugue_sqlParser::RECORDWRITER:
      case fugue_sqlParser::RECOVER:
      case fugue_sqlParser::REDUCE:
      case fugue_sqlParser::REFERENCES:
      case fugue_sqlParser::REFRESH:
      case fugue_sqlParser::RENAME:
      case fugue_sqlParser::REPAIR:
      case fugue_sqlParser::REPLACE:
      case fugue_sqlParser::RESET:
      case fugue_sqlParser::RESTRICT:
      case fugue_sqlParser::REVOKE:
      case fugue_sqlParser::RIGHT:
      case fugue_sqlParser::RLIKE:
      case fugue_sqlParser::ROLE:
      case fugue_sqlParser::ROLES:
      case fugue_sqlParser::ROLLBACK:
      case fugue_sqlParser::ROLLUP:
      case fugue_sqlParser::ROW:
      case fugue_sqlParser::ROWS:
      case fugue_sqlParser::SCHEMA:
      case fugue_sqlParser::SECOND:
      case fugue_sqlParser::SELECT:
      case fugue_sqlParser::SEMI:
      case fugue_sqlParser::SEPARATED:
      case fugue_sqlParser::SERDE:
      case fugue_sqlParser::SERDEPROPERTIES:
      case fugue_sqlParser::SESSION_USER:
      case fugue_sqlParser::SET:
      case fugue_sqlParser::SETMINUS:
      case fugue_sqlParser::SETS:
      case fugue_sqlParser::SHOW:
      case fugue_sqlParser::SKEWED:
      case fugue_sqlParser::SOME:
      case fugue_sqlParser::SORT:
      case fugue_sqlParser::SORTED:
      case fugue_sqlParser::START:
      case fugue_sqlParser::STATISTICS:
      case fugue_sqlParser::STORED:
      case fugue_sqlParser::STRATIFY:
      case fugue_sqlParser::STRUCT:
      case fugue_sqlParser::SUBSTR:
      case fugue_sqlParser::SUBSTRING:
      case fugue_sqlParser::TABLE:
      case fugue_sqlParser::TABLES:
      case fugue_sqlParser::TABLESAMPLE:
      case fugue_sqlParser::TBLPROPERTIES:
      case fugue_sqlParser::TEMPORARY:
      case fugue_sqlParser::TERMINATED:
      case fugue_sqlParser::THEN:
      case fugue_sqlParser::TO:
      case fugue_sqlParser::TOUCH:
      case fugue_sqlParser::TRAILING:
      case fugue_sqlParser::TRANSACTION:
      case fugue_sqlParser::TRANSACTIONS:
      case fugue_sqlParser::TRANSFORM:
      case fugue_sqlParser::TRIM:
      case fugue_sqlParser::TRUE:
      case fugue_sqlParser::TRUNCATE:
      case fugue_sqlParser::TYPE:
      case fugue_sqlParser::UNARCHIVE:
      case fugue_sqlParser::UNBOUNDED:
      case fugue_sqlParser::UNCACHE:
      case fugue_sqlParser::UNION:
      case fugue_sqlParser::UNIQUE:
      case fugue_sqlParser::UNKNOWN:
      case fugue_sqlParser::UNLOCK:
      case fugue_sqlParser::UNSET:
      case fugue_sqlParser::UPDATE:
      case fugue_sqlParser::USE:
      case fugue_sqlParser::USER:
      case fugue_sqlParser::USING:
      case fugue_sqlParser::VALUES:
      case fugue_sqlParser::VIEW:
      case fugue_sqlParser::VIEWS:
      case fugue_sqlParser::WHEN:
      case fugue_sqlParser::WHERE:
      case fugue_sqlParser::WINDOW:
      case fugue_sqlParser::WITH:
      case fugue_sqlParser::YEAR:
      case fugue_sqlParser::DIV:
      case fugue_sqlParser::IDENTIFIER:
      case fugue_sqlParser::BACKQUOTED_IDENTIFIER: {
        enterOuterAlt(_localctx, 1);
        setState(2761);
        antlrcpp::downCast<PivotColumnContext *>(_localctx)->identifierContext = identifier();
        antlrcpp::downCast<PivotColumnContext *>(_localctx)->identifiers.push_back(antlrcpp::downCast<PivotColumnContext *>(_localctx)->identifierContext);
        break;
      }

      case fugue_sqlParser::T__2: {
        enterOuterAlt(_localctx, 2);
        setState(2762);
        match(fugue_sqlParser::T__2);
        setState(2763);
        antlrcpp::downCast<PivotColumnContext *>(_localctx)->identifierContext = identifier();
        antlrcpp::downCast<PivotColumnContext *>(_localctx)->identifiers.push_back(antlrcpp::downCast<PivotColumnContext *>(_localctx)->identifierContext);
        setState(2768);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == fugue_sqlParser::T__0) {
          setState(2764);
          match(fugue_sqlParser::T__0);
          setState(2765);
          antlrcpp::downCast<PivotColumnContext *>(_localctx)->identifierContext = identifier();
          antlrcpp::downCast<PivotColumnContext *>(_localctx)->identifiers.push_back(antlrcpp::downCast<PivotColumnContext *>(_localctx)->identifierContext);
          setState(2770);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(2771);
        match(fugue_sqlParser::T__3);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PivotValueContext ------------------------------------------------------------------

fugue_sqlParser::PivotValueContext::PivotValueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

fugue_sqlParser::ExpressionContext* fugue_sqlParser::PivotValueContext::expression() {
  return getRuleContext<fugue_sqlParser::ExpressionContext>(0);
}

fugue_sqlParser::IdentifierContext* fugue_sqlParser::PivotValueContext::identifier() {
  return getRuleContext<fugue_sqlParser::IdentifierContext>(0);
}

tree::TerminalNode* fugue_sqlParser::PivotValueContext::AS() {
  return getToken(fugue_sqlParser::AS, 0);
}


size_t fugue_sqlParser::PivotValueContext::getRuleIndex() const {
  return fugue_sqlParser::RulePivotValue;
}


antlrcpp::Any fugue_sqlParser::PivotValueContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitPivotValue(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::PivotValueContext* fugue_sqlParser::pivotValue() {
  PivotValueContext *_localctx = _tracker.createInstance<PivotValueContext>(_ctx, getState());
  enterRule(_localctx, 280, fugue_sqlParser::RulePivotValue);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2775);
    expression();
    setState(2780);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 53) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 53)) & ((1ULL << (fugue_sqlParser::ADD - 53))
      | (1ULL << (fugue_sqlParser::AFTER - 53))
      | (1ULL << (fugue_sqlParser::ALL - 53))
      | (1ULL << (fugue_sqlParser::ALTER - 53))
      | (1ULL << (fugue_sqlParser::ANALYZE - 53))
      | (1ULL << (fugue_sqlParser::AND - 53))
      | (1ULL << (fugue_sqlParser::ANTI - 53))
      | (1ULL << (fugue_sqlParser::ANY - 53))
      | (1ULL << (fugue_sqlParser::ARCHIVE - 53))
      | (1ULL << (fugue_sqlParser::ARRAY - 53))
      | (1ULL << (fugue_sqlParser::AS - 53))
      | (1ULL << (fugue_sqlParser::ASC - 53))
      | (1ULL << (fugue_sqlParser::AT - 53))
      | (1ULL << (fugue_sqlParser::AUTHORIZATION - 53))
      | (1ULL << (fugue_sqlParser::BETWEEN - 53))
      | (1ULL << (fugue_sqlParser::BOTH - 53))
      | (1ULL << (fugue_sqlParser::BUCKET - 53))
      | (1ULL << (fugue_sqlParser::BUCKETS - 53))
      | (1ULL << (fugue_sqlParser::BY - 53))
      | (1ULL << (fugue_sqlParser::CACHE - 53))
      | (1ULL << (fugue_sqlParser::CASCADE - 53))
      | (1ULL << (fugue_sqlParser::CASE - 53))
      | (1ULL << (fugue_sqlParser::CAST - 53))
      | (1ULL << (fugue_sqlParser::CHANGE - 53))
      | (1ULL << (fugue_sqlParser::CHECK - 53))
      | (1ULL << (fugue_sqlParser::CLEAR - 53))
      | (1ULL << (fugue_sqlParser::CLUSTER - 53))
      | (1ULL << (fugue_sqlParser::CLUSTERED - 53))
      | (1ULL << (fugue_sqlParser::CODEGEN - 53))
      | (1ULL << (fugue_sqlParser::COLLATE - 53))
      | (1ULL << (fugue_sqlParser::COLLECTION - 53))
      | (1ULL << (fugue_sqlParser::COLUMN - 53))
      | (1ULL << (fugue_sqlParser::COLUMNS - 53))
      | (1ULL << (fugue_sqlParser::COMMENT - 53))
      | (1ULL << (fugue_sqlParser::COMMIT - 53))
      | (1ULL << (fugue_sqlParser::COMPACT - 53))
      | (1ULL << (fugue_sqlParser::COMPACTIONS - 53))
      | (1ULL << (fugue_sqlParser::COMPUTE - 53))
      | (1ULL << (fugue_sqlParser::CONCATENATE - 53))
      | (1ULL << (fugue_sqlParser::CONSTRAINT - 53))
      | (1ULL << (fugue_sqlParser::COST - 53))
      | (1ULL << (fugue_sqlParser::CREATE - 53))
      | (1ULL << (fugue_sqlParser::CROSS - 53))
      | (1ULL << (fugue_sqlParser::CUBE - 53))
      | (1ULL << (fugue_sqlParser::CURRENT - 53))
      | (1ULL << (fugue_sqlParser::CURRENT_DATE - 53))
      | (1ULL << (fugue_sqlParser::CURRENT_TIME - 53))
      | (1ULL << (fugue_sqlParser::CURRENT_TIMESTAMP - 53))
      | (1ULL << (fugue_sqlParser::CURRENT_USER - 53))
      | (1ULL << (fugue_sqlParser::DATA - 53))
      | (1ULL << (fugue_sqlParser::DATABASE - 53))
      | (1ULL << (fugue_sqlParser::DATABASES - 53))
      | (1ULL << (fugue_sqlParser::DAY - 53))
      | (1ULL << (fugue_sqlParser::DBPROPERTIES - 53))
      | (1ULL << (fugue_sqlParser::DEFINED - 53))
      | (1ULL << (fugue_sqlParser::DELETE - 53))
      | (1ULL << (fugue_sqlParser::DELIMITED - 53))
      | (1ULL << (fugue_sqlParser::DESC - 53))
      | (1ULL << (fugue_sqlParser::DESCRIBE - 53))
      | (1ULL << (fugue_sqlParser::DFS - 53))
      | (1ULL << (fugue_sqlParser::DIRECTORIES - 53))
      | (1ULL << (fugue_sqlParser::DIRECTORY - 53))
      | (1ULL << (fugue_sqlParser::DISTINCT - 53))
      | (1ULL << (fugue_sqlParser::DISTRIBUTE - 53)))) != 0) || ((((_la - 117) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 117)) & ((1ULL << (fugue_sqlParser::DROP - 117))
      | (1ULL << (fugue_sqlParser::ELSE - 117))
      | (1ULL << (fugue_sqlParser::END - 117))
      | (1ULL << (fugue_sqlParser::ESCAPE - 117))
      | (1ULL << (fugue_sqlParser::ESCAPED - 117))
      | (1ULL << (fugue_sqlParser::EXCEPT - 117))
      | (1ULL << (fugue_sqlParser::EXCHANGE - 117))
      | (1ULL << (fugue_sqlParser::EXISTS - 117))
      | (1ULL << (fugue_sqlParser::EXPLAIN - 117))
      | (1ULL << (fugue_sqlParser::EXPORT - 117))
      | (1ULL << (fugue_sqlParser::EXTENDED - 117))
      | (1ULL << (fugue_sqlParser::EXTERNAL - 117))
      | (1ULL << (fugue_sqlParser::EXTRACT - 117))
      | (1ULL << (fugue_sqlParser::FALSE - 117))
      | (1ULL << (fugue_sqlParser::FETCH - 117))
      | (1ULL << (fugue_sqlParser::FIELDS - 117))
      | (1ULL << (fugue_sqlParser::FILTER - 117))
      | (1ULL << (fugue_sqlParser::FILEFORMAT - 117))
      | (1ULL << (fugue_sqlParser::FIRST - 117))
      | (1ULL << (fugue_sqlParser::FOLLOWING - 117))
      | (1ULL << (fugue_sqlParser::FOR - 117))
      | (1ULL << (fugue_sqlParser::FOREIGN - 117))
      | (1ULL << (fugue_sqlParser::FORMAT - 117))
      | (1ULL << (fugue_sqlParser::FORMATTED - 117))
      | (1ULL << (fugue_sqlParser::FROM - 117))
      | (1ULL << (fugue_sqlParser::FULL - 117))
      | (1ULL << (fugue_sqlParser::FUNCTION - 117))
      | (1ULL << (fugue_sqlParser::FUNCTIONS - 117))
      | (1ULL << (fugue_sqlParser::GLOBAL - 117))
      | (1ULL << (fugue_sqlParser::GRANT - 117))
      | (1ULL << (fugue_sqlParser::GROUP - 117))
      | (1ULL << (fugue_sqlParser::GROUPING - 117))
      | (1ULL << (fugue_sqlParser::HAVING - 117))
      | (1ULL << (fugue_sqlParser::HOUR - 117))
      | (1ULL << (fugue_sqlParser::IF - 117))
      | (1ULL << (fugue_sqlParser::IGNORE - 117))
      | (1ULL << (fugue_sqlParser::IMPORT - 117))
      | (1ULL << (fugue_sqlParser::IN - 117))
      | (1ULL << (fugue_sqlParser::INDEX - 117))
      | (1ULL << (fugue_sqlParser::INDEXES - 117))
      | (1ULL << (fugue_sqlParser::INNER - 117))
      | (1ULL << (fugue_sqlParser::INPATH - 117))
      | (1ULL << (fugue_sqlParser::INPUTFORMAT - 117))
      | (1ULL << (fugue_sqlParser::INSERT - 117))
      | (1ULL << (fugue_sqlParser::INTERSECT - 117))
      | (1ULL << (fugue_sqlParser::INTERVAL - 117))
      | (1ULL << (fugue_sqlParser::INTO - 117))
      | (1ULL << (fugue_sqlParser::IS - 117))
      | (1ULL << (fugue_sqlParser::ITEMS - 117))
      | (1ULL << (fugue_sqlParser::JOIN - 117))
      | (1ULL << (fugue_sqlParser::KEYS - 117))
      | (1ULL << (fugue_sqlParser::LAST - 117))
      | (1ULL << (fugue_sqlParser::LATERAL - 117))
      | (1ULL << (fugue_sqlParser::LAZY - 117))
      | (1ULL << (fugue_sqlParser::LEADING - 117))
      | (1ULL << (fugue_sqlParser::LEFT - 117))
      | (1ULL << (fugue_sqlParser::LIKE - 117))
      | (1ULL << (fugue_sqlParser::LIMIT - 117))
      | (1ULL << (fugue_sqlParser::LINES - 117))
      | (1ULL << (fugue_sqlParser::LIST - 117))
      | (1ULL << (fugue_sqlParser::LOAD - 117))
      | (1ULL << (fugue_sqlParser::LOCAL - 117))
      | (1ULL << (fugue_sqlParser::LOCATION - 117))
      | (1ULL << (fugue_sqlParser::LOCK - 117)))) != 0) || ((((_la - 181) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 181)) & ((1ULL << (fugue_sqlParser::LOCKS - 181))
      | (1ULL << (fugue_sqlParser::LOGICAL - 181))
      | (1ULL << (fugue_sqlParser::MACRO - 181))
      | (1ULL << (fugue_sqlParser::MAP - 181))
      | (1ULL << (fugue_sqlParser::MATCHED - 181))
      | (1ULL << (fugue_sqlParser::MERGE - 181))
      | (1ULL << (fugue_sqlParser::MINUTE - 181))
      | (1ULL << (fugue_sqlParser::MONTH - 181))
      | (1ULL << (fugue_sqlParser::MSCK - 181))
      | (1ULL << (fugue_sqlParser::NAMESPACE - 181))
      | (1ULL << (fugue_sqlParser::NAMESPACES - 181))
      | (1ULL << (fugue_sqlParser::NATURAL - 181))
      | (1ULL << (fugue_sqlParser::NO - 181))
      | (1ULL << (fugue_sqlParser::NOT - 181))
      | (1ULL << (fugue_sqlParser::THENULL - 181))
      | (1ULL << (fugue_sqlParser::THENULLS - 181))
      | (1ULL << (fugue_sqlParser::OF - 181))
      | (1ULL << (fugue_sqlParser::ON - 181))
      | (1ULL << (fugue_sqlParser::ONLY - 181))
      | (1ULL << (fugue_sqlParser::OPTION - 181))
      | (1ULL << (fugue_sqlParser::OPTIONS - 181))
      | (1ULL << (fugue_sqlParser::OR - 181))
      | (1ULL << (fugue_sqlParser::ORDER - 181))
      | (1ULL << (fugue_sqlParser::OUT - 181))
      | (1ULL << (fugue_sqlParser::OUTER - 181))
      | (1ULL << (fugue_sqlParser::OUTPUTFORMAT - 181))
      | (1ULL << (fugue_sqlParser::OVER - 181))
      | (1ULL << (fugue_sqlParser::OVERLAPS - 181))
      | (1ULL << (fugue_sqlParser::OVERLAY - 181))
      | (1ULL << (fugue_sqlParser::OVERWRITE - 181))
      | (1ULL << (fugue_sqlParser::PARTITION - 181))
      | (1ULL << (fugue_sqlParser::PARTITIONED - 181))
      | (1ULL << (fugue_sqlParser::PARTITIONS - 181))
      | (1ULL << (fugue_sqlParser::PERCENTLIT - 181))
      | (1ULL << (fugue_sqlParser::PIVOT - 181))
      | (1ULL << (fugue_sqlParser::PLACING - 181))
      | (1ULL << (fugue_sqlParser::POSITION - 181))
      | (1ULL << (fugue_sqlParser::PRECEDING - 181))
      | (1ULL << (fugue_sqlParser::PRIMARY - 181))
      | (1ULL << (fugue_sqlParser::PRINCIPALS - 181))
      | (1ULL << (fugue_sqlParser::PROPERTIES - 181))
      | (1ULL << (fugue_sqlParser::PURGE - 181))
      | (1ULL << (fugue_sqlParser::QUERY - 181))
      | (1ULL << (fugue_sqlParser::RANGE - 181))
      | (1ULL << (fugue_sqlParser::RECORDREADER - 181))
      | (1ULL << (fugue_sqlParser::RECORDWRITER - 181))
      | (1ULL << (fugue_sqlParser::RECOVER - 181))
      | (1ULL << (fugue_sqlParser::REDUCE - 181))
      | (1ULL << (fugue_sqlParser::REFERENCES - 181))
      | (1ULL << (fugue_sqlParser::REFRESH - 181))
      | (1ULL << (fugue_sqlParser::RENAME - 181))
      | (1ULL << (fugue_sqlParser::REPAIR - 181))
      | (1ULL << (fugue_sqlParser::REPLACE - 181))
      | (1ULL << (fugue_sqlParser::RESET - 181))
      | (1ULL << (fugue_sqlParser::RESTRICT - 181))
      | (1ULL << (fugue_sqlParser::REVOKE - 181))
      | (1ULL << (fugue_sqlParser::RIGHT - 181))
      | (1ULL << (fugue_sqlParser::RLIKE - 181))
      | (1ULL << (fugue_sqlParser::ROLE - 181))
      | (1ULL << (fugue_sqlParser::ROLES - 181))
      | (1ULL << (fugue_sqlParser::ROLLBACK - 181))
      | (1ULL << (fugue_sqlParser::ROLLUP - 181))
      | (1ULL << (fugue_sqlParser::ROW - 181))
      | (1ULL << (fugue_sqlParser::ROWS - 181)))) != 0) || ((((_la - 245) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 245)) & ((1ULL << (fugue_sqlParser::SCHEMA - 245))
      | (1ULL << (fugue_sqlParser::SECOND - 245))
      | (1ULL << (fugue_sqlParser::SELECT - 245))
      | (1ULL << (fugue_sqlParser::SEMI - 245))
      | (1ULL << (fugue_sqlParser::SEPARATED - 245))
      | (1ULL << (fugue_sqlParser::SERDE - 245))
      | (1ULL << (fugue_sqlParser::SERDEPROPERTIES - 245))
      | (1ULL << (fugue_sqlParser::SESSION_USER - 245))
      | (1ULL << (fugue_sqlParser::SET - 245))
      | (1ULL << (fugue_sqlParser::SETMINUS - 245))
      | (1ULL << (fugue_sqlParser::SETS - 245))
      | (1ULL << (fugue_sqlParser::SHOW - 245))
      | (1ULL << (fugue_sqlParser::SKEWED - 245))
      | (1ULL << (fugue_sqlParser::SOME - 245))
      | (1ULL << (fugue_sqlParser::SORT - 245))
      | (1ULL << (fugue_sqlParser::SORTED - 245))
      | (1ULL << (fugue_sqlParser::START - 245))
      | (1ULL << (fugue_sqlParser::STATISTICS - 245))
      | (1ULL << (fugue_sqlParser::STORED - 245))
      | (1ULL << (fugue_sqlParser::STRATIFY - 245))
      | (1ULL << (fugue_sqlParser::STRUCT - 245))
      | (1ULL << (fugue_sqlParser::SUBSTR - 245))
      | (1ULL << (fugue_sqlParser::SUBSTRING - 245))
      | (1ULL << (fugue_sqlParser::TABLE - 245))
      | (1ULL << (fugue_sqlParser::TABLES - 245))
      | (1ULL << (fugue_sqlParser::TABLESAMPLE - 245))
      | (1ULL << (fugue_sqlParser::TBLPROPERTIES - 245))
      | (1ULL << (fugue_sqlParser::TEMPORARY - 245))
      | (1ULL << (fugue_sqlParser::TERMINATED - 245))
      | (1ULL << (fugue_sqlParser::THEN - 245))
      | (1ULL << (fugue_sqlParser::TO - 245))
      | (1ULL << (fugue_sqlParser::TOUCH - 245))
      | (1ULL << (fugue_sqlParser::TRAILING - 245))
      | (1ULL << (fugue_sqlParser::TRANSACTION - 245))
      | (1ULL << (fugue_sqlParser::TRANSACTIONS - 245))
      | (1ULL << (fugue_sqlParser::TRANSFORM - 245))
      | (1ULL << (fugue_sqlParser::TRIM - 245))
      | (1ULL << (fugue_sqlParser::TRUE - 245))
      | (1ULL << (fugue_sqlParser::TRUNCATE - 245))
      | (1ULL << (fugue_sqlParser::TYPE - 245))
      | (1ULL << (fugue_sqlParser::UNARCHIVE - 245))
      | (1ULL << (fugue_sqlParser::UNBOUNDED - 245))
      | (1ULL << (fugue_sqlParser::UNCACHE - 245))
      | (1ULL << (fugue_sqlParser::UNION - 245))
      | (1ULL << (fugue_sqlParser::UNIQUE - 245))
      | (1ULL << (fugue_sqlParser::UNKNOWN - 245))
      | (1ULL << (fugue_sqlParser::UNLOCK - 245))
      | (1ULL << (fugue_sqlParser::UNSET - 245))
      | (1ULL << (fugue_sqlParser::UPDATE - 245))
      | (1ULL << (fugue_sqlParser::USE - 245))
      | (1ULL << (fugue_sqlParser::USER - 245))
      | (1ULL << (fugue_sqlParser::USING - 245))
      | (1ULL << (fugue_sqlParser::VALUES - 245))
      | (1ULL << (fugue_sqlParser::VIEW - 245))
      | (1ULL << (fugue_sqlParser::VIEWS - 245))
      | (1ULL << (fugue_sqlParser::WHEN - 245))
      | (1ULL << (fugue_sqlParser::WHERE - 245))
      | (1ULL << (fugue_sqlParser::WINDOW - 245))
      | (1ULL << (fugue_sqlParser::WITH - 245))
      | (1ULL << (fugue_sqlParser::YEAR - 245)))) != 0) || ((((_la - 319) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 319)) & ((1ULL << (fugue_sqlParser::DIV - 319))
      | (1ULL << (fugue_sqlParser::IDENTIFIER - 319))
      | (1ULL << (fugue_sqlParser::BACKQUOTED_IDENTIFIER - 319)))) != 0)) {
      setState(2777);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 361, _ctx)) {
      case 1: {
        setState(2776);
        match(fugue_sqlParser::AS);
        break;
      }

      default:
        break;
      }
      setState(2779);
      identifier();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LateralViewContext ------------------------------------------------------------------

fugue_sqlParser::LateralViewContext::LateralViewContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* fugue_sqlParser::LateralViewContext::LATERAL() {
  return getToken(fugue_sqlParser::LATERAL, 0);
}

tree::TerminalNode* fugue_sqlParser::LateralViewContext::VIEW() {
  return getToken(fugue_sqlParser::VIEW, 0);
}

fugue_sqlParser::QualifiedNameContext* fugue_sqlParser::LateralViewContext::qualifiedName() {
  return getRuleContext<fugue_sqlParser::QualifiedNameContext>(0);
}

std::vector<fugue_sqlParser::IdentifierContext *> fugue_sqlParser::LateralViewContext::identifier() {
  return getRuleContexts<fugue_sqlParser::IdentifierContext>();
}

fugue_sqlParser::IdentifierContext* fugue_sqlParser::LateralViewContext::identifier(size_t i) {
  return getRuleContext<fugue_sqlParser::IdentifierContext>(i);
}

tree::TerminalNode* fugue_sqlParser::LateralViewContext::OUTER() {
  return getToken(fugue_sqlParser::OUTER, 0);
}

std::vector<fugue_sqlParser::ExpressionContext *> fugue_sqlParser::LateralViewContext::expression() {
  return getRuleContexts<fugue_sqlParser::ExpressionContext>();
}

fugue_sqlParser::ExpressionContext* fugue_sqlParser::LateralViewContext::expression(size_t i) {
  return getRuleContext<fugue_sqlParser::ExpressionContext>(i);
}

tree::TerminalNode* fugue_sqlParser::LateralViewContext::AS() {
  return getToken(fugue_sqlParser::AS, 0);
}


size_t fugue_sqlParser::LateralViewContext::getRuleIndex() const {
  return fugue_sqlParser::RuleLateralView;
}


antlrcpp::Any fugue_sqlParser::LateralViewContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitLateralView(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::LateralViewContext* fugue_sqlParser::lateralView() {
  LateralViewContext *_localctx = _tracker.createInstance<LateralViewContext>(_ctx, getState());
  enterRule(_localctx, 282, fugue_sqlParser::RuleLateralView);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2782);
    match(fugue_sqlParser::LATERAL);
    setState(2783);
    match(fugue_sqlParser::VIEW);
    setState(2785);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 363, _ctx)) {
    case 1: {
      setState(2784);
      match(fugue_sqlParser::OUTER);
      break;
    }

    default:
      break;
    }
    setState(2787);
    qualifiedName();
    setState(2788);
    match(fugue_sqlParser::T__2);
    setState(2797);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << fugue_sqlParser::T__2)
      | (1ULL << fugue_sqlParser::ADD)
      | (1ULL << fugue_sqlParser::AFTER)
      | (1ULL << fugue_sqlParser::ALL)
      | (1ULL << fugue_sqlParser::ALTER)
      | (1ULL << fugue_sqlParser::ANALYZE)
      | (1ULL << fugue_sqlParser::AND)
      | (1ULL << fugue_sqlParser::ANTI)
      | (1ULL << fugue_sqlParser::ANY)
      | (1ULL << fugue_sqlParser::ARCHIVE)
      | (1ULL << fugue_sqlParser::ARRAY)
      | (1ULL << fugue_sqlParser::AS))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & ((1ULL << (fugue_sqlParser::ASC - 64))
      | (1ULL << (fugue_sqlParser::AT - 64))
      | (1ULL << (fugue_sqlParser::AUTHORIZATION - 64))
      | (1ULL << (fugue_sqlParser::BETWEEN - 64))
      | (1ULL << (fugue_sqlParser::BOTH - 64))
      | (1ULL << (fugue_sqlParser::BUCKET - 64))
      | (1ULL << (fugue_sqlParser::BUCKETS - 64))
      | (1ULL << (fugue_sqlParser::BY - 64))
      | (1ULL << (fugue_sqlParser::CACHE - 64))
      | (1ULL << (fugue_sqlParser::CASCADE - 64))
      | (1ULL << (fugue_sqlParser::CASE - 64))
      | (1ULL << (fugue_sqlParser::CAST - 64))
      | (1ULL << (fugue_sqlParser::CHANGE - 64))
      | (1ULL << (fugue_sqlParser::CHECK - 64))
      | (1ULL << (fugue_sqlParser::CLEAR - 64))
      | (1ULL << (fugue_sqlParser::CLUSTER - 64))
      | (1ULL << (fugue_sqlParser::CLUSTERED - 64))
      | (1ULL << (fugue_sqlParser::CODEGEN - 64))
      | (1ULL << (fugue_sqlParser::COLLATE - 64))
      | (1ULL << (fugue_sqlParser::COLLECTION - 64))
      | (1ULL << (fugue_sqlParser::COLUMN - 64))
      | (1ULL << (fugue_sqlParser::COLUMNS - 64))
      | (1ULL << (fugue_sqlParser::COMMENT - 64))
      | (1ULL << (fugue_sqlParser::COMMIT - 64))
      | (1ULL << (fugue_sqlParser::COMPACT - 64))
      | (1ULL << (fugue_sqlParser::COMPACTIONS - 64))
      | (1ULL << (fugue_sqlParser::COMPUTE - 64))
      | (1ULL << (fugue_sqlParser::CONCATENATE - 64))
      | (1ULL << (fugue_sqlParser::CONSTRAINT - 64))
      | (1ULL << (fugue_sqlParser::COST - 64))
      | (1ULL << (fugue_sqlParser::CREATE - 64))
      | (1ULL << (fugue_sqlParser::CROSS - 64))
      | (1ULL << (fugue_sqlParser::CUBE - 64))
      | (1ULL << (fugue_sqlParser::CURRENT - 64))
      | (1ULL << (fugue_sqlParser::CURRENT_DATE - 64))
      | (1ULL << (fugue_sqlParser::CURRENT_TIME - 64))
      | (1ULL << (fugue_sqlParser::CURRENT_TIMESTAMP - 64))
      | (1ULL << (fugue_sqlParser::CURRENT_USER - 64))
      | (1ULL << (fugue_sqlParser::DATA - 64))
      | (1ULL << (fugue_sqlParser::DATABASE - 64))
      | (1ULL << (fugue_sqlParser::DATABASES - 64))
      | (1ULL << (fugue_sqlParser::DAY - 64))
      | (1ULL << (fugue_sqlParser::DBPROPERTIES - 64))
      | (1ULL << (fugue_sqlParser::DEFINED - 64))
      | (1ULL << (fugue_sqlParser::DELETE - 64))
      | (1ULL << (fugue_sqlParser::DELIMITED - 64))
      | (1ULL << (fugue_sqlParser::DESC - 64))
      | (1ULL << (fugue_sqlParser::DESCRIBE - 64))
      | (1ULL << (fugue_sqlParser::DFS - 64))
      | (1ULL << (fugue_sqlParser::DIRECTORIES - 64))
      | (1ULL << (fugue_sqlParser::DIRECTORY - 64))
      | (1ULL << (fugue_sqlParser::DISTINCT - 64))
      | (1ULL << (fugue_sqlParser::DISTRIBUTE - 64))
      | (1ULL << (fugue_sqlParser::DROP - 64))
      | (1ULL << (fugue_sqlParser::ELSE - 64))
      | (1ULL << (fugue_sqlParser::END - 64))
      | (1ULL << (fugue_sqlParser::ESCAPE - 64))
      | (1ULL << (fugue_sqlParser::ESCAPED - 64))
      | (1ULL << (fugue_sqlParser::EXCEPT - 64))
      | (1ULL << (fugue_sqlParser::EXCHANGE - 64))
      | (1ULL << (fugue_sqlParser::EXISTS - 64))
      | (1ULL << (fugue_sqlParser::EXPLAIN - 64))
      | (1ULL << (fugue_sqlParser::EXPORT - 64))
      | (1ULL << (fugue_sqlParser::EXTENDED - 64)))) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 128)) & ((1ULL << (fugue_sqlParser::EXTERNAL - 128))
      | (1ULL << (fugue_sqlParser::EXTRACT - 128))
      | (1ULL << (fugue_sqlParser::FALSE - 128))
      | (1ULL << (fugue_sqlParser::FETCH - 128))
      | (1ULL << (fugue_sqlParser::FIELDS - 128))
      | (1ULL << (fugue_sqlParser::FILTER - 128))
      | (1ULL << (fugue_sqlParser::FILEFORMAT - 128))
      | (1ULL << (fugue_sqlParser::FIRST - 128))
      | (1ULL << (fugue_sqlParser::FOLLOWING - 128))
      | (1ULL << (fugue_sqlParser::FOR - 128))
      | (1ULL << (fugue_sqlParser::FOREIGN - 128))
      | (1ULL << (fugue_sqlParser::FORMAT - 128))
      | (1ULL << (fugue_sqlParser::FORMATTED - 128))
      | (1ULL << (fugue_sqlParser::FROM - 128))
      | (1ULL << (fugue_sqlParser::FULL - 128))
      | (1ULL << (fugue_sqlParser::FUNCTION - 128))
      | (1ULL << (fugue_sqlParser::FUNCTIONS - 128))
      | (1ULL << (fugue_sqlParser::GLOBAL - 128))
      | (1ULL << (fugue_sqlParser::GRANT - 128))
      | (1ULL << (fugue_sqlParser::GROUP - 128))
      | (1ULL << (fugue_sqlParser::GROUPING - 128))
      | (1ULL << (fugue_sqlParser::HAVING - 128))
      | (1ULL << (fugue_sqlParser::HOUR - 128))
      | (1ULL << (fugue_sqlParser::IF - 128))
      | (1ULL << (fugue_sqlParser::IGNORE - 128))
      | (1ULL << (fugue_sqlParser::IMPORT - 128))
      | (1ULL << (fugue_sqlParser::IN - 128))
      | (1ULL << (fugue_sqlParser::INDEX - 128))
      | (1ULL << (fugue_sqlParser::INDEXES - 128))
      | (1ULL << (fugue_sqlParser::INNER - 128))
      | (1ULL << (fugue_sqlParser::INPATH - 128))
      | (1ULL << (fugue_sqlParser::INPUTFORMAT - 128))
      | (1ULL << (fugue_sqlParser::INSERT - 128))
      | (1ULL << (fugue_sqlParser::INTERSECT - 128))
      | (1ULL << (fugue_sqlParser::INTERVAL - 128))
      | (1ULL << (fugue_sqlParser::INTO - 128))
      | (1ULL << (fugue_sqlParser::IS - 128))
      | (1ULL << (fugue_sqlParser::ITEMS - 128))
      | (1ULL << (fugue_sqlParser::JOIN - 128))
      | (1ULL << (fugue_sqlParser::KEYS - 128))
      | (1ULL << (fugue_sqlParser::LAST - 128))
      | (1ULL << (fugue_sqlParser::LATERAL - 128))
      | (1ULL << (fugue_sqlParser::LAZY - 128))
      | (1ULL << (fugue_sqlParser::LEADING - 128))
      | (1ULL << (fugue_sqlParser::LEFT - 128))
      | (1ULL << (fugue_sqlParser::LIKE - 128))
      | (1ULL << (fugue_sqlParser::LIMIT - 128))
      | (1ULL << (fugue_sqlParser::LINES - 128))
      | (1ULL << (fugue_sqlParser::LIST - 128))
      | (1ULL << (fugue_sqlParser::LOAD - 128))
      | (1ULL << (fugue_sqlParser::LOCAL - 128))
      | (1ULL << (fugue_sqlParser::LOCATION - 128))
      | (1ULL << (fugue_sqlParser::LOCK - 128))
      | (1ULL << (fugue_sqlParser::LOCKS - 128))
      | (1ULL << (fugue_sqlParser::LOGICAL - 128))
      | (1ULL << (fugue_sqlParser::MACRO - 128))
      | (1ULL << (fugue_sqlParser::MAP - 128))
      | (1ULL << (fugue_sqlParser::MATCHED - 128))
      | (1ULL << (fugue_sqlParser::MERGE - 128))
      | (1ULL << (fugue_sqlParser::MINUTE - 128))
      | (1ULL << (fugue_sqlParser::MONTH - 128))
      | (1ULL << (fugue_sqlParser::MSCK - 128))
      | (1ULL << (fugue_sqlParser::NAMESPACE - 128))
      | (1ULL << (fugue_sqlParser::NAMESPACES - 128)))) != 0) || ((((_la - 192) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 192)) & ((1ULL << (fugue_sqlParser::NATURAL - 192))
      | (1ULL << (fugue_sqlParser::NO - 192))
      | (1ULL << (fugue_sqlParser::NOT - 192))
      | (1ULL << (fugue_sqlParser::THENULL - 192))
      | (1ULL << (fugue_sqlParser::THENULLS - 192))
      | (1ULL << (fugue_sqlParser::OF - 192))
      | (1ULL << (fugue_sqlParser::ON - 192))
      | (1ULL << (fugue_sqlParser::ONLY - 192))
      | (1ULL << (fugue_sqlParser::OPTION - 192))
      | (1ULL << (fugue_sqlParser::OPTIONS - 192))
      | (1ULL << (fugue_sqlParser::OR - 192))
      | (1ULL << (fugue_sqlParser::ORDER - 192))
      | (1ULL << (fugue_sqlParser::OUT - 192))
      | (1ULL << (fugue_sqlParser::OUTER - 192))
      | (1ULL << (fugue_sqlParser::OUTPUTFORMAT - 192))
      | (1ULL << (fugue_sqlParser::OVER - 192))
      | (1ULL << (fugue_sqlParser::OVERLAPS - 192))
      | (1ULL << (fugue_sqlParser::OVERLAY - 192))
      | (1ULL << (fugue_sqlParser::OVERWRITE - 192))
      | (1ULL << (fugue_sqlParser::PARTITION - 192))
      | (1ULL << (fugue_sqlParser::PARTITIONED - 192))
      | (1ULL << (fugue_sqlParser::PARTITIONS - 192))
      | (1ULL << (fugue_sqlParser::PERCENTLIT - 192))
      | (1ULL << (fugue_sqlParser::PIVOT - 192))
      | (1ULL << (fugue_sqlParser::PLACING - 192))
      | (1ULL << (fugue_sqlParser::POSITION - 192))
      | (1ULL << (fugue_sqlParser::PRECEDING - 192))
      | (1ULL << (fugue_sqlParser::PRIMARY - 192))
      | (1ULL << (fugue_sqlParser::PRINCIPALS - 192))
      | (1ULL << (fugue_sqlParser::PROPERTIES - 192))
      | (1ULL << (fugue_sqlParser::PURGE - 192))
      | (1ULL << (fugue_sqlParser::QUERY - 192))
      | (1ULL << (fugue_sqlParser::RANGE - 192))
      | (1ULL << (fugue_sqlParser::RECORDREADER - 192))
      | (1ULL << (fugue_sqlParser::RECORDWRITER - 192))
      | (1ULL << (fugue_sqlParser::RECOVER - 192))
      | (1ULL << (fugue_sqlParser::REDUCE - 192))
      | (1ULL << (fugue_sqlParser::REFERENCES - 192))
      | (1ULL << (fugue_sqlParser::REFRESH - 192))
      | (1ULL << (fugue_sqlParser::RENAME - 192))
      | (1ULL << (fugue_sqlParser::REPAIR - 192))
      | (1ULL << (fugue_sqlParser::REPLACE - 192))
      | (1ULL << (fugue_sqlParser::RESET - 192))
      | (1ULL << (fugue_sqlParser::RESTRICT - 192))
      | (1ULL << (fugue_sqlParser::REVOKE - 192))
      | (1ULL << (fugue_sqlParser::RIGHT - 192))
      | (1ULL << (fugue_sqlParser::RLIKE - 192))
      | (1ULL << (fugue_sqlParser::ROLE - 192))
      | (1ULL << (fugue_sqlParser::ROLES - 192))
      | (1ULL << (fugue_sqlParser::ROLLBACK - 192))
      | (1ULL << (fugue_sqlParser::ROLLUP - 192))
      | (1ULL << (fugue_sqlParser::ROW - 192))
      | (1ULL << (fugue_sqlParser::ROWS - 192))
      | (1ULL << (fugue_sqlParser::SCHEMA - 192))
      | (1ULL << (fugue_sqlParser::SECOND - 192))
      | (1ULL << (fugue_sqlParser::SELECT - 192))
      | (1ULL << (fugue_sqlParser::SEMI - 192))
      | (1ULL << (fugue_sqlParser::SEPARATED - 192))
      | (1ULL << (fugue_sqlParser::SERDE - 192))
      | (1ULL << (fugue_sqlParser::SERDEPROPERTIES - 192))
      | (1ULL << (fugue_sqlParser::SESSION_USER - 192))
      | (1ULL << (fugue_sqlParser::SET - 192))
      | (1ULL << (fugue_sqlParser::SETMINUS - 192))
      | (1ULL << (fugue_sqlParser::SETS - 192)))) != 0) || ((((_la - 256) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 256)) & ((1ULL << (fugue_sqlParser::SHOW - 256))
      | (1ULL << (fugue_sqlParser::SKEWED - 256))
      | (1ULL << (fugue_sqlParser::SOME - 256))
      | (1ULL << (fugue_sqlParser::SORT - 256))
      | (1ULL << (fugue_sqlParser::SORTED - 256))
      | (1ULL << (fugue_sqlParser::START - 256))
      | (1ULL << (fugue_sqlParser::STATISTICS - 256))
      | (1ULL << (fugue_sqlParser::STORED - 256))
      | (1ULL << (fugue_sqlParser::STRATIFY - 256))
      | (1ULL << (fugue_sqlParser::STRUCT - 256))
      | (1ULL << (fugue_sqlParser::SUBSTR - 256))
      | (1ULL << (fugue_sqlParser::SUBSTRING - 256))
      | (1ULL << (fugue_sqlParser::TABLE - 256))
      | (1ULL << (fugue_sqlParser::TABLES - 256))
      | (1ULL << (fugue_sqlParser::TABLESAMPLE - 256))
      | (1ULL << (fugue_sqlParser::TBLPROPERTIES - 256))
      | (1ULL << (fugue_sqlParser::TEMPORARY - 256))
      | (1ULL << (fugue_sqlParser::TERMINATED - 256))
      | (1ULL << (fugue_sqlParser::THEN - 256))
      | (1ULL << (fugue_sqlParser::TO - 256))
      | (1ULL << (fugue_sqlParser::TOUCH - 256))
      | (1ULL << (fugue_sqlParser::TRAILING - 256))
      | (1ULL << (fugue_sqlParser::TRANSACTION - 256))
      | (1ULL << (fugue_sqlParser::TRANSACTIONS - 256))
      | (1ULL << (fugue_sqlParser::TRANSFORM - 256))
      | (1ULL << (fugue_sqlParser::TRIM - 256))
      | (1ULL << (fugue_sqlParser::TRUE - 256))
      | (1ULL << (fugue_sqlParser::TRUNCATE - 256))
      | (1ULL << (fugue_sqlParser::TYPE - 256))
      | (1ULL << (fugue_sqlParser::UNARCHIVE - 256))
      | (1ULL << (fugue_sqlParser::UNBOUNDED - 256))
      | (1ULL << (fugue_sqlParser::UNCACHE - 256))
      | (1ULL << (fugue_sqlParser::UNION - 256))
      | (1ULL << (fugue_sqlParser::UNIQUE - 256))
      | (1ULL << (fugue_sqlParser::UNKNOWN - 256))
      | (1ULL << (fugue_sqlParser::UNLOCK - 256))
      | (1ULL << (fugue_sqlParser::UNSET - 256))
      | (1ULL << (fugue_sqlParser::UPDATE - 256))
      | (1ULL << (fugue_sqlParser::USE - 256))
      | (1ULL << (fugue_sqlParser::USER - 256))
      | (1ULL << (fugue_sqlParser::USING - 256))
      | (1ULL << (fugue_sqlParser::VALUES - 256))
      | (1ULL << (fugue_sqlParser::VIEW - 256))
      | (1ULL << (fugue_sqlParser::VIEWS - 256))
      | (1ULL << (fugue_sqlParser::WHEN - 256))
      | (1ULL << (fugue_sqlParser::WHERE - 256))
      | (1ULL << (fugue_sqlParser::WINDOW - 256))
      | (1ULL << (fugue_sqlParser::WITH - 256))
      | (1ULL << (fugue_sqlParser::YEAR - 256))
      | (1ULL << (fugue_sqlParser::PLUS - 256))
      | (1ULL << (fugue_sqlParser::MINUS - 256))
      | (1ULL << (fugue_sqlParser::ASTERISK - 256))
      | (1ULL << (fugue_sqlParser::DIV - 256)))) != 0) || ((((_la - 320) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 320)) & ((1ULL << (fugue_sqlParser::TILDE - 320))
      | (1ULL << (fugue_sqlParser::STRING - 320))
      | (1ULL << (fugue_sqlParser::BIGINT_LITERAL - 320))
      | (1ULL << (fugue_sqlParser::SMALLINT_LITERAL - 320))
      | (1ULL << (fugue_sqlParser::TINYINT_LITERAL - 320))
      | (1ULL << (fugue_sqlParser::INTEGER_VALUE - 320))
      | (1ULL << (fugue_sqlParser::EXPONENT_VALUE - 320))
      | (1ULL << (fugue_sqlParser::DECIMAL_VALUE - 320))
      | (1ULL << (fugue_sqlParser::DOUBLE_LITERAL - 320))
      | (1ULL << (fugue_sqlParser::BIGDECIMAL_LITERAL - 320))
      | (1ULL << (fugue_sqlParser::IDENTIFIER - 320))
      | (1ULL << (fugue_sqlParser::BACKQUOTED_IDENTIFIER - 320)))) != 0)) {
      setState(2789);
      expression();
      setState(2794);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == fugue_sqlParser::T__0) {
        setState(2790);
        match(fugue_sqlParser::T__0);
        setState(2791);
        expression();
        setState(2796);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(2799);
    match(fugue_sqlParser::T__3);
    setState(2800);
    antlrcpp::downCast<LateralViewContext *>(_localctx)->tblName = identifier();
    setState(2812);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 368, _ctx)) {
    case 1: {
      setState(2802);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 366, _ctx)) {
      case 1: {
        setState(2801);
        match(fugue_sqlParser::AS);
        break;
      }

      default:
        break;
      }
      setState(2804);
      antlrcpp::downCast<LateralViewContext *>(_localctx)->identifierContext = identifier();
      antlrcpp::downCast<LateralViewContext *>(_localctx)->colName.push_back(antlrcpp::downCast<LateralViewContext *>(_localctx)->identifierContext);
      setState(2809);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 367, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(2805);
          match(fugue_sqlParser::T__0);
          setState(2806);
          antlrcpp::downCast<LateralViewContext *>(_localctx)->identifierContext = identifier();
          antlrcpp::downCast<LateralViewContext *>(_localctx)->colName.push_back(antlrcpp::downCast<LateralViewContext *>(_localctx)->identifierContext); 
        }
        setState(2811);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 367, _ctx);
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SetQuantifierContext ------------------------------------------------------------------

fugue_sqlParser::SetQuantifierContext::SetQuantifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* fugue_sqlParser::SetQuantifierContext::DISTINCT() {
  return getToken(fugue_sqlParser::DISTINCT, 0);
}

tree::TerminalNode* fugue_sqlParser::SetQuantifierContext::ALL() {
  return getToken(fugue_sqlParser::ALL, 0);
}


size_t fugue_sqlParser::SetQuantifierContext::getRuleIndex() const {
  return fugue_sqlParser::RuleSetQuantifier;
}


antlrcpp::Any fugue_sqlParser::SetQuantifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitSetQuantifier(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::SetQuantifierContext* fugue_sqlParser::setQuantifier() {
  SetQuantifierContext *_localctx = _tracker.createInstance<SetQuantifierContext>(_ctx, getState());
  enterRule(_localctx, 284, fugue_sqlParser::RuleSetQuantifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2814);
    _la = _input->LA(1);
    if (!(_la == fugue_sqlParser::ALL

    || _la == fugue_sqlParser::DISTINCT)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RelationContext ------------------------------------------------------------------

fugue_sqlParser::RelationContext::RelationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

fugue_sqlParser::RelationPrimaryContext* fugue_sqlParser::RelationContext::relationPrimary() {
  return getRuleContext<fugue_sqlParser::RelationPrimaryContext>(0);
}

std::vector<fugue_sqlParser::JoinRelationContext *> fugue_sqlParser::RelationContext::joinRelation() {
  return getRuleContexts<fugue_sqlParser::JoinRelationContext>();
}

fugue_sqlParser::JoinRelationContext* fugue_sqlParser::RelationContext::joinRelation(size_t i) {
  return getRuleContext<fugue_sqlParser::JoinRelationContext>(i);
}


size_t fugue_sqlParser::RelationContext::getRuleIndex() const {
  return fugue_sqlParser::RuleRelation;
}


antlrcpp::Any fugue_sqlParser::RelationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitRelation(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::RelationContext* fugue_sqlParser::relation() {
  RelationContext *_localctx = _tracker.createInstance<RelationContext>(_ctx, getState());
  enterRule(_localctx, 286, fugue_sqlParser::RuleRelation);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2816);
    relationPrimary();
    setState(2820);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 369, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2817);
        joinRelation(); 
      }
      setState(2822);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 369, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- JoinRelationContext ------------------------------------------------------------------

fugue_sqlParser::JoinRelationContext::JoinRelationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

fugue_sqlParser::JoinTypeContext* fugue_sqlParser::JoinRelationContext::joinType() {
  return getRuleContext<fugue_sqlParser::JoinTypeContext>(0);
}

tree::TerminalNode* fugue_sqlParser::JoinRelationContext::JOIN() {
  return getToken(fugue_sqlParser::JOIN, 0);
}

fugue_sqlParser::RelationPrimaryContext* fugue_sqlParser::JoinRelationContext::relationPrimary() {
  return getRuleContext<fugue_sqlParser::RelationPrimaryContext>(0);
}

fugue_sqlParser::JoinCriteriaContext* fugue_sqlParser::JoinRelationContext::joinCriteria() {
  return getRuleContext<fugue_sqlParser::JoinCriteriaContext>(0);
}

tree::TerminalNode* fugue_sqlParser::JoinRelationContext::NATURAL() {
  return getToken(fugue_sqlParser::NATURAL, 0);
}


size_t fugue_sqlParser::JoinRelationContext::getRuleIndex() const {
  return fugue_sqlParser::RuleJoinRelation;
}


antlrcpp::Any fugue_sqlParser::JoinRelationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitJoinRelation(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::JoinRelationContext* fugue_sqlParser::joinRelation() {
  JoinRelationContext *_localctx = _tracker.createInstance<JoinRelationContext>(_ctx, getState());
  enterRule(_localctx, 288, fugue_sqlParser::RuleJoinRelation);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2834);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case fugue_sqlParser::ANTI:
      case fugue_sqlParser::CROSS:
      case fugue_sqlParser::FULL:
      case fugue_sqlParser::INNER:
      case fugue_sqlParser::JOIN:
      case fugue_sqlParser::LEFT:
      case fugue_sqlParser::RIGHT:
      case fugue_sqlParser::SEMI: {
        enterOuterAlt(_localctx, 1);
        setState(2823);
        joinType();
        setState(2824);
        match(fugue_sqlParser::JOIN);
        setState(2825);
        antlrcpp::downCast<JoinRelationContext *>(_localctx)->right = relationPrimary();
        setState(2827);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 370, _ctx)) {
        case 1: {
          setState(2826);
          joinCriteria();
          break;
        }

        default:
          break;
        }
        break;
      }

      case fugue_sqlParser::NATURAL: {
        enterOuterAlt(_localctx, 2);
        setState(2829);
        match(fugue_sqlParser::NATURAL);
        setState(2830);
        joinType();
        setState(2831);
        match(fugue_sqlParser::JOIN);
        setState(2832);
        antlrcpp::downCast<JoinRelationContext *>(_localctx)->right = relationPrimary();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- JoinTypeContext ------------------------------------------------------------------

fugue_sqlParser::JoinTypeContext::JoinTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* fugue_sqlParser::JoinTypeContext::INNER() {
  return getToken(fugue_sqlParser::INNER, 0);
}

tree::TerminalNode* fugue_sqlParser::JoinTypeContext::CROSS() {
  return getToken(fugue_sqlParser::CROSS, 0);
}

tree::TerminalNode* fugue_sqlParser::JoinTypeContext::LEFT() {
  return getToken(fugue_sqlParser::LEFT, 0);
}

tree::TerminalNode* fugue_sqlParser::JoinTypeContext::OUTER() {
  return getToken(fugue_sqlParser::OUTER, 0);
}

tree::TerminalNode* fugue_sqlParser::JoinTypeContext::SEMI() {
  return getToken(fugue_sqlParser::SEMI, 0);
}

tree::TerminalNode* fugue_sqlParser::JoinTypeContext::RIGHT() {
  return getToken(fugue_sqlParser::RIGHT, 0);
}

tree::TerminalNode* fugue_sqlParser::JoinTypeContext::FULL() {
  return getToken(fugue_sqlParser::FULL, 0);
}

tree::TerminalNode* fugue_sqlParser::JoinTypeContext::ANTI() {
  return getToken(fugue_sqlParser::ANTI, 0);
}


size_t fugue_sqlParser::JoinTypeContext::getRuleIndex() const {
  return fugue_sqlParser::RuleJoinType;
}


antlrcpp::Any fugue_sqlParser::JoinTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitJoinType(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::JoinTypeContext* fugue_sqlParser::joinType() {
  JoinTypeContext *_localctx = _tracker.createInstance<JoinTypeContext>(_ctx, getState());
  enterRule(_localctx, 290, fugue_sqlParser::RuleJoinType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2860);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 378, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2837);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::INNER) {
        setState(2836);
        match(fugue_sqlParser::INNER);
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2839);
      match(fugue_sqlParser::CROSS);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2840);
      match(fugue_sqlParser::LEFT);
      setState(2842);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::OUTER) {
        setState(2841);
        match(fugue_sqlParser::OUTER);
      }
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2845);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::LEFT) {
        setState(2844);
        match(fugue_sqlParser::LEFT);
      }
      setState(2847);
      match(fugue_sqlParser::SEMI);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(2848);
      match(fugue_sqlParser::RIGHT);
      setState(2850);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::OUTER) {
        setState(2849);
        match(fugue_sqlParser::OUTER);
      }
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(2852);
      match(fugue_sqlParser::FULL);
      setState(2854);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::OUTER) {
        setState(2853);
        match(fugue_sqlParser::OUTER);
      }
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(2857);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::LEFT) {
        setState(2856);
        match(fugue_sqlParser::LEFT);
      }
      setState(2859);
      match(fugue_sqlParser::ANTI);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- JoinCriteriaContext ------------------------------------------------------------------

fugue_sqlParser::JoinCriteriaContext::JoinCriteriaContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* fugue_sqlParser::JoinCriteriaContext::ON() {
  return getToken(fugue_sqlParser::ON, 0);
}

fugue_sqlParser::BooleanExpressionContext* fugue_sqlParser::JoinCriteriaContext::booleanExpression() {
  return getRuleContext<fugue_sqlParser::BooleanExpressionContext>(0);
}

tree::TerminalNode* fugue_sqlParser::JoinCriteriaContext::USING() {
  return getToken(fugue_sqlParser::USING, 0);
}

fugue_sqlParser::IdentifierListContext* fugue_sqlParser::JoinCriteriaContext::identifierList() {
  return getRuleContext<fugue_sqlParser::IdentifierListContext>(0);
}


size_t fugue_sqlParser::JoinCriteriaContext::getRuleIndex() const {
  return fugue_sqlParser::RuleJoinCriteria;
}


antlrcpp::Any fugue_sqlParser::JoinCriteriaContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitJoinCriteria(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::JoinCriteriaContext* fugue_sqlParser::joinCriteria() {
  JoinCriteriaContext *_localctx = _tracker.createInstance<JoinCriteriaContext>(_ctx, getState());
  enterRule(_localctx, 292, fugue_sqlParser::RuleJoinCriteria);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2866);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case fugue_sqlParser::ON: {
        enterOuterAlt(_localctx, 1);
        setState(2862);
        match(fugue_sqlParser::ON);
        setState(2863);
        booleanExpression(0);
        break;
      }

      case fugue_sqlParser::USING: {
        enterOuterAlt(_localctx, 2);
        setState(2864);
        match(fugue_sqlParser::USING);
        setState(2865);
        identifierList();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SampleContext ------------------------------------------------------------------

fugue_sqlParser::SampleContext::SampleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* fugue_sqlParser::SampleContext::TABLESAMPLE() {
  return getToken(fugue_sqlParser::TABLESAMPLE, 0);
}

fugue_sqlParser::SampleMethodContext* fugue_sqlParser::SampleContext::sampleMethod() {
  return getRuleContext<fugue_sqlParser::SampleMethodContext>(0);
}


size_t fugue_sqlParser::SampleContext::getRuleIndex() const {
  return fugue_sqlParser::RuleSample;
}


antlrcpp::Any fugue_sqlParser::SampleContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitSample(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::SampleContext* fugue_sqlParser::sample() {
  SampleContext *_localctx = _tracker.createInstance<SampleContext>(_ctx, getState());
  enterRule(_localctx, 294, fugue_sqlParser::RuleSample);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2868);
    match(fugue_sqlParser::TABLESAMPLE);
    setState(2869);
    match(fugue_sqlParser::T__2);
    setState(2871);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << fugue_sqlParser::T__2)
      | (1ULL << fugue_sqlParser::ADD)
      | (1ULL << fugue_sqlParser::AFTER)
      | (1ULL << fugue_sqlParser::ALL)
      | (1ULL << fugue_sqlParser::ALTER)
      | (1ULL << fugue_sqlParser::ANALYZE)
      | (1ULL << fugue_sqlParser::AND)
      | (1ULL << fugue_sqlParser::ANTI)
      | (1ULL << fugue_sqlParser::ANY)
      | (1ULL << fugue_sqlParser::ARCHIVE)
      | (1ULL << fugue_sqlParser::ARRAY)
      | (1ULL << fugue_sqlParser::AS))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & ((1ULL << (fugue_sqlParser::ASC - 64))
      | (1ULL << (fugue_sqlParser::AT - 64))
      | (1ULL << (fugue_sqlParser::AUTHORIZATION - 64))
      | (1ULL << (fugue_sqlParser::BETWEEN - 64))
      | (1ULL << (fugue_sqlParser::BOTH - 64))
      | (1ULL << (fugue_sqlParser::BUCKET - 64))
      | (1ULL << (fugue_sqlParser::BUCKETS - 64))
      | (1ULL << (fugue_sqlParser::BY - 64))
      | (1ULL << (fugue_sqlParser::CACHE - 64))
      | (1ULL << (fugue_sqlParser::CASCADE - 64))
      | (1ULL << (fugue_sqlParser::CASE - 64))
      | (1ULL << (fugue_sqlParser::CAST - 64))
      | (1ULL << (fugue_sqlParser::CHANGE - 64))
      | (1ULL << (fugue_sqlParser::CHECK - 64))
      | (1ULL << (fugue_sqlParser::CLEAR - 64))
      | (1ULL << (fugue_sqlParser::CLUSTER - 64))
      | (1ULL << (fugue_sqlParser::CLUSTERED - 64))
      | (1ULL << (fugue_sqlParser::CODEGEN - 64))
      | (1ULL << (fugue_sqlParser::COLLATE - 64))
      | (1ULL << (fugue_sqlParser::COLLECTION - 64))
      | (1ULL << (fugue_sqlParser::COLUMN - 64))
      | (1ULL << (fugue_sqlParser::COLUMNS - 64))
      | (1ULL << (fugue_sqlParser::COMMENT - 64))
      | (1ULL << (fugue_sqlParser::COMMIT - 64))
      | (1ULL << (fugue_sqlParser::COMPACT - 64))
      | (1ULL << (fugue_sqlParser::COMPACTIONS - 64))
      | (1ULL << (fugue_sqlParser::COMPUTE - 64))
      | (1ULL << (fugue_sqlParser::CONCATENATE - 64))
      | (1ULL << (fugue_sqlParser::CONSTRAINT - 64))
      | (1ULL << (fugue_sqlParser::COST - 64))
      | (1ULL << (fugue_sqlParser::CREATE - 64))
      | (1ULL << (fugue_sqlParser::CROSS - 64))
      | (1ULL << (fugue_sqlParser::CUBE - 64))
      | (1ULL << (fugue_sqlParser::CURRENT - 64))
      | (1ULL << (fugue_sqlParser::CURRENT_DATE - 64))
      | (1ULL << (fugue_sqlParser::CURRENT_TIME - 64))
      | (1ULL << (fugue_sqlParser::CURRENT_TIMESTAMP - 64))
      | (1ULL << (fugue_sqlParser::CURRENT_USER - 64))
      | (1ULL << (fugue_sqlParser::DATA - 64))
      | (1ULL << (fugue_sqlParser::DATABASE - 64))
      | (1ULL << (fugue_sqlParser::DATABASES - 64))
      | (1ULL << (fugue_sqlParser::DAY - 64))
      | (1ULL << (fugue_sqlParser::DBPROPERTIES - 64))
      | (1ULL << (fugue_sqlParser::DEFINED - 64))
      | (1ULL << (fugue_sqlParser::DELETE - 64))
      | (1ULL << (fugue_sqlParser::DELIMITED - 64))
      | (1ULL << (fugue_sqlParser::DESC - 64))
      | (1ULL << (fugue_sqlParser::DESCRIBE - 64))
      | (1ULL << (fugue_sqlParser::DFS - 64))
      | (1ULL << (fugue_sqlParser::DIRECTORIES - 64))
      | (1ULL << (fugue_sqlParser::DIRECTORY - 64))
      | (1ULL << (fugue_sqlParser::DISTINCT - 64))
      | (1ULL << (fugue_sqlParser::DISTRIBUTE - 64))
      | (1ULL << (fugue_sqlParser::DROP - 64))
      | (1ULL << (fugue_sqlParser::ELSE - 64))
      | (1ULL << (fugue_sqlParser::END - 64))
      | (1ULL << (fugue_sqlParser::ESCAPE - 64))
      | (1ULL << (fugue_sqlParser::ESCAPED - 64))
      | (1ULL << (fugue_sqlParser::EXCEPT - 64))
      | (1ULL << (fugue_sqlParser::EXCHANGE - 64))
      | (1ULL << (fugue_sqlParser::EXISTS - 64))
      | (1ULL << (fugue_sqlParser::EXPLAIN - 64))
      | (1ULL << (fugue_sqlParser::EXPORT - 64))
      | (1ULL << (fugue_sqlParser::EXTENDED - 64)))) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 128)) & ((1ULL << (fugue_sqlParser::EXTERNAL - 128))
      | (1ULL << (fugue_sqlParser::EXTRACT - 128))
      | (1ULL << (fugue_sqlParser::FALSE - 128))
      | (1ULL << (fugue_sqlParser::FETCH - 128))
      | (1ULL << (fugue_sqlParser::FIELDS - 128))
      | (1ULL << (fugue_sqlParser::FILTER - 128))
      | (1ULL << (fugue_sqlParser::FILEFORMAT - 128))
      | (1ULL << (fugue_sqlParser::FIRST - 128))
      | (1ULL << (fugue_sqlParser::FOLLOWING - 128))
      | (1ULL << (fugue_sqlParser::FOR - 128))
      | (1ULL << (fugue_sqlParser::FOREIGN - 128))
      | (1ULL << (fugue_sqlParser::FORMAT - 128))
      | (1ULL << (fugue_sqlParser::FORMATTED - 128))
      | (1ULL << (fugue_sqlParser::FROM - 128))
      | (1ULL << (fugue_sqlParser::FULL - 128))
      | (1ULL << (fugue_sqlParser::FUNCTION - 128))
      | (1ULL << (fugue_sqlParser::FUNCTIONS - 128))
      | (1ULL << (fugue_sqlParser::GLOBAL - 128))
      | (1ULL << (fugue_sqlParser::GRANT - 128))
      | (1ULL << (fugue_sqlParser::GROUP - 128))
      | (1ULL << (fugue_sqlParser::GROUPING - 128))
      | (1ULL << (fugue_sqlParser::HAVING - 128))
      | (1ULL << (fugue_sqlParser::HOUR - 128))
      | (1ULL << (fugue_sqlParser::IF - 128))
      | (1ULL << (fugue_sqlParser::IGNORE - 128))
      | (1ULL << (fugue_sqlParser::IMPORT - 128))
      | (1ULL << (fugue_sqlParser::IN - 128))
      | (1ULL << (fugue_sqlParser::INDEX - 128))
      | (1ULL << (fugue_sqlParser::INDEXES - 128))
      | (1ULL << (fugue_sqlParser::INNER - 128))
      | (1ULL << (fugue_sqlParser::INPATH - 128))
      | (1ULL << (fugue_sqlParser::INPUTFORMAT - 128))
      | (1ULL << (fugue_sqlParser::INSERT - 128))
      | (1ULL << (fugue_sqlParser::INTERSECT - 128))
      | (1ULL << (fugue_sqlParser::INTERVAL - 128))
      | (1ULL << (fugue_sqlParser::INTO - 128))
      | (1ULL << (fugue_sqlParser::IS - 128))
      | (1ULL << (fugue_sqlParser::ITEMS - 128))
      | (1ULL << (fugue_sqlParser::JOIN - 128))
      | (1ULL << (fugue_sqlParser::KEYS - 128))
      | (1ULL << (fugue_sqlParser::LAST - 128))
      | (1ULL << (fugue_sqlParser::LATERAL - 128))
      | (1ULL << (fugue_sqlParser::LAZY - 128))
      | (1ULL << (fugue_sqlParser::LEADING - 128))
      | (1ULL << (fugue_sqlParser::LEFT - 128))
      | (1ULL << (fugue_sqlParser::LIKE - 128))
      | (1ULL << (fugue_sqlParser::LIMIT - 128))
      | (1ULL << (fugue_sqlParser::LINES - 128))
      | (1ULL << (fugue_sqlParser::LIST - 128))
      | (1ULL << (fugue_sqlParser::LOAD - 128))
      | (1ULL << (fugue_sqlParser::LOCAL - 128))
      | (1ULL << (fugue_sqlParser::LOCATION - 128))
      | (1ULL << (fugue_sqlParser::LOCK - 128))
      | (1ULL << (fugue_sqlParser::LOCKS - 128))
      | (1ULL << (fugue_sqlParser::LOGICAL - 128))
      | (1ULL << (fugue_sqlParser::MACRO - 128))
      | (1ULL << (fugue_sqlParser::MAP - 128))
      | (1ULL << (fugue_sqlParser::MATCHED - 128))
      | (1ULL << (fugue_sqlParser::MERGE - 128))
      | (1ULL << (fugue_sqlParser::MINUTE - 128))
      | (1ULL << (fugue_sqlParser::MONTH - 128))
      | (1ULL << (fugue_sqlParser::MSCK - 128))
      | (1ULL << (fugue_sqlParser::NAMESPACE - 128))
      | (1ULL << (fugue_sqlParser::NAMESPACES - 128)))) != 0) || ((((_la - 192) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 192)) & ((1ULL << (fugue_sqlParser::NATURAL - 192))
      | (1ULL << (fugue_sqlParser::NO - 192))
      | (1ULL << (fugue_sqlParser::NOT - 192))
      | (1ULL << (fugue_sqlParser::THENULL - 192))
      | (1ULL << (fugue_sqlParser::THENULLS - 192))
      | (1ULL << (fugue_sqlParser::OF - 192))
      | (1ULL << (fugue_sqlParser::ON - 192))
      | (1ULL << (fugue_sqlParser::ONLY - 192))
      | (1ULL << (fugue_sqlParser::OPTION - 192))
      | (1ULL << (fugue_sqlParser::OPTIONS - 192))
      | (1ULL << (fugue_sqlParser::OR - 192))
      | (1ULL << (fugue_sqlParser::ORDER - 192))
      | (1ULL << (fugue_sqlParser::OUT - 192))
      | (1ULL << (fugue_sqlParser::OUTER - 192))
      | (1ULL << (fugue_sqlParser::OUTPUTFORMAT - 192))
      | (1ULL << (fugue_sqlParser::OVER - 192))
      | (1ULL << (fugue_sqlParser::OVERLAPS - 192))
      | (1ULL << (fugue_sqlParser::OVERLAY - 192))
      | (1ULL << (fugue_sqlParser::OVERWRITE - 192))
      | (1ULL << (fugue_sqlParser::PARTITION - 192))
      | (1ULL << (fugue_sqlParser::PARTITIONED - 192))
      | (1ULL << (fugue_sqlParser::PARTITIONS - 192))
      | (1ULL << (fugue_sqlParser::PERCENTLIT - 192))
      | (1ULL << (fugue_sqlParser::PIVOT - 192))
      | (1ULL << (fugue_sqlParser::PLACING - 192))
      | (1ULL << (fugue_sqlParser::POSITION - 192))
      | (1ULL << (fugue_sqlParser::PRECEDING - 192))
      | (1ULL << (fugue_sqlParser::PRIMARY - 192))
      | (1ULL << (fugue_sqlParser::PRINCIPALS - 192))
      | (1ULL << (fugue_sqlParser::PROPERTIES - 192))
      | (1ULL << (fugue_sqlParser::PURGE - 192))
      | (1ULL << (fugue_sqlParser::QUERY - 192))
      | (1ULL << (fugue_sqlParser::RANGE - 192))
      | (1ULL << (fugue_sqlParser::RECORDREADER - 192))
      | (1ULL << (fugue_sqlParser::RECORDWRITER - 192))
      | (1ULL << (fugue_sqlParser::RECOVER - 192))
      | (1ULL << (fugue_sqlParser::REDUCE - 192))
      | (1ULL << (fugue_sqlParser::REFERENCES - 192))
      | (1ULL << (fugue_sqlParser::REFRESH - 192))
      | (1ULL << (fugue_sqlParser::RENAME - 192))
      | (1ULL << (fugue_sqlParser::REPAIR - 192))
      | (1ULL << (fugue_sqlParser::REPLACE - 192))
      | (1ULL << (fugue_sqlParser::RESET - 192))
      | (1ULL << (fugue_sqlParser::RESTRICT - 192))
      | (1ULL << (fugue_sqlParser::REVOKE - 192))
      | (1ULL << (fugue_sqlParser::RIGHT - 192))
      | (1ULL << (fugue_sqlParser::RLIKE - 192))
      | (1ULL << (fugue_sqlParser::ROLE - 192))
      | (1ULL << (fugue_sqlParser::ROLES - 192))
      | (1ULL << (fugue_sqlParser::ROLLBACK - 192))
      | (1ULL << (fugue_sqlParser::ROLLUP - 192))
      | (1ULL << (fugue_sqlParser::ROW - 192))
      | (1ULL << (fugue_sqlParser::ROWS - 192))
      | (1ULL << (fugue_sqlParser::SCHEMA - 192))
      | (1ULL << (fugue_sqlParser::SECOND - 192))
      | (1ULL << (fugue_sqlParser::SELECT - 192))
      | (1ULL << (fugue_sqlParser::SEMI - 192))
      | (1ULL << (fugue_sqlParser::SEPARATED - 192))
      | (1ULL << (fugue_sqlParser::SERDE - 192))
      | (1ULL << (fugue_sqlParser::SERDEPROPERTIES - 192))
      | (1ULL << (fugue_sqlParser::SESSION_USER - 192))
      | (1ULL << (fugue_sqlParser::SET - 192))
      | (1ULL << (fugue_sqlParser::SETMINUS - 192))
      | (1ULL << (fugue_sqlParser::SETS - 192)))) != 0) || ((((_la - 256) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 256)) & ((1ULL << (fugue_sqlParser::SHOW - 256))
      | (1ULL << (fugue_sqlParser::SKEWED - 256))
      | (1ULL << (fugue_sqlParser::SOME - 256))
      | (1ULL << (fugue_sqlParser::SORT - 256))
      | (1ULL << (fugue_sqlParser::SORTED - 256))
      | (1ULL << (fugue_sqlParser::START - 256))
      | (1ULL << (fugue_sqlParser::STATISTICS - 256))
      | (1ULL << (fugue_sqlParser::STORED - 256))
      | (1ULL << (fugue_sqlParser::STRATIFY - 256))
      | (1ULL << (fugue_sqlParser::STRUCT - 256))
      | (1ULL << (fugue_sqlParser::SUBSTR - 256))
      | (1ULL << (fugue_sqlParser::SUBSTRING - 256))
      | (1ULL << (fugue_sqlParser::TABLE - 256))
      | (1ULL << (fugue_sqlParser::TABLES - 256))
      | (1ULL << (fugue_sqlParser::TABLESAMPLE - 256))
      | (1ULL << (fugue_sqlParser::TBLPROPERTIES - 256))
      | (1ULL << (fugue_sqlParser::TEMPORARY - 256))
      | (1ULL << (fugue_sqlParser::TERMINATED - 256))
      | (1ULL << (fugue_sqlParser::THEN - 256))
      | (1ULL << (fugue_sqlParser::TO - 256))
      | (1ULL << (fugue_sqlParser::TOUCH - 256))
      | (1ULL << (fugue_sqlParser::TRAILING - 256))
      | (1ULL << (fugue_sqlParser::TRANSACTION - 256))
      | (1ULL << (fugue_sqlParser::TRANSACTIONS - 256))
      | (1ULL << (fugue_sqlParser::TRANSFORM - 256))
      | (1ULL << (fugue_sqlParser::TRIM - 256))
      | (1ULL << (fugue_sqlParser::TRUE - 256))
      | (1ULL << (fugue_sqlParser::TRUNCATE - 256))
      | (1ULL << (fugue_sqlParser::TYPE - 256))
      | (1ULL << (fugue_sqlParser::UNARCHIVE - 256))
      | (1ULL << (fugue_sqlParser::UNBOUNDED - 256))
      | (1ULL << (fugue_sqlParser::UNCACHE - 256))
      | (1ULL << (fugue_sqlParser::UNION - 256))
      | (1ULL << (fugue_sqlParser::UNIQUE - 256))
      | (1ULL << (fugue_sqlParser::UNKNOWN - 256))
      | (1ULL << (fugue_sqlParser::UNLOCK - 256))
      | (1ULL << (fugue_sqlParser::UNSET - 256))
      | (1ULL << (fugue_sqlParser::UPDATE - 256))
      | (1ULL << (fugue_sqlParser::USE - 256))
      | (1ULL << (fugue_sqlParser::USER - 256))
      | (1ULL << (fugue_sqlParser::USING - 256))
      | (1ULL << (fugue_sqlParser::VALUES - 256))
      | (1ULL << (fugue_sqlParser::VIEW - 256))
      | (1ULL << (fugue_sqlParser::VIEWS - 256))
      | (1ULL << (fugue_sqlParser::WHEN - 256))
      | (1ULL << (fugue_sqlParser::WHERE - 256))
      | (1ULL << (fugue_sqlParser::WINDOW - 256))
      | (1ULL << (fugue_sqlParser::WITH - 256))
      | (1ULL << (fugue_sqlParser::YEAR - 256))
      | (1ULL << (fugue_sqlParser::PLUS - 256))
      | (1ULL << (fugue_sqlParser::MINUS - 256))
      | (1ULL << (fugue_sqlParser::ASTERISK - 256))
      | (1ULL << (fugue_sqlParser::DIV - 256)))) != 0) || ((((_la - 320) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 320)) & ((1ULL << (fugue_sqlParser::TILDE - 320))
      | (1ULL << (fugue_sqlParser::STRING - 320))
      | (1ULL << (fugue_sqlParser::BIGINT_LITERAL - 320))
      | (1ULL << (fugue_sqlParser::SMALLINT_LITERAL - 320))
      | (1ULL << (fugue_sqlParser::TINYINT_LITERAL - 320))
      | (1ULL << (fugue_sqlParser::INTEGER_VALUE - 320))
      | (1ULL << (fugue_sqlParser::EXPONENT_VALUE - 320))
      | (1ULL << (fugue_sqlParser::DECIMAL_VALUE - 320))
      | (1ULL << (fugue_sqlParser::DOUBLE_LITERAL - 320))
      | (1ULL << (fugue_sqlParser::BIGDECIMAL_LITERAL - 320))
      | (1ULL << (fugue_sqlParser::IDENTIFIER - 320))
      | (1ULL << (fugue_sqlParser::BACKQUOTED_IDENTIFIER - 320)))) != 0)) {
      setState(2870);
      sampleMethod();
    }
    setState(2873);
    match(fugue_sqlParser::T__3);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SampleMethodContext ------------------------------------------------------------------

fugue_sqlParser::SampleMethodContext::SampleMethodContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t fugue_sqlParser::SampleMethodContext::getRuleIndex() const {
  return fugue_sqlParser::RuleSampleMethod;
}

void fugue_sqlParser::SampleMethodContext::copyFrom(SampleMethodContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- SampleByRowsContext ------------------------------------------------------------------

fugue_sqlParser::ExpressionContext* fugue_sqlParser::SampleByRowsContext::expression() {
  return getRuleContext<fugue_sqlParser::ExpressionContext>(0);
}

tree::TerminalNode* fugue_sqlParser::SampleByRowsContext::ROWS() {
  return getToken(fugue_sqlParser::ROWS, 0);
}

fugue_sqlParser::SampleByRowsContext::SampleByRowsContext(SampleMethodContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::SampleByRowsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitSampleByRows(this);
  else
    return visitor->visitChildren(this);
}
//----------------- SampleByPercentileContext ------------------------------------------------------------------

tree::TerminalNode* fugue_sqlParser::SampleByPercentileContext::PERCENTLIT() {
  return getToken(fugue_sqlParser::PERCENTLIT, 0);
}

tree::TerminalNode* fugue_sqlParser::SampleByPercentileContext::INTEGER_VALUE() {
  return getToken(fugue_sqlParser::INTEGER_VALUE, 0);
}

tree::TerminalNode* fugue_sqlParser::SampleByPercentileContext::DECIMAL_VALUE() {
  return getToken(fugue_sqlParser::DECIMAL_VALUE, 0);
}

tree::TerminalNode* fugue_sqlParser::SampleByPercentileContext::MINUS() {
  return getToken(fugue_sqlParser::MINUS, 0);
}

fugue_sqlParser::SampleByPercentileContext::SampleByPercentileContext(SampleMethodContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::SampleByPercentileContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitSampleByPercentile(this);
  else
    return visitor->visitChildren(this);
}
//----------------- SampleByBucketContext ------------------------------------------------------------------

tree::TerminalNode* fugue_sqlParser::SampleByBucketContext::OUT() {
  return getToken(fugue_sqlParser::OUT, 0);
}

tree::TerminalNode* fugue_sqlParser::SampleByBucketContext::OF() {
  return getToken(fugue_sqlParser::OF, 0);
}

tree::TerminalNode* fugue_sqlParser::SampleByBucketContext::BUCKET() {
  return getToken(fugue_sqlParser::BUCKET, 0);
}

std::vector<tree::TerminalNode *> fugue_sqlParser::SampleByBucketContext::INTEGER_VALUE() {
  return getTokens(fugue_sqlParser::INTEGER_VALUE);
}

tree::TerminalNode* fugue_sqlParser::SampleByBucketContext::INTEGER_VALUE(size_t i) {
  return getToken(fugue_sqlParser::INTEGER_VALUE, i);
}

tree::TerminalNode* fugue_sqlParser::SampleByBucketContext::ON() {
  return getToken(fugue_sqlParser::ON, 0);
}

fugue_sqlParser::IdentifierContext* fugue_sqlParser::SampleByBucketContext::identifier() {
  return getRuleContext<fugue_sqlParser::IdentifierContext>(0);
}

fugue_sqlParser::QualifiedNameContext* fugue_sqlParser::SampleByBucketContext::qualifiedName() {
  return getRuleContext<fugue_sqlParser::QualifiedNameContext>(0);
}

fugue_sqlParser::SampleByBucketContext::SampleByBucketContext(SampleMethodContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::SampleByBucketContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitSampleByBucket(this);
  else
    return visitor->visitChildren(this);
}
//----------------- SampleByBytesContext ------------------------------------------------------------------

fugue_sqlParser::ExpressionContext* fugue_sqlParser::SampleByBytesContext::expression() {
  return getRuleContext<fugue_sqlParser::ExpressionContext>(0);
}

fugue_sqlParser::SampleByBytesContext::SampleByBytesContext(SampleMethodContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::SampleByBytesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitSampleByBytes(this);
  else
    return visitor->visitChildren(this);
}
fugue_sqlParser::SampleMethodContext* fugue_sqlParser::sampleMethod() {
  SampleMethodContext *_localctx = _tracker.createInstance<SampleMethodContext>(_ctx, getState());
  enterRule(_localctx, 296, fugue_sqlParser::RuleSampleMethod);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2899);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 384, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<fugue_sqlParser::SampleByPercentileContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(2876);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::MINUS) {
        setState(2875);
        antlrcpp::downCast<SampleByPercentileContext *>(_localctx)->negativeSign = match(fugue_sqlParser::MINUS);
      }
      setState(2878);
      antlrcpp::downCast<SampleByPercentileContext *>(_localctx)->percentage = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == fugue_sqlParser::INTEGER_VALUE

      || _la == fugue_sqlParser::DECIMAL_VALUE)) {
        antlrcpp::downCast<SampleByPercentileContext *>(_localctx)->percentage = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(2879);
      match(fugue_sqlParser::PERCENTLIT);
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<fugue_sqlParser::SampleByRowsContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(2880);
      expression();
      setState(2881);
      match(fugue_sqlParser::ROWS);
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<fugue_sqlParser::SampleByBucketContext>(_localctx);
      enterOuterAlt(_localctx, 3);
      setState(2883);
      antlrcpp::downCast<SampleByBucketContext *>(_localctx)->sampleType = match(fugue_sqlParser::BUCKET);
      setState(2884);
      antlrcpp::downCast<SampleByBucketContext *>(_localctx)->numerator = match(fugue_sqlParser::INTEGER_VALUE);
      setState(2885);
      match(fugue_sqlParser::OUT);
      setState(2886);
      match(fugue_sqlParser::OF);
      setState(2887);
      antlrcpp::downCast<SampleByBucketContext *>(_localctx)->denominator = match(fugue_sqlParser::INTEGER_VALUE);
      setState(2896);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::ON) {
        setState(2888);
        match(fugue_sqlParser::ON);
        setState(2894);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 382, _ctx)) {
        case 1: {
          setState(2889);
          identifier();
          break;
        }

        case 2: {
          setState(2890);
          qualifiedName();
          setState(2891);
          match(fugue_sqlParser::T__2);
          setState(2892);
          match(fugue_sqlParser::T__3);
          break;
        }

        default:
          break;
        }
      }
      break;
    }

    case 4: {
      _localctx = _tracker.createInstance<fugue_sqlParser::SampleByBytesContext>(_localctx);
      enterOuterAlt(_localctx, 4);
      setState(2898);
      antlrcpp::downCast<SampleByBytesContext *>(_localctx)->bytes = expression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IdentifierListContext ------------------------------------------------------------------

fugue_sqlParser::IdentifierListContext::IdentifierListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

fugue_sqlParser::IdentifierSeqContext* fugue_sqlParser::IdentifierListContext::identifierSeq() {
  return getRuleContext<fugue_sqlParser::IdentifierSeqContext>(0);
}


size_t fugue_sqlParser::IdentifierListContext::getRuleIndex() const {
  return fugue_sqlParser::RuleIdentifierList;
}


antlrcpp::Any fugue_sqlParser::IdentifierListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitIdentifierList(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::IdentifierListContext* fugue_sqlParser::identifierList() {
  IdentifierListContext *_localctx = _tracker.createInstance<IdentifierListContext>(_ctx, getState());
  enterRule(_localctx, 298, fugue_sqlParser::RuleIdentifierList);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2901);
    match(fugue_sqlParser::T__2);
    setState(2902);
    identifierSeq();
    setState(2903);
    match(fugue_sqlParser::T__3);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IdentifierSeqContext ------------------------------------------------------------------

fugue_sqlParser::IdentifierSeqContext::IdentifierSeqContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<fugue_sqlParser::ErrorCapturingIdentifierContext *> fugue_sqlParser::IdentifierSeqContext::errorCapturingIdentifier() {
  return getRuleContexts<fugue_sqlParser::ErrorCapturingIdentifierContext>();
}

fugue_sqlParser::ErrorCapturingIdentifierContext* fugue_sqlParser::IdentifierSeqContext::errorCapturingIdentifier(size_t i) {
  return getRuleContext<fugue_sqlParser::ErrorCapturingIdentifierContext>(i);
}


size_t fugue_sqlParser::IdentifierSeqContext::getRuleIndex() const {
  return fugue_sqlParser::RuleIdentifierSeq;
}


antlrcpp::Any fugue_sqlParser::IdentifierSeqContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitIdentifierSeq(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::IdentifierSeqContext* fugue_sqlParser::identifierSeq() {
  IdentifierSeqContext *_localctx = _tracker.createInstance<IdentifierSeqContext>(_ctx, getState());
  enterRule(_localctx, 300, fugue_sqlParser::RuleIdentifierSeq);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2905);
    antlrcpp::downCast<IdentifierSeqContext *>(_localctx)->errorCapturingIdentifierContext = errorCapturingIdentifier();
    antlrcpp::downCast<IdentifierSeqContext *>(_localctx)->ident.push_back(antlrcpp::downCast<IdentifierSeqContext *>(_localctx)->errorCapturingIdentifierContext);
    setState(2910);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 385, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2906);
        match(fugue_sqlParser::T__0);
        setState(2907);
        antlrcpp::downCast<IdentifierSeqContext *>(_localctx)->errorCapturingIdentifierContext = errorCapturingIdentifier();
        antlrcpp::downCast<IdentifierSeqContext *>(_localctx)->ident.push_back(antlrcpp::downCast<IdentifierSeqContext *>(_localctx)->errorCapturingIdentifierContext); 
      }
      setState(2912);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 385, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OrderedIdentifierListContext ------------------------------------------------------------------

fugue_sqlParser::OrderedIdentifierListContext::OrderedIdentifierListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<fugue_sqlParser::OrderedIdentifierContext *> fugue_sqlParser::OrderedIdentifierListContext::orderedIdentifier() {
  return getRuleContexts<fugue_sqlParser::OrderedIdentifierContext>();
}

fugue_sqlParser::OrderedIdentifierContext* fugue_sqlParser::OrderedIdentifierListContext::orderedIdentifier(size_t i) {
  return getRuleContext<fugue_sqlParser::OrderedIdentifierContext>(i);
}


size_t fugue_sqlParser::OrderedIdentifierListContext::getRuleIndex() const {
  return fugue_sqlParser::RuleOrderedIdentifierList;
}


antlrcpp::Any fugue_sqlParser::OrderedIdentifierListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitOrderedIdentifierList(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::OrderedIdentifierListContext* fugue_sqlParser::orderedIdentifierList() {
  OrderedIdentifierListContext *_localctx = _tracker.createInstance<OrderedIdentifierListContext>(_ctx, getState());
  enterRule(_localctx, 302, fugue_sqlParser::RuleOrderedIdentifierList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2913);
    match(fugue_sqlParser::T__2);
    setState(2914);
    orderedIdentifier();
    setState(2919);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == fugue_sqlParser::T__0) {
      setState(2915);
      match(fugue_sqlParser::T__0);
      setState(2916);
      orderedIdentifier();
      setState(2921);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2922);
    match(fugue_sqlParser::T__3);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OrderedIdentifierContext ------------------------------------------------------------------

fugue_sqlParser::OrderedIdentifierContext::OrderedIdentifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

fugue_sqlParser::ErrorCapturingIdentifierContext* fugue_sqlParser::OrderedIdentifierContext::errorCapturingIdentifier() {
  return getRuleContext<fugue_sqlParser::ErrorCapturingIdentifierContext>(0);
}

tree::TerminalNode* fugue_sqlParser::OrderedIdentifierContext::ASC() {
  return getToken(fugue_sqlParser::ASC, 0);
}

tree::TerminalNode* fugue_sqlParser::OrderedIdentifierContext::DESC() {
  return getToken(fugue_sqlParser::DESC, 0);
}


size_t fugue_sqlParser::OrderedIdentifierContext::getRuleIndex() const {
  return fugue_sqlParser::RuleOrderedIdentifier;
}


antlrcpp::Any fugue_sqlParser::OrderedIdentifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitOrderedIdentifier(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::OrderedIdentifierContext* fugue_sqlParser::orderedIdentifier() {
  OrderedIdentifierContext *_localctx = _tracker.createInstance<OrderedIdentifierContext>(_ctx, getState());
  enterRule(_localctx, 304, fugue_sqlParser::RuleOrderedIdentifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2924);
    antlrcpp::downCast<OrderedIdentifierContext *>(_localctx)->ident = errorCapturingIdentifier();
    setState(2926);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == fugue_sqlParser::ASC

    || _la == fugue_sqlParser::DESC) {
      setState(2925);
      antlrcpp::downCast<OrderedIdentifierContext *>(_localctx)->ordering = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == fugue_sqlParser::ASC

      || _la == fugue_sqlParser::DESC)) {
        antlrcpp::downCast<OrderedIdentifierContext *>(_localctx)->ordering = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IdentifierCommentListContext ------------------------------------------------------------------

fugue_sqlParser::IdentifierCommentListContext::IdentifierCommentListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<fugue_sqlParser::IdentifierCommentContext *> fugue_sqlParser::IdentifierCommentListContext::identifierComment() {
  return getRuleContexts<fugue_sqlParser::IdentifierCommentContext>();
}

fugue_sqlParser::IdentifierCommentContext* fugue_sqlParser::IdentifierCommentListContext::identifierComment(size_t i) {
  return getRuleContext<fugue_sqlParser::IdentifierCommentContext>(i);
}


size_t fugue_sqlParser::IdentifierCommentListContext::getRuleIndex() const {
  return fugue_sqlParser::RuleIdentifierCommentList;
}


antlrcpp::Any fugue_sqlParser::IdentifierCommentListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitIdentifierCommentList(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::IdentifierCommentListContext* fugue_sqlParser::identifierCommentList() {
  IdentifierCommentListContext *_localctx = _tracker.createInstance<IdentifierCommentListContext>(_ctx, getState());
  enterRule(_localctx, 306, fugue_sqlParser::RuleIdentifierCommentList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2928);
    match(fugue_sqlParser::T__2);
    setState(2929);
    identifierComment();
    setState(2934);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == fugue_sqlParser::T__0) {
      setState(2930);
      match(fugue_sqlParser::T__0);
      setState(2931);
      identifierComment();
      setState(2936);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2937);
    match(fugue_sqlParser::T__3);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IdentifierCommentContext ------------------------------------------------------------------

fugue_sqlParser::IdentifierCommentContext::IdentifierCommentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

fugue_sqlParser::IdentifierContext* fugue_sqlParser::IdentifierCommentContext::identifier() {
  return getRuleContext<fugue_sqlParser::IdentifierContext>(0);
}

fugue_sqlParser::CommentSpecContext* fugue_sqlParser::IdentifierCommentContext::commentSpec() {
  return getRuleContext<fugue_sqlParser::CommentSpecContext>(0);
}


size_t fugue_sqlParser::IdentifierCommentContext::getRuleIndex() const {
  return fugue_sqlParser::RuleIdentifierComment;
}


antlrcpp::Any fugue_sqlParser::IdentifierCommentContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitIdentifierComment(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::IdentifierCommentContext* fugue_sqlParser::identifierComment() {
  IdentifierCommentContext *_localctx = _tracker.createInstance<IdentifierCommentContext>(_ctx, getState());
  enterRule(_localctx, 308, fugue_sqlParser::RuleIdentifierComment);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2939);
    identifier();
    setState(2941);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == fugue_sqlParser::COMMENT) {
      setState(2940);
      commentSpec();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RelationPrimaryContext ------------------------------------------------------------------

fugue_sqlParser::RelationPrimaryContext::RelationPrimaryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t fugue_sqlParser::RelationPrimaryContext::getRuleIndex() const {
  return fugue_sqlParser::RuleRelationPrimary;
}

void fugue_sqlParser::RelationPrimaryContext::copyFrom(RelationPrimaryContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- TableValuedFunctionContext ------------------------------------------------------------------

fugue_sqlParser::FunctionTableContext* fugue_sqlParser::TableValuedFunctionContext::functionTable() {
  return getRuleContext<fugue_sqlParser::FunctionTableContext>(0);
}

fugue_sqlParser::TableValuedFunctionContext::TableValuedFunctionContext(RelationPrimaryContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::TableValuedFunctionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitTableValuedFunction(this);
  else
    return visitor->visitChildren(this);
}
//----------------- InlineTableDefault2Context ------------------------------------------------------------------

fugue_sqlParser::InlineTableContext* fugue_sqlParser::InlineTableDefault2Context::inlineTable() {
  return getRuleContext<fugue_sqlParser::InlineTableContext>(0);
}

fugue_sqlParser::InlineTableDefault2Context::InlineTableDefault2Context(RelationPrimaryContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::InlineTableDefault2Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitInlineTableDefault2(this);
  else
    return visitor->visitChildren(this);
}
//----------------- AliasedRelationContext ------------------------------------------------------------------

fugue_sqlParser::RelationContext* fugue_sqlParser::AliasedRelationContext::relation() {
  return getRuleContext<fugue_sqlParser::RelationContext>(0);
}

fugue_sqlParser::TableAliasContext* fugue_sqlParser::AliasedRelationContext::tableAlias() {
  return getRuleContext<fugue_sqlParser::TableAliasContext>(0);
}

fugue_sqlParser::SampleContext* fugue_sqlParser::AliasedRelationContext::sample() {
  return getRuleContext<fugue_sqlParser::SampleContext>(0);
}

fugue_sqlParser::AliasedRelationContext::AliasedRelationContext(RelationPrimaryContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::AliasedRelationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitAliasedRelation(this);
  else
    return visitor->visitChildren(this);
}
//----------------- AliasedQueryContext ------------------------------------------------------------------

fugue_sqlParser::QueryContext* fugue_sqlParser::AliasedQueryContext::query() {
  return getRuleContext<fugue_sqlParser::QueryContext>(0);
}

fugue_sqlParser::TableAliasContext* fugue_sqlParser::AliasedQueryContext::tableAlias() {
  return getRuleContext<fugue_sqlParser::TableAliasContext>(0);
}

fugue_sqlParser::SampleContext* fugue_sqlParser::AliasedQueryContext::sample() {
  return getRuleContext<fugue_sqlParser::SampleContext>(0);
}

fugue_sqlParser::AliasedQueryContext::AliasedQueryContext(RelationPrimaryContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::AliasedQueryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitAliasedQuery(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TableNameContext ------------------------------------------------------------------

fugue_sqlParser::MultipartIdentifierContext* fugue_sqlParser::TableNameContext::multipartIdentifier() {
  return getRuleContext<fugue_sqlParser::MultipartIdentifierContext>(0);
}

fugue_sqlParser::TableAliasContext* fugue_sqlParser::TableNameContext::tableAlias() {
  return getRuleContext<fugue_sqlParser::TableAliasContext>(0);
}

fugue_sqlParser::FugueDataFrameMemberContext* fugue_sqlParser::TableNameContext::fugueDataFrameMember() {
  return getRuleContext<fugue_sqlParser::FugueDataFrameMemberContext>(0);
}

fugue_sqlParser::SampleContext* fugue_sqlParser::TableNameContext::sample() {
  return getRuleContext<fugue_sqlParser::SampleContext>(0);
}

fugue_sqlParser::TableNameContext::TableNameContext(RelationPrimaryContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::TableNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitTableName(this);
  else
    return visitor->visitChildren(this);
}
fugue_sqlParser::RelationPrimaryContext* fugue_sqlParser::relationPrimary() {
  RelationPrimaryContext *_localctx = _tracker.createInstance<RelationPrimaryContext>(_ctx, getState());
  enterRule(_localctx, 310, fugue_sqlParser::RuleRelationPrimary);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2970);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 394, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<fugue_sqlParser::TableNameContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(2943);
      multipartIdentifier();
      setState(2945);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 390, _ctx)) {
      case 1: {
        setState(2944);
        fugueDataFrameMember();
        break;
      }

      default:
        break;
      }
      setState(2948);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 391, _ctx)) {
      case 1: {
        setState(2947);
        sample();
        break;
      }

      default:
        break;
      }
      setState(2950);
      tableAlias();
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<fugue_sqlParser::AliasedQueryContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(2952);
      match(fugue_sqlParser::T__2);
      setState(2953);
      query();
      setState(2954);
      match(fugue_sqlParser::T__3);
      setState(2956);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 392, _ctx)) {
      case 1: {
        setState(2955);
        sample();
        break;
      }

      default:
        break;
      }
      setState(2958);
      tableAlias();
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<fugue_sqlParser::AliasedRelationContext>(_localctx);
      enterOuterAlt(_localctx, 3);
      setState(2960);
      match(fugue_sqlParser::T__2);
      setState(2961);
      relation();
      setState(2962);
      match(fugue_sqlParser::T__3);
      setState(2964);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 393, _ctx)) {
      case 1: {
        setState(2963);
        sample();
        break;
      }

      default:
        break;
      }
      setState(2966);
      tableAlias();
      break;
    }

    case 4: {
      _localctx = _tracker.createInstance<fugue_sqlParser::InlineTableDefault2Context>(_localctx);
      enterOuterAlt(_localctx, 4);
      setState(2968);
      inlineTable();
      break;
    }

    case 5: {
      _localctx = _tracker.createInstance<fugue_sqlParser::TableValuedFunctionContext>(_localctx);
      enterOuterAlt(_localctx, 5);
      setState(2969);
      functionTable();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InlineTableContext ------------------------------------------------------------------

fugue_sqlParser::InlineTableContext::InlineTableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* fugue_sqlParser::InlineTableContext::VALUES() {
  return getToken(fugue_sqlParser::VALUES, 0);
}

std::vector<fugue_sqlParser::ExpressionContext *> fugue_sqlParser::InlineTableContext::expression() {
  return getRuleContexts<fugue_sqlParser::ExpressionContext>();
}

fugue_sqlParser::ExpressionContext* fugue_sqlParser::InlineTableContext::expression(size_t i) {
  return getRuleContext<fugue_sqlParser::ExpressionContext>(i);
}

fugue_sqlParser::TableAliasContext* fugue_sqlParser::InlineTableContext::tableAlias() {
  return getRuleContext<fugue_sqlParser::TableAliasContext>(0);
}


size_t fugue_sqlParser::InlineTableContext::getRuleIndex() const {
  return fugue_sqlParser::RuleInlineTable;
}


antlrcpp::Any fugue_sqlParser::InlineTableContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitInlineTable(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::InlineTableContext* fugue_sqlParser::inlineTable() {
  InlineTableContext *_localctx = _tracker.createInstance<InlineTableContext>(_ctx, getState());
  enterRule(_localctx, 312, fugue_sqlParser::RuleInlineTable);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2972);
    match(fugue_sqlParser::VALUES);
    setState(2973);
    expression();
    setState(2978);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 395, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2974);
        match(fugue_sqlParser::T__0);
        setState(2975);
        expression(); 
      }
      setState(2980);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 395, _ctx);
    }
    setState(2981);
    tableAlias();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FunctionTableContext ------------------------------------------------------------------

fugue_sqlParser::FunctionTableContext::FunctionTableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

fugue_sqlParser::TableAliasContext* fugue_sqlParser::FunctionTableContext::tableAlias() {
  return getRuleContext<fugue_sqlParser::TableAliasContext>(0);
}

fugue_sqlParser::ErrorCapturingIdentifierContext* fugue_sqlParser::FunctionTableContext::errorCapturingIdentifier() {
  return getRuleContext<fugue_sqlParser::ErrorCapturingIdentifierContext>(0);
}

std::vector<fugue_sqlParser::ExpressionContext *> fugue_sqlParser::FunctionTableContext::expression() {
  return getRuleContexts<fugue_sqlParser::ExpressionContext>();
}

fugue_sqlParser::ExpressionContext* fugue_sqlParser::FunctionTableContext::expression(size_t i) {
  return getRuleContext<fugue_sqlParser::ExpressionContext>(i);
}


size_t fugue_sqlParser::FunctionTableContext::getRuleIndex() const {
  return fugue_sqlParser::RuleFunctionTable;
}


antlrcpp::Any fugue_sqlParser::FunctionTableContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitFunctionTable(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::FunctionTableContext* fugue_sqlParser::functionTable() {
  FunctionTableContext *_localctx = _tracker.createInstance<FunctionTableContext>(_ctx, getState());
  enterRule(_localctx, 314, fugue_sqlParser::RuleFunctionTable);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2983);
    antlrcpp::downCast<FunctionTableContext *>(_localctx)->funcName = errorCapturingIdentifier();
    setState(2984);
    match(fugue_sqlParser::T__2);
    setState(2993);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << fugue_sqlParser::T__2)
      | (1ULL << fugue_sqlParser::ADD)
      | (1ULL << fugue_sqlParser::AFTER)
      | (1ULL << fugue_sqlParser::ALL)
      | (1ULL << fugue_sqlParser::ALTER)
      | (1ULL << fugue_sqlParser::ANALYZE)
      | (1ULL << fugue_sqlParser::AND)
      | (1ULL << fugue_sqlParser::ANTI)
      | (1ULL << fugue_sqlParser::ANY)
      | (1ULL << fugue_sqlParser::ARCHIVE)
      | (1ULL << fugue_sqlParser::ARRAY)
      | (1ULL << fugue_sqlParser::AS))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & ((1ULL << (fugue_sqlParser::ASC - 64))
      | (1ULL << (fugue_sqlParser::AT - 64))
      | (1ULL << (fugue_sqlParser::AUTHORIZATION - 64))
      | (1ULL << (fugue_sqlParser::BETWEEN - 64))
      | (1ULL << (fugue_sqlParser::BOTH - 64))
      | (1ULL << (fugue_sqlParser::BUCKET - 64))
      | (1ULL << (fugue_sqlParser::BUCKETS - 64))
      | (1ULL << (fugue_sqlParser::BY - 64))
      | (1ULL << (fugue_sqlParser::CACHE - 64))
      | (1ULL << (fugue_sqlParser::CASCADE - 64))
      | (1ULL << (fugue_sqlParser::CASE - 64))
      | (1ULL << (fugue_sqlParser::CAST - 64))
      | (1ULL << (fugue_sqlParser::CHANGE - 64))
      | (1ULL << (fugue_sqlParser::CHECK - 64))
      | (1ULL << (fugue_sqlParser::CLEAR - 64))
      | (1ULL << (fugue_sqlParser::CLUSTER - 64))
      | (1ULL << (fugue_sqlParser::CLUSTERED - 64))
      | (1ULL << (fugue_sqlParser::CODEGEN - 64))
      | (1ULL << (fugue_sqlParser::COLLATE - 64))
      | (1ULL << (fugue_sqlParser::COLLECTION - 64))
      | (1ULL << (fugue_sqlParser::COLUMN - 64))
      | (1ULL << (fugue_sqlParser::COLUMNS - 64))
      | (1ULL << (fugue_sqlParser::COMMENT - 64))
      | (1ULL << (fugue_sqlParser::COMMIT - 64))
      | (1ULL << (fugue_sqlParser::COMPACT - 64))
      | (1ULL << (fugue_sqlParser::COMPACTIONS - 64))
      | (1ULL << (fugue_sqlParser::COMPUTE - 64))
      | (1ULL << (fugue_sqlParser::CONCATENATE - 64))
      | (1ULL << (fugue_sqlParser::CONSTRAINT - 64))
      | (1ULL << (fugue_sqlParser::COST - 64))
      | (1ULL << (fugue_sqlParser::CREATE - 64))
      | (1ULL << (fugue_sqlParser::CROSS - 64))
      | (1ULL << (fugue_sqlParser::CUBE - 64))
      | (1ULL << (fugue_sqlParser::CURRENT - 64))
      | (1ULL << (fugue_sqlParser::CURRENT_DATE - 64))
      | (1ULL << (fugue_sqlParser::CURRENT_TIME - 64))
      | (1ULL << (fugue_sqlParser::CURRENT_TIMESTAMP - 64))
      | (1ULL << (fugue_sqlParser::CURRENT_USER - 64))
      | (1ULL << (fugue_sqlParser::DATA - 64))
      | (1ULL << (fugue_sqlParser::DATABASE - 64))
      | (1ULL << (fugue_sqlParser::DATABASES - 64))
      | (1ULL << (fugue_sqlParser::DAY - 64))
      | (1ULL << (fugue_sqlParser::DBPROPERTIES - 64))
      | (1ULL << (fugue_sqlParser::DEFINED - 64))
      | (1ULL << (fugue_sqlParser::DELETE - 64))
      | (1ULL << (fugue_sqlParser::DELIMITED - 64))
      | (1ULL << (fugue_sqlParser::DESC - 64))
      | (1ULL << (fugue_sqlParser::DESCRIBE - 64))
      | (1ULL << (fugue_sqlParser::DFS - 64))
      | (1ULL << (fugue_sqlParser::DIRECTORIES - 64))
      | (1ULL << (fugue_sqlParser::DIRECTORY - 64))
      | (1ULL << (fugue_sqlParser::DISTINCT - 64))
      | (1ULL << (fugue_sqlParser::DISTRIBUTE - 64))
      | (1ULL << (fugue_sqlParser::DROP - 64))
      | (1ULL << (fugue_sqlParser::ELSE - 64))
      | (1ULL << (fugue_sqlParser::END - 64))
      | (1ULL << (fugue_sqlParser::ESCAPE - 64))
      | (1ULL << (fugue_sqlParser::ESCAPED - 64))
      | (1ULL << (fugue_sqlParser::EXCEPT - 64))
      | (1ULL << (fugue_sqlParser::EXCHANGE - 64))
      | (1ULL << (fugue_sqlParser::EXISTS - 64))
      | (1ULL << (fugue_sqlParser::EXPLAIN - 64))
      | (1ULL << (fugue_sqlParser::EXPORT - 64))
      | (1ULL << (fugue_sqlParser::EXTENDED - 64)))) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 128)) & ((1ULL << (fugue_sqlParser::EXTERNAL - 128))
      | (1ULL << (fugue_sqlParser::EXTRACT - 128))
      | (1ULL << (fugue_sqlParser::FALSE - 128))
      | (1ULL << (fugue_sqlParser::FETCH - 128))
      | (1ULL << (fugue_sqlParser::FIELDS - 128))
      | (1ULL << (fugue_sqlParser::FILTER - 128))
      | (1ULL << (fugue_sqlParser::FILEFORMAT - 128))
      | (1ULL << (fugue_sqlParser::FIRST - 128))
      | (1ULL << (fugue_sqlParser::FOLLOWING - 128))
      | (1ULL << (fugue_sqlParser::FOR - 128))
      | (1ULL << (fugue_sqlParser::FOREIGN - 128))
      | (1ULL << (fugue_sqlParser::FORMAT - 128))
      | (1ULL << (fugue_sqlParser::FORMATTED - 128))
      | (1ULL << (fugue_sqlParser::FROM - 128))
      | (1ULL << (fugue_sqlParser::FULL - 128))
      | (1ULL << (fugue_sqlParser::FUNCTION - 128))
      | (1ULL << (fugue_sqlParser::FUNCTIONS - 128))
      | (1ULL << (fugue_sqlParser::GLOBAL - 128))
      | (1ULL << (fugue_sqlParser::GRANT - 128))
      | (1ULL << (fugue_sqlParser::GROUP - 128))
      | (1ULL << (fugue_sqlParser::GROUPING - 128))
      | (1ULL << (fugue_sqlParser::HAVING - 128))
      | (1ULL << (fugue_sqlParser::HOUR - 128))
      | (1ULL << (fugue_sqlParser::IF - 128))
      | (1ULL << (fugue_sqlParser::IGNORE - 128))
      | (1ULL << (fugue_sqlParser::IMPORT - 128))
      | (1ULL << (fugue_sqlParser::IN - 128))
      | (1ULL << (fugue_sqlParser::INDEX - 128))
      | (1ULL << (fugue_sqlParser::INDEXES - 128))
      | (1ULL << (fugue_sqlParser::INNER - 128))
      | (1ULL << (fugue_sqlParser::INPATH - 128))
      | (1ULL << (fugue_sqlParser::INPUTFORMAT - 128))
      | (1ULL << (fugue_sqlParser::INSERT - 128))
      | (1ULL << (fugue_sqlParser::INTERSECT - 128))
      | (1ULL << (fugue_sqlParser::INTERVAL - 128))
      | (1ULL << (fugue_sqlParser::INTO - 128))
      | (1ULL << (fugue_sqlParser::IS - 128))
      | (1ULL << (fugue_sqlParser::ITEMS - 128))
      | (1ULL << (fugue_sqlParser::JOIN - 128))
      | (1ULL << (fugue_sqlParser::KEYS - 128))
      | (1ULL << (fugue_sqlParser::LAST - 128))
      | (1ULL << (fugue_sqlParser::LATERAL - 128))
      | (1ULL << (fugue_sqlParser::LAZY - 128))
      | (1ULL << (fugue_sqlParser::LEADING - 128))
      | (1ULL << (fugue_sqlParser::LEFT - 128))
      | (1ULL << (fugue_sqlParser::LIKE - 128))
      | (1ULL << (fugue_sqlParser::LIMIT - 128))
      | (1ULL << (fugue_sqlParser::LINES - 128))
      | (1ULL << (fugue_sqlParser::LIST - 128))
      | (1ULL << (fugue_sqlParser::LOAD - 128))
      | (1ULL << (fugue_sqlParser::LOCAL - 128))
      | (1ULL << (fugue_sqlParser::LOCATION - 128))
      | (1ULL << (fugue_sqlParser::LOCK - 128))
      | (1ULL << (fugue_sqlParser::LOCKS - 128))
      | (1ULL << (fugue_sqlParser::LOGICAL - 128))
      | (1ULL << (fugue_sqlParser::MACRO - 128))
      | (1ULL << (fugue_sqlParser::MAP - 128))
      | (1ULL << (fugue_sqlParser::MATCHED - 128))
      | (1ULL << (fugue_sqlParser::MERGE - 128))
      | (1ULL << (fugue_sqlParser::MINUTE - 128))
      | (1ULL << (fugue_sqlParser::MONTH - 128))
      | (1ULL << (fugue_sqlParser::MSCK - 128))
      | (1ULL << (fugue_sqlParser::NAMESPACE - 128))
      | (1ULL << (fugue_sqlParser::NAMESPACES - 128)))) != 0) || ((((_la - 192) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 192)) & ((1ULL << (fugue_sqlParser::NATURAL - 192))
      | (1ULL << (fugue_sqlParser::NO - 192))
      | (1ULL << (fugue_sqlParser::NOT - 192))
      | (1ULL << (fugue_sqlParser::THENULL - 192))
      | (1ULL << (fugue_sqlParser::THENULLS - 192))
      | (1ULL << (fugue_sqlParser::OF - 192))
      | (1ULL << (fugue_sqlParser::ON - 192))
      | (1ULL << (fugue_sqlParser::ONLY - 192))
      | (1ULL << (fugue_sqlParser::OPTION - 192))
      | (1ULL << (fugue_sqlParser::OPTIONS - 192))
      | (1ULL << (fugue_sqlParser::OR - 192))
      | (1ULL << (fugue_sqlParser::ORDER - 192))
      | (1ULL << (fugue_sqlParser::OUT - 192))
      | (1ULL << (fugue_sqlParser::OUTER - 192))
      | (1ULL << (fugue_sqlParser::OUTPUTFORMAT - 192))
      | (1ULL << (fugue_sqlParser::OVER - 192))
      | (1ULL << (fugue_sqlParser::OVERLAPS - 192))
      | (1ULL << (fugue_sqlParser::OVERLAY - 192))
      | (1ULL << (fugue_sqlParser::OVERWRITE - 192))
      | (1ULL << (fugue_sqlParser::PARTITION - 192))
      | (1ULL << (fugue_sqlParser::PARTITIONED - 192))
      | (1ULL << (fugue_sqlParser::PARTITIONS - 192))
      | (1ULL << (fugue_sqlParser::PERCENTLIT - 192))
      | (1ULL << (fugue_sqlParser::PIVOT - 192))
      | (1ULL << (fugue_sqlParser::PLACING - 192))
      | (1ULL << (fugue_sqlParser::POSITION - 192))
      | (1ULL << (fugue_sqlParser::PRECEDING - 192))
      | (1ULL << (fugue_sqlParser::PRIMARY - 192))
      | (1ULL << (fugue_sqlParser::PRINCIPALS - 192))
      | (1ULL << (fugue_sqlParser::PROPERTIES - 192))
      | (1ULL << (fugue_sqlParser::PURGE - 192))
      | (1ULL << (fugue_sqlParser::QUERY - 192))
      | (1ULL << (fugue_sqlParser::RANGE - 192))
      | (1ULL << (fugue_sqlParser::RECORDREADER - 192))
      | (1ULL << (fugue_sqlParser::RECORDWRITER - 192))
      | (1ULL << (fugue_sqlParser::RECOVER - 192))
      | (1ULL << (fugue_sqlParser::REDUCE - 192))
      | (1ULL << (fugue_sqlParser::REFERENCES - 192))
      | (1ULL << (fugue_sqlParser::REFRESH - 192))
      | (1ULL << (fugue_sqlParser::RENAME - 192))
      | (1ULL << (fugue_sqlParser::REPAIR - 192))
      | (1ULL << (fugue_sqlParser::REPLACE - 192))
      | (1ULL << (fugue_sqlParser::RESET - 192))
      | (1ULL << (fugue_sqlParser::RESTRICT - 192))
      | (1ULL << (fugue_sqlParser::REVOKE - 192))
      | (1ULL << (fugue_sqlParser::RIGHT - 192))
      | (1ULL << (fugue_sqlParser::RLIKE - 192))
      | (1ULL << (fugue_sqlParser::ROLE - 192))
      | (1ULL << (fugue_sqlParser::ROLES - 192))
      | (1ULL << (fugue_sqlParser::ROLLBACK - 192))
      | (1ULL << (fugue_sqlParser::ROLLUP - 192))
      | (1ULL << (fugue_sqlParser::ROW - 192))
      | (1ULL << (fugue_sqlParser::ROWS - 192))
      | (1ULL << (fugue_sqlParser::SCHEMA - 192))
      | (1ULL << (fugue_sqlParser::SECOND - 192))
      | (1ULL << (fugue_sqlParser::SELECT - 192))
      | (1ULL << (fugue_sqlParser::SEMI - 192))
      | (1ULL << (fugue_sqlParser::SEPARATED - 192))
      | (1ULL << (fugue_sqlParser::SERDE - 192))
      | (1ULL << (fugue_sqlParser::SERDEPROPERTIES - 192))
      | (1ULL << (fugue_sqlParser::SESSION_USER - 192))
      | (1ULL << (fugue_sqlParser::SET - 192))
      | (1ULL << (fugue_sqlParser::SETMINUS - 192))
      | (1ULL << (fugue_sqlParser::SETS - 192)))) != 0) || ((((_la - 256) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 256)) & ((1ULL << (fugue_sqlParser::SHOW - 256))
      | (1ULL << (fugue_sqlParser::SKEWED - 256))
      | (1ULL << (fugue_sqlParser::SOME - 256))
      | (1ULL << (fugue_sqlParser::SORT - 256))
      | (1ULL << (fugue_sqlParser::SORTED - 256))
      | (1ULL << (fugue_sqlParser::START - 256))
      | (1ULL << (fugue_sqlParser::STATISTICS - 256))
      | (1ULL << (fugue_sqlParser::STORED - 256))
      | (1ULL << (fugue_sqlParser::STRATIFY - 256))
      | (1ULL << (fugue_sqlParser::STRUCT - 256))
      | (1ULL << (fugue_sqlParser::SUBSTR - 256))
      | (1ULL << (fugue_sqlParser::SUBSTRING - 256))
      | (1ULL << (fugue_sqlParser::TABLE - 256))
      | (1ULL << (fugue_sqlParser::TABLES - 256))
      | (1ULL << (fugue_sqlParser::TABLESAMPLE - 256))
      | (1ULL << (fugue_sqlParser::TBLPROPERTIES - 256))
      | (1ULL << (fugue_sqlParser::TEMPORARY - 256))
      | (1ULL << (fugue_sqlParser::TERMINATED - 256))
      | (1ULL << (fugue_sqlParser::THEN - 256))
      | (1ULL << (fugue_sqlParser::TO - 256))
      | (1ULL << (fugue_sqlParser::TOUCH - 256))
      | (1ULL << (fugue_sqlParser::TRAILING - 256))
      | (1ULL << (fugue_sqlParser::TRANSACTION - 256))
      | (1ULL << (fugue_sqlParser::TRANSACTIONS - 256))
      | (1ULL << (fugue_sqlParser::TRANSFORM - 256))
      | (1ULL << (fugue_sqlParser::TRIM - 256))
      | (1ULL << (fugue_sqlParser::TRUE - 256))
      | (1ULL << (fugue_sqlParser::TRUNCATE - 256))
      | (1ULL << (fugue_sqlParser::TYPE - 256))
      | (1ULL << (fugue_sqlParser::UNARCHIVE - 256))
      | (1ULL << (fugue_sqlParser::UNBOUNDED - 256))
      | (1ULL << (fugue_sqlParser::UNCACHE - 256))
      | (1ULL << (fugue_sqlParser::UNION - 256))
      | (1ULL << (fugue_sqlParser::UNIQUE - 256))
      | (1ULL << (fugue_sqlParser::UNKNOWN - 256))
      | (1ULL << (fugue_sqlParser::UNLOCK - 256))
      | (1ULL << (fugue_sqlParser::UNSET - 256))
      | (1ULL << (fugue_sqlParser::UPDATE - 256))
      | (1ULL << (fugue_sqlParser::USE - 256))
      | (1ULL << (fugue_sqlParser::USER - 256))
      | (1ULL << (fugue_sqlParser::USING - 256))
      | (1ULL << (fugue_sqlParser::VALUES - 256))
      | (1ULL << (fugue_sqlParser::VIEW - 256))
      | (1ULL << (fugue_sqlParser::VIEWS - 256))
      | (1ULL << (fugue_sqlParser::WHEN - 256))
      | (1ULL << (fugue_sqlParser::WHERE - 256))
      | (1ULL << (fugue_sqlParser::WINDOW - 256))
      | (1ULL << (fugue_sqlParser::WITH - 256))
      | (1ULL << (fugue_sqlParser::YEAR - 256))
      | (1ULL << (fugue_sqlParser::PLUS - 256))
      | (1ULL << (fugue_sqlParser::MINUS - 256))
      | (1ULL << (fugue_sqlParser::ASTERISK - 256))
      | (1ULL << (fugue_sqlParser::DIV - 256)))) != 0) || ((((_la - 320) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 320)) & ((1ULL << (fugue_sqlParser::TILDE - 320))
      | (1ULL << (fugue_sqlParser::STRING - 320))
      | (1ULL << (fugue_sqlParser::BIGINT_LITERAL - 320))
      | (1ULL << (fugue_sqlParser::SMALLINT_LITERAL - 320))
      | (1ULL << (fugue_sqlParser::TINYINT_LITERAL - 320))
      | (1ULL << (fugue_sqlParser::INTEGER_VALUE - 320))
      | (1ULL << (fugue_sqlParser::EXPONENT_VALUE - 320))
      | (1ULL << (fugue_sqlParser::DECIMAL_VALUE - 320))
      | (1ULL << (fugue_sqlParser::DOUBLE_LITERAL - 320))
      | (1ULL << (fugue_sqlParser::BIGDECIMAL_LITERAL - 320))
      | (1ULL << (fugue_sqlParser::IDENTIFIER - 320))
      | (1ULL << (fugue_sqlParser::BACKQUOTED_IDENTIFIER - 320)))) != 0)) {
      setState(2985);
      expression();
      setState(2990);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == fugue_sqlParser::T__0) {
        setState(2986);
        match(fugue_sqlParser::T__0);
        setState(2987);
        expression();
        setState(2992);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(2995);
    match(fugue_sqlParser::T__3);
    setState(2996);
    tableAlias();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TableAliasContext ------------------------------------------------------------------

fugue_sqlParser::TableAliasContext::TableAliasContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

fugue_sqlParser::StrictIdentifierContext* fugue_sqlParser::TableAliasContext::strictIdentifier() {
  return getRuleContext<fugue_sqlParser::StrictIdentifierContext>(0);
}

tree::TerminalNode* fugue_sqlParser::TableAliasContext::AS() {
  return getToken(fugue_sqlParser::AS, 0);
}

fugue_sqlParser::IdentifierListContext* fugue_sqlParser::TableAliasContext::identifierList() {
  return getRuleContext<fugue_sqlParser::IdentifierListContext>(0);
}


size_t fugue_sqlParser::TableAliasContext::getRuleIndex() const {
  return fugue_sqlParser::RuleTableAlias;
}


antlrcpp::Any fugue_sqlParser::TableAliasContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitTableAlias(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::TableAliasContext* fugue_sqlParser::tableAlias() {
  TableAliasContext *_localctx = _tracker.createInstance<TableAliasContext>(_ctx, getState());
  enterRule(_localctx, 316, fugue_sqlParser::RuleTableAlias);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3005);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 400, _ctx)) {
    case 1: {
      setState(2999);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 398, _ctx)) {
      case 1: {
        setState(2998);
        match(fugue_sqlParser::AS);
        break;
      }

      default:
        break;
      }
      setState(3001);
      strictIdentifier();
      setState(3003);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 399, _ctx)) {
      case 1: {
        setState(3002);
        identifierList();
        break;
      }

      default:
        break;
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RowFormatContext ------------------------------------------------------------------

fugue_sqlParser::RowFormatContext::RowFormatContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t fugue_sqlParser::RowFormatContext::getRuleIndex() const {
  return fugue_sqlParser::RuleRowFormat;
}

void fugue_sqlParser::RowFormatContext::copyFrom(RowFormatContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- RowFormatSerdeContext ------------------------------------------------------------------

tree::TerminalNode* fugue_sqlParser::RowFormatSerdeContext::ROW() {
  return getToken(fugue_sqlParser::ROW, 0);
}

tree::TerminalNode* fugue_sqlParser::RowFormatSerdeContext::FORMAT() {
  return getToken(fugue_sqlParser::FORMAT, 0);
}

tree::TerminalNode* fugue_sqlParser::RowFormatSerdeContext::SERDE() {
  return getToken(fugue_sqlParser::SERDE, 0);
}

tree::TerminalNode* fugue_sqlParser::RowFormatSerdeContext::STRING() {
  return getToken(fugue_sqlParser::STRING, 0);
}

tree::TerminalNode* fugue_sqlParser::RowFormatSerdeContext::WITH() {
  return getToken(fugue_sqlParser::WITH, 0);
}

tree::TerminalNode* fugue_sqlParser::RowFormatSerdeContext::SERDEPROPERTIES() {
  return getToken(fugue_sqlParser::SERDEPROPERTIES, 0);
}

fugue_sqlParser::TablePropertyListContext* fugue_sqlParser::RowFormatSerdeContext::tablePropertyList() {
  return getRuleContext<fugue_sqlParser::TablePropertyListContext>(0);
}

fugue_sqlParser::RowFormatSerdeContext::RowFormatSerdeContext(RowFormatContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::RowFormatSerdeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitRowFormatSerde(this);
  else
    return visitor->visitChildren(this);
}
//----------------- RowFormatDelimitedContext ------------------------------------------------------------------

tree::TerminalNode* fugue_sqlParser::RowFormatDelimitedContext::ROW() {
  return getToken(fugue_sqlParser::ROW, 0);
}

tree::TerminalNode* fugue_sqlParser::RowFormatDelimitedContext::FORMAT() {
  return getToken(fugue_sqlParser::FORMAT, 0);
}

tree::TerminalNode* fugue_sqlParser::RowFormatDelimitedContext::DELIMITED() {
  return getToken(fugue_sqlParser::DELIMITED, 0);
}

tree::TerminalNode* fugue_sqlParser::RowFormatDelimitedContext::FIELDS() {
  return getToken(fugue_sqlParser::FIELDS, 0);
}

std::vector<tree::TerminalNode *> fugue_sqlParser::RowFormatDelimitedContext::TERMINATED() {
  return getTokens(fugue_sqlParser::TERMINATED);
}

tree::TerminalNode* fugue_sqlParser::RowFormatDelimitedContext::TERMINATED(size_t i) {
  return getToken(fugue_sqlParser::TERMINATED, i);
}

std::vector<tree::TerminalNode *> fugue_sqlParser::RowFormatDelimitedContext::BY() {
  return getTokens(fugue_sqlParser::BY);
}

tree::TerminalNode* fugue_sqlParser::RowFormatDelimitedContext::BY(size_t i) {
  return getToken(fugue_sqlParser::BY, i);
}

tree::TerminalNode* fugue_sqlParser::RowFormatDelimitedContext::COLLECTION() {
  return getToken(fugue_sqlParser::COLLECTION, 0);
}

tree::TerminalNode* fugue_sqlParser::RowFormatDelimitedContext::ITEMS() {
  return getToken(fugue_sqlParser::ITEMS, 0);
}

tree::TerminalNode* fugue_sqlParser::RowFormatDelimitedContext::MAP() {
  return getToken(fugue_sqlParser::MAP, 0);
}

tree::TerminalNode* fugue_sqlParser::RowFormatDelimitedContext::KEYS() {
  return getToken(fugue_sqlParser::KEYS, 0);
}

tree::TerminalNode* fugue_sqlParser::RowFormatDelimitedContext::LINES() {
  return getToken(fugue_sqlParser::LINES, 0);
}

tree::TerminalNode* fugue_sqlParser::RowFormatDelimitedContext::THENULL() {
  return getToken(fugue_sqlParser::THENULL, 0);
}

tree::TerminalNode* fugue_sqlParser::RowFormatDelimitedContext::DEFINED() {
  return getToken(fugue_sqlParser::DEFINED, 0);
}

tree::TerminalNode* fugue_sqlParser::RowFormatDelimitedContext::AS() {
  return getToken(fugue_sqlParser::AS, 0);
}

std::vector<tree::TerminalNode *> fugue_sqlParser::RowFormatDelimitedContext::STRING() {
  return getTokens(fugue_sqlParser::STRING);
}

tree::TerminalNode* fugue_sqlParser::RowFormatDelimitedContext::STRING(size_t i) {
  return getToken(fugue_sqlParser::STRING, i);
}

tree::TerminalNode* fugue_sqlParser::RowFormatDelimitedContext::ESCAPED() {
  return getToken(fugue_sqlParser::ESCAPED, 0);
}

fugue_sqlParser::RowFormatDelimitedContext::RowFormatDelimitedContext(RowFormatContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::RowFormatDelimitedContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitRowFormatDelimited(this);
  else
    return visitor->visitChildren(this);
}
fugue_sqlParser::RowFormatContext* fugue_sqlParser::rowFormat() {
  RowFormatContext *_localctx = _tracker.createInstance<RowFormatContext>(_ctx, getState());
  enterRule(_localctx, 318, fugue_sqlParser::RuleRowFormat);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3056);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 408, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<fugue_sqlParser::RowFormatSerdeContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(3007);
      match(fugue_sqlParser::ROW);
      setState(3008);
      match(fugue_sqlParser::FORMAT);
      setState(3009);
      match(fugue_sqlParser::SERDE);
      setState(3010);
      antlrcpp::downCast<RowFormatSerdeContext *>(_localctx)->name = match(fugue_sqlParser::STRING);
      setState(3014);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 401, _ctx)) {
      case 1: {
        setState(3011);
        match(fugue_sqlParser::WITH);
        setState(3012);
        match(fugue_sqlParser::SERDEPROPERTIES);
        setState(3013);
        antlrcpp::downCast<RowFormatSerdeContext *>(_localctx)->props = tablePropertyList();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<fugue_sqlParser::RowFormatDelimitedContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(3016);
      match(fugue_sqlParser::ROW);
      setState(3017);
      match(fugue_sqlParser::FORMAT);
      setState(3018);
      match(fugue_sqlParser::DELIMITED);
      setState(3028);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 403, _ctx)) {
      case 1: {
        setState(3019);
        match(fugue_sqlParser::FIELDS);
        setState(3020);
        match(fugue_sqlParser::TERMINATED);
        setState(3021);
        match(fugue_sqlParser::BY);
        setState(3022);
        antlrcpp::downCast<RowFormatDelimitedContext *>(_localctx)->fieldsTerminatedBy = match(fugue_sqlParser::STRING);
        setState(3026);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 402, _ctx)) {
        case 1: {
          setState(3023);
          match(fugue_sqlParser::ESCAPED);
          setState(3024);
          match(fugue_sqlParser::BY);
          setState(3025);
          antlrcpp::downCast<RowFormatDelimitedContext *>(_localctx)->escapedBy = match(fugue_sqlParser::STRING);
          break;
        }

        default:
          break;
        }
        break;
      }

      default:
        break;
      }
      setState(3035);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 404, _ctx)) {
      case 1: {
        setState(3030);
        match(fugue_sqlParser::COLLECTION);
        setState(3031);
        match(fugue_sqlParser::ITEMS);
        setState(3032);
        match(fugue_sqlParser::TERMINATED);
        setState(3033);
        match(fugue_sqlParser::BY);
        setState(3034);
        antlrcpp::downCast<RowFormatDelimitedContext *>(_localctx)->collectionItemsTerminatedBy = match(fugue_sqlParser::STRING);
        break;
      }

      default:
        break;
      }
      setState(3042);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 405, _ctx)) {
      case 1: {
        setState(3037);
        match(fugue_sqlParser::MAP);
        setState(3038);
        match(fugue_sqlParser::KEYS);
        setState(3039);
        match(fugue_sqlParser::TERMINATED);
        setState(3040);
        match(fugue_sqlParser::BY);
        setState(3041);
        antlrcpp::downCast<RowFormatDelimitedContext *>(_localctx)->keysTerminatedBy = match(fugue_sqlParser::STRING);
        break;
      }

      default:
        break;
      }
      setState(3048);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 406, _ctx)) {
      case 1: {
        setState(3044);
        match(fugue_sqlParser::LINES);
        setState(3045);
        match(fugue_sqlParser::TERMINATED);
        setState(3046);
        match(fugue_sqlParser::BY);
        setState(3047);
        antlrcpp::downCast<RowFormatDelimitedContext *>(_localctx)->linesSeparatedBy = match(fugue_sqlParser::STRING);
        break;
      }

      default:
        break;
      }
      setState(3054);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 407, _ctx)) {
      case 1: {
        setState(3050);
        match(fugue_sqlParser::THENULL);
        setState(3051);
        match(fugue_sqlParser::DEFINED);
        setState(3052);
        match(fugue_sqlParser::AS);
        setState(3053);
        antlrcpp::downCast<RowFormatDelimitedContext *>(_localctx)->nullDefinedAs = match(fugue_sqlParser::STRING);
        break;
      }

      default:
        break;
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MultipartIdentifierListContext ------------------------------------------------------------------

fugue_sqlParser::MultipartIdentifierListContext::MultipartIdentifierListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<fugue_sqlParser::MultipartIdentifierContext *> fugue_sqlParser::MultipartIdentifierListContext::multipartIdentifier() {
  return getRuleContexts<fugue_sqlParser::MultipartIdentifierContext>();
}

fugue_sqlParser::MultipartIdentifierContext* fugue_sqlParser::MultipartIdentifierListContext::multipartIdentifier(size_t i) {
  return getRuleContext<fugue_sqlParser::MultipartIdentifierContext>(i);
}


size_t fugue_sqlParser::MultipartIdentifierListContext::getRuleIndex() const {
  return fugue_sqlParser::RuleMultipartIdentifierList;
}


antlrcpp::Any fugue_sqlParser::MultipartIdentifierListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitMultipartIdentifierList(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::MultipartIdentifierListContext* fugue_sqlParser::multipartIdentifierList() {
  MultipartIdentifierListContext *_localctx = _tracker.createInstance<MultipartIdentifierListContext>(_ctx, getState());
  enterRule(_localctx, 320, fugue_sqlParser::RuleMultipartIdentifierList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3058);
    multipartIdentifier();
    setState(3063);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == fugue_sqlParser::T__0) {
      setState(3059);
      match(fugue_sqlParser::T__0);
      setState(3060);
      multipartIdentifier();
      setState(3065);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MultipartIdentifierContext ------------------------------------------------------------------

fugue_sqlParser::MultipartIdentifierContext::MultipartIdentifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<fugue_sqlParser::ErrorCapturingIdentifierContext *> fugue_sqlParser::MultipartIdentifierContext::errorCapturingIdentifier() {
  return getRuleContexts<fugue_sqlParser::ErrorCapturingIdentifierContext>();
}

fugue_sqlParser::ErrorCapturingIdentifierContext* fugue_sqlParser::MultipartIdentifierContext::errorCapturingIdentifier(size_t i) {
  return getRuleContext<fugue_sqlParser::ErrorCapturingIdentifierContext>(i);
}


size_t fugue_sqlParser::MultipartIdentifierContext::getRuleIndex() const {
  return fugue_sqlParser::RuleMultipartIdentifier;
}


antlrcpp::Any fugue_sqlParser::MultipartIdentifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitMultipartIdentifier(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::MultipartIdentifierContext* fugue_sqlParser::multipartIdentifier() {
  MultipartIdentifierContext *_localctx = _tracker.createInstance<MultipartIdentifierContext>(_ctx, getState());
  enterRule(_localctx, 322, fugue_sqlParser::RuleMultipartIdentifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3066);
    antlrcpp::downCast<MultipartIdentifierContext *>(_localctx)->errorCapturingIdentifierContext = errorCapturingIdentifier();
    antlrcpp::downCast<MultipartIdentifierContext *>(_localctx)->parts.push_back(antlrcpp::downCast<MultipartIdentifierContext *>(_localctx)->errorCapturingIdentifierContext);
    setState(3071);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 410, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(3067);
        match(fugue_sqlParser::T__6);
        setState(3068);
        antlrcpp::downCast<MultipartIdentifierContext *>(_localctx)->errorCapturingIdentifierContext = errorCapturingIdentifier();
        antlrcpp::downCast<MultipartIdentifierContext *>(_localctx)->parts.push_back(antlrcpp::downCast<MultipartIdentifierContext *>(_localctx)->errorCapturingIdentifierContext); 
      }
      setState(3073);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 410, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TableIdentifierContext ------------------------------------------------------------------

fugue_sqlParser::TableIdentifierContext::TableIdentifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<fugue_sqlParser::ErrorCapturingIdentifierContext *> fugue_sqlParser::TableIdentifierContext::errorCapturingIdentifier() {
  return getRuleContexts<fugue_sqlParser::ErrorCapturingIdentifierContext>();
}

fugue_sqlParser::ErrorCapturingIdentifierContext* fugue_sqlParser::TableIdentifierContext::errorCapturingIdentifier(size_t i) {
  return getRuleContext<fugue_sqlParser::ErrorCapturingIdentifierContext>(i);
}


size_t fugue_sqlParser::TableIdentifierContext::getRuleIndex() const {
  return fugue_sqlParser::RuleTableIdentifier;
}


antlrcpp::Any fugue_sqlParser::TableIdentifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitTableIdentifier(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::TableIdentifierContext* fugue_sqlParser::tableIdentifier() {
  TableIdentifierContext *_localctx = _tracker.createInstance<TableIdentifierContext>(_ctx, getState());
  enterRule(_localctx, 324, fugue_sqlParser::RuleTableIdentifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3077);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 411, _ctx)) {
    case 1: {
      setState(3074);
      antlrcpp::downCast<TableIdentifierContext *>(_localctx)->db = errorCapturingIdentifier();
      setState(3075);
      match(fugue_sqlParser::T__6);
      break;
    }

    default:
      break;
    }
    setState(3079);
    antlrcpp::downCast<TableIdentifierContext *>(_localctx)->table = errorCapturingIdentifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FunctionIdentifierContext ------------------------------------------------------------------

fugue_sqlParser::FunctionIdentifierContext::FunctionIdentifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<fugue_sqlParser::ErrorCapturingIdentifierContext *> fugue_sqlParser::FunctionIdentifierContext::errorCapturingIdentifier() {
  return getRuleContexts<fugue_sqlParser::ErrorCapturingIdentifierContext>();
}

fugue_sqlParser::ErrorCapturingIdentifierContext* fugue_sqlParser::FunctionIdentifierContext::errorCapturingIdentifier(size_t i) {
  return getRuleContext<fugue_sqlParser::ErrorCapturingIdentifierContext>(i);
}


size_t fugue_sqlParser::FunctionIdentifierContext::getRuleIndex() const {
  return fugue_sqlParser::RuleFunctionIdentifier;
}


antlrcpp::Any fugue_sqlParser::FunctionIdentifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitFunctionIdentifier(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::FunctionIdentifierContext* fugue_sqlParser::functionIdentifier() {
  FunctionIdentifierContext *_localctx = _tracker.createInstance<FunctionIdentifierContext>(_ctx, getState());
  enterRule(_localctx, 326, fugue_sqlParser::RuleFunctionIdentifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3084);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 412, _ctx)) {
    case 1: {
      setState(3081);
      antlrcpp::downCast<FunctionIdentifierContext *>(_localctx)->db = errorCapturingIdentifier();
      setState(3082);
      match(fugue_sqlParser::T__6);
      break;
    }

    default:
      break;
    }
    setState(3086);
    antlrcpp::downCast<FunctionIdentifierContext *>(_localctx)->function = errorCapturingIdentifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NamedExpressionContext ------------------------------------------------------------------

fugue_sqlParser::NamedExpressionContext::NamedExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

fugue_sqlParser::ExpressionContext* fugue_sqlParser::NamedExpressionContext::expression() {
  return getRuleContext<fugue_sqlParser::ExpressionContext>(0);
}

fugue_sqlParser::IdentifierListContext* fugue_sqlParser::NamedExpressionContext::identifierList() {
  return getRuleContext<fugue_sqlParser::IdentifierListContext>(0);
}

tree::TerminalNode* fugue_sqlParser::NamedExpressionContext::AS() {
  return getToken(fugue_sqlParser::AS, 0);
}

fugue_sqlParser::ErrorCapturingIdentifierContext* fugue_sqlParser::NamedExpressionContext::errorCapturingIdentifier() {
  return getRuleContext<fugue_sqlParser::ErrorCapturingIdentifierContext>(0);
}


size_t fugue_sqlParser::NamedExpressionContext::getRuleIndex() const {
  return fugue_sqlParser::RuleNamedExpression;
}


antlrcpp::Any fugue_sqlParser::NamedExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitNamedExpression(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::NamedExpressionContext* fugue_sqlParser::namedExpression() {
  NamedExpressionContext *_localctx = _tracker.createInstance<NamedExpressionContext>(_ctx, getState());
  enterRule(_localctx, 328, fugue_sqlParser::RuleNamedExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3088);
    expression();
    setState(3096);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 415, _ctx)) {
    case 1: {
      setState(3090);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 413, _ctx)) {
      case 1: {
        setState(3089);
        match(fugue_sqlParser::AS);
        break;
      }

      default:
        break;
      }
      setState(3094);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case fugue_sqlParser::ADD:
        case fugue_sqlParser::AFTER:
        case fugue_sqlParser::ALL:
        case fugue_sqlParser::ALTER:
        case fugue_sqlParser::ANALYZE:
        case fugue_sqlParser::AND:
        case fugue_sqlParser::ANTI:
        case fugue_sqlParser::ANY:
        case fugue_sqlParser::ARCHIVE:
        case fugue_sqlParser::ARRAY:
        case fugue_sqlParser::AS:
        case fugue_sqlParser::ASC:
        case fugue_sqlParser::AT:
        case fugue_sqlParser::AUTHORIZATION:
        case fugue_sqlParser::BETWEEN:
        case fugue_sqlParser::BOTH:
        case fugue_sqlParser::BUCKET:
        case fugue_sqlParser::BUCKETS:
        case fugue_sqlParser::BY:
        case fugue_sqlParser::CACHE:
        case fugue_sqlParser::CASCADE:
        case fugue_sqlParser::CASE:
        case fugue_sqlParser::CAST:
        case fugue_sqlParser::CHANGE:
        case fugue_sqlParser::CHECK:
        case fugue_sqlParser::CLEAR:
        case fugue_sqlParser::CLUSTER:
        case fugue_sqlParser::CLUSTERED:
        case fugue_sqlParser::CODEGEN:
        case fugue_sqlParser::COLLATE:
        case fugue_sqlParser::COLLECTION:
        case fugue_sqlParser::COLUMN:
        case fugue_sqlParser::COLUMNS:
        case fugue_sqlParser::COMMENT:
        case fugue_sqlParser::COMMIT:
        case fugue_sqlParser::COMPACT:
        case fugue_sqlParser::COMPACTIONS:
        case fugue_sqlParser::COMPUTE:
        case fugue_sqlParser::CONCATENATE:
        case fugue_sqlParser::CONSTRAINT:
        case fugue_sqlParser::COST:
        case fugue_sqlParser::CREATE:
        case fugue_sqlParser::CROSS:
        case fugue_sqlParser::CUBE:
        case fugue_sqlParser::CURRENT:
        case fugue_sqlParser::CURRENT_DATE:
        case fugue_sqlParser::CURRENT_TIME:
        case fugue_sqlParser::CURRENT_TIMESTAMP:
        case fugue_sqlParser::CURRENT_USER:
        case fugue_sqlParser::DATA:
        case fugue_sqlParser::DATABASE:
        case fugue_sqlParser::DATABASES:
        case fugue_sqlParser::DAY:
        case fugue_sqlParser::DBPROPERTIES:
        case fugue_sqlParser::DEFINED:
        case fugue_sqlParser::DELETE:
        case fugue_sqlParser::DELIMITED:
        case fugue_sqlParser::DESC:
        case fugue_sqlParser::DESCRIBE:
        case fugue_sqlParser::DFS:
        case fugue_sqlParser::DIRECTORIES:
        case fugue_sqlParser::DIRECTORY:
        case fugue_sqlParser::DISTINCT:
        case fugue_sqlParser::DISTRIBUTE:
        case fugue_sqlParser::DROP:
        case fugue_sqlParser::ELSE:
        case fugue_sqlParser::END:
        case fugue_sqlParser::ESCAPE:
        case fugue_sqlParser::ESCAPED:
        case fugue_sqlParser::EXCEPT:
        case fugue_sqlParser::EXCHANGE:
        case fugue_sqlParser::EXISTS:
        case fugue_sqlParser::EXPLAIN:
        case fugue_sqlParser::EXPORT:
        case fugue_sqlParser::EXTENDED:
        case fugue_sqlParser::EXTERNAL:
        case fugue_sqlParser::EXTRACT:
        case fugue_sqlParser::FALSE:
        case fugue_sqlParser::FETCH:
        case fugue_sqlParser::FIELDS:
        case fugue_sqlParser::FILTER:
        case fugue_sqlParser::FILEFORMAT:
        case fugue_sqlParser::FIRST:
        case fugue_sqlParser::FOLLOWING:
        case fugue_sqlParser::FOR:
        case fugue_sqlParser::FOREIGN:
        case fugue_sqlParser::FORMAT:
        case fugue_sqlParser::FORMATTED:
        case fugue_sqlParser::FROM:
        case fugue_sqlParser::FULL:
        case fugue_sqlParser::FUNCTION:
        case fugue_sqlParser::FUNCTIONS:
        case fugue_sqlParser::GLOBAL:
        case fugue_sqlParser::GRANT:
        case fugue_sqlParser::GROUP:
        case fugue_sqlParser::GROUPING:
        case fugue_sqlParser::HAVING:
        case fugue_sqlParser::HOUR:
        case fugue_sqlParser::IF:
        case fugue_sqlParser::IGNORE:
        case fugue_sqlParser::IMPORT:
        case fugue_sqlParser::IN:
        case fugue_sqlParser::INDEX:
        case fugue_sqlParser::INDEXES:
        case fugue_sqlParser::INNER:
        case fugue_sqlParser::INPATH:
        case fugue_sqlParser::INPUTFORMAT:
        case fugue_sqlParser::INSERT:
        case fugue_sqlParser::INTERSECT:
        case fugue_sqlParser::INTERVAL:
        case fugue_sqlParser::INTO:
        case fugue_sqlParser::IS:
        case fugue_sqlParser::ITEMS:
        case fugue_sqlParser::JOIN:
        case fugue_sqlParser::KEYS:
        case fugue_sqlParser::LAST:
        case fugue_sqlParser::LATERAL:
        case fugue_sqlParser::LAZY:
        case fugue_sqlParser::LEADING:
        case fugue_sqlParser::LEFT:
        case fugue_sqlParser::LIKE:
        case fugue_sqlParser::LIMIT:
        case fugue_sqlParser::LINES:
        case fugue_sqlParser::LIST:
        case fugue_sqlParser::LOAD:
        case fugue_sqlParser::LOCAL:
        case fugue_sqlParser::LOCATION:
        case fugue_sqlParser::LOCK:
        case fugue_sqlParser::LOCKS:
        case fugue_sqlParser::LOGICAL:
        case fugue_sqlParser::MACRO:
        case fugue_sqlParser::MAP:
        case fugue_sqlParser::MATCHED:
        case fugue_sqlParser::MERGE:
        case fugue_sqlParser::MINUTE:
        case fugue_sqlParser::MONTH:
        case fugue_sqlParser::MSCK:
        case fugue_sqlParser::NAMESPACE:
        case fugue_sqlParser::NAMESPACES:
        case fugue_sqlParser::NATURAL:
        case fugue_sqlParser::NO:
        case fugue_sqlParser::NOT:
        case fugue_sqlParser::THENULL:
        case fugue_sqlParser::THENULLS:
        case fugue_sqlParser::OF:
        case fugue_sqlParser::ON:
        case fugue_sqlParser::ONLY:
        case fugue_sqlParser::OPTION:
        case fugue_sqlParser::OPTIONS:
        case fugue_sqlParser::OR:
        case fugue_sqlParser::ORDER:
        case fugue_sqlParser::OUT:
        case fugue_sqlParser::OUTER:
        case fugue_sqlParser::OUTPUTFORMAT:
        case fugue_sqlParser::OVER:
        case fugue_sqlParser::OVERLAPS:
        case fugue_sqlParser::OVERLAY:
        case fugue_sqlParser::OVERWRITE:
        case fugue_sqlParser::PARTITION:
        case fugue_sqlParser::PARTITIONED:
        case fugue_sqlParser::PARTITIONS:
        case fugue_sqlParser::PERCENTLIT:
        case fugue_sqlParser::PIVOT:
        case fugue_sqlParser::PLACING:
        case fugue_sqlParser::POSITION:
        case fugue_sqlParser::PRECEDING:
        case fugue_sqlParser::PRIMARY:
        case fugue_sqlParser::PRINCIPALS:
        case fugue_sqlParser::PROPERTIES:
        case fugue_sqlParser::PURGE:
        case fugue_sqlParser::QUERY:
        case fugue_sqlParser::RANGE:
        case fugue_sqlParser::RECORDREADER:
        case fugue_sqlParser::RECORDWRITER:
        case fugue_sqlParser::RECOVER:
        case fugue_sqlParser::REDUCE:
        case fugue_sqlParser::REFERENCES:
        case fugue_sqlParser::REFRESH:
        case fugue_sqlParser::RENAME:
        case fugue_sqlParser::REPAIR:
        case fugue_sqlParser::REPLACE:
        case fugue_sqlParser::RESET:
        case fugue_sqlParser::RESTRICT:
        case fugue_sqlParser::REVOKE:
        case fugue_sqlParser::RIGHT:
        case fugue_sqlParser::RLIKE:
        case fugue_sqlParser::ROLE:
        case fugue_sqlParser::ROLES:
        case fugue_sqlParser::ROLLBACK:
        case fugue_sqlParser::ROLLUP:
        case fugue_sqlParser::ROW:
        case fugue_sqlParser::ROWS:
        case fugue_sqlParser::SCHEMA:
        case fugue_sqlParser::SECOND:
        case fugue_sqlParser::SELECT:
        case fugue_sqlParser::SEMI:
        case fugue_sqlParser::SEPARATED:
        case fugue_sqlParser::SERDE:
        case fugue_sqlParser::SERDEPROPERTIES:
        case fugue_sqlParser::SESSION_USER:
        case fugue_sqlParser::SET:
        case fugue_sqlParser::SETMINUS:
        case fugue_sqlParser::SETS:
        case fugue_sqlParser::SHOW:
        case fugue_sqlParser::SKEWED:
        case fugue_sqlParser::SOME:
        case fugue_sqlParser::SORT:
        case fugue_sqlParser::SORTED:
        case fugue_sqlParser::START:
        case fugue_sqlParser::STATISTICS:
        case fugue_sqlParser::STORED:
        case fugue_sqlParser::STRATIFY:
        case fugue_sqlParser::STRUCT:
        case fugue_sqlParser::SUBSTR:
        case fugue_sqlParser::SUBSTRING:
        case fugue_sqlParser::TABLE:
        case fugue_sqlParser::TABLES:
        case fugue_sqlParser::TABLESAMPLE:
        case fugue_sqlParser::TBLPROPERTIES:
        case fugue_sqlParser::TEMPORARY:
        case fugue_sqlParser::TERMINATED:
        case fugue_sqlParser::THEN:
        case fugue_sqlParser::TO:
        case fugue_sqlParser::TOUCH:
        case fugue_sqlParser::TRAILING:
        case fugue_sqlParser::TRANSACTION:
        case fugue_sqlParser::TRANSACTIONS:
        case fugue_sqlParser::TRANSFORM:
        case fugue_sqlParser::TRIM:
        case fugue_sqlParser::TRUE:
        case fugue_sqlParser::TRUNCATE:
        case fugue_sqlParser::TYPE:
        case fugue_sqlParser::UNARCHIVE:
        case fugue_sqlParser::UNBOUNDED:
        case fugue_sqlParser::UNCACHE:
        case fugue_sqlParser::UNION:
        case fugue_sqlParser::UNIQUE:
        case fugue_sqlParser::UNKNOWN:
        case fugue_sqlParser::UNLOCK:
        case fugue_sqlParser::UNSET:
        case fugue_sqlParser::UPDATE:
        case fugue_sqlParser::USE:
        case fugue_sqlParser::USER:
        case fugue_sqlParser::USING:
        case fugue_sqlParser::VALUES:
        case fugue_sqlParser::VIEW:
        case fugue_sqlParser::VIEWS:
        case fugue_sqlParser::WHEN:
        case fugue_sqlParser::WHERE:
        case fugue_sqlParser::WINDOW:
        case fugue_sqlParser::WITH:
        case fugue_sqlParser::YEAR:
        case fugue_sqlParser::DIV:
        case fugue_sqlParser::IDENTIFIER:
        case fugue_sqlParser::BACKQUOTED_IDENTIFIER: {
          setState(3092);
          antlrcpp::downCast<NamedExpressionContext *>(_localctx)->name = errorCapturingIdentifier();
          break;
        }

        case fugue_sqlParser::T__2: {
          setState(3093);
          identifierList();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NamedExpressionSeqContext ------------------------------------------------------------------

fugue_sqlParser::NamedExpressionSeqContext::NamedExpressionSeqContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<fugue_sqlParser::NamedExpressionContext *> fugue_sqlParser::NamedExpressionSeqContext::namedExpression() {
  return getRuleContexts<fugue_sqlParser::NamedExpressionContext>();
}

fugue_sqlParser::NamedExpressionContext* fugue_sqlParser::NamedExpressionSeqContext::namedExpression(size_t i) {
  return getRuleContext<fugue_sqlParser::NamedExpressionContext>(i);
}


size_t fugue_sqlParser::NamedExpressionSeqContext::getRuleIndex() const {
  return fugue_sqlParser::RuleNamedExpressionSeq;
}


antlrcpp::Any fugue_sqlParser::NamedExpressionSeqContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitNamedExpressionSeq(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::NamedExpressionSeqContext* fugue_sqlParser::namedExpressionSeq() {
  NamedExpressionSeqContext *_localctx = _tracker.createInstance<NamedExpressionSeqContext>(_ctx, getState());
  enterRule(_localctx, 330, fugue_sqlParser::RuleNamedExpressionSeq);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3098);
    namedExpression();
    setState(3103);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 416, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(3099);
        match(fugue_sqlParser::T__0);
        setState(3100);
        namedExpression(); 
      }
      setState(3105);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 416, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TransformListContext ------------------------------------------------------------------

fugue_sqlParser::TransformListContext::TransformListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<fugue_sqlParser::TransformContext *> fugue_sqlParser::TransformListContext::transform() {
  return getRuleContexts<fugue_sqlParser::TransformContext>();
}

fugue_sqlParser::TransformContext* fugue_sqlParser::TransformListContext::transform(size_t i) {
  return getRuleContext<fugue_sqlParser::TransformContext>(i);
}


size_t fugue_sqlParser::TransformListContext::getRuleIndex() const {
  return fugue_sqlParser::RuleTransformList;
}


antlrcpp::Any fugue_sqlParser::TransformListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitTransformList(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::TransformListContext* fugue_sqlParser::transformList() {
  TransformListContext *_localctx = _tracker.createInstance<TransformListContext>(_ctx, getState());
  enterRule(_localctx, 332, fugue_sqlParser::RuleTransformList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3106);
    match(fugue_sqlParser::T__2);
    setState(3107);
    antlrcpp::downCast<TransformListContext *>(_localctx)->transformContext = transform();
    antlrcpp::downCast<TransformListContext *>(_localctx)->transforms.push_back(antlrcpp::downCast<TransformListContext *>(_localctx)->transformContext);
    setState(3112);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == fugue_sqlParser::T__0) {
      setState(3108);
      match(fugue_sqlParser::T__0);
      setState(3109);
      antlrcpp::downCast<TransformListContext *>(_localctx)->transformContext = transform();
      antlrcpp::downCast<TransformListContext *>(_localctx)->transforms.push_back(antlrcpp::downCast<TransformListContext *>(_localctx)->transformContext);
      setState(3114);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(3115);
    match(fugue_sqlParser::T__3);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TransformContext ------------------------------------------------------------------

fugue_sqlParser::TransformContext::TransformContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t fugue_sqlParser::TransformContext::getRuleIndex() const {
  return fugue_sqlParser::RuleTransform;
}

void fugue_sqlParser::TransformContext::copyFrom(TransformContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- IdentityTransformContext ------------------------------------------------------------------

fugue_sqlParser::QualifiedNameContext* fugue_sqlParser::IdentityTransformContext::qualifiedName() {
  return getRuleContext<fugue_sqlParser::QualifiedNameContext>(0);
}

fugue_sqlParser::IdentityTransformContext::IdentityTransformContext(TransformContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::IdentityTransformContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitIdentityTransform(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ApplyTransformContext ------------------------------------------------------------------

fugue_sqlParser::IdentifierContext* fugue_sqlParser::ApplyTransformContext::identifier() {
  return getRuleContext<fugue_sqlParser::IdentifierContext>(0);
}

std::vector<fugue_sqlParser::TransformArgumentContext *> fugue_sqlParser::ApplyTransformContext::transformArgument() {
  return getRuleContexts<fugue_sqlParser::TransformArgumentContext>();
}

fugue_sqlParser::TransformArgumentContext* fugue_sqlParser::ApplyTransformContext::transformArgument(size_t i) {
  return getRuleContext<fugue_sqlParser::TransformArgumentContext>(i);
}

fugue_sqlParser::ApplyTransformContext::ApplyTransformContext(TransformContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::ApplyTransformContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitApplyTransform(this);
  else
    return visitor->visitChildren(this);
}
fugue_sqlParser::TransformContext* fugue_sqlParser::transform() {
  TransformContext *_localctx = _tracker.createInstance<TransformContext>(_ctx, getState());
  enterRule(_localctx, 334, fugue_sqlParser::RuleTransform);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3130);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 419, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<fugue_sqlParser::IdentityTransformContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(3117);
      qualifiedName();
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<fugue_sqlParser::ApplyTransformContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(3118);
      antlrcpp::downCast<ApplyTransformContext *>(_localctx)->transformName = identifier();
      setState(3119);
      match(fugue_sqlParser::T__2);
      setState(3120);
      antlrcpp::downCast<ApplyTransformContext *>(_localctx)->transformArgumentContext = transformArgument();
      antlrcpp::downCast<ApplyTransformContext *>(_localctx)->argument.push_back(antlrcpp::downCast<ApplyTransformContext *>(_localctx)->transformArgumentContext);
      setState(3125);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == fugue_sqlParser::T__0) {
        setState(3121);
        match(fugue_sqlParser::T__0);
        setState(3122);
        antlrcpp::downCast<ApplyTransformContext *>(_localctx)->transformArgumentContext = transformArgument();
        antlrcpp::downCast<ApplyTransformContext *>(_localctx)->argument.push_back(antlrcpp::downCast<ApplyTransformContext *>(_localctx)->transformArgumentContext);
        setState(3127);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(3128);
      match(fugue_sqlParser::T__3);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TransformArgumentContext ------------------------------------------------------------------

fugue_sqlParser::TransformArgumentContext::TransformArgumentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

fugue_sqlParser::QualifiedNameContext* fugue_sqlParser::TransformArgumentContext::qualifiedName() {
  return getRuleContext<fugue_sqlParser::QualifiedNameContext>(0);
}

fugue_sqlParser::ConstantContext* fugue_sqlParser::TransformArgumentContext::constant() {
  return getRuleContext<fugue_sqlParser::ConstantContext>(0);
}


size_t fugue_sqlParser::TransformArgumentContext::getRuleIndex() const {
  return fugue_sqlParser::RuleTransformArgument;
}


antlrcpp::Any fugue_sqlParser::TransformArgumentContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitTransformArgument(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::TransformArgumentContext* fugue_sqlParser::transformArgument() {
  TransformArgumentContext *_localctx = _tracker.createInstance<TransformArgumentContext>(_ctx, getState());
  enterRule(_localctx, 336, fugue_sqlParser::RuleTransformArgument);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3134);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 420, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3132);
      qualifiedName();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3133);
      constant();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExpressionContext ------------------------------------------------------------------

fugue_sqlParser::ExpressionContext::ExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

fugue_sqlParser::BooleanExpressionContext* fugue_sqlParser::ExpressionContext::booleanExpression() {
  return getRuleContext<fugue_sqlParser::BooleanExpressionContext>(0);
}


size_t fugue_sqlParser::ExpressionContext::getRuleIndex() const {
  return fugue_sqlParser::RuleExpression;
}


antlrcpp::Any fugue_sqlParser::ExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitExpression(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::ExpressionContext* fugue_sqlParser::expression() {
  ExpressionContext *_localctx = _tracker.createInstance<ExpressionContext>(_ctx, getState());
  enterRule(_localctx, 338, fugue_sqlParser::RuleExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3136);
    booleanExpression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BooleanExpressionContext ------------------------------------------------------------------

fugue_sqlParser::BooleanExpressionContext::BooleanExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t fugue_sqlParser::BooleanExpressionContext::getRuleIndex() const {
  return fugue_sqlParser::RuleBooleanExpression;
}

void fugue_sqlParser::BooleanExpressionContext::copyFrom(BooleanExpressionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- LogicalNotContext ------------------------------------------------------------------

tree::TerminalNode* fugue_sqlParser::LogicalNotContext::NOT() {
  return getToken(fugue_sqlParser::NOT, 0);
}

fugue_sqlParser::BooleanExpressionContext* fugue_sqlParser::LogicalNotContext::booleanExpression() {
  return getRuleContext<fugue_sqlParser::BooleanExpressionContext>(0);
}

fugue_sqlParser::LogicalNotContext::LogicalNotContext(BooleanExpressionContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::LogicalNotContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitLogicalNot(this);
  else
    return visitor->visitChildren(this);
}
//----------------- PredicatedContext ------------------------------------------------------------------

fugue_sqlParser::ValueExpressionContext* fugue_sqlParser::PredicatedContext::valueExpression() {
  return getRuleContext<fugue_sqlParser::ValueExpressionContext>(0);
}

fugue_sqlParser::PredicateContext* fugue_sqlParser::PredicatedContext::predicate() {
  return getRuleContext<fugue_sqlParser::PredicateContext>(0);
}

fugue_sqlParser::PredicatedContext::PredicatedContext(BooleanExpressionContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::PredicatedContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitPredicated(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ExistsContext ------------------------------------------------------------------

tree::TerminalNode* fugue_sqlParser::ExistsContext::EXISTS() {
  return getToken(fugue_sqlParser::EXISTS, 0);
}

fugue_sqlParser::QueryContext* fugue_sqlParser::ExistsContext::query() {
  return getRuleContext<fugue_sqlParser::QueryContext>(0);
}

fugue_sqlParser::ExistsContext::ExistsContext(BooleanExpressionContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::ExistsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitExists(this);
  else
    return visitor->visitChildren(this);
}
//----------------- LogicalBinaryContext ------------------------------------------------------------------

std::vector<fugue_sqlParser::BooleanExpressionContext *> fugue_sqlParser::LogicalBinaryContext::booleanExpression() {
  return getRuleContexts<fugue_sqlParser::BooleanExpressionContext>();
}

fugue_sqlParser::BooleanExpressionContext* fugue_sqlParser::LogicalBinaryContext::booleanExpression(size_t i) {
  return getRuleContext<fugue_sqlParser::BooleanExpressionContext>(i);
}

tree::TerminalNode* fugue_sqlParser::LogicalBinaryContext::AND() {
  return getToken(fugue_sqlParser::AND, 0);
}

tree::TerminalNode* fugue_sqlParser::LogicalBinaryContext::OR() {
  return getToken(fugue_sqlParser::OR, 0);
}

fugue_sqlParser::LogicalBinaryContext::LogicalBinaryContext(BooleanExpressionContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::LogicalBinaryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitLogicalBinary(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::BooleanExpressionContext* fugue_sqlParser::booleanExpression() {
   return booleanExpression(0);
}

fugue_sqlParser::BooleanExpressionContext* fugue_sqlParser::booleanExpression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  fugue_sqlParser::BooleanExpressionContext *_localctx = _tracker.createInstance<BooleanExpressionContext>(_ctx, parentState);
  fugue_sqlParser::BooleanExpressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 340;
  enterRecursionRule(_localctx, 340, fugue_sqlParser::RuleBooleanExpression, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3150);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 422, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<LogicalNotContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;

      setState(3139);
      match(fugue_sqlParser::NOT);
      setState(3140);
      booleanExpression(5);
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<ExistsContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(3141);
      match(fugue_sqlParser::EXISTS);
      setState(3142);
      match(fugue_sqlParser::T__2);
      setState(3143);
      query();
      setState(3144);
      match(fugue_sqlParser::T__3);
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<PredicatedContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(3146);
      valueExpression(0);
      setState(3148);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 421, _ctx)) {
      case 1: {
        setState(3147);
        predicate();
        break;
      }

      default:
        break;
      }
      break;
    }

    default:
      break;
    }
    _ctx->stop = _input->LT(-1);
    setState(3160);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 424, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(3158);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 423, _ctx)) {
        case 1: {
          auto newContext = _tracker.createInstance<LogicalBinaryContext>(_tracker.createInstance<BooleanExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->left = previousContext;
          pushNewRecursionContext(newContext, startState, RuleBooleanExpression);
          setState(3152);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(3153);
          antlrcpp::downCast<LogicalBinaryContext *>(_localctx)->theOperator = match(fugue_sqlParser::AND);
          setState(3154);
          antlrcpp::downCast<LogicalBinaryContext *>(_localctx)->right = booleanExpression(3);
          break;
        }

        case 2: {
          auto newContext = _tracker.createInstance<LogicalBinaryContext>(_tracker.createInstance<BooleanExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->left = previousContext;
          pushNewRecursionContext(newContext, startState, RuleBooleanExpression);
          setState(3155);

          if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
          setState(3156);
          antlrcpp::downCast<LogicalBinaryContext *>(_localctx)->theOperator = match(fugue_sqlParser::OR);
          setState(3157);
          antlrcpp::downCast<LogicalBinaryContext *>(_localctx)->right = booleanExpression(2);
          break;
        }

        default:
          break;
        } 
      }
      setState(3162);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 424, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- PredicateContext ------------------------------------------------------------------

fugue_sqlParser::PredicateContext::PredicateContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* fugue_sqlParser::PredicateContext::AND() {
  return getToken(fugue_sqlParser::AND, 0);
}

tree::TerminalNode* fugue_sqlParser::PredicateContext::BETWEEN() {
  return getToken(fugue_sqlParser::BETWEEN, 0);
}

std::vector<fugue_sqlParser::ValueExpressionContext *> fugue_sqlParser::PredicateContext::valueExpression() {
  return getRuleContexts<fugue_sqlParser::ValueExpressionContext>();
}

fugue_sqlParser::ValueExpressionContext* fugue_sqlParser::PredicateContext::valueExpression(size_t i) {
  return getRuleContext<fugue_sqlParser::ValueExpressionContext>(i);
}

tree::TerminalNode* fugue_sqlParser::PredicateContext::NOT() {
  return getToken(fugue_sqlParser::NOT, 0);
}

std::vector<fugue_sqlParser::ExpressionContext *> fugue_sqlParser::PredicateContext::expression() {
  return getRuleContexts<fugue_sqlParser::ExpressionContext>();
}

fugue_sqlParser::ExpressionContext* fugue_sqlParser::PredicateContext::expression(size_t i) {
  return getRuleContext<fugue_sqlParser::ExpressionContext>(i);
}

tree::TerminalNode* fugue_sqlParser::PredicateContext::IN() {
  return getToken(fugue_sqlParser::IN, 0);
}

fugue_sqlParser::QueryContext* fugue_sqlParser::PredicateContext::query() {
  return getRuleContext<fugue_sqlParser::QueryContext>(0);
}

tree::TerminalNode* fugue_sqlParser::PredicateContext::RLIKE() {
  return getToken(fugue_sqlParser::RLIKE, 0);
}

tree::TerminalNode* fugue_sqlParser::PredicateContext::LIKE() {
  return getToken(fugue_sqlParser::LIKE, 0);
}

tree::TerminalNode* fugue_sqlParser::PredicateContext::ANY() {
  return getToken(fugue_sqlParser::ANY, 0);
}

tree::TerminalNode* fugue_sqlParser::PredicateContext::SOME() {
  return getToken(fugue_sqlParser::SOME, 0);
}

tree::TerminalNode* fugue_sqlParser::PredicateContext::ALL() {
  return getToken(fugue_sqlParser::ALL, 0);
}

tree::TerminalNode* fugue_sqlParser::PredicateContext::ESCAPE() {
  return getToken(fugue_sqlParser::ESCAPE, 0);
}

tree::TerminalNode* fugue_sqlParser::PredicateContext::STRING() {
  return getToken(fugue_sqlParser::STRING, 0);
}

tree::TerminalNode* fugue_sqlParser::PredicateContext::IS() {
  return getToken(fugue_sqlParser::IS, 0);
}

tree::TerminalNode* fugue_sqlParser::PredicateContext::THENULL() {
  return getToken(fugue_sqlParser::THENULL, 0);
}

tree::TerminalNode* fugue_sqlParser::PredicateContext::TRUE() {
  return getToken(fugue_sqlParser::TRUE, 0);
}

tree::TerminalNode* fugue_sqlParser::PredicateContext::FALSE() {
  return getToken(fugue_sqlParser::FALSE, 0);
}

tree::TerminalNode* fugue_sqlParser::PredicateContext::UNKNOWN() {
  return getToken(fugue_sqlParser::UNKNOWN, 0);
}

tree::TerminalNode* fugue_sqlParser::PredicateContext::FROM() {
  return getToken(fugue_sqlParser::FROM, 0);
}

tree::TerminalNode* fugue_sqlParser::PredicateContext::DISTINCT() {
  return getToken(fugue_sqlParser::DISTINCT, 0);
}


size_t fugue_sqlParser::PredicateContext::getRuleIndex() const {
  return fugue_sqlParser::RulePredicate;
}


antlrcpp::Any fugue_sqlParser::PredicateContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitPredicate(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::PredicateContext* fugue_sqlParser::predicate() {
  PredicateContext *_localctx = _tracker.createInstance<PredicateContext>(_ctx, getState());
  enterRule(_localctx, 342, fugue_sqlParser::RulePredicate);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3245);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 438, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3164);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::NOT) {
        setState(3163);
        match(fugue_sqlParser::NOT);
      }
      setState(3166);
      antlrcpp::downCast<PredicateContext *>(_localctx)->kind = match(fugue_sqlParser::BETWEEN);
      setState(3167);
      antlrcpp::downCast<PredicateContext *>(_localctx)->lower = valueExpression(0);
      setState(3168);
      match(fugue_sqlParser::AND);
      setState(3169);
      antlrcpp::downCast<PredicateContext *>(_localctx)->upper = valueExpression(0);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3172);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::NOT) {
        setState(3171);
        match(fugue_sqlParser::NOT);
      }
      setState(3174);
      antlrcpp::downCast<PredicateContext *>(_localctx)->kind = match(fugue_sqlParser::IN);
      setState(3175);
      match(fugue_sqlParser::T__2);
      setState(3176);
      expression();
      setState(3181);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == fugue_sqlParser::T__0) {
        setState(3177);
        match(fugue_sqlParser::T__0);
        setState(3178);
        expression();
        setState(3183);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(3184);
      match(fugue_sqlParser::T__3);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(3187);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::NOT) {
        setState(3186);
        match(fugue_sqlParser::NOT);
      }
      setState(3189);
      antlrcpp::downCast<PredicateContext *>(_localctx)->kind = match(fugue_sqlParser::IN);
      setState(3190);
      match(fugue_sqlParser::T__2);
      setState(3191);
      query();
      setState(3192);
      match(fugue_sqlParser::T__3);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(3195);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::NOT) {
        setState(3194);
        match(fugue_sqlParser::NOT);
      }
      setState(3197);
      antlrcpp::downCast<PredicateContext *>(_localctx)->kind = match(fugue_sqlParser::RLIKE);
      setState(3198);
      antlrcpp::downCast<PredicateContext *>(_localctx)->pattern = valueExpression(0);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(3200);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::NOT) {
        setState(3199);
        match(fugue_sqlParser::NOT);
      }
      setState(3202);
      antlrcpp::downCast<PredicateContext *>(_localctx)->kind = match(fugue_sqlParser::LIKE);
      setState(3203);
      antlrcpp::downCast<PredicateContext *>(_localctx)->quantifier = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == fugue_sqlParser::ALL

      || _la == fugue_sqlParser::ANY || _la == fugue_sqlParser::SOME)) {
        antlrcpp::downCast<PredicateContext *>(_localctx)->quantifier = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(3217);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 432, _ctx)) {
      case 1: {
        setState(3204);
        match(fugue_sqlParser::T__2);
        setState(3205);
        match(fugue_sqlParser::T__3);
        break;
      }

      case 2: {
        setState(3206);
        match(fugue_sqlParser::T__2);
        setState(3207);
        expression();
        setState(3212);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == fugue_sqlParser::T__0) {
          setState(3208);
          match(fugue_sqlParser::T__0);
          setState(3209);
          expression();
          setState(3214);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(3215);
        match(fugue_sqlParser::T__3);
        break;
      }

      default:
        break;
      }
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(3220);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::NOT) {
        setState(3219);
        match(fugue_sqlParser::NOT);
      }
      setState(3222);
      antlrcpp::downCast<PredicateContext *>(_localctx)->kind = match(fugue_sqlParser::LIKE);
      setState(3223);
      antlrcpp::downCast<PredicateContext *>(_localctx)->pattern = valueExpression(0);
      setState(3226);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 434, _ctx)) {
      case 1: {
        setState(3224);
        match(fugue_sqlParser::ESCAPE);
        setState(3225);
        antlrcpp::downCast<PredicateContext *>(_localctx)->escapeChar = match(fugue_sqlParser::STRING);
        break;
      }

      default:
        break;
      }
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(3228);
      match(fugue_sqlParser::IS);
      setState(3230);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::NOT) {
        setState(3229);
        match(fugue_sqlParser::NOT);
      }
      setState(3232);
      antlrcpp::downCast<PredicateContext *>(_localctx)->kind = match(fugue_sqlParser::THENULL);
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(3233);
      match(fugue_sqlParser::IS);
      setState(3235);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::NOT) {
        setState(3234);
        match(fugue_sqlParser::NOT);
      }
      setState(3237);
      antlrcpp::downCast<PredicateContext *>(_localctx)->kind = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == fugue_sqlParser::FALSE || _la == fugue_sqlParser::TRUE

      || _la == fugue_sqlParser::UNKNOWN)) {
        antlrcpp::downCast<PredicateContext *>(_localctx)->kind = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(3238);
      match(fugue_sqlParser::IS);
      setState(3240);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::NOT) {
        setState(3239);
        match(fugue_sqlParser::NOT);
      }
      setState(3242);
      antlrcpp::downCast<PredicateContext *>(_localctx)->kind = match(fugue_sqlParser::DISTINCT);
      setState(3243);
      match(fugue_sqlParser::FROM);
      setState(3244);
      antlrcpp::downCast<PredicateContext *>(_localctx)->right = valueExpression(0);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ValueExpressionContext ------------------------------------------------------------------

fugue_sqlParser::ValueExpressionContext::ValueExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t fugue_sqlParser::ValueExpressionContext::getRuleIndex() const {
  return fugue_sqlParser::RuleValueExpression;
}

void fugue_sqlParser::ValueExpressionContext::copyFrom(ValueExpressionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- ValueExpressionDefaultContext ------------------------------------------------------------------

fugue_sqlParser::PrimaryExpressionContext* fugue_sqlParser::ValueExpressionDefaultContext::primaryExpression() {
  return getRuleContext<fugue_sqlParser::PrimaryExpressionContext>(0);
}

fugue_sqlParser::ValueExpressionDefaultContext::ValueExpressionDefaultContext(ValueExpressionContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::ValueExpressionDefaultContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitValueExpressionDefault(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ComparisonContext ------------------------------------------------------------------

fugue_sqlParser::ComparisonOperatorContext* fugue_sqlParser::ComparisonContext::comparisonOperator() {
  return getRuleContext<fugue_sqlParser::ComparisonOperatorContext>(0);
}

std::vector<fugue_sqlParser::ValueExpressionContext *> fugue_sqlParser::ComparisonContext::valueExpression() {
  return getRuleContexts<fugue_sqlParser::ValueExpressionContext>();
}

fugue_sqlParser::ValueExpressionContext* fugue_sqlParser::ComparisonContext::valueExpression(size_t i) {
  return getRuleContext<fugue_sqlParser::ValueExpressionContext>(i);
}

fugue_sqlParser::ComparisonContext::ComparisonContext(ValueExpressionContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::ComparisonContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitComparison(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ArithmeticBinaryContext ------------------------------------------------------------------

std::vector<fugue_sqlParser::ValueExpressionContext *> fugue_sqlParser::ArithmeticBinaryContext::valueExpression() {
  return getRuleContexts<fugue_sqlParser::ValueExpressionContext>();
}

fugue_sqlParser::ValueExpressionContext* fugue_sqlParser::ArithmeticBinaryContext::valueExpression(size_t i) {
  return getRuleContext<fugue_sqlParser::ValueExpressionContext>(i);
}

tree::TerminalNode* fugue_sqlParser::ArithmeticBinaryContext::ASTERISK() {
  return getToken(fugue_sqlParser::ASTERISK, 0);
}

tree::TerminalNode* fugue_sqlParser::ArithmeticBinaryContext::SLASH() {
  return getToken(fugue_sqlParser::SLASH, 0);
}

tree::TerminalNode* fugue_sqlParser::ArithmeticBinaryContext::PERCENT() {
  return getToken(fugue_sqlParser::PERCENT, 0);
}

tree::TerminalNode* fugue_sqlParser::ArithmeticBinaryContext::DIV() {
  return getToken(fugue_sqlParser::DIV, 0);
}

tree::TerminalNode* fugue_sqlParser::ArithmeticBinaryContext::PLUS() {
  return getToken(fugue_sqlParser::PLUS, 0);
}

tree::TerminalNode* fugue_sqlParser::ArithmeticBinaryContext::MINUS() {
  return getToken(fugue_sqlParser::MINUS, 0);
}

tree::TerminalNode* fugue_sqlParser::ArithmeticBinaryContext::CONCAT_PIPE() {
  return getToken(fugue_sqlParser::CONCAT_PIPE, 0);
}

tree::TerminalNode* fugue_sqlParser::ArithmeticBinaryContext::AMPERSAND() {
  return getToken(fugue_sqlParser::AMPERSAND, 0);
}

tree::TerminalNode* fugue_sqlParser::ArithmeticBinaryContext::HAT() {
  return getToken(fugue_sqlParser::HAT, 0);
}

tree::TerminalNode* fugue_sqlParser::ArithmeticBinaryContext::PIPE() {
  return getToken(fugue_sqlParser::PIPE, 0);
}

fugue_sqlParser::ArithmeticBinaryContext::ArithmeticBinaryContext(ValueExpressionContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::ArithmeticBinaryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitArithmeticBinary(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ArithmeticUnaryContext ------------------------------------------------------------------

fugue_sqlParser::ValueExpressionContext* fugue_sqlParser::ArithmeticUnaryContext::valueExpression() {
  return getRuleContext<fugue_sqlParser::ValueExpressionContext>(0);
}

tree::TerminalNode* fugue_sqlParser::ArithmeticUnaryContext::MINUS() {
  return getToken(fugue_sqlParser::MINUS, 0);
}

tree::TerminalNode* fugue_sqlParser::ArithmeticUnaryContext::PLUS() {
  return getToken(fugue_sqlParser::PLUS, 0);
}

tree::TerminalNode* fugue_sqlParser::ArithmeticUnaryContext::TILDE() {
  return getToken(fugue_sqlParser::TILDE, 0);
}

fugue_sqlParser::ArithmeticUnaryContext::ArithmeticUnaryContext(ValueExpressionContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::ArithmeticUnaryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitArithmeticUnary(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::ValueExpressionContext* fugue_sqlParser::valueExpression() {
   return valueExpression(0);
}

fugue_sqlParser::ValueExpressionContext* fugue_sqlParser::valueExpression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  fugue_sqlParser::ValueExpressionContext *_localctx = _tracker.createInstance<ValueExpressionContext>(_ctx, parentState);
  fugue_sqlParser::ValueExpressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 344;
  enterRecursionRule(_localctx, 344, fugue_sqlParser::RuleValueExpression, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3251);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 439, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<ValueExpressionDefaultContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;

      setState(3248);
      primaryExpression(0);
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<ArithmeticUnaryContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(3249);
      antlrcpp::downCast<ArithmeticUnaryContext *>(_localctx)->theOperator = _input->LT(1);
      _la = _input->LA(1);
      if (!(((((_la - 314) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 314)) & ((1ULL << (fugue_sqlParser::PLUS - 314))
        | (1ULL << (fugue_sqlParser::MINUS - 314))
        | (1ULL << (fugue_sqlParser::TILDE - 314)))) != 0))) {
        antlrcpp::downCast<ArithmeticUnaryContext *>(_localctx)->theOperator = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(3250);
      valueExpression(7);
      break;
    }

    default:
      break;
    }
    _ctx->stop = _input->LT(-1);
    setState(3274);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 441, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(3272);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 440, _ctx)) {
        case 1: {
          auto newContext = _tracker.createInstance<ArithmeticBinaryContext>(_tracker.createInstance<ValueExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->left = previousContext;
          pushNewRecursionContext(newContext, startState, RuleValueExpression);
          setState(3253);

          if (!(precpred(_ctx, 6))) throw FailedPredicateException(this, "precpred(_ctx, 6)");
          setState(3254);
          antlrcpp::downCast<ArithmeticBinaryContext *>(_localctx)->theOperator = _input->LT(1);
          _la = _input->LA(1);
          if (!(((((_la - 316) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 316)) & ((1ULL << (fugue_sqlParser::ASTERISK - 316))
            | (1ULL << (fugue_sqlParser::SLASH - 316))
            | (1ULL << (fugue_sqlParser::PERCENT - 316))
            | (1ULL << (fugue_sqlParser::DIV - 316)))) != 0))) {
            antlrcpp::downCast<ArithmeticBinaryContext *>(_localctx)->theOperator = _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
          setState(3255);
          antlrcpp::downCast<ArithmeticBinaryContext *>(_localctx)->right = valueExpression(7);
          break;
        }

        case 2: {
          auto newContext = _tracker.createInstance<ArithmeticBinaryContext>(_tracker.createInstance<ValueExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->left = previousContext;
          pushNewRecursionContext(newContext, startState, RuleValueExpression);
          setState(3256);

          if (!(precpred(_ctx, 5))) throw FailedPredicateException(this, "precpred(_ctx, 5)");
          setState(3257);
          antlrcpp::downCast<ArithmeticBinaryContext *>(_localctx)->theOperator = _input->LT(1);
          _la = _input->LA(1);
          if (!(((((_la - 314) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 314)) & ((1ULL << (fugue_sqlParser::PLUS - 314))
            | (1ULL << (fugue_sqlParser::MINUS - 314))
            | (1ULL << (fugue_sqlParser::CONCAT_PIPE - 314)))) != 0))) {
            antlrcpp::downCast<ArithmeticBinaryContext *>(_localctx)->theOperator = _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
          setState(3258);
          antlrcpp::downCast<ArithmeticBinaryContext *>(_localctx)->right = valueExpression(6);
          break;
        }

        case 3: {
          auto newContext = _tracker.createInstance<ArithmeticBinaryContext>(_tracker.createInstance<ValueExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->left = previousContext;
          pushNewRecursionContext(newContext, startState, RuleValueExpression);
          setState(3259);

          if (!(precpred(_ctx, 4))) throw FailedPredicateException(this, "precpred(_ctx, 4)");
          setState(3260);
          antlrcpp::downCast<ArithmeticBinaryContext *>(_localctx)->theOperator = match(fugue_sqlParser::AMPERSAND);
          setState(3261);
          antlrcpp::downCast<ArithmeticBinaryContext *>(_localctx)->right = valueExpression(5);
          break;
        }

        case 4: {
          auto newContext = _tracker.createInstance<ArithmeticBinaryContext>(_tracker.createInstance<ValueExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->left = previousContext;
          pushNewRecursionContext(newContext, startState, RuleValueExpression);
          setState(3262);

          if (!(precpred(_ctx, 3))) throw FailedPredicateException(this, "precpred(_ctx, 3)");
          setState(3263);
          antlrcpp::downCast<ArithmeticBinaryContext *>(_localctx)->theOperator = match(fugue_sqlParser::HAT);
          setState(3264);
          antlrcpp::downCast<ArithmeticBinaryContext *>(_localctx)->right = valueExpression(4);
          break;
        }

        case 5: {
          auto newContext = _tracker.createInstance<ArithmeticBinaryContext>(_tracker.createInstance<ValueExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->left = previousContext;
          pushNewRecursionContext(newContext, startState, RuleValueExpression);
          setState(3265);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(3266);
          antlrcpp::downCast<ArithmeticBinaryContext *>(_localctx)->theOperator = match(fugue_sqlParser::PIPE);
          setState(3267);
          antlrcpp::downCast<ArithmeticBinaryContext *>(_localctx)->right = valueExpression(3);
          break;
        }

        case 6: {
          auto newContext = _tracker.createInstance<ComparisonContext>(_tracker.createInstance<ValueExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->left = previousContext;
          pushNewRecursionContext(newContext, startState, RuleValueExpression);
          setState(3268);

          if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
          setState(3269);
          comparisonOperator();
          setState(3270);
          antlrcpp::downCast<ComparisonContext *>(_localctx)->right = valueExpression(2);
          break;
        }

        default:
          break;
        } 
      }
      setState(3276);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 441, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- PrimaryExpressionContext ------------------------------------------------------------------

fugue_sqlParser::PrimaryExpressionContext::PrimaryExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t fugue_sqlParser::PrimaryExpressionContext::getRuleIndex() const {
  return fugue_sqlParser::RulePrimaryExpression;
}

void fugue_sqlParser::PrimaryExpressionContext::copyFrom(PrimaryExpressionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- StructContext ------------------------------------------------------------------

tree::TerminalNode* fugue_sqlParser::StructContext::STRUCT() {
  return getToken(fugue_sqlParser::STRUCT, 0);
}

std::vector<fugue_sqlParser::NamedExpressionContext *> fugue_sqlParser::StructContext::namedExpression() {
  return getRuleContexts<fugue_sqlParser::NamedExpressionContext>();
}

fugue_sqlParser::NamedExpressionContext* fugue_sqlParser::StructContext::namedExpression(size_t i) {
  return getRuleContext<fugue_sqlParser::NamedExpressionContext>(i);
}

fugue_sqlParser::StructContext::StructContext(PrimaryExpressionContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::StructContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitStruct(this);
  else
    return visitor->visitChildren(this);
}
//----------------- DereferenceContext ------------------------------------------------------------------

fugue_sqlParser::PrimaryExpressionContext* fugue_sqlParser::DereferenceContext::primaryExpression() {
  return getRuleContext<fugue_sqlParser::PrimaryExpressionContext>(0);
}

fugue_sqlParser::IdentifierContext* fugue_sqlParser::DereferenceContext::identifier() {
  return getRuleContext<fugue_sqlParser::IdentifierContext>(0);
}

fugue_sqlParser::DereferenceContext::DereferenceContext(PrimaryExpressionContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::DereferenceContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitDereference(this);
  else
    return visitor->visitChildren(this);
}
//----------------- SimpleCaseContext ------------------------------------------------------------------

tree::TerminalNode* fugue_sqlParser::SimpleCaseContext::CASE() {
  return getToken(fugue_sqlParser::CASE, 0);
}

tree::TerminalNode* fugue_sqlParser::SimpleCaseContext::END() {
  return getToken(fugue_sqlParser::END, 0);
}

std::vector<fugue_sqlParser::ExpressionContext *> fugue_sqlParser::SimpleCaseContext::expression() {
  return getRuleContexts<fugue_sqlParser::ExpressionContext>();
}

fugue_sqlParser::ExpressionContext* fugue_sqlParser::SimpleCaseContext::expression(size_t i) {
  return getRuleContext<fugue_sqlParser::ExpressionContext>(i);
}

std::vector<fugue_sqlParser::WhenClauseContext *> fugue_sqlParser::SimpleCaseContext::whenClause() {
  return getRuleContexts<fugue_sqlParser::WhenClauseContext>();
}

fugue_sqlParser::WhenClauseContext* fugue_sqlParser::SimpleCaseContext::whenClause(size_t i) {
  return getRuleContext<fugue_sqlParser::WhenClauseContext>(i);
}

tree::TerminalNode* fugue_sqlParser::SimpleCaseContext::ELSE() {
  return getToken(fugue_sqlParser::ELSE, 0);
}

fugue_sqlParser::SimpleCaseContext::SimpleCaseContext(PrimaryExpressionContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::SimpleCaseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitSimpleCase(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnReferenceContext ------------------------------------------------------------------

fugue_sqlParser::IdentifierContext* fugue_sqlParser::ColumnReferenceContext::identifier() {
  return getRuleContext<fugue_sqlParser::IdentifierContext>(0);
}

fugue_sqlParser::ColumnReferenceContext::ColumnReferenceContext(PrimaryExpressionContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::ColumnReferenceContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitColumnReference(this);
  else
    return visitor->visitChildren(this);
}
//----------------- RowConstructorContext ------------------------------------------------------------------

std::vector<fugue_sqlParser::NamedExpressionContext *> fugue_sqlParser::RowConstructorContext::namedExpression() {
  return getRuleContexts<fugue_sqlParser::NamedExpressionContext>();
}

fugue_sqlParser::NamedExpressionContext* fugue_sqlParser::RowConstructorContext::namedExpression(size_t i) {
  return getRuleContext<fugue_sqlParser::NamedExpressionContext>(i);
}

fugue_sqlParser::RowConstructorContext::RowConstructorContext(PrimaryExpressionContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::RowConstructorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitRowConstructor(this);
  else
    return visitor->visitChildren(this);
}
//----------------- LastContext ------------------------------------------------------------------

tree::TerminalNode* fugue_sqlParser::LastContext::LAST() {
  return getToken(fugue_sqlParser::LAST, 0);
}

fugue_sqlParser::ExpressionContext* fugue_sqlParser::LastContext::expression() {
  return getRuleContext<fugue_sqlParser::ExpressionContext>(0);
}

tree::TerminalNode* fugue_sqlParser::LastContext::IGNORE() {
  return getToken(fugue_sqlParser::IGNORE, 0);
}

tree::TerminalNode* fugue_sqlParser::LastContext::THENULLS() {
  return getToken(fugue_sqlParser::THENULLS, 0);
}

fugue_sqlParser::LastContext::LastContext(PrimaryExpressionContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::LastContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitLast(this);
  else
    return visitor->visitChildren(this);
}
//----------------- StarContext ------------------------------------------------------------------

tree::TerminalNode* fugue_sqlParser::StarContext::ASTERISK() {
  return getToken(fugue_sqlParser::ASTERISK, 0);
}

fugue_sqlParser::QualifiedNameContext* fugue_sqlParser::StarContext::qualifiedName() {
  return getRuleContext<fugue_sqlParser::QualifiedNameContext>(0);
}

fugue_sqlParser::StarContext::StarContext(PrimaryExpressionContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::StarContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitStar(this);
  else
    return visitor->visitChildren(this);
}
//----------------- OverlayContext ------------------------------------------------------------------

tree::TerminalNode* fugue_sqlParser::OverlayContext::OVERLAY() {
  return getToken(fugue_sqlParser::OVERLAY, 0);
}

tree::TerminalNode* fugue_sqlParser::OverlayContext::PLACING() {
  return getToken(fugue_sqlParser::PLACING, 0);
}

tree::TerminalNode* fugue_sqlParser::OverlayContext::FROM() {
  return getToken(fugue_sqlParser::FROM, 0);
}

std::vector<fugue_sqlParser::ValueExpressionContext *> fugue_sqlParser::OverlayContext::valueExpression() {
  return getRuleContexts<fugue_sqlParser::ValueExpressionContext>();
}

fugue_sqlParser::ValueExpressionContext* fugue_sqlParser::OverlayContext::valueExpression(size_t i) {
  return getRuleContext<fugue_sqlParser::ValueExpressionContext>(i);
}

tree::TerminalNode* fugue_sqlParser::OverlayContext::FOR() {
  return getToken(fugue_sqlParser::FOR, 0);
}

fugue_sqlParser::OverlayContext::OverlayContext(PrimaryExpressionContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::OverlayContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitOverlay(this);
  else
    return visitor->visitChildren(this);
}
//----------------- SubscriptContext ------------------------------------------------------------------

fugue_sqlParser::PrimaryExpressionContext* fugue_sqlParser::SubscriptContext::primaryExpression() {
  return getRuleContext<fugue_sqlParser::PrimaryExpressionContext>(0);
}

fugue_sqlParser::ValueExpressionContext* fugue_sqlParser::SubscriptContext::valueExpression() {
  return getRuleContext<fugue_sqlParser::ValueExpressionContext>(0);
}

fugue_sqlParser::SubscriptContext::SubscriptContext(PrimaryExpressionContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::SubscriptContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitSubscript(this);
  else
    return visitor->visitChildren(this);
}
//----------------- SubqueryExpressionContext ------------------------------------------------------------------

fugue_sqlParser::QueryContext* fugue_sqlParser::SubqueryExpressionContext::query() {
  return getRuleContext<fugue_sqlParser::QueryContext>(0);
}

fugue_sqlParser::SubqueryExpressionContext::SubqueryExpressionContext(PrimaryExpressionContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::SubqueryExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitSubqueryExpression(this);
  else
    return visitor->visitChildren(this);
}
//----------------- SubstringContext ------------------------------------------------------------------

tree::TerminalNode* fugue_sqlParser::SubstringContext::SUBSTR() {
  return getToken(fugue_sqlParser::SUBSTR, 0);
}

tree::TerminalNode* fugue_sqlParser::SubstringContext::SUBSTRING() {
  return getToken(fugue_sqlParser::SUBSTRING, 0);
}

std::vector<fugue_sqlParser::ValueExpressionContext *> fugue_sqlParser::SubstringContext::valueExpression() {
  return getRuleContexts<fugue_sqlParser::ValueExpressionContext>();
}

fugue_sqlParser::ValueExpressionContext* fugue_sqlParser::SubstringContext::valueExpression(size_t i) {
  return getRuleContext<fugue_sqlParser::ValueExpressionContext>(i);
}

tree::TerminalNode* fugue_sqlParser::SubstringContext::FROM() {
  return getToken(fugue_sqlParser::FROM, 0);
}

tree::TerminalNode* fugue_sqlParser::SubstringContext::FOR() {
  return getToken(fugue_sqlParser::FOR, 0);
}

fugue_sqlParser::SubstringContext::SubstringContext(PrimaryExpressionContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::SubstringContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitSubstring(this);
  else
    return visitor->visitChildren(this);
}
//----------------- CurrentDatetimeContext ------------------------------------------------------------------

tree::TerminalNode* fugue_sqlParser::CurrentDatetimeContext::CURRENT_DATE() {
  return getToken(fugue_sqlParser::CURRENT_DATE, 0);
}

tree::TerminalNode* fugue_sqlParser::CurrentDatetimeContext::CURRENT_TIMESTAMP() {
  return getToken(fugue_sqlParser::CURRENT_TIMESTAMP, 0);
}

fugue_sqlParser::CurrentDatetimeContext::CurrentDatetimeContext(PrimaryExpressionContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::CurrentDatetimeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitCurrentDatetime(this);
  else
    return visitor->visitChildren(this);
}
//----------------- CastContext ------------------------------------------------------------------

tree::TerminalNode* fugue_sqlParser::CastContext::CAST() {
  return getToken(fugue_sqlParser::CAST, 0);
}

fugue_sqlParser::ExpressionContext* fugue_sqlParser::CastContext::expression() {
  return getRuleContext<fugue_sqlParser::ExpressionContext>(0);
}

tree::TerminalNode* fugue_sqlParser::CastContext::AS() {
  return getToken(fugue_sqlParser::AS, 0);
}

fugue_sqlParser::DataTypeContext* fugue_sqlParser::CastContext::dataType() {
  return getRuleContext<fugue_sqlParser::DataTypeContext>(0);
}

fugue_sqlParser::CastContext::CastContext(PrimaryExpressionContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::CastContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitCast(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ConstantDefaultContext ------------------------------------------------------------------

fugue_sqlParser::ConstantContext* fugue_sqlParser::ConstantDefaultContext::constant() {
  return getRuleContext<fugue_sqlParser::ConstantContext>(0);
}

fugue_sqlParser::ConstantDefaultContext::ConstantDefaultContext(PrimaryExpressionContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::ConstantDefaultContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitConstantDefault(this);
  else
    return visitor->visitChildren(this);
}
//----------------- LambdaContext ------------------------------------------------------------------

std::vector<fugue_sqlParser::IdentifierContext *> fugue_sqlParser::LambdaContext::identifier() {
  return getRuleContexts<fugue_sqlParser::IdentifierContext>();
}

fugue_sqlParser::IdentifierContext* fugue_sqlParser::LambdaContext::identifier(size_t i) {
  return getRuleContext<fugue_sqlParser::IdentifierContext>(i);
}

fugue_sqlParser::ExpressionContext* fugue_sqlParser::LambdaContext::expression() {
  return getRuleContext<fugue_sqlParser::ExpressionContext>(0);
}

fugue_sqlParser::LambdaContext::LambdaContext(PrimaryExpressionContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::LambdaContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitLambda(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ParenthesizedExpressionContext ------------------------------------------------------------------

fugue_sqlParser::ExpressionContext* fugue_sqlParser::ParenthesizedExpressionContext::expression() {
  return getRuleContext<fugue_sqlParser::ExpressionContext>(0);
}

fugue_sqlParser::ParenthesizedExpressionContext::ParenthesizedExpressionContext(PrimaryExpressionContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::ParenthesizedExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitParenthesizedExpression(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ExtractContext ------------------------------------------------------------------

tree::TerminalNode* fugue_sqlParser::ExtractContext::EXTRACT() {
  return getToken(fugue_sqlParser::EXTRACT, 0);
}

tree::TerminalNode* fugue_sqlParser::ExtractContext::FROM() {
  return getToken(fugue_sqlParser::FROM, 0);
}

fugue_sqlParser::IdentifierContext* fugue_sqlParser::ExtractContext::identifier() {
  return getRuleContext<fugue_sqlParser::IdentifierContext>(0);
}

fugue_sqlParser::ValueExpressionContext* fugue_sqlParser::ExtractContext::valueExpression() {
  return getRuleContext<fugue_sqlParser::ValueExpressionContext>(0);
}

fugue_sqlParser::ExtractContext::ExtractContext(PrimaryExpressionContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::ExtractContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitExtract(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TrimContext ------------------------------------------------------------------

tree::TerminalNode* fugue_sqlParser::TrimContext::TRIM() {
  return getToken(fugue_sqlParser::TRIM, 0);
}

tree::TerminalNode* fugue_sqlParser::TrimContext::FROM() {
  return getToken(fugue_sqlParser::FROM, 0);
}

std::vector<fugue_sqlParser::ValueExpressionContext *> fugue_sqlParser::TrimContext::valueExpression() {
  return getRuleContexts<fugue_sqlParser::ValueExpressionContext>();
}

fugue_sqlParser::ValueExpressionContext* fugue_sqlParser::TrimContext::valueExpression(size_t i) {
  return getRuleContext<fugue_sqlParser::ValueExpressionContext>(i);
}

tree::TerminalNode* fugue_sqlParser::TrimContext::BOTH() {
  return getToken(fugue_sqlParser::BOTH, 0);
}

tree::TerminalNode* fugue_sqlParser::TrimContext::LEADING() {
  return getToken(fugue_sqlParser::LEADING, 0);
}

tree::TerminalNode* fugue_sqlParser::TrimContext::TRAILING() {
  return getToken(fugue_sqlParser::TRAILING, 0);
}

fugue_sqlParser::TrimContext::TrimContext(PrimaryExpressionContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::TrimContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitTrim(this);
  else
    return visitor->visitChildren(this);
}
//----------------- FunctionCallContext ------------------------------------------------------------------

fugue_sqlParser::FunctionNameContext* fugue_sqlParser::FunctionCallContext::functionName() {
  return getRuleContext<fugue_sqlParser::FunctionNameContext>(0);
}

tree::TerminalNode* fugue_sqlParser::FunctionCallContext::FILTER() {
  return getToken(fugue_sqlParser::FILTER, 0);
}

tree::TerminalNode* fugue_sqlParser::FunctionCallContext::WHERE() {
  return getToken(fugue_sqlParser::WHERE, 0);
}

tree::TerminalNode* fugue_sqlParser::FunctionCallContext::OVER() {
  return getToken(fugue_sqlParser::OVER, 0);
}

fugue_sqlParser::WindowSpecContext* fugue_sqlParser::FunctionCallContext::windowSpec() {
  return getRuleContext<fugue_sqlParser::WindowSpecContext>(0);
}

std::vector<fugue_sqlParser::ExpressionContext *> fugue_sqlParser::FunctionCallContext::expression() {
  return getRuleContexts<fugue_sqlParser::ExpressionContext>();
}

fugue_sqlParser::ExpressionContext* fugue_sqlParser::FunctionCallContext::expression(size_t i) {
  return getRuleContext<fugue_sqlParser::ExpressionContext>(i);
}

fugue_sqlParser::BooleanExpressionContext* fugue_sqlParser::FunctionCallContext::booleanExpression() {
  return getRuleContext<fugue_sqlParser::BooleanExpressionContext>(0);
}

fugue_sqlParser::SetQuantifierContext* fugue_sqlParser::FunctionCallContext::setQuantifier() {
  return getRuleContext<fugue_sqlParser::SetQuantifierContext>(0);
}

fugue_sqlParser::FunctionCallContext::FunctionCallContext(PrimaryExpressionContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::FunctionCallContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitFunctionCall(this);
  else
    return visitor->visitChildren(this);
}
//----------------- SearchedCaseContext ------------------------------------------------------------------

tree::TerminalNode* fugue_sqlParser::SearchedCaseContext::CASE() {
  return getToken(fugue_sqlParser::CASE, 0);
}

tree::TerminalNode* fugue_sqlParser::SearchedCaseContext::END() {
  return getToken(fugue_sqlParser::END, 0);
}

std::vector<fugue_sqlParser::WhenClauseContext *> fugue_sqlParser::SearchedCaseContext::whenClause() {
  return getRuleContexts<fugue_sqlParser::WhenClauseContext>();
}

fugue_sqlParser::WhenClauseContext* fugue_sqlParser::SearchedCaseContext::whenClause(size_t i) {
  return getRuleContext<fugue_sqlParser::WhenClauseContext>(i);
}

tree::TerminalNode* fugue_sqlParser::SearchedCaseContext::ELSE() {
  return getToken(fugue_sqlParser::ELSE, 0);
}

fugue_sqlParser::ExpressionContext* fugue_sqlParser::SearchedCaseContext::expression() {
  return getRuleContext<fugue_sqlParser::ExpressionContext>(0);
}

fugue_sqlParser::SearchedCaseContext::SearchedCaseContext(PrimaryExpressionContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::SearchedCaseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitSearchedCase(this);
  else
    return visitor->visitChildren(this);
}
//----------------- PositionContext ------------------------------------------------------------------

tree::TerminalNode* fugue_sqlParser::PositionContext::POSITION() {
  return getToken(fugue_sqlParser::POSITION, 0);
}

tree::TerminalNode* fugue_sqlParser::PositionContext::IN() {
  return getToken(fugue_sqlParser::IN, 0);
}

std::vector<fugue_sqlParser::ValueExpressionContext *> fugue_sqlParser::PositionContext::valueExpression() {
  return getRuleContexts<fugue_sqlParser::ValueExpressionContext>();
}

fugue_sqlParser::ValueExpressionContext* fugue_sqlParser::PositionContext::valueExpression(size_t i) {
  return getRuleContext<fugue_sqlParser::ValueExpressionContext>(i);
}

fugue_sqlParser::PositionContext::PositionContext(PrimaryExpressionContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::PositionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitPosition(this);
  else
    return visitor->visitChildren(this);
}
//----------------- FirstContext ------------------------------------------------------------------

tree::TerminalNode* fugue_sqlParser::FirstContext::FIRST() {
  return getToken(fugue_sqlParser::FIRST, 0);
}

fugue_sqlParser::ExpressionContext* fugue_sqlParser::FirstContext::expression() {
  return getRuleContext<fugue_sqlParser::ExpressionContext>(0);
}

tree::TerminalNode* fugue_sqlParser::FirstContext::IGNORE() {
  return getToken(fugue_sqlParser::IGNORE, 0);
}

tree::TerminalNode* fugue_sqlParser::FirstContext::THENULLS() {
  return getToken(fugue_sqlParser::THENULLS, 0);
}

fugue_sqlParser::FirstContext::FirstContext(PrimaryExpressionContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::FirstContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitFirst(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::PrimaryExpressionContext* fugue_sqlParser::primaryExpression() {
   return primaryExpression(0);
}

fugue_sqlParser::PrimaryExpressionContext* fugue_sqlParser::primaryExpression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  fugue_sqlParser::PrimaryExpressionContext *_localctx = _tracker.createInstance<PrimaryExpressionContext>(_ctx, parentState);
  fugue_sqlParser::PrimaryExpressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 346;
  enterRecursionRule(_localctx, 346, fugue_sqlParser::RulePrimaryExpression, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3461);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 461, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<CurrentDatetimeContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;

      setState(3278);
      antlrcpp::downCast<CurrentDatetimeContext *>(_localctx)->name = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == fugue_sqlParser::CURRENT_DATE

      || _la == fugue_sqlParser::CURRENT_TIMESTAMP)) {
        antlrcpp::downCast<CurrentDatetimeContext *>(_localctx)->name = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<SearchedCaseContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(3279);
      match(fugue_sqlParser::CASE);
      setState(3281); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(3280);
        whenClause();
        setState(3283); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (_la == fugue_sqlParser::WHEN);
      setState(3287);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::ELSE) {
        setState(3285);
        match(fugue_sqlParser::ELSE);
        setState(3286);
        antlrcpp::downCast<SearchedCaseContext *>(_localctx)->elseExpression = expression();
      }
      setState(3289);
      match(fugue_sqlParser::END);
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<SimpleCaseContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(3291);
      match(fugue_sqlParser::CASE);
      setState(3292);
      antlrcpp::downCast<SimpleCaseContext *>(_localctx)->value = expression();
      setState(3294); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(3293);
        whenClause();
        setState(3296); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (_la == fugue_sqlParser::WHEN);
      setState(3300);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::ELSE) {
        setState(3298);
        match(fugue_sqlParser::ELSE);
        setState(3299);
        antlrcpp::downCast<SimpleCaseContext *>(_localctx)->elseExpression = expression();
      }
      setState(3302);
      match(fugue_sqlParser::END);
      break;
    }

    case 4: {
      _localctx = _tracker.createInstance<CastContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(3304);
      match(fugue_sqlParser::CAST);
      setState(3305);
      match(fugue_sqlParser::T__2);
      setState(3306);
      expression();
      setState(3307);
      match(fugue_sqlParser::AS);
      setState(3308);
      dataType();
      setState(3309);
      match(fugue_sqlParser::T__3);
      break;
    }

    case 5: {
      _localctx = _tracker.createInstance<StructContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(3311);
      match(fugue_sqlParser::STRUCT);
      setState(3312);
      match(fugue_sqlParser::T__2);
      setState(3321);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & ((1ULL << fugue_sqlParser::T__2)
        | (1ULL << fugue_sqlParser::ADD)
        | (1ULL << fugue_sqlParser::AFTER)
        | (1ULL << fugue_sqlParser::ALL)
        | (1ULL << fugue_sqlParser::ALTER)
        | (1ULL << fugue_sqlParser::ANALYZE)
        | (1ULL << fugue_sqlParser::AND)
        | (1ULL << fugue_sqlParser::ANTI)
        | (1ULL << fugue_sqlParser::ANY)
        | (1ULL << fugue_sqlParser::ARCHIVE)
        | (1ULL << fugue_sqlParser::ARRAY)
        | (1ULL << fugue_sqlParser::AS))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & ((1ULL << (fugue_sqlParser::ASC - 64))
        | (1ULL << (fugue_sqlParser::AT - 64))
        | (1ULL << (fugue_sqlParser::AUTHORIZATION - 64))
        | (1ULL << (fugue_sqlParser::BETWEEN - 64))
        | (1ULL << (fugue_sqlParser::BOTH - 64))
        | (1ULL << (fugue_sqlParser::BUCKET - 64))
        | (1ULL << (fugue_sqlParser::BUCKETS - 64))
        | (1ULL << (fugue_sqlParser::BY - 64))
        | (1ULL << (fugue_sqlParser::CACHE - 64))
        | (1ULL << (fugue_sqlParser::CASCADE - 64))
        | (1ULL << (fugue_sqlParser::CASE - 64))
        | (1ULL << (fugue_sqlParser::CAST - 64))
        | (1ULL << (fugue_sqlParser::CHANGE - 64))
        | (1ULL << (fugue_sqlParser::CHECK - 64))
        | (1ULL << (fugue_sqlParser::CLEAR - 64))
        | (1ULL << (fugue_sqlParser::CLUSTER - 64))
        | (1ULL << (fugue_sqlParser::CLUSTERED - 64))
        | (1ULL << (fugue_sqlParser::CODEGEN - 64))
        | (1ULL << (fugue_sqlParser::COLLATE - 64))
        | (1ULL << (fugue_sqlParser::COLLECTION - 64))
        | (1ULL << (fugue_sqlParser::COLUMN - 64))
        | (1ULL << (fugue_sqlParser::COLUMNS - 64))
        | (1ULL << (fugue_sqlParser::COMMENT - 64))
        | (1ULL << (fugue_sqlParser::COMMIT - 64))
        | (1ULL << (fugue_sqlParser::COMPACT - 64))
        | (1ULL << (fugue_sqlParser::COMPACTIONS - 64))
        | (1ULL << (fugue_sqlParser::COMPUTE - 64))
        | (1ULL << (fugue_sqlParser::CONCATENATE - 64))
        | (1ULL << (fugue_sqlParser::CONSTRAINT - 64))
        | (1ULL << (fugue_sqlParser::COST - 64))
        | (1ULL << (fugue_sqlParser::CREATE - 64))
        | (1ULL << (fugue_sqlParser::CROSS - 64))
        | (1ULL << (fugue_sqlParser::CUBE - 64))
        | (1ULL << (fugue_sqlParser::CURRENT - 64))
        | (1ULL << (fugue_sqlParser::CURRENT_DATE - 64))
        | (1ULL << (fugue_sqlParser::CURRENT_TIME - 64))
        | (1ULL << (fugue_sqlParser::CURRENT_TIMESTAMP - 64))
        | (1ULL << (fugue_sqlParser::CURRENT_USER - 64))
        | (1ULL << (fugue_sqlParser::DATA - 64))
        | (1ULL << (fugue_sqlParser::DATABASE - 64))
        | (1ULL << (fugue_sqlParser::DATABASES - 64))
        | (1ULL << (fugue_sqlParser::DAY - 64))
        | (1ULL << (fugue_sqlParser::DBPROPERTIES - 64))
        | (1ULL << (fugue_sqlParser::DEFINED - 64))
        | (1ULL << (fugue_sqlParser::DELETE - 64))
        | (1ULL << (fugue_sqlParser::DELIMITED - 64))
        | (1ULL << (fugue_sqlParser::DESC - 64))
        | (1ULL << (fugue_sqlParser::DESCRIBE - 64))
        | (1ULL << (fugue_sqlParser::DFS - 64))
        | (1ULL << (fugue_sqlParser::DIRECTORIES - 64))
        | (1ULL << (fugue_sqlParser::DIRECTORY - 64))
        | (1ULL << (fugue_sqlParser::DISTINCT - 64))
        | (1ULL << (fugue_sqlParser::DISTRIBUTE - 64))
        | (1ULL << (fugue_sqlParser::DROP - 64))
        | (1ULL << (fugue_sqlParser::ELSE - 64))
        | (1ULL << (fugue_sqlParser::END - 64))
        | (1ULL << (fugue_sqlParser::ESCAPE - 64))
        | (1ULL << (fugue_sqlParser::ESCAPED - 64))
        | (1ULL << (fugue_sqlParser::EXCEPT - 64))
        | (1ULL << (fugue_sqlParser::EXCHANGE - 64))
        | (1ULL << (fugue_sqlParser::EXISTS - 64))
        | (1ULL << (fugue_sqlParser::EXPLAIN - 64))
        | (1ULL << (fugue_sqlParser::EXPORT - 64))
        | (1ULL << (fugue_sqlParser::EXTENDED - 64)))) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 128)) & ((1ULL << (fugue_sqlParser::EXTERNAL - 128))
        | (1ULL << (fugue_sqlParser::EXTRACT - 128))
        | (1ULL << (fugue_sqlParser::FALSE - 128))
        | (1ULL << (fugue_sqlParser::FETCH - 128))
        | (1ULL << (fugue_sqlParser::FIELDS - 128))
        | (1ULL << (fugue_sqlParser::FILTER - 128))
        | (1ULL << (fugue_sqlParser::FILEFORMAT - 128))
        | (1ULL << (fugue_sqlParser::FIRST - 128))
        | (1ULL << (fugue_sqlParser::FOLLOWING - 128))
        | (1ULL << (fugue_sqlParser::FOR - 128))
        | (1ULL << (fugue_sqlParser::FOREIGN - 128))
        | (1ULL << (fugue_sqlParser::FORMAT - 128))
        | (1ULL << (fugue_sqlParser::FORMATTED - 128))
        | (1ULL << (fugue_sqlParser::FROM - 128))
        | (1ULL << (fugue_sqlParser::FULL - 128))
        | (1ULL << (fugue_sqlParser::FUNCTION - 128))
        | (1ULL << (fugue_sqlParser::FUNCTIONS - 128))
        | (1ULL << (fugue_sqlParser::GLOBAL - 128))
        | (1ULL << (fugue_sqlParser::GRANT - 128))
        | (1ULL << (fugue_sqlParser::GROUP - 128))
        | (1ULL << (fugue_sqlParser::GROUPING - 128))
        | (1ULL << (fugue_sqlParser::HAVING - 128))
        | (1ULL << (fugue_sqlParser::HOUR - 128))
        | (1ULL << (fugue_sqlParser::IF - 128))
        | (1ULL << (fugue_sqlParser::IGNORE - 128))
        | (1ULL << (fugue_sqlParser::IMPORT - 128))
        | (1ULL << (fugue_sqlParser::IN - 128))
        | (1ULL << (fugue_sqlParser::INDEX - 128))
        | (1ULL << (fugue_sqlParser::INDEXES - 128))
        | (1ULL << (fugue_sqlParser::INNER - 128))
        | (1ULL << (fugue_sqlParser::INPATH - 128))
        | (1ULL << (fugue_sqlParser::INPUTFORMAT - 128))
        | (1ULL << (fugue_sqlParser::INSERT - 128))
        | (1ULL << (fugue_sqlParser::INTERSECT - 128))
        | (1ULL << (fugue_sqlParser::INTERVAL - 128))
        | (1ULL << (fugue_sqlParser::INTO - 128))
        | (1ULL << (fugue_sqlParser::IS - 128))
        | (1ULL << (fugue_sqlParser::ITEMS - 128))
        | (1ULL << (fugue_sqlParser::JOIN - 128))
        | (1ULL << (fugue_sqlParser::KEYS - 128))
        | (1ULL << (fugue_sqlParser::LAST - 128))
        | (1ULL << (fugue_sqlParser::LATERAL - 128))
        | (1ULL << (fugue_sqlParser::LAZY - 128))
        | (1ULL << (fugue_sqlParser::LEADING - 128))
        | (1ULL << (fugue_sqlParser::LEFT - 128))
        | (1ULL << (fugue_sqlParser::LIKE - 128))
        | (1ULL << (fugue_sqlParser::LIMIT - 128))
        | (1ULL << (fugue_sqlParser::LINES - 128))
        | (1ULL << (fugue_sqlParser::LIST - 128))
        | (1ULL << (fugue_sqlParser::LOAD - 128))
        | (1ULL << (fugue_sqlParser::LOCAL - 128))
        | (1ULL << (fugue_sqlParser::LOCATION - 128))
        | (1ULL << (fugue_sqlParser::LOCK - 128))
        | (1ULL << (fugue_sqlParser::LOCKS - 128))
        | (1ULL << (fugue_sqlParser::LOGICAL - 128))
        | (1ULL << (fugue_sqlParser::MACRO - 128))
        | (1ULL << (fugue_sqlParser::MAP - 128))
        | (1ULL << (fugue_sqlParser::MATCHED - 128))
        | (1ULL << (fugue_sqlParser::MERGE - 128))
        | (1ULL << (fugue_sqlParser::MINUTE - 128))
        | (1ULL << (fugue_sqlParser::MONTH - 128))
        | (1ULL << (fugue_sqlParser::MSCK - 128))
        | (1ULL << (fugue_sqlParser::NAMESPACE - 128))
        | (1ULL << (fugue_sqlParser::NAMESPACES - 128)))) != 0) || ((((_la - 192) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 192)) & ((1ULL << (fugue_sqlParser::NATURAL - 192))
        | (1ULL << (fugue_sqlParser::NO - 192))
        | (1ULL << (fugue_sqlParser::NOT - 192))
        | (1ULL << (fugue_sqlParser::THENULL - 192))
        | (1ULL << (fugue_sqlParser::THENULLS - 192))
        | (1ULL << (fugue_sqlParser::OF - 192))
        | (1ULL << (fugue_sqlParser::ON - 192))
        | (1ULL << (fugue_sqlParser::ONLY - 192))
        | (1ULL << (fugue_sqlParser::OPTION - 192))
        | (1ULL << (fugue_sqlParser::OPTIONS - 192))
        | (1ULL << (fugue_sqlParser::OR - 192))
        | (1ULL << (fugue_sqlParser::ORDER - 192))
        | (1ULL << (fugue_sqlParser::OUT - 192))
        | (1ULL << (fugue_sqlParser::OUTER - 192))
        | (1ULL << (fugue_sqlParser::OUTPUTFORMAT - 192))
        | (1ULL << (fugue_sqlParser::OVER - 192))
        | (1ULL << (fugue_sqlParser::OVERLAPS - 192))
        | (1ULL << (fugue_sqlParser::OVERLAY - 192))
        | (1ULL << (fugue_sqlParser::OVERWRITE - 192))
        | (1ULL << (fugue_sqlParser::PARTITION - 192))
        | (1ULL << (fugue_sqlParser::PARTITIONED - 192))
        | (1ULL << (fugue_sqlParser::PARTITIONS - 192))
        | (1ULL << (fugue_sqlParser::PERCENTLIT - 192))
        | (1ULL << (fugue_sqlParser::PIVOT - 192))
        | (1ULL << (fugue_sqlParser::PLACING - 192))
        | (1ULL << (fugue_sqlParser::POSITION - 192))
        | (1ULL << (fugue_sqlParser::PRECEDING - 192))
        | (1ULL << (fugue_sqlParser::PRIMARY - 192))
        | (1ULL << (fugue_sqlParser::PRINCIPALS - 192))
        | (1ULL << (fugue_sqlParser::PROPERTIES - 192))
        | (1ULL << (fugue_sqlParser::PURGE - 192))
        | (1ULL << (fugue_sqlParser::QUERY - 192))
        | (1ULL << (fugue_sqlParser::RANGE - 192))
        | (1ULL << (fugue_sqlParser::RECORDREADER - 192))
        | (1ULL << (fugue_sqlParser::RECORDWRITER - 192))
        | (1ULL << (fugue_sqlParser::RECOVER - 192))
        | (1ULL << (fugue_sqlParser::REDUCE - 192))
        | (1ULL << (fugue_sqlParser::REFERENCES - 192))
        | (1ULL << (fugue_sqlParser::REFRESH - 192))
        | (1ULL << (fugue_sqlParser::RENAME - 192))
        | (1ULL << (fugue_sqlParser::REPAIR - 192))
        | (1ULL << (fugue_sqlParser::REPLACE - 192))
        | (1ULL << (fugue_sqlParser::RESET - 192))
        | (1ULL << (fugue_sqlParser::RESTRICT - 192))
        | (1ULL << (fugue_sqlParser::REVOKE - 192))
        | (1ULL << (fugue_sqlParser::RIGHT - 192))
        | (1ULL << (fugue_sqlParser::RLIKE - 192))
        | (1ULL << (fugue_sqlParser::ROLE - 192))
        | (1ULL << (fugue_sqlParser::ROLES - 192))
        | (1ULL << (fugue_sqlParser::ROLLBACK - 192))
        | (1ULL << (fugue_sqlParser::ROLLUP - 192))
        | (1ULL << (fugue_sqlParser::ROW - 192))
        | (1ULL << (fugue_sqlParser::ROWS - 192))
        | (1ULL << (fugue_sqlParser::SCHEMA - 192))
        | (1ULL << (fugue_sqlParser::SECOND - 192))
        | (1ULL << (fugue_sqlParser::SELECT - 192))
        | (1ULL << (fugue_sqlParser::SEMI - 192))
        | (1ULL << (fugue_sqlParser::SEPARATED - 192))
        | (1ULL << (fugue_sqlParser::SERDE - 192))
        | (1ULL << (fugue_sqlParser::SERDEPROPERTIES - 192))
        | (1ULL << (fugue_sqlParser::SESSION_USER - 192))
        | (1ULL << (fugue_sqlParser::SET - 192))
        | (1ULL << (fugue_sqlParser::SETMINUS - 192))
        | (1ULL << (fugue_sqlParser::SETS - 192)))) != 0) || ((((_la - 256) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 256)) & ((1ULL << (fugue_sqlParser::SHOW - 256))
        | (1ULL << (fugue_sqlParser::SKEWED - 256))
        | (1ULL << (fugue_sqlParser::SOME - 256))
        | (1ULL << (fugue_sqlParser::SORT - 256))
        | (1ULL << (fugue_sqlParser::SORTED - 256))
        | (1ULL << (fugue_sqlParser::START - 256))
        | (1ULL << (fugue_sqlParser::STATISTICS - 256))
        | (1ULL << (fugue_sqlParser::STORED - 256))
        | (1ULL << (fugue_sqlParser::STRATIFY - 256))
        | (1ULL << (fugue_sqlParser::STRUCT - 256))
        | (1ULL << (fugue_sqlParser::SUBSTR - 256))
        | (1ULL << (fugue_sqlParser::SUBSTRING - 256))
        | (1ULL << (fugue_sqlParser::TABLE - 256))
        | (1ULL << (fugue_sqlParser::TABLES - 256))
        | (1ULL << (fugue_sqlParser::TABLESAMPLE - 256))
        | (1ULL << (fugue_sqlParser::TBLPROPERTIES - 256))
        | (1ULL << (fugue_sqlParser::TEMPORARY - 256))
        | (1ULL << (fugue_sqlParser::TERMINATED - 256))
        | (1ULL << (fugue_sqlParser::THEN - 256))
        | (1ULL << (fugue_sqlParser::TO - 256))
        | (1ULL << (fugue_sqlParser::TOUCH - 256))
        | (1ULL << (fugue_sqlParser::TRAILING - 256))
        | (1ULL << (fugue_sqlParser::TRANSACTION - 256))
        | (1ULL << (fugue_sqlParser::TRANSACTIONS - 256))
        | (1ULL << (fugue_sqlParser::TRANSFORM - 256))
        | (1ULL << (fugue_sqlParser::TRIM - 256))
        | (1ULL << (fugue_sqlParser::TRUE - 256))
        | (1ULL << (fugue_sqlParser::TRUNCATE - 256))
        | (1ULL << (fugue_sqlParser::TYPE - 256))
        | (1ULL << (fugue_sqlParser::UNARCHIVE - 256))
        | (1ULL << (fugue_sqlParser::UNBOUNDED - 256))
        | (1ULL << (fugue_sqlParser::UNCACHE - 256))
        | (1ULL << (fugue_sqlParser::UNION - 256))
        | (1ULL << (fugue_sqlParser::UNIQUE - 256))
        | (1ULL << (fugue_sqlParser::UNKNOWN - 256))
        | (1ULL << (fugue_sqlParser::UNLOCK - 256))
        | (1ULL << (fugue_sqlParser::UNSET - 256))
        | (1ULL << (fugue_sqlParser::UPDATE - 256))
        | (1ULL << (fugue_sqlParser::USE - 256))
        | (1ULL << (fugue_sqlParser::USER - 256))
        | (1ULL << (fugue_sqlParser::USING - 256))
        | (1ULL << (fugue_sqlParser::VALUES - 256))
        | (1ULL << (fugue_sqlParser::VIEW - 256))
        | (1ULL << (fugue_sqlParser::VIEWS - 256))
        | (1ULL << (fugue_sqlParser::WHEN - 256))
        | (1ULL << (fugue_sqlParser::WHERE - 256))
        | (1ULL << (fugue_sqlParser::WINDOW - 256))
        | (1ULL << (fugue_sqlParser::WITH - 256))
        | (1ULL << (fugue_sqlParser::YEAR - 256))
        | (1ULL << (fugue_sqlParser::PLUS - 256))
        | (1ULL << (fugue_sqlParser::MINUS - 256))
        | (1ULL << (fugue_sqlParser::ASTERISK - 256))
        | (1ULL << (fugue_sqlParser::DIV - 256)))) != 0) || ((((_la - 320) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 320)) & ((1ULL << (fugue_sqlParser::TILDE - 320))
        | (1ULL << (fugue_sqlParser::STRING - 320))
        | (1ULL << (fugue_sqlParser::BIGINT_LITERAL - 320))
        | (1ULL << (fugue_sqlParser::SMALLINT_LITERAL - 320))
        | (1ULL << (fugue_sqlParser::TINYINT_LITERAL - 320))
        | (1ULL << (fugue_sqlParser::INTEGER_VALUE - 320))
        | (1ULL << (fugue_sqlParser::EXPONENT_VALUE - 320))
        | (1ULL << (fugue_sqlParser::DECIMAL_VALUE - 320))
        | (1ULL << (fugue_sqlParser::DOUBLE_LITERAL - 320))
        | (1ULL << (fugue_sqlParser::BIGDECIMAL_LITERAL - 320))
        | (1ULL << (fugue_sqlParser::IDENTIFIER - 320))
        | (1ULL << (fugue_sqlParser::BACKQUOTED_IDENTIFIER - 320)))) != 0)) {
        setState(3313);
        antlrcpp::downCast<StructContext *>(_localctx)->namedExpressionContext = namedExpression();
        antlrcpp::downCast<StructContext *>(_localctx)->argument.push_back(antlrcpp::downCast<StructContext *>(_localctx)->namedExpressionContext);
        setState(3318);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == fugue_sqlParser::T__0) {
          setState(3314);
          match(fugue_sqlParser::T__0);
          setState(3315);
          antlrcpp::downCast<StructContext *>(_localctx)->namedExpressionContext = namedExpression();
          antlrcpp::downCast<StructContext *>(_localctx)->argument.push_back(antlrcpp::downCast<StructContext *>(_localctx)->namedExpressionContext);
          setState(3320);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
      }
      setState(3323);
      match(fugue_sqlParser::T__3);
      break;
    }

    case 6: {
      _localctx = _tracker.createInstance<FirstContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(3324);
      match(fugue_sqlParser::FIRST);
      setState(3325);
      match(fugue_sqlParser::T__2);
      setState(3326);
      expression();
      setState(3329);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::IGNORE) {
        setState(3327);
        match(fugue_sqlParser::IGNORE);
        setState(3328);
        match(fugue_sqlParser::THENULLS);
      }
      setState(3331);
      match(fugue_sqlParser::T__3);
      break;
    }

    case 7: {
      _localctx = _tracker.createInstance<LastContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(3333);
      match(fugue_sqlParser::LAST);
      setState(3334);
      match(fugue_sqlParser::T__2);
      setState(3335);
      expression();
      setState(3338);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::IGNORE) {
        setState(3336);
        match(fugue_sqlParser::IGNORE);
        setState(3337);
        match(fugue_sqlParser::THENULLS);
      }
      setState(3340);
      match(fugue_sqlParser::T__3);
      break;
    }

    case 8: {
      _localctx = _tracker.createInstance<PositionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(3342);
      match(fugue_sqlParser::POSITION);
      setState(3343);
      match(fugue_sqlParser::T__2);
      setState(3344);
      antlrcpp::downCast<PositionContext *>(_localctx)->substr = valueExpression(0);
      setState(3345);
      match(fugue_sqlParser::IN);
      setState(3346);
      antlrcpp::downCast<PositionContext *>(_localctx)->istr = valueExpression(0);
      setState(3347);
      match(fugue_sqlParser::T__3);
      break;
    }

    case 9: {
      _localctx = _tracker.createInstance<ConstantDefaultContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(3349);
      constant();
      break;
    }

    case 10: {
      _localctx = _tracker.createInstance<StarContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(3350);
      match(fugue_sqlParser::ASTERISK);
      break;
    }

    case 11: {
      _localctx = _tracker.createInstance<StarContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(3351);
      qualifiedName();
      setState(3352);
      match(fugue_sqlParser::T__6);
      setState(3353);
      match(fugue_sqlParser::ASTERISK);
      break;
    }

    case 12: {
      _localctx = _tracker.createInstance<RowConstructorContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(3355);
      match(fugue_sqlParser::T__2);
      setState(3356);
      namedExpression();
      setState(3359); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(3357);
        match(fugue_sqlParser::T__0);
        setState(3358);
        namedExpression();
        setState(3361); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (_la == fugue_sqlParser::T__0);
      setState(3363);
      match(fugue_sqlParser::T__3);
      break;
    }

    case 13: {
      _localctx = _tracker.createInstance<SubqueryExpressionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(3365);
      match(fugue_sqlParser::T__2);
      setState(3366);
      query();
      setState(3367);
      match(fugue_sqlParser::T__3);
      break;
    }

    case 14: {
      _localctx = _tracker.createInstance<FunctionCallContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(3369);
      functionName();
      setState(3370);
      match(fugue_sqlParser::T__2);
      setState(3382);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & ((1ULL << fugue_sqlParser::T__2)
        | (1ULL << fugue_sqlParser::ADD)
        | (1ULL << fugue_sqlParser::AFTER)
        | (1ULL << fugue_sqlParser::ALL)
        | (1ULL << fugue_sqlParser::ALTER)
        | (1ULL << fugue_sqlParser::ANALYZE)
        | (1ULL << fugue_sqlParser::AND)
        | (1ULL << fugue_sqlParser::ANTI)
        | (1ULL << fugue_sqlParser::ANY)
        | (1ULL << fugue_sqlParser::ARCHIVE)
        | (1ULL << fugue_sqlParser::ARRAY)
        | (1ULL << fugue_sqlParser::AS))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & ((1ULL << (fugue_sqlParser::ASC - 64))
        | (1ULL << (fugue_sqlParser::AT - 64))
        | (1ULL << (fugue_sqlParser::AUTHORIZATION - 64))
        | (1ULL << (fugue_sqlParser::BETWEEN - 64))
        | (1ULL << (fugue_sqlParser::BOTH - 64))
        | (1ULL << (fugue_sqlParser::BUCKET - 64))
        | (1ULL << (fugue_sqlParser::BUCKETS - 64))
        | (1ULL << (fugue_sqlParser::BY - 64))
        | (1ULL << (fugue_sqlParser::CACHE - 64))
        | (1ULL << (fugue_sqlParser::CASCADE - 64))
        | (1ULL << (fugue_sqlParser::CASE - 64))
        | (1ULL << (fugue_sqlParser::CAST - 64))
        | (1ULL << (fugue_sqlParser::CHANGE - 64))
        | (1ULL << (fugue_sqlParser::CHECK - 64))
        | (1ULL << (fugue_sqlParser::CLEAR - 64))
        | (1ULL << (fugue_sqlParser::CLUSTER - 64))
        | (1ULL << (fugue_sqlParser::CLUSTERED - 64))
        | (1ULL << (fugue_sqlParser::CODEGEN - 64))
        | (1ULL << (fugue_sqlParser::COLLATE - 64))
        | (1ULL << (fugue_sqlParser::COLLECTION - 64))
        | (1ULL << (fugue_sqlParser::COLUMN - 64))
        | (1ULL << (fugue_sqlParser::COLUMNS - 64))
        | (1ULL << (fugue_sqlParser::COMMENT - 64))
        | (1ULL << (fugue_sqlParser::COMMIT - 64))
        | (1ULL << (fugue_sqlParser::COMPACT - 64))
        | (1ULL << (fugue_sqlParser::COMPACTIONS - 64))
        | (1ULL << (fugue_sqlParser::COMPUTE - 64))
        | (1ULL << (fugue_sqlParser::CONCATENATE - 64))
        | (1ULL << (fugue_sqlParser::CONSTRAINT - 64))
        | (1ULL << (fugue_sqlParser::COST - 64))
        | (1ULL << (fugue_sqlParser::CREATE - 64))
        | (1ULL << (fugue_sqlParser::CROSS - 64))
        | (1ULL << (fugue_sqlParser::CUBE - 64))
        | (1ULL << (fugue_sqlParser::CURRENT - 64))
        | (1ULL << (fugue_sqlParser::CURRENT_DATE - 64))
        | (1ULL << (fugue_sqlParser::CURRENT_TIME - 64))
        | (1ULL << (fugue_sqlParser::CURRENT_TIMESTAMP - 64))
        | (1ULL << (fugue_sqlParser::CURRENT_USER - 64))
        | (1ULL << (fugue_sqlParser::DATA - 64))
        | (1ULL << (fugue_sqlParser::DATABASE - 64))
        | (1ULL << (fugue_sqlParser::DATABASES - 64))
        | (1ULL << (fugue_sqlParser::DAY - 64))
        | (1ULL << (fugue_sqlParser::DBPROPERTIES - 64))
        | (1ULL << (fugue_sqlParser::DEFINED - 64))
        | (1ULL << (fugue_sqlParser::DELETE - 64))
        | (1ULL << (fugue_sqlParser::DELIMITED - 64))
        | (1ULL << (fugue_sqlParser::DESC - 64))
        | (1ULL << (fugue_sqlParser::DESCRIBE - 64))
        | (1ULL << (fugue_sqlParser::DFS - 64))
        | (1ULL << (fugue_sqlParser::DIRECTORIES - 64))
        | (1ULL << (fugue_sqlParser::DIRECTORY - 64))
        | (1ULL << (fugue_sqlParser::DISTINCT - 64))
        | (1ULL << (fugue_sqlParser::DISTRIBUTE - 64))
        | (1ULL << (fugue_sqlParser::DROP - 64))
        | (1ULL << (fugue_sqlParser::ELSE - 64))
        | (1ULL << (fugue_sqlParser::END - 64))
        | (1ULL << (fugue_sqlParser::ESCAPE - 64))
        | (1ULL << (fugue_sqlParser::ESCAPED - 64))
        | (1ULL << (fugue_sqlParser::EXCEPT - 64))
        | (1ULL << (fugue_sqlParser::EXCHANGE - 64))
        | (1ULL << (fugue_sqlParser::EXISTS - 64))
        | (1ULL << (fugue_sqlParser::EXPLAIN - 64))
        | (1ULL << (fugue_sqlParser::EXPORT - 64))
        | (1ULL << (fugue_sqlParser::EXTENDED - 64)))) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 128)) & ((1ULL << (fugue_sqlParser::EXTERNAL - 128))
        | (1ULL << (fugue_sqlParser::EXTRACT - 128))
        | (1ULL << (fugue_sqlParser::FALSE - 128))
        | (1ULL << (fugue_sqlParser::FETCH - 128))
        | (1ULL << (fugue_sqlParser::FIELDS - 128))
        | (1ULL << (fugue_sqlParser::FILTER - 128))
        | (1ULL << (fugue_sqlParser::FILEFORMAT - 128))
        | (1ULL << (fugue_sqlParser::FIRST - 128))
        | (1ULL << (fugue_sqlParser::FOLLOWING - 128))
        | (1ULL << (fugue_sqlParser::FOR - 128))
        | (1ULL << (fugue_sqlParser::FOREIGN - 128))
        | (1ULL << (fugue_sqlParser::FORMAT - 128))
        | (1ULL << (fugue_sqlParser::FORMATTED - 128))
        | (1ULL << (fugue_sqlParser::FROM - 128))
        | (1ULL << (fugue_sqlParser::FULL - 128))
        | (1ULL << (fugue_sqlParser::FUNCTION - 128))
        | (1ULL << (fugue_sqlParser::FUNCTIONS - 128))
        | (1ULL << (fugue_sqlParser::GLOBAL - 128))
        | (1ULL << (fugue_sqlParser::GRANT - 128))
        | (1ULL << (fugue_sqlParser::GROUP - 128))
        | (1ULL << (fugue_sqlParser::GROUPING - 128))
        | (1ULL << (fugue_sqlParser::HAVING - 128))
        | (1ULL << (fugue_sqlParser::HOUR - 128))
        | (1ULL << (fugue_sqlParser::IF - 128))
        | (1ULL << (fugue_sqlParser::IGNORE - 128))
        | (1ULL << (fugue_sqlParser::IMPORT - 128))
        | (1ULL << (fugue_sqlParser::IN - 128))
        | (1ULL << (fugue_sqlParser::INDEX - 128))
        | (1ULL << (fugue_sqlParser::INDEXES - 128))
        | (1ULL << (fugue_sqlParser::INNER - 128))
        | (1ULL << (fugue_sqlParser::INPATH - 128))
        | (1ULL << (fugue_sqlParser::INPUTFORMAT - 128))
        | (1ULL << (fugue_sqlParser::INSERT - 128))
        | (1ULL << (fugue_sqlParser::INTERSECT - 128))
        | (1ULL << (fugue_sqlParser::INTERVAL - 128))
        | (1ULL << (fugue_sqlParser::INTO - 128))
        | (1ULL << (fugue_sqlParser::IS - 128))
        | (1ULL << (fugue_sqlParser::ITEMS - 128))
        | (1ULL << (fugue_sqlParser::JOIN - 128))
        | (1ULL << (fugue_sqlParser::KEYS - 128))
        | (1ULL << (fugue_sqlParser::LAST - 128))
        | (1ULL << (fugue_sqlParser::LATERAL - 128))
        | (1ULL << (fugue_sqlParser::LAZY - 128))
        | (1ULL << (fugue_sqlParser::LEADING - 128))
        | (1ULL << (fugue_sqlParser::LEFT - 128))
        | (1ULL << (fugue_sqlParser::LIKE - 128))
        | (1ULL << (fugue_sqlParser::LIMIT - 128))
        | (1ULL << (fugue_sqlParser::LINES - 128))
        | (1ULL << (fugue_sqlParser::LIST - 128))
        | (1ULL << (fugue_sqlParser::LOAD - 128))
        | (1ULL << (fugue_sqlParser::LOCAL - 128))
        | (1ULL << (fugue_sqlParser::LOCATION - 128))
        | (1ULL << (fugue_sqlParser::LOCK - 128))
        | (1ULL << (fugue_sqlParser::LOCKS - 128))
        | (1ULL << (fugue_sqlParser::LOGICAL - 128))
        | (1ULL << (fugue_sqlParser::MACRO - 128))
        | (1ULL << (fugue_sqlParser::MAP - 128))
        | (1ULL << (fugue_sqlParser::MATCHED - 128))
        | (1ULL << (fugue_sqlParser::MERGE - 128))
        | (1ULL << (fugue_sqlParser::MINUTE - 128))
        | (1ULL << (fugue_sqlParser::MONTH - 128))
        | (1ULL << (fugue_sqlParser::MSCK - 128))
        | (1ULL << (fugue_sqlParser::NAMESPACE - 128))
        | (1ULL << (fugue_sqlParser::NAMESPACES - 128)))) != 0) || ((((_la - 192) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 192)) & ((1ULL << (fugue_sqlParser::NATURAL - 192))
        | (1ULL << (fugue_sqlParser::NO - 192))
        | (1ULL << (fugue_sqlParser::NOT - 192))
        | (1ULL << (fugue_sqlParser::THENULL - 192))
        | (1ULL << (fugue_sqlParser::THENULLS - 192))
        | (1ULL << (fugue_sqlParser::OF - 192))
        | (1ULL << (fugue_sqlParser::ON - 192))
        | (1ULL << (fugue_sqlParser::ONLY - 192))
        | (1ULL << (fugue_sqlParser::OPTION - 192))
        | (1ULL << (fugue_sqlParser::OPTIONS - 192))
        | (1ULL << (fugue_sqlParser::OR - 192))
        | (1ULL << (fugue_sqlParser::ORDER - 192))
        | (1ULL << (fugue_sqlParser::OUT - 192))
        | (1ULL << (fugue_sqlParser::OUTER - 192))
        | (1ULL << (fugue_sqlParser::OUTPUTFORMAT - 192))
        | (1ULL << (fugue_sqlParser::OVER - 192))
        | (1ULL << (fugue_sqlParser::OVERLAPS - 192))
        | (1ULL << (fugue_sqlParser::OVERLAY - 192))
        | (1ULL << (fugue_sqlParser::OVERWRITE - 192))
        | (1ULL << (fugue_sqlParser::PARTITION - 192))
        | (1ULL << (fugue_sqlParser::PARTITIONED - 192))
        | (1ULL << (fugue_sqlParser::PARTITIONS - 192))
        | (1ULL << (fugue_sqlParser::PERCENTLIT - 192))
        | (1ULL << (fugue_sqlParser::PIVOT - 192))
        | (1ULL << (fugue_sqlParser::PLACING - 192))
        | (1ULL << (fugue_sqlParser::POSITION - 192))
        | (1ULL << (fugue_sqlParser::PRECEDING - 192))
        | (1ULL << (fugue_sqlParser::PRIMARY - 192))
        | (1ULL << (fugue_sqlParser::PRINCIPALS - 192))
        | (1ULL << (fugue_sqlParser::PROPERTIES - 192))
        | (1ULL << (fugue_sqlParser::PURGE - 192))
        | (1ULL << (fugue_sqlParser::QUERY - 192))
        | (1ULL << (fugue_sqlParser::RANGE - 192))
        | (1ULL << (fugue_sqlParser::RECORDREADER - 192))
        | (1ULL << (fugue_sqlParser::RECORDWRITER - 192))
        | (1ULL << (fugue_sqlParser::RECOVER - 192))
        | (1ULL << (fugue_sqlParser::REDUCE - 192))
        | (1ULL << (fugue_sqlParser::REFERENCES - 192))
        | (1ULL << (fugue_sqlParser::REFRESH - 192))
        | (1ULL << (fugue_sqlParser::RENAME - 192))
        | (1ULL << (fugue_sqlParser::REPAIR - 192))
        | (1ULL << (fugue_sqlParser::REPLACE - 192))
        | (1ULL << (fugue_sqlParser::RESET - 192))
        | (1ULL << (fugue_sqlParser::RESTRICT - 192))
        | (1ULL << (fugue_sqlParser::REVOKE - 192))
        | (1ULL << (fugue_sqlParser::RIGHT - 192))
        | (1ULL << (fugue_sqlParser::RLIKE - 192))
        | (1ULL << (fugue_sqlParser::ROLE - 192))
        | (1ULL << (fugue_sqlParser::ROLES - 192))
        | (1ULL << (fugue_sqlParser::ROLLBACK - 192))
        | (1ULL << (fugue_sqlParser::ROLLUP - 192))
        | (1ULL << (fugue_sqlParser::ROW - 192))
        | (1ULL << (fugue_sqlParser::ROWS - 192))
        | (1ULL << (fugue_sqlParser::SCHEMA - 192))
        | (1ULL << (fugue_sqlParser::SECOND - 192))
        | (1ULL << (fugue_sqlParser::SELECT - 192))
        | (1ULL << (fugue_sqlParser::SEMI - 192))
        | (1ULL << (fugue_sqlParser::SEPARATED - 192))
        | (1ULL << (fugue_sqlParser::SERDE - 192))
        | (1ULL << (fugue_sqlParser::SERDEPROPERTIES - 192))
        | (1ULL << (fugue_sqlParser::SESSION_USER - 192))
        | (1ULL << (fugue_sqlParser::SET - 192))
        | (1ULL << (fugue_sqlParser::SETMINUS - 192))
        | (1ULL << (fugue_sqlParser::SETS - 192)))) != 0) || ((((_la - 256) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 256)) & ((1ULL << (fugue_sqlParser::SHOW - 256))
        | (1ULL << (fugue_sqlParser::SKEWED - 256))
        | (1ULL << (fugue_sqlParser::SOME - 256))
        | (1ULL << (fugue_sqlParser::SORT - 256))
        | (1ULL << (fugue_sqlParser::SORTED - 256))
        | (1ULL << (fugue_sqlParser::START - 256))
        | (1ULL << (fugue_sqlParser::STATISTICS - 256))
        | (1ULL << (fugue_sqlParser::STORED - 256))
        | (1ULL << (fugue_sqlParser::STRATIFY - 256))
        | (1ULL << (fugue_sqlParser::STRUCT - 256))
        | (1ULL << (fugue_sqlParser::SUBSTR - 256))
        | (1ULL << (fugue_sqlParser::SUBSTRING - 256))
        | (1ULL << (fugue_sqlParser::TABLE - 256))
        | (1ULL << (fugue_sqlParser::TABLES - 256))
        | (1ULL << (fugue_sqlParser::TABLESAMPLE - 256))
        | (1ULL << (fugue_sqlParser::TBLPROPERTIES - 256))
        | (1ULL << (fugue_sqlParser::TEMPORARY - 256))
        | (1ULL << (fugue_sqlParser::TERMINATED - 256))
        | (1ULL << (fugue_sqlParser::THEN - 256))
        | (1ULL << (fugue_sqlParser::TO - 256))
        | (1ULL << (fugue_sqlParser::TOUCH - 256))
        | (1ULL << (fugue_sqlParser::TRAILING - 256))
        | (1ULL << (fugue_sqlParser::TRANSACTION - 256))
        | (1ULL << (fugue_sqlParser::TRANSACTIONS - 256))
        | (1ULL << (fugue_sqlParser::TRANSFORM - 256))
        | (1ULL << (fugue_sqlParser::TRIM - 256))
        | (1ULL << (fugue_sqlParser::TRUE - 256))
        | (1ULL << (fugue_sqlParser::TRUNCATE - 256))
        | (1ULL << (fugue_sqlParser::TYPE - 256))
        | (1ULL << (fugue_sqlParser::UNARCHIVE - 256))
        | (1ULL << (fugue_sqlParser::UNBOUNDED - 256))
        | (1ULL << (fugue_sqlParser::UNCACHE - 256))
        | (1ULL << (fugue_sqlParser::UNION - 256))
        | (1ULL << (fugue_sqlParser::UNIQUE - 256))
        | (1ULL << (fugue_sqlParser::UNKNOWN - 256))
        | (1ULL << (fugue_sqlParser::UNLOCK - 256))
        | (1ULL << (fugue_sqlParser::UNSET - 256))
        | (1ULL << (fugue_sqlParser::UPDATE - 256))
        | (1ULL << (fugue_sqlParser::USE - 256))
        | (1ULL << (fugue_sqlParser::USER - 256))
        | (1ULL << (fugue_sqlParser::USING - 256))
        | (1ULL << (fugue_sqlParser::VALUES - 256))
        | (1ULL << (fugue_sqlParser::VIEW - 256))
        | (1ULL << (fugue_sqlParser::VIEWS - 256))
        | (1ULL << (fugue_sqlParser::WHEN - 256))
        | (1ULL << (fugue_sqlParser::WHERE - 256))
        | (1ULL << (fugue_sqlParser::WINDOW - 256))
        | (1ULL << (fugue_sqlParser::WITH - 256))
        | (1ULL << (fugue_sqlParser::YEAR - 256))
        | (1ULL << (fugue_sqlParser::PLUS - 256))
        | (1ULL << (fugue_sqlParser::MINUS - 256))
        | (1ULL << (fugue_sqlParser::ASTERISK - 256))
        | (1ULL << (fugue_sqlParser::DIV - 256)))) != 0) || ((((_la - 320) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 320)) & ((1ULL << (fugue_sqlParser::TILDE - 320))
        | (1ULL << (fugue_sqlParser::STRING - 320))
        | (1ULL << (fugue_sqlParser::BIGINT_LITERAL - 320))
        | (1ULL << (fugue_sqlParser::SMALLINT_LITERAL - 320))
        | (1ULL << (fugue_sqlParser::TINYINT_LITERAL - 320))
        | (1ULL << (fugue_sqlParser::INTEGER_VALUE - 320))
        | (1ULL << (fugue_sqlParser::EXPONENT_VALUE - 320))
        | (1ULL << (fugue_sqlParser::DECIMAL_VALUE - 320))
        | (1ULL << (fugue_sqlParser::DOUBLE_LITERAL - 320))
        | (1ULL << (fugue_sqlParser::BIGDECIMAL_LITERAL - 320))
        | (1ULL << (fugue_sqlParser::IDENTIFIER - 320))
        | (1ULL << (fugue_sqlParser::BACKQUOTED_IDENTIFIER - 320)))) != 0)) {
        setState(3372);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 451, _ctx)) {
        case 1: {
          setState(3371);
          setQuantifier();
          break;
        }

        default:
          break;
        }
        setState(3374);
        antlrcpp::downCast<FunctionCallContext *>(_localctx)->expressionContext = expression();
        antlrcpp::downCast<FunctionCallContext *>(_localctx)->argument.push_back(antlrcpp::downCast<FunctionCallContext *>(_localctx)->expressionContext);
        setState(3379);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == fugue_sqlParser::T__0) {
          setState(3375);
          match(fugue_sqlParser::T__0);
          setState(3376);
          antlrcpp::downCast<FunctionCallContext *>(_localctx)->expressionContext = expression();
          antlrcpp::downCast<FunctionCallContext *>(_localctx)->argument.push_back(antlrcpp::downCast<FunctionCallContext *>(_localctx)->expressionContext);
          setState(3381);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
      }
      setState(3384);
      match(fugue_sqlParser::T__3);
      setState(3391);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 454, _ctx)) {
      case 1: {
        setState(3385);
        match(fugue_sqlParser::FILTER);
        setState(3386);
        match(fugue_sqlParser::T__2);
        setState(3387);
        match(fugue_sqlParser::WHERE);
        setState(3388);
        antlrcpp::downCast<FunctionCallContext *>(_localctx)->where = booleanExpression(0);
        setState(3389);
        match(fugue_sqlParser::T__3);
        break;
      }

      default:
        break;
      }
      setState(3395);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 455, _ctx)) {
      case 1: {
        setState(3393);
        match(fugue_sqlParser::OVER);
        setState(3394);
        windowSpec();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 15: {
      _localctx = _tracker.createInstance<LambdaContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(3397);
      identifier();
      setState(3398);
      match(fugue_sqlParser::T__15);
      setState(3399);
      expression();
      break;
    }

    case 16: {
      _localctx = _tracker.createInstance<LambdaContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(3401);
      match(fugue_sqlParser::T__2);
      setState(3402);
      identifier();
      setState(3405); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(3403);
        match(fugue_sqlParser::T__0);
        setState(3404);
        identifier();
        setState(3407); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (_la == fugue_sqlParser::T__0);
      setState(3409);
      match(fugue_sqlParser::T__3);
      setState(3410);
      match(fugue_sqlParser::T__15);
      setState(3411);
      expression();
      break;
    }

    case 17: {
      _localctx = _tracker.createInstance<ColumnReferenceContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(3413);
      identifier();
      break;
    }

    case 18: {
      _localctx = _tracker.createInstance<ParenthesizedExpressionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(3414);
      match(fugue_sqlParser::T__2);
      setState(3415);
      expression();
      setState(3416);
      match(fugue_sqlParser::T__3);
      break;
    }

    case 19: {
      _localctx = _tracker.createInstance<ExtractContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(3418);
      match(fugue_sqlParser::EXTRACT);
      setState(3419);
      match(fugue_sqlParser::T__2);
      setState(3420);
      antlrcpp::downCast<ExtractContext *>(_localctx)->field = identifier();
      setState(3421);
      match(fugue_sqlParser::FROM);
      setState(3422);
      antlrcpp::downCast<ExtractContext *>(_localctx)->source = valueExpression(0);
      setState(3423);
      match(fugue_sqlParser::T__3);
      break;
    }

    case 20: {
      _localctx = _tracker.createInstance<SubstringContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(3425);
      _la = _input->LA(1);
      if (!(_la == fugue_sqlParser::SUBSTR

      || _la == fugue_sqlParser::SUBSTRING)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(3426);
      match(fugue_sqlParser::T__2);
      setState(3427);
      antlrcpp::downCast<SubstringContext *>(_localctx)->istr = valueExpression(0);
      setState(3428);
      _la = _input->LA(1);
      if (!(_la == fugue_sqlParser::T__0 || _la == fugue_sqlParser::FROM)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(3429);
      antlrcpp::downCast<SubstringContext *>(_localctx)->pos = valueExpression(0);
      setState(3432);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::T__0 || _la == fugue_sqlParser::FOR) {
        setState(3430);
        _la = _input->LA(1);
        if (!(_la == fugue_sqlParser::T__0 || _la == fugue_sqlParser::FOR)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(3431);
        antlrcpp::downCast<SubstringContext *>(_localctx)->ilen = valueExpression(0);
      }
      setState(3434);
      match(fugue_sqlParser::T__3);
      break;
    }

    case 21: {
      _localctx = _tracker.createInstance<TrimContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(3436);
      match(fugue_sqlParser::TRIM);
      setState(3437);
      match(fugue_sqlParser::T__2);
      setState(3439);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 458, _ctx)) {
      case 1: {
        setState(3438);
        antlrcpp::downCast<TrimContext *>(_localctx)->trimOption = _input->LT(1);
        _la = _input->LA(1);
        if (!(_la == fugue_sqlParser::BOTH || _la == fugue_sqlParser::LEADING || _la == fugue_sqlParser::TRAILING)) {
          antlrcpp::downCast<TrimContext *>(_localctx)->trimOption = _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      default:
        break;
      }
      setState(3442);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 459, _ctx)) {
      case 1: {
        setState(3441);
        antlrcpp::downCast<TrimContext *>(_localctx)->trimStr = valueExpression(0);
        break;
      }

      default:
        break;
      }
      setState(3444);
      match(fugue_sqlParser::FROM);
      setState(3445);
      antlrcpp::downCast<TrimContext *>(_localctx)->srcStr = valueExpression(0);
      setState(3446);
      match(fugue_sqlParser::T__3);
      break;
    }

    case 22: {
      _localctx = _tracker.createInstance<OverlayContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(3448);
      match(fugue_sqlParser::OVERLAY);
      setState(3449);
      match(fugue_sqlParser::T__2);
      setState(3450);
      antlrcpp::downCast<OverlayContext *>(_localctx)->iinput = valueExpression(0);
      setState(3451);
      match(fugue_sqlParser::PLACING);
      setState(3452);
      antlrcpp::downCast<OverlayContext *>(_localctx)->replace = valueExpression(0);
      setState(3453);
      match(fugue_sqlParser::FROM);
      setState(3454);
      antlrcpp::downCast<OverlayContext *>(_localctx)->position = valueExpression(0);
      setState(3457);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::FOR) {
        setState(3455);
        match(fugue_sqlParser::FOR);
        setState(3456);
        antlrcpp::downCast<OverlayContext *>(_localctx)->length = valueExpression(0);
      }
      setState(3459);
      match(fugue_sqlParser::T__3);
      break;
    }

    default:
      break;
    }
    _ctx->stop = _input->LT(-1);
    setState(3473);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 463, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(3471);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 462, _ctx)) {
        case 1: {
          auto newContext = _tracker.createInstance<SubscriptContext>(_tracker.createInstance<PrimaryExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->value = previousContext;
          pushNewRecursionContext(newContext, startState, RulePrimaryExpression);
          setState(3463);

          if (!(precpred(_ctx, 8))) throw FailedPredicateException(this, "precpred(_ctx, 8)");
          setState(3464);
          match(fugue_sqlParser::T__4);
          setState(3465);
          antlrcpp::downCast<SubscriptContext *>(_localctx)->index = valueExpression(0);
          setState(3466);
          match(fugue_sqlParser::T__5);
          break;
        }

        case 2: {
          auto newContext = _tracker.createInstance<DereferenceContext>(_tracker.createInstance<PrimaryExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->base = previousContext;
          pushNewRecursionContext(newContext, startState, RulePrimaryExpression);
          setState(3468);

          if (!(precpred(_ctx, 6))) throw FailedPredicateException(this, "precpred(_ctx, 6)");
          setState(3469);
          match(fugue_sqlParser::T__6);
          setState(3470);
          antlrcpp::downCast<DereferenceContext *>(_localctx)->fieldName = identifier();
          break;
        }

        default:
          break;
        } 
      }
      setState(3475);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 463, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- ConstantContext ------------------------------------------------------------------

fugue_sqlParser::ConstantContext::ConstantContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t fugue_sqlParser::ConstantContext::getRuleIndex() const {
  return fugue_sqlParser::RuleConstant;
}

void fugue_sqlParser::ConstantContext::copyFrom(ConstantContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- NullLiteralContext ------------------------------------------------------------------

tree::TerminalNode* fugue_sqlParser::NullLiteralContext::THENULL() {
  return getToken(fugue_sqlParser::THENULL, 0);
}

fugue_sqlParser::NullLiteralContext::NullLiteralContext(ConstantContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::NullLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitNullLiteral(this);
  else
    return visitor->visitChildren(this);
}
//----------------- StringLiteralContext ------------------------------------------------------------------

std::vector<tree::TerminalNode *> fugue_sqlParser::StringLiteralContext::STRING() {
  return getTokens(fugue_sqlParser::STRING);
}

tree::TerminalNode* fugue_sqlParser::StringLiteralContext::STRING(size_t i) {
  return getToken(fugue_sqlParser::STRING, i);
}

fugue_sqlParser::StringLiteralContext::StringLiteralContext(ConstantContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::StringLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitStringLiteral(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TypeConstructorContext ------------------------------------------------------------------

fugue_sqlParser::IdentifierContext* fugue_sqlParser::TypeConstructorContext::identifier() {
  return getRuleContext<fugue_sqlParser::IdentifierContext>(0);
}

tree::TerminalNode* fugue_sqlParser::TypeConstructorContext::STRING() {
  return getToken(fugue_sqlParser::STRING, 0);
}

fugue_sqlParser::TypeConstructorContext::TypeConstructorContext(ConstantContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::TypeConstructorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitTypeConstructor(this);
  else
    return visitor->visitChildren(this);
}
//----------------- IntervalLiteralContext ------------------------------------------------------------------

fugue_sqlParser::IntervalContext* fugue_sqlParser::IntervalLiteralContext::interval() {
  return getRuleContext<fugue_sqlParser::IntervalContext>(0);
}

fugue_sqlParser::IntervalLiteralContext::IntervalLiteralContext(ConstantContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::IntervalLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitIntervalLiteral(this);
  else
    return visitor->visitChildren(this);
}
//----------------- NumericLiteralContext ------------------------------------------------------------------

fugue_sqlParser::NumberContext* fugue_sqlParser::NumericLiteralContext::number() {
  return getRuleContext<fugue_sqlParser::NumberContext>(0);
}

fugue_sqlParser::NumericLiteralContext::NumericLiteralContext(ConstantContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::NumericLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitNumericLiteral(this);
  else
    return visitor->visitChildren(this);
}
//----------------- BooleanLiteralContext ------------------------------------------------------------------

fugue_sqlParser::BooleanValueContext* fugue_sqlParser::BooleanLiteralContext::booleanValue() {
  return getRuleContext<fugue_sqlParser::BooleanValueContext>(0);
}

fugue_sqlParser::BooleanLiteralContext::BooleanLiteralContext(ConstantContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::BooleanLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitBooleanLiteral(this);
  else
    return visitor->visitChildren(this);
}
fugue_sqlParser::ConstantContext* fugue_sqlParser::constant() {
  ConstantContext *_localctx = _tracker.createInstance<ConstantContext>(_ctx, getState());
  enterRule(_localctx, 348, fugue_sqlParser::RuleConstant);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(3488);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 465, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<fugue_sqlParser::NullLiteralContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(3476);
      match(fugue_sqlParser::THENULL);
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<fugue_sqlParser::IntervalLiteralContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(3477);
      interval();
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<fugue_sqlParser::TypeConstructorContext>(_localctx);
      enterOuterAlt(_localctx, 3);
      setState(3478);
      identifier();
      setState(3479);
      match(fugue_sqlParser::STRING);
      break;
    }

    case 4: {
      _localctx = _tracker.createInstance<fugue_sqlParser::NumericLiteralContext>(_localctx);
      enterOuterAlt(_localctx, 4);
      setState(3481);
      number();
      break;
    }

    case 5: {
      _localctx = _tracker.createInstance<fugue_sqlParser::BooleanLiteralContext>(_localctx);
      enterOuterAlt(_localctx, 5);
      setState(3482);
      booleanValue();
      break;
    }

    case 6: {
      _localctx = _tracker.createInstance<fugue_sqlParser::StringLiteralContext>(_localctx);
      enterOuterAlt(_localctx, 6);
      setState(3484); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(3483);
                match(fugue_sqlParser::STRING);
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(3486); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 464, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ComparisonOperatorContext ------------------------------------------------------------------

fugue_sqlParser::ComparisonOperatorContext::ComparisonOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

fugue_sqlParser::ComparisonEqualOperatorContext* fugue_sqlParser::ComparisonOperatorContext::comparisonEqualOperator() {
  return getRuleContext<fugue_sqlParser::ComparisonEqualOperatorContext>(0);
}

tree::TerminalNode* fugue_sqlParser::ComparisonOperatorContext::NEQ() {
  return getToken(fugue_sqlParser::NEQ, 0);
}

tree::TerminalNode* fugue_sqlParser::ComparisonOperatorContext::NEQJ() {
  return getToken(fugue_sqlParser::NEQJ, 0);
}

tree::TerminalNode* fugue_sqlParser::ComparisonOperatorContext::LT() {
  return getToken(fugue_sqlParser::LT, 0);
}

tree::TerminalNode* fugue_sqlParser::ComparisonOperatorContext::LTE() {
  return getToken(fugue_sqlParser::LTE, 0);
}

tree::TerminalNode* fugue_sqlParser::ComparisonOperatorContext::GT() {
  return getToken(fugue_sqlParser::GT, 0);
}

tree::TerminalNode* fugue_sqlParser::ComparisonOperatorContext::GTE() {
  return getToken(fugue_sqlParser::GTE, 0);
}

tree::TerminalNode* fugue_sqlParser::ComparisonOperatorContext::NSEQ() {
  return getToken(fugue_sqlParser::NSEQ, 0);
}


size_t fugue_sqlParser::ComparisonOperatorContext::getRuleIndex() const {
  return fugue_sqlParser::RuleComparisonOperator;
}


antlrcpp::Any fugue_sqlParser::ComparisonOperatorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitComparisonOperator(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::ComparisonOperatorContext* fugue_sqlParser::comparisonOperator() {
  ComparisonOperatorContext *_localctx = _tracker.createInstance<ComparisonOperatorContext>(_ctx, getState());
  enterRule(_localctx, 350, fugue_sqlParser::RuleComparisonOperator);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3498);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case fugue_sqlParser::EQUAL:
      case fugue_sqlParser::DOUBLEEQUAL: {
        enterOuterAlt(_localctx, 1);
        setState(3490);
        comparisonEqualOperator();
        break;
      }

      case fugue_sqlParser::NEQ: {
        enterOuterAlt(_localctx, 2);
        setState(3491);
        match(fugue_sqlParser::NEQ);
        break;
      }

      case fugue_sqlParser::NEQJ: {
        enterOuterAlt(_localctx, 3);
        setState(3492);
        match(fugue_sqlParser::NEQJ);
        break;
      }

      case fugue_sqlParser::LT: {
        enterOuterAlt(_localctx, 4);
        setState(3493);
        match(fugue_sqlParser::LT);
        break;
      }

      case fugue_sqlParser::LTE: {
        enterOuterAlt(_localctx, 5);
        setState(3494);
        match(fugue_sqlParser::LTE);
        break;
      }

      case fugue_sqlParser::GT: {
        enterOuterAlt(_localctx, 6);
        setState(3495);
        match(fugue_sqlParser::GT);
        break;
      }

      case fugue_sqlParser::GTE: {
        enterOuterAlt(_localctx, 7);
        setState(3496);
        match(fugue_sqlParser::GTE);
        break;
      }

      case fugue_sqlParser::NSEQ: {
        enterOuterAlt(_localctx, 8);
        setState(3497);
        match(fugue_sqlParser::NSEQ);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ComparisonEqualOperatorContext ------------------------------------------------------------------

fugue_sqlParser::ComparisonEqualOperatorContext::ComparisonEqualOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* fugue_sqlParser::ComparisonEqualOperatorContext::DOUBLEEQUAL() {
  return getToken(fugue_sqlParser::DOUBLEEQUAL, 0);
}

tree::TerminalNode* fugue_sqlParser::ComparisonEqualOperatorContext::EQUAL() {
  return getToken(fugue_sqlParser::EQUAL, 0);
}


size_t fugue_sqlParser::ComparisonEqualOperatorContext::getRuleIndex() const {
  return fugue_sqlParser::RuleComparisonEqualOperator;
}


antlrcpp::Any fugue_sqlParser::ComparisonEqualOperatorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitComparisonEqualOperator(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::ComparisonEqualOperatorContext* fugue_sqlParser::comparisonEqualOperator() {
  ComparisonEqualOperatorContext *_localctx = _tracker.createInstance<ComparisonEqualOperatorContext>(_ctx, getState());
  enterRule(_localctx, 352, fugue_sqlParser::RuleComparisonEqualOperator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3500);
    _la = _input->LA(1);
    if (!(_la == fugue_sqlParser::EQUAL

    || _la == fugue_sqlParser::DOUBLEEQUAL)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArithmeticOperatorContext ------------------------------------------------------------------

fugue_sqlParser::ArithmeticOperatorContext::ArithmeticOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* fugue_sqlParser::ArithmeticOperatorContext::PLUS() {
  return getToken(fugue_sqlParser::PLUS, 0);
}

tree::TerminalNode* fugue_sqlParser::ArithmeticOperatorContext::MINUS() {
  return getToken(fugue_sqlParser::MINUS, 0);
}

tree::TerminalNode* fugue_sqlParser::ArithmeticOperatorContext::ASTERISK() {
  return getToken(fugue_sqlParser::ASTERISK, 0);
}

tree::TerminalNode* fugue_sqlParser::ArithmeticOperatorContext::SLASH() {
  return getToken(fugue_sqlParser::SLASH, 0);
}

tree::TerminalNode* fugue_sqlParser::ArithmeticOperatorContext::PERCENT() {
  return getToken(fugue_sqlParser::PERCENT, 0);
}

tree::TerminalNode* fugue_sqlParser::ArithmeticOperatorContext::DIV() {
  return getToken(fugue_sqlParser::DIV, 0);
}

tree::TerminalNode* fugue_sqlParser::ArithmeticOperatorContext::TILDE() {
  return getToken(fugue_sqlParser::TILDE, 0);
}

tree::TerminalNode* fugue_sqlParser::ArithmeticOperatorContext::AMPERSAND() {
  return getToken(fugue_sqlParser::AMPERSAND, 0);
}

tree::TerminalNode* fugue_sqlParser::ArithmeticOperatorContext::PIPE() {
  return getToken(fugue_sqlParser::PIPE, 0);
}

tree::TerminalNode* fugue_sqlParser::ArithmeticOperatorContext::CONCAT_PIPE() {
  return getToken(fugue_sqlParser::CONCAT_PIPE, 0);
}

tree::TerminalNode* fugue_sqlParser::ArithmeticOperatorContext::HAT() {
  return getToken(fugue_sqlParser::HAT, 0);
}


size_t fugue_sqlParser::ArithmeticOperatorContext::getRuleIndex() const {
  return fugue_sqlParser::RuleArithmeticOperator;
}


antlrcpp::Any fugue_sqlParser::ArithmeticOperatorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitArithmeticOperator(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::ArithmeticOperatorContext* fugue_sqlParser::arithmeticOperator() {
  ArithmeticOperatorContext *_localctx = _tracker.createInstance<ArithmeticOperatorContext>(_ctx, getState());
  enterRule(_localctx, 354, fugue_sqlParser::RuleArithmeticOperator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3502);
    _la = _input->LA(1);
    if (!(((((_la - 314) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 314)) & ((1ULL << (fugue_sqlParser::PLUS - 314))
      | (1ULL << (fugue_sqlParser::MINUS - 314))
      | (1ULL << (fugue_sqlParser::ASTERISK - 314))
      | (1ULL << (fugue_sqlParser::SLASH - 314))
      | (1ULL << (fugue_sqlParser::PERCENT - 314))
      | (1ULL << (fugue_sqlParser::DIV - 314))
      | (1ULL << (fugue_sqlParser::TILDE - 314))
      | (1ULL << (fugue_sqlParser::AMPERSAND - 314))
      | (1ULL << (fugue_sqlParser::PIPE - 314))
      | (1ULL << (fugue_sqlParser::CONCAT_PIPE - 314))
      | (1ULL << (fugue_sqlParser::HAT - 314)))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PredicateOperatorContext ------------------------------------------------------------------

fugue_sqlParser::PredicateOperatorContext::PredicateOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* fugue_sqlParser::PredicateOperatorContext::OR() {
  return getToken(fugue_sqlParser::OR, 0);
}

tree::TerminalNode* fugue_sqlParser::PredicateOperatorContext::AND() {
  return getToken(fugue_sqlParser::AND, 0);
}

tree::TerminalNode* fugue_sqlParser::PredicateOperatorContext::IN() {
  return getToken(fugue_sqlParser::IN, 0);
}

tree::TerminalNode* fugue_sqlParser::PredicateOperatorContext::NOT() {
  return getToken(fugue_sqlParser::NOT, 0);
}


size_t fugue_sqlParser::PredicateOperatorContext::getRuleIndex() const {
  return fugue_sqlParser::RulePredicateOperator;
}


antlrcpp::Any fugue_sqlParser::PredicateOperatorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitPredicateOperator(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::PredicateOperatorContext* fugue_sqlParser::predicateOperator() {
  PredicateOperatorContext *_localctx = _tracker.createInstance<PredicateOperatorContext>(_ctx, getState());
  enterRule(_localctx, 356, fugue_sqlParser::RulePredicateOperator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3504);
    _la = _input->LA(1);
    if (!(_la == fugue_sqlParser::AND || ((((_la - 154) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 154)) & ((1ULL << (fugue_sqlParser::IN - 154))
      | (1ULL << (fugue_sqlParser::NOT - 154))
      | (1ULL << (fugue_sqlParser::OR - 154)))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BooleanValueContext ------------------------------------------------------------------

fugue_sqlParser::BooleanValueContext::BooleanValueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* fugue_sqlParser::BooleanValueContext::TRUE() {
  return getToken(fugue_sqlParser::TRUE, 0);
}

tree::TerminalNode* fugue_sqlParser::BooleanValueContext::FALSE() {
  return getToken(fugue_sqlParser::FALSE, 0);
}


size_t fugue_sqlParser::BooleanValueContext::getRuleIndex() const {
  return fugue_sqlParser::RuleBooleanValue;
}


antlrcpp::Any fugue_sqlParser::BooleanValueContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitBooleanValue(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::BooleanValueContext* fugue_sqlParser::booleanValue() {
  BooleanValueContext *_localctx = _tracker.createInstance<BooleanValueContext>(_ctx, getState());
  enterRule(_localctx, 358, fugue_sqlParser::RuleBooleanValue);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3506);
    _la = _input->LA(1);
    if (!(_la == fugue_sqlParser::FALSE || _la == fugue_sqlParser::TRUE)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IntervalContext ------------------------------------------------------------------

fugue_sqlParser::IntervalContext::IntervalContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* fugue_sqlParser::IntervalContext::INTERVAL() {
  return getToken(fugue_sqlParser::INTERVAL, 0);
}

fugue_sqlParser::ErrorCapturingMultiUnitsIntervalContext* fugue_sqlParser::IntervalContext::errorCapturingMultiUnitsInterval() {
  return getRuleContext<fugue_sqlParser::ErrorCapturingMultiUnitsIntervalContext>(0);
}

fugue_sqlParser::ErrorCapturingUnitToUnitIntervalContext* fugue_sqlParser::IntervalContext::errorCapturingUnitToUnitInterval() {
  return getRuleContext<fugue_sqlParser::ErrorCapturingUnitToUnitIntervalContext>(0);
}


size_t fugue_sqlParser::IntervalContext::getRuleIndex() const {
  return fugue_sqlParser::RuleInterval;
}


antlrcpp::Any fugue_sqlParser::IntervalContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitInterval(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::IntervalContext* fugue_sqlParser::interval() {
  IntervalContext *_localctx = _tracker.createInstance<IntervalContext>(_ctx, getState());
  enterRule(_localctx, 360, fugue_sqlParser::RuleInterval);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3508);
    match(fugue_sqlParser::INTERVAL);
    setState(3511);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 467, _ctx)) {
    case 1: {
      setState(3509);
      errorCapturingMultiUnitsInterval();
      break;
    }

    case 2: {
      setState(3510);
      errorCapturingUnitToUnitInterval();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ErrorCapturingMultiUnitsIntervalContext ------------------------------------------------------------------

fugue_sqlParser::ErrorCapturingMultiUnitsIntervalContext::ErrorCapturingMultiUnitsIntervalContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

fugue_sqlParser::MultiUnitsIntervalContext* fugue_sqlParser::ErrorCapturingMultiUnitsIntervalContext::multiUnitsInterval() {
  return getRuleContext<fugue_sqlParser::MultiUnitsIntervalContext>(0);
}

fugue_sqlParser::UnitToUnitIntervalContext* fugue_sqlParser::ErrorCapturingMultiUnitsIntervalContext::unitToUnitInterval() {
  return getRuleContext<fugue_sqlParser::UnitToUnitIntervalContext>(0);
}


size_t fugue_sqlParser::ErrorCapturingMultiUnitsIntervalContext::getRuleIndex() const {
  return fugue_sqlParser::RuleErrorCapturingMultiUnitsInterval;
}


antlrcpp::Any fugue_sqlParser::ErrorCapturingMultiUnitsIntervalContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitErrorCapturingMultiUnitsInterval(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::ErrorCapturingMultiUnitsIntervalContext* fugue_sqlParser::errorCapturingMultiUnitsInterval() {
  ErrorCapturingMultiUnitsIntervalContext *_localctx = _tracker.createInstance<ErrorCapturingMultiUnitsIntervalContext>(_ctx, getState());
  enterRule(_localctx, 362, fugue_sqlParser::RuleErrorCapturingMultiUnitsInterval);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3513);
    multiUnitsInterval();
    setState(3515);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 468, _ctx)) {
    case 1: {
      setState(3514);
      unitToUnitInterval();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MultiUnitsIntervalContext ------------------------------------------------------------------

fugue_sqlParser::MultiUnitsIntervalContext::MultiUnitsIntervalContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<fugue_sqlParser::IntervalValueContext *> fugue_sqlParser::MultiUnitsIntervalContext::intervalValue() {
  return getRuleContexts<fugue_sqlParser::IntervalValueContext>();
}

fugue_sqlParser::IntervalValueContext* fugue_sqlParser::MultiUnitsIntervalContext::intervalValue(size_t i) {
  return getRuleContext<fugue_sqlParser::IntervalValueContext>(i);
}

std::vector<fugue_sqlParser::IntervalUnitContext *> fugue_sqlParser::MultiUnitsIntervalContext::intervalUnit() {
  return getRuleContexts<fugue_sqlParser::IntervalUnitContext>();
}

fugue_sqlParser::IntervalUnitContext* fugue_sqlParser::MultiUnitsIntervalContext::intervalUnit(size_t i) {
  return getRuleContext<fugue_sqlParser::IntervalUnitContext>(i);
}


size_t fugue_sqlParser::MultiUnitsIntervalContext::getRuleIndex() const {
  return fugue_sqlParser::RuleMultiUnitsInterval;
}


antlrcpp::Any fugue_sqlParser::MultiUnitsIntervalContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitMultiUnitsInterval(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::MultiUnitsIntervalContext* fugue_sqlParser::multiUnitsInterval() {
  MultiUnitsIntervalContext *_localctx = _tracker.createInstance<MultiUnitsIntervalContext>(_ctx, getState());
  enterRule(_localctx, 364, fugue_sqlParser::RuleMultiUnitsInterval);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3520); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(3517);
              intervalValue();
              setState(3518);
              intervalUnit();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(3522); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 469, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ErrorCapturingUnitToUnitIntervalContext ------------------------------------------------------------------

fugue_sqlParser::ErrorCapturingUnitToUnitIntervalContext::ErrorCapturingUnitToUnitIntervalContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<fugue_sqlParser::UnitToUnitIntervalContext *> fugue_sqlParser::ErrorCapturingUnitToUnitIntervalContext::unitToUnitInterval() {
  return getRuleContexts<fugue_sqlParser::UnitToUnitIntervalContext>();
}

fugue_sqlParser::UnitToUnitIntervalContext* fugue_sqlParser::ErrorCapturingUnitToUnitIntervalContext::unitToUnitInterval(size_t i) {
  return getRuleContext<fugue_sqlParser::UnitToUnitIntervalContext>(i);
}

fugue_sqlParser::MultiUnitsIntervalContext* fugue_sqlParser::ErrorCapturingUnitToUnitIntervalContext::multiUnitsInterval() {
  return getRuleContext<fugue_sqlParser::MultiUnitsIntervalContext>(0);
}


size_t fugue_sqlParser::ErrorCapturingUnitToUnitIntervalContext::getRuleIndex() const {
  return fugue_sqlParser::RuleErrorCapturingUnitToUnitInterval;
}


antlrcpp::Any fugue_sqlParser::ErrorCapturingUnitToUnitIntervalContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitErrorCapturingUnitToUnitInterval(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::ErrorCapturingUnitToUnitIntervalContext* fugue_sqlParser::errorCapturingUnitToUnitInterval() {
  ErrorCapturingUnitToUnitIntervalContext *_localctx = _tracker.createInstance<ErrorCapturingUnitToUnitIntervalContext>(_ctx, getState());
  enterRule(_localctx, 366, fugue_sqlParser::RuleErrorCapturingUnitToUnitInterval);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3524);
    antlrcpp::downCast<ErrorCapturingUnitToUnitIntervalContext *>(_localctx)->body = unitToUnitInterval();
    setState(3527);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 470, _ctx)) {
    case 1: {
      setState(3525);
      antlrcpp::downCast<ErrorCapturingUnitToUnitIntervalContext *>(_localctx)->error1 = multiUnitsInterval();
      break;
    }

    case 2: {
      setState(3526);
      antlrcpp::downCast<ErrorCapturingUnitToUnitIntervalContext *>(_localctx)->error2 = unitToUnitInterval();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnitToUnitIntervalContext ------------------------------------------------------------------

fugue_sqlParser::UnitToUnitIntervalContext::UnitToUnitIntervalContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* fugue_sqlParser::UnitToUnitIntervalContext::TO() {
  return getToken(fugue_sqlParser::TO, 0);
}

fugue_sqlParser::IntervalValueContext* fugue_sqlParser::UnitToUnitIntervalContext::intervalValue() {
  return getRuleContext<fugue_sqlParser::IntervalValueContext>(0);
}

std::vector<fugue_sqlParser::IntervalUnitContext *> fugue_sqlParser::UnitToUnitIntervalContext::intervalUnit() {
  return getRuleContexts<fugue_sqlParser::IntervalUnitContext>();
}

fugue_sqlParser::IntervalUnitContext* fugue_sqlParser::UnitToUnitIntervalContext::intervalUnit(size_t i) {
  return getRuleContext<fugue_sqlParser::IntervalUnitContext>(i);
}


size_t fugue_sqlParser::UnitToUnitIntervalContext::getRuleIndex() const {
  return fugue_sqlParser::RuleUnitToUnitInterval;
}


antlrcpp::Any fugue_sqlParser::UnitToUnitIntervalContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitUnitToUnitInterval(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::UnitToUnitIntervalContext* fugue_sqlParser::unitToUnitInterval() {
  UnitToUnitIntervalContext *_localctx = _tracker.createInstance<UnitToUnitIntervalContext>(_ctx, getState());
  enterRule(_localctx, 368, fugue_sqlParser::RuleUnitToUnitInterval);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3529);
    antlrcpp::downCast<UnitToUnitIntervalContext *>(_localctx)->value = intervalValue();
    setState(3530);
    antlrcpp::downCast<UnitToUnitIntervalContext *>(_localctx)->ifrom = intervalUnit();
    setState(3531);
    match(fugue_sqlParser::TO);
    setState(3532);
    antlrcpp::downCast<UnitToUnitIntervalContext *>(_localctx)->to = intervalUnit();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IntervalValueContext ------------------------------------------------------------------

fugue_sqlParser::IntervalValueContext::IntervalValueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* fugue_sqlParser::IntervalValueContext::INTEGER_VALUE() {
  return getToken(fugue_sqlParser::INTEGER_VALUE, 0);
}

tree::TerminalNode* fugue_sqlParser::IntervalValueContext::DECIMAL_VALUE() {
  return getToken(fugue_sqlParser::DECIMAL_VALUE, 0);
}

tree::TerminalNode* fugue_sqlParser::IntervalValueContext::PLUS() {
  return getToken(fugue_sqlParser::PLUS, 0);
}

tree::TerminalNode* fugue_sqlParser::IntervalValueContext::MINUS() {
  return getToken(fugue_sqlParser::MINUS, 0);
}

tree::TerminalNode* fugue_sqlParser::IntervalValueContext::STRING() {
  return getToken(fugue_sqlParser::STRING, 0);
}


size_t fugue_sqlParser::IntervalValueContext::getRuleIndex() const {
  return fugue_sqlParser::RuleIntervalValue;
}


antlrcpp::Any fugue_sqlParser::IntervalValueContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitIntervalValue(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::IntervalValueContext* fugue_sqlParser::intervalValue() {
  IntervalValueContext *_localctx = _tracker.createInstance<IntervalValueContext>(_ctx, getState());
  enterRule(_localctx, 370, fugue_sqlParser::RuleIntervalValue);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3539);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case fugue_sqlParser::PLUS:
      case fugue_sqlParser::MINUS:
      case fugue_sqlParser::INTEGER_VALUE:
      case fugue_sqlParser::DECIMAL_VALUE: {
        enterOuterAlt(_localctx, 1);
        setState(3535);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == fugue_sqlParser::PLUS

        || _la == fugue_sqlParser::MINUS) {
          setState(3534);
          _la = _input->LA(1);
          if (!(_la == fugue_sqlParser::PLUS

          || _la == fugue_sqlParser::MINUS)) {
          _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
        }
        setState(3537);
        _la = _input->LA(1);
        if (!(_la == fugue_sqlParser::INTEGER_VALUE

        || _la == fugue_sqlParser::DECIMAL_VALUE)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      case fugue_sqlParser::STRING: {
        enterOuterAlt(_localctx, 2);
        setState(3538);
        match(fugue_sqlParser::STRING);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IntervalUnitContext ------------------------------------------------------------------

fugue_sqlParser::IntervalUnitContext::IntervalUnitContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* fugue_sqlParser::IntervalUnitContext::DAY() {
  return getToken(fugue_sqlParser::DAY, 0);
}

tree::TerminalNode* fugue_sqlParser::IntervalUnitContext::HOUR() {
  return getToken(fugue_sqlParser::HOUR, 0);
}

tree::TerminalNode* fugue_sqlParser::IntervalUnitContext::MINUTE() {
  return getToken(fugue_sqlParser::MINUTE, 0);
}

tree::TerminalNode* fugue_sqlParser::IntervalUnitContext::MONTH() {
  return getToken(fugue_sqlParser::MONTH, 0);
}

tree::TerminalNode* fugue_sqlParser::IntervalUnitContext::SECOND() {
  return getToken(fugue_sqlParser::SECOND, 0);
}

tree::TerminalNode* fugue_sqlParser::IntervalUnitContext::YEAR() {
  return getToken(fugue_sqlParser::YEAR, 0);
}

fugue_sqlParser::IdentifierContext* fugue_sqlParser::IntervalUnitContext::identifier() {
  return getRuleContext<fugue_sqlParser::IdentifierContext>(0);
}


size_t fugue_sqlParser::IntervalUnitContext::getRuleIndex() const {
  return fugue_sqlParser::RuleIntervalUnit;
}


antlrcpp::Any fugue_sqlParser::IntervalUnitContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitIntervalUnit(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::IntervalUnitContext* fugue_sqlParser::intervalUnit() {
  IntervalUnitContext *_localctx = _tracker.createInstance<IntervalUnitContext>(_ctx, getState());
  enterRule(_localctx, 372, fugue_sqlParser::RuleIntervalUnit);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3548);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 473, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3541);
      match(fugue_sqlParser::DAY);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3542);
      match(fugue_sqlParser::HOUR);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(3543);
      match(fugue_sqlParser::MINUTE);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(3544);
      match(fugue_sqlParser::MONTH);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(3545);
      match(fugue_sqlParser::SECOND);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(3546);
      match(fugue_sqlParser::YEAR);
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(3547);
      identifier();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ColPositionContext ------------------------------------------------------------------

fugue_sqlParser::ColPositionContext::ColPositionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* fugue_sqlParser::ColPositionContext::FIRST() {
  return getToken(fugue_sqlParser::FIRST, 0);
}

tree::TerminalNode* fugue_sqlParser::ColPositionContext::AFTER() {
  return getToken(fugue_sqlParser::AFTER, 0);
}

fugue_sqlParser::ErrorCapturingIdentifierContext* fugue_sqlParser::ColPositionContext::errorCapturingIdentifier() {
  return getRuleContext<fugue_sqlParser::ErrorCapturingIdentifierContext>(0);
}


size_t fugue_sqlParser::ColPositionContext::getRuleIndex() const {
  return fugue_sqlParser::RuleColPosition;
}


antlrcpp::Any fugue_sqlParser::ColPositionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitColPosition(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::ColPositionContext* fugue_sqlParser::colPosition() {
  ColPositionContext *_localctx = _tracker.createInstance<ColPositionContext>(_ctx, getState());
  enterRule(_localctx, 374, fugue_sqlParser::RuleColPosition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3553);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case fugue_sqlParser::FIRST: {
        enterOuterAlt(_localctx, 1);
        setState(3550);
        antlrcpp::downCast<ColPositionContext *>(_localctx)->position = match(fugue_sqlParser::FIRST);
        break;
      }

      case fugue_sqlParser::AFTER: {
        enterOuterAlt(_localctx, 2);
        setState(3551);
        antlrcpp::downCast<ColPositionContext *>(_localctx)->position = match(fugue_sqlParser::AFTER);
        setState(3552);
        antlrcpp::downCast<ColPositionContext *>(_localctx)->afterCol = errorCapturingIdentifier();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DataTypeContext ------------------------------------------------------------------

fugue_sqlParser::DataTypeContext::DataTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t fugue_sqlParser::DataTypeContext::getRuleIndex() const {
  return fugue_sqlParser::RuleDataType;
}

void fugue_sqlParser::DataTypeContext::copyFrom(DataTypeContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- ComplexDataTypeContext ------------------------------------------------------------------

tree::TerminalNode* fugue_sqlParser::ComplexDataTypeContext::LT() {
  return getToken(fugue_sqlParser::LT, 0);
}

std::vector<fugue_sqlParser::DataTypeContext *> fugue_sqlParser::ComplexDataTypeContext::dataType() {
  return getRuleContexts<fugue_sqlParser::DataTypeContext>();
}

fugue_sqlParser::DataTypeContext* fugue_sqlParser::ComplexDataTypeContext::dataType(size_t i) {
  return getRuleContext<fugue_sqlParser::DataTypeContext>(i);
}

tree::TerminalNode* fugue_sqlParser::ComplexDataTypeContext::GT() {
  return getToken(fugue_sqlParser::GT, 0);
}

tree::TerminalNode* fugue_sqlParser::ComplexDataTypeContext::ARRAY() {
  return getToken(fugue_sqlParser::ARRAY, 0);
}

tree::TerminalNode* fugue_sqlParser::ComplexDataTypeContext::MAP() {
  return getToken(fugue_sqlParser::MAP, 0);
}

tree::TerminalNode* fugue_sqlParser::ComplexDataTypeContext::STRUCT() {
  return getToken(fugue_sqlParser::STRUCT, 0);
}

tree::TerminalNode* fugue_sqlParser::ComplexDataTypeContext::NEQ() {
  return getToken(fugue_sqlParser::NEQ, 0);
}

fugue_sqlParser::ComplexColTypeListContext* fugue_sqlParser::ComplexDataTypeContext::complexColTypeList() {
  return getRuleContext<fugue_sqlParser::ComplexColTypeListContext>(0);
}

fugue_sqlParser::ComplexDataTypeContext::ComplexDataTypeContext(DataTypeContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::ComplexDataTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitComplexDataType(this);
  else
    return visitor->visitChildren(this);
}
//----------------- PrimitiveDataTypeContext ------------------------------------------------------------------

fugue_sqlParser::IdentifierContext* fugue_sqlParser::PrimitiveDataTypeContext::identifier() {
  return getRuleContext<fugue_sqlParser::IdentifierContext>(0);
}

std::vector<tree::TerminalNode *> fugue_sqlParser::PrimitiveDataTypeContext::INTEGER_VALUE() {
  return getTokens(fugue_sqlParser::INTEGER_VALUE);
}

tree::TerminalNode* fugue_sqlParser::PrimitiveDataTypeContext::INTEGER_VALUE(size_t i) {
  return getToken(fugue_sqlParser::INTEGER_VALUE, i);
}

fugue_sqlParser::PrimitiveDataTypeContext::PrimitiveDataTypeContext(DataTypeContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::PrimitiveDataTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitPrimitiveDataType(this);
  else
    return visitor->visitChildren(this);
}
fugue_sqlParser::DataTypeContext* fugue_sqlParser::dataType() {
  DataTypeContext *_localctx = _tracker.createInstance<DataTypeContext>(_ctx, getState());
  enterRule(_localctx, 376, fugue_sqlParser::RuleDataType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3589);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 479, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<fugue_sqlParser::ComplexDataTypeContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(3555);
      antlrcpp::downCast<ComplexDataTypeContext *>(_localctx)->icomplex = match(fugue_sqlParser::ARRAY);
      setState(3556);
      match(fugue_sqlParser::LT);
      setState(3557);
      dataType();
      setState(3558);
      match(fugue_sqlParser::GT);
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<fugue_sqlParser::ComplexDataTypeContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(3560);
      antlrcpp::downCast<ComplexDataTypeContext *>(_localctx)->icomplex = match(fugue_sqlParser::MAP);
      setState(3561);
      match(fugue_sqlParser::LT);
      setState(3562);
      dataType();
      setState(3563);
      match(fugue_sqlParser::T__0);
      setState(3564);
      dataType();
      setState(3565);
      match(fugue_sqlParser::GT);
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<fugue_sqlParser::ComplexDataTypeContext>(_localctx);
      enterOuterAlt(_localctx, 3);
      setState(3567);
      antlrcpp::downCast<ComplexDataTypeContext *>(_localctx)->icomplex = match(fugue_sqlParser::STRUCT);
      setState(3574);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case fugue_sqlParser::LT: {
          setState(3568);
          match(fugue_sqlParser::LT);
          setState(3570);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (((((_la - 53) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 53)) & ((1ULL << (fugue_sqlParser::ADD - 53))
            | (1ULL << (fugue_sqlParser::AFTER - 53))
            | (1ULL << (fugue_sqlParser::ALL - 53))
            | (1ULL << (fugue_sqlParser::ALTER - 53))
            | (1ULL << (fugue_sqlParser::ANALYZE - 53))
            | (1ULL << (fugue_sqlParser::AND - 53))
            | (1ULL << (fugue_sqlParser::ANTI - 53))
            | (1ULL << (fugue_sqlParser::ANY - 53))
            | (1ULL << (fugue_sqlParser::ARCHIVE - 53))
            | (1ULL << (fugue_sqlParser::ARRAY - 53))
            | (1ULL << (fugue_sqlParser::AS - 53))
            | (1ULL << (fugue_sqlParser::ASC - 53))
            | (1ULL << (fugue_sqlParser::AT - 53))
            | (1ULL << (fugue_sqlParser::AUTHORIZATION - 53))
            | (1ULL << (fugue_sqlParser::BETWEEN - 53))
            | (1ULL << (fugue_sqlParser::BOTH - 53))
            | (1ULL << (fugue_sqlParser::BUCKET - 53))
            | (1ULL << (fugue_sqlParser::BUCKETS - 53))
            | (1ULL << (fugue_sqlParser::BY - 53))
            | (1ULL << (fugue_sqlParser::CACHE - 53))
            | (1ULL << (fugue_sqlParser::CASCADE - 53))
            | (1ULL << (fugue_sqlParser::CASE - 53))
            | (1ULL << (fugue_sqlParser::CAST - 53))
            | (1ULL << (fugue_sqlParser::CHANGE - 53))
            | (1ULL << (fugue_sqlParser::CHECK - 53))
            | (1ULL << (fugue_sqlParser::CLEAR - 53))
            | (1ULL << (fugue_sqlParser::CLUSTER - 53))
            | (1ULL << (fugue_sqlParser::CLUSTERED - 53))
            | (1ULL << (fugue_sqlParser::CODEGEN - 53))
            | (1ULL << (fugue_sqlParser::COLLATE - 53))
            | (1ULL << (fugue_sqlParser::COLLECTION - 53))
            | (1ULL << (fugue_sqlParser::COLUMN - 53))
            | (1ULL << (fugue_sqlParser::COLUMNS - 53))
            | (1ULL << (fugue_sqlParser::COMMENT - 53))
            | (1ULL << (fugue_sqlParser::COMMIT - 53))
            | (1ULL << (fugue_sqlParser::COMPACT - 53))
            | (1ULL << (fugue_sqlParser::COMPACTIONS - 53))
            | (1ULL << (fugue_sqlParser::COMPUTE - 53))
            | (1ULL << (fugue_sqlParser::CONCATENATE - 53))
            | (1ULL << (fugue_sqlParser::CONSTRAINT - 53))
            | (1ULL << (fugue_sqlParser::COST - 53))
            | (1ULL << (fugue_sqlParser::CREATE - 53))
            | (1ULL << (fugue_sqlParser::CROSS - 53))
            | (1ULL << (fugue_sqlParser::CUBE - 53))
            | (1ULL << (fugue_sqlParser::CURRENT - 53))
            | (1ULL << (fugue_sqlParser::CURRENT_DATE - 53))
            | (1ULL << (fugue_sqlParser::CURRENT_TIME - 53))
            | (1ULL << (fugue_sqlParser::CURRENT_TIMESTAMP - 53))
            | (1ULL << (fugue_sqlParser::CURRENT_USER - 53))
            | (1ULL << (fugue_sqlParser::DATA - 53))
            | (1ULL << (fugue_sqlParser::DATABASE - 53))
            | (1ULL << (fugue_sqlParser::DATABASES - 53))
            | (1ULL << (fugue_sqlParser::DAY - 53))
            | (1ULL << (fugue_sqlParser::DBPROPERTIES - 53))
            | (1ULL << (fugue_sqlParser::DEFINED - 53))
            | (1ULL << (fugue_sqlParser::DELETE - 53))
            | (1ULL << (fugue_sqlParser::DELIMITED - 53))
            | (1ULL << (fugue_sqlParser::DESC - 53))
            | (1ULL << (fugue_sqlParser::DESCRIBE - 53))
            | (1ULL << (fugue_sqlParser::DFS - 53))
            | (1ULL << (fugue_sqlParser::DIRECTORIES - 53))
            | (1ULL << (fugue_sqlParser::DIRECTORY - 53))
            | (1ULL << (fugue_sqlParser::DISTINCT - 53))
            | (1ULL << (fugue_sqlParser::DISTRIBUTE - 53)))) != 0) || ((((_la - 117) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 117)) & ((1ULL << (fugue_sqlParser::DROP - 117))
            | (1ULL << (fugue_sqlParser::ELSE - 117))
            | (1ULL << (fugue_sqlParser::END - 117))
            | (1ULL << (fugue_sqlParser::ESCAPE - 117))
            | (1ULL << (fugue_sqlParser::ESCAPED - 117))
            | (1ULL << (fugue_sqlParser::EXCEPT - 117))
            | (1ULL << (fugue_sqlParser::EXCHANGE - 117))
            | (1ULL << (fugue_sqlParser::EXISTS - 117))
            | (1ULL << (fugue_sqlParser::EXPLAIN - 117))
            | (1ULL << (fugue_sqlParser::EXPORT - 117))
            | (1ULL << (fugue_sqlParser::EXTENDED - 117))
            | (1ULL << (fugue_sqlParser::EXTERNAL - 117))
            | (1ULL << (fugue_sqlParser::EXTRACT - 117))
            | (1ULL << (fugue_sqlParser::FALSE - 117))
            | (1ULL << (fugue_sqlParser::FETCH - 117))
            | (1ULL << (fugue_sqlParser::FIELDS - 117))
            | (1ULL << (fugue_sqlParser::FILTER - 117))
            | (1ULL << (fugue_sqlParser::FILEFORMAT - 117))
            | (1ULL << (fugue_sqlParser::FIRST - 117))
            | (1ULL << (fugue_sqlParser::FOLLOWING - 117))
            | (1ULL << (fugue_sqlParser::FOR - 117))
            | (1ULL << (fugue_sqlParser::FOREIGN - 117))
            | (1ULL << (fugue_sqlParser::FORMAT - 117))
            | (1ULL << (fugue_sqlParser::FORMATTED - 117))
            | (1ULL << (fugue_sqlParser::FROM - 117))
            | (1ULL << (fugue_sqlParser::FULL - 117))
            | (1ULL << (fugue_sqlParser::FUNCTION - 117))
            | (1ULL << (fugue_sqlParser::FUNCTIONS - 117))
            | (1ULL << (fugue_sqlParser::GLOBAL - 117))
            | (1ULL << (fugue_sqlParser::GRANT - 117))
            | (1ULL << (fugue_sqlParser::GROUP - 117))
            | (1ULL << (fugue_sqlParser::GROUPING - 117))
            | (1ULL << (fugue_sqlParser::HAVING - 117))
            | (1ULL << (fugue_sqlParser::HOUR - 117))
            | (1ULL << (fugue_sqlParser::IF - 117))
            | (1ULL << (fugue_sqlParser::IGNORE - 117))
            | (1ULL << (fugue_sqlParser::IMPORT - 117))
            | (1ULL << (fugue_sqlParser::IN - 117))
            | (1ULL << (fugue_sqlParser::INDEX - 117))
            | (1ULL << (fugue_sqlParser::INDEXES - 117))
            | (1ULL << (fugue_sqlParser::INNER - 117))
            | (1ULL << (fugue_sqlParser::INPATH - 117))
            | (1ULL << (fugue_sqlParser::INPUTFORMAT - 117))
            | (1ULL << (fugue_sqlParser::INSERT - 117))
            | (1ULL << (fugue_sqlParser::INTERSECT - 117))
            | (1ULL << (fugue_sqlParser::INTERVAL - 117))
            | (1ULL << (fugue_sqlParser::INTO - 117))
            | (1ULL << (fugue_sqlParser::IS - 117))
            | (1ULL << (fugue_sqlParser::ITEMS - 117))
            | (1ULL << (fugue_sqlParser::JOIN - 117))
            | (1ULL << (fugue_sqlParser::KEYS - 117))
            | (1ULL << (fugue_sqlParser::LAST - 117))
            | (1ULL << (fugue_sqlParser::LATERAL - 117))
            | (1ULL << (fugue_sqlParser::LAZY - 117))
            | (1ULL << (fugue_sqlParser::LEADING - 117))
            | (1ULL << (fugue_sqlParser::LEFT - 117))
            | (1ULL << (fugue_sqlParser::LIKE - 117))
            | (1ULL << (fugue_sqlParser::LIMIT - 117))
            | (1ULL << (fugue_sqlParser::LINES - 117))
            | (1ULL << (fugue_sqlParser::LIST - 117))
            | (1ULL << (fugue_sqlParser::LOAD - 117))
            | (1ULL << (fugue_sqlParser::LOCAL - 117))
            | (1ULL << (fugue_sqlParser::LOCATION - 117))
            | (1ULL << (fugue_sqlParser::LOCK - 117)))) != 0) || ((((_la - 181) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 181)) & ((1ULL << (fugue_sqlParser::LOCKS - 181))
            | (1ULL << (fugue_sqlParser::LOGICAL - 181))
            | (1ULL << (fugue_sqlParser::MACRO - 181))
            | (1ULL << (fugue_sqlParser::MAP - 181))
            | (1ULL << (fugue_sqlParser::MATCHED - 181))
            | (1ULL << (fugue_sqlParser::MERGE - 181))
            | (1ULL << (fugue_sqlParser::MINUTE - 181))
            | (1ULL << (fugue_sqlParser::MONTH - 181))
            | (1ULL << (fugue_sqlParser::MSCK - 181))
            | (1ULL << (fugue_sqlParser::NAMESPACE - 181))
            | (1ULL << (fugue_sqlParser::NAMESPACES - 181))
            | (1ULL << (fugue_sqlParser::NATURAL - 181))
            | (1ULL << (fugue_sqlParser::NO - 181))
            | (1ULL << (fugue_sqlParser::NOT - 181))
            | (1ULL << (fugue_sqlParser::THENULL - 181))
            | (1ULL << (fugue_sqlParser::THENULLS - 181))
            | (1ULL << (fugue_sqlParser::OF - 181))
            | (1ULL << (fugue_sqlParser::ON - 181))
            | (1ULL << (fugue_sqlParser::ONLY - 181))
            | (1ULL << (fugue_sqlParser::OPTION - 181))
            | (1ULL << (fugue_sqlParser::OPTIONS - 181))
            | (1ULL << (fugue_sqlParser::OR - 181))
            | (1ULL << (fugue_sqlParser::ORDER - 181))
            | (1ULL << (fugue_sqlParser::OUT - 181))
            | (1ULL << (fugue_sqlParser::OUTER - 181))
            | (1ULL << (fugue_sqlParser::OUTPUTFORMAT - 181))
            | (1ULL << (fugue_sqlParser::OVER - 181))
            | (1ULL << (fugue_sqlParser::OVERLAPS - 181))
            | (1ULL << (fugue_sqlParser::OVERLAY - 181))
            | (1ULL << (fugue_sqlParser::OVERWRITE - 181))
            | (1ULL << (fugue_sqlParser::PARTITION - 181))
            | (1ULL << (fugue_sqlParser::PARTITIONED - 181))
            | (1ULL << (fugue_sqlParser::PARTITIONS - 181))
            | (1ULL << (fugue_sqlParser::PERCENTLIT - 181))
            | (1ULL << (fugue_sqlParser::PIVOT - 181))
            | (1ULL << (fugue_sqlParser::PLACING - 181))
            | (1ULL << (fugue_sqlParser::POSITION - 181))
            | (1ULL << (fugue_sqlParser::PRECEDING - 181))
            | (1ULL << (fugue_sqlParser::PRIMARY - 181))
            | (1ULL << (fugue_sqlParser::PRINCIPALS - 181))
            | (1ULL << (fugue_sqlParser::PROPERTIES - 181))
            | (1ULL << (fugue_sqlParser::PURGE - 181))
            | (1ULL << (fugue_sqlParser::QUERY - 181))
            | (1ULL << (fugue_sqlParser::RANGE - 181))
            | (1ULL << (fugue_sqlParser::RECORDREADER - 181))
            | (1ULL << (fugue_sqlParser::RECORDWRITER - 181))
            | (1ULL << (fugue_sqlParser::RECOVER - 181))
            | (1ULL << (fugue_sqlParser::REDUCE - 181))
            | (1ULL << (fugue_sqlParser::REFERENCES - 181))
            | (1ULL << (fugue_sqlParser::REFRESH - 181))
            | (1ULL << (fugue_sqlParser::RENAME - 181))
            | (1ULL << (fugue_sqlParser::REPAIR - 181))
            | (1ULL << (fugue_sqlParser::REPLACE - 181))
            | (1ULL << (fugue_sqlParser::RESET - 181))
            | (1ULL << (fugue_sqlParser::RESTRICT - 181))
            | (1ULL << (fugue_sqlParser::REVOKE - 181))
            | (1ULL << (fugue_sqlParser::RIGHT - 181))
            | (1ULL << (fugue_sqlParser::RLIKE - 181))
            | (1ULL << (fugue_sqlParser::ROLE - 181))
            | (1ULL << (fugue_sqlParser::ROLES - 181))
            | (1ULL << (fugue_sqlParser::ROLLBACK - 181))
            | (1ULL << (fugue_sqlParser::ROLLUP - 181))
            | (1ULL << (fugue_sqlParser::ROW - 181))
            | (1ULL << (fugue_sqlParser::ROWS - 181)))) != 0) || ((((_la - 245) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 245)) & ((1ULL << (fugue_sqlParser::SCHEMA - 245))
            | (1ULL << (fugue_sqlParser::SECOND - 245))
            | (1ULL << (fugue_sqlParser::SELECT - 245))
            | (1ULL << (fugue_sqlParser::SEMI - 245))
            | (1ULL << (fugue_sqlParser::SEPARATED - 245))
            | (1ULL << (fugue_sqlParser::SERDE - 245))
            | (1ULL << (fugue_sqlParser::SERDEPROPERTIES - 245))
            | (1ULL << (fugue_sqlParser::SESSION_USER - 245))
            | (1ULL << (fugue_sqlParser::SET - 245))
            | (1ULL << (fugue_sqlParser::SETMINUS - 245))
            | (1ULL << (fugue_sqlParser::SETS - 245))
            | (1ULL << (fugue_sqlParser::SHOW - 245))
            | (1ULL << (fugue_sqlParser::SKEWED - 245))
            | (1ULL << (fugue_sqlParser::SOME - 245))
            | (1ULL << (fugue_sqlParser::SORT - 245))
            | (1ULL << (fugue_sqlParser::SORTED - 245))
            | (1ULL << (fugue_sqlParser::START - 245))
            | (1ULL << (fugue_sqlParser::STATISTICS - 245))
            | (1ULL << (fugue_sqlParser::STORED - 245))
            | (1ULL << (fugue_sqlParser::STRATIFY - 245))
            | (1ULL << (fugue_sqlParser::STRUCT - 245))
            | (1ULL << (fugue_sqlParser::SUBSTR - 245))
            | (1ULL << (fugue_sqlParser::SUBSTRING - 245))
            | (1ULL << (fugue_sqlParser::TABLE - 245))
            | (1ULL << (fugue_sqlParser::TABLES - 245))
            | (1ULL << (fugue_sqlParser::TABLESAMPLE - 245))
            | (1ULL << (fugue_sqlParser::TBLPROPERTIES - 245))
            | (1ULL << (fugue_sqlParser::TEMPORARY - 245))
            | (1ULL << (fugue_sqlParser::TERMINATED - 245))
            | (1ULL << (fugue_sqlParser::THEN - 245))
            | (1ULL << (fugue_sqlParser::TO - 245))
            | (1ULL << (fugue_sqlParser::TOUCH - 245))
            | (1ULL << (fugue_sqlParser::TRAILING - 245))
            | (1ULL << (fugue_sqlParser::TRANSACTION - 245))
            | (1ULL << (fugue_sqlParser::TRANSACTIONS - 245))
            | (1ULL << (fugue_sqlParser::TRANSFORM - 245))
            | (1ULL << (fugue_sqlParser::TRIM - 245))
            | (1ULL << (fugue_sqlParser::TRUE - 245))
            | (1ULL << (fugue_sqlParser::TRUNCATE - 245))
            | (1ULL << (fugue_sqlParser::TYPE - 245))
            | (1ULL << (fugue_sqlParser::UNARCHIVE - 245))
            | (1ULL << (fugue_sqlParser::UNBOUNDED - 245))
            | (1ULL << (fugue_sqlParser::UNCACHE - 245))
            | (1ULL << (fugue_sqlParser::UNION - 245))
            | (1ULL << (fugue_sqlParser::UNIQUE - 245))
            | (1ULL << (fugue_sqlParser::UNKNOWN - 245))
            | (1ULL << (fugue_sqlParser::UNLOCK - 245))
            | (1ULL << (fugue_sqlParser::UNSET - 245))
            | (1ULL << (fugue_sqlParser::UPDATE - 245))
            | (1ULL << (fugue_sqlParser::USE - 245))
            | (1ULL << (fugue_sqlParser::USER - 245))
            | (1ULL << (fugue_sqlParser::USING - 245))
            | (1ULL << (fugue_sqlParser::VALUES - 245))
            | (1ULL << (fugue_sqlParser::VIEW - 245))
            | (1ULL << (fugue_sqlParser::VIEWS - 245))
            | (1ULL << (fugue_sqlParser::WHEN - 245))
            | (1ULL << (fugue_sqlParser::WHERE - 245))
            | (1ULL << (fugue_sqlParser::WINDOW - 245))
            | (1ULL << (fugue_sqlParser::WITH - 245))
            | (1ULL << (fugue_sqlParser::YEAR - 245)))) != 0) || ((((_la - 319) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 319)) & ((1ULL << (fugue_sqlParser::DIV - 319))
            | (1ULL << (fugue_sqlParser::IDENTIFIER - 319))
            | (1ULL << (fugue_sqlParser::BACKQUOTED_IDENTIFIER - 319)))) != 0)) {
            setState(3569);
            complexColTypeList();
          }
          setState(3572);
          match(fugue_sqlParser::GT);
          break;
        }

        case fugue_sqlParser::NEQ: {
          setState(3573);
          match(fugue_sqlParser::NEQ);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    case 4: {
      _localctx = _tracker.createInstance<fugue_sqlParser::PrimitiveDataTypeContext>(_localctx);
      enterOuterAlt(_localctx, 4);
      setState(3576);
      identifier();
      setState(3587);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 478, _ctx)) {
      case 1: {
        setState(3577);
        match(fugue_sqlParser::T__2);
        setState(3578);
        match(fugue_sqlParser::INTEGER_VALUE);
        setState(3583);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == fugue_sqlParser::T__0) {
          setState(3579);
          match(fugue_sqlParser::T__0);
          setState(3580);
          match(fugue_sqlParser::INTEGER_VALUE);
          setState(3585);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(3586);
        match(fugue_sqlParser::T__3);
        break;
      }

      default:
        break;
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- QualifiedColTypeWithPositionListContext ------------------------------------------------------------------

fugue_sqlParser::QualifiedColTypeWithPositionListContext::QualifiedColTypeWithPositionListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<fugue_sqlParser::QualifiedColTypeWithPositionContext *> fugue_sqlParser::QualifiedColTypeWithPositionListContext::qualifiedColTypeWithPosition() {
  return getRuleContexts<fugue_sqlParser::QualifiedColTypeWithPositionContext>();
}

fugue_sqlParser::QualifiedColTypeWithPositionContext* fugue_sqlParser::QualifiedColTypeWithPositionListContext::qualifiedColTypeWithPosition(size_t i) {
  return getRuleContext<fugue_sqlParser::QualifiedColTypeWithPositionContext>(i);
}


size_t fugue_sqlParser::QualifiedColTypeWithPositionListContext::getRuleIndex() const {
  return fugue_sqlParser::RuleQualifiedColTypeWithPositionList;
}


antlrcpp::Any fugue_sqlParser::QualifiedColTypeWithPositionListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitQualifiedColTypeWithPositionList(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::QualifiedColTypeWithPositionListContext* fugue_sqlParser::qualifiedColTypeWithPositionList() {
  QualifiedColTypeWithPositionListContext *_localctx = _tracker.createInstance<QualifiedColTypeWithPositionListContext>(_ctx, getState());
  enterRule(_localctx, 378, fugue_sqlParser::RuleQualifiedColTypeWithPositionList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3591);
    qualifiedColTypeWithPosition();
    setState(3596);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == fugue_sqlParser::T__0) {
      setState(3592);
      match(fugue_sqlParser::T__0);
      setState(3593);
      qualifiedColTypeWithPosition();
      setState(3598);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- QualifiedColTypeWithPositionContext ------------------------------------------------------------------

fugue_sqlParser::QualifiedColTypeWithPositionContext::QualifiedColTypeWithPositionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

fugue_sqlParser::DataTypeContext* fugue_sqlParser::QualifiedColTypeWithPositionContext::dataType() {
  return getRuleContext<fugue_sqlParser::DataTypeContext>(0);
}

fugue_sqlParser::MultipartIdentifierContext* fugue_sqlParser::QualifiedColTypeWithPositionContext::multipartIdentifier() {
  return getRuleContext<fugue_sqlParser::MultipartIdentifierContext>(0);
}

tree::TerminalNode* fugue_sqlParser::QualifiedColTypeWithPositionContext::NOT() {
  return getToken(fugue_sqlParser::NOT, 0);
}

tree::TerminalNode* fugue_sqlParser::QualifiedColTypeWithPositionContext::THENULL() {
  return getToken(fugue_sqlParser::THENULL, 0);
}

fugue_sqlParser::CommentSpecContext* fugue_sqlParser::QualifiedColTypeWithPositionContext::commentSpec() {
  return getRuleContext<fugue_sqlParser::CommentSpecContext>(0);
}

fugue_sqlParser::ColPositionContext* fugue_sqlParser::QualifiedColTypeWithPositionContext::colPosition() {
  return getRuleContext<fugue_sqlParser::ColPositionContext>(0);
}


size_t fugue_sqlParser::QualifiedColTypeWithPositionContext::getRuleIndex() const {
  return fugue_sqlParser::RuleQualifiedColTypeWithPosition;
}


antlrcpp::Any fugue_sqlParser::QualifiedColTypeWithPositionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitQualifiedColTypeWithPosition(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::QualifiedColTypeWithPositionContext* fugue_sqlParser::qualifiedColTypeWithPosition() {
  QualifiedColTypeWithPositionContext *_localctx = _tracker.createInstance<QualifiedColTypeWithPositionContext>(_ctx, getState());
  enterRule(_localctx, 380, fugue_sqlParser::RuleQualifiedColTypeWithPosition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3599);
    antlrcpp::downCast<QualifiedColTypeWithPositionContext *>(_localctx)->name = multipartIdentifier();
    setState(3600);
    dataType();
    setState(3603);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == fugue_sqlParser::NOT) {
      setState(3601);
      match(fugue_sqlParser::NOT);
      setState(3602);
      match(fugue_sqlParser::THENULL);
    }
    setState(3606);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == fugue_sqlParser::COMMENT) {
      setState(3605);
      commentSpec();
    }
    setState(3609);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == fugue_sqlParser::AFTER || _la == fugue_sqlParser::FIRST) {
      setState(3608);
      colPosition();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ColTypeListContext ------------------------------------------------------------------

fugue_sqlParser::ColTypeListContext::ColTypeListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<fugue_sqlParser::ColTypeContext *> fugue_sqlParser::ColTypeListContext::colType() {
  return getRuleContexts<fugue_sqlParser::ColTypeContext>();
}

fugue_sqlParser::ColTypeContext* fugue_sqlParser::ColTypeListContext::colType(size_t i) {
  return getRuleContext<fugue_sqlParser::ColTypeContext>(i);
}


size_t fugue_sqlParser::ColTypeListContext::getRuleIndex() const {
  return fugue_sqlParser::RuleColTypeList;
}


antlrcpp::Any fugue_sqlParser::ColTypeListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitColTypeList(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::ColTypeListContext* fugue_sqlParser::colTypeList() {
  ColTypeListContext *_localctx = _tracker.createInstance<ColTypeListContext>(_ctx, getState());
  enterRule(_localctx, 382, fugue_sqlParser::RuleColTypeList);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3611);
    colType();
    setState(3616);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 484, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(3612);
        match(fugue_sqlParser::T__0);
        setState(3613);
        colType(); 
      }
      setState(3618);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 484, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ColTypeContext ------------------------------------------------------------------

fugue_sqlParser::ColTypeContext::ColTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

fugue_sqlParser::DataTypeContext* fugue_sqlParser::ColTypeContext::dataType() {
  return getRuleContext<fugue_sqlParser::DataTypeContext>(0);
}

fugue_sqlParser::ErrorCapturingIdentifierContext* fugue_sqlParser::ColTypeContext::errorCapturingIdentifier() {
  return getRuleContext<fugue_sqlParser::ErrorCapturingIdentifierContext>(0);
}

tree::TerminalNode* fugue_sqlParser::ColTypeContext::NOT() {
  return getToken(fugue_sqlParser::NOT, 0);
}

tree::TerminalNode* fugue_sqlParser::ColTypeContext::THENULL() {
  return getToken(fugue_sqlParser::THENULL, 0);
}

fugue_sqlParser::CommentSpecContext* fugue_sqlParser::ColTypeContext::commentSpec() {
  return getRuleContext<fugue_sqlParser::CommentSpecContext>(0);
}


size_t fugue_sqlParser::ColTypeContext::getRuleIndex() const {
  return fugue_sqlParser::RuleColType;
}


antlrcpp::Any fugue_sqlParser::ColTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitColType(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::ColTypeContext* fugue_sqlParser::colType() {
  ColTypeContext *_localctx = _tracker.createInstance<ColTypeContext>(_ctx, getState());
  enterRule(_localctx, 384, fugue_sqlParser::RuleColType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3619);
    antlrcpp::downCast<ColTypeContext *>(_localctx)->colName = errorCapturingIdentifier();
    setState(3620);
    dataType();
    setState(3623);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 485, _ctx)) {
    case 1: {
      setState(3621);
      match(fugue_sqlParser::NOT);
      setState(3622);
      match(fugue_sqlParser::THENULL);
      break;
    }

    default:
      break;
    }
    setState(3626);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 486, _ctx)) {
    case 1: {
      setState(3625);
      commentSpec();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ComplexColTypeListContext ------------------------------------------------------------------

fugue_sqlParser::ComplexColTypeListContext::ComplexColTypeListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<fugue_sqlParser::ComplexColTypeContext *> fugue_sqlParser::ComplexColTypeListContext::complexColType() {
  return getRuleContexts<fugue_sqlParser::ComplexColTypeContext>();
}

fugue_sqlParser::ComplexColTypeContext* fugue_sqlParser::ComplexColTypeListContext::complexColType(size_t i) {
  return getRuleContext<fugue_sqlParser::ComplexColTypeContext>(i);
}


size_t fugue_sqlParser::ComplexColTypeListContext::getRuleIndex() const {
  return fugue_sqlParser::RuleComplexColTypeList;
}


antlrcpp::Any fugue_sqlParser::ComplexColTypeListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitComplexColTypeList(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::ComplexColTypeListContext* fugue_sqlParser::complexColTypeList() {
  ComplexColTypeListContext *_localctx = _tracker.createInstance<ComplexColTypeListContext>(_ctx, getState());
  enterRule(_localctx, 386, fugue_sqlParser::RuleComplexColTypeList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3628);
    complexColType();
    setState(3633);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == fugue_sqlParser::T__0) {
      setState(3629);
      match(fugue_sqlParser::T__0);
      setState(3630);
      complexColType();
      setState(3635);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ComplexColTypeContext ------------------------------------------------------------------

fugue_sqlParser::ComplexColTypeContext::ComplexColTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

fugue_sqlParser::IdentifierContext* fugue_sqlParser::ComplexColTypeContext::identifier() {
  return getRuleContext<fugue_sqlParser::IdentifierContext>(0);
}

fugue_sqlParser::DataTypeContext* fugue_sqlParser::ComplexColTypeContext::dataType() {
  return getRuleContext<fugue_sqlParser::DataTypeContext>(0);
}

tree::TerminalNode* fugue_sqlParser::ComplexColTypeContext::NOT() {
  return getToken(fugue_sqlParser::NOT, 0);
}

tree::TerminalNode* fugue_sqlParser::ComplexColTypeContext::THENULL() {
  return getToken(fugue_sqlParser::THENULL, 0);
}

fugue_sqlParser::CommentSpecContext* fugue_sqlParser::ComplexColTypeContext::commentSpec() {
  return getRuleContext<fugue_sqlParser::CommentSpecContext>(0);
}


size_t fugue_sqlParser::ComplexColTypeContext::getRuleIndex() const {
  return fugue_sqlParser::RuleComplexColType;
}


antlrcpp::Any fugue_sqlParser::ComplexColTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitComplexColType(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::ComplexColTypeContext* fugue_sqlParser::complexColType() {
  ComplexColTypeContext *_localctx = _tracker.createInstance<ComplexColTypeContext>(_ctx, getState());
  enterRule(_localctx, 388, fugue_sqlParser::RuleComplexColType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3636);
    identifier();
    setState(3637);
    match(fugue_sqlParser::T__1);
    setState(3638);
    dataType();
    setState(3641);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == fugue_sqlParser::NOT) {
      setState(3639);
      match(fugue_sqlParser::NOT);
      setState(3640);
      match(fugue_sqlParser::THENULL);
    }
    setState(3644);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == fugue_sqlParser::COMMENT) {
      setState(3643);
      commentSpec();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WhenClauseContext ------------------------------------------------------------------

fugue_sqlParser::WhenClauseContext::WhenClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* fugue_sqlParser::WhenClauseContext::WHEN() {
  return getToken(fugue_sqlParser::WHEN, 0);
}

tree::TerminalNode* fugue_sqlParser::WhenClauseContext::THEN() {
  return getToken(fugue_sqlParser::THEN, 0);
}

std::vector<fugue_sqlParser::ExpressionContext *> fugue_sqlParser::WhenClauseContext::expression() {
  return getRuleContexts<fugue_sqlParser::ExpressionContext>();
}

fugue_sqlParser::ExpressionContext* fugue_sqlParser::WhenClauseContext::expression(size_t i) {
  return getRuleContext<fugue_sqlParser::ExpressionContext>(i);
}


size_t fugue_sqlParser::WhenClauseContext::getRuleIndex() const {
  return fugue_sqlParser::RuleWhenClause;
}


antlrcpp::Any fugue_sqlParser::WhenClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitWhenClause(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::WhenClauseContext* fugue_sqlParser::whenClause() {
  WhenClauseContext *_localctx = _tracker.createInstance<WhenClauseContext>(_ctx, getState());
  enterRule(_localctx, 390, fugue_sqlParser::RuleWhenClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3646);
    match(fugue_sqlParser::WHEN);
    setState(3647);
    antlrcpp::downCast<WhenClauseContext *>(_localctx)->condition = expression();
    setState(3648);
    match(fugue_sqlParser::THEN);
    setState(3649);
    antlrcpp::downCast<WhenClauseContext *>(_localctx)->result = expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WindowClauseContext ------------------------------------------------------------------

fugue_sqlParser::WindowClauseContext::WindowClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* fugue_sqlParser::WindowClauseContext::WINDOW() {
  return getToken(fugue_sqlParser::WINDOW, 0);
}

std::vector<fugue_sqlParser::NamedWindowContext *> fugue_sqlParser::WindowClauseContext::namedWindow() {
  return getRuleContexts<fugue_sqlParser::NamedWindowContext>();
}

fugue_sqlParser::NamedWindowContext* fugue_sqlParser::WindowClauseContext::namedWindow(size_t i) {
  return getRuleContext<fugue_sqlParser::NamedWindowContext>(i);
}


size_t fugue_sqlParser::WindowClauseContext::getRuleIndex() const {
  return fugue_sqlParser::RuleWindowClause;
}


antlrcpp::Any fugue_sqlParser::WindowClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitWindowClause(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::WindowClauseContext* fugue_sqlParser::windowClause() {
  WindowClauseContext *_localctx = _tracker.createInstance<WindowClauseContext>(_ctx, getState());
  enterRule(_localctx, 392, fugue_sqlParser::RuleWindowClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3651);
    match(fugue_sqlParser::WINDOW);
    setState(3652);
    namedWindow();
    setState(3657);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 490, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(3653);
        match(fugue_sqlParser::T__0);
        setState(3654);
        namedWindow(); 
      }
      setState(3659);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 490, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NamedWindowContext ------------------------------------------------------------------

fugue_sqlParser::NamedWindowContext::NamedWindowContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* fugue_sqlParser::NamedWindowContext::AS() {
  return getToken(fugue_sqlParser::AS, 0);
}

fugue_sqlParser::WindowSpecContext* fugue_sqlParser::NamedWindowContext::windowSpec() {
  return getRuleContext<fugue_sqlParser::WindowSpecContext>(0);
}

fugue_sqlParser::ErrorCapturingIdentifierContext* fugue_sqlParser::NamedWindowContext::errorCapturingIdentifier() {
  return getRuleContext<fugue_sqlParser::ErrorCapturingIdentifierContext>(0);
}


size_t fugue_sqlParser::NamedWindowContext::getRuleIndex() const {
  return fugue_sqlParser::RuleNamedWindow;
}


antlrcpp::Any fugue_sqlParser::NamedWindowContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitNamedWindow(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::NamedWindowContext* fugue_sqlParser::namedWindow() {
  NamedWindowContext *_localctx = _tracker.createInstance<NamedWindowContext>(_ctx, getState());
  enterRule(_localctx, 394, fugue_sqlParser::RuleNamedWindow);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3660);
    antlrcpp::downCast<NamedWindowContext *>(_localctx)->name = errorCapturingIdentifier();
    setState(3661);
    match(fugue_sqlParser::AS);
    setState(3662);
    windowSpec();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WindowSpecContext ------------------------------------------------------------------

fugue_sqlParser::WindowSpecContext::WindowSpecContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t fugue_sqlParser::WindowSpecContext::getRuleIndex() const {
  return fugue_sqlParser::RuleWindowSpec;
}

void fugue_sqlParser::WindowSpecContext::copyFrom(WindowSpecContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- WindowRefContext ------------------------------------------------------------------

fugue_sqlParser::ErrorCapturingIdentifierContext* fugue_sqlParser::WindowRefContext::errorCapturingIdentifier() {
  return getRuleContext<fugue_sqlParser::ErrorCapturingIdentifierContext>(0);
}

fugue_sqlParser::WindowRefContext::WindowRefContext(WindowSpecContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::WindowRefContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitWindowRef(this);
  else
    return visitor->visitChildren(this);
}
//----------------- WindowDefContext ------------------------------------------------------------------

tree::TerminalNode* fugue_sqlParser::WindowDefContext::CLUSTER() {
  return getToken(fugue_sqlParser::CLUSTER, 0);
}

std::vector<tree::TerminalNode *> fugue_sqlParser::WindowDefContext::BY() {
  return getTokens(fugue_sqlParser::BY);
}

tree::TerminalNode* fugue_sqlParser::WindowDefContext::BY(size_t i) {
  return getToken(fugue_sqlParser::BY, i);
}

std::vector<fugue_sqlParser::ExpressionContext *> fugue_sqlParser::WindowDefContext::expression() {
  return getRuleContexts<fugue_sqlParser::ExpressionContext>();
}

fugue_sqlParser::ExpressionContext* fugue_sqlParser::WindowDefContext::expression(size_t i) {
  return getRuleContext<fugue_sqlParser::ExpressionContext>(i);
}

fugue_sqlParser::WindowFrameContext* fugue_sqlParser::WindowDefContext::windowFrame() {
  return getRuleContext<fugue_sqlParser::WindowFrameContext>(0);
}

std::vector<fugue_sqlParser::SortItemContext *> fugue_sqlParser::WindowDefContext::sortItem() {
  return getRuleContexts<fugue_sqlParser::SortItemContext>();
}

fugue_sqlParser::SortItemContext* fugue_sqlParser::WindowDefContext::sortItem(size_t i) {
  return getRuleContext<fugue_sqlParser::SortItemContext>(i);
}

tree::TerminalNode* fugue_sqlParser::WindowDefContext::PARTITION() {
  return getToken(fugue_sqlParser::PARTITION, 0);
}

tree::TerminalNode* fugue_sqlParser::WindowDefContext::DISTRIBUTE() {
  return getToken(fugue_sqlParser::DISTRIBUTE, 0);
}

tree::TerminalNode* fugue_sqlParser::WindowDefContext::ORDER() {
  return getToken(fugue_sqlParser::ORDER, 0);
}

tree::TerminalNode* fugue_sqlParser::WindowDefContext::SORT() {
  return getToken(fugue_sqlParser::SORT, 0);
}

fugue_sqlParser::WindowDefContext::WindowDefContext(WindowSpecContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::WindowDefContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitWindowDef(this);
  else
    return visitor->visitChildren(this);
}
fugue_sqlParser::WindowSpecContext* fugue_sqlParser::windowSpec() {
  WindowSpecContext *_localctx = _tracker.createInstance<WindowSpecContext>(_ctx, getState());
  enterRule(_localctx, 396, fugue_sqlParser::RuleWindowSpec);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3710);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 498, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<fugue_sqlParser::WindowRefContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(3664);
      antlrcpp::downCast<WindowRefContext *>(_localctx)->name = errorCapturingIdentifier();
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<fugue_sqlParser::WindowRefContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(3665);
      match(fugue_sqlParser::T__2);
      setState(3666);
      antlrcpp::downCast<WindowRefContext *>(_localctx)->name = errorCapturingIdentifier();
      setState(3667);
      match(fugue_sqlParser::T__3);
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<fugue_sqlParser::WindowDefContext>(_localctx);
      enterOuterAlt(_localctx, 3);
      setState(3669);
      match(fugue_sqlParser::T__2);
      setState(3704);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case fugue_sqlParser::CLUSTER: {
          setState(3670);
          match(fugue_sqlParser::CLUSTER);
          setState(3671);
          match(fugue_sqlParser::BY);
          setState(3672);
          antlrcpp::downCast<WindowDefContext *>(_localctx)->expressionContext = expression();
          antlrcpp::downCast<WindowDefContext *>(_localctx)->partition.push_back(antlrcpp::downCast<WindowDefContext *>(_localctx)->expressionContext);
          setState(3677);
          _errHandler->sync(this);
          _la = _input->LA(1);
          while (_la == fugue_sqlParser::T__0) {
            setState(3673);
            match(fugue_sqlParser::T__0);
            setState(3674);
            antlrcpp::downCast<WindowDefContext *>(_localctx)->expressionContext = expression();
            antlrcpp::downCast<WindowDefContext *>(_localctx)->partition.push_back(antlrcpp::downCast<WindowDefContext *>(_localctx)->expressionContext);
            setState(3679);
            _errHandler->sync(this);
            _la = _input->LA(1);
          }
          break;
        }

        case fugue_sqlParser::T__3:
        case fugue_sqlParser::DISTRIBUTE:
        case fugue_sqlParser::ORDER:
        case fugue_sqlParser::PARTITION:
        case fugue_sqlParser::RANGE:
        case fugue_sqlParser::ROWS:
        case fugue_sqlParser::SORT: {
          setState(3690);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == fugue_sqlParser::DISTRIBUTE || _la == fugue_sqlParser::PARTITION) {
            setState(3680);
            _la = _input->LA(1);
            if (!(_la == fugue_sqlParser::DISTRIBUTE || _la == fugue_sqlParser::PARTITION)) {
            _errHandler->recoverInline(this);
            }
            else {
              _errHandler->reportMatch(this);
              consume();
            }
            setState(3681);
            match(fugue_sqlParser::BY);
            setState(3682);
            antlrcpp::downCast<WindowDefContext *>(_localctx)->expressionContext = expression();
            antlrcpp::downCast<WindowDefContext *>(_localctx)->partition.push_back(antlrcpp::downCast<WindowDefContext *>(_localctx)->expressionContext);
            setState(3687);
            _errHandler->sync(this);
            _la = _input->LA(1);
            while (_la == fugue_sqlParser::T__0) {
              setState(3683);
              match(fugue_sqlParser::T__0);
              setState(3684);
              antlrcpp::downCast<WindowDefContext *>(_localctx)->expressionContext = expression();
              antlrcpp::downCast<WindowDefContext *>(_localctx)->partition.push_back(antlrcpp::downCast<WindowDefContext *>(_localctx)->expressionContext);
              setState(3689);
              _errHandler->sync(this);
              _la = _input->LA(1);
            }
          }
          setState(3702);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == fugue_sqlParser::ORDER

          || _la == fugue_sqlParser::SORT) {
            setState(3692);
            _la = _input->LA(1);
            if (!(_la == fugue_sqlParser::ORDER

            || _la == fugue_sqlParser::SORT)) {
            _errHandler->recoverInline(this);
            }
            else {
              _errHandler->reportMatch(this);
              consume();
            }
            setState(3693);
            match(fugue_sqlParser::BY);
            setState(3694);
            sortItem();
            setState(3699);
            _errHandler->sync(this);
            _la = _input->LA(1);
            while (_la == fugue_sqlParser::T__0) {
              setState(3695);
              match(fugue_sqlParser::T__0);
              setState(3696);
              sortItem();
              setState(3701);
              _errHandler->sync(this);
              _la = _input->LA(1);
            }
          }
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(3707);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::RANGE

      || _la == fugue_sqlParser::ROWS) {
        setState(3706);
        windowFrame();
      }
      setState(3709);
      match(fugue_sqlParser::T__3);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WindowFrameContext ------------------------------------------------------------------

fugue_sqlParser::WindowFrameContext::WindowFrameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* fugue_sqlParser::WindowFrameContext::RANGE() {
  return getToken(fugue_sqlParser::RANGE, 0);
}

std::vector<fugue_sqlParser::FrameBoundContext *> fugue_sqlParser::WindowFrameContext::frameBound() {
  return getRuleContexts<fugue_sqlParser::FrameBoundContext>();
}

fugue_sqlParser::FrameBoundContext* fugue_sqlParser::WindowFrameContext::frameBound(size_t i) {
  return getRuleContext<fugue_sqlParser::FrameBoundContext>(i);
}

tree::TerminalNode* fugue_sqlParser::WindowFrameContext::ROWS() {
  return getToken(fugue_sqlParser::ROWS, 0);
}

tree::TerminalNode* fugue_sqlParser::WindowFrameContext::BETWEEN() {
  return getToken(fugue_sqlParser::BETWEEN, 0);
}

tree::TerminalNode* fugue_sqlParser::WindowFrameContext::AND() {
  return getToken(fugue_sqlParser::AND, 0);
}


size_t fugue_sqlParser::WindowFrameContext::getRuleIndex() const {
  return fugue_sqlParser::RuleWindowFrame;
}


antlrcpp::Any fugue_sqlParser::WindowFrameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitWindowFrame(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::WindowFrameContext* fugue_sqlParser::windowFrame() {
  WindowFrameContext *_localctx = _tracker.createInstance<WindowFrameContext>(_ctx, getState());
  enterRule(_localctx, 398, fugue_sqlParser::RuleWindowFrame);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3728);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 499, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3712);
      antlrcpp::downCast<WindowFrameContext *>(_localctx)->frameType = match(fugue_sqlParser::RANGE);
      setState(3713);
      antlrcpp::downCast<WindowFrameContext *>(_localctx)->start = frameBound();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3714);
      antlrcpp::downCast<WindowFrameContext *>(_localctx)->frameType = match(fugue_sqlParser::ROWS);
      setState(3715);
      antlrcpp::downCast<WindowFrameContext *>(_localctx)->start = frameBound();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(3716);
      antlrcpp::downCast<WindowFrameContext *>(_localctx)->frameType = match(fugue_sqlParser::RANGE);
      setState(3717);
      match(fugue_sqlParser::BETWEEN);
      setState(3718);
      antlrcpp::downCast<WindowFrameContext *>(_localctx)->start = frameBound();
      setState(3719);
      match(fugue_sqlParser::AND);
      setState(3720);
      antlrcpp::downCast<WindowFrameContext *>(_localctx)->end = frameBound();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(3722);
      antlrcpp::downCast<WindowFrameContext *>(_localctx)->frameType = match(fugue_sqlParser::ROWS);
      setState(3723);
      match(fugue_sqlParser::BETWEEN);
      setState(3724);
      antlrcpp::downCast<WindowFrameContext *>(_localctx)->start = frameBound();
      setState(3725);
      match(fugue_sqlParser::AND);
      setState(3726);
      antlrcpp::downCast<WindowFrameContext *>(_localctx)->end = frameBound();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FrameBoundContext ------------------------------------------------------------------

fugue_sqlParser::FrameBoundContext::FrameBoundContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* fugue_sqlParser::FrameBoundContext::UNBOUNDED() {
  return getToken(fugue_sqlParser::UNBOUNDED, 0);
}

tree::TerminalNode* fugue_sqlParser::FrameBoundContext::PRECEDING() {
  return getToken(fugue_sqlParser::PRECEDING, 0);
}

tree::TerminalNode* fugue_sqlParser::FrameBoundContext::FOLLOWING() {
  return getToken(fugue_sqlParser::FOLLOWING, 0);
}

tree::TerminalNode* fugue_sqlParser::FrameBoundContext::ROW() {
  return getToken(fugue_sqlParser::ROW, 0);
}

tree::TerminalNode* fugue_sqlParser::FrameBoundContext::CURRENT() {
  return getToken(fugue_sqlParser::CURRENT, 0);
}

fugue_sqlParser::ExpressionContext* fugue_sqlParser::FrameBoundContext::expression() {
  return getRuleContext<fugue_sqlParser::ExpressionContext>(0);
}


size_t fugue_sqlParser::FrameBoundContext::getRuleIndex() const {
  return fugue_sqlParser::RuleFrameBound;
}


antlrcpp::Any fugue_sqlParser::FrameBoundContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitFrameBound(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::FrameBoundContext* fugue_sqlParser::frameBound() {
  FrameBoundContext *_localctx = _tracker.createInstance<FrameBoundContext>(_ctx, getState());
  enterRule(_localctx, 400, fugue_sqlParser::RuleFrameBound);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3737);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 500, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3730);
      match(fugue_sqlParser::UNBOUNDED);
      setState(3731);
      antlrcpp::downCast<FrameBoundContext *>(_localctx)->boundType = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == fugue_sqlParser::FOLLOWING || _la == fugue_sqlParser::PRECEDING)) {
        antlrcpp::downCast<FrameBoundContext *>(_localctx)->boundType = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3732);
      antlrcpp::downCast<FrameBoundContext *>(_localctx)->boundType = match(fugue_sqlParser::CURRENT);
      setState(3733);
      match(fugue_sqlParser::ROW);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(3734);
      expression();
      setState(3735);
      antlrcpp::downCast<FrameBoundContext *>(_localctx)->boundType = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == fugue_sqlParser::FOLLOWING || _la == fugue_sqlParser::PRECEDING)) {
        antlrcpp::downCast<FrameBoundContext *>(_localctx)->boundType = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- QualifiedNameListContext ------------------------------------------------------------------

fugue_sqlParser::QualifiedNameListContext::QualifiedNameListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<fugue_sqlParser::QualifiedNameContext *> fugue_sqlParser::QualifiedNameListContext::qualifiedName() {
  return getRuleContexts<fugue_sqlParser::QualifiedNameContext>();
}

fugue_sqlParser::QualifiedNameContext* fugue_sqlParser::QualifiedNameListContext::qualifiedName(size_t i) {
  return getRuleContext<fugue_sqlParser::QualifiedNameContext>(i);
}


size_t fugue_sqlParser::QualifiedNameListContext::getRuleIndex() const {
  return fugue_sqlParser::RuleQualifiedNameList;
}


antlrcpp::Any fugue_sqlParser::QualifiedNameListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitQualifiedNameList(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::QualifiedNameListContext* fugue_sqlParser::qualifiedNameList() {
  QualifiedNameListContext *_localctx = _tracker.createInstance<QualifiedNameListContext>(_ctx, getState());
  enterRule(_localctx, 402, fugue_sqlParser::RuleQualifiedNameList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3739);
    qualifiedName();
    setState(3744);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == fugue_sqlParser::T__0) {
      setState(3740);
      match(fugue_sqlParser::T__0);
      setState(3741);
      qualifiedName();
      setState(3746);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FunctionNameContext ------------------------------------------------------------------

fugue_sqlParser::FunctionNameContext::FunctionNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

fugue_sqlParser::QualifiedNameContext* fugue_sqlParser::FunctionNameContext::qualifiedName() {
  return getRuleContext<fugue_sqlParser::QualifiedNameContext>(0);
}

tree::TerminalNode* fugue_sqlParser::FunctionNameContext::FILTER() {
  return getToken(fugue_sqlParser::FILTER, 0);
}

tree::TerminalNode* fugue_sqlParser::FunctionNameContext::LEFT() {
  return getToken(fugue_sqlParser::LEFT, 0);
}

tree::TerminalNode* fugue_sqlParser::FunctionNameContext::RIGHT() {
  return getToken(fugue_sqlParser::RIGHT, 0);
}


size_t fugue_sqlParser::FunctionNameContext::getRuleIndex() const {
  return fugue_sqlParser::RuleFunctionName;
}


antlrcpp::Any fugue_sqlParser::FunctionNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitFunctionName(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::FunctionNameContext* fugue_sqlParser::functionName() {
  FunctionNameContext *_localctx = _tracker.createInstance<FunctionNameContext>(_ctx, getState());
  enterRule(_localctx, 404, fugue_sqlParser::RuleFunctionName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3751);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 502, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(3747);
      qualifiedName();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(3748);
      match(fugue_sqlParser::FILTER);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(3749);
      match(fugue_sqlParser::LEFT);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(3750);
      match(fugue_sqlParser::RIGHT);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- QualifiedNameContext ------------------------------------------------------------------

fugue_sqlParser::QualifiedNameContext::QualifiedNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<fugue_sqlParser::IdentifierContext *> fugue_sqlParser::QualifiedNameContext::identifier() {
  return getRuleContexts<fugue_sqlParser::IdentifierContext>();
}

fugue_sqlParser::IdentifierContext* fugue_sqlParser::QualifiedNameContext::identifier(size_t i) {
  return getRuleContext<fugue_sqlParser::IdentifierContext>(i);
}


size_t fugue_sqlParser::QualifiedNameContext::getRuleIndex() const {
  return fugue_sqlParser::RuleQualifiedName;
}


antlrcpp::Any fugue_sqlParser::QualifiedNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitQualifiedName(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::QualifiedNameContext* fugue_sqlParser::qualifiedName() {
  QualifiedNameContext *_localctx = _tracker.createInstance<QualifiedNameContext>(_ctx, getState());
  enterRule(_localctx, 406, fugue_sqlParser::RuleQualifiedName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(3753);
    identifier();
    setState(3758);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 503, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(3754);
        match(fugue_sqlParser::T__6);
        setState(3755);
        identifier(); 
      }
      setState(3760);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 503, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ErrorCapturingIdentifierContext ------------------------------------------------------------------

fugue_sqlParser::ErrorCapturingIdentifierContext::ErrorCapturingIdentifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

fugue_sqlParser::IdentifierContext* fugue_sqlParser::ErrorCapturingIdentifierContext::identifier() {
  return getRuleContext<fugue_sqlParser::IdentifierContext>(0);
}


size_t fugue_sqlParser::ErrorCapturingIdentifierContext::getRuleIndex() const {
  return fugue_sqlParser::RuleErrorCapturingIdentifier;
}


antlrcpp::Any fugue_sqlParser::ErrorCapturingIdentifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitErrorCapturingIdentifier(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::ErrorCapturingIdentifierContext* fugue_sqlParser::errorCapturingIdentifier() {
  ErrorCapturingIdentifierContext *_localctx = _tracker.createInstance<ErrorCapturingIdentifierContext>(_ctx, getState());
  enterRule(_localctx, 408, fugue_sqlParser::RuleErrorCapturingIdentifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3761);
    identifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ErrorCapturingIdentifierExtraContext ------------------------------------------------------------------

fugue_sqlParser::ErrorCapturingIdentifierExtraContext::ErrorCapturingIdentifierExtraContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t fugue_sqlParser::ErrorCapturingIdentifierExtraContext::getRuleIndex() const {
  return fugue_sqlParser::RuleErrorCapturingIdentifierExtra;
}

void fugue_sqlParser::ErrorCapturingIdentifierExtraContext::copyFrom(ErrorCapturingIdentifierExtraContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- ErrorIdentContext ------------------------------------------------------------------

std::vector<tree::TerminalNode *> fugue_sqlParser::ErrorIdentContext::MINUS() {
  return getTokens(fugue_sqlParser::MINUS);
}

tree::TerminalNode* fugue_sqlParser::ErrorIdentContext::MINUS(size_t i) {
  return getToken(fugue_sqlParser::MINUS, i);
}

std::vector<fugue_sqlParser::IdentifierContext *> fugue_sqlParser::ErrorIdentContext::identifier() {
  return getRuleContexts<fugue_sqlParser::IdentifierContext>();
}

fugue_sqlParser::IdentifierContext* fugue_sqlParser::ErrorIdentContext::identifier(size_t i) {
  return getRuleContext<fugue_sqlParser::IdentifierContext>(i);
}

fugue_sqlParser::ErrorIdentContext::ErrorIdentContext(ErrorCapturingIdentifierExtraContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::ErrorIdentContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitErrorIdent(this);
  else
    return visitor->visitChildren(this);
}
fugue_sqlParser::ErrorCapturingIdentifierExtraContext* fugue_sqlParser::errorCapturingIdentifierExtra() {
  ErrorCapturingIdentifierExtraContext *_localctx = _tracker.createInstance<ErrorCapturingIdentifierExtraContext>(_ctx, getState());
  enterRule(_localctx, 410, fugue_sqlParser::RuleErrorCapturingIdentifierExtra);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    _localctx = _tracker.createInstance<fugue_sqlParser::ErrorIdentContext>(_localctx);
    enterOuterAlt(_localctx, 1);
    setState(3765); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(3763);
      match(fugue_sqlParser::MINUS);
      setState(3764);
      identifier();
      setState(3767); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == fugue_sqlParser::MINUS);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IdentifierContext ------------------------------------------------------------------

fugue_sqlParser::IdentifierContext::IdentifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

fugue_sqlParser::StrictIdentifierContext* fugue_sqlParser::IdentifierContext::strictIdentifier() {
  return getRuleContext<fugue_sqlParser::StrictIdentifierContext>(0);
}

fugue_sqlParser::StrictNonReservedContext* fugue_sqlParser::IdentifierContext::strictNonReserved() {
  return getRuleContext<fugue_sqlParser::StrictNonReservedContext>(0);
}


size_t fugue_sqlParser::IdentifierContext::getRuleIndex() const {
  return fugue_sqlParser::RuleIdentifier;
}


antlrcpp::Any fugue_sqlParser::IdentifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitIdentifier(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::IdentifierContext* fugue_sqlParser::identifier() {
  IdentifierContext *_localctx = _tracker.createInstance<IdentifierContext>(_ctx, getState());
  enterRule(_localctx, 412, fugue_sqlParser::RuleIdentifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3771);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case fugue_sqlParser::ADD:
      case fugue_sqlParser::AFTER:
      case fugue_sqlParser::ALL:
      case fugue_sqlParser::ALTER:
      case fugue_sqlParser::ANALYZE:
      case fugue_sqlParser::AND:
      case fugue_sqlParser::ANY:
      case fugue_sqlParser::ARCHIVE:
      case fugue_sqlParser::ARRAY:
      case fugue_sqlParser::AS:
      case fugue_sqlParser::ASC:
      case fugue_sqlParser::AT:
      case fugue_sqlParser::AUTHORIZATION:
      case fugue_sqlParser::BETWEEN:
      case fugue_sqlParser::BOTH:
      case fugue_sqlParser::BUCKET:
      case fugue_sqlParser::BUCKETS:
      case fugue_sqlParser::BY:
      case fugue_sqlParser::CACHE:
      case fugue_sqlParser::CASCADE:
      case fugue_sqlParser::CASE:
      case fugue_sqlParser::CAST:
      case fugue_sqlParser::CHANGE:
      case fugue_sqlParser::CHECK:
      case fugue_sqlParser::CLEAR:
      case fugue_sqlParser::CLUSTER:
      case fugue_sqlParser::CLUSTERED:
      case fugue_sqlParser::CODEGEN:
      case fugue_sqlParser::COLLATE:
      case fugue_sqlParser::COLLECTION:
      case fugue_sqlParser::COLUMN:
      case fugue_sqlParser::COLUMNS:
      case fugue_sqlParser::COMMENT:
      case fugue_sqlParser::COMMIT:
      case fugue_sqlParser::COMPACT:
      case fugue_sqlParser::COMPACTIONS:
      case fugue_sqlParser::COMPUTE:
      case fugue_sqlParser::CONCATENATE:
      case fugue_sqlParser::CONSTRAINT:
      case fugue_sqlParser::COST:
      case fugue_sqlParser::CREATE:
      case fugue_sqlParser::CUBE:
      case fugue_sqlParser::CURRENT:
      case fugue_sqlParser::CURRENT_DATE:
      case fugue_sqlParser::CURRENT_TIME:
      case fugue_sqlParser::CURRENT_TIMESTAMP:
      case fugue_sqlParser::CURRENT_USER:
      case fugue_sqlParser::DATA:
      case fugue_sqlParser::DATABASE:
      case fugue_sqlParser::DATABASES:
      case fugue_sqlParser::DAY:
      case fugue_sqlParser::DBPROPERTIES:
      case fugue_sqlParser::DEFINED:
      case fugue_sqlParser::DELETE:
      case fugue_sqlParser::DELIMITED:
      case fugue_sqlParser::DESC:
      case fugue_sqlParser::DESCRIBE:
      case fugue_sqlParser::DFS:
      case fugue_sqlParser::DIRECTORIES:
      case fugue_sqlParser::DIRECTORY:
      case fugue_sqlParser::DISTINCT:
      case fugue_sqlParser::DISTRIBUTE:
      case fugue_sqlParser::DROP:
      case fugue_sqlParser::ELSE:
      case fugue_sqlParser::END:
      case fugue_sqlParser::ESCAPE:
      case fugue_sqlParser::ESCAPED:
      case fugue_sqlParser::EXCHANGE:
      case fugue_sqlParser::EXISTS:
      case fugue_sqlParser::EXPLAIN:
      case fugue_sqlParser::EXPORT:
      case fugue_sqlParser::EXTENDED:
      case fugue_sqlParser::EXTERNAL:
      case fugue_sqlParser::EXTRACT:
      case fugue_sqlParser::FALSE:
      case fugue_sqlParser::FETCH:
      case fugue_sqlParser::FIELDS:
      case fugue_sqlParser::FILTER:
      case fugue_sqlParser::FILEFORMAT:
      case fugue_sqlParser::FIRST:
      case fugue_sqlParser::FOLLOWING:
      case fugue_sqlParser::FOR:
      case fugue_sqlParser::FOREIGN:
      case fugue_sqlParser::FORMAT:
      case fugue_sqlParser::FORMATTED:
      case fugue_sqlParser::FROM:
      case fugue_sqlParser::FUNCTION:
      case fugue_sqlParser::FUNCTIONS:
      case fugue_sqlParser::GLOBAL:
      case fugue_sqlParser::GRANT:
      case fugue_sqlParser::GROUP:
      case fugue_sqlParser::GROUPING:
      case fugue_sqlParser::HAVING:
      case fugue_sqlParser::HOUR:
      case fugue_sqlParser::IF:
      case fugue_sqlParser::IGNORE:
      case fugue_sqlParser::IMPORT:
      case fugue_sqlParser::IN:
      case fugue_sqlParser::INDEX:
      case fugue_sqlParser::INDEXES:
      case fugue_sqlParser::INPATH:
      case fugue_sqlParser::INPUTFORMAT:
      case fugue_sqlParser::INSERT:
      case fugue_sqlParser::INTERVAL:
      case fugue_sqlParser::INTO:
      case fugue_sqlParser::IS:
      case fugue_sqlParser::ITEMS:
      case fugue_sqlParser::KEYS:
      case fugue_sqlParser::LAST:
      case fugue_sqlParser::LATERAL:
      case fugue_sqlParser::LAZY:
      case fugue_sqlParser::LEADING:
      case fugue_sqlParser::LIKE:
      case fugue_sqlParser::LIMIT:
      case fugue_sqlParser::LINES:
      case fugue_sqlParser::LIST:
      case fugue_sqlParser::LOAD:
      case fugue_sqlParser::LOCAL:
      case fugue_sqlParser::LOCATION:
      case fugue_sqlParser::LOCK:
      case fugue_sqlParser::LOCKS:
      case fugue_sqlParser::LOGICAL:
      case fugue_sqlParser::MACRO:
      case fugue_sqlParser::MAP:
      case fugue_sqlParser::MATCHED:
      case fugue_sqlParser::MERGE:
      case fugue_sqlParser::MINUTE:
      case fugue_sqlParser::MONTH:
      case fugue_sqlParser::MSCK:
      case fugue_sqlParser::NAMESPACE:
      case fugue_sqlParser::NAMESPACES:
      case fugue_sqlParser::NO:
      case fugue_sqlParser::NOT:
      case fugue_sqlParser::THENULL:
      case fugue_sqlParser::THENULLS:
      case fugue_sqlParser::OF:
      case fugue_sqlParser::ONLY:
      case fugue_sqlParser::OPTION:
      case fugue_sqlParser::OPTIONS:
      case fugue_sqlParser::OR:
      case fugue_sqlParser::ORDER:
      case fugue_sqlParser::OUT:
      case fugue_sqlParser::OUTER:
      case fugue_sqlParser::OUTPUTFORMAT:
      case fugue_sqlParser::OVER:
      case fugue_sqlParser::OVERLAPS:
      case fugue_sqlParser::OVERLAY:
      case fugue_sqlParser::OVERWRITE:
      case fugue_sqlParser::PARTITION:
      case fugue_sqlParser::PARTITIONED:
      case fugue_sqlParser::PARTITIONS:
      case fugue_sqlParser::PERCENTLIT:
      case fugue_sqlParser::PIVOT:
      case fugue_sqlParser::PLACING:
      case fugue_sqlParser::POSITION:
      case fugue_sqlParser::PRECEDING:
      case fugue_sqlParser::PRIMARY:
      case fugue_sqlParser::PRINCIPALS:
      case fugue_sqlParser::PROPERTIES:
      case fugue_sqlParser::PURGE:
      case fugue_sqlParser::QUERY:
      case fugue_sqlParser::RANGE:
      case fugue_sqlParser::RECORDREADER:
      case fugue_sqlParser::RECORDWRITER:
      case fugue_sqlParser::RECOVER:
      case fugue_sqlParser::REDUCE:
      case fugue_sqlParser::REFERENCES:
      case fugue_sqlParser::REFRESH:
      case fugue_sqlParser::RENAME:
      case fugue_sqlParser::REPAIR:
      case fugue_sqlParser::REPLACE:
      case fugue_sqlParser::RESET:
      case fugue_sqlParser::RESTRICT:
      case fugue_sqlParser::REVOKE:
      case fugue_sqlParser::RLIKE:
      case fugue_sqlParser::ROLE:
      case fugue_sqlParser::ROLES:
      case fugue_sqlParser::ROLLBACK:
      case fugue_sqlParser::ROLLUP:
      case fugue_sqlParser::ROW:
      case fugue_sqlParser::ROWS:
      case fugue_sqlParser::SCHEMA:
      case fugue_sqlParser::SECOND:
      case fugue_sqlParser::SELECT:
      case fugue_sqlParser::SEPARATED:
      case fugue_sqlParser::SERDE:
      case fugue_sqlParser::SERDEPROPERTIES:
      case fugue_sqlParser::SESSION_USER:
      case fugue_sqlParser::SET:
      case fugue_sqlParser::SETS:
      case fugue_sqlParser::SHOW:
      case fugue_sqlParser::SKEWED:
      case fugue_sqlParser::SOME:
      case fugue_sqlParser::SORT:
      case fugue_sqlParser::SORTED:
      case fugue_sqlParser::START:
      case fugue_sqlParser::STATISTICS:
      case fugue_sqlParser::STORED:
      case fugue_sqlParser::STRATIFY:
      case fugue_sqlParser::STRUCT:
      case fugue_sqlParser::SUBSTR:
      case fugue_sqlParser::SUBSTRING:
      case fugue_sqlParser::TABLE:
      case fugue_sqlParser::TABLES:
      case fugue_sqlParser::TABLESAMPLE:
      case fugue_sqlParser::TBLPROPERTIES:
      case fugue_sqlParser::TEMPORARY:
      case fugue_sqlParser::TERMINATED:
      case fugue_sqlParser::THEN:
      case fugue_sqlParser::TO:
      case fugue_sqlParser::TOUCH:
      case fugue_sqlParser::TRAILING:
      case fugue_sqlParser::TRANSACTION:
      case fugue_sqlParser::TRANSACTIONS:
      case fugue_sqlParser::TRANSFORM:
      case fugue_sqlParser::TRIM:
      case fugue_sqlParser::TRUE:
      case fugue_sqlParser::TRUNCATE:
      case fugue_sqlParser::TYPE:
      case fugue_sqlParser::UNARCHIVE:
      case fugue_sqlParser::UNBOUNDED:
      case fugue_sqlParser::UNCACHE:
      case fugue_sqlParser::UNIQUE:
      case fugue_sqlParser::UNKNOWN:
      case fugue_sqlParser::UNLOCK:
      case fugue_sqlParser::UNSET:
      case fugue_sqlParser::UPDATE:
      case fugue_sqlParser::USE:
      case fugue_sqlParser::USER:
      case fugue_sqlParser::VALUES:
      case fugue_sqlParser::VIEW:
      case fugue_sqlParser::VIEWS:
      case fugue_sqlParser::WHEN:
      case fugue_sqlParser::WHERE:
      case fugue_sqlParser::WINDOW:
      case fugue_sqlParser::WITH:
      case fugue_sqlParser::YEAR:
      case fugue_sqlParser::DIV:
      case fugue_sqlParser::IDENTIFIER:
      case fugue_sqlParser::BACKQUOTED_IDENTIFIER: {
        enterOuterAlt(_localctx, 1);
        setState(3769);
        strictIdentifier();
        break;
      }

      case fugue_sqlParser::ANTI:
      case fugue_sqlParser::CROSS:
      case fugue_sqlParser::EXCEPT:
      case fugue_sqlParser::FULL:
      case fugue_sqlParser::INNER:
      case fugue_sqlParser::INTERSECT:
      case fugue_sqlParser::JOIN:
      case fugue_sqlParser::LEFT:
      case fugue_sqlParser::NATURAL:
      case fugue_sqlParser::ON:
      case fugue_sqlParser::RIGHT:
      case fugue_sqlParser::SEMI:
      case fugue_sqlParser::SETMINUS:
      case fugue_sqlParser::UNION:
      case fugue_sqlParser::USING: {
        enterOuterAlt(_localctx, 2);
        setState(3770);
        strictNonReserved();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StrictIdentifierContext ------------------------------------------------------------------

fugue_sqlParser::StrictIdentifierContext::StrictIdentifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t fugue_sqlParser::StrictIdentifierContext::getRuleIndex() const {
  return fugue_sqlParser::RuleStrictIdentifier;
}

void fugue_sqlParser::StrictIdentifierContext::copyFrom(StrictIdentifierContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- QuotedIdentifierAlternativeContext ------------------------------------------------------------------

fugue_sqlParser::QuotedIdentifierContext* fugue_sqlParser::QuotedIdentifierAlternativeContext::quotedIdentifier() {
  return getRuleContext<fugue_sqlParser::QuotedIdentifierContext>(0);
}

fugue_sqlParser::QuotedIdentifierAlternativeContext::QuotedIdentifierAlternativeContext(StrictIdentifierContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::QuotedIdentifierAlternativeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitQuotedIdentifierAlternative(this);
  else
    return visitor->visitChildren(this);
}
//----------------- UnquotedIdentifierContext ------------------------------------------------------------------

tree::TerminalNode* fugue_sqlParser::UnquotedIdentifierContext::IDENTIFIER() {
  return getToken(fugue_sqlParser::IDENTIFIER, 0);
}

fugue_sqlParser::NonReservedContext* fugue_sqlParser::UnquotedIdentifierContext::nonReserved() {
  return getRuleContext<fugue_sqlParser::NonReservedContext>(0);
}

fugue_sqlParser::UnquotedIdentifierContext::UnquotedIdentifierContext(StrictIdentifierContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::UnquotedIdentifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitUnquotedIdentifier(this);
  else
    return visitor->visitChildren(this);
}
fugue_sqlParser::StrictIdentifierContext* fugue_sqlParser::strictIdentifier() {
  StrictIdentifierContext *_localctx = _tracker.createInstance<StrictIdentifierContext>(_ctx, getState());
  enterRule(_localctx, 414, fugue_sqlParser::RuleStrictIdentifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3776);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case fugue_sqlParser::IDENTIFIER: {
        _localctx = _tracker.createInstance<fugue_sqlParser::UnquotedIdentifierContext>(_localctx);
        enterOuterAlt(_localctx, 1);
        setState(3773);
        match(fugue_sqlParser::IDENTIFIER);
        break;
      }

      case fugue_sqlParser::BACKQUOTED_IDENTIFIER: {
        _localctx = _tracker.createInstance<fugue_sqlParser::QuotedIdentifierAlternativeContext>(_localctx);
        enterOuterAlt(_localctx, 2);
        setState(3774);
        quotedIdentifier();
        break;
      }

      case fugue_sqlParser::ADD:
      case fugue_sqlParser::AFTER:
      case fugue_sqlParser::ALL:
      case fugue_sqlParser::ALTER:
      case fugue_sqlParser::ANALYZE:
      case fugue_sqlParser::AND:
      case fugue_sqlParser::ANY:
      case fugue_sqlParser::ARCHIVE:
      case fugue_sqlParser::ARRAY:
      case fugue_sqlParser::AS:
      case fugue_sqlParser::ASC:
      case fugue_sqlParser::AT:
      case fugue_sqlParser::AUTHORIZATION:
      case fugue_sqlParser::BETWEEN:
      case fugue_sqlParser::BOTH:
      case fugue_sqlParser::BUCKET:
      case fugue_sqlParser::BUCKETS:
      case fugue_sqlParser::BY:
      case fugue_sqlParser::CACHE:
      case fugue_sqlParser::CASCADE:
      case fugue_sqlParser::CASE:
      case fugue_sqlParser::CAST:
      case fugue_sqlParser::CHANGE:
      case fugue_sqlParser::CHECK:
      case fugue_sqlParser::CLEAR:
      case fugue_sqlParser::CLUSTER:
      case fugue_sqlParser::CLUSTERED:
      case fugue_sqlParser::CODEGEN:
      case fugue_sqlParser::COLLATE:
      case fugue_sqlParser::COLLECTION:
      case fugue_sqlParser::COLUMN:
      case fugue_sqlParser::COLUMNS:
      case fugue_sqlParser::COMMENT:
      case fugue_sqlParser::COMMIT:
      case fugue_sqlParser::COMPACT:
      case fugue_sqlParser::COMPACTIONS:
      case fugue_sqlParser::COMPUTE:
      case fugue_sqlParser::CONCATENATE:
      case fugue_sqlParser::CONSTRAINT:
      case fugue_sqlParser::COST:
      case fugue_sqlParser::CREATE:
      case fugue_sqlParser::CUBE:
      case fugue_sqlParser::CURRENT:
      case fugue_sqlParser::CURRENT_DATE:
      case fugue_sqlParser::CURRENT_TIME:
      case fugue_sqlParser::CURRENT_TIMESTAMP:
      case fugue_sqlParser::CURRENT_USER:
      case fugue_sqlParser::DATA:
      case fugue_sqlParser::DATABASE:
      case fugue_sqlParser::DATABASES:
      case fugue_sqlParser::DAY:
      case fugue_sqlParser::DBPROPERTIES:
      case fugue_sqlParser::DEFINED:
      case fugue_sqlParser::DELETE:
      case fugue_sqlParser::DELIMITED:
      case fugue_sqlParser::DESC:
      case fugue_sqlParser::DESCRIBE:
      case fugue_sqlParser::DFS:
      case fugue_sqlParser::DIRECTORIES:
      case fugue_sqlParser::DIRECTORY:
      case fugue_sqlParser::DISTINCT:
      case fugue_sqlParser::DISTRIBUTE:
      case fugue_sqlParser::DROP:
      case fugue_sqlParser::ELSE:
      case fugue_sqlParser::END:
      case fugue_sqlParser::ESCAPE:
      case fugue_sqlParser::ESCAPED:
      case fugue_sqlParser::EXCHANGE:
      case fugue_sqlParser::EXISTS:
      case fugue_sqlParser::EXPLAIN:
      case fugue_sqlParser::EXPORT:
      case fugue_sqlParser::EXTENDED:
      case fugue_sqlParser::EXTERNAL:
      case fugue_sqlParser::EXTRACT:
      case fugue_sqlParser::FALSE:
      case fugue_sqlParser::FETCH:
      case fugue_sqlParser::FIELDS:
      case fugue_sqlParser::FILTER:
      case fugue_sqlParser::FILEFORMAT:
      case fugue_sqlParser::FIRST:
      case fugue_sqlParser::FOLLOWING:
      case fugue_sqlParser::FOR:
      case fugue_sqlParser::FOREIGN:
      case fugue_sqlParser::FORMAT:
      case fugue_sqlParser::FORMATTED:
      case fugue_sqlParser::FROM:
      case fugue_sqlParser::FUNCTION:
      case fugue_sqlParser::FUNCTIONS:
      case fugue_sqlParser::GLOBAL:
      case fugue_sqlParser::GRANT:
      case fugue_sqlParser::GROUP:
      case fugue_sqlParser::GROUPING:
      case fugue_sqlParser::HAVING:
      case fugue_sqlParser::HOUR:
      case fugue_sqlParser::IF:
      case fugue_sqlParser::IGNORE:
      case fugue_sqlParser::IMPORT:
      case fugue_sqlParser::IN:
      case fugue_sqlParser::INDEX:
      case fugue_sqlParser::INDEXES:
      case fugue_sqlParser::INPATH:
      case fugue_sqlParser::INPUTFORMAT:
      case fugue_sqlParser::INSERT:
      case fugue_sqlParser::INTERVAL:
      case fugue_sqlParser::INTO:
      case fugue_sqlParser::IS:
      case fugue_sqlParser::ITEMS:
      case fugue_sqlParser::KEYS:
      case fugue_sqlParser::LAST:
      case fugue_sqlParser::LATERAL:
      case fugue_sqlParser::LAZY:
      case fugue_sqlParser::LEADING:
      case fugue_sqlParser::LIKE:
      case fugue_sqlParser::LIMIT:
      case fugue_sqlParser::LINES:
      case fugue_sqlParser::LIST:
      case fugue_sqlParser::LOAD:
      case fugue_sqlParser::LOCAL:
      case fugue_sqlParser::LOCATION:
      case fugue_sqlParser::LOCK:
      case fugue_sqlParser::LOCKS:
      case fugue_sqlParser::LOGICAL:
      case fugue_sqlParser::MACRO:
      case fugue_sqlParser::MAP:
      case fugue_sqlParser::MATCHED:
      case fugue_sqlParser::MERGE:
      case fugue_sqlParser::MINUTE:
      case fugue_sqlParser::MONTH:
      case fugue_sqlParser::MSCK:
      case fugue_sqlParser::NAMESPACE:
      case fugue_sqlParser::NAMESPACES:
      case fugue_sqlParser::NO:
      case fugue_sqlParser::NOT:
      case fugue_sqlParser::THENULL:
      case fugue_sqlParser::THENULLS:
      case fugue_sqlParser::OF:
      case fugue_sqlParser::ONLY:
      case fugue_sqlParser::OPTION:
      case fugue_sqlParser::OPTIONS:
      case fugue_sqlParser::OR:
      case fugue_sqlParser::ORDER:
      case fugue_sqlParser::OUT:
      case fugue_sqlParser::OUTER:
      case fugue_sqlParser::OUTPUTFORMAT:
      case fugue_sqlParser::OVER:
      case fugue_sqlParser::OVERLAPS:
      case fugue_sqlParser::OVERLAY:
      case fugue_sqlParser::OVERWRITE:
      case fugue_sqlParser::PARTITION:
      case fugue_sqlParser::PARTITIONED:
      case fugue_sqlParser::PARTITIONS:
      case fugue_sqlParser::PERCENTLIT:
      case fugue_sqlParser::PIVOT:
      case fugue_sqlParser::PLACING:
      case fugue_sqlParser::POSITION:
      case fugue_sqlParser::PRECEDING:
      case fugue_sqlParser::PRIMARY:
      case fugue_sqlParser::PRINCIPALS:
      case fugue_sqlParser::PROPERTIES:
      case fugue_sqlParser::PURGE:
      case fugue_sqlParser::QUERY:
      case fugue_sqlParser::RANGE:
      case fugue_sqlParser::RECORDREADER:
      case fugue_sqlParser::RECORDWRITER:
      case fugue_sqlParser::RECOVER:
      case fugue_sqlParser::REDUCE:
      case fugue_sqlParser::REFERENCES:
      case fugue_sqlParser::REFRESH:
      case fugue_sqlParser::RENAME:
      case fugue_sqlParser::REPAIR:
      case fugue_sqlParser::REPLACE:
      case fugue_sqlParser::RESET:
      case fugue_sqlParser::RESTRICT:
      case fugue_sqlParser::REVOKE:
      case fugue_sqlParser::RLIKE:
      case fugue_sqlParser::ROLE:
      case fugue_sqlParser::ROLES:
      case fugue_sqlParser::ROLLBACK:
      case fugue_sqlParser::ROLLUP:
      case fugue_sqlParser::ROW:
      case fugue_sqlParser::ROWS:
      case fugue_sqlParser::SCHEMA:
      case fugue_sqlParser::SECOND:
      case fugue_sqlParser::SELECT:
      case fugue_sqlParser::SEPARATED:
      case fugue_sqlParser::SERDE:
      case fugue_sqlParser::SERDEPROPERTIES:
      case fugue_sqlParser::SESSION_USER:
      case fugue_sqlParser::SET:
      case fugue_sqlParser::SETS:
      case fugue_sqlParser::SHOW:
      case fugue_sqlParser::SKEWED:
      case fugue_sqlParser::SOME:
      case fugue_sqlParser::SORT:
      case fugue_sqlParser::SORTED:
      case fugue_sqlParser::START:
      case fugue_sqlParser::STATISTICS:
      case fugue_sqlParser::STORED:
      case fugue_sqlParser::STRATIFY:
      case fugue_sqlParser::STRUCT:
      case fugue_sqlParser::SUBSTR:
      case fugue_sqlParser::SUBSTRING:
      case fugue_sqlParser::TABLE:
      case fugue_sqlParser::TABLES:
      case fugue_sqlParser::TABLESAMPLE:
      case fugue_sqlParser::TBLPROPERTIES:
      case fugue_sqlParser::TEMPORARY:
      case fugue_sqlParser::TERMINATED:
      case fugue_sqlParser::THEN:
      case fugue_sqlParser::TO:
      case fugue_sqlParser::TOUCH:
      case fugue_sqlParser::TRAILING:
      case fugue_sqlParser::TRANSACTION:
      case fugue_sqlParser::TRANSACTIONS:
      case fugue_sqlParser::TRANSFORM:
      case fugue_sqlParser::TRIM:
      case fugue_sqlParser::TRUE:
      case fugue_sqlParser::TRUNCATE:
      case fugue_sqlParser::TYPE:
      case fugue_sqlParser::UNARCHIVE:
      case fugue_sqlParser::UNBOUNDED:
      case fugue_sqlParser::UNCACHE:
      case fugue_sqlParser::UNIQUE:
      case fugue_sqlParser::UNKNOWN:
      case fugue_sqlParser::UNLOCK:
      case fugue_sqlParser::UNSET:
      case fugue_sqlParser::UPDATE:
      case fugue_sqlParser::USE:
      case fugue_sqlParser::USER:
      case fugue_sqlParser::VALUES:
      case fugue_sqlParser::VIEW:
      case fugue_sqlParser::VIEWS:
      case fugue_sqlParser::WHEN:
      case fugue_sqlParser::WHERE:
      case fugue_sqlParser::WINDOW:
      case fugue_sqlParser::WITH:
      case fugue_sqlParser::YEAR:
      case fugue_sqlParser::DIV: {
        _localctx = _tracker.createInstance<fugue_sqlParser::UnquotedIdentifierContext>(_localctx);
        enterOuterAlt(_localctx, 3);
        setState(3775);
        nonReserved();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- QuotedIdentifierContext ------------------------------------------------------------------

fugue_sqlParser::QuotedIdentifierContext::QuotedIdentifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* fugue_sqlParser::QuotedIdentifierContext::BACKQUOTED_IDENTIFIER() {
  return getToken(fugue_sqlParser::BACKQUOTED_IDENTIFIER, 0);
}


size_t fugue_sqlParser::QuotedIdentifierContext::getRuleIndex() const {
  return fugue_sqlParser::RuleQuotedIdentifier;
}


antlrcpp::Any fugue_sqlParser::QuotedIdentifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitQuotedIdentifier(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::QuotedIdentifierContext* fugue_sqlParser::quotedIdentifier() {
  QuotedIdentifierContext *_localctx = _tracker.createInstance<QuotedIdentifierContext>(_ctx, getState());
  enterRule(_localctx, 416, fugue_sqlParser::RuleQuotedIdentifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3778);
    match(fugue_sqlParser::BACKQUOTED_IDENTIFIER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NumberContext ------------------------------------------------------------------

fugue_sqlParser::NumberContext::NumberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t fugue_sqlParser::NumberContext::getRuleIndex() const {
  return fugue_sqlParser::RuleNumber;
}

void fugue_sqlParser::NumberContext::copyFrom(NumberContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- DecimalLiteralContext ------------------------------------------------------------------

tree::TerminalNode* fugue_sqlParser::DecimalLiteralContext::DECIMAL_VALUE() {
  return getToken(fugue_sqlParser::DECIMAL_VALUE, 0);
}

tree::TerminalNode* fugue_sqlParser::DecimalLiteralContext::MINUS() {
  return getToken(fugue_sqlParser::MINUS, 0);
}

fugue_sqlParser::DecimalLiteralContext::DecimalLiteralContext(NumberContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::DecimalLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitDecimalLiteral(this);
  else
    return visitor->visitChildren(this);
}
//----------------- BigIntLiteralContext ------------------------------------------------------------------

tree::TerminalNode* fugue_sqlParser::BigIntLiteralContext::BIGINT_LITERAL() {
  return getToken(fugue_sqlParser::BIGINT_LITERAL, 0);
}

tree::TerminalNode* fugue_sqlParser::BigIntLiteralContext::MINUS() {
  return getToken(fugue_sqlParser::MINUS, 0);
}

fugue_sqlParser::BigIntLiteralContext::BigIntLiteralContext(NumberContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::BigIntLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitBigIntLiteral(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TinyIntLiteralContext ------------------------------------------------------------------

tree::TerminalNode* fugue_sqlParser::TinyIntLiteralContext::TINYINT_LITERAL() {
  return getToken(fugue_sqlParser::TINYINT_LITERAL, 0);
}

tree::TerminalNode* fugue_sqlParser::TinyIntLiteralContext::MINUS() {
  return getToken(fugue_sqlParser::MINUS, 0);
}

fugue_sqlParser::TinyIntLiteralContext::TinyIntLiteralContext(NumberContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::TinyIntLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitTinyIntLiteral(this);
  else
    return visitor->visitChildren(this);
}
//----------------- LegacyDecimalLiteralContext ------------------------------------------------------------------

tree::TerminalNode* fugue_sqlParser::LegacyDecimalLiteralContext::EXPONENT_VALUE() {
  return getToken(fugue_sqlParser::EXPONENT_VALUE, 0);
}

tree::TerminalNode* fugue_sqlParser::LegacyDecimalLiteralContext::DECIMAL_VALUE() {
  return getToken(fugue_sqlParser::DECIMAL_VALUE, 0);
}

tree::TerminalNode* fugue_sqlParser::LegacyDecimalLiteralContext::MINUS() {
  return getToken(fugue_sqlParser::MINUS, 0);
}

fugue_sqlParser::LegacyDecimalLiteralContext::LegacyDecimalLiteralContext(NumberContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::LegacyDecimalLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitLegacyDecimalLiteral(this);
  else
    return visitor->visitChildren(this);
}
//----------------- BigDecimalLiteralContext ------------------------------------------------------------------

tree::TerminalNode* fugue_sqlParser::BigDecimalLiteralContext::BIGDECIMAL_LITERAL() {
  return getToken(fugue_sqlParser::BIGDECIMAL_LITERAL, 0);
}

tree::TerminalNode* fugue_sqlParser::BigDecimalLiteralContext::MINUS() {
  return getToken(fugue_sqlParser::MINUS, 0);
}

fugue_sqlParser::BigDecimalLiteralContext::BigDecimalLiteralContext(NumberContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::BigDecimalLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitBigDecimalLiteral(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ExponentLiteralContext ------------------------------------------------------------------

tree::TerminalNode* fugue_sqlParser::ExponentLiteralContext::EXPONENT_VALUE() {
  return getToken(fugue_sqlParser::EXPONENT_VALUE, 0);
}

tree::TerminalNode* fugue_sqlParser::ExponentLiteralContext::MINUS() {
  return getToken(fugue_sqlParser::MINUS, 0);
}

fugue_sqlParser::ExponentLiteralContext::ExponentLiteralContext(NumberContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::ExponentLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitExponentLiteral(this);
  else
    return visitor->visitChildren(this);
}
//----------------- DoubleLiteralContext ------------------------------------------------------------------

tree::TerminalNode* fugue_sqlParser::DoubleLiteralContext::DOUBLE_LITERAL() {
  return getToken(fugue_sqlParser::DOUBLE_LITERAL, 0);
}

tree::TerminalNode* fugue_sqlParser::DoubleLiteralContext::MINUS() {
  return getToken(fugue_sqlParser::MINUS, 0);
}

fugue_sqlParser::DoubleLiteralContext::DoubleLiteralContext(NumberContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::DoubleLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitDoubleLiteral(this);
  else
    return visitor->visitChildren(this);
}
//----------------- IntegerLiteralContext ------------------------------------------------------------------

tree::TerminalNode* fugue_sqlParser::IntegerLiteralContext::INTEGER_VALUE() {
  return getToken(fugue_sqlParser::INTEGER_VALUE, 0);
}

tree::TerminalNode* fugue_sqlParser::IntegerLiteralContext::MINUS() {
  return getToken(fugue_sqlParser::MINUS, 0);
}

fugue_sqlParser::IntegerLiteralContext::IntegerLiteralContext(NumberContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::IntegerLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitIntegerLiteral(this);
  else
    return visitor->visitChildren(this);
}
//----------------- SmallIntLiteralContext ------------------------------------------------------------------

tree::TerminalNode* fugue_sqlParser::SmallIntLiteralContext::SMALLINT_LITERAL() {
  return getToken(fugue_sqlParser::SMALLINT_LITERAL, 0);
}

tree::TerminalNode* fugue_sqlParser::SmallIntLiteralContext::MINUS() {
  return getToken(fugue_sqlParser::MINUS, 0);
}

fugue_sqlParser::SmallIntLiteralContext::SmallIntLiteralContext(NumberContext *ctx) { copyFrom(ctx); }


antlrcpp::Any fugue_sqlParser::SmallIntLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitSmallIntLiteral(this);
  else
    return visitor->visitChildren(this);
}
fugue_sqlParser::NumberContext* fugue_sqlParser::number() {
  NumberContext *_localctx = _tracker.createInstance<NumberContext>(_ctx, getState());
  enterRule(_localctx, 418, fugue_sqlParser::RuleNumber);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3816);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 516, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<fugue_sqlParser::ExponentLiteralContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(3781);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::MINUS) {
        setState(3780);
        match(fugue_sqlParser::MINUS);
      }
      setState(3783);
      match(fugue_sqlParser::EXPONENT_VALUE);
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<fugue_sqlParser::DecimalLiteralContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(3785);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::MINUS) {
        setState(3784);
        match(fugue_sqlParser::MINUS);
      }
      setState(3787);
      match(fugue_sqlParser::DECIMAL_VALUE);
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<fugue_sqlParser::LegacyDecimalLiteralContext>(_localctx);
      enterOuterAlt(_localctx, 3);
      setState(3789);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::MINUS) {
        setState(3788);
        match(fugue_sqlParser::MINUS);
      }
      setState(3791);
      _la = _input->LA(1);
      if (!(_la == fugue_sqlParser::EXPONENT_VALUE

      || _la == fugue_sqlParser::DECIMAL_VALUE)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    case 4: {
      _localctx = _tracker.createInstance<fugue_sqlParser::IntegerLiteralContext>(_localctx);
      enterOuterAlt(_localctx, 4);
      setState(3793);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::MINUS) {
        setState(3792);
        match(fugue_sqlParser::MINUS);
      }
      setState(3795);
      match(fugue_sqlParser::INTEGER_VALUE);
      break;
    }

    case 5: {
      _localctx = _tracker.createInstance<fugue_sqlParser::BigIntLiteralContext>(_localctx);
      enterOuterAlt(_localctx, 5);
      setState(3797);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::MINUS) {
        setState(3796);
        match(fugue_sqlParser::MINUS);
      }
      setState(3799);
      match(fugue_sqlParser::BIGINT_LITERAL);
      break;
    }

    case 6: {
      _localctx = _tracker.createInstance<fugue_sqlParser::SmallIntLiteralContext>(_localctx);
      enterOuterAlt(_localctx, 6);
      setState(3801);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::MINUS) {
        setState(3800);
        match(fugue_sqlParser::MINUS);
      }
      setState(3803);
      match(fugue_sqlParser::SMALLINT_LITERAL);
      break;
    }

    case 7: {
      _localctx = _tracker.createInstance<fugue_sqlParser::TinyIntLiteralContext>(_localctx);
      enterOuterAlt(_localctx, 7);
      setState(3805);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::MINUS) {
        setState(3804);
        match(fugue_sqlParser::MINUS);
      }
      setState(3807);
      match(fugue_sqlParser::TINYINT_LITERAL);
      break;
    }

    case 8: {
      _localctx = _tracker.createInstance<fugue_sqlParser::DoubleLiteralContext>(_localctx);
      enterOuterAlt(_localctx, 8);
      setState(3809);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::MINUS) {
        setState(3808);
        match(fugue_sqlParser::MINUS);
      }
      setState(3811);
      match(fugue_sqlParser::DOUBLE_LITERAL);
      break;
    }

    case 9: {
      _localctx = _tracker.createInstance<fugue_sqlParser::BigDecimalLiteralContext>(_localctx);
      enterOuterAlt(_localctx, 9);
      setState(3813);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == fugue_sqlParser::MINUS) {
        setState(3812);
        match(fugue_sqlParser::MINUS);
      }
      setState(3815);
      match(fugue_sqlParser::BIGDECIMAL_LITERAL);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AlterColumnActionContext ------------------------------------------------------------------

fugue_sqlParser::AlterColumnActionContext::AlterColumnActionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* fugue_sqlParser::AlterColumnActionContext::TYPE() {
  return getToken(fugue_sqlParser::TYPE, 0);
}

fugue_sqlParser::DataTypeContext* fugue_sqlParser::AlterColumnActionContext::dataType() {
  return getRuleContext<fugue_sqlParser::DataTypeContext>(0);
}

fugue_sqlParser::CommentSpecContext* fugue_sqlParser::AlterColumnActionContext::commentSpec() {
  return getRuleContext<fugue_sqlParser::CommentSpecContext>(0);
}

fugue_sqlParser::ColPositionContext* fugue_sqlParser::AlterColumnActionContext::colPosition() {
  return getRuleContext<fugue_sqlParser::ColPositionContext>(0);
}

tree::TerminalNode* fugue_sqlParser::AlterColumnActionContext::NOT() {
  return getToken(fugue_sqlParser::NOT, 0);
}

tree::TerminalNode* fugue_sqlParser::AlterColumnActionContext::THENULL() {
  return getToken(fugue_sqlParser::THENULL, 0);
}

tree::TerminalNode* fugue_sqlParser::AlterColumnActionContext::SET() {
  return getToken(fugue_sqlParser::SET, 0);
}

tree::TerminalNode* fugue_sqlParser::AlterColumnActionContext::DROP() {
  return getToken(fugue_sqlParser::DROP, 0);
}


size_t fugue_sqlParser::AlterColumnActionContext::getRuleIndex() const {
  return fugue_sqlParser::RuleAlterColumnAction;
}


antlrcpp::Any fugue_sqlParser::AlterColumnActionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitAlterColumnAction(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::AlterColumnActionContext* fugue_sqlParser::alterColumnAction() {
  AlterColumnActionContext *_localctx = _tracker.createInstance<AlterColumnActionContext>(_ctx, getState());
  enterRule(_localctx, 420, fugue_sqlParser::RuleAlterColumnAction);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3825);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case fugue_sqlParser::TYPE: {
        enterOuterAlt(_localctx, 1);
        setState(3818);
        match(fugue_sqlParser::TYPE);
        setState(3819);
        dataType();
        break;
      }

      case fugue_sqlParser::COMMENT: {
        enterOuterAlt(_localctx, 2);
        setState(3820);
        commentSpec();
        break;
      }

      case fugue_sqlParser::AFTER:
      case fugue_sqlParser::FIRST: {
        enterOuterAlt(_localctx, 3);
        setState(3821);
        colPosition();
        break;
      }

      case fugue_sqlParser::DROP:
      case fugue_sqlParser::SET: {
        enterOuterAlt(_localctx, 4);
        setState(3822);
        antlrcpp::downCast<AlterColumnActionContext *>(_localctx)->setOrDrop = _input->LT(1);
        _la = _input->LA(1);
        if (!(_la == fugue_sqlParser::DROP || _la == fugue_sqlParser::SET)) {
          antlrcpp::downCast<AlterColumnActionContext *>(_localctx)->setOrDrop = _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(3823);
        match(fugue_sqlParser::NOT);
        setState(3824);
        match(fugue_sqlParser::THENULL);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AnsiNonReservedContext ------------------------------------------------------------------

fugue_sqlParser::AnsiNonReservedContext::AnsiNonReservedContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::ADD() {
  return getToken(fugue_sqlParser::ADD, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::AFTER() {
  return getToken(fugue_sqlParser::AFTER, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::ALTER() {
  return getToken(fugue_sqlParser::ALTER, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::ANALYZE() {
  return getToken(fugue_sqlParser::ANALYZE, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::ARCHIVE() {
  return getToken(fugue_sqlParser::ARCHIVE, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::ARRAY() {
  return getToken(fugue_sqlParser::ARRAY, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::ASC() {
  return getToken(fugue_sqlParser::ASC, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::AT() {
  return getToken(fugue_sqlParser::AT, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::BETWEEN() {
  return getToken(fugue_sqlParser::BETWEEN, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::BUCKET() {
  return getToken(fugue_sqlParser::BUCKET, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::BUCKETS() {
  return getToken(fugue_sqlParser::BUCKETS, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::BY() {
  return getToken(fugue_sqlParser::BY, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::CACHE() {
  return getToken(fugue_sqlParser::CACHE, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::CASCADE() {
  return getToken(fugue_sqlParser::CASCADE, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::CHANGE() {
  return getToken(fugue_sqlParser::CHANGE, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::CLEAR() {
  return getToken(fugue_sqlParser::CLEAR, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::CLUSTER() {
  return getToken(fugue_sqlParser::CLUSTER, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::CLUSTERED() {
  return getToken(fugue_sqlParser::CLUSTERED, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::CODEGEN() {
  return getToken(fugue_sqlParser::CODEGEN, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::COLLECTION() {
  return getToken(fugue_sqlParser::COLLECTION, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::COLUMNS() {
  return getToken(fugue_sqlParser::COLUMNS, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::COMMENT() {
  return getToken(fugue_sqlParser::COMMENT, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::COMMIT() {
  return getToken(fugue_sqlParser::COMMIT, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::COMPACT() {
  return getToken(fugue_sqlParser::COMPACT, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::COMPACTIONS() {
  return getToken(fugue_sqlParser::COMPACTIONS, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::COMPUTE() {
  return getToken(fugue_sqlParser::COMPUTE, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::CONCATENATE() {
  return getToken(fugue_sqlParser::CONCATENATE, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::COST() {
  return getToken(fugue_sqlParser::COST, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::CUBE() {
  return getToken(fugue_sqlParser::CUBE, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::CURRENT() {
  return getToken(fugue_sqlParser::CURRENT, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::DATA() {
  return getToken(fugue_sqlParser::DATA, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::DATABASE() {
  return getToken(fugue_sqlParser::DATABASE, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::DATABASES() {
  return getToken(fugue_sqlParser::DATABASES, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::DBPROPERTIES() {
  return getToken(fugue_sqlParser::DBPROPERTIES, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::DEFINED() {
  return getToken(fugue_sqlParser::DEFINED, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::DELETE() {
  return getToken(fugue_sqlParser::DELETE, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::DELIMITED() {
  return getToken(fugue_sqlParser::DELIMITED, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::DESC() {
  return getToken(fugue_sqlParser::DESC, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::DESCRIBE() {
  return getToken(fugue_sqlParser::DESCRIBE, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::DFS() {
  return getToken(fugue_sqlParser::DFS, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::DIRECTORIES() {
  return getToken(fugue_sqlParser::DIRECTORIES, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::DIRECTORY() {
  return getToken(fugue_sqlParser::DIRECTORY, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::DISTRIBUTE() {
  return getToken(fugue_sqlParser::DISTRIBUTE, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::DIV() {
  return getToken(fugue_sqlParser::DIV, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::DROP() {
  return getToken(fugue_sqlParser::DROP, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::ESCAPED() {
  return getToken(fugue_sqlParser::ESCAPED, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::EXCHANGE() {
  return getToken(fugue_sqlParser::EXCHANGE, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::EXISTS() {
  return getToken(fugue_sqlParser::EXISTS, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::EXPLAIN() {
  return getToken(fugue_sqlParser::EXPLAIN, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::EXPORT() {
  return getToken(fugue_sqlParser::EXPORT, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::EXTENDED() {
  return getToken(fugue_sqlParser::EXTENDED, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::EXTERNAL() {
  return getToken(fugue_sqlParser::EXTERNAL, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::EXTRACT() {
  return getToken(fugue_sqlParser::EXTRACT, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::FIELDS() {
  return getToken(fugue_sqlParser::FIELDS, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::FILEFORMAT() {
  return getToken(fugue_sqlParser::FILEFORMAT, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::FIRST() {
  return getToken(fugue_sqlParser::FIRST, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::FOLLOWING() {
  return getToken(fugue_sqlParser::FOLLOWING, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::FORMAT() {
  return getToken(fugue_sqlParser::FORMAT, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::FORMATTED() {
  return getToken(fugue_sqlParser::FORMATTED, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::FUNCTION() {
  return getToken(fugue_sqlParser::FUNCTION, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::FUNCTIONS() {
  return getToken(fugue_sqlParser::FUNCTIONS, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::GLOBAL() {
  return getToken(fugue_sqlParser::GLOBAL, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::GROUPING() {
  return getToken(fugue_sqlParser::GROUPING, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::IF() {
  return getToken(fugue_sqlParser::IF, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::IGNORE() {
  return getToken(fugue_sqlParser::IGNORE, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::IMPORT() {
  return getToken(fugue_sqlParser::IMPORT, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::INDEX() {
  return getToken(fugue_sqlParser::INDEX, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::INDEXES() {
  return getToken(fugue_sqlParser::INDEXES, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::INPATH() {
  return getToken(fugue_sqlParser::INPATH, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::INPUTFORMAT() {
  return getToken(fugue_sqlParser::INPUTFORMAT, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::INSERT() {
  return getToken(fugue_sqlParser::INSERT, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::INTERVAL() {
  return getToken(fugue_sqlParser::INTERVAL, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::ITEMS() {
  return getToken(fugue_sqlParser::ITEMS, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::KEYS() {
  return getToken(fugue_sqlParser::KEYS, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::LAST() {
  return getToken(fugue_sqlParser::LAST, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::LATERAL() {
  return getToken(fugue_sqlParser::LATERAL, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::LAZY() {
  return getToken(fugue_sqlParser::LAZY, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::LIKE() {
  return getToken(fugue_sqlParser::LIKE, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::LIMIT() {
  return getToken(fugue_sqlParser::LIMIT, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::LINES() {
  return getToken(fugue_sqlParser::LINES, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::LIST() {
  return getToken(fugue_sqlParser::LIST, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::LOAD() {
  return getToken(fugue_sqlParser::LOAD, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::LOCAL() {
  return getToken(fugue_sqlParser::LOCAL, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::LOCATION() {
  return getToken(fugue_sqlParser::LOCATION, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::LOCK() {
  return getToken(fugue_sqlParser::LOCK, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::LOCKS() {
  return getToken(fugue_sqlParser::LOCKS, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::LOGICAL() {
  return getToken(fugue_sqlParser::LOGICAL, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::MACRO() {
  return getToken(fugue_sqlParser::MACRO, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::MAP() {
  return getToken(fugue_sqlParser::MAP, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::MATCHED() {
  return getToken(fugue_sqlParser::MATCHED, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::MERGE() {
  return getToken(fugue_sqlParser::MERGE, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::MSCK() {
  return getToken(fugue_sqlParser::MSCK, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::NAMESPACE() {
  return getToken(fugue_sqlParser::NAMESPACE, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::NAMESPACES() {
  return getToken(fugue_sqlParser::NAMESPACES, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::NO() {
  return getToken(fugue_sqlParser::NO, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::THENULLS() {
  return getToken(fugue_sqlParser::THENULLS, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::OF() {
  return getToken(fugue_sqlParser::OF, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::OPTION() {
  return getToken(fugue_sqlParser::OPTION, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::OPTIONS() {
  return getToken(fugue_sqlParser::OPTIONS, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::OUT() {
  return getToken(fugue_sqlParser::OUT, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::OUTPUTFORMAT() {
  return getToken(fugue_sqlParser::OUTPUTFORMAT, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::OVER() {
  return getToken(fugue_sqlParser::OVER, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::OVERLAY() {
  return getToken(fugue_sqlParser::OVERLAY, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::OVERWRITE() {
  return getToken(fugue_sqlParser::OVERWRITE, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::PARTITION() {
  return getToken(fugue_sqlParser::PARTITION, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::PARTITIONED() {
  return getToken(fugue_sqlParser::PARTITIONED, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::PARTITIONS() {
  return getToken(fugue_sqlParser::PARTITIONS, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::PERCENTLIT() {
  return getToken(fugue_sqlParser::PERCENTLIT, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::PIVOT() {
  return getToken(fugue_sqlParser::PIVOT, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::PLACING() {
  return getToken(fugue_sqlParser::PLACING, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::POSITION() {
  return getToken(fugue_sqlParser::POSITION, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::PRECEDING() {
  return getToken(fugue_sqlParser::PRECEDING, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::PRINCIPALS() {
  return getToken(fugue_sqlParser::PRINCIPALS, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::PROPERTIES() {
  return getToken(fugue_sqlParser::PROPERTIES, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::PURGE() {
  return getToken(fugue_sqlParser::PURGE, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::QUERY() {
  return getToken(fugue_sqlParser::QUERY, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::RANGE() {
  return getToken(fugue_sqlParser::RANGE, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::RECORDREADER() {
  return getToken(fugue_sqlParser::RECORDREADER, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::RECORDWRITER() {
  return getToken(fugue_sqlParser::RECORDWRITER, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::RECOVER() {
  return getToken(fugue_sqlParser::RECOVER, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::REDUCE() {
  return getToken(fugue_sqlParser::REDUCE, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::REFRESH() {
  return getToken(fugue_sqlParser::REFRESH, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::RENAME() {
  return getToken(fugue_sqlParser::RENAME, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::REPAIR() {
  return getToken(fugue_sqlParser::REPAIR, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::REPLACE() {
  return getToken(fugue_sqlParser::REPLACE, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::RESET() {
  return getToken(fugue_sqlParser::RESET, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::RESTRICT() {
  return getToken(fugue_sqlParser::RESTRICT, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::REVOKE() {
  return getToken(fugue_sqlParser::REVOKE, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::RLIKE() {
  return getToken(fugue_sqlParser::RLIKE, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::ROLE() {
  return getToken(fugue_sqlParser::ROLE, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::ROLES() {
  return getToken(fugue_sqlParser::ROLES, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::ROLLBACK() {
  return getToken(fugue_sqlParser::ROLLBACK, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::ROLLUP() {
  return getToken(fugue_sqlParser::ROLLUP, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::ROW() {
  return getToken(fugue_sqlParser::ROW, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::ROWS() {
  return getToken(fugue_sqlParser::ROWS, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::SCHEMA() {
  return getToken(fugue_sqlParser::SCHEMA, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::SEPARATED() {
  return getToken(fugue_sqlParser::SEPARATED, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::SERDE() {
  return getToken(fugue_sqlParser::SERDE, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::SERDEPROPERTIES() {
  return getToken(fugue_sqlParser::SERDEPROPERTIES, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::SET() {
  return getToken(fugue_sqlParser::SET, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::SETS() {
  return getToken(fugue_sqlParser::SETS, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::SHOW() {
  return getToken(fugue_sqlParser::SHOW, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::SKEWED() {
  return getToken(fugue_sqlParser::SKEWED, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::SORT() {
  return getToken(fugue_sqlParser::SORT, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::SORTED() {
  return getToken(fugue_sqlParser::SORTED, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::START() {
  return getToken(fugue_sqlParser::START, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::STATISTICS() {
  return getToken(fugue_sqlParser::STATISTICS, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::STORED() {
  return getToken(fugue_sqlParser::STORED, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::STRATIFY() {
  return getToken(fugue_sqlParser::STRATIFY, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::STRUCT() {
  return getToken(fugue_sqlParser::STRUCT, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::SUBSTR() {
  return getToken(fugue_sqlParser::SUBSTR, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::SUBSTRING() {
  return getToken(fugue_sqlParser::SUBSTRING, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::TABLES() {
  return getToken(fugue_sqlParser::TABLES, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::TABLESAMPLE() {
  return getToken(fugue_sqlParser::TABLESAMPLE, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::TBLPROPERTIES() {
  return getToken(fugue_sqlParser::TBLPROPERTIES, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::TEMPORARY() {
  return getToken(fugue_sqlParser::TEMPORARY, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::TERMINATED() {
  return getToken(fugue_sqlParser::TERMINATED, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::TOUCH() {
  return getToken(fugue_sqlParser::TOUCH, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::TRANSACTION() {
  return getToken(fugue_sqlParser::TRANSACTION, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::TRANSACTIONS() {
  return getToken(fugue_sqlParser::TRANSACTIONS, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::TRANSFORM() {
  return getToken(fugue_sqlParser::TRANSFORM, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::TRIM() {
  return getToken(fugue_sqlParser::TRIM, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::TRUE() {
  return getToken(fugue_sqlParser::TRUE, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::TRUNCATE() {
  return getToken(fugue_sqlParser::TRUNCATE, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::UNARCHIVE() {
  return getToken(fugue_sqlParser::UNARCHIVE, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::UNBOUNDED() {
  return getToken(fugue_sqlParser::UNBOUNDED, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::UNCACHE() {
  return getToken(fugue_sqlParser::UNCACHE, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::UNLOCK() {
  return getToken(fugue_sqlParser::UNLOCK, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::UNSET() {
  return getToken(fugue_sqlParser::UNSET, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::UPDATE() {
  return getToken(fugue_sqlParser::UPDATE, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::USE() {
  return getToken(fugue_sqlParser::USE, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::VALUES() {
  return getToken(fugue_sqlParser::VALUES, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::VIEW() {
  return getToken(fugue_sqlParser::VIEW, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::VIEWS() {
  return getToken(fugue_sqlParser::VIEWS, 0);
}

tree::TerminalNode* fugue_sqlParser::AnsiNonReservedContext::WINDOW() {
  return getToken(fugue_sqlParser::WINDOW, 0);
}


size_t fugue_sqlParser::AnsiNonReservedContext::getRuleIndex() const {
  return fugue_sqlParser::RuleAnsiNonReserved;
}


antlrcpp::Any fugue_sqlParser::AnsiNonReservedContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitAnsiNonReserved(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::AnsiNonReservedContext* fugue_sqlParser::ansiNonReserved() {
  AnsiNonReservedContext *_localctx = _tracker.createInstance<AnsiNonReservedContext>(_ctx, getState());
  enterRule(_localctx, 422, fugue_sqlParser::RuleAnsiNonReserved);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3827);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << fugue_sqlParser::ADD)
      | (1ULL << fugue_sqlParser::AFTER)
      | (1ULL << fugue_sqlParser::ALTER)
      | (1ULL << fugue_sqlParser::ANALYZE)
      | (1ULL << fugue_sqlParser::ARCHIVE)
      | (1ULL << fugue_sqlParser::ARRAY))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & ((1ULL << (fugue_sqlParser::ASC - 64))
      | (1ULL << (fugue_sqlParser::AT - 64))
      | (1ULL << (fugue_sqlParser::BETWEEN - 64))
      | (1ULL << (fugue_sqlParser::BUCKET - 64))
      | (1ULL << (fugue_sqlParser::BUCKETS - 64))
      | (1ULL << (fugue_sqlParser::BY - 64))
      | (1ULL << (fugue_sqlParser::CACHE - 64))
      | (1ULL << (fugue_sqlParser::CASCADE - 64))
      | (1ULL << (fugue_sqlParser::CHANGE - 64))
      | (1ULL << (fugue_sqlParser::CLEAR - 64))
      | (1ULL << (fugue_sqlParser::CLUSTER - 64))
      | (1ULL << (fugue_sqlParser::CLUSTERED - 64))
      | (1ULL << (fugue_sqlParser::CODEGEN - 64))
      | (1ULL << (fugue_sqlParser::COLLECTION - 64))
      | (1ULL << (fugue_sqlParser::COLUMNS - 64))
      | (1ULL << (fugue_sqlParser::COMMENT - 64))
      | (1ULL << (fugue_sqlParser::COMMIT - 64))
      | (1ULL << (fugue_sqlParser::COMPACT - 64))
      | (1ULL << (fugue_sqlParser::COMPACTIONS - 64))
      | (1ULL << (fugue_sqlParser::COMPUTE - 64))
      | (1ULL << (fugue_sqlParser::CONCATENATE - 64))
      | (1ULL << (fugue_sqlParser::COST - 64))
      | (1ULL << (fugue_sqlParser::CUBE - 64))
      | (1ULL << (fugue_sqlParser::CURRENT - 64))
      | (1ULL << (fugue_sqlParser::DATA - 64))
      | (1ULL << (fugue_sqlParser::DATABASE - 64))
      | (1ULL << (fugue_sqlParser::DATABASES - 64))
      | (1ULL << (fugue_sqlParser::DBPROPERTIES - 64))
      | (1ULL << (fugue_sqlParser::DEFINED - 64))
      | (1ULL << (fugue_sqlParser::DELETE - 64))
      | (1ULL << (fugue_sqlParser::DELIMITED - 64))
      | (1ULL << (fugue_sqlParser::DESC - 64))
      | (1ULL << (fugue_sqlParser::DESCRIBE - 64))
      | (1ULL << (fugue_sqlParser::DFS - 64))
      | (1ULL << (fugue_sqlParser::DIRECTORIES - 64))
      | (1ULL << (fugue_sqlParser::DIRECTORY - 64))
      | (1ULL << (fugue_sqlParser::DISTRIBUTE - 64))
      | (1ULL << (fugue_sqlParser::DROP - 64))
      | (1ULL << (fugue_sqlParser::ESCAPED - 64))
      | (1ULL << (fugue_sqlParser::EXCHANGE - 64))
      | (1ULL << (fugue_sqlParser::EXISTS - 64))
      | (1ULL << (fugue_sqlParser::EXPLAIN - 64))
      | (1ULL << (fugue_sqlParser::EXPORT - 64))
      | (1ULL << (fugue_sqlParser::EXTENDED - 64)))) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 128)) & ((1ULL << (fugue_sqlParser::EXTERNAL - 128))
      | (1ULL << (fugue_sqlParser::EXTRACT - 128))
      | (1ULL << (fugue_sqlParser::FIELDS - 128))
      | (1ULL << (fugue_sqlParser::FILEFORMAT - 128))
      | (1ULL << (fugue_sqlParser::FIRST - 128))
      | (1ULL << (fugue_sqlParser::FOLLOWING - 128))
      | (1ULL << (fugue_sqlParser::FORMAT - 128))
      | (1ULL << (fugue_sqlParser::FORMATTED - 128))
      | (1ULL << (fugue_sqlParser::FUNCTION - 128))
      | (1ULL << (fugue_sqlParser::FUNCTIONS - 128))
      | (1ULL << (fugue_sqlParser::GLOBAL - 128))
      | (1ULL << (fugue_sqlParser::GROUPING - 128))
      | (1ULL << (fugue_sqlParser::IF - 128))
      | (1ULL << (fugue_sqlParser::IGNORE - 128))
      | (1ULL << (fugue_sqlParser::IMPORT - 128))
      | (1ULL << (fugue_sqlParser::INDEX - 128))
      | (1ULL << (fugue_sqlParser::INDEXES - 128))
      | (1ULL << (fugue_sqlParser::INPATH - 128))
      | (1ULL << (fugue_sqlParser::INPUTFORMAT - 128))
      | (1ULL << (fugue_sqlParser::INSERT - 128))
      | (1ULL << (fugue_sqlParser::INTERVAL - 128))
      | (1ULL << (fugue_sqlParser::ITEMS - 128))
      | (1ULL << (fugue_sqlParser::KEYS - 128))
      | (1ULL << (fugue_sqlParser::LAST - 128))
      | (1ULL << (fugue_sqlParser::LATERAL - 128))
      | (1ULL << (fugue_sqlParser::LAZY - 128))
      | (1ULL << (fugue_sqlParser::LIKE - 128))
      | (1ULL << (fugue_sqlParser::LIMIT - 128))
      | (1ULL << (fugue_sqlParser::LINES - 128))
      | (1ULL << (fugue_sqlParser::LIST - 128))
      | (1ULL << (fugue_sqlParser::LOAD - 128))
      | (1ULL << (fugue_sqlParser::LOCAL - 128))
      | (1ULL << (fugue_sqlParser::LOCATION - 128))
      | (1ULL << (fugue_sqlParser::LOCK - 128))
      | (1ULL << (fugue_sqlParser::LOCKS - 128))
      | (1ULL << (fugue_sqlParser::LOGICAL - 128))
      | (1ULL << (fugue_sqlParser::MACRO - 128))
      | (1ULL << (fugue_sqlParser::MAP - 128))
      | (1ULL << (fugue_sqlParser::MATCHED - 128))
      | (1ULL << (fugue_sqlParser::MERGE - 128))
      | (1ULL << (fugue_sqlParser::MSCK - 128))
      | (1ULL << (fugue_sqlParser::NAMESPACE - 128))
      | (1ULL << (fugue_sqlParser::NAMESPACES - 128)))) != 0) || ((((_la - 193) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 193)) & ((1ULL << (fugue_sqlParser::NO - 193))
      | (1ULL << (fugue_sqlParser::THENULLS - 193))
      | (1ULL << (fugue_sqlParser::OF - 193))
      | (1ULL << (fugue_sqlParser::OPTION - 193))
      | (1ULL << (fugue_sqlParser::OPTIONS - 193))
      | (1ULL << (fugue_sqlParser::OUT - 193))
      | (1ULL << (fugue_sqlParser::OUTPUTFORMAT - 193))
      | (1ULL << (fugue_sqlParser::OVER - 193))
      | (1ULL << (fugue_sqlParser::OVERLAY - 193))
      | (1ULL << (fugue_sqlParser::OVERWRITE - 193))
      | (1ULL << (fugue_sqlParser::PARTITION - 193))
      | (1ULL << (fugue_sqlParser::PARTITIONED - 193))
      | (1ULL << (fugue_sqlParser::PARTITIONS - 193))
      | (1ULL << (fugue_sqlParser::PERCENTLIT - 193))
      | (1ULL << (fugue_sqlParser::PIVOT - 193))
      | (1ULL << (fugue_sqlParser::PLACING - 193))
      | (1ULL << (fugue_sqlParser::POSITION - 193))
      | (1ULL << (fugue_sqlParser::PRECEDING - 193))
      | (1ULL << (fugue_sqlParser::PRINCIPALS - 193))
      | (1ULL << (fugue_sqlParser::PROPERTIES - 193))
      | (1ULL << (fugue_sqlParser::PURGE - 193))
      | (1ULL << (fugue_sqlParser::QUERY - 193))
      | (1ULL << (fugue_sqlParser::RANGE - 193))
      | (1ULL << (fugue_sqlParser::RECORDREADER - 193))
      | (1ULL << (fugue_sqlParser::RECORDWRITER - 193))
      | (1ULL << (fugue_sqlParser::RECOVER - 193))
      | (1ULL << (fugue_sqlParser::REDUCE - 193))
      | (1ULL << (fugue_sqlParser::REFRESH - 193))
      | (1ULL << (fugue_sqlParser::RENAME - 193))
      | (1ULL << (fugue_sqlParser::REPAIR - 193))
      | (1ULL << (fugue_sqlParser::REPLACE - 193))
      | (1ULL << (fugue_sqlParser::RESET - 193))
      | (1ULL << (fugue_sqlParser::RESTRICT - 193))
      | (1ULL << (fugue_sqlParser::REVOKE - 193))
      | (1ULL << (fugue_sqlParser::RLIKE - 193))
      | (1ULL << (fugue_sqlParser::ROLE - 193))
      | (1ULL << (fugue_sqlParser::ROLES - 193))
      | (1ULL << (fugue_sqlParser::ROLLBACK - 193))
      | (1ULL << (fugue_sqlParser::ROLLUP - 193))
      | (1ULL << (fugue_sqlParser::ROW - 193))
      | (1ULL << (fugue_sqlParser::ROWS - 193))
      | (1ULL << (fugue_sqlParser::SCHEMA - 193))
      | (1ULL << (fugue_sqlParser::SEPARATED - 193))
      | (1ULL << (fugue_sqlParser::SERDE - 193))
      | (1ULL << (fugue_sqlParser::SERDEPROPERTIES - 193))
      | (1ULL << (fugue_sqlParser::SET - 193))
      | (1ULL << (fugue_sqlParser::SETS - 193))
      | (1ULL << (fugue_sqlParser::SHOW - 193)))) != 0) || ((((_la - 257) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 257)) & ((1ULL << (fugue_sqlParser::SKEWED - 257))
      | (1ULL << (fugue_sqlParser::SORT - 257))
      | (1ULL << (fugue_sqlParser::SORTED - 257))
      | (1ULL << (fugue_sqlParser::START - 257))
      | (1ULL << (fugue_sqlParser::STATISTICS - 257))
      | (1ULL << (fugue_sqlParser::STORED - 257))
      | (1ULL << (fugue_sqlParser::STRATIFY - 257))
      | (1ULL << (fugue_sqlParser::STRUCT - 257))
      | (1ULL << (fugue_sqlParser::SUBSTR - 257))
      | (1ULL << (fugue_sqlParser::SUBSTRING - 257))
      | (1ULL << (fugue_sqlParser::TABLES - 257))
      | (1ULL << (fugue_sqlParser::TABLESAMPLE - 257))
      | (1ULL << (fugue_sqlParser::TBLPROPERTIES - 257))
      | (1ULL << (fugue_sqlParser::TEMPORARY - 257))
      | (1ULL << (fugue_sqlParser::TERMINATED - 257))
      | (1ULL << (fugue_sqlParser::TOUCH - 257))
      | (1ULL << (fugue_sqlParser::TRANSACTION - 257))
      | (1ULL << (fugue_sqlParser::TRANSACTIONS - 257))
      | (1ULL << (fugue_sqlParser::TRANSFORM - 257))
      | (1ULL << (fugue_sqlParser::TRIM - 257))
      | (1ULL << (fugue_sqlParser::TRUE - 257))
      | (1ULL << (fugue_sqlParser::TRUNCATE - 257))
      | (1ULL << (fugue_sqlParser::UNARCHIVE - 257))
      | (1ULL << (fugue_sqlParser::UNBOUNDED - 257))
      | (1ULL << (fugue_sqlParser::UNCACHE - 257))
      | (1ULL << (fugue_sqlParser::UNLOCK - 257))
      | (1ULL << (fugue_sqlParser::UNSET - 257))
      | (1ULL << (fugue_sqlParser::UPDATE - 257))
      | (1ULL << (fugue_sqlParser::USE - 257))
      | (1ULL << (fugue_sqlParser::VALUES - 257))
      | (1ULL << (fugue_sqlParser::VIEW - 257))
      | (1ULL << (fugue_sqlParser::VIEWS - 257))
      | (1ULL << (fugue_sqlParser::WINDOW - 257))
      | (1ULL << (fugue_sqlParser::DIV - 257)))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StrictNonReservedContext ------------------------------------------------------------------

fugue_sqlParser::StrictNonReservedContext::StrictNonReservedContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* fugue_sqlParser::StrictNonReservedContext::ANTI() {
  return getToken(fugue_sqlParser::ANTI, 0);
}

tree::TerminalNode* fugue_sqlParser::StrictNonReservedContext::CROSS() {
  return getToken(fugue_sqlParser::CROSS, 0);
}

tree::TerminalNode* fugue_sqlParser::StrictNonReservedContext::EXCEPT() {
  return getToken(fugue_sqlParser::EXCEPT, 0);
}

tree::TerminalNode* fugue_sqlParser::StrictNonReservedContext::FULL() {
  return getToken(fugue_sqlParser::FULL, 0);
}

tree::TerminalNode* fugue_sqlParser::StrictNonReservedContext::INNER() {
  return getToken(fugue_sqlParser::INNER, 0);
}

tree::TerminalNode* fugue_sqlParser::StrictNonReservedContext::INTERSECT() {
  return getToken(fugue_sqlParser::INTERSECT, 0);
}

tree::TerminalNode* fugue_sqlParser::StrictNonReservedContext::JOIN() {
  return getToken(fugue_sqlParser::JOIN, 0);
}

tree::TerminalNode* fugue_sqlParser::StrictNonReservedContext::LEFT() {
  return getToken(fugue_sqlParser::LEFT, 0);
}

tree::TerminalNode* fugue_sqlParser::StrictNonReservedContext::NATURAL() {
  return getToken(fugue_sqlParser::NATURAL, 0);
}

tree::TerminalNode* fugue_sqlParser::StrictNonReservedContext::ON() {
  return getToken(fugue_sqlParser::ON, 0);
}

tree::TerminalNode* fugue_sqlParser::StrictNonReservedContext::RIGHT() {
  return getToken(fugue_sqlParser::RIGHT, 0);
}

tree::TerminalNode* fugue_sqlParser::StrictNonReservedContext::SEMI() {
  return getToken(fugue_sqlParser::SEMI, 0);
}

tree::TerminalNode* fugue_sqlParser::StrictNonReservedContext::SETMINUS() {
  return getToken(fugue_sqlParser::SETMINUS, 0);
}

tree::TerminalNode* fugue_sqlParser::StrictNonReservedContext::UNION() {
  return getToken(fugue_sqlParser::UNION, 0);
}

tree::TerminalNode* fugue_sqlParser::StrictNonReservedContext::USING() {
  return getToken(fugue_sqlParser::USING, 0);
}


size_t fugue_sqlParser::StrictNonReservedContext::getRuleIndex() const {
  return fugue_sqlParser::RuleStrictNonReserved;
}


antlrcpp::Any fugue_sqlParser::StrictNonReservedContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitStrictNonReserved(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::StrictNonReservedContext* fugue_sqlParser::strictNonReserved() {
  StrictNonReservedContext *_localctx = _tracker.createInstance<StrictNonReservedContext>(_ctx, getState());
  enterRule(_localctx, 424, fugue_sqlParser::RuleStrictNonReserved);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3829);
    _la = _input->LA(1);
    if (!(((((_la - 59) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 59)) & ((1ULL << (fugue_sqlParser::ANTI - 59))
      | (1ULL << (fugue_sqlParser::CROSS - 59))
      | (1ULL << (fugue_sqlParser::EXCEPT - 59)))) != 0) || ((((_la - 142) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 142)) & ((1ULL << (fugue_sqlParser::FULL - 142))
      | (1ULL << (fugue_sqlParser::INNER - 142))
      | (1ULL << (fugue_sqlParser::INTERSECT - 142))
      | (1ULL << (fugue_sqlParser::JOIN - 142))
      | (1ULL << (fugue_sqlParser::LEFT - 142))
      | (1ULL << (fugue_sqlParser::NATURAL - 142))
      | (1ULL << (fugue_sqlParser::ON - 142)))) != 0) || ((((_la - 237) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 237)) & ((1ULL << (fugue_sqlParser::RIGHT - 237))
      | (1ULL << (fugue_sqlParser::SEMI - 237))
      | (1ULL << (fugue_sqlParser::SETMINUS - 237))
      | (1ULL << (fugue_sqlParser::UNION - 237))
      | (1ULL << (fugue_sqlParser::USING - 237)))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NonReservedContext ------------------------------------------------------------------

fugue_sqlParser::NonReservedContext::NonReservedContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::ADD() {
  return getToken(fugue_sqlParser::ADD, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::AFTER() {
  return getToken(fugue_sqlParser::AFTER, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::ALL() {
  return getToken(fugue_sqlParser::ALL, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::ALTER() {
  return getToken(fugue_sqlParser::ALTER, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::ANALYZE() {
  return getToken(fugue_sqlParser::ANALYZE, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::AND() {
  return getToken(fugue_sqlParser::AND, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::ANY() {
  return getToken(fugue_sqlParser::ANY, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::ARCHIVE() {
  return getToken(fugue_sqlParser::ARCHIVE, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::ARRAY() {
  return getToken(fugue_sqlParser::ARRAY, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::AS() {
  return getToken(fugue_sqlParser::AS, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::ASC() {
  return getToken(fugue_sqlParser::ASC, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::AT() {
  return getToken(fugue_sqlParser::AT, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::AUTHORIZATION() {
  return getToken(fugue_sqlParser::AUTHORIZATION, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::BETWEEN() {
  return getToken(fugue_sqlParser::BETWEEN, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::BOTH() {
  return getToken(fugue_sqlParser::BOTH, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::BUCKET() {
  return getToken(fugue_sqlParser::BUCKET, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::BUCKETS() {
  return getToken(fugue_sqlParser::BUCKETS, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::BY() {
  return getToken(fugue_sqlParser::BY, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::CACHE() {
  return getToken(fugue_sqlParser::CACHE, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::CASCADE() {
  return getToken(fugue_sqlParser::CASCADE, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::CASE() {
  return getToken(fugue_sqlParser::CASE, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::CAST() {
  return getToken(fugue_sqlParser::CAST, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::CHANGE() {
  return getToken(fugue_sqlParser::CHANGE, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::CHECK() {
  return getToken(fugue_sqlParser::CHECK, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::CLEAR() {
  return getToken(fugue_sqlParser::CLEAR, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::CLUSTER() {
  return getToken(fugue_sqlParser::CLUSTER, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::CLUSTERED() {
  return getToken(fugue_sqlParser::CLUSTERED, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::CODEGEN() {
  return getToken(fugue_sqlParser::CODEGEN, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::COLLATE() {
  return getToken(fugue_sqlParser::COLLATE, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::COLLECTION() {
  return getToken(fugue_sqlParser::COLLECTION, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::COLUMN() {
  return getToken(fugue_sqlParser::COLUMN, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::COLUMNS() {
  return getToken(fugue_sqlParser::COLUMNS, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::COMMENT() {
  return getToken(fugue_sqlParser::COMMENT, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::COMMIT() {
  return getToken(fugue_sqlParser::COMMIT, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::COMPACT() {
  return getToken(fugue_sqlParser::COMPACT, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::COMPACTIONS() {
  return getToken(fugue_sqlParser::COMPACTIONS, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::COMPUTE() {
  return getToken(fugue_sqlParser::COMPUTE, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::CONCATENATE() {
  return getToken(fugue_sqlParser::CONCATENATE, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::CONSTRAINT() {
  return getToken(fugue_sqlParser::CONSTRAINT, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::COST() {
  return getToken(fugue_sqlParser::COST, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::CREATE() {
  return getToken(fugue_sqlParser::CREATE, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::CUBE() {
  return getToken(fugue_sqlParser::CUBE, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::CURRENT() {
  return getToken(fugue_sqlParser::CURRENT, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::CURRENT_DATE() {
  return getToken(fugue_sqlParser::CURRENT_DATE, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::CURRENT_TIME() {
  return getToken(fugue_sqlParser::CURRENT_TIME, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::CURRENT_TIMESTAMP() {
  return getToken(fugue_sqlParser::CURRENT_TIMESTAMP, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::CURRENT_USER() {
  return getToken(fugue_sqlParser::CURRENT_USER, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::DATA() {
  return getToken(fugue_sqlParser::DATA, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::DATABASE() {
  return getToken(fugue_sqlParser::DATABASE, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::DATABASES() {
  return getToken(fugue_sqlParser::DATABASES, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::DAY() {
  return getToken(fugue_sqlParser::DAY, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::DBPROPERTIES() {
  return getToken(fugue_sqlParser::DBPROPERTIES, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::DEFINED() {
  return getToken(fugue_sqlParser::DEFINED, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::DELETE() {
  return getToken(fugue_sqlParser::DELETE, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::DELIMITED() {
  return getToken(fugue_sqlParser::DELIMITED, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::DESC() {
  return getToken(fugue_sqlParser::DESC, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::DESCRIBE() {
  return getToken(fugue_sqlParser::DESCRIBE, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::DFS() {
  return getToken(fugue_sqlParser::DFS, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::DIRECTORIES() {
  return getToken(fugue_sqlParser::DIRECTORIES, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::DIRECTORY() {
  return getToken(fugue_sqlParser::DIRECTORY, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::DISTINCT() {
  return getToken(fugue_sqlParser::DISTINCT, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::DISTRIBUTE() {
  return getToken(fugue_sqlParser::DISTRIBUTE, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::DIV() {
  return getToken(fugue_sqlParser::DIV, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::DROP() {
  return getToken(fugue_sqlParser::DROP, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::ELSE() {
  return getToken(fugue_sqlParser::ELSE, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::END() {
  return getToken(fugue_sqlParser::END, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::ESCAPE() {
  return getToken(fugue_sqlParser::ESCAPE, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::ESCAPED() {
  return getToken(fugue_sqlParser::ESCAPED, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::EXCHANGE() {
  return getToken(fugue_sqlParser::EXCHANGE, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::EXISTS() {
  return getToken(fugue_sqlParser::EXISTS, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::EXPLAIN() {
  return getToken(fugue_sqlParser::EXPLAIN, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::EXPORT() {
  return getToken(fugue_sqlParser::EXPORT, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::EXTENDED() {
  return getToken(fugue_sqlParser::EXTENDED, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::EXTERNAL() {
  return getToken(fugue_sqlParser::EXTERNAL, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::EXTRACT() {
  return getToken(fugue_sqlParser::EXTRACT, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::FALSE() {
  return getToken(fugue_sqlParser::FALSE, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::FETCH() {
  return getToken(fugue_sqlParser::FETCH, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::FILTER() {
  return getToken(fugue_sqlParser::FILTER, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::FIELDS() {
  return getToken(fugue_sqlParser::FIELDS, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::FILEFORMAT() {
  return getToken(fugue_sqlParser::FILEFORMAT, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::FIRST() {
  return getToken(fugue_sqlParser::FIRST, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::FOLLOWING() {
  return getToken(fugue_sqlParser::FOLLOWING, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::FOR() {
  return getToken(fugue_sqlParser::FOR, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::FOREIGN() {
  return getToken(fugue_sqlParser::FOREIGN, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::FORMAT() {
  return getToken(fugue_sqlParser::FORMAT, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::FORMATTED() {
  return getToken(fugue_sqlParser::FORMATTED, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::FROM() {
  return getToken(fugue_sqlParser::FROM, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::FUNCTION() {
  return getToken(fugue_sqlParser::FUNCTION, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::FUNCTIONS() {
  return getToken(fugue_sqlParser::FUNCTIONS, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::GLOBAL() {
  return getToken(fugue_sqlParser::GLOBAL, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::GRANT() {
  return getToken(fugue_sqlParser::GRANT, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::GROUP() {
  return getToken(fugue_sqlParser::GROUP, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::GROUPING() {
  return getToken(fugue_sqlParser::GROUPING, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::HAVING() {
  return getToken(fugue_sqlParser::HAVING, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::HOUR() {
  return getToken(fugue_sqlParser::HOUR, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::IF() {
  return getToken(fugue_sqlParser::IF, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::IGNORE() {
  return getToken(fugue_sqlParser::IGNORE, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::IMPORT() {
  return getToken(fugue_sqlParser::IMPORT, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::IN() {
  return getToken(fugue_sqlParser::IN, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::INDEX() {
  return getToken(fugue_sqlParser::INDEX, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::INDEXES() {
  return getToken(fugue_sqlParser::INDEXES, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::INPATH() {
  return getToken(fugue_sqlParser::INPATH, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::INPUTFORMAT() {
  return getToken(fugue_sqlParser::INPUTFORMAT, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::INSERT() {
  return getToken(fugue_sqlParser::INSERT, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::INTERVAL() {
  return getToken(fugue_sqlParser::INTERVAL, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::INTO() {
  return getToken(fugue_sqlParser::INTO, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::IS() {
  return getToken(fugue_sqlParser::IS, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::ITEMS() {
  return getToken(fugue_sqlParser::ITEMS, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::KEYS() {
  return getToken(fugue_sqlParser::KEYS, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::LAST() {
  return getToken(fugue_sqlParser::LAST, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::LATERAL() {
  return getToken(fugue_sqlParser::LATERAL, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::LAZY() {
  return getToken(fugue_sqlParser::LAZY, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::LEADING() {
  return getToken(fugue_sqlParser::LEADING, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::LIKE() {
  return getToken(fugue_sqlParser::LIKE, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::LIMIT() {
  return getToken(fugue_sqlParser::LIMIT, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::LINES() {
  return getToken(fugue_sqlParser::LINES, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::LIST() {
  return getToken(fugue_sqlParser::LIST, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::LOAD() {
  return getToken(fugue_sqlParser::LOAD, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::LOCAL() {
  return getToken(fugue_sqlParser::LOCAL, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::LOCATION() {
  return getToken(fugue_sqlParser::LOCATION, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::LOCK() {
  return getToken(fugue_sqlParser::LOCK, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::LOCKS() {
  return getToken(fugue_sqlParser::LOCKS, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::LOGICAL() {
  return getToken(fugue_sqlParser::LOGICAL, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::MACRO() {
  return getToken(fugue_sqlParser::MACRO, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::MAP() {
  return getToken(fugue_sqlParser::MAP, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::MATCHED() {
  return getToken(fugue_sqlParser::MATCHED, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::MERGE() {
  return getToken(fugue_sqlParser::MERGE, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::MINUTE() {
  return getToken(fugue_sqlParser::MINUTE, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::MONTH() {
  return getToken(fugue_sqlParser::MONTH, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::MSCK() {
  return getToken(fugue_sqlParser::MSCK, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::NAMESPACE() {
  return getToken(fugue_sqlParser::NAMESPACE, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::NAMESPACES() {
  return getToken(fugue_sqlParser::NAMESPACES, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::NO() {
  return getToken(fugue_sqlParser::NO, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::NOT() {
  return getToken(fugue_sqlParser::NOT, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::THENULL() {
  return getToken(fugue_sqlParser::THENULL, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::THENULLS() {
  return getToken(fugue_sqlParser::THENULLS, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::OF() {
  return getToken(fugue_sqlParser::OF, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::ONLY() {
  return getToken(fugue_sqlParser::ONLY, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::OPTION() {
  return getToken(fugue_sqlParser::OPTION, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::OPTIONS() {
  return getToken(fugue_sqlParser::OPTIONS, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::OR() {
  return getToken(fugue_sqlParser::OR, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::ORDER() {
  return getToken(fugue_sqlParser::ORDER, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::OUT() {
  return getToken(fugue_sqlParser::OUT, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::OUTER() {
  return getToken(fugue_sqlParser::OUTER, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::OUTPUTFORMAT() {
  return getToken(fugue_sqlParser::OUTPUTFORMAT, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::OVER() {
  return getToken(fugue_sqlParser::OVER, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::OVERLAPS() {
  return getToken(fugue_sqlParser::OVERLAPS, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::OVERLAY() {
  return getToken(fugue_sqlParser::OVERLAY, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::OVERWRITE() {
  return getToken(fugue_sqlParser::OVERWRITE, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::PARTITION() {
  return getToken(fugue_sqlParser::PARTITION, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::PARTITIONED() {
  return getToken(fugue_sqlParser::PARTITIONED, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::PARTITIONS() {
  return getToken(fugue_sqlParser::PARTITIONS, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::PERCENTLIT() {
  return getToken(fugue_sqlParser::PERCENTLIT, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::PIVOT() {
  return getToken(fugue_sqlParser::PIVOT, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::PLACING() {
  return getToken(fugue_sqlParser::PLACING, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::POSITION() {
  return getToken(fugue_sqlParser::POSITION, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::PRECEDING() {
  return getToken(fugue_sqlParser::PRECEDING, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::PRIMARY() {
  return getToken(fugue_sqlParser::PRIMARY, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::PRINCIPALS() {
  return getToken(fugue_sqlParser::PRINCIPALS, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::PROPERTIES() {
  return getToken(fugue_sqlParser::PROPERTIES, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::PURGE() {
  return getToken(fugue_sqlParser::PURGE, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::QUERY() {
  return getToken(fugue_sqlParser::QUERY, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::RANGE() {
  return getToken(fugue_sqlParser::RANGE, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::RECORDREADER() {
  return getToken(fugue_sqlParser::RECORDREADER, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::RECORDWRITER() {
  return getToken(fugue_sqlParser::RECORDWRITER, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::RECOVER() {
  return getToken(fugue_sqlParser::RECOVER, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::REDUCE() {
  return getToken(fugue_sqlParser::REDUCE, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::REFERENCES() {
  return getToken(fugue_sqlParser::REFERENCES, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::REFRESH() {
  return getToken(fugue_sqlParser::REFRESH, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::RENAME() {
  return getToken(fugue_sqlParser::RENAME, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::REPAIR() {
  return getToken(fugue_sqlParser::REPAIR, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::REPLACE() {
  return getToken(fugue_sqlParser::REPLACE, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::RESET() {
  return getToken(fugue_sqlParser::RESET, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::RESTRICT() {
  return getToken(fugue_sqlParser::RESTRICT, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::REVOKE() {
  return getToken(fugue_sqlParser::REVOKE, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::RLIKE() {
  return getToken(fugue_sqlParser::RLIKE, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::ROLE() {
  return getToken(fugue_sqlParser::ROLE, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::ROLES() {
  return getToken(fugue_sqlParser::ROLES, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::ROLLBACK() {
  return getToken(fugue_sqlParser::ROLLBACK, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::ROLLUP() {
  return getToken(fugue_sqlParser::ROLLUP, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::ROW() {
  return getToken(fugue_sqlParser::ROW, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::ROWS() {
  return getToken(fugue_sqlParser::ROWS, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::SCHEMA() {
  return getToken(fugue_sqlParser::SCHEMA, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::SECOND() {
  return getToken(fugue_sqlParser::SECOND, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::SELECT() {
  return getToken(fugue_sqlParser::SELECT, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::SEPARATED() {
  return getToken(fugue_sqlParser::SEPARATED, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::SERDE() {
  return getToken(fugue_sqlParser::SERDE, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::SERDEPROPERTIES() {
  return getToken(fugue_sqlParser::SERDEPROPERTIES, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::SESSION_USER() {
  return getToken(fugue_sqlParser::SESSION_USER, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::SET() {
  return getToken(fugue_sqlParser::SET, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::SETS() {
  return getToken(fugue_sqlParser::SETS, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::SHOW() {
  return getToken(fugue_sqlParser::SHOW, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::SKEWED() {
  return getToken(fugue_sqlParser::SKEWED, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::SOME() {
  return getToken(fugue_sqlParser::SOME, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::SORT() {
  return getToken(fugue_sqlParser::SORT, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::SORTED() {
  return getToken(fugue_sqlParser::SORTED, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::START() {
  return getToken(fugue_sqlParser::START, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::STATISTICS() {
  return getToken(fugue_sqlParser::STATISTICS, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::STORED() {
  return getToken(fugue_sqlParser::STORED, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::STRATIFY() {
  return getToken(fugue_sqlParser::STRATIFY, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::STRUCT() {
  return getToken(fugue_sqlParser::STRUCT, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::SUBSTR() {
  return getToken(fugue_sqlParser::SUBSTR, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::SUBSTRING() {
  return getToken(fugue_sqlParser::SUBSTRING, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::TABLE() {
  return getToken(fugue_sqlParser::TABLE, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::TABLES() {
  return getToken(fugue_sqlParser::TABLES, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::TABLESAMPLE() {
  return getToken(fugue_sqlParser::TABLESAMPLE, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::TBLPROPERTIES() {
  return getToken(fugue_sqlParser::TBLPROPERTIES, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::TEMPORARY() {
  return getToken(fugue_sqlParser::TEMPORARY, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::TERMINATED() {
  return getToken(fugue_sqlParser::TERMINATED, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::THEN() {
  return getToken(fugue_sqlParser::THEN, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::TO() {
  return getToken(fugue_sqlParser::TO, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::TOUCH() {
  return getToken(fugue_sqlParser::TOUCH, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::TRAILING() {
  return getToken(fugue_sqlParser::TRAILING, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::TRANSACTION() {
  return getToken(fugue_sqlParser::TRANSACTION, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::TRANSACTIONS() {
  return getToken(fugue_sqlParser::TRANSACTIONS, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::TRANSFORM() {
  return getToken(fugue_sqlParser::TRANSFORM, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::TRIM() {
  return getToken(fugue_sqlParser::TRIM, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::TRUE() {
  return getToken(fugue_sqlParser::TRUE, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::TRUNCATE() {
  return getToken(fugue_sqlParser::TRUNCATE, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::TYPE() {
  return getToken(fugue_sqlParser::TYPE, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::UNARCHIVE() {
  return getToken(fugue_sqlParser::UNARCHIVE, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::UNBOUNDED() {
  return getToken(fugue_sqlParser::UNBOUNDED, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::UNCACHE() {
  return getToken(fugue_sqlParser::UNCACHE, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::UNIQUE() {
  return getToken(fugue_sqlParser::UNIQUE, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::UNKNOWN() {
  return getToken(fugue_sqlParser::UNKNOWN, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::UNLOCK() {
  return getToken(fugue_sqlParser::UNLOCK, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::UNSET() {
  return getToken(fugue_sqlParser::UNSET, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::UPDATE() {
  return getToken(fugue_sqlParser::UPDATE, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::USE() {
  return getToken(fugue_sqlParser::USE, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::USER() {
  return getToken(fugue_sqlParser::USER, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::VALUES() {
  return getToken(fugue_sqlParser::VALUES, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::VIEW() {
  return getToken(fugue_sqlParser::VIEW, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::VIEWS() {
  return getToken(fugue_sqlParser::VIEWS, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::WHEN() {
  return getToken(fugue_sqlParser::WHEN, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::WHERE() {
  return getToken(fugue_sqlParser::WHERE, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::WINDOW() {
  return getToken(fugue_sqlParser::WINDOW, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::WITH() {
  return getToken(fugue_sqlParser::WITH, 0);
}

tree::TerminalNode* fugue_sqlParser::NonReservedContext::YEAR() {
  return getToken(fugue_sqlParser::YEAR, 0);
}


size_t fugue_sqlParser::NonReservedContext::getRuleIndex() const {
  return fugue_sqlParser::RuleNonReserved;
}


antlrcpp::Any fugue_sqlParser::NonReservedContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<fugue_sqlVisitor*>(visitor))
    return parserVisitor->visitNonReserved(this);
  else
    return visitor->visitChildren(this);
}

fugue_sqlParser::NonReservedContext* fugue_sqlParser::nonReserved() {
  NonReservedContext *_localctx = _tracker.createInstance<NonReservedContext>(_ctx, getState());
  enterRule(_localctx, 426, fugue_sqlParser::RuleNonReserved);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3831);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << fugue_sqlParser::ADD)
      | (1ULL << fugue_sqlParser::AFTER)
      | (1ULL << fugue_sqlParser::ALL)
      | (1ULL << fugue_sqlParser::ALTER)
      | (1ULL << fugue_sqlParser::ANALYZE)
      | (1ULL << fugue_sqlParser::AND)
      | (1ULL << fugue_sqlParser::ANY)
      | (1ULL << fugue_sqlParser::ARCHIVE)
      | (1ULL << fugue_sqlParser::ARRAY)
      | (1ULL << fugue_sqlParser::AS))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & ((1ULL << (fugue_sqlParser::ASC - 64))
      | (1ULL << (fugue_sqlParser::AT - 64))
      | (1ULL << (fugue_sqlParser::AUTHORIZATION - 64))
      | (1ULL << (fugue_sqlParser::BETWEEN - 64))
      | (1ULL << (fugue_sqlParser::BOTH - 64))
      | (1ULL << (fugue_sqlParser::BUCKET - 64))
      | (1ULL << (fugue_sqlParser::BUCKETS - 64))
      | (1ULL << (fugue_sqlParser::BY - 64))
      | (1ULL << (fugue_sqlParser::CACHE - 64))
      | (1ULL << (fugue_sqlParser::CASCADE - 64))
      | (1ULL << (fugue_sqlParser::CASE - 64))
      | (1ULL << (fugue_sqlParser::CAST - 64))
      | (1ULL << (fugue_sqlParser::CHANGE - 64))
      | (1ULL << (fugue_sqlParser::CHECK - 64))
      | (1ULL << (fugue_sqlParser::CLEAR - 64))
      | (1ULL << (fugue_sqlParser::CLUSTER - 64))
      | (1ULL << (fugue_sqlParser::CLUSTERED - 64))
      | (1ULL << (fugue_sqlParser::CODEGEN - 64))
      | (1ULL << (fugue_sqlParser::COLLATE - 64))
      | (1ULL << (fugue_sqlParser::COLLECTION - 64))
      | (1ULL << (fugue_sqlParser::COLUMN - 64))
      | (1ULL << (fugue_sqlParser::COLUMNS - 64))
      | (1ULL << (fugue_sqlParser::COMMENT - 64))
      | (1ULL << (fugue_sqlParser::COMMIT - 64))
      | (1ULL << (fugue_sqlParser::COMPACT - 64))
      | (1ULL << (fugue_sqlParser::COMPACTIONS - 64))
      | (1ULL << (fugue_sqlParser::COMPUTE - 64))
      | (1ULL << (fugue_sqlParser::CONCATENATE - 64))
      | (1ULL << (fugue_sqlParser::CONSTRAINT - 64))
      | (1ULL << (fugue_sqlParser::COST - 64))
      | (1ULL << (fugue_sqlParser::CREATE - 64))
      | (1ULL << (fugue_sqlParser::CUBE - 64))
      | (1ULL << (fugue_sqlParser::CURRENT - 64))
      | (1ULL << (fugue_sqlParser::CURRENT_DATE - 64))
      | (1ULL << (fugue_sqlParser::CURRENT_TIME - 64))
      | (1ULL << (fugue_sqlParser::CURRENT_TIMESTAMP - 64))
      | (1ULL << (fugue_sqlParser::CURRENT_USER - 64))
      | (1ULL << (fugue_sqlParser::DATA - 64))
      | (1ULL << (fugue_sqlParser::DATABASE - 64))
      | (1ULL << (fugue_sqlParser::DATABASES - 64))
      | (1ULL << (fugue_sqlParser::DAY - 64))
      | (1ULL << (fugue_sqlParser::DBPROPERTIES - 64))
      | (1ULL << (fugue_sqlParser::DEFINED - 64))
      | (1ULL << (fugue_sqlParser::DELETE - 64))
      | (1ULL << (fugue_sqlParser::DELIMITED - 64))
      | (1ULL << (fugue_sqlParser::DESC - 64))
      | (1ULL << (fugue_sqlParser::DESCRIBE - 64))
      | (1ULL << (fugue_sqlParser::DFS - 64))
      | (1ULL << (fugue_sqlParser::DIRECTORIES - 64))
      | (1ULL << (fugue_sqlParser::DIRECTORY - 64))
      | (1ULL << (fugue_sqlParser::DISTINCT - 64))
      | (1ULL << (fugue_sqlParser::DISTRIBUTE - 64))
      | (1ULL << (fugue_sqlParser::DROP - 64))
      | (1ULL << (fugue_sqlParser::ELSE - 64))
      | (1ULL << (fugue_sqlParser::END - 64))
      | (1ULL << (fugue_sqlParser::ESCAPE - 64))
      | (1ULL << (fugue_sqlParser::ESCAPED - 64))
      | (1ULL << (fugue_sqlParser::EXCHANGE - 64))
      | (1ULL << (fugue_sqlParser::EXISTS - 64))
      | (1ULL << (fugue_sqlParser::EXPLAIN - 64))
      | (1ULL << (fugue_sqlParser::EXPORT - 64))
      | (1ULL << (fugue_sqlParser::EXTENDED - 64)))) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 128)) & ((1ULL << (fugue_sqlParser::EXTERNAL - 128))
      | (1ULL << (fugue_sqlParser::EXTRACT - 128))
      | (1ULL << (fugue_sqlParser::FALSE - 128))
      | (1ULL << (fugue_sqlParser::FETCH - 128))
      | (1ULL << (fugue_sqlParser::FIELDS - 128))
      | (1ULL << (fugue_sqlParser::FILTER - 128))
      | (1ULL << (fugue_sqlParser::FILEFORMAT - 128))
      | (1ULL << (fugue_sqlParser::FIRST - 128))
      | (1ULL << (fugue_sqlParser::FOLLOWING - 128))
      | (1ULL << (fugue_sqlParser::FOR - 128))
      | (1ULL << (fugue_sqlParser::FOREIGN - 128))
      | (1ULL << (fugue_sqlParser::FORMAT - 128))
      | (1ULL << (fugue_sqlParser::FORMATTED - 128))
      | (1ULL << (fugue_sqlParser::FROM - 128))
      | (1ULL << (fugue_sqlParser::FUNCTION - 128))
      | (1ULL << (fugue_sqlParser::FUNCTIONS - 128))
      | (1ULL << (fugue_sqlParser::GLOBAL - 128))
      | (1ULL << (fugue_sqlParser::GRANT - 128))
      | (1ULL << (fugue_sqlParser::GROUP - 128))
      | (1ULL << (fugue_sqlParser::GROUPING - 128))
      | (1ULL << (fugue_sqlParser::HAVING - 128))
      | (1ULL << (fugue_sqlParser::HOUR - 128))
      | (1ULL << (fugue_sqlParser::IF - 128))
      | (1ULL << (fugue_sqlParser::IGNORE - 128))
      | (1ULL << (fugue_sqlParser::IMPORT - 128))
      | (1ULL << (fugue_sqlParser::IN - 128))
      | (1ULL << (fugue_sqlParser::INDEX - 128))
      | (1ULL << (fugue_sqlParser::INDEXES - 128))
      | (1ULL << (fugue_sqlParser::INPATH - 128))
      | (1ULL << (fugue_sqlParser::INPUTFORMAT - 128))
      | (1ULL << (fugue_sqlParser::INSERT - 128))
      | (1ULL << (fugue_sqlParser::INTERVAL - 128))
      | (1ULL << (fugue_sqlParser::INTO - 128))
      | (1ULL << (fugue_sqlParser::IS - 128))
      | (1ULL << (fugue_sqlParser::ITEMS - 128))
      | (1ULL << (fugue_sqlParser::KEYS - 128))
      | (1ULL << (fugue_sqlParser::LAST - 128))
      | (1ULL << (fugue_sqlParser::LATERAL - 128))
      | (1ULL << (fugue_sqlParser::LAZY - 128))
      | (1ULL << (fugue_sqlParser::LEADING - 128))
      | (1ULL << (fugue_sqlParser::LIKE - 128))
      | (1ULL << (fugue_sqlParser::LIMIT - 128))
      | (1ULL << (fugue_sqlParser::LINES - 128))
      | (1ULL << (fugue_sqlParser::LIST - 128))
      | (1ULL << (fugue_sqlParser::LOAD - 128))
      | (1ULL << (fugue_sqlParser::LOCAL - 128))
      | (1ULL << (fugue_sqlParser::LOCATION - 128))
      | (1ULL << (fugue_sqlParser::LOCK - 128))
      | (1ULL << (fugue_sqlParser::LOCKS - 128))
      | (1ULL << (fugue_sqlParser::LOGICAL - 128))
      | (1ULL << (fugue_sqlParser::MACRO - 128))
      | (1ULL << (fugue_sqlParser::MAP - 128))
      | (1ULL << (fugue_sqlParser::MATCHED - 128))
      | (1ULL << (fugue_sqlParser::MERGE - 128))
      | (1ULL << (fugue_sqlParser::MINUTE - 128))
      | (1ULL << (fugue_sqlParser::MONTH - 128))
      | (1ULL << (fugue_sqlParser::MSCK - 128))
      | (1ULL << (fugue_sqlParser::NAMESPACE - 128))
      | (1ULL << (fugue_sqlParser::NAMESPACES - 128)))) != 0) || ((((_la - 193) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 193)) & ((1ULL << (fugue_sqlParser::NO - 193))
      | (1ULL << (fugue_sqlParser::NOT - 193))
      | (1ULL << (fugue_sqlParser::THENULL - 193))
      | (1ULL << (fugue_sqlParser::THENULLS - 193))
      | (1ULL << (fugue_sqlParser::OF - 193))
      | (1ULL << (fugue_sqlParser::ONLY - 193))
      | (1ULL << (fugue_sqlParser::OPTION - 193))
      | (1ULL << (fugue_sqlParser::OPTIONS - 193))
      | (1ULL << (fugue_sqlParser::OR - 193))
      | (1ULL << (fugue_sqlParser::ORDER - 193))
      | (1ULL << (fugue_sqlParser::OUT - 193))
      | (1ULL << (fugue_sqlParser::OUTER - 193))
      | (1ULL << (fugue_sqlParser::OUTPUTFORMAT - 193))
      | (1ULL << (fugue_sqlParser::OVER - 193))
      | (1ULL << (fugue_sqlParser::OVERLAPS - 193))
      | (1ULL << (fugue_sqlParser::OVERLAY - 193))
      | (1ULL << (fugue_sqlParser::OVERWRITE - 193))
      | (1ULL << (fugue_sqlParser::PARTITION - 193))
      | (1ULL << (fugue_sqlParser::PARTITIONED - 193))
      | (1ULL << (fugue_sqlParser::PARTITIONS - 193))
      | (1ULL << (fugue_sqlParser::PERCENTLIT - 193))
      | (1ULL << (fugue_sqlParser::PIVOT - 193))
      | (1ULL << (fugue_sqlParser::PLACING - 193))
      | (1ULL << (fugue_sqlParser::POSITION - 193))
      | (1ULL << (fugue_sqlParser::PRECEDING - 193))
      | (1ULL << (fugue_sqlParser::PRIMARY - 193))
      | (1ULL << (fugue_sqlParser::PRINCIPALS - 193))
      | (1ULL << (fugue_sqlParser::PROPERTIES - 193))
      | (1ULL << (fugue_sqlParser::PURGE - 193))
      | (1ULL << (fugue_sqlParser::QUERY - 193))
      | (1ULL << (fugue_sqlParser::RANGE - 193))
      | (1ULL << (fugue_sqlParser::RECORDREADER - 193))
      | (1ULL << (fugue_sqlParser::RECORDWRITER - 193))
      | (1ULL << (fugue_sqlParser::RECOVER - 193))
      | (1ULL << (fugue_sqlParser::REDUCE - 193))
      | (1ULL << (fugue_sqlParser::REFERENCES - 193))
      | (1ULL << (fugue_sqlParser::REFRESH - 193))
      | (1ULL << (fugue_sqlParser::RENAME - 193))
      | (1ULL << (fugue_sqlParser::REPAIR - 193))
      | (1ULL << (fugue_sqlParser::REPLACE - 193))
      | (1ULL << (fugue_sqlParser::RESET - 193))
      | (1ULL << (fugue_sqlParser::RESTRICT - 193))
      | (1ULL << (fugue_sqlParser::REVOKE - 193))
      | (1ULL << (fugue_sqlParser::RLIKE - 193))
      | (1ULL << (fugue_sqlParser::ROLE - 193))
      | (1ULL << (fugue_sqlParser::ROLES - 193))
      | (1ULL << (fugue_sqlParser::ROLLBACK - 193))
      | (1ULL << (fugue_sqlParser::ROLLUP - 193))
      | (1ULL << (fugue_sqlParser::ROW - 193))
      | (1ULL << (fugue_sqlParser::ROWS - 193))
      | (1ULL << (fugue_sqlParser::SCHEMA - 193))
      | (1ULL << (fugue_sqlParser::SECOND - 193))
      | (1ULL << (fugue_sqlParser::SELECT - 193))
      | (1ULL << (fugue_sqlParser::SEPARATED - 193))
      | (1ULL << (fugue_sqlParser::SERDE - 193))
      | (1ULL << (fugue_sqlParser::SERDEPROPERTIES - 193))
      | (1ULL << (fugue_sqlParser::SESSION_USER - 193))
      | (1ULL << (fugue_sqlParser::SET - 193))
      | (1ULL << (fugue_sqlParser::SETS - 193))
      | (1ULL << (fugue_sqlParser::SHOW - 193)))) != 0) || ((((_la - 257) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 257)) & ((1ULL << (fugue_sqlParser::SKEWED - 257))
      | (1ULL << (fugue_sqlParser::SOME - 257))
      | (1ULL << (fugue_sqlParser::SORT - 257))
      | (1ULL << (fugue_sqlParser::SORTED - 257))
      | (1ULL << (fugue_sqlParser::START - 257))
      | (1ULL << (fugue_sqlParser::STATISTICS - 257))
      | (1ULL << (fugue_sqlParser::STORED - 257))
      | (1ULL << (fugue_sqlParser::STRATIFY - 257))
      | (1ULL << (fugue_sqlParser::STRUCT - 257))
      | (1ULL << (fugue_sqlParser::SUBSTR - 257))
      | (1ULL << (fugue_sqlParser::SUBSTRING - 257))
      | (1ULL << (fugue_sqlParser::TABLE - 257))
      | (1ULL << (fugue_sqlParser::TABLES - 257))
      | (1ULL << (fugue_sqlParser::TABLESAMPLE - 257))
      | (1ULL << (fugue_sqlParser::TBLPROPERTIES - 257))
      | (1ULL << (fugue_sqlParser::TEMPORARY - 257))
      | (1ULL << (fugue_sqlParser::TERMINATED - 257))
      | (1ULL << (fugue_sqlParser::THEN - 257))
      | (1ULL << (fugue_sqlParser::TO - 257))
      | (1ULL << (fugue_sqlParser::TOUCH - 257))
      | (1ULL << (fugue_sqlParser::TRAILING - 257))
      | (1ULL << (fugue_sqlParser::TRANSACTION - 257))
      | (1ULL << (fugue_sqlParser::TRANSACTIONS - 257))
      | (1ULL << (fugue_sqlParser::TRANSFORM - 257))
      | (1ULL << (fugue_sqlParser::TRIM - 257))
      | (1ULL << (fugue_sqlParser::TRUE - 257))
      | (1ULL << (fugue_sqlParser::TRUNCATE - 257))
      | (1ULL << (fugue_sqlParser::TYPE - 257))
      | (1ULL << (fugue_sqlParser::UNARCHIVE - 257))
      | (1ULL << (fugue_sqlParser::UNBOUNDED - 257))
      | (1ULL << (fugue_sqlParser::UNCACHE - 257))
      | (1ULL << (fugue_sqlParser::UNIQUE - 257))
      | (1ULL << (fugue_sqlParser::UNKNOWN - 257))
      | (1ULL << (fugue_sqlParser::UNLOCK - 257))
      | (1ULL << (fugue_sqlParser::UNSET - 257))
      | (1ULL << (fugue_sqlParser::UPDATE - 257))
      | (1ULL << (fugue_sqlParser::USE - 257))
      | (1ULL << (fugue_sqlParser::USER - 257))
      | (1ULL << (fugue_sqlParser::VALUES - 257))
      | (1ULL << (fugue_sqlParser::VIEW - 257))
      | (1ULL << (fugue_sqlParser::VIEWS - 257))
      | (1ULL << (fugue_sqlParser::WHEN - 257))
      | (1ULL << (fugue_sqlParser::WHERE - 257))
      | (1ULL << (fugue_sqlParser::WINDOW - 257))
      | (1ULL << (fugue_sqlParser::WITH - 257))
      | (1ULL << (fugue_sqlParser::YEAR - 257))
      | (1ULL << (fugue_sqlParser::DIV - 257)))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

bool fugue_sqlParser::sempred(RuleContext *context, size_t ruleIndex, size_t predicateIndex) {
  switch (ruleIndex) {
    case 47: return fuguePartitionNumSempred(antlrcpp::downCast<FuguePartitionNumContext *>(context), predicateIndex);
    case 115: return queryTermSempred(antlrcpp::downCast<QueryTermContext *>(context), predicateIndex);
    case 170: return booleanExpressionSempred(antlrcpp::downCast<BooleanExpressionContext *>(context), predicateIndex);
    case 172: return valueExpressionSempred(antlrcpp::downCast<ValueExpressionContext *>(context), predicateIndex);
    case 173: return primaryExpressionSempred(antlrcpp::downCast<PrimaryExpressionContext *>(context), predicateIndex);

  default:
    break;
  }
  return true;
}

bool fugue_sqlParser::fuguePartitionNumSempred(FuguePartitionNumContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 0: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool fugue_sqlParser::queryTermSempred(QueryTermContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 1: return precpred(_ctx, 3);
    case 2: return precpred(_ctx, 2);
    case 3: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool fugue_sqlParser::booleanExpressionSempred(BooleanExpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 4: return precpred(_ctx, 2);
    case 5: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool fugue_sqlParser::valueExpressionSempred(ValueExpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 6: return precpred(_ctx, 6);
    case 7: return precpred(_ctx, 5);
    case 8: return precpred(_ctx, 4);
    case 9: return precpred(_ctx, 3);
    case 10: return precpred(_ctx, 2);
    case 11: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool fugue_sqlParser::primaryExpressionSempred(PrimaryExpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 12: return precpred(_ctx, 8);
    case 13: return precpred(_ctx, 6);

  default:
    break;
  }
  return true;
}

// Static vars and initialization.
std::vector<dfa::DFA> fugue_sqlParser::_decisionToDFA;
atn::PredictionContextCache fugue_sqlParser::_sharedContextCache;

// We own the ATN which in turn owns the ATN states.
atn::ATN fugue_sqlParser::_atn;
std::vector<uint16_t> fugue_sqlParser::_serializedATN;

std::vector<std::string> fugue_sqlParser::_ruleNames = {
  "fugueLanguage", "fugueSingleStatement", "fugueSingleTask", "fugueNestableTask", 
  "fugueNestableTaskCollectionNoSelect", "fugueTransformTask", "fugueProcessTask", 
  "fugueSaveAndUseTask", "fugueRenameColumnsTask", "fugueAlterColumnsTask", 
  "fugueDropColumnsTask", "fugueDropnaTask", "fugueFillnaTask", "fugueSampleTask", 
  "fugueTakeTask", "fugueZipTask", "fugueCreateTask", "fugueCreateDataTask", 
  "fugueLoadTask", "fugueOutputTask", "fuguePrintTask", "fugueSaveTask", 
  "fugueOutputTransformTask", "fugueModuleTask", "fugueSqlEngine", "fugueSingleFile", 
  "fugueLoadColumns", "fugueSaveMode", "fugueFileFormat", "fuguePath", "fugueCheckpoint", 
  "fugueCheckpointNamespace", "fugueYield", "fugueBroadcast", "fugueDataFrames", 
  "fugueDataFramePair", "fugueDataFrame", "fugueDataFrameMember", "fugueAssignment", 
  "fugueAssignmentSign", "fugueSingleOutputExtensionCommonWild", "fugueSingleOutputExtensionCommon", 
  "fugueExtension", "fugueSampleMethod", "fugueZipType", "fuguePrepartition", 
  "fuguePartitionAlgo", "fuguePartitionNum", "fuguePartitionNumber", "fugueParams", 
  "fugueCols", "fugueColsSort", "fugueColSort", "fugueColumnIdentifier", 
  "fugueRenameExpression", "fugueWildSchema", "fugueWildSchemaPair", "fugueSchemaOp", 
  "fugueSchema", "fugueSchemaPair", "fugueSchemaKey", "fugueSchemaType", 
  "fugueRenamePair", "fugueJson", "fugueJsonObj", "fugueJsonPairs", "fugueJsonPair", 
  "fugueJsonKey", "fugueJsonArray", "fugueJsonValue", "fugueJsonNumber", 
  "fugueJsonString", "fugueJsonBool", "fugueJsonNull", "fugueIdentifier", 
  "singleStatement", "singleExpression", "singleTableIdentifier", "singleMultipartIdentifier", 
  "singleFunctionIdentifier", "singleDataType", "singleTableSchema", "statement", 
  "unsupportedHiveNativeCommands", "createTableHeader", "replaceTableHeader", 
  "bucketSpec", "skewSpec", "locationSpec", "commentSpec", "query", "insertInto", 
  "partitionSpecLocation", "partitionSpec", "partitionVal", "theNamespace", 
  "describeFuncName", "describeColName", "ctes", "namedQuery", "tableProvider", 
  "createTableClauses", "tablePropertyList", "tableProperty", "tablePropertyKey", 
  "tablePropertyValue", "constantList", "nestedConstantList", "createFileFormat", 
  "fileFormat", "storageHandler", "resource", "dmlStatementNoWith", "queryOrganization", 
  "multiInsertQueryBody", "queryTerm", "queryPrimary", "sortItem", "fromStatement", 
  "fromStatementBody", "querySpecification", "optionalFromClause", "transformClause", 
  "selectClause", "setClause", "matchedClause", "notMatchedClause", "matchedAction", 
  "notMatchedAction", "assignmentList", "assignment", "whereClause", "havingClause", 
  "hint", "hintStatement", "fromClause", "aggregationClause", "groupingSet", 
  "pivotClause", "pivotColumn", "pivotValue", "lateralView", "setQuantifier", 
  "relation", "joinRelation", "joinType", "joinCriteria", "sample", "sampleMethod", 
  "identifierList", "identifierSeq", "orderedIdentifierList", "orderedIdentifier", 
  "identifierCommentList", "identifierComment", "relationPrimary", "inlineTable", 
  "functionTable", "tableAlias", "rowFormat", "multipartIdentifierList", 
  "multipartIdentifier", "tableIdentifier", "functionIdentifier", "namedExpression", 
  "namedExpressionSeq", "transformList", "transform", "transformArgument", 
  "expression", "booleanExpression", "predicate", "valueExpression", "primaryExpression", 
  "constant", "comparisonOperator", "comparisonEqualOperator", "arithmeticOperator", 
  "predicateOperator", "booleanValue", "interval", "errorCapturingMultiUnitsInterval", 
  "multiUnitsInterval", "errorCapturingUnitToUnitInterval", "unitToUnitInterval", 
  "intervalValue", "intervalUnit", "colPosition", "dataType", "qualifiedColTypeWithPositionList", 
  "qualifiedColTypeWithPosition", "colTypeList", "colType", "complexColTypeList", 
  "complexColType", "whenClause", "windowClause", "namedWindow", "windowSpec", 
  "windowFrame", "frameBound", "qualifiedNameList", "functionName", "qualifiedName", 
  "errorCapturingIdentifier", "errorCapturingIdentifierExtra", "identifier", 
  "strictIdentifier", "quotedIdentifier", "number", "alterColumnAction", 
  "ansiNonReserved", "strictNonReserved", "nonReserved"
};

std::vector<std::string> fugue_sqlParser::_literalNames = {
  "", "','", "':'", "'('", "')'", "'['", "']'", "'.'", "'{'", "'}'", "'true'", 
  "'false'", "'null'", "';'", "'/*+'", "'*/'", "'->'", "'FILL'", "'TAKE'", 
  "'HASH'", "'RAND'", "'EVEN'", "'PRESORT'", "'PERSIST'", "'BROADCAST'", 
  "'PARAMS'", "'PROCESS'", "'OUTPUT'", "'OUTTRANSFORM'", "'ROWCOUNT'", "'CONCURRENCY'", 
  "'PREPARTITION'", "'ZIP'", "'PRINT'", "'TITLE'", "'SAVE'", "'APPEND'", 
  "'PARQUET'", "'CSV'", "'JSON'", "'SINGLE'", "'CHECKPOINT'", "'WEAK'", 
  "'STRONG'", "'DETERMINISTIC'", "'YIELD'", "'CONNECT'", "'SAMPLE'", "'SEED'", 
  "'SUB'", "'CALLBACK'", "'DATAFRAME'", "'FILE'", "'ADD'", "'AFTER'", "'ALL'", 
  "'ALTER'", "'ANALYZE'", "'AND'", "'ANTI'", "'ANY'", "'ARCHIVE'", "'ARRAY'", 
  "'AS'", "'ASC'", "'AT'", "'AUTHORIZATION'", "'BETWEEN'", "'BOTH'", "'BUCKET'", 
  "'BUCKETS'", "'BY'", "'CACHE'", "'CASCADE'", "'CASE'", "", "'CHANGE'", 
  "'CHECK'", "'CLEAR'", "'CLUSTER'", "'CLUSTERED'", "'CODEGEN'", "'COLLATE'", 
  "'COLLECTION'", "'COLUMN'", "'COLUMNS'", "'COMMENT'", "'COMMIT'", "'COMPACT'", 
  "'COMPACTIONS'", "'COMPUTE'", "'CONCATENATE'", "'CONSTRAINT'", "'COST'", 
  "'CREATE'", "'CROSS'", "'CUBE'", "'CURRENT'", "'CURRENT_DATE'", "'CURRENT_TIME'", 
  "'CURRENT_TIMESTAMP'", "'CURRENT_USER'", "'DATA'", "'DATABASE'", "", "'DAY'", 
  "'DBPROPERTIES'", "'DEFINED'", "'DELETE'", "'DELIMITED'", "'DESC'", "'DESCRIBE'", 
  "'DFS'", "'DIRECTORIES'", "'DIRECTORY'", "'DISTINCT'", "'DISTRIBUTE'", 
  "'DROP'", "'ELSE'", "'END'", "'ESCAPE'", "'ESCAPED'", "'EXCEPT'", "'EXCHANGE'", 
  "'EXISTS'", "'EXPLAIN'", "'EXPORT'", "'EXTENDED'", "'EXTERNAL'", "'EXTRACT'", 
  "'FALSE'", "'FETCH'", "'FIELDS'", "'FILTER'", "'FILEFORMAT'", "'FIRST'", 
  "'FOLLOWING'", "'FOR'", "'FOREIGN'", "'FORMAT'", "'FORMATTED'", "'FROM'", 
  "'FULL'", "'FUNCTION'", "'FUNCTIONS'", "'GLOBAL'", "'GRANT'", "'GROUP'", 
  "'GROUPING'", "'HAVING'", "'HOUR'", "'IF'", "'IGNORE'", "'IMPORT'", "'IN'", 
  "'INDEX'", "'INDEXES'", "'INNER'", "'INPATH'", "'INPUTFORMAT'", "'INSERT'", 
  "'INTERSECT'", "'INTERVAL'", "'INTO'", "'IS'", "'ITEMS'", "'JOIN'", "'KEYS'", 
  "'LAST'", "'LATERAL'", "'LAZY'", "'LEADING'", "'LEFT'", "'LIKE'", "'LIMIT'", 
  "'LINES'", "'LIST'", "'LOAD'", "'LOCAL'", "'LOCATION'", "'LOCK'", "'LOCKS'", 
  "'LOGICAL'", "'MACRO'", "'MAP'", "'MATCHED'", "'MERGE'", "'MINUTE'", "'MONTH'", 
  "'MSCK'", "'NAMESPACE'", "'NAMESPACES'", "'NATURAL'", "'NO'", "", "'NULL'", 
  "'NULLS'", "'OF'", "'ON'", "'ONLY'", "'OPTION'", "'OPTIONS'", "'OR'", 
  "'ORDER'", "'OUT'", "'OUTER'", "'OUTPUTFORMAT'", "'OVER'", "'OVERLAPS'", 
  "'OVERLAY'", "'OVERWRITE'", "'PARTITION'", "'PARTITIONED'", "'PARTITIONS'", 
  "'PERCENT'", "'PIVOT'", "'PLACING'", "'POSITION'", "'PRECEDING'", "'PRIMARY'", 
  "'PRINCIPALS'", "'PROPERTIES'", "'PURGE'", "'QUERY'", "'RANGE'", "'RECORDREADER'", 
  "'RECORDWRITER'", "'RECOVER'", "'REDUCE'", "'REFERENCES'", "'REFRESH'", 
  "'RENAME'", "'REPAIR'", "'REPLACE'", "'RESET'", "'RESTRICT'", "'REVOKE'", 
  "'RIGHT'", "", "'ROLE'", "'ROLES'", "'ROLLBACK'", "'ROLLUP'", "'ROW'", 
  "'ROWS'", "'SCHEMA'", "'SECOND'", "'SELECT'", "'SEMI'", "'SEPARATED'", 
  "'SERDE'", "'SERDEPROPERTIES'", "'SESSION_USER'", "'SET'", "'MINUS'", 
  "'SETS'", "'SHOW'", "'SKEWED'", "'SOME'", "'SORT'", "'SORTED'", "'START'", 
  "'STATISTICS'", "'STORED'", "'STRATIFY'", "'STRUCT'", "'SUBSTR'", "'SUBSTRING'", 
  "'TABLE'", "'TABLES'", "'TABLESAMPLE'", "'TBLPROPERTIES'", "", "'TERMINATED'", 
  "'THEN'", "'TO'", "'TOUCH'", "'TRAILING'", "'TRANSACTION'", "'TRANSACTIONS'", 
  "'TRANSFORM'", "'TRIM'", "'TRUE'", "'TRUNCATE'", "'TYPE'", "'UNARCHIVE'", 
  "'UNBOUNDED'", "'UNCACHE'", "'UNION'", "'UNIQUE'", "'UNKNOWN'", "'UNLOCK'", 
  "'UNSET'", "'UPDATE'", "'USE'", "'USER'", "'USING'", "'VALUES'", "'VIEW'", 
  "'VIEWS'", "'WHEN'", "'WHERE'", "'WINDOW'", "'WITH'", "'YEAR'", "'='", 
  "'=='", "'<=>'", "'<>'", "'!='", "'<'", "", "'>'", "", "'+'", "'-'", "'*'", 
  "'/'", "'%'", "'DIV'", "'~'", "'&'", "'|'", "'||'", "'^'"
};

std::vector<std::string> fugue_sqlParser::_symbolicNames = {
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "FILL", 
  "TAKE", "HASH", "RAND", "EVEN", "PRESORT", "PERSIST", "BROADCAST", "PARAMS", 
  "PROCESS", "OUTPUT", "OUTTRANSFORM", "ROWCOUNT", "CONCURRENCY", "PREPARTITION", 
  "ZIP", "PRINT", "TITLE", "SAVE", "APPEND", "PARQUET", "CSV", "JSON", "SINGLE", 
  "CHECKPOINT", "WEAK", "STRONG", "DETERMINISTIC", "YIELD", "CONNECT", "SAMPLE", 
  "SEED", "SUB", "CALLBACK", "DATAFRAME", "FILE", "ADD", "AFTER", "ALL", 
  "ALTER", "ANALYZE", "AND", "ANTI", "ANY", "ARCHIVE", "ARRAY", "AS", "ASC", 
  "AT", "AUTHORIZATION", "BETWEEN", "BOTH", "BUCKET", "BUCKETS", "BY", "CACHE", 
  "CASCADE", "CASE", "CAST", "CHANGE", "CHECK", "CLEAR", "CLUSTER", "CLUSTERED", 
  "CODEGEN", "COLLATE", "COLLECTION", "COLUMN", "COLUMNS", "COMMENT", "COMMIT", 
  "COMPACT", "COMPACTIONS", "COMPUTE", "CONCATENATE", "CONSTRAINT", "COST", 
  "CREATE", "CROSS", "CUBE", "CURRENT", "CURRENT_DATE", "CURRENT_TIME", 
  "CURRENT_TIMESTAMP", "CURRENT_USER", "DATA", "DATABASE", "DATABASES", 
  "DAY", "DBPROPERTIES", "DEFINED", "DELETE", "DELIMITED", "DESC", "DESCRIBE", 
  "DFS", "DIRECTORIES", "DIRECTORY", "DISTINCT", "DISTRIBUTE", "DROP", "ELSE", 
  "END", "ESCAPE", "ESCAPED", "EXCEPT", "EXCHANGE", "EXISTS", "EXPLAIN", 
  "EXPORT", "EXTENDED", "EXTERNAL", "EXTRACT", "FALSE", "FETCH", "FIELDS", 
  "FILTER", "FILEFORMAT", "FIRST", "FOLLOWING", "FOR", "FOREIGN", "FORMAT", 
  "FORMATTED", "FROM", "FULL", "FUNCTION", "FUNCTIONS", "GLOBAL", "GRANT", 
  "GROUP", "GROUPING", "HAVING", "HOUR", "IF", "IGNORE", "IMPORT", "IN", 
  "INDEX", "INDEXES", "INNER", "INPATH", "INPUTFORMAT", "INSERT", "INTERSECT", 
  "INTERVAL", "INTO", "IS", "ITEMS", "JOIN", "KEYS", "LAST", "LATERAL", 
  "LAZY", "LEADING", "LEFT", "LIKE", "LIMIT", "LINES", "LIST", "LOAD", "LOCAL", 
  "LOCATION", "LOCK", "LOCKS", "LOGICAL", "MACRO", "MAP", "MATCHED", "MERGE", 
  "MINUTE", "MONTH", "MSCK", "NAMESPACE", "NAMESPACES", "NATURAL", "NO", 
  "NOT", "THENULL", "THENULLS", "OF", "ON", "ONLY", "OPTION", "OPTIONS", 
  "OR", "ORDER", "OUT", "OUTER", "OUTPUTFORMAT", "OVER", "OVERLAPS", "OVERLAY", 
  "OVERWRITE", "PARTITION", "PARTITIONED", "PARTITIONS", "PERCENTLIT", "PIVOT", 
  "PLACING", "POSITION", "PRECEDING", "PRIMARY", "PRINCIPALS", "PROPERTIES", 
  "PURGE", "QUERY", "RANGE", "RECORDREADER", "RECORDWRITER", "RECOVER", 
  "REDUCE", "REFERENCES", "REFRESH", "RENAME", "REPAIR", "REPLACE", "RESET", 
  "RESTRICT", "REVOKE", "RIGHT", "RLIKE", "ROLE", "ROLES", "ROLLBACK", "ROLLUP", 
  "ROW", "ROWS", "SCHEMA", "SECOND", "SELECT", "SEMI", "SEPARATED", "SERDE", 
  "SERDEPROPERTIES", "SESSION_USER", "SET", "SETMINUS", "SETS", "SHOW", 
  "SKEWED", "SOME", "SORT", "SORTED", "START", "STATISTICS", "STORED", "STRATIFY", 
  "STRUCT", "SUBSTR", "SUBSTRING", "TABLE", "TABLES", "TABLESAMPLE", "TBLPROPERTIES", 
  "TEMPORARY", "TERMINATED", "THEN", "TO", "TOUCH", "TRAILING", "TRANSACTION", 
  "TRANSACTIONS", "TRANSFORM", "TRIM", "TRUE", "TRUNCATE", "TYPE", "UNARCHIVE", 
  "UNBOUNDED", "UNCACHE", "UNION", "UNIQUE", "UNKNOWN", "UNLOCK", "UNSET", 
  "UPDATE", "USE", "USER", "USING", "VALUES", "VIEW", "VIEWS", "WHEN", "WHERE", 
  "WINDOW", "WITH", "YEAR", "EQUAL", "DOUBLEEQUAL", "NSEQ", "NEQ", "NEQJ", 
  "LT", "LTE", "GT", "GTE", "PLUS", "MINUS", "ASTERISK", "SLASH", "PERCENT", 
  "DIV", "TILDE", "AMPERSAND", "PIPE", "CONCAT_PIPE", "HAT", "STRING", "BIGINT_LITERAL", 
  "SMALLINT_LITERAL", "TINYINT_LITERAL", "INTEGER_VALUE", "EXPONENT_VALUE", 
  "DECIMAL_VALUE", "DOUBLE_LITERAL", "BIGDECIMAL_LITERAL", "IDENTIFIER", 
  "BACKQUOTED_IDENTIFIER", "SIMPLE_COMMENT", "BRACKETED_COMMENT", "WS", 
  "UNRECOGNIZED"
};

dfa::Vocabulary fugue_sqlParser::_vocabulary(_literalNames, _symbolicNames);

std::vector<std::string> fugue_sqlParser::_tokenNames;

fugue_sqlParser::Initializer::Initializer() {
	for (size_t i = 0; i < _symbolicNames.size(); ++i) {
		std::string name = _vocabulary.getLiteralName(i);
		if (name.empty()) {
			name = _vocabulary.getSymbolicName(i);
		}

		if (name.empty()) {
			_tokenNames.push_back("<INVALID>");
		} else {
      _tokenNames.push_back(name);
    }
	}

  static const uint16_t serializedATNSegment0[] = {
    0x3, 0x608b, 0xa72a, 0x8133, 0xb9ed, 0x417c, 0x3be7, 0x7786, 0x5964, 
       0x3, 0x155, 0xefc, 0x4, 0x2, 0x9, 0x2, 0x4, 0x3, 0x9, 0x3, 0x4, 0x4, 
       0x9, 0x4, 0x4, 0x5, 0x9, 0x5, 0x4, 0x6, 0x9, 0x6, 0x4, 0x7, 0x9, 
       0x7, 0x4, 0x8, 0x9, 0x8, 0x4, 0x9, 0x9, 0x9, 0x4, 0xa, 0x9, 0xa, 
       0x4, 0xb, 0x9, 0xb, 0x4, 0xc, 0x9, 0xc, 0x4, 0xd, 0x9, 0xd, 0x4, 
       0xe, 0x9, 0xe, 0x4, 0xf, 0x9, 0xf, 0x4, 0x10, 0x9, 0x10, 0x4, 0x11, 
       0x9, 0x11, 0x4, 0x12, 0x9, 0x12, 0x4, 0x13, 0x9, 0x13, 0x4, 0x14, 
       0x9, 0x14, 0x4, 0x15, 0x9, 0x15, 0x4, 0x16, 0x9, 0x16, 0x4, 0x17, 
       0x9, 0x17, 0x4, 0x18, 0x9, 0x18, 0x4, 0x19, 0x9, 0x19, 0x4, 0x1a, 
       0x9, 0x1a, 0x4, 0x1b, 0x9, 0x1b, 0x4, 0x1c, 0x9, 0x1c, 0x4, 0x1d, 
       0x9, 0x1d, 0x4, 0x1e, 0x9, 0x1e, 0x4, 0x1f, 0x9, 0x1f, 0x4, 0x20, 
       0x9, 0x20, 0x4, 0x21, 0x9, 0x21, 0x4, 0x22, 0x9, 0x22, 0x4, 0x23, 
       0x9, 0x23, 0x4, 0x24, 0x9, 0x24, 0x4, 0x25, 0x9, 0x25, 0x4, 0x26, 
       0x9, 0x26, 0x4, 0x27, 0x9, 0x27, 0x4, 0x28, 0x9, 0x28, 0x4, 0x29, 
       0x9, 0x29, 0x4, 0x2a, 0x9, 0x2a, 0x4, 0x2b, 0x9, 0x2b, 0x4, 0x2c, 
       0x9, 0x2c, 0x4, 0x2d, 0x9, 0x2d, 0x4, 0x2e, 0x9, 0x2e, 0x4, 0x2f, 
       0x9, 0x2f, 0x4, 0x30, 0x9, 0x30, 0x4, 0x31, 0x9, 0x31, 0x4, 0x32, 
       0x9, 0x32, 0x4, 0x33, 0x9, 0x33, 0x4, 0x34, 0x9, 0x34, 0x4, 0x35, 
       0x9, 0x35, 0x4, 0x36, 0x9, 0x36, 0x4, 0x37, 0x9, 0x37, 0x4, 0x38, 
       0x9, 0x38, 0x4, 0x39, 0x9, 0x39, 0x4, 0x3a, 0x9, 0x3a, 0x4, 0x3b, 
       0x9, 0x3b, 0x4, 0x3c, 0x9, 0x3c, 0x4, 0x3d, 0x9, 0x3d, 0x4, 0x3e, 
       0x9, 0x3e, 0x4, 0x3f, 0x9, 0x3f, 0x4, 0x40, 0x9, 0x40, 0x4, 0x41, 
       0x9, 0x41, 0x4, 0x42, 0x9, 0x42, 0x4, 0x43, 0x9, 0x43, 0x4, 0x44, 
       0x9, 0x44, 0x4, 0x45, 0x9, 0x45, 0x4, 0x46, 0x9, 0x46, 0x4, 0x47, 
       0x9, 0x47, 0x4, 0x48, 0x9, 0x48, 0x4, 0x49, 0x9, 0x49, 0x4, 0x4a, 
       0x9, 0x4a, 0x4, 0x4b, 0x9, 0x4b, 0x4, 0x4c, 0x9, 0x4c, 0x4, 0x4d, 
       0x9, 0x4d, 0x4, 0x4e, 0x9, 0x4e, 0x4, 0x4f, 0x9, 0x4f, 0x4, 0x50, 
       0x9, 0x50, 0x4, 0x51, 0x9, 0x51, 0x4, 0x52, 0x9, 0x52, 0x4, 0x53, 
       0x9, 0x53, 0x4, 0x54, 0x9, 0x54, 0x4, 0x55, 0x9, 0x55, 0x4, 0x56, 
       0x9, 0x56, 0x4, 0x57, 0x9, 0x57, 0x4, 0x58, 0x9, 0x58, 0x4, 0x59, 
       0x9, 0x59, 0x4, 0x5a, 0x9, 0x5a, 0x4, 0x5b, 0x9, 0x5b, 0x4, 0x5c, 
       0x9, 0x5c, 0x4, 0x5d, 0x9, 0x5d, 0x4, 0x5e, 0x9, 0x5e, 0x4, 0x5f, 
       0x9, 0x5f, 0x4, 0x60, 0x9, 0x60, 0x4, 0x61, 0x9, 0x61, 0x4, 0x62, 
       0x9, 0x62, 0x4, 0x63, 0x9, 0x63, 0x4, 0x64, 0x9, 0x64, 0x4, 0x65, 
       0x9, 0x65, 0x4, 0x66, 0x9, 0x66, 0x4, 0x67, 0x9, 0x67, 0x4, 0x68, 
       0x9, 0x68, 0x4, 0x69, 0x9, 0x69, 0x4, 0x6a, 0x9, 0x6a, 0x4, 0x6b, 
       0x9, 0x6b, 0x4, 0x6c, 0x9, 0x6c, 0x4, 0x6d, 0x9, 0x6d, 0x4, 0x6e, 
       0x9, 0x6e, 0x4, 0x6f, 0x9, 0x6f, 0x4, 0x70, 0x9, 0x70, 0x4, 0x71, 
       0x9, 0x71, 0x4, 0x72, 0x9, 0x72, 0x4, 0x73, 0x9, 0x73, 0x4, 0x74, 
       0x9, 0x74, 0x4, 0x75, 0x9, 0x75, 0x4, 0x76, 0x9, 0x76, 0x4, 0x77, 
       0x9, 0x77, 0x4, 0x78, 0x9, 0x78, 0x4, 0x79, 0x9, 0x79, 0x4, 0x7a, 
       0x9, 0x7a, 0x4, 0x7b, 0x9, 0x7b, 0x4, 0x7c, 0x9, 0x7c, 0x4, 0x7d, 
       0x9, 0x7d, 0x4, 0x7e, 0x9, 0x7e, 0x4, 0x7f, 0x9, 0x7f, 0x4, 0x80, 
       0x9, 0x80, 0x4, 0x81, 0x9, 0x81, 0x4, 0x82, 0x9, 0x82, 0x4, 0x83, 
       0x9, 0x83, 0x4, 0x84, 0x9, 0x84, 0x4, 0x85, 0x9, 0x85, 0x4, 0x86, 
       0x9, 0x86, 0x4, 0x87, 0x9, 0x87, 0x4, 0x88, 0x9, 0x88, 0x4, 0x89, 
       0x9, 0x89, 0x4, 0x8a, 0x9, 0x8a, 0x4, 0x8b, 0x9, 0x8b, 0x4, 0x8c, 
       0x9, 0x8c, 0x4, 0x8d, 0x9, 0x8d, 0x4, 0x8e, 0x9, 0x8e, 0x4, 0x8f, 
       0x9, 0x8f, 0x4, 0x90, 0x9, 0x90, 0x4, 0x91, 0x9, 0x91, 0x4, 0x92, 
       0x9, 0x92, 0x4, 0x93, 0x9, 0x93, 0x4, 0x94, 0x9, 0x94, 0x4, 0x95, 
       0x9, 0x95, 0x4, 0x96, 0x9, 0x96, 0x4, 0x97, 0x9, 0x97, 0x4, 0x98, 
       0x9, 0x98, 0x4, 0x99, 0x9, 0x99, 0x4, 0x9a, 0x9, 0x9a, 0x4, 0x9b, 
       0x9, 0x9b, 0x4, 0x9c, 0x9, 0x9c, 0x4, 0x9d, 0x9, 0x9d, 0x4, 0x9e, 
       0x9, 0x9e, 0x4, 0x9f, 0x9, 0x9f, 0x4, 0xa0, 0x9, 0xa0, 0x4, 0xa1, 
       0x9, 0xa1, 0x4, 0xa2, 0x9, 0xa2, 0x4, 0xa3, 0x9, 0xa3, 0x4, 0xa4, 
       0x9, 0xa4, 0x4, 0xa5, 0x9, 0xa5, 0x4, 0xa6, 0x9, 0xa6, 0x4, 0xa7, 
       0x9, 0xa7, 0x4, 0xa8, 0x9, 0xa8, 0x4, 0xa9, 0x9, 0xa9, 0x4, 0xaa, 
       0x9, 0xaa, 0x4, 0xab, 0x9, 0xab, 0x4, 0xac, 0x9, 0xac, 0x4, 0xad, 
       0x9, 0xad, 0x4, 0xae, 0x9, 0xae, 0x4, 0xaf, 0x9, 0xaf, 0x4, 0xb0, 
       0x9, 0xb0, 0x4, 0xb1, 0x9, 0xb1, 0x4, 0xb2, 0x9, 0xb2, 0x4, 0xb3, 
       0x9, 0xb3, 0x4, 0xb4, 0x9, 0xb4, 0x4, 0xb5, 0x9, 0xb5, 0x4, 0xb6, 
       0x9, 0xb6, 0x4, 0xb7, 0x9, 0xb7, 0x4, 0xb8, 0x9, 0xb8, 0x4, 0xb9, 
       0x9, 0xb9, 0x4, 0xba, 0x9, 0xba, 0x4, 0xbb, 0x9, 0xbb, 0x4, 0xbc, 
       0x9, 0xbc, 0x4, 0xbd, 0x9, 0xbd, 0x4, 0xbe, 0x9, 0xbe, 0x4, 0xbf, 
       0x9, 0xbf, 0x4, 0xc0, 0x9, 0xc0, 0x4, 0xc1, 0x9, 0xc1, 0x4, 0xc2, 
       0x9, 0xc2, 0x4, 0xc3, 0x9, 0xc3, 0x4, 0xc4, 0x9, 0xc4, 0x4, 0xc5, 
       0x9, 0xc5, 0x4, 0xc6, 0x9, 0xc6, 0x4, 0xc7, 0x9, 0xc7, 0x4, 0xc8, 
       0x9, 0xc8, 0x4, 0xc9, 0x9, 0xc9, 0x4, 0xca, 0x9, 0xca, 0x4, 0xcb, 
       0x9, 0xcb, 0x4, 0xcc, 0x9, 0xcc, 0x4, 0xcd, 0x9, 0xcd, 0x4, 0xce, 
       0x9, 0xce, 0x4, 0xcf, 0x9, 0xcf, 0x4, 0xd0, 0x9, 0xd0, 0x4, 0xd1, 
       0x9, 0xd1, 0x4, 0xd2, 0x9, 0xd2, 0x4, 0xd3, 0x9, 0xd3, 0x4, 0xd4, 
       0x9, 0xd4, 0x4, 0xd5, 0x9, 0xd5, 0x4, 0xd6, 0x9, 0xd6, 0x4, 0xd7, 
       0x9, 0xd7, 0x3, 0x2, 0x6, 0x2, 0x1b0, 0xa, 0x2, 0xd, 0x2, 0xe, 0x2, 
       0x1b1, 0x3, 0x2, 0x3, 0x2, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x4, 
       0x3, 0x4, 0x3, 0x4, 0x3, 0x4, 0x3, 0x4, 0x3, 0x4, 0x5, 0x4, 0x1bf, 
       0xa, 0x4, 0x3, 0x5, 0x5, 0x5, 0x1c2, 0xa, 0x5, 0x3, 0x5, 0x3, 0x5, 
       0x5, 0x5, 0x1c6, 0xa, 0x5, 0x3, 0x5, 0x5, 0x5, 0x1c9, 0xa, 0x5, 0x3, 
       0x5, 0x5, 0x5, 0x1cc, 0xa, 0x5, 0x3, 0x6, 0x3, 0x6, 0x3, 0x6, 0x3, 
       0x6, 0x3, 0x6, 0x3, 0x6, 0x3, 0x6, 0x3, 0x6, 0x3, 0x6, 0x3, 0x6, 
       0x3, 0x6, 0x3, 0x6, 0x3, 0x6, 0x3, 0x6, 0x5, 0x6, 0x1dc, 0xa, 0x6, 
       0x3, 0x7, 0x3, 0x7, 0x5, 0x7, 0x1e0, 0xa, 0x7, 0x3, 0x7, 0x5, 0x7, 
       0x1e3, 0xa, 0x7, 0x3, 0x7, 0x3, 0x7, 0x3, 0x7, 0x5, 0x7, 0x1e8, 0xa, 
       0x7, 0x3, 0x8, 0x3, 0x8, 0x5, 0x8, 0x1ec, 0xa, 0x8, 0x3, 0x8, 0x5, 
       0x8, 0x1ef, 0xa, 0x8, 0x3, 0x8, 0x3, 0x8, 0x3, 0x9, 0x3, 0x9, 0x3, 
       0x9, 0x3, 0x9, 0x5, 0x9, 0x1f7, 0xa, 0x9, 0x3, 0x9, 0x5, 0x9, 0x1fa, 
       0xa, 0x9, 0x3, 0x9, 0x3, 0x9, 0x5, 0x9, 0x1fe, 0xa, 0x9, 0x3, 0x9, 
       0x5, 0x9, 0x201, 0xa, 0x9, 0x3, 0x9, 0x3, 0x9, 0x5, 0x9, 0x205, 0xa, 
       0x9, 0x3, 0xa, 0x3, 0xa, 0x3, 0xa, 0x3, 0xa, 0x3, 0xa, 0x5, 0xa, 
       0x20c, 0xa, 0xa, 0x3, 0xb, 0x3, 0xb, 0x3, 0xb, 0x3, 0xb, 0x3, 0xb, 
       0x5, 0xb, 0x213, 0xa, 0xb, 0x3, 0xc, 0x3, 0xc, 0x3, 0xc, 0x3, 0xc, 
       0x3, 0xc, 0x5, 0xc, 0x21a, 0xa, 0xc, 0x3, 0xc, 0x3, 0xc, 0x5, 0xc, 
       0x21e, 0xa, 0xc, 0x3, 0xd, 0x3, 0xd, 0x3, 0xd, 0x3, 0xd, 0x3, 0xd, 
       0x3, 0xd, 0x3, 0xd, 0x5, 0xd, 0x227, 0xa, 0xd, 0x3, 0xd, 0x3, 0xd, 
       0x5, 0xd, 0x22b, 0xa, 0xd, 0x3, 0xe, 0x3, 0xe, 0x3, 0xe, 0x3, 0xe, 
       0x3, 0xe, 0x5, 0xe, 0x232, 0xa, 0xe, 0x3, 0xf, 0x3, 0xf, 0x5, 0xf, 
       0x236, 0xa, 0xf, 0x3, 0xf, 0x3, 0xf, 0x3, 0xf, 0x5, 0xf, 0x23b, 0xa, 
       0xf, 0x3, 0xf, 0x3, 0xf, 0x5, 0xf, 0x23f, 0xa, 0xf, 0x3, 0x10, 0x3, 
       0x10, 0x3, 0x10, 0x5, 0x10, 0x244, 0xa, 0x10, 0x3, 0x10, 0x3, 0x10, 
       0x5, 0x10, 0x248, 0xa, 0x10, 0x3, 0x10, 0x3, 0x10, 0x3, 0x10, 0x5, 
       0x10, 0x24d, 0xa, 0x10, 0x3, 0x10, 0x3, 0x10, 0x5, 0x10, 0x251, 0xa, 
       0x10, 0x3, 0x11, 0x3, 0x11, 0x3, 0x11, 0x5, 0x11, 0x256, 0xa, 0x11, 
       0x3, 0x11, 0x3, 0x11, 0x5, 0x11, 0x25a, 0xa, 0x11, 0x3, 0x11, 0x3, 
       0x11, 0x5, 0x11, 0x25e, 0xa, 0x11, 0x3, 0x12, 0x3, 0x12, 0x3, 0x12, 
       0x3, 0x13, 0x3, 0x13, 0x5, 0x13, 0x265, 0xa, 0x13, 0x3, 0x13, 0x3, 
       0x13, 0x3, 0x13, 0x3, 0x13, 0x3, 0x14, 0x3, 0x14, 0x5, 0x14, 0x26d, 
       0xa, 0x14, 0x3, 0x14, 0x3, 0x14, 0x5, 0x14, 0x271, 0xa, 0x14, 0x3, 
       0x14, 0x3, 0x14, 0x5, 0x14, 0x275, 0xa, 0x14, 0x3, 0x15, 0x3, 0x15, 
       0x5, 0x15, 0x279, 0xa, 0x15, 0x3, 0x15, 0x5, 0x15, 0x27c, 0xa, 0x15, 
       0x3, 0x15, 0x3, 0x15, 0x3, 0x15, 0x5, 0x15, 0x281, 0xa, 0x15, 0x3, 
       0x16, 0x3, 0x16, 0x3, 0x16, 0x3, 0x16, 0x3, 0x16, 0x5, 0x16, 0x288, 
       0xa, 0x16, 0x3, 0x16, 0x5, 0x16, 0x28b, 0xa, 0x16, 0x3, 0x16, 0x3, 
       0x16, 0x5, 0x16, 0x28f, 0xa, 0x16, 0x3, 0x16, 0x3, 0x16, 0x5, 0x16, 
       0x293, 0xa, 0x16, 0x3, 0x16, 0x5, 0x16, 0x296, 0xa, 0x16, 0x3, 0x16, 
       0x3, 0x16, 0x5, 0x16, 0x29a, 0xa, 0x16, 0x5, 0x16, 0x29c, 0xa, 0x16, 
       0x3, 0x17, 0x3, 0x17, 0x5, 0x17, 0x2a0, 0xa, 0x17, 0x3, 0x17, 0x5, 
       0x17, 0x2a3, 0xa, 0x17, 0x3, 0x17, 0x3, 0x17, 0x5, 0x17, 0x2a7, 0xa, 
       0x17, 0x3, 0x17, 0x5, 0x17, 0x2aa, 0xa, 0x17, 0x3, 0x17, 0x3, 0x17, 
       0x5, 0x17, 0x2ae, 0xa, 0x17, 0x3, 0x18, 0x3, 0x18, 0x5, 0x18, 0x2b2, 
       0xa, 0x18, 0x3, 0x18, 0x5, 0x18, 0x2b5, 0xa, 0x18, 0x3, 0x18, 0x3, 
       0x18, 0x3, 0x18, 0x5, 0x18, 0x2ba, 0xa, 0x18, 0x3, 0x18, 0x3, 0x18, 
       0x5, 0x18, 0x2be, 0xa, 0x18, 0x3, 0x19, 0x5, 0x19, 0x2c1, 0xa, 0x19, 
       0x3, 0x19, 0x3, 0x19, 0x5, 0x19, 0x2c5, 0xa, 0x19, 0x3, 0x19, 0x3, 
       0x19, 0x3, 0x19, 0x5, 0x19, 0x2ca, 0xa, 0x19, 0x3, 0x1a, 0x3, 0x1a, 
       0x3, 0x1a, 0x5, 0x1a, 0x2cf, 0xa, 0x1a, 0x3, 0x1b, 0x3, 0x1b, 0x3, 
       0x1c, 0x3, 0x1c, 0x5, 0x1c, 0x2d5, 0xa, 0x1c, 0x3, 0x1d, 0x3, 0x1d, 
       0x3, 0x1e, 0x3, 0x1e, 0x3, 0x1f, 0x3, 0x1f, 0x3, 0x20, 0x5, 0x20, 
       0x2de, 0xa, 0x20, 0x3, 0x20, 0x3, 0x20, 0x3, 0x20, 0x5, 0x20, 0x2e3, 
       0xa, 0x20, 0x3, 0x20, 0x5, 0x20, 0x2e6, 0xa, 0x20, 0x3, 0x20, 0x5, 
       0x20, 0x2e9, 0xa, 0x20, 0x3, 0x20, 0x5, 0x20, 0x2ec, 0xa, 0x20, 0x3, 
       0x20, 0x3, 0x20, 0x5, 0x20, 0x2f0, 0xa, 0x20, 0x3, 0x20, 0x5, 0x20, 
       0x2f3, 0xa, 0x20, 0x3, 0x20, 0x5, 0x20, 0x2f6, 0xa, 0x20, 0x3, 0x20, 
       0x5, 0x20, 0x2f9, 0xa, 0x20, 0x3, 0x20, 0x3, 0x20, 0x3, 0x20, 0x5, 
       0x20, 0x2fe, 0xa, 0x20, 0x3, 0x20, 0x5, 0x20, 0x301, 0xa, 0x20, 0x3, 
       0x20, 0x5, 0x20, 0x304, 0xa, 0x20, 0x3, 0x20, 0x5, 0x20, 0x307, 0xa, 
       0x20, 0x5, 0x20, 0x309, 0xa, 0x20, 0x3, 0x21, 0x3, 0x21, 0x3, 0x22, 
       0x3, 0x22, 0x3, 0x22, 0x3, 0x22, 0x5, 0x22, 0x311, 0xa, 0x22, 0x3, 
       0x22, 0x3, 0x22, 0x5, 0x22, 0x315, 0xa, 0x22, 0x3, 0x22, 0x3, 0x22, 
       0x3, 0x22, 0x5, 0x22, 0x31a, 0xa, 0x22, 0x5, 0x22, 0x31c, 0xa, 0x22, 
       0x3, 0x23, 0x3, 0x23, 0x3, 0x24, 0x3, 0x24, 0x3, 0x24, 0x7, 0x24, 
       0x323, 0xa, 0x24, 0xc, 0x24, 0xe, 0x24, 0x326, 0xb, 0x24, 0x3, 0x24, 
       0x3, 0x24, 0x3, 0x24, 0x7, 0x24, 0x32b, 0xa, 0x24, 0xc, 0x24, 0xe, 
       0x24, 0x32e, 0xb, 0x24, 0x5, 0x24, 0x330, 0xa, 0x24, 0x3, 0x25, 0x3, 
       0x25, 0x3, 0x25, 0x3, 0x25, 0x3, 0x26, 0x3, 0x26, 0x5, 0x26, 0x338, 
       0xa, 0x26, 0x3, 0x26, 0x3, 0x26, 0x3, 0x26, 0x3, 0x26, 0x5, 0x26, 
       0x33e, 0xa, 0x26, 0x3, 0x27, 0x3, 0x27, 0x3, 0x27, 0x5, 0x27, 0x343, 
       0xa, 0x27, 0x3, 0x27, 0x3, 0x27, 0x3, 0x28, 0x3, 0x28, 0x3, 0x28, 
       0x3, 0x29, 0x3, 0x29, 0x3, 0x2a, 0x3, 0x2a, 0x3, 0x2a, 0x5, 0x2a, 
       0x34f, 0xa, 0x2a, 0x3, 0x2a, 0x3, 0x2a, 0x5, 0x2a, 0x353, 0xa, 0x2a, 
       0x3, 0x2b, 0x3, 0x2b, 0x3, 0x2b, 0x5, 0x2b, 0x358, 0xa, 0x2b, 0x3, 
       0x2b, 0x3, 0x2b, 0x5, 0x2b, 0x35c, 0xa, 0x2b, 0x3, 0x2c, 0x3, 0x2c, 
       0x3, 0x2c, 0x7, 0x2c, 0x361, 0xa, 0x2c, 0xc, 0x2c, 0xe, 0x2c, 0x364, 
       0xb, 0x2c, 0x3, 0x2d, 0x3, 0x2d, 0x3, 0x2d, 0x3, 0x2d, 0x5, 0x2d, 
       0x36a, 0xa, 0x2d, 0x3, 0x2e, 0x3, 0x2e, 0x3, 0x2e, 0x3, 0x2e, 0x3, 
       0x2e, 0x3, 0x2e, 0x3, 0x2e, 0x3, 0x2e, 0x5, 0x2e, 0x374, 0xa, 0x2e, 
       0x3, 0x2f, 0x5, 0x2f, 0x377, 0xa, 0x2f, 0x3, 0x2f, 0x3, 0x2f, 0x3, 
       0x2f, 0x3, 0x2f, 0x5, 0x2f, 0x37d, 0xa, 0x2f, 0x3, 0x2f, 0x3, 0x2f, 
       0x5, 0x2f, 0x381, 0xa, 0x2f, 0x3, 0x2f, 0x5, 0x2f, 0x384, 0xa, 0x2f, 
       0x3, 0x2f, 0x3, 0x2f, 0x3, 0x2f, 0x3, 0x2f, 0x3, 0x2f, 0x5, 0x2f, 
       0x38b, 0xa, 0x2f, 0x5, 0x2f, 0x38d, 0xa, 0x2f, 0x3, 0x30, 0x3, 0x30, 
       0x3, 0x31, 0x3, 0x31, 0x3, 0x31, 0x3, 0x31, 0x3, 0x31, 0x3, 0x31, 
       0x5, 0x31, 0x397, 0xa, 0x31, 0x3, 0x31, 0x3, 0x31, 0x3, 0x31, 0x7, 
       0x31, 0x39c, 0xa, 0x31, 0xc, 0x31, 0xe, 0x31, 0x39f, 0xb, 0x31, 0x3, 
       0x32, 0x5, 0x32, 0x3a2, 0xa, 0x32, 0x3, 0x32, 0x3, 0x32, 0x5, 0x32, 
       0x3a6, 0xa, 0x32, 0x3, 0x32, 0x3, 0x32, 0x3, 0x32, 0x5, 0x32, 0x3ab, 
       0xa, 0x32, 0x3, 0x33, 0x3, 0x33, 0x3, 0x33, 0x5, 0x33, 0x3b0, 0xa, 
       0x33, 0x3, 0x33, 0x5, 0x33, 0x3b3, 0xa, 0x33, 0x3, 0x34, 0x3, 0x34, 
       0x3, 0x34, 0x7, 0x34, 0x3b8, 0xa, 0x34, 0xc, 0x34, 0xe, 0x34, 0x3bb, 
       0xb, 0x34, 0x3, 0x35, 0x3, 0x35, 0x3, 0x35, 0x7, 0x35, 0x3c0, 0xa, 
       0x35, 0xc, 0x35, 0xe, 0x35, 0x3c3, 0xb, 0x35, 0x3, 0x36, 0x3, 0x36, 
       0x5, 0x36, 0x3c7, 0xa, 0x36, 0x3, 0x37, 0x3, 0x37, 0x3, 0x38, 0x3, 
       0x38, 0x3, 0x38, 0x7, 0x38, 0x3ce, 0xa, 0x38, 0xc, 0x38, 0xe, 0x38, 
       0x3d1, 0xb, 0x38, 0x3, 0x39, 0x3, 0x39, 0x3, 0x39, 0x7, 0x39, 0x3d6, 
       0xa, 0x39, 0xc, 0x39, 0xe, 0x39, 0x3d9, 0xb, 0x39, 0x3, 0x39, 0x7, 
       0x39, 0x3dc, 0xa, 0x39, 0xc, 0x39, 0xe, 0x39, 0x3df, 0xb, 0x39, 0x3, 
       0x3a, 0x3, 0x3a, 0x5, 0x3a, 0x3e3, 0xa, 0x3a, 0x3, 0x3b, 0x3, 0x3b, 
       0x3, 0x3b, 0x3, 0x3b, 0x7, 0x3b, 0x3e9, 0xa, 0x3b, 0xc, 0x3b, 0xe, 
       0x3b, 0x3ec, 0xb, 0x3b, 0x3, 0x3b, 0x3, 0x3b, 0x5, 0x3b, 0x3f0, 0xa, 
       0x3b, 0x3, 0x3c, 0x3, 0x3c, 0x3, 0x3c, 0x7, 0x3c, 0x3f5, 0xa, 0x3c, 
       0xc, 0x3c, 0xe, 0x3c, 0x3f8, 0xb, 0x3c, 0x3, 0x3d, 0x3, 0x3d, 0x3, 
       0x3d, 0x3, 0x3d, 0x3, 0x3e, 0x3, 0x3e, 0x3, 0x3f, 0x3, 0x3f, 0x3, 
       0x3f, 0x3, 0x3f, 0x3, 0x3f, 0x3, 0x3f, 0x3, 0x3f, 0x3, 0x3f, 0x3, 
       0x3f, 0x5, 0x3f, 0x409, 0xa, 0x3f, 0x3, 0x40, 0x3, 0x40, 0x3, 0x40, 
       0x3, 0x40, 0x3, 0x41, 0x3, 0x41, 0x3, 0x42, 0x3, 0x42, 0x3, 0x42, 
       0x5, 0x42, 0x414, 0xa, 0x42, 0x3, 0x42, 0x3, 0x42, 0x3, 0x42, 0x3, 
       0x42, 0x3, 0x42, 0x3, 0x42, 0x3, 0x42, 0x5, 0x42, 0x41d, 0xa, 0x42, 
       0x3, 0x42, 0x3, 0x42, 0x3, 0x42, 0x3, 0x42, 0x5, 0x42, 0x423, 0xa, 
       0x42, 0x3, 0x43, 0x3, 0x43, 0x3, 0x43, 0x7, 0x43, 0x428, 0xa, 0x43, 
       0xc, 0x43, 0xe, 0x43, 0x42b, 0xb, 0x43, 0x3, 0x44, 0x3, 0x44, 0x3, 
       0x44, 0x3, 0x44, 0x3, 0x45, 0x3, 0x45, 0x5, 0x45, 0x433, 0xa, 0x45, 
       0x3, 0x46, 0x3, 0x46, 0x3, 0x46, 0x3, 0x46, 0x7, 0x46, 0x439, 0xa, 
       0x46, 0xc, 0x46, 0xe, 0x46, 0x43c, 0xb, 0x46, 0x3, 0x46, 0x5, 0x46, 
       0x43f, 0xa, 0x46, 0x3, 0x46, 0x3, 0x46, 0x3, 0x46, 0x3, 0x46, 0x5, 
       0x46, 0x445, 0xa, 0x46, 0x3, 0x47, 0x3, 0x47, 0x3, 0x47, 0x3, 0x47, 
       0x3, 0x47, 0x3, 0x47, 0x5, 0x47, 0x44d, 0xa, 0x47, 0x3, 0x48, 0x3, 
       0x48, 0x3, 0x49, 0x3, 0x49, 0x3, 0x4a, 0x3, 0x4a, 0x3, 0x4b, 0x3, 
       0x4b, 0x3, 0x4c, 0x3, 0x4c, 0x3, 0x4d, 0x3, 0x4d, 0x7, 0x4d, 0x45b, 
       0xa, 0x4d, 0xc, 0x4d, 0xe, 0x4d, 0x45e, 0xb, 0x4d, 0x3, 0x4d, 0x3, 
       0x4d, 0x3, 0x4e, 0x3, 0x4e, 0x3, 0x4e, 0x3, 0x4f, 0x3, 0x4f, 0x3, 
       0x4f, 0x3, 0x50, 0x3, 0x50, 0x3, 0x50, 0x3, 0x51, 0x3, 0x51, 0x3, 
       0x51, 0x3, 0x52, 0x3, 0x52, 0x3, 0x52, 0x3, 0x53, 0x3, 0x53, 0x3, 
       0x53, 0x3, 0x54, 0x3, 0x54, 0x5, 0x54, 0x476, 0xa, 0x54, 0x3, 0x54, 
       0x3, 0x54, 0x3, 0x54, 0x5, 0x54, 0x47b, 0xa, 0x54, 0x3, 0x54, 0x3, 
       0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x5, 0x54, 0x483, 
       0xa, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 
       0x3, 0x54, 0x7, 0x54, 0x48b, 0xa, 0x54, 0xc, 0x54, 0xe, 0x54, 0x48e, 
       0xb, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 
       0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 
       0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 
       0x5, 0x54, 0x4a1, 0xa, 0x54, 0x3, 0x54, 0x3, 0x54, 0x5, 0x54, 0x4a5, 
       0xa, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x5, 0x54, 
       0x4ab, 0xa, 0x54, 0x3, 0x54, 0x5, 0x54, 0x4ae, 0xa, 0x54, 0x3, 0x54, 
       0x5, 0x54, 0x4b1, 0xa, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 
       0x54, 0x3, 0x54, 0x5, 0x54, 0x4b8, 0xa, 0x54, 0x3, 0x54, 0x3, 0x54, 
       0x3, 0x54, 0x5, 0x54, 0x4bd, 0xa, 0x54, 0x3, 0x54, 0x5, 0x54, 0x4c0, 
       0xa, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 
       0x5, 0x54, 0x4c7, 0xa, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 
       0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 
       0x54, 0x5, 0x54, 0x4d3, 0xa, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 
       0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x7, 0x54, 0x4dc, 0xa, 
       0x54, 0xc, 0x54, 0xe, 0x54, 0x4df, 0xb, 0x54, 0x3, 0x54, 0x5, 0x54, 
       0x4e2, 0xa, 0x54, 0x3, 0x54, 0x5, 0x54, 0x4e5, 0xa, 0x54, 0x3, 0x54, 
       0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x5, 0x54, 0x4ec, 0xa, 
       0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 
       0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x7, 0x54, 0x4f7, 0xa, 0x54, 
       0xc, 0x54, 0xe, 0x54, 0x4fa, 0xb, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 
       0x54, 0x3, 0x54, 0x3, 0x54, 0x5, 0x54, 0x501, 0xa, 0x54, 0x3, 0x54, 
       0x3, 0x54, 0x3, 0x54, 0x5, 0x54, 0x506, 0xa, 0x54, 0x3, 0x54, 0x5, 
       0x54, 0x509, 0xa, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 
       0x5, 0x54, 0x50f, 0xa, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 
       0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x5, 
       0x54, 0x51a, 0xa, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 
       0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 
       0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 
       0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 
       0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 
       0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 
       0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 
       0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 
       0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 
       0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 
       0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x5, 0x54, 0x55a, 0xa, 
       0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 
       0x54, 0x3, 0x54, 0x5, 0x54, 0x563, 0xa, 0x54, 0x3, 0x54, 0x3, 0x54, 
       0x5, 0x54, 0x567, 0xa, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 
       0x54, 0x5, 0x54, 0x56d, 0xa, 0x54, 0x3, 0x54, 0x3, 0x54, 0x5, 0x54, 
       0x571, 0xa, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x5, 0x54, 0x576, 
       0xa, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x5, 0x54, 
       0x57c, 0xa, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 
       0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x5, 
       0x54, 0x588, 0xa, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 
       0x3, 0x54, 0x3, 0x54, 0x5, 0x54, 0x590, 0xa, 0x54, 0x3, 0x54, 0x3, 
       0x54, 0x3, 0x54, 0x3, 0x54, 0x5, 0x54, 0x596, 0xa, 0x54, 0x3, 0x54, 
       0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 
       0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x5, 0x54, 0x5a3, 0xa, 
       0x54, 0x3, 0x54, 0x6, 0x54, 0x5a6, 0xa, 0x54, 0xd, 0x54, 0xe, 0x54, 
       0x5a7, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 
       0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 
       0x54, 0x3, 0x54, 0x3, 0x54, 0x5, 0x54, 0x5b8, 0xa, 0x54, 0x3, 0x54, 
       0x3, 0x54, 0x3, 0x54, 0x7, 0x54, 0x5bd, 0xa, 0x54, 0xc, 0x54, 0xe, 
       0x54, 0x5c0, 0xb, 0x54, 0x3, 0x54, 0x5, 0x54, 0x5c3, 0xa, 0x54, 0x3, 
       0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x5, 0x54, 0x5c9, 0xa, 0x54, 
       0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 
       0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 
       0x3, 0x54, 0x5, 0x54, 0x5d8, 0xa, 0x54, 0x3, 0x54, 0x3, 0x54, 0x5, 
       0x54, 0x5dc, 0xa, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 
       0x5, 0x54, 0x5e2, 0xa, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 
       0x54, 0x5, 0x54, 0x5e8, 0xa, 0x54, 0x3, 0x54, 0x5, 0x54, 0x5eb, 0xa, 
       0x54, 0x3, 0x54, 0x5, 0x54, 0x5ee, 0xa, 0x54, 0x3, 0x54, 0x3, 0x54, 
       0x3, 0x54, 0x3, 0x54, 0x5, 0x54, 0x5f4, 0xa, 0x54, 0x3, 0x54, 0x3, 
       0x54, 0x5, 0x54, 0x5f8, 0xa, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 
       0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x7, 0x54, 0x600, 0xa, 0x54, 0xc, 
       0x54, 0xe, 0x54, 0x603, 0xb, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 
       0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x5, 0x54, 0x60b, 0xa, 0x54, 0x3, 
       0x54, 0x5, 0x54, 0x60e, 0xa, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 
       0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x5, 0x54, 0x617, 0xa, 
       0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x5, 0x54, 0x61c, 0xa, 0x54, 
       0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x5, 0x54, 0x622, 0xa, 
       0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x5, 
       0x54, 0x629, 0xa, 0x54, 0x3, 0x54, 0x5, 0x54, 0x62c, 0xa, 0x54, 0x3, 
       0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x5, 0x54, 0x632, 0xa, 0x54, 
       0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 
       0x3, 0x54, 0x7, 0x54, 0x63b, 0xa, 0x54, 0xc, 0x54, 0xe, 0x54, 0x63e, 
       0xb, 0x54, 0x5, 0x54, 0x640, 0xa, 0x54, 0x3, 0x54, 0x3, 0x54, 0x5, 
       0x54, 0x644, 0xa, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x5, 0x54, 
       0x649, 0xa, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x5, 0x54, 0x64e, 
       0xa, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 
       0x5, 0x54, 0x655, 0xa, 0x54, 0x3, 0x54, 0x5, 0x54, 0x658, 0xa, 0x54, 
       0x3, 0x54, 0x5, 0x54, 0x65b, 0xa, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 
       0x54, 0x3, 0x54, 0x3, 0x54, 0x5, 0x54, 0x662, 0xa, 0x54, 0x3, 0x54, 
       0x3, 0x54, 0x3, 0x54, 0x5, 0x54, 0x667, 0xa, 0x54, 0x3, 0x54, 0x3, 
       0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x5, 
       0x54, 0x670, 0xa, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 
       0x3, 0x54, 0x3, 0x54, 0x5, 0x54, 0x678, 0xa, 0x54, 0x3, 0x54, 0x3, 
       0x54, 0x3, 0x54, 0x3, 0x54, 0x5, 0x54, 0x67e, 0xa, 0x54, 0x3, 0x54, 
       0x5, 0x54, 0x681, 0xa, 0x54, 0x3, 0x54, 0x5, 0x54, 0x684, 0xa, 0x54, 
       0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x5, 0x54, 0x68a, 0xa, 
       0x54, 0x3, 0x54, 0x3, 0x54, 0x5, 0x54, 0x68e, 0xa, 0x54, 0x3, 0x54, 
       0x3, 0x54, 0x5, 0x54, 0x692, 0xa, 0x54, 0x3, 0x54, 0x3, 0x54, 0x5, 
       0x54, 0x696, 0xa, 0x54, 0x5, 0x54, 0x698, 0xa, 0x54, 0x3, 0x54, 0x3, 
       0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x5, 0x54, 0x6a0, 
       0xa, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 
       0x3, 0x54, 0x5, 0x54, 0x6a8, 0xa, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 
       0x54, 0x3, 0x54, 0x5, 0x54, 0x6ae, 0xa, 0x54, 0x3, 0x54, 0x3, 0x54, 
       0x3, 0x54, 0x3, 0x54, 0x5, 0x54, 0x6b4, 0xa, 0x54, 0x3, 0x54, 0x5, 
       0x54, 0x6b7, 0xa, 0x54, 0x3, 0x54, 0x3, 0x54, 0x5, 0x54, 0x6bb, 0xa, 
       0x54, 0x3, 0x54, 0x5, 0x54, 0x6be, 0xa, 0x54, 0x3, 0x54, 0x3, 0x54, 
       0x5, 0x54, 0x6c2, 0xa, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 
       0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 
       0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 
       0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x7, 
       0x54, 0x6d9, 0xa, 0x54, 0xc, 0x54, 0xe, 0x54, 0x6dc, 0xb, 0x54, 0x5, 
       0x54, 0x6de, 0xa, 0x54, 0x3, 0x54, 0x3, 0x54, 0x5, 0x54, 0x6e2, 0xa, 
       0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x5, 0x54, 0x6e8, 
       0xa, 0x54, 0x3, 0x54, 0x5, 0x54, 0x6eb, 0xa, 0x54, 0x3, 0x54, 0x5, 
       0x54, 0x6ee, 0xa, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 
       0x5, 0x54, 0x6f4, 0xa, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 
       0x54, 0x3, 0x54, 0x3, 0x54, 0x5, 0x54, 0x6fc, 0xa, 0x54, 0x3, 0x54, 
       0x3, 0x54, 0x3, 0x54, 0x5, 0x54, 0x701, 0xa, 0x54, 0x3, 0x54, 0x3, 
       0x54, 0x3, 0x54, 0x3, 0x54, 0x5, 0x54, 0x707, 0xa, 0x54, 0x3, 0x54, 
       0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x5, 0x54, 0x70d, 0xa, 0x54, 0x3, 
       0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 
       0x54, 0x3, 0x54, 0x7, 0x54, 0x717, 0xa, 0x54, 0xc, 0x54, 0xe, 0x54, 
       0x71a, 0xb, 0x54, 0x5, 0x54, 0x71c, 0xa, 0x54, 0x3, 0x54, 0x3, 0x54, 
       0x3, 0x54, 0x7, 0x54, 0x721, 0xa, 0x54, 0xc, 0x54, 0xe, 0x54, 0x724, 
       0xb, 0x54, 0x3, 0x54, 0x3, 0x54, 0x7, 0x54, 0x728, 0xa, 0x54, 0xc, 
       0x54, 0xe, 0x54, 0x72b, 0xb, 0x54, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 
       0x7, 0x54, 0x730, 0xa, 0x54, 0xc, 0x54, 0xe, 0x54, 0x733, 0xb, 0x54, 
       0x5, 0x54, 0x735, 0xa, 0x54, 0x3, 0x55, 0x3, 0x55, 0x3, 0x55, 0x3, 
       0x55, 0x3, 0x55, 0x3, 0x55, 0x5, 0x55, 0x73d, 0xa, 0x55, 0x3, 0x55, 
       0x3, 0x55, 0x5, 0x55, 0x741, 0xa, 0x55, 0x3, 0x55, 0x3, 0x55, 0x3, 
       0x55, 0x3, 0x55, 0x3, 0x55, 0x5, 0x55, 0x748, 0xa, 0x55, 0x3, 0x55, 
       0x3, 0x55, 0x3, 0x55, 0x3, 0x55, 0x3, 0x55, 0x3, 0x55, 0x3, 0x55, 
       0x3, 0x55, 0x3, 0x55, 0x3, 0x55, 0x3, 0x55, 0x3, 0x55, 0x3, 0x55, 
       0x3, 0x55, 0x3, 0x55, 0x3, 0x55, 0x3, 0x55, 0x3, 0x55, 0x3, 0x55, 
       0x3, 0x55, 0x3, 0x55, 0x3, 0x55, 0x3, 0x55, 0x3, 0x55, 0x3, 0x55, 
       0x3, 0x55, 0x3, 0x55, 0x3, 0x55, 0x3, 0x55, 0x3, 0x55, 0x3, 0x55, 
       0x3, 0x55, 0x3, 0x55, 0x3, 0x55, 0x3, 0x55, 0x3, 0x55, 0x3, 0x55, 
       0x3, 0x55, 0x3, 0x55, 0x3, 0x55, 0x3, 0x55, 0x3, 0x55, 0x3, 0x55, 
       0x3, 0x55, 0x3, 0x55, 0x3, 0x55, 0x3, 0x55, 0x3, 0x55, 0x3, 0x55, 
       0x3, 0x55, 0x3, 0x55, 0x3, 0x55, 0x3, 0x55, 0x3, 0x55, 0x3, 0x55, 
       0x3, 0x55, 0x3, 0x55, 0x3, 0x55, 0x3, 0x55, 0x3, 0x55, 0x3, 0x55, 
       0x3, 0x55, 0x3, 0x55, 0x3, 0x55, 0x3, 0x55, 0x3, 0x55, 0x3, 0x55, 
       0x3, 0x55, 0x3, 0x55, 0x3, 0x55, 0x3, 0x55, 0x3, 0x55, 0x3, 0x55, 
       0x3, 0x55, 0x3, 0x55, 0x3, 0x55, 0x3, 0x55, 0x3, 0x55, 0x3, 0x55, 
       0x3, 0x55, 0x3, 0x55, 0x3, 0x55, 0x3, 0x55, 0x3, 0x55, 0x3, 0x55, 
       0x3, 0x55, 0x3, 0x55, 0x3, 0x55, 0x3, 0x55, 0x3, 0x55, 0x3, 0x55, 
       0x3, 0x55, 0x3, 0x55, 0x3, 0x55, 0x3, 0x55, 0x3, 0x55, 0x3, 0x55, 
       0x3, 0x55, 0x3, 0x55, 0x3, 0x55, 0x3, 0x55, 0x3, 0x55, 0x3, 0x55, 
       0x3, 0x55, 0x3, 0x55, 0x3, 0x55, 0x3, 0x55, 0x3, 0x55, 0x3, 0x55, 
       0x3, 0x55, 0x3, 0x55, 0x3, 0x55, 0x3, 0x55, 0x3, 0x55, 0x5, 0x55, 
       0x7bc, 0xa, 0x55, 0x3, 0x55, 0x3, 0x55, 0x3, 0x55, 0x3, 0x55, 0x3, 
       0x55, 0x3, 0x55, 0x5, 0x55, 0x7c4, 0xa, 0x55, 0x3, 0x55, 0x3, 0x55, 
       0x3, 0x55, 0x3, 0x55, 0x3, 0x55, 0x3, 0x55, 0x5, 0x55, 0x7cc, 0xa, 
       0x55, 0x3, 0x55, 0x3, 0x55, 0x3, 0x55, 0x3, 0x55, 0x3, 0x55, 0x3, 
       0x55, 0x3, 0x55, 0x5, 0x55, 0x7d5, 0xa, 0x55, 0x3, 0x55, 0x3, 0x55, 
       0x3, 0x55, 0x3, 0x55, 0x3, 0x55, 0x3, 0x55, 0x3, 0x55, 0x3, 0x55, 
       0x5, 0x55, 0x7df, 0xa, 0x55, 0x3, 0x56, 0x3, 0x56, 0x5, 0x56, 0x7e3, 
       0xa, 0x56, 0x3, 0x56, 0x5, 0x56, 0x7e6, 0xa, 0x56, 0x3, 0x56, 0x3, 
       0x56, 0x3, 0x56, 0x3, 0x56, 0x5, 0x56, 0x7ec, 0xa, 0x56, 0x3, 0x56, 
       0x3, 0x56, 0x3, 0x57, 0x3, 0x57, 0x5, 0x57, 0x7f2, 0xa, 0x57, 0x3, 
       0x57, 0x3, 0x57, 0x3, 0x57, 0x3, 0x57, 0x3, 0x58, 0x3, 0x58, 0x3, 
       0x58, 0x3, 0x58, 0x3, 0x58, 0x3, 0x58, 0x5, 0x58, 0x7fe, 0xa, 0x58, 
       0x3, 0x58, 0x3, 0x58, 0x3, 0x58, 0x3, 0x58, 0x3, 0x59, 0x3, 0x59, 
       0x3, 0x59, 0x3, 0x59, 0x3, 0x59, 0x3, 0x59, 0x5, 0x59, 0x80a, 0xa, 
       0x59, 0x3, 0x59, 0x3, 0x59, 0x3, 0x59, 0x5, 0x59, 0x80f, 0xa, 0x59, 
       0x3, 0x5a, 0x3, 0x5a, 0x3, 0x5a, 0x3, 0x5b, 0x3, 0x5b, 0x3, 0x5b, 
       0x3, 0x5c, 0x5, 0x5c, 0x818, 0xa, 0x5c, 0x3, 0x5c, 0x5, 0x5c, 0x81b, 
       0xa, 0x5c, 0x3, 0x5c, 0x3, 0x5c, 0x3, 0x5c, 0x3, 0x5d, 0x3, 0x5d, 
       0x3, 0x5d, 0x5, 0x5d, 0x823, 0xa, 0x5d, 0x3, 0x5d, 0x3, 0x5d, 0x3, 
       0x5d, 0x3, 0x5d, 0x3, 0x5d, 0x5, 0x5d, 0x82a, 0xa, 0x5d, 0x5, 0x5d, 
       0x82c, 0xa, 0x5d, 0x3, 0x5d, 0x3, 0x5d, 0x3, 0x5d, 0x5, 0x5d, 0x831, 
       0xa, 0x5d, 0x3, 0x5d, 0x3, 0x5d, 0x5, 0x5d, 0x835, 0xa, 0x5d, 0x3, 
       0x5d, 0x3, 0x5d, 0x3, 0x5d, 0x5, 0x5d, 0x83a, 0xa, 0x5d, 0x3, 0x5d, 
       0x3, 0x5d, 0x3, 0x5d, 0x5, 0x5d, 0x83f, 0xa, 0x5d, 0x3, 0x5d, 0x3, 
       0x5d, 0x3, 0x5d, 0x5, 0x5d, 0x844, 0xa, 0x5d, 0x3, 0x5d, 0x5, 0x5d, 
       0x847, 0xa, 0x5d, 0x3, 0x5d, 0x3, 0x5d, 0x3, 0x5d, 0x5, 0x5d, 0x84c, 
       0xa, 0x5d, 0x3, 0x5d, 0x3, 0x5d, 0x5, 0x5d, 0x850, 0xa, 0x5d, 0x3, 
       0x5d, 0x3, 0x5d, 0x3, 0x5d, 0x5, 0x5d, 0x855, 0xa, 0x5d, 0x5, 0x5d, 
       0x857, 0xa, 0x5d, 0x3, 0x5e, 0x3, 0x5e, 0x5, 0x5e, 0x85b, 0xa, 0x5e, 
       0x3, 0x5f, 0x3, 0x5f, 0x3, 0x5f, 0x3, 0x5f, 0x3, 0x5f, 0x7, 0x5f, 
       0x862, 0xa, 0x5f, 0xc, 0x5f, 0xe, 0x5f, 0x865, 0xb, 0x5f, 0x3, 0x5f, 
       0x3, 0x5f, 0x3, 0x60, 0x3, 0x60, 0x3, 0x60, 0x5, 0x60, 0x86c, 0xa, 
       0x60, 0x3, 0x61, 0x3, 0x61, 0x3, 0x62, 0x3, 0x62, 0x3, 0x62, 0x3, 
       0x62, 0x3, 0x62, 0x5, 0x62, 0x875, 0xa, 0x62, 0x3, 0x63, 0x3, 0x63, 
       0x3, 0x63, 0x7, 0x63, 0x87a, 0xa, 0x63, 0xc, 0x63, 0xe, 0x63, 0x87d, 
       0xb, 0x63, 0x3, 0x64, 0x3, 0x64, 0x3, 0x64, 0x3, 0x64, 0x7, 0x64, 
       0x883, 0xa, 0x64, 0xc, 0x64, 0xe, 0x64, 0x886, 0xb, 0x64, 0x3, 0x65, 
       0x3, 0x65, 0x5, 0x65, 0x88a, 0xa, 0x65, 0x3, 0x65, 0x5, 0x65, 0x88d, 
       0xa, 0x65, 0x3, 0x65, 0x3, 0x65, 0x3, 0x65, 0x3, 0x65, 0x3, 0x66, 
       0x3, 0x66, 0x3, 0x66, 0x3, 0x67, 0x3, 0x67, 0x3, 0x67, 0x3, 0x67, 
       0x3, 0x67, 0x3, 0x67, 0x3, 0x67, 0x3, 0x67, 0x3, 0x67, 0x3, 0x67, 
       0x7, 0x67, 0x8a0, 0xa, 0x67, 0xc, 0x67, 0xe, 0x67, 0x8a3, 0xb, 0x67, 
       0x3, 0x68, 0x3, 0x68, 0x3, 0x68, 0x3, 0x68, 0x7, 0x68, 0x8a9, 0xa, 
       0x68, 0xc, 0x68, 0xe, 0x68, 0x8ac, 0xb, 0x68, 0x3, 0x68, 0x3, 0x68, 
       0x3, 0x69, 0x3, 0x69, 0x5, 0x69, 0x8b2, 0xa, 0x69, 0x3, 0x69, 0x5, 
       0x69, 0x8b5, 0xa, 0x69, 0x3, 0x6a, 0x3, 0x6a, 0x3, 0x6a, 0x7, 0x6a, 
       0x8ba, 0xa, 0x6a, 0xc, 0x6a, 0xe, 0x6a, 0x8bd, 0xb, 0x6a, 0x3, 0x6a, 
       0x5, 0x6a, 0x8c0, 0xa, 0x6a, 0x3, 0x6b, 0x3, 0x6b, 0x3, 0x6b, 0x3, 
       0x6b, 0x5, 0x6b, 0x8c6, 0xa, 0x6b, 0x3, 0x6c, 0x3, 0x6c, 0x3, 0x6c, 
       0x3, 0x6c, 0x7, 0x6c, 0x8cc, 0xa, 0x6c, 0xc, 0x6c, 0xe, 0x6c, 0x8cf, 
       0xb, 0x6c, 0x3, 0x6c, 0x3, 0x6c, 0x3, 0x6d, 0x3, 0x6d, 0x3, 0x6d, 
       0x3, 0x6d, 0x7, 0x6d, 0x8d7, 0xa, 0x6d, 0xc, 0x6d, 0xe, 0x6d, 0x8da, 
       0xb, 0x6d, 0x3, 0x6d, 0x3, 0x6d, 0x3, 0x6e, 0x3, 0x6e, 0x3, 0x6e, 
       0x3, 0x6e, 0x3, 0x6e, 0x3, 0x6e, 0x5, 0x6e, 0x8e4, 0xa, 0x6e, 0x3, 
       0x6f, 0x3, 0x6f, 0x3, 0x6f, 0x3, 0x6f, 0x3, 0x6f, 0x5, 0x6f, 0x8eb, 
       0xa, 0x6f, 0x3, 0x70, 0x3, 0x70, 0x3, 0x70, 0x3, 0x70, 0x5, 0x70, 
       0x8f1, 0xa, 0x70, 0x3, 0x71, 0x3, 0x71, 0x3, 0x71, 0x3, 0x72, 0x3, 
       0x72, 0x3, 0x72, 0x3, 0x72, 0x3, 0x72, 0x3, 0x72, 0x6, 0x72, 0x8fc, 
       0xa, 0x72, 0xd, 0x72, 0xe, 0x72, 0x8fd, 0x3, 0x72, 0x3, 0x72, 0x3, 
       0x72, 0x3, 0x72, 0x3, 0x72, 0x5, 0x72, 0x905, 0xa, 0x72, 0x3, 0x72, 
       0x3, 0x72, 0x3, 0x72, 0x3, 0x72, 0x3, 0x72, 0x5, 0x72, 0x90c, 0xa, 
       0x72, 0x3, 0x72, 0x3, 0x72, 0x3, 0x72, 0x3, 0x72, 0x3, 0x72, 0x3, 
       0x72, 0x3, 0x72, 0x3, 0x72, 0x3, 0x72, 0x3, 0x72, 0x5, 0x72, 0x918, 
       0xa, 0x72, 0x3, 0x72, 0x3, 0x72, 0x3, 0x72, 0x3, 0x72, 0x7, 0x72, 
       0x91e, 0xa, 0x72, 0xc, 0x72, 0xe, 0x72, 0x921, 0xb, 0x72, 0x3, 0x72, 
       0x7, 0x72, 0x924, 0xa, 0x72, 0xc, 0x72, 0xe, 0x72, 0x927, 0xb, 0x72, 
       0x5, 0x72, 0x929, 0xa, 0x72, 0x3, 0x73, 0x3, 0x73, 0x3, 0x73, 0x3, 
       0x73, 0x3, 0x73, 0x7, 0x73, 0x930, 0xa, 0x73, 0xc, 0x73, 0xe, 0x73, 
       0x933, 0xb, 0x73, 0x5, 0x73, 0x935, 0xa, 0x73, 0x3, 0x73, 0x3, 0x73, 
       0x3, 0x73, 0x3, 0x73, 0x3, 0x73, 0x7, 0x73, 0x93c, 0xa, 0x73, 0xc, 
       0x73, 0xe, 0x73, 0x93f, 0xb, 0x73, 0x5, 0x73, 0x941, 0xa, 0x73, 0x3, 
       0x73, 0x3, 0x73, 0x3, 0x73, 0x3, 0x73, 0x3, 0x73, 0x7, 0x73, 0x948, 
       0xa, 0x73, 0xc, 0x73, 0xe, 0x73, 0x94b, 0xb, 0x73, 0x5, 0x73, 0x94d, 
       0xa, 0x73, 0x3, 0x73, 0x3, 0x73, 0x3, 0x73, 0x3, 0x73, 0x3, 0x73, 
       0x7, 0x73, 0x954, 0xa, 0x73, 0xc, 0x73, 0xe, 0x73, 0x957, 0xb, 0x73, 
       0x5, 0x73, 0x959, 0xa, 0x73, 0x3, 0x73, 0x5, 0x73, 0x95c, 0xa, 0x73, 
       0x3, 0x73, 0x3, 0x73, 0x3, 0x73, 0x5, 0x73, 0x961, 0xa, 0x73, 0x5, 
       0x73, 0x963, 0xa, 0x73, 0x3, 0x74, 0x3, 0x74, 0x3, 0x74, 0x3, 0x75, 
       0x3, 0x75, 0x3, 0x75, 0x5, 0x75, 0x96b, 0xa, 0x75, 0x3, 0x75, 0x3, 
       0x75, 0x3, 0x75, 0x5, 0x75, 0x970, 0xa, 0x75, 0x3, 0x75, 0x3, 0x75, 
       0x3, 0x75, 0x3, 0x75, 0x5, 0x75, 0x976, 0xa, 0x75, 0x3, 0x75, 0x3, 
       0x75, 0x3, 0x75, 0x3, 0x75, 0x5, 0x75, 0x97c, 0xa, 0x75, 0x3, 0x75, 
       0x7, 0x75, 0x97f, 0xa, 0x75, 0xc, 0x75, 0xe, 0x75, 0x982, 0xb, 0x75, 
       0x3, 0x76, 0x3, 0x76, 0x3, 0x76, 0x3, 0x76, 0x3, 0x76, 0x5, 0x76, 
       0x989, 0xa, 0x76, 0x3, 0x77, 0x3, 0x77, 0x5, 0x77, 0x98d, 0xa, 0x77, 
       0x3, 0x77, 0x3, 0x77, 0x5, 0x77, 0x991, 0xa, 0x77, 0x3, 0x78, 0x3, 
       0x78, 0x6, 0x78, 0x995, 0xa, 0x78, 0xd, 0x78, 0xe, 0x78, 0x996, 0x3, 
       0x79, 0x3, 0x79, 0x5, 0x79, 0x99b, 0xa, 0x79, 0x3, 0x79, 0x3, 0x79, 
       0x3, 0x79, 0x3, 0x79, 0x7, 0x79, 0x9a1, 0xa, 0x79, 0xc, 0x79, 0xe, 
       0x79, 0x9a4, 0xb, 0x79, 0x3, 0x79, 0x5, 0x79, 0x9a7, 0xa, 0x79, 0x3, 
       0x79, 0x5, 0x79, 0x9aa, 0xa, 0x79, 0x3, 0x79, 0x5, 0x79, 0x9ad, 0xa, 
       0x79, 0x3, 0x79, 0x5, 0x79, 0x9b0, 0xa, 0x79, 0x3, 0x79, 0x3, 0x79, 
       0x5, 0x79, 0x9b4, 0xa, 0x79, 0x3, 0x7a, 0x3, 0x7a, 0x3, 0x7a, 0x5, 
       0x7a, 0x9b9, 0xa, 0x7a, 0x3, 0x7a, 0x3, 0x7a, 0x3, 0x7a, 0x7, 0x7a, 
       0x9be, 0xa, 0x7a, 0xc, 0x7a, 0xe, 0x7a, 0x9c1, 0xb, 0x7a, 0x3, 0x7a, 
       0x5, 0x7a, 0x9c4, 0xa, 0x7a, 0x3, 0x7a, 0x5, 0x7a, 0x9c7, 0xa, 0x7a, 
       0x3, 0x7a, 0x5, 0x7a, 0x9ca, 0xa, 0x7a, 0x3, 0x7a, 0x5, 0x7a, 0x9cd, 
       0xa, 0x7a, 0x5, 0x7a, 0x9cf, 0xa, 0x7a, 0x3, 0x7b, 0x5, 0x7b, 0x9d2, 
       0xa, 0x7b, 0x3, 0x7c, 0x3, 0x7c, 0x3, 0x7c, 0x3, 0x7c, 0x3, 0x7c, 
       0x3, 0x7c, 0x3, 0x7c, 0x3, 0x7c, 0x3, 0x7c, 0x3, 0x7c, 0x5, 0x7c, 
       0x9de, 0xa, 0x7c, 0x3, 0x7c, 0x5, 0x7c, 0x9e1, 0xa, 0x7c, 0x3, 0x7c, 
       0x3, 0x7c, 0x5, 0x7c, 0x9e5, 0xa, 0x7c, 0x3, 0x7c, 0x3, 0x7c, 0x3, 
       0x7c, 0x3, 0x7c, 0x3, 0x7c, 0x3, 0x7c, 0x3, 0x7c, 0x3, 0x7c, 0x5, 
       0x7c, 0x9ef, 0xa, 0x7c, 0x3, 0x7c, 0x3, 0x7c, 0x5, 0x7c, 0x9f3, 0xa, 
       0x7c, 0x5, 0x7c, 0x9f5, 0xa, 0x7c, 0x3, 0x7c, 0x5, 0x7c, 0x9f8, 0xa, 
       0x7c, 0x3, 0x7c, 0x3, 0x7c, 0x5, 0x7c, 0x9fc, 0xa, 0x7c, 0x3, 0x7d, 
       0x3, 0x7d, 0x7, 0x7d, 0xa00, 0xa, 0x7d, 0xc, 0x7d, 0xe, 0x7d, 0xa03, 
       0xb, 0x7d, 0x3, 0x7d, 0x5, 0x7d, 0xa06, 0xa, 0x7d, 0x3, 0x7d, 0x3, 
       0x7d, 0x3, 0x7e, 0x3, 0x7e, 0x3, 0x7e, 0x3, 0x7f, 0x3, 0x7f, 0x3, 
       0x7f, 0x3, 0x7f, 0x5, 0x7f, 0xa11, 0xa, 0x7f, 0x3, 0x7f, 0x3, 0x7f, 
       0x3, 0x7f, 0x3, 0x80, 0x3, 0x80, 0x3, 0x80, 0x3, 0x80, 0x3, 0x80, 
       0x5, 0x80, 0xa1b, 0xa, 0x80, 0x3, 0x80, 0x3, 0x80, 0x3, 0x80, 0x3, 
       0x81, 0x3, 0x81, 0x3, 0x81, 0x3, 0x81, 0x3, 0x81, 0x3, 0x81, 0x3, 
       0x81, 0x5, 0x81, 0xa27, 0xa, 0x81, 0x3, 0x82, 0x3, 0x82, 0x3, 0x82, 
       0x3, 0x82, 0x3, 0x82, 0x3, 0x82, 0x3, 0x82, 0x3, 0x82, 0x3, 0x82, 
       0x3, 0x82, 0x3, 0x82, 0x7, 0x82, 0xa34, 0xa, 0x82, 0xc, 0x82, 0xe, 
       0x82, 0xa37, 0xb, 0x82, 0x3, 0x82, 0x3, 0x82, 0x5, 0x82, 0xa3b, 0xa, 
       0x82, 0x3, 0x83, 0x3, 0x83, 0x3, 0x83, 0x7, 0x83, 0xa40, 0xa, 0x83, 
       0xc, 0x83, 0xe, 0x83, 0xa43, 0xb, 0x83, 0x3, 0x84, 0x3, 0x84, 0x3, 
       0x84, 0x3, 0x84, 0x3, 0x85, 0x3, 0x85, 0x3, 0x85, 0x3, 0x86, 0x3, 
       0x86, 0x3, 0x86, 0x3, 0x87, 0x3, 0x87, 0x3, 0x87, 0x5, 0x87, 0xa52, 
       0xa, 0x87, 0x3, 0x87, 0x7, 0x87, 0xa55, 0xa, 0x87, 0xc, 0x87, 0xe, 
       0x87, 0xa58, 0xb, 0x87, 0x3, 0x87, 0x3, 0x87, 0x3, 0x88, 0x3, 0x88, 
       0x3, 0x88, 0x3, 0x88, 0x3, 0x88, 0x3, 0x88, 0x7, 0x88, 0xa62, 0xa, 
       0x88, 0xc, 0x88, 0xe, 0x88, 0xa65, 0xb, 0x88, 0x3, 0x88, 0x3, 0x88, 
       0x5, 0x88, 0xa69, 0xa, 0x88, 0x3, 0x89, 0x3, 0x89, 0x3, 0x89, 0x3, 
       0x89, 0x7, 0x89, 0xa6f, 0xa, 0x89, 0xc, 0x89, 0xe, 0x89, 0xa72, 0xb, 
       0x89, 0x3, 0x89, 0x7, 0x89, 0xa75, 0xa, 0x89, 0xc, 0x89, 0xe, 0x89, 
       0xa78, 0xb, 0x89, 0x3, 0x89, 0x5, 0x89, 0xa7b, 0xa, 0x89, 0x3, 0x8a, 
       0x3, 0x8a, 0x3, 0x8a, 0x3, 0x8a, 0x3, 0x8a, 0x7, 0x8a, 0xa82, 0xa, 
       0x8a, 0xc, 0x8a, 0xe, 0x8a, 0xa85, 0xb, 0x8a, 0x3, 0x8a, 0x3, 0x8a, 
       0x3, 0x8a, 0x3, 0x8a, 0x3, 0x8a, 0x3, 0x8a, 0x3, 0x8a, 0x3, 0x8a, 
       0x3, 0x8a, 0x3, 0x8a, 0x7, 0x8a, 0xa91, 0xa, 0x8a, 0xc, 0x8a, 0xe, 
       0x8a, 0xa94, 0xb, 0x8a, 0x3, 0x8a, 0x3, 0x8a, 0x5, 0x8a, 0xa98, 0xa, 
       0x8a, 0x3, 0x8a, 0x3, 0x8a, 0x3, 0x8a, 0x3, 0x8a, 0x3, 0x8a, 0x3, 
       0x8a, 0x3, 0x8a, 0x3, 0x8a, 0x7, 0x8a, 0xaa2, 0xa, 0x8a, 0xc, 0x8a, 
       0xe, 0x8a, 0xaa5, 0xb, 0x8a, 0x3, 0x8a, 0x3, 0x8a, 0x5, 0x8a, 0xaa9, 
       0xa, 0x8a, 0x3, 0x8b, 0x3, 0x8b, 0x3, 0x8b, 0x3, 0x8b, 0x7, 0x8b, 
       0xaaf, 0xa, 0x8b, 0xc, 0x8b, 0xe, 0x8b, 0xab2, 0xb, 0x8b, 0x5, 0x8b, 
       0xab4, 0xa, 0x8b, 0x3, 0x8b, 0x3, 0x8b, 0x5, 0x8b, 0xab8, 0xa, 0x8b, 
       0x3, 0x8c, 0x3, 0x8c, 0x3, 0x8c, 0x3, 0x8c, 0x3, 0x8c, 0x3, 0x8c, 
       0x3, 0x8c, 0x3, 0x8c, 0x3, 0x8c, 0x3, 0x8c, 0x7, 0x8c, 0xac4, 0xa, 
       0x8c, 0xc, 0x8c, 0xe, 0x8c, 0xac7, 0xb, 0x8c, 0x3, 0x8c, 0x3, 0x8c, 
       0x3, 0x8c, 0x3, 0x8d, 0x3, 0x8d, 0x3, 0x8d, 0x3, 0x8d, 0x3, 0x8d, 
       0x7, 0x8d, 0xad1, 0xa, 0x8d, 0xc, 0x8d, 0xe, 0x8d, 0xad4, 0xb, 0x8d, 
       0x3, 0x8d, 0x3, 0x8d, 0x5, 0x8d, 0xad8, 0xa, 0x8d, 0x3, 0x8e, 0x3, 
       0x8e, 0x5, 0x8e, 0xadc, 0xa, 0x8e, 0x3, 0x8e, 0x5, 0x8e, 0xadf, 0xa, 
       0x8e, 0x3, 0x8f, 0x3, 0x8f, 0x3, 0x8f, 0x5, 0x8f, 0xae4, 0xa, 0x8f, 
       0x3, 0x8f, 0x3, 0x8f, 0x3, 0x8f, 0x3, 0x8f, 0x3, 0x8f, 0x7, 0x8f, 
       0xaeb, 0xa, 0x8f, 0xc, 0x8f, 0xe, 0x8f, 0xaee, 0xb, 0x8f, 0x5, 0x8f, 
       0xaf0, 0xa, 0x8f, 0x3, 0x8f, 0x3, 0x8f, 0x3, 0x8f, 0x5, 0x8f, 0xaf5, 
       0xa, 0x8f, 0x3, 0x8f, 0x3, 0x8f, 0x3, 0x8f, 0x7, 0x8f, 0xafa, 0xa, 
       0x8f, 0xc, 0x8f, 0xe, 0x8f, 0xafd, 0xb, 0x8f, 0x5, 0x8f, 0xaff, 0xa, 
       0x8f, 0x3, 0x90, 0x3, 0x90, 0x3, 0x91, 0x3, 0x91, 0x7, 0x91, 0xb05, 
       0xa, 0x91, 0xc, 0x91, 0xe, 0x91, 0xb08, 0xb, 0x91, 0x3, 0x92, 0x3, 
       0x92, 0x3, 0x92, 0x3, 0x92, 0x5, 0x92, 0xb0e, 0xa, 0x92, 0x3, 0x92, 
       0x3, 0x92, 0x3, 0x92, 0x3, 0x92, 0x3, 0x92, 0x5, 0x92, 0xb15, 0xa, 
       0x92, 0x3, 0x93, 0x5, 0x93, 0xb18, 0xa, 0x93, 0x3, 0x93, 0x3, 0x93, 
       0x3, 0x93, 0x5, 0x93, 0xb1d, 0xa, 0x93, 0x3, 0x93, 0x5, 0x93, 0xb20, 
       0xa, 0x93, 0x3, 0x93, 0x3, 0x93, 0x3, 0x93, 0x5, 0x93, 0xb25, 0xa, 
       0x93, 0x3, 0x93, 0x3, 0x93, 0x5, 0x93, 0xb29, 0xa, 0x93, 0x3, 0x93, 
       0x5, 0x93, 0xb2c, 0xa, 0x93, 0x3, 0x93, 0x5, 0x93, 0xb2f, 0xa, 0x93, 
       0x3, 0x94, 0x3, 0x94, 0x3, 0x94, 0x3, 0x94, 0x5, 0x94, 0xb35, 0xa, 
       0x94, 0x3, 0x95, 0x3, 0x95, 0x3, 0x95, 0x5, 0x95, 0xb3a, 0xa, 0x95, 
       0x3, 0x95, 0x3, 0x95, 0x3, 0x96, 0x5, 0x96, 0xb3f, 0xa, 0x96, 0x3, 
       0x96, 0x3, 0x96, 0x3, 0x96, 0x3, 0x96, 0x3, 0x96, 0x3, 0x96, 0x3, 
       0x96, 0x3, 0x96, 0x3, 0x96, 0x3, 0x96, 0x3, 0x96, 0x3, 0x96, 0x3, 
       0x96, 0x3, 0x96, 0x3, 0x96, 0x3, 0x96, 0x5, 0x96, 0xb51, 0xa, 0x96, 
       0x5, 0x96, 0xb53, 0xa, 0x96, 0x3, 0x96, 0x5, 0x96, 0xb56, 0xa, 0x96, 
       0x3, 0x97, 0x3, 0x97, 0x3, 0x97, 0x3, 0x97, 0x3, 0x98, 0x3, 0x98, 
       0x3, 0x98, 0x7, 0x98, 0xb5f, 0xa, 0x98, 0xc, 0x98, 0xe, 0x98, 0xb62, 
       0xb, 0x98, 0x3, 0x99, 0x3, 0x99, 0x3, 0x99, 0x3, 0x99, 0x7, 0x99, 
       0xb68, 0xa, 0x99, 0xc, 0x99, 0xe, 0x99, 0xb6b, 0xb, 0x99, 0x3, 0x99, 
       0x3, 0x99, 0x3, 0x9a, 0x3, 0x9a, 0x5, 0x9a, 0xb71, 0xa, 0x9a, 0x3, 
       0x9b, 0x3, 0x9b, 0x3, 0x9b, 0x3, 0x9b, 0x7, 0x9b, 0xb77, 0xa, 0x9b, 
       0xc, 0x9b, 0xe, 0x9b, 0xb7a, 0xb, 0x9b, 0x3, 0x9b, 0x3, 0x9b, 0x3, 
       0x9c, 0x3, 0x9c, 0x5, 0x9c, 0xb80, 0xa, 0x9c, 0x3, 0x9d, 0x3, 0x9d, 
       0x5, 0x9d, 0xb84, 0xa, 0x9d, 0x3, 0x9d, 0x5, 0x9d, 0xb87, 0xa, 0x9d, 
       0x3, 0x9d, 0x3, 0x9d, 0x3, 0x9d, 0x3, 0x9d, 0x3, 0x9d, 0x3, 0x9d, 
       0x5, 0x9d, 0xb8f, 0xa, 0x9d, 0x3, 0x9d, 0x3, 0x9d, 0x3, 0x9d, 0x3, 
       0x9d, 0x3, 0x9d, 0x3, 0x9d, 0x5, 0x9d, 0xb97, 0xa, 0x9d, 0x3, 0x9d, 
       0x3, 0x9d, 0x3, 0x9d, 0x3, 0x9d, 0x5, 0x9d, 0xb9d, 0xa, 0x9d, 0x3, 
       0x9e, 0x3, 0x9e, 0x3, 0x9e, 0x3, 0x9e, 0x7, 0x9e, 0xba3, 0xa, 0x9e, 
       0xc, 0x9e, 0xe, 0x9e, 0xba6, 0xb, 0x9e, 0x3, 0x9e, 0x3, 0x9e, 0x3, 
       0x9f, 0x3, 0x9f, 0x3, 0x9f, 0x3, 0x9f, 0x3, 0x9f, 0x7, 0x9f, 0xbaf, 
       0xa, 0x9f, 0xc, 0x9f, 0xe, 0x9f, 0xbb2, 0xb, 0x9f, 0x5, 0x9f, 0xbb4, 
       0xa, 0x9f, 0x3, 0x9f, 0x3, 0x9f, 0x3, 0x9f, 0x3, 0xa0, 0x5, 0xa0, 
       0xbba, 0xa, 0xa0, 0x3, 0xa0, 0x3, 0xa0, 0x5, 0xa0, 0xbbe, 0xa, 0xa0, 
       0x5, 0xa0, 0xbc0, 0xa, 0xa0, 0x3, 0xa1, 0x3, 0xa1, 0x3, 0xa1, 0x3, 
       0xa1, 0x3, 0xa1, 0x3, 0xa1, 0x3, 0xa1, 0x5, 0xa1, 0xbc9, 0xa, 0xa1, 
       0x3, 0xa1, 0x3, 0xa1, 0x3, 0xa1, 0x3, 0xa1, 0x3, 0xa1, 0x3, 0xa1, 
       0x3, 0xa1, 0x3, 0xa1, 0x3, 0xa1, 0x3, 0xa1, 0x5, 0xa1, 0xbd5, 0xa, 
       0xa1, 0x5, 0xa1, 0xbd7, 0xa, 0xa1, 0x3, 0xa1, 0x3, 0xa1, 0x3, 0xa1, 
       0x3, 0xa1, 0x3, 0xa1, 0x5, 0xa1, 0xbde, 0xa, 0xa1, 0x3, 0xa1, 0x3, 
       0xa1, 0x3, 0xa1, 0x3, 0xa1, 0x3, 0xa1, 0x5, 0xa1, 0xbe5, 0xa, 0xa1, 
       0x3, 0xa1, 0x3, 0xa1, 0x3, 0xa1, 0x3, 0xa1, 0x5, 0xa1, 0xbeb, 0xa, 
       0xa1, 0x3, 0xa1, 0x3, 0xa1, 0x3, 0xa1, 0x3, 0xa1, 0x5, 0xa1, 0xbf1, 
       0xa, 0xa1, 0x5, 0xa1, 0xbf3, 0xa, 0xa1, 0x3, 0xa2, 0x3, 0xa2, 0x3, 
       0xa2, 0x7, 0xa2, 0xbf8, 0xa, 0xa2, 0xc, 0xa2, 0xe, 0xa2, 0xbfb, 0xb, 
       0xa2, 0x3, 0xa3, 0x3, 0xa3, 0x3, 0xa3, 0x7, 0xa3, 0xc00, 0xa, 0xa3, 
       0xc, 0xa3, 0xe, 0xa3, 0xc03, 0xb, 0xa3, 0x3, 0xa4, 0x3, 0xa4, 0x3, 
       0xa4, 0x5, 0xa4, 0xc08, 0xa, 0xa4, 0x3, 0xa4, 0x3, 0xa4, 0x3, 0xa5, 
       0x3, 0xa5, 0x3, 0xa5, 0x5, 0xa5, 0xc0f, 0xa, 0xa5, 0x3, 0xa5, 0x3, 
       0xa5, 0x3, 0xa6, 0x3, 0xa6, 0x5, 0xa6, 0xc15, 0xa, 0xa6, 0x3, 0xa6, 
       0x3, 0xa6, 0x5, 0xa6, 0xc19, 0xa, 0xa6, 0x5, 0xa6, 0xc1b, 0xa, 0xa6, 
       0x3, 0xa7, 0x3, 0xa7, 0x3, 0xa7, 0x7, 0xa7, 0xc20, 0xa, 0xa7, 0xc, 
       0xa7, 0xe, 0xa7, 0xc23, 0xb, 0xa7, 0x3, 0xa8, 0x3, 0xa8, 0x3, 0xa8, 
       0x3, 0xa8, 0x7, 0xa8, 0xc29, 0xa, 0xa8, 0xc, 0xa8, 0xe, 0xa8, 0xc2c, 
       0xb, 0xa8, 0x3, 0xa8, 0x3, 0xa8, 0x3, 0xa9, 0x3, 0xa9, 0x3, 0xa9, 
       0x3, 0xa9, 0x3, 0xa9, 0x3, 0xa9, 0x7, 0xa9, 0xc36, 0xa, 0xa9, 0xc, 
       0xa9, 0xe, 0xa9, 0xc39, 0xb, 0xa9, 0x3, 0xa9, 0x3, 0xa9, 0x5, 0xa9, 
       0xc3d, 0xa, 0xa9, 0x3, 0xaa, 0x3, 0xaa, 0x5, 0xaa, 0xc41, 0xa, 0xaa, 
       0x3, 0xab, 0x3, 0xab, 0x3, 0xac, 0x3, 0xac, 0x3, 0xac, 0x3, 0xac, 
       0x3, 0xac, 0x3, 0xac, 0x3, 0xac, 0x3, 0xac, 0x3, 0xac, 0x3, 0xac, 
       0x5, 0xac, 0xc4f, 0xa, 0xac, 0x5, 0xac, 0xc51, 0xa, 0xac, 0x3, 0xac, 
       0x3, 0xac, 0x3, 0xac, 0x3, 0xac, 0x3, 0xac, 0x3, 0xac, 0x7, 0xac, 
       0xc59, 0xa, 0xac, 0xc, 0xac, 0xe, 0xac, 0xc5c, 0xb, 0xac, 0x3, 0xad, 
       0x5, 0xad, 0xc5f, 0xa, 0xad, 0x3, 0xad, 0x3, 0xad, 0x3, 0xad, 0x3, 
       0xad, 0x3, 0xad, 0x3, 0xad, 0x5, 0xad, 0xc67, 0xa, 0xad, 0x3, 0xad, 
       0x3, 0xad, 0x3, 0xad, 0x3, 0xad, 0x3, 0xad, 0x7, 0xad, 0xc6e, 0xa, 
       0xad, 0xc, 0xad, 0xe, 0xad, 0xc71, 0xb, 0xad, 0x3, 0xad, 0x3, 0xad, 
       0x3, 0xad, 0x5, 0xad, 0xc76, 0xa, 0xad, 0x3, 0xad, 0x3, 0xad, 0x3, 
       0xad, 0x3, 0xad, 0x3, 0xad, 0x3, 0xad, 0x5, 0xad, 0xc7e, 0xa, 0xad, 
       0x3, 0xad, 0x3, 0xad, 0x3, 0xad, 0x5, 0xad, 0xc83, 0xa, 0xad, 0x3, 
       0xad, 0x3, 0xad, 0x3, 0xad, 0x3, 0xad, 0x3, 0xad, 0x3, 0xad, 0x3, 
       0xad, 0x3, 0xad, 0x7, 0xad, 0xc8d, 0xa, 0xad, 0xc, 0xad, 0xe, 0xad, 
       0xc90, 0xb, 0xad, 0x3, 0xad, 0x3, 0xad, 0x5, 0xad, 0xc94, 0xa, 0xad, 
       0x3, 0xad, 0x5, 0xad, 0xc97, 0xa, 0xad, 0x3, 0xad, 0x3, 0xad, 0x3, 
       0xad, 0x3, 0xad, 0x5, 0xad, 0xc9d, 0xa, 0xad, 0x3, 0xad, 0x3, 0xad, 
       0x5, 0xad, 0xca1, 0xa, 0xad, 0x3, 0xad, 0x3, 0xad, 0x3, 0xad, 0x5, 
       0xad, 0xca6, 0xa, 0xad, 0x3, 0xad, 0x3, 0xad, 0x3, 0xad, 0x5, 0xad, 
       0xcab, 0xa, 0xad, 0x3, 0xad, 0x3, 0xad, 0x3, 0xad, 0x5, 0xad, 0xcb0, 
       0xa, 0xad, 0x3, 0xae, 0x3, 0xae, 0x3, 0xae, 0x3, 0xae, 0x5, 0xae, 
       0xcb6, 0xa, 0xae, 0x3, 0xae, 0x3, 0xae, 0x3, 0xae, 0x3, 0xae, 0x3, 
       0xae, 0x3, 0xae, 0x3, 0xae, 0x3, 0xae, 0x3, 0xae, 0x3, 0xae, 0x3, 
       0xae, 0x3, 0xae, 0x3, 0xae, 0x3, 0xae, 0x3, 0xae, 0x3, 0xae, 0x3, 
       0xae, 0x3, 0xae, 0x3, 0xae, 0x7, 0xae, 0xccb, 0xa, 0xae, 0xc, 0xae, 
       0xe, 0xae, 0xcce, 0xb, 0xae, 0x3, 0xaf, 0x3, 0xaf, 0x3, 0xaf, 0x3, 
       0xaf, 0x6, 0xaf, 0xcd4, 0xa, 0xaf, 0xd, 0xaf, 0xe, 0xaf, 0xcd5, 0x3, 
       0xaf, 0x3, 0xaf, 0x5, 0xaf, 0xcda, 0xa, 0xaf, 0x3, 0xaf, 0x3, 0xaf, 
       0x3, 0xaf, 0x3, 0xaf, 0x3, 0xaf, 0x6, 0xaf, 0xce1, 0xa, 0xaf, 0xd, 
       0xaf, 0xe, 0xaf, 0xce2, 0x3, 0xaf, 0x3, 0xaf, 0x5, 0xaf, 0xce7, 0xa, 
       0xaf, 0x3, 0xaf, 0x3, 0xaf, 0x3, 0xaf, 0x3, 0xaf, 0x3, 0xaf, 0x3, 
       0xaf, 0x3, 0xaf, 0x3, 0xaf, 0x3, 0xaf, 0x3, 0xaf, 0x3, 0xaf, 0x3, 
       0xaf, 0x3, 0xaf, 0x3, 0xaf, 0x7, 0xaf, 0xcf7, 0xa, 0xaf, 0xc, 0xaf, 
       0xe, 0xaf, 0xcfa, 0xb, 0xaf, 0x5, 0xaf, 0xcfc, 0xa, 0xaf, 0x3, 0xaf, 
       0x3, 0xaf, 0x3, 0xaf, 0x3, 0xaf, 0x3, 0xaf, 0x3, 0xaf, 0x5, 0xaf, 
       0xd04, 0xa, 0xaf, 0x3, 0xaf, 0x3, 0xaf, 0x3, 0xaf, 0x3, 0xaf, 0x3, 
       0xaf, 0x3, 0xaf, 0x3, 0xaf, 0x5, 0xaf, 0xd0d, 0xa, 0xaf, 0x3, 0xaf, 
       0x3, 0xaf, 0x3, 0xaf, 0x3, 0xaf, 0x3, 0xaf, 0x3, 0xaf, 0x3, 0xaf, 
       0x3, 0xaf, 0x3, 0xaf, 0x3, 0xaf, 0x3, 0xaf, 0x3, 0xaf, 0x3, 0xaf, 
       0x3, 0xaf, 0x3, 0xaf, 0x3, 0xaf, 0x3, 0xaf, 0x3, 0xaf, 0x3, 0xaf, 
       0x6, 0xaf, 0xd22, 0xa, 0xaf, 0xd, 0xaf, 0xe, 0xaf, 0xd23, 0x3, 0xaf, 
       0x3, 0xaf, 0x3, 0xaf, 0x3, 0xaf, 0x3, 0xaf, 0x3, 0xaf, 0x3, 0xaf, 
       0x3, 0xaf, 0x3, 0xaf, 0x5, 0xaf, 0xd2f, 0xa, 0xaf, 0x3, 0xaf, 0x3, 
       0xaf, 0x3, 0xaf, 0x7, 0xaf, 0xd34, 0xa, 0xaf, 0xc, 0xaf, 0xe, 0xaf, 
       0xd37, 0xb, 0xaf, 0x5, 0xaf, 0xd39, 0xa, 0xaf, 0x3, 0xaf, 0x3, 0xaf, 
       0x3, 0xaf, 0x3, 0xaf, 0x3, 0xaf, 0x3, 0xaf, 0x3, 0xaf, 0x5, 0xaf, 
       0xd42, 0xa, 0xaf, 0x3, 0xaf, 0x3, 0xaf, 0x5, 0xaf, 0xd46, 0xa, 0xaf, 
       0x3, 0xaf, 0x3, 0xaf, 0x3, 0xaf, 0x3, 0xaf, 0x3, 0xaf, 0x3, 0xaf, 
       0x3, 0xaf, 0x3, 0xaf, 0x6, 0xaf, 0xd50, 0xa, 0xaf, 0xd, 0xaf, 0xe, 
       0xaf, 0xd51, 0x3, 0xaf, 0x3, 0xaf, 0x3, 0xaf, 0x3, 0xaf, 0x3, 0xaf, 
       0x3, 0xaf, 0x3, 0xaf, 0x3, 0xaf, 0x3, 0xaf, 0x3, 0xaf, 0x3, 0xaf, 
       0x3, 0xaf, 0x3, 0xaf, 0x3, 0xaf, 0x3, 0xaf, 0x3, 0xaf, 0x3, 0xaf, 
       0x3, 0xaf, 0x3, 0xaf, 0x3, 0xaf, 0x3, 0xaf, 0x3, 0xaf, 0x3, 0xaf, 
       0x5, 0xaf, 0xd6b, 0xa, 0xaf, 0x3, 0xaf, 0x3, 0xaf, 0x3, 0xaf, 0x3, 
       0xaf, 0x3, 0xaf, 0x5, 0xaf, 0xd72, 0xa, 0xaf, 0x3, 0xaf, 0x5, 0xaf, 
       0xd75, 0xa, 0xaf, 0x3, 0xaf, 0x3, 0xaf, 0x3, 0xaf, 0x3, 0xaf, 0x3, 
       0xaf, 0x3, 0xaf, 0x3, 0xaf, 0x3, 0xaf, 0x3, 0xaf, 0x3, 0xaf, 0x3, 
       0xaf, 0x3, 0xaf, 0x3, 0xaf, 0x5, 0xaf, 0xd84, 0xa, 0xaf, 0x3, 0xaf, 
       0x3, 0xaf, 0x5, 0xaf, 0xd88, 0xa, 0xaf, 0x3, 0xaf, 0x3, 0xaf, 0x3, 
       0xaf, 0x3, 0xaf, 0x3, 0xaf, 0x3, 0xaf, 0x3, 0xaf, 0x3, 0xaf, 0x7, 
       0xaf, 0xd92, 0xa, 0xaf, 0xc, 0xaf, 0xe, 0xaf, 0xd95, 0xb, 0xaf, 0x3, 
       0xb0, 0x3, 0xb0, 0x3, 0xb0, 0x3, 0xb0, 0x3, 0xb0, 0x3, 0xb0, 0x3, 
       0xb0, 0x3, 0xb0, 0x6, 0xb0, 0xd9f, 0xa, 0xb0, 0xd, 0xb0, 0xe, 0xb0, 
       0xda0, 0x5, 0xb0, 0xda3, 0xa, 0xb0, 0x3, 0xb1, 0x3, 0xb1, 0x3, 0xb1, 
       0x3, 0xb1, 0x3, 0xb1, 0x3, 0xb1, 0x3, 0xb1, 0x3, 0xb1, 0x5, 0xb1, 
       0xdad, 0xa, 0xb1, 0x3, 0xb2, 0x3, 0xb2, 0x3, 0xb3, 0x3, 0xb3, 0x3, 
       0xb4, 0x3, 0xb4, 0x3, 0xb5, 0x3, 0xb5, 0x3, 0xb6, 0x3, 0xb6, 0x3, 
       0xb6, 0x5, 0xb6, 0xdba, 0xa, 0xb6, 0x3, 0xb7, 0x3, 0xb7, 0x5, 0xb7, 
       0xdbe, 0xa, 0xb7, 0x3, 0xb8, 0x3, 0xb8, 0x3, 0xb8, 0x6, 0xb8, 0xdc3, 
       0xa, 0xb8, 0xd, 0xb8, 0xe, 0xb8, 0xdc4, 0x3, 0xb9, 0x3, 0xb9, 0x3, 
       0xb9, 0x5, 0xb9, 0xdca, 0xa, 0xb9, 0x3, 0xba, 0x3, 0xba, 0x3, 0xba, 
       0x3, 0xba, 0x3, 0xba, 0x3, 0xbb, 0x5, 0xbb, 0xdd2, 0xa, 0xbb, 0x3, 
       0xbb, 0x3, 0xbb, 0x5, 0xbb, 0xdd6, 0xa, 0xbb, 0x3, 0xbc, 0x3, 0xbc, 
       0x3, 0xbc, 0x3, 0xbc, 0x3, 0xbc, 0x3, 0xbc, 0x3, 0xbc, 0x5, 0xbc, 
       0xddf, 0xa, 0xbc, 0x3, 0xbd, 0x3, 0xbd, 0x3, 0xbd, 0x5, 0xbd, 0xde4, 
       0xa, 0xbd, 0x3, 0xbe, 0x3, 0xbe, 0x3, 0xbe, 0x3, 0xbe, 0x3, 0xbe, 
       0x3, 0xbe, 0x3, 0xbe, 0x3, 0xbe, 0x3, 0xbe, 0x3, 0xbe, 0x3, 0xbe, 
       0x3, 0xbe, 0x3, 0xbe, 0x3, 0xbe, 0x3, 0xbe, 0x5, 0xbe, 0xdf5, 0xa, 
       0xbe, 0x3, 0xbe, 0x3, 0xbe, 0x5, 0xbe, 0xdf9, 0xa, 0xbe, 0x3, 0xbe, 
       0x3, 0xbe, 0x3, 0xbe, 0x3, 0xbe, 0x3, 0xbe, 0x7, 0xbe, 0xe00, 0xa, 
       0xbe, 0xc, 0xbe, 0xe, 0xbe, 0xe03, 0xb, 0xbe, 0x3, 0xbe, 0x5, 0xbe, 
       0xe06, 0xa, 0xbe, 0x5, 0xbe, 0xe08, 0xa, 0xbe, 0x3, 0xbf, 0x3, 0xbf, 
       0x3, 0xbf, 0x7, 0xbf, 0xe0d, 0xa, 0xbf, 0xc, 0xbf, 0xe, 0xbf, 0xe10, 
       0xb, 0xbf, 0x3, 0xc0, 0x3, 0xc0, 0x3, 0xc0, 0x3, 0xc0, 0x5, 0xc0, 
       0xe16, 0xa, 0xc0, 0x3, 0xc0, 0x5, 0xc0, 0xe19, 0xa, 0xc0, 0x3, 0xc0, 
       0x5, 0xc0, 0xe1c, 0xa, 0xc0, 0x3, 0xc1, 0x3, 0xc1, 0x3, 0xc1, 0x7, 
       0xc1, 0xe21, 0xa, 0xc1, 0xc, 0xc1, 0xe, 0xc1, 0xe24, 0xb, 0xc1, 0x3, 
       0xc2, 0x3, 0xc2, 0x3, 0xc2, 0x3, 0xc2, 0x5, 0xc2, 0xe2a, 0xa, 0xc2, 
       0x3, 0xc2, 0x5, 0xc2, 0xe2d, 0xa, 0xc2, 0x3, 0xc3, 0x3, 0xc3, 0x3, 
       0xc3, 0x7, 0xc3, 0xe32, 0xa, 0xc3, 0xc, 0xc3, 0xe, 0xc3, 0xe35, 0xb, 
       0xc3, 0x3, 0xc4, 0x3, 0xc4, 0x3, 0xc4, 0x3, 0xc4, 0x3, 0xc4, 0x5, 
       0xc4, 0xe3c, 0xa, 0xc4, 0x3, 0xc4, 0x5, 0xc4, 0xe3f, 0xa, 0xc4, 0x3, 
       0xc5, 0x3, 0xc5, 0x3, 0xc5, 0x3, 0xc5, 0x3, 0xc5, 0x3, 0xc6, 0x3, 
       0xc6, 0x3, 0xc6, 0x3, 0xc6, 0x7, 0xc6, 0xe4a, 0xa, 0xc6, 0xc, 0xc6, 
       0xe, 0xc6, 0xe4d, 0xb, 0xc6, 0x3, 0xc7, 0x3, 0xc7, 0x3, 0xc7, 0x3, 
       0xc7, 0x3, 0xc8, 0x3, 0xc8, 0x3, 0xc8, 0x3, 0xc8, 0x3, 0xc8, 0x3, 
       0xc8, 0x3, 0xc8, 0x3, 0xc8, 0x3, 0xc8, 0x3, 0xc8, 0x3, 0xc8, 0x7, 
       0xc8, 0xe5e, 0xa, 0xc8, 0xc, 0xc8, 0xe, 0xc8, 0xe61, 0xb, 0xc8, 0x3, 
       0xc8, 0x3, 0xc8, 0x3, 0xc8, 0x3, 0xc8, 0x3, 0xc8, 0x7, 0xc8, 0xe68, 
       0xa, 0xc8, 0xc, 0xc8, 0xe, 0xc8, 0xe6b, 0xb, 0xc8, 0x5, 0xc8, 0xe6d, 
       0xa, 0xc8, 0x3, 0xc8, 0x3, 0xc8, 0x3, 0xc8, 0x3, 0xc8, 0x3, 0xc8, 
       0x7, 0xc8, 0xe74, 0xa, 0xc8, 0xc, 0xc8, 0xe, 0xc8, 0xe77, 0xb, 0xc8, 
       0x5, 0xc8, 0xe79, 0xa, 0xc8, 0x5, 0xc8, 0xe7b, 0xa, 0xc8, 0x3, 0xc8, 
       0x5, 0xc8, 0xe7e, 0xa, 0xc8, 0x3, 0xc8, 0x5, 0xc8, 0xe81, 0xa, 0xc8, 
       0x3, 0xc9, 0x3, 0xc9, 0x3, 0xc9, 0x3, 0xc9, 0x3, 0xc9, 0x3, 0xc9, 
       0x3, 0xc9, 0x3, 0xc9, 0x3, 0xc9, 0x3, 0xc9, 0x3, 0xc9, 0x3, 0xc9, 
       0x3, 0xc9, 0x3, 0xc9, 0x3, 0xc9, 0x3, 0xc9, 0x5, 0xc9, 0xe93, 0xa, 
       0xc9, 0x3, 0xca, 0x3, 0xca, 0x3, 0xca, 0x3, 0xca, 0x3, 0xca, 0x3, 
       0xca, 0x3, 0xca, 0x5, 0xca, 0xe9c, 0xa, 0xca, 0x3, 0xcb, 0x3, 0xcb, 
       0x3, 0xcb, 0x7, 0xcb, 0xea1, 0xa, 0xcb, 0xc, 0xcb, 0xe, 0xcb, 0xea4, 
       0xb, 0xcb, 0x3, 0xcc, 0x3, 0xcc, 0x3, 0xcc, 0x3, 0xcc, 0x5, 0xcc, 
       0xeaa, 0xa, 0xcc, 0x3, 0xcd, 0x3, 0xcd, 0x3, 0xcd, 0x7, 0xcd, 0xeaf, 
       0xa, 0xcd, 0xc, 0xcd, 0xe, 0xcd, 0xeb2, 0xb, 0xcd, 0x3, 0xce, 0x3, 
       0xce, 0x3, 0xcf, 0x3, 0xcf, 0x6, 0xcf, 0xeb8, 0xa, 0xcf, 0xd, 0xcf, 
       0xe, 0xcf, 0xeb9, 0x3, 0xd0, 0x3, 0xd0, 0x5, 0xd0, 0xebe, 0xa, 0xd0, 
       0x3, 0xd1, 0x3, 0xd1, 0x3, 0xd1, 0x5, 0xd1, 0xec3, 0xa, 0xd1, 0x3, 
       0xd2, 0x3, 0xd2, 0x3, 0xd3, 0x5, 0xd3, 0xec8, 0xa, 0xd3, 0x3, 0xd3, 
       0x3, 0xd3, 0x5, 0xd3, 0xecc, 0xa, 0xd3, 0x3, 0xd3, 0x3, 0xd3, 0x5, 
       0xd3, 0xed0, 0xa, 0xd3, 0x3, 0xd3, 0x3, 0xd3, 0x5, 0xd3, 0xed4, 0xa, 
       0xd3, 0x3, 0xd3, 0x3, 0xd3, 0x5, 0xd3, 0xed8, 0xa, 0xd3, 0x3, 0xd3, 
       0x3, 0xd3, 0x5, 0xd3, 0xedc, 0xa, 0xd3, 0x3, 0xd3, 0x3, 0xd3, 0x5, 
       0xd3, 0xee0, 0xa, 0xd3, 0x3, 0xd3, 0x3, 0xd3, 0x5, 0xd3, 0xee4, 0xa, 
       0xd3, 0x3, 0xd3, 0x3, 0xd3, 0x5, 0xd3, 0xee8, 0xa, 0xd3, 0x3, 0xd3, 
       0x5, 0xd3, 0xeeb, 0xa, 0xd3, 0x3, 0xd4, 0x3, 0xd4, 0x3, 0xd4, 0x3, 
       0xd4, 0x3, 0xd4, 0x3, 0xd4, 0x3, 0xd4, 0x5, 0xd4, 0xef4, 0xa, 0xd4, 
       0x3, 0xd5, 0x3, 0xd5, 0x3, 0xd6, 0x3, 0xd6, 0x3, 0xd7, 0x3, 0xd7, 
       0x3, 0xd7, 0x7, 0x6da, 0x718, 0x722, 0x729, 0x731, 0x7, 0x60, 0xe8, 
       0x156, 0x15a, 0x15c, 0xd8, 0x2, 0x4, 0x6, 0x8, 0xa, 0xc, 0xe, 0x10, 
       0x12, 0x14, 0x16, 0x18, 0x1a, 0x1c, 0x1e, 0x20, 0x22, 0x24, 0x26, 
       0x28, 0x2a, 0x2c, 0x2e, 0x30, 0x32, 0x34, 0x36, 0x38, 0x3a, 0x3c, 
       0x3e, 0x40, 0x42, 0x44, 0x46, 0x48, 0x4a, 0x4c, 0x4e, 0x50, 0x52, 
       0x54, 0x56, 0x58, 0x5a, 0x5c, 0x5e, 0x60, 0x62, 0x64, 0x66, 0x68, 
       0x6a, 0x6c, 0x6e, 0x70, 0x72, 0x74, 0x76, 0x78, 0x7a, 0x7c, 0x7e, 
       0x80, 0x82, 0x84, 0x86, 0x88, 0x8a, 0x8c, 0x8e, 0x90, 0x92, 0x94, 
       0x96, 0x98, 0x9a, 0x9c, 0x9e, 0xa0, 0xa2, 0xa4, 0xa6, 0xa8, 0xaa, 
       0xac, 0xae, 0xb0, 0xb2, 0xb4, 0xb6, 0xb8, 0xba, 0xbc, 0xbe, 0xc0, 
       0xc2, 0xc4, 0xc6, 0xc8, 0xca, 0xcc, 0xce, 0xd0, 0xd2, 0xd4, 0xd6, 
       0xd8, 0xda, 0xdc, 0xde, 0xe0, 0xe2, 0xe4, 0xe6, 0xe8, 0xea, 0xec, 
       0xee, 0xf0, 0xf2, 0xf4, 0xf6, 0xf8, 0xfa, 0xfc, 0xfe, 0x100, 0x102, 
       0x104, 0x106, 0x108, 0x10a, 0x10c, 0x10e, 0x110, 0x112, 0x114, 0x116, 
       0x118, 0x11a, 0x11c, 0x11e, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12a, 
       0x12c, 0x12e, 0x130, 0x132, 0x134, 0x136, 0x138, 0x13a, 0x13c, 0x13e, 
       0x140, 0x142, 0x144, 0x146, 0x148, 0x14a, 0x14c, 0x14e, 0x150, 0x152, 
       0x154, 0x156, 0x158, 0x15a, 0x15c, 0x15e, 0x160, 0x162, 0x164, 0x166, 
       0x168, 0x16a, 0x16c, 0x16e, 0x170, 0x172, 0x174, 0x176, 0x178, 0x17a, 
       0x17c, 0x17e, 0x180, 0x182, 0x184, 0x186, 0x188, 0x18a, 0x18c, 0x18e, 
       0x190, 0x192, 0x194, 0x196, 0x198, 0x19a, 0x19c, 0x19e, 0x1a0, 0x1a2, 
       0x1a4, 0x1a6, 0x1a8, 0x1aa, 0x1ac, 0x2, 0x37, 0x4, 0x2, 0x39, 0x39, 
       0x3e, 0x3e, 0x3, 0x2, 0xc5, 0xc6, 0x3, 0x2, 0xf5, 0xf6, 0x4, 0x2, 
       0x89, 0x89, 0xaa, 0xaa, 0x5, 0x2, 0x26, 0x26, 0xd4, 0xd4, 0x115, 
       0x115, 0x3, 0x2, 0x27, 0x29, 0x4, 0x2, 0x4, 0x4, 0x133, 0x133, 0x4, 
       0x2, 0x14b, 0x14b, 0x14d, 0x14d, 0x3, 0x2, 0x15, 0x17, 0x3, 0x2, 
       0x13c, 0x13f, 0x4, 0x2, 0x42, 0x42, 0x70, 0x70, 0x4, 0x2, 0x13d, 
       0x13d, 0x142, 0x142, 0x5, 0x2, 0xc, 0xd, 0x84, 0x84, 0x11c, 0x11c, 
       0x4, 0x2, 0xe, 0xe, 0xc5, 0xc5, 0x4, 0x2, 0x6c, 0x6c, 0xdf, 0xdf, 
       0x4, 0x2, 0x4b, 0x4b, 0xed, 0xed, 0x4, 0x2, 0x6a, 0x6a, 0xc1, 0xc1, 
       0x4, 0x2, 0x8f, 0x8f, 0x9c, 0x9c, 0x3, 0x2, 0x56, 0x57, 0x4, 0x2, 
       0x10e, 0x10e, 0x12c, 0x12c, 0x4, 0x2, 0x3a, 0x3a, 0x4e, 0x4e, 0x7, 
       0x2, 0x53, 0x53, 0x5f, 0x5f, 0x81, 0x81, 0x8e, 0x8e, 0xb8, 0xb8, 
       0x3, 0x2, 0x70, 0x71, 0x4, 0x2, 0x81, 0x81, 0x8e, 0x8e, 0x4, 0x2, 
       0xc5, 0xc5, 0x147, 0x147, 0x4, 0x2, 0x37, 0x37, 0xb2, 0xb2, 0x5, 
       0x2, 0x69, 0x69, 0xc0, 0xc0, 0xf7, 0xf7, 0x6, 0x2, 0x7c, 0x7c, 0xa3, 
       0xa3, 0x100, 0x100, 0x122, 0x122, 0x5, 0x2, 0x7c, 0x7c, 0x100, 0x100, 
       0x122, 0x122, 0x4, 0x2, 0x39, 0x39, 0x75, 0x75, 0x5, 0x2, 0x39, 0x39, 
       0x3e, 0x3e, 0x104, 0x104, 0x5, 0x2, 0x84, 0x84, 0x11c, 0x11c, 0x124, 
       0x124, 0x4, 0x2, 0x13c, 0x13d, 0x142, 0x142, 0x3, 0x2, 0x13e, 0x141, 
       0x4, 0x2, 0x13c, 0x13d, 0x145, 0x145, 0x4, 0x2, 0x64, 0x64, 0x66, 
       0x66, 0x3, 0x2, 0x10c, 0x10d, 0x4, 0x2, 0x3, 0x3, 0x8f, 0x8f, 0x4, 
       0x2, 0x3, 0x3, 0x8b, 0x8b, 0x5, 0x2, 0x46, 0x46, 0xad, 0xad, 0x117, 
       0x117, 0x3, 0x2, 0x133, 0x134, 0x3, 0x2, 0x13c, 0x146, 0x6, 0x2, 
       0x3c, 0x3c, 0x9c, 0x9c, 0xc4, 0xc4, 0xcc, 0xcc, 0x4, 0x2, 0x84, 0x84, 
       0x11c, 0x11c, 0x3, 0x2, 0x13c, 0x13d, 0x4, 0x2, 0x76, 0x76, 0xd5, 
       0xd5, 0x4, 0x2, 0xcd, 0xcd, 0x105, 0x105, 0x4, 0x2, 0x8a, 0x8a, 0xdc, 
       0xdc, 0x3, 0x2, 0x14c, 0x14d, 0x4, 0x2, 0x77, 0x77, 0xff, 0xff, 0x35, 
       0x2, 0x37, 0x38, 0x3a, 0x3b, 0x3f, 0x40, 0x42, 0x43, 0x45, 0x45, 
       0x47, 0x4b, 0x4e, 0x4e, 0x50, 0x53, 0x55, 0x55, 0x57, 0x5d, 0x5f, 
       0x5f, 0x62, 0x63, 0x68, 0x6a, 0x6c, 0x74, 0x76, 0x77, 0x7b, 0x7b, 
       0x7d, 0x83, 0x86, 0x86, 0x88, 0x8a, 0x8d, 0x8e, 0x91, 0x93, 0x96, 
       0x96, 0x99, 0x9b, 0x9d, 0x9e, 0xa0, 0xa2, 0xa4, 0xa4, 0xa7, 0xa7, 
       0xa9, 0xac, 0xaf, 0xbc, 0xbf, 0xc1, 0xc3, 0xc3, 0xc6, 0xc7, 0xca, 
       0xcb, 0xce, 0xce, 0xd0, 0xd1, 0xd3, 0xdc, 0xde, 0xe6, 0xe8, 0xee, 
       0xf0, 0xf7, 0xfb, 0xfd, 0xff, 0xff, 0x101, 0x103, 0x105, 0x10d, 0x10f, 
       0x113, 0x116, 0x116, 0x118, 0x11d, 0x11f, 0x121, 0x125, 0x128, 0x12b, 
       0x12d, 0x130, 0x130, 0x141, 0x141, 0x11, 0x2, 0x3d, 0x3d, 0x61, 0x61, 
       0x7c, 0x7c, 0x90, 0x90, 0x9f, 0x9f, 0xa3, 0xa3, 0xa8, 0xa8, 0xae, 
       0xae, 0xc2, 0xc2, 0xc8, 0xc8, 0xef, 0xef, 0xfa, 0xfa, 0x100, 0x100, 
       0x122, 0x122, 0x12a, 0x12a, 0x13, 0x2, 0x37, 0x3c, 0x3e, 0x60, 0x62, 
       0x7b, 0x7d, 0x8f, 0x91, 0x9e, 0xa0, 0xa2, 0xa4, 0xa7, 0xa9, 0xad, 
       0xaf, 0xc1, 0xc3, 0xc7, 0xc9, 0xee, 0xf0, 0xf9, 0xfb, 0xff, 0x101, 
       0x121, 0x123, 0x129, 0x12b, 0x132, 0x141, 0x141, 0x2, 0x1124, 0x2, 
       0x1af, 0x3, 0x2, 0x2, 0x2, 0x4, 0x1b5, 0x3, 0x2, 0x2, 0x2, 0x6, 0x1be, 
       0x3, 0x2, 0x2, 0x2, 0x8, 0x1c1, 0x3, 0x2, 0x2, 0x2, 0xa, 0x1db, 0x3, 
       0x2, 0x2, 0x2, 0xc, 0x1dd, 0x3, 0x2, 0x2, 0x2, 0xe, 0x1e9, 0x3, 0x2, 
       0x2, 0x2, 0x10, 0x1f2, 0x3, 0x2, 0x2, 0x2, 0x12, 0x206, 0x3, 0x2, 
       0x2, 0x2, 0x14, 0x20d, 0x3, 0x2, 0x2, 0x2, 0x16, 0x214, 0x3, 0x2, 
       0x2, 0x2, 0x18, 0x21f, 0x3, 0x2, 0x2, 0x2, 0x1a, 0x22c, 0x3, 0x2, 
       0x2, 0x2, 0x1c, 0x233, 0x3, 0x2, 0x2, 0x2, 0x1e, 0x240, 0x3, 0x2, 
       0x2, 0x2, 0x20, 0x252, 0x3, 0x2, 0x2, 0x2, 0x22, 0x25f, 0x3, 0x2, 
       0x2, 0x2, 0x24, 0x262, 0x3, 0x2, 0x2, 0x2, 0x26, 0x26a, 0x3, 0x2, 
       0x2, 0x2, 0x28, 0x276, 0x3, 0x2, 0x2, 0x2, 0x2a, 0x29b, 0x3, 0x2, 
       0x2, 0x2, 0x2c, 0x29d, 0x3, 0x2, 0x2, 0x2, 0x2e, 0x2af, 0x3, 0x2, 
       0x2, 0x2, 0x30, 0x2c0, 0x3, 0x2, 0x2, 0x2, 0x32, 0x2cb, 0x3, 0x2, 
       0x2, 0x2, 0x34, 0x2d0, 0x3, 0x2, 0x2, 0x2, 0x36, 0x2d4, 0x3, 0x2, 
       0x2, 0x2, 0x38, 0x2d6, 0x3, 0x2, 0x2, 0x2, 0x3a, 0x2d8, 0x3, 0x2, 
       0x2, 0x2, 0x3c, 0x2da, 0x3, 0x2, 0x2, 0x2, 0x3e, 0x308, 0x3, 0x2, 
       0x2, 0x2, 0x40, 0x30a, 0x3, 0x2, 0x2, 0x2, 0x42, 0x31b, 0x3, 0x2, 
       0x2, 0x2, 0x44, 0x31d, 0x3, 0x2, 0x2, 0x2, 0x46, 0x32f, 0x3, 0x2, 
       0x2, 0x2, 0x48, 0x331, 0x3, 0x2, 0x2, 0x2, 0x4a, 0x33d, 0x3, 0x2, 
       0x2, 0x2, 0x4c, 0x33f, 0x3, 0x2, 0x2, 0x2, 0x4e, 0x346, 0x3, 0x2, 
       0x2, 0x2, 0x50, 0x349, 0x3, 0x2, 0x2, 0x2, 0x52, 0x34b, 0x3, 0x2, 
       0x2, 0x2, 0x54, 0x354, 0x3, 0x2, 0x2, 0x2, 0x56, 0x35d, 0x3, 0x2, 
       0x2, 0x2, 0x58, 0x369, 0x3, 0x2, 0x2, 0x2, 0x5a, 0x373, 0x3, 0x2, 
       0x2, 0x2, 0x5c, 0x38c, 0x3, 0x2, 0x2, 0x2, 0x5e, 0x38e, 0x3, 0x2, 
       0x2, 0x2, 0x60, 0x396, 0x3, 0x2, 0x2, 0x2, 0x62, 0x3aa, 0x3, 0x2, 
       0x2, 0x2, 0x64, 0x3b2, 0x3, 0x2, 0x2, 0x2, 0x66, 0x3b4, 0x3, 0x2, 
       0x2, 0x2, 0x68, 0x3bc, 0x3, 0x2, 0x2, 0x2, 0x6a, 0x3c4, 0x3, 0x2, 
       0x2, 0x2, 0x6c, 0x3c8, 0x3, 0x2, 0x2, 0x2, 0x6e, 0x3ca, 0x3, 0x2, 
       0x2, 0x2, 0x70, 0x3d2, 0x3, 0x2, 0x2, 0x2, 0x72, 0x3e2, 0x3, 0x2, 
       0x2, 0x2, 0x74, 0x3ef, 0x3, 0x2, 0x2, 0x2, 0x76, 0x3f1, 0x3, 0x2, 
       0x2, 0x2, 0x78, 0x3f9, 0x3, 0x2, 0x2, 0x2, 0x7a, 0x3fd, 0x3, 0x2, 
       0x2, 0x2, 0x7c, 0x408, 0x3, 0x2, 0x2, 0x2, 0x7e, 0x40a, 0x3, 0x2, 
       0x2, 0x2, 0x80, 0x40e, 0x3, 0x2, 0x2, 0x2, 0x82, 0x422, 0x3, 0x2, 
       0x2, 0x2, 0x84, 0x424, 0x3, 0x2, 0x2, 0x2, 0x86, 0x42c, 0x3, 0x2, 
       0x2, 0x2, 0x88, 0x432, 0x3, 0x2, 0x2, 0x2, 0x8a, 0x444, 0x3, 0x2, 
       0x2, 0x2, 0x8c, 0x44c, 0x3, 0x2, 0x2, 0x2, 0x8e, 0x44e, 0x3, 0x2, 
       0x2, 0x2, 0x90, 0x450, 0x3, 0x2, 0x2, 0x2, 0x92, 0x452, 0x3, 0x2, 
       0x2, 0x2, 0x94, 0x454, 0x3, 0x2, 0x2, 0x2, 0x96, 0x456, 0x3, 0x2, 
       0x2, 0x2, 0x98, 0x458, 0x3, 0x2, 0x2, 0x2, 0x9a, 0x461, 0x3, 0x2, 
       0x2, 0x2, 0x9c, 0x464, 0x3, 0x2, 0x2, 0x2, 0x9e, 0x467, 0x3, 0x2, 
       0x2, 0x2, 0xa0, 0x46a, 0x3, 0x2, 0x2, 0x2, 0xa2, 0x46d, 0x3, 0x2, 
       0x2, 0x2, 0xa4, 0x470, 0x3, 0x2, 0x2, 0x2, 0xa6, 0x734, 0x3, 0x2, 
       0x2, 0x2, 0xa8, 0x7de, 0x3, 0x2, 0x2, 0x2, 0xaa, 0x7e0, 0x3, 0x2, 
       0x2, 0x2, 0xac, 0x7f1, 0x3, 0x2, 0x2, 0x2, 0xae, 0x7f7, 0x3, 0x2, 
       0x2, 0x2, 0xb0, 0x803, 0x3, 0x2, 0x2, 0x2, 0xb2, 0x810, 0x3, 0x2, 
       0x2, 0x2, 0xb4, 0x813, 0x3, 0x2, 0x2, 0x2, 0xb6, 0x817, 0x3, 0x2, 
       0x2, 0x2, 0xb8, 0x856, 0x3, 0x2, 0x2, 0x2, 0xba, 0x858, 0x3, 0x2, 
       0x2, 0x2, 0xbc, 0x85c, 0x3, 0x2, 0x2, 0x2, 0xbe, 0x868, 0x3, 0x2, 
       0x2, 0x2, 0xc0, 0x86d, 0x3, 0x2, 0x2, 0x2, 0xc2, 0x874, 0x3, 0x2, 
       0x2, 0x2, 0xc4, 0x876, 0x3, 0x2, 0x2, 0x2, 0xc6, 0x87e, 0x3, 0x2, 
       0x2, 0x2, 0xc8, 0x887, 0x3, 0x2, 0x2, 0x2, 0xca, 0x892, 0x3, 0x2, 
       0x2, 0x2, 0xcc, 0x8a1, 0x3, 0x2, 0x2, 0x2, 0xce, 0x8a4, 0x3, 0x2, 
       0x2, 0x2, 0xd0, 0x8af, 0x3, 0x2, 0x2, 0x2, 0xd2, 0x8bf, 0x3, 0x2, 
       0x2, 0x2, 0xd4, 0x8c5, 0x3, 0x2, 0x2, 0x2, 0xd6, 0x8c7, 0x3, 0x2, 
       0x2, 0x2, 0xd8, 0x8d2, 0x3, 0x2, 0x2, 0x2, 0xda, 0x8e3, 0x3, 0x2, 
       0x2, 0x2, 0xdc, 0x8ea, 0x3, 0x2, 0x2, 0x2, 0xde, 0x8ec, 0x3, 0x2, 
       0x2, 0x2, 0xe0, 0x8f2, 0x3, 0x2, 0x2, 0x2, 0xe2, 0x928, 0x3, 0x2, 
       0x2, 0x2, 0xe4, 0x934, 0x3, 0x2, 0x2, 0x2, 0xe6, 0x964, 0x3, 0x2, 
       0x2, 0x2, 0xe8, 0x96a, 0x3, 0x2, 0x2, 0x2, 0xea, 0x988, 0x3, 0x2, 
       0x2, 0x2, 0xec, 0x98a, 0x3, 0x2, 0x2, 0x2, 0xee, 0x992, 0x3, 0x2, 
       0x2, 0x2, 0xf0, 0x9b3, 0x3, 0x2, 0x2, 0x2, 0xf2, 0x9ce, 0x3, 0x2, 
       0x2, 0x2, 0xf4, 0x9d1, 0x3, 0x2, 0x2, 0x2, 0xf6, 0x9dd, 0x3, 0x2, 
       0x2, 0x2, 0xf8, 0x9fd, 0x3, 0x2, 0x2, 0x2, 0xfa, 0xa09, 0x3, 0x2, 
       0x2, 0x2, 0xfc, 0xa0c, 0x3, 0x2, 0x2, 0x2, 0xfe, 0xa15, 0x3, 0x2, 
       0x2, 0x2, 0x100, 0xa26, 0x3, 0x2, 0x2, 0x2, 0x102, 0xa3a, 0x3, 0x2, 
       0x2, 0x2, 0x104, 0xa3c, 0x3, 0x2, 0x2, 0x2, 0x106, 0xa44, 0x3, 0x2, 
       0x2, 0x2, 0x108, 0xa48, 0x3, 0x2, 0x2, 0x2, 0x10a, 0xa4b, 0x3, 0x2, 
       0x2, 0x2, 0x10c, 0xa4e, 0x3, 0x2, 0x2, 0x2, 0x10e, 0xa68, 0x3, 0x2, 
       0x2, 0x2, 0x110, 0xa6a, 0x3, 0x2, 0x2, 0x2, 0x112, 0xaa8, 0x3, 0x2, 
       0x2, 0x2, 0x114, 0xab7, 0x3, 0x2, 0x2, 0x2, 0x116, 0xab9, 0x3, 0x2, 
       0x2, 0x2, 0x118, 0xad7, 0x3, 0x2, 0x2, 0x2, 0x11a, 0xad9, 0x3, 0x2, 
       0x2, 0x2, 0x11c, 0xae0, 0x3, 0x2, 0x2, 0x2, 0x11e, 0xb00, 0x3, 0x2, 
       0x2, 0x2, 0x120, 0xb02, 0x3, 0x2, 0x2, 0x2, 0x122, 0xb14, 0x3, 0x2, 
       0x2, 0x2, 0x124, 0xb2e, 0x3, 0x2, 0x2, 0x2, 0x126, 0xb34, 0x3, 0x2, 
       0x2, 0x2, 0x128, 0xb36, 0x3, 0x2, 0x2, 0x2, 0x12a, 0xb55, 0x3, 0x2, 
       0x2, 0x2, 0x12c, 0xb57, 0x3, 0x2, 0x2, 0x2, 0x12e, 0xb5b, 0x3, 0x2, 
       0x2, 0x2, 0x130, 0xb63, 0x3, 0x2, 0x2, 0x2, 0x132, 0xb6e, 0x3, 0x2, 
       0x2, 0x2, 0x134, 0xb72, 0x3, 0x2, 0x2, 0x2, 0x136, 0xb7d, 0x3, 0x2, 
       0x2, 0x2, 0x138, 0xb9c, 0x3, 0x2, 0x2, 0x2, 0x13a, 0xb9e, 0x3, 0x2, 
       0x2, 0x2, 0x13c, 0xba9, 0x3, 0x2, 0x2, 0x2, 0x13e, 0xbbf, 0x3, 0x2, 
       0x2, 0x2, 0x140, 0xbf2, 0x3, 0x2, 0x2, 0x2, 0x142, 0xbf4, 0x3, 0x2, 
       0x2, 0x2, 0x144, 0xbfc, 0x3, 0x2, 0x2, 0x2, 0x146, 0xc07, 0x3, 0x2, 
       0x2, 0x2, 0x148, 0xc0e, 0x3, 0x2, 0x2, 0x2, 0x14a, 0xc12, 0x3, 0x2, 
       0x2, 0x2, 0x14c, 0xc1c, 0x3, 0x2, 0x2, 0x2, 0x14e, 0xc24, 0x3, 0x2, 
       0x2, 0x2, 0x150, 0xc3c, 0x3, 0x2, 0x2, 0x2, 0x152, 0xc40, 0x3, 0x2, 
       0x2, 0x2, 0x154, 0xc42, 0x3, 0x2, 0x2, 0x2, 0x156, 0xc50, 0x3, 0x2, 
       0x2, 0x2, 0x158, 0xcaf, 0x3, 0x2, 0x2, 0x2, 0x15a, 0xcb5, 0x3, 0x2, 
       0x2, 0x2, 0x15c, 0xd87, 0x3, 0x2, 0x2, 0x2, 0x15e, 0xda2, 0x3, 0x2, 
       0x2, 0x2, 0x160, 0xdac, 0x3, 0x2, 0x2, 0x2, 0x162, 0xdae, 0x3, 0x2, 
       0x2, 0x2, 0x164, 0xdb0, 0x3, 0x2, 0x2, 0x2, 0x166, 0xdb2, 0x3, 0x2, 
       0x2, 0x2, 0x168, 0xdb4, 0x3, 0x2, 0x2, 0x2, 0x16a, 0xdb6, 0x3, 0x2, 
       0x2, 0x2, 0x16c, 0xdbb, 0x3, 0x2, 0x2, 0x2, 0x16e, 0xdc2, 0x3, 0x2, 
       0x2, 0x2, 0x170, 0xdc6, 0x3, 0x2, 0x2, 0x2, 0x172, 0xdcb, 0x3, 0x2, 
       0x2, 0x2, 0x174, 0xdd5, 0x3, 0x2, 0x2, 0x2, 0x176, 0xdde, 0x3, 0x2, 
       0x2, 0x2, 0x178, 0xde3, 0x3, 0x2, 0x2, 0x2, 0x17a, 0xe07, 0x3, 0x2, 
       0x2, 0x2, 0x17c, 0xe09, 0x3, 0x2, 0x2, 0x2, 0x17e, 0xe11, 0x3, 0x2, 
       0x2, 0x2, 0x180, 0xe1d, 0x3, 0x2, 0x2, 0x2, 0x182, 0xe25, 0x3, 0x2, 
       0x2, 0x2, 0x184, 0xe2e, 0x3, 0x2, 0x2, 0x2, 0x186, 0xe36, 0x3, 0x2, 
       0x2, 0x2, 0x188, 0xe40, 0x3, 0x2, 0x2, 0x2, 0x18a, 0xe45, 0x3, 0x2, 
       0x2, 0x2, 0x18c, 0xe4e, 0x3, 0x2, 0x2, 0x2, 0x18e, 0xe80, 0x3, 0x2, 
       0x2, 0x2, 0x190, 0xe92, 0x3, 0x2, 0x2, 0x2, 0x192, 0xe9b, 0x3, 0x2, 
       0x2, 0x2, 0x194, 0xe9d, 0x3, 0x2, 0x2, 0x2, 0x196, 0xea9, 0x3, 0x2, 
       0x2, 0x2, 0x198, 0xeab, 0x3, 0x2, 0x2, 0x2, 0x19a, 0xeb3, 0x3, 0x2, 
       0x2, 0x2, 0x19c, 0xeb7, 0x3, 0x2, 0x2, 0x2, 0x19e, 0xebd, 0x3, 0x2, 
       0x2, 0x2, 0x1a0, 0xec2, 0x3, 0x2, 0x2, 0x2, 0x1a2, 0xec4, 0x3, 0x2, 
       0x2, 0x2, 0x1a4, 0xeea, 0x3, 0x2, 0x2, 0x2, 0x1a6, 0xef3, 0x3, 0x2, 
       0x2, 0x2, 0x1a8, 0xef5, 0x3, 0x2, 0x2, 0x2, 0x1aa, 0xef7, 0x3, 0x2, 
       0x2, 0x2, 0x1ac, 0xef9, 0x3, 0x2, 0x2, 0x2, 0x1ae, 0x1b0, 0x5, 0x6, 
       0x4, 0x2, 0x1af, 0x1ae, 0x3, 0x2, 0x2, 0x2, 0x1b0, 0x1b1, 0x3, 0x2, 
       0x2, 0x2, 0x1b1, 0x1af, 0x3, 0x2, 0x2, 0x2, 0x1b1, 0x1b2, 0x3, 0x2, 
       0x2, 0x2, 0x1b2, 0x1b3, 0x3, 0x2, 0x2, 0x2, 0x1b3, 0x1b4, 0x7, 0x2, 
       0x2, 0x3, 0x1b4, 0x3, 0x3, 0x2, 0x2, 0x2, 0x1b5, 0x1b6, 0x5, 0x6, 
       0x4, 0x2, 0x1b6, 0x1b7, 0x7, 0x2, 0x2, 0x3, 0x1b7, 0x5, 0x3, 0x2, 
       0x2, 0x2, 0x1b8, 0x1bf, 0x5, 0x8, 0x5, 0x2, 0x1b9, 0x1bf, 0x5, 0x2e, 
       0x18, 0x2, 0x1ba, 0x1bf, 0x5, 0x28, 0x15, 0x2, 0x1bb, 0x1bf, 0x5, 
       0x2a, 0x16, 0x2, 0x1bc, 0x1bf, 0x5, 0x2c, 0x17, 0x2, 0x1bd, 0x1bf, 
       0x5, 0x30, 0x19, 0x2, 0x1be, 0x1b8, 0x3, 0x2, 0x2, 0x2, 0x1be, 0x1b9, 
       0x3, 0x2, 0x2, 0x2, 0x1be, 0x1ba, 0x3, 0x2, 0x2, 0x2, 0x1be, 0x1bb, 
       0x3, 0x2, 0x2, 0x2, 0x1be, 0x1bc, 0x3, 0x2, 0x2, 0x2, 0x1be, 0x1bd, 
       0x3, 0x2, 0x2, 0x2, 0x1bf, 0x7, 0x3, 0x2, 0x2, 0x2, 0x1c0, 0x1c2, 
       0x5, 0x4e, 0x28, 0x2, 0x1c1, 0x1c0, 0x3, 0x2, 0x2, 0x2, 0x1c1, 0x1c2, 
       0x3, 0x2, 0x2, 0x2, 0x1c2, 0x1c3, 0x3, 0x2, 0x2, 0x2, 0x1c3, 0x1c5, 
       0x5, 0xb6, 0x5c, 0x2, 0x1c4, 0x1c6, 0x5, 0x3e, 0x20, 0x2, 0x1c5, 
       0x1c4, 0x3, 0x2, 0x2, 0x2, 0x1c5, 0x1c6, 0x3, 0x2, 0x2, 0x2, 0x1c6, 
       0x1c8, 0x3, 0x2, 0x2, 0x2, 0x1c7, 0x1c9, 0x5, 0x44, 0x23, 0x2, 0x1c8, 
       0x1c7, 0x3, 0x2, 0x2, 0x2, 0x1c8, 0x1c9, 0x3, 0x2, 0x2, 0x2, 0x1c9, 
       0x1cb, 0x3, 0x2, 0x2, 0x2, 0x1ca, 0x1cc, 0x5, 0x42, 0x22, 0x2, 0x1cb, 
       0x1ca, 0x3, 0x2, 0x2, 0x2, 0x1cb, 0x1cc, 0x3, 0x2, 0x2, 0x2, 0x1cc, 
       0x9, 0x3, 0x2, 0x2, 0x2, 0x1cd, 0x1dc, 0x5, 0xc, 0x7, 0x2, 0x1ce, 
       0x1dc, 0x5, 0xe, 0x8, 0x2, 0x1cf, 0x1dc, 0x5, 0x20, 0x11, 0x2, 0x1d0, 
       0x1dc, 0x5, 0x22, 0x12, 0x2, 0x1d1, 0x1dc, 0x5, 0x24, 0x13, 0x2, 
       0x1d2, 0x1dc, 0x5, 0x26, 0x14, 0x2, 0x1d3, 0x1dc, 0x5, 0x10, 0x9, 
       0x2, 0x1d4, 0x1dc, 0x5, 0x12, 0xa, 0x2, 0x1d5, 0x1dc, 0x5, 0x14, 
       0xb, 0x2, 0x1d6, 0x1dc, 0x5, 0x16, 0xc, 0x2, 0x1d7, 0x1dc, 0x5, 0x18, 
       0xd, 0x2, 0x1d8, 0x1dc, 0x5, 0x1a, 0xe, 0x2, 0x1d9, 0x1dc, 0x5, 0x1c, 
       0xf, 0x2, 0x1da, 0x1dc, 0x5, 0x1e, 0x10, 0x2, 0x1db, 0x1cd, 0x3, 
       0x2, 0x2, 0x2, 0x1db, 0x1ce, 0x3, 0x2, 0x2, 0x2, 0x1db, 0x1cf, 0x3, 
       0x2, 0x2, 0x2, 0x1db, 0x1d0, 0x3, 0x2, 0x2, 0x2, 0x1db, 0x1d1, 0x3, 
       0x2, 0x2, 0x2, 0x1db, 0x1d2, 0x3, 0x2, 0x2, 0x2, 0x1db, 0x1d3, 0x3, 
       0x2, 0x2, 0x2, 0x1db, 0x1d4, 0x3, 0x2, 0x2, 0x2, 0x1db, 0x1d5, 0x3, 
       0x2, 0x2, 0x2, 0x1db, 0x1d6, 0x3, 0x2, 0x2, 0x2, 0x1db, 0x1d7, 0x3, 
       0x2, 0x2, 0x2, 0x1db, 0x1d8, 0x3, 0x2, 0x2, 0x2, 0x1db, 0x1d9, 0x3, 
       0x2, 0x2, 0x2, 0x1db, 0x1da, 0x3, 0x2, 0x2, 0x2, 0x1dc, 0xb, 0x3, 
       0x2, 0x2, 0x2, 0x1dd, 0x1df, 0x7, 0x11a, 0x2, 0x2, 0x1de, 0x1e0, 
       0x5, 0x46, 0x24, 0x2, 0x1df, 0x1de, 0x3, 0x2, 0x2, 0x2, 0x1df, 0x1e0, 
       0x3, 0x2, 0x2, 0x2, 0x1e0, 0x1e2, 0x3, 0x2, 0x2, 0x2, 0x1e1, 0x1e3, 
       0x5, 0x5c, 0x2f, 0x2, 0x1e2, 0x1e1, 0x3, 0x2, 0x2, 0x2, 0x1e2, 0x1e3, 
       0x3, 0x2, 0x2, 0x2, 0x1e3, 0x1e4, 0x3, 0x2, 0x2, 0x2, 0x1e4, 0x1e7, 
       0x5, 0x52, 0x2a, 0x2, 0x1e5, 0x1e6, 0x7, 0x34, 0x2, 0x2, 0x1e6, 0x1e8, 
       0x5, 0x56, 0x2c, 0x2, 0x1e7, 0x1e5, 0x3, 0x2, 0x2, 0x2, 0x1e7, 0x1e8, 
       0x3, 0x2, 0x2, 0x2, 0x1e8, 0xd, 0x3, 0x2, 0x2, 0x2, 0x1e9, 0x1eb, 
       0x7, 0x1c, 0x2, 0x2, 0x1ea, 0x1ec, 0x5, 0x46, 0x24, 0x2, 0x1eb, 0x1ea, 
       0x3, 0x2, 0x2, 0x2, 0x1eb, 0x1ec, 0x3, 0x2, 0x2, 0x2, 0x1ec, 0x1ee, 
       0x3, 0x2, 0x2, 0x2, 0x1ed, 0x1ef, 0x5, 0x5c, 0x2f, 0x2, 0x1ee, 0x1ed, 
       0x3, 0x2, 0x2, 0x2, 0x1ee, 0x1ef, 0x3, 0x2, 0x2, 0x2, 0x1ef, 0x1f0, 
       0x3, 0x2, 0x2, 0x2, 0x1f0, 0x1f1, 0x5, 0x54, 0x2b, 0x2, 0x1f1, 0xf, 
       0x3, 0x2, 0x2, 0x2, 0x1f2, 0x1f3, 0x7, 0x25, 0x2, 0x2, 0x1f3, 0x1f4, 
       0x7, 0x3c, 0x2, 0x2, 0x1f4, 0x1f6, 0x7, 0x128, 0x2, 0x2, 0x1f5, 0x1f7, 
       0x5, 0x4a, 0x26, 0x2, 0x1f6, 0x1f5, 0x3, 0x2, 0x2, 0x2, 0x1f6, 0x1f7, 
       0x3, 0x2, 0x2, 0x2, 0x1f7, 0x1f9, 0x3, 0x2, 0x2, 0x2, 0x1f8, 0x1fa, 
       0x5, 0x5c, 0x2f, 0x2, 0x1f9, 0x1f8, 0x3, 0x2, 0x2, 0x2, 0x1f9, 0x1fa, 
       0x3, 0x2, 0x2, 0x2, 0x1fa, 0x1fb, 0x3, 0x2, 0x2, 0x2, 0x1fb, 0x1fd, 
       0x5, 0x38, 0x1d, 0x2, 0x1fc, 0x1fe, 0x5, 0x34, 0x1b, 0x2, 0x1fd, 
       0x1fc, 0x3, 0x2, 0x2, 0x2, 0x1fd, 0x1fe, 0x3, 0x2, 0x2, 0x2, 0x1fe, 
       0x200, 0x3, 0x2, 0x2, 0x2, 0x1ff, 0x201, 0x5, 0x3a, 0x1e, 0x2, 0x200, 
       0x1ff, 0x3, 0x2, 0x2, 0x2, 0x200, 0x201, 0x3, 0x2, 0x2, 0x2, 0x201, 
       0x202, 0x3, 0x2, 0x2, 0x2, 0x202, 0x204, 0x5, 0x3c, 0x1f, 0x2, 0x203, 
       0x205, 0x5, 0x64, 0x33, 0x2, 0x204, 0x203, 0x3, 0x2, 0x2, 0x2, 0x204, 
       0x205, 0x3, 0x2, 0x2, 0x2, 0x205, 0x11, 0x3, 0x2, 0x2, 0x2, 0x206, 
       0x207, 0x7, 0xe9, 0x2, 0x2, 0x207, 0x208, 0x7, 0x57, 0x2, 0x2, 0x208, 
       0x20b, 0x5, 0x6e, 0x38, 0x2, 0x209, 0x20a, 0x7, 0x8f, 0x2, 0x2, 0x20a, 
       0x20c, 0x5, 0x4a, 0x26, 0x2, 0x20b, 0x209, 0x3, 0x2, 0x2, 0x2, 0x20b, 
       0x20c, 0x3, 0x2, 0x2, 0x2, 0x20c, 0x13, 0x3, 0x2, 0x2, 0x2, 0x20d, 
       0x20e, 0x7, 0x3a, 0x2, 0x2, 0x20e, 0x20f, 0x7, 0x57, 0x2, 0x2, 0x20f, 
       0x212, 0x5, 0x76, 0x3c, 0x2, 0x210, 0x211, 0x7, 0x8f, 0x2, 0x2, 0x211, 
       0x213, 0x5, 0x4a, 0x26, 0x2, 0x212, 0x210, 0x3, 0x2, 0x2, 0x2, 0x212, 
       0x213, 0x3, 0x2, 0x2, 0x2, 0x213, 0x15, 0x3, 0x2, 0x2, 0x2, 0x214, 
       0x215, 0x7, 0x77, 0x2, 0x2, 0x215, 0x216, 0x7, 0x57, 0x2, 0x2, 0x216, 
       0x219, 0x5, 0x66, 0x34, 0x2, 0x217, 0x218, 0x7, 0x99, 0x2, 0x2, 0x218, 
       0x21a, 0x7, 0x7e, 0x2, 0x2, 0x219, 0x217, 0x3, 0x2, 0x2, 0x2, 0x219, 
       0x21a, 0x3, 0x2, 0x2, 0x2, 0x21a, 0x21d, 0x3, 0x2, 0x2, 0x2, 0x21b, 
       0x21c, 0x7, 0x8f, 0x2, 0x2, 0x21c, 0x21e, 0x5, 0x4a, 0x26, 0x2, 0x21d, 
       0x21b, 0x3, 0x2, 0x2, 0x2, 0x21d, 0x21e, 0x3, 0x2, 0x2, 0x2, 0x21e, 
       0x17, 0x3, 0x2, 0x2, 0x2, 0x21f, 0x220, 0x7, 0x77, 0x2, 0x2, 0x220, 
       0x221, 0x7, 0xf6, 0x2, 0x2, 0x221, 0x222, 0x7, 0x99, 0x2, 0x2, 0x222, 
       0x223, 0x9, 0x2, 0x2, 0x2, 0x223, 0x226, 0x9, 0x3, 0x2, 0x2, 0x224, 
       0x225, 0x7, 0xc8, 0x2, 0x2, 0x225, 0x227, 0x5, 0x66, 0x34, 0x2, 0x226, 
       0x224, 0x3, 0x2, 0x2, 0x2, 0x226, 0x227, 0x3, 0x2, 0x2, 0x2, 0x227, 
       0x22a, 0x3, 0x2, 0x2, 0x2, 0x228, 0x229, 0x7, 0x8f, 0x2, 0x2, 0x229, 
       0x22b, 0x5, 0x4a, 0x26, 0x2, 0x22a, 0x228, 0x3, 0x2, 0x2, 0x2, 0x22a, 
       0x22b, 0x3, 0x2, 0x2, 0x2, 0x22b, 0x19, 0x3, 0x2, 0x2, 0x2, 0x22c, 
       0x22d, 0x7, 0x13, 0x2, 0x2, 0x22d, 0x22e, 0x9, 0x3, 0x2, 0x2, 0x22e, 
       0x231, 0x5, 0x64, 0x33, 0x2, 0x22f, 0x230, 0x7, 0x8f, 0x2, 0x2, 0x230, 
       0x232, 0x5, 0x4a, 0x26, 0x2, 0x231, 0x22f, 0x3, 0x2, 0x2, 0x2, 0x231, 
       0x232, 0x3, 0x2, 0x2, 0x2, 0x232, 0x1b, 0x3, 0x2, 0x2, 0x2, 0x233, 
       0x235, 0x7, 0x31, 0x2, 0x2, 0x234, 0x236, 0x7, 0xeb, 0x2, 0x2, 0x235, 
       0x234, 0x3, 0x2, 0x2, 0x2, 0x235, 0x236, 0x3, 0x2, 0x2, 0x2, 0x236, 
       0x237, 0x3, 0x2, 0x2, 0x2, 0x237, 0x23a, 0x5, 0x58, 0x2d, 0x2, 0x238, 
       0x239, 0x7, 0x32, 0x2, 0x2, 0x239, 0x23b, 0x7, 0x14b, 0x2, 0x2, 0x23a, 
       0x238, 0x3, 0x2, 0x2, 0x2, 0x23a, 0x23b, 0x3, 0x2, 0x2, 0x2, 0x23b, 
       0x23e, 0x3, 0x2, 0x2, 0x2, 0x23c, 0x23d, 0x7, 0x8f, 0x2, 0x2, 0x23d, 
       0x23f, 0x5, 0x4a, 0x26, 0x2, 0x23e, 0x23c, 0x3, 0x2, 0x2, 0x2, 0x23e, 
       0x23f, 0x3, 0x2, 0x2, 0x2, 0x23f, 0x1d, 0x3, 0x2, 0x2, 0x2, 0x240, 
       0x243, 0x7, 0x14, 0x2, 0x2, 0x241, 0x242, 0x7, 0x14b, 0x2, 0x2, 0x242, 
       0x244, 0x9, 0x4, 0x2, 0x2, 0x243, 0x241, 0x3, 0x2, 0x2, 0x2, 0x243, 
       0x244, 0x3, 0x2, 0x2, 0x2, 0x244, 0x247, 0x3, 0x2, 0x2, 0x2, 0x245, 
       0x246, 0x7, 0x8f, 0x2, 0x2, 0x246, 0x248, 0x5, 0x4a, 0x26, 0x2, 0x247, 
       0x245, 0x3, 0x2, 0x2, 0x2, 0x247, 0x248, 0x3, 0x2, 0x2, 0x2, 0x248, 
       0x24c, 0x3, 0x2, 0x2, 0x2, 0x249, 0x24d, 0x5, 0x5c, 0x2f, 0x2, 0x24a, 
       0x24b, 0x7, 0x18, 0x2, 0x2, 0x24b, 0x24d, 0x5, 0x68, 0x35, 0x2, 0x24c, 
       0x249, 0x3, 0x2, 0x2, 0x2, 0x24c, 0x24a, 0x3, 0x2, 0x2, 0x2, 0x24c, 
       0x24d, 0x3, 0x2, 0x2, 0x2, 0x24d, 0x250, 0x3, 0x2, 0x2, 0x2, 0x24e, 
       0x24f, 0x9, 0x3, 0x2, 0x2, 0x24f, 0x251, 0x9, 0x5, 0x2, 0x2, 0x250, 
       0x24e, 0x3, 0x2, 0x2, 0x2, 0x250, 0x251, 0x3, 0x2, 0x2, 0x2, 0x251, 
       0x1f, 0x3, 0x2, 0x2, 0x2, 0x252, 0x253, 0x7, 0x22, 0x2, 0x2, 0x253, 
       0x255, 0x5, 0x46, 0x24, 0x2, 0x254, 0x256, 0x5, 0x5a, 0x2e, 0x2, 
       0x255, 0x254, 0x3, 0x2, 0x2, 0x2, 0x255, 0x256, 0x3, 0x2, 0x2, 0x2, 
       0x256, 0x259, 0x3, 0x2, 0x2, 0x2, 0x257, 0x258, 0x7, 0x49, 0x2, 0x2, 
       0x258, 0x25a, 0x5, 0x66, 0x34, 0x2, 0x259, 0x257, 0x3, 0x2, 0x2, 
       0x2, 0x259, 0x25a, 0x3, 0x2, 0x2, 0x2, 0x25a, 0x25d, 0x3, 0x2, 0x2, 
       0x2, 0x25b, 0x25c, 0x7, 0x18, 0x2, 0x2, 0x25c, 0x25e, 0x5, 0x68, 
       0x35, 0x2, 0x25d, 0x25b, 0x3, 0x2, 0x2, 0x2, 0x25d, 0x25e, 0x3, 0x2, 
       0x2, 0x2, 0x25e, 0x21, 0x3, 0x2, 0x2, 0x2, 0x25f, 0x260, 0x7, 0x60, 
       0x2, 0x2, 0x260, 0x261, 0x5, 0x54, 0x2b, 0x2, 0x261, 0x23, 0x3, 0x2, 
       0x2, 0x2, 0x262, 0x264, 0x7, 0x60, 0x2, 0x2, 0x263, 0x265, 0x7, 0x68, 
       0x2, 0x2, 0x264, 0x263, 0x3, 0x2, 0x2, 0x2, 0x264, 0x265, 0x3, 0x2, 
       0x2, 0x2, 0x265, 0x266, 0x3, 0x2, 0x2, 0x2, 0x266, 0x267, 0x5, 0x8a, 
       0x46, 0x2, 0x267, 0x268, 0x7, 0xf7, 0x2, 0x2, 0x268, 0x269, 0x5, 
       0x76, 0x3c, 0x2, 0x269, 0x25, 0x3, 0x2, 0x2, 0x2, 0x26a, 0x26c, 0x7, 
       0xb3, 0x2, 0x2, 0x26b, 0x26d, 0x5, 0x3a, 0x1e, 0x2, 0x26c, 0x26b, 
       0x3, 0x2, 0x2, 0x2, 0x26c, 0x26d, 0x3, 0x2, 0x2, 0x2, 0x26d, 0x26e, 
       0x3, 0x2, 0x2, 0x2, 0x26e, 0x270, 0x5, 0x3c, 0x1f, 0x2, 0x26f, 0x271, 
       0x5, 0x64, 0x33, 0x2, 0x270, 0x26f, 0x3, 0x2, 0x2, 0x2, 0x270, 0x271, 
       0x3, 0x2, 0x2, 0x2, 0x271, 0x274, 0x3, 0x2, 0x2, 0x2, 0x272, 0x273, 
       0x7, 0x57, 0x2, 0x2, 0x273, 0x275, 0x5, 0x36, 0x1c, 0x2, 0x274, 0x272, 
       0x3, 0x2, 0x2, 0x2, 0x274, 0x275, 0x3, 0x2, 0x2, 0x2, 0x275, 0x27, 
       0x3, 0x2, 0x2, 0x2, 0x276, 0x278, 0x7, 0x1d, 0x2, 0x2, 0x277, 0x279, 
       0x5, 0x46, 0x24, 0x2, 0x278, 0x277, 0x3, 0x2, 0x2, 0x2, 0x278, 0x279, 
       0x3, 0x2, 0x2, 0x2, 0x279, 0x27b, 0x3, 0x2, 0x2, 0x2, 0x27a, 0x27c, 
       0x5, 0x5c, 0x2f, 0x2, 0x27b, 0x27a, 0x3, 0x2, 0x2, 0x2, 0x27b, 0x27c, 
       0x3, 0x2, 0x2, 0x2, 0x27c, 0x27d, 0x3, 0x2, 0x2, 0x2, 0x27d, 0x27e, 
       0x7, 0x12a, 0x2, 0x2, 0x27e, 0x280, 0x5, 0x56, 0x2c, 0x2, 0x27f, 
       0x281, 0x5, 0x64, 0x33, 0x2, 0x280, 0x27f, 0x3, 0x2, 0x2, 0x2, 0x280, 
       0x281, 0x3, 0x2, 0x2, 0x2, 0x281, 0x29, 0x3, 0x2, 0x2, 0x2, 0x282, 
       0x283, 0x7, 0x23, 0x2, 0x2, 0x283, 0x284, 0x7, 0x14b, 0x2, 0x2, 0x284, 
       0x287, 0x9, 0x4, 0x2, 0x2, 0x285, 0x286, 0x7, 0x8f, 0x2, 0x2, 0x286, 
       0x288, 0x5, 0x46, 0x24, 0x2, 0x287, 0x285, 0x3, 0x2, 0x2, 0x2, 0x287, 
       0x288, 0x3, 0x2, 0x2, 0x2, 0x288, 0x28a, 0x3, 0x2, 0x2, 0x2, 0x289, 
       0x28b, 0x7, 0x1f, 0x2, 0x2, 0x28a, 0x289, 0x3, 0x2, 0x2, 0x2, 0x28a, 
       0x28b, 0x3, 0x2, 0x2, 0x2, 0x28b, 0x28e, 0x3, 0x2, 0x2, 0x2, 0x28c, 
       0x28d, 0x7, 0x24, 0x2, 0x2, 0x28d, 0x28f, 0x7, 0x147, 0x2, 0x2, 0x28e, 
       0x28c, 0x3, 0x2, 0x2, 0x2, 0x28e, 0x28f, 0x3, 0x2, 0x2, 0x2, 0x28f, 
       0x29c, 0x3, 0x2, 0x2, 0x2, 0x290, 0x292, 0x7, 0x23, 0x2, 0x2, 0x291, 
       0x293, 0x5, 0x46, 0x24, 0x2, 0x292, 0x291, 0x3, 0x2, 0x2, 0x2, 0x292, 
       0x293, 0x3, 0x2, 0x2, 0x2, 0x293, 0x295, 0x3, 0x2, 0x2, 0x2, 0x294, 
       0x296, 0x7, 0x1f, 0x2, 0x2, 0x295, 0x294, 0x3, 0x2, 0x2, 0x2, 0x295, 
       0x296, 0x3, 0x2, 0x2, 0x2, 0x296, 0x299, 0x3, 0x2, 0x2, 0x2, 0x297, 
       0x298, 0x7, 0x24, 0x2, 0x2, 0x298, 0x29a, 0x7, 0x147, 0x2, 0x2, 0x299, 
       0x297, 0x3, 0x2, 0x2, 0x2, 0x299, 0x29a, 0x3, 0x2, 0x2, 0x2, 0x29a, 
       0x29c, 0x3, 0x2, 0x2, 0x2, 0x29b, 0x282, 0x3, 0x2, 0x2, 0x2, 0x29b, 
       0x290, 0x3, 0x2, 0x2, 0x2, 0x29c, 0x2b, 0x3, 0x2, 0x2, 0x2, 0x29d, 
       0x29f, 0x7, 0x25, 0x2, 0x2, 0x29e, 0x2a0, 0x5, 0x4a, 0x26, 0x2, 0x29f, 
       0x29e, 0x3, 0x2, 0x2, 0x2, 0x29f, 0x2a0, 0x3, 0x2, 0x2, 0x2, 0x2a0, 
       0x2a2, 0x3, 0x2, 0x2, 0x2, 0x2a1, 0x2a3, 0x5, 0x5c, 0x2f, 0x2, 0x2a2, 
       0x2a1, 0x3, 0x2, 0x2, 0x2, 0x2a2, 0x2a3, 0x3, 0x2, 0x2, 0x2, 0x2a3, 
       0x2a4, 0x3, 0x2, 0x2, 0x2, 0x2a4, 0x2a6, 0x5, 0x38, 0x1d, 0x2, 0x2a5, 
       0x2a7, 0x5, 0x34, 0x1b, 0x2, 0x2a6, 0x2a5, 0x3, 0x2, 0x2, 0x2, 0x2a6, 
       0x2a7, 0x3, 0x2, 0x2, 0x2, 0x2a7, 0x2a9, 0x3, 0x2, 0x2, 0x2, 0x2a8, 
       0x2aa, 0x5, 0x3a, 0x1e, 0x2, 0x2a9, 0x2a8, 0x3, 0x2, 0x2, 0x2, 0x2a9, 
       0x2aa, 0x3, 0x2, 0x2, 0x2, 0x2aa, 0x2ab, 0x3, 0x2, 0x2, 0x2, 0x2ab, 
       0x2ad, 0x5, 0x3c, 0x1f, 0x2, 0x2ac, 0x2ae, 0x5, 0x64, 0x33, 0x2, 
       0x2ad, 0x2ac, 0x3, 0x2, 0x2, 0x2, 0x2ad, 0x2ae, 0x3, 0x2, 0x2, 0x2, 
       0x2ae, 0x2d, 0x3, 0x2, 0x2, 0x2, 0x2af, 0x2b1, 0x7, 0x1e, 0x2, 0x2, 
       0x2b0, 0x2b2, 0x5, 0x46, 0x24, 0x2, 0x2b1, 0x2b0, 0x3, 0x2, 0x2, 
       0x2, 0x2b1, 0x2b2, 0x3, 0x2, 0x2, 0x2, 0x2b2, 0x2b4, 0x3, 0x2, 0x2, 
       0x2, 0x2b3, 0x2b5, 0x5, 0x5c, 0x2f, 0x2, 0x2b4, 0x2b3, 0x3, 0x2, 
       0x2, 0x2, 0x2b4, 0x2b5, 0x3, 0x2, 0x2, 0x2, 0x2b5, 0x2b6, 0x3, 0x2, 
       0x2, 0x2, 0x2b6, 0x2b7, 0x7, 0x12a, 0x2, 0x2, 0x2b7, 0x2b9, 0x5, 
       0x56, 0x2c, 0x2, 0x2b8, 0x2ba, 0x5, 0x64, 0x33, 0x2, 0x2b9, 0x2b8, 
       0x3, 0x2, 0x2, 0x2, 0x2b9, 0x2ba, 0x3, 0x2, 0x2, 0x2, 0x2ba, 0x2bd, 
       0x3, 0x2, 0x2, 0x2, 0x2bb, 0x2bc, 0x7, 0x34, 0x2, 0x2, 0x2bc, 0x2be, 
       0x5, 0x56, 0x2c, 0x2, 0x2bd, 0x2bb, 0x3, 0x2, 0x2, 0x2, 0x2bd, 0x2be, 
       0x3, 0x2, 0x2, 0x2, 0x2be, 0x2f, 0x3, 0x2, 0x2, 0x2, 0x2bf, 0x2c1, 
       0x5, 0x4e, 0x28, 0x2, 0x2c0, 0x2bf, 0x3, 0x2, 0x2, 0x2, 0x2c0, 0x2c1, 
       0x3, 0x2, 0x2, 0x2, 0x2c1, 0x2c2, 0x3, 0x2, 0x2, 0x2, 0x2c2, 0x2c4, 
       0x7, 0x33, 0x2, 0x2, 0x2c3, 0x2c5, 0x5, 0x46, 0x24, 0x2, 0x2c4, 0x2c3, 
       0x3, 0x2, 0x2, 0x2, 0x2c4, 0x2c5, 0x3, 0x2, 0x2, 0x2, 0x2c5, 0x2c6, 
       0x3, 0x2, 0x2, 0x2, 0x2c6, 0x2c7, 0x7, 0x12a, 0x2, 0x2, 0x2c7, 0x2c9, 
       0x5, 0x56, 0x2c, 0x2, 0x2c8, 0x2ca, 0x5, 0x64, 0x33, 0x2, 0x2c9, 
       0x2c8, 0x3, 0x2, 0x2, 0x2, 0x2c9, 0x2ca, 0x3, 0x2, 0x2, 0x2, 0x2ca, 
       0x31, 0x3, 0x2, 0x2, 0x2, 0x2cb, 0x2cc, 0x7, 0x30, 0x2, 0x2, 0x2cc, 
       0x2ce, 0x5, 0x56, 0x2c, 0x2, 0x2cd, 0x2cf, 0x5, 0x64, 0x33, 0x2, 
       0x2ce, 0x2cd, 0x3, 0x2, 0x2, 0x2, 0x2ce, 0x2cf, 0x3, 0x2, 0x2, 0x2, 
       0x2cf, 0x33, 0x3, 0x2, 0x2, 0x2, 0x2d0, 0x2d1, 0x7, 0x2a, 0x2, 0x2, 
       0x2d1, 0x35, 0x3, 0x2, 0x2, 0x2, 0x2d2, 0x2d5, 0x5, 0x76, 0x3c, 0x2, 
       0x2d3, 0x2d5, 0x5, 0x66, 0x34, 0x2, 0x2d4, 0x2d2, 0x3, 0x2, 0x2, 
       0x2, 0x2d4, 0x2d3, 0x3, 0x2, 0x2, 0x2, 0x2d5, 0x37, 0x3, 0x2, 0x2, 
       0x2, 0x2d6, 0x2d7, 0x9, 0x6, 0x2, 0x2, 0x2d7, 0x39, 0x3, 0x2, 0x2, 
       0x2, 0x2d8, 0x2d9, 0x9, 0x7, 0x2, 0x2, 0x2d9, 0x3b, 0x3, 0x2, 0x2, 
       0x2, 0x2da, 0x2db, 0x7, 0x147, 0x2, 0x2, 0x2db, 0x3d, 0x3, 0x2, 0x2, 
       0x2, 0x2dc, 0x2de, 0x7, 0xac, 0x2, 0x2, 0x2dd, 0x2dc, 0x3, 0x2, 0x2, 
       0x2, 0x2dd, 0x2de, 0x3, 0x2, 0x2, 0x2, 0x2de, 0x2e2, 0x3, 0x2, 0x2, 
       0x2, 0x2df, 0x2e3, 0x7, 0x19, 0x2, 0x2, 0x2e0, 0x2e1, 0x7, 0x2c, 
       0x2, 0x2, 0x2e1, 0x2e3, 0x7, 0x2b, 0x2, 0x2, 0x2e2, 0x2df, 0x3, 0x2, 
       0x2, 0x2, 0x2e2, 0x2e0, 0x3, 0x2, 0x2, 0x2, 0x2e3, 0x2e5, 0x3, 0x2, 
       0x2, 0x2, 0x2e4, 0x2e6, 0x5, 0x64, 0x33, 0x2, 0x2e5, 0x2e4, 0x3, 
       0x2, 0x2, 0x2, 0x2e5, 0x2e6, 0x3, 0x2, 0x2, 0x2, 0x2e6, 0x309, 0x3, 
       0x2, 0x2, 0x2, 0x2e7, 0x2e9, 0x7, 0xac, 0x2, 0x2, 0x2e8, 0x2e7, 0x3, 
       0x2, 0x2, 0x2, 0x2e8, 0x2e9, 0x3, 0x2, 0x2, 0x2, 0x2e9, 0x2eb, 0x3, 
       0x2, 0x2, 0x2, 0x2ea, 0x2ec, 0x7, 0x2d, 0x2, 0x2, 0x2eb, 0x2ea, 0x3, 
       0x2, 0x2, 0x2, 0x2eb, 0x2ec, 0x3, 0x2, 0x2, 0x2, 0x2ec, 0x2ed, 0x3, 
       0x2, 0x2, 0x2, 0x2ed, 0x2ef, 0x7, 0x2b, 0x2, 0x2, 0x2ee, 0x2f0, 0x5, 
       0x5c, 0x2f, 0x2, 0x2ef, 0x2ee, 0x3, 0x2, 0x2, 0x2, 0x2ef, 0x2f0, 
       0x3, 0x2, 0x2, 0x2, 0x2f0, 0x2f2, 0x3, 0x2, 0x2, 0x2, 0x2f1, 0x2f3, 
       0x5, 0x34, 0x1b, 0x2, 0x2f2, 0x2f1, 0x3, 0x2, 0x2, 0x2, 0x2f2, 0x2f3, 
       0x3, 0x2, 0x2, 0x2, 0x2f3, 0x2f5, 0x3, 0x2, 0x2, 0x2, 0x2f4, 0x2f6, 
       0x5, 0x64, 0x33, 0x2, 0x2f5, 0x2f4, 0x3, 0x2, 0x2, 0x2, 0x2f5, 0x2f6, 
       0x3, 0x2, 0x2, 0x2, 0x2f6, 0x309, 0x3, 0x2, 0x2, 0x2, 0x2f7, 0x2f9, 
       0x7, 0xac, 0x2, 0x2, 0x2f8, 0x2f7, 0x3, 0x2, 0x2, 0x2, 0x2f8, 0x2f9, 
       0x3, 0x2, 0x2, 0x2, 0x2f9, 0x2fa, 0x3, 0x2, 0x2, 0x2, 0x2fa, 0x2fb, 
       0x7, 0x2e, 0x2, 0x2, 0x2fb, 0x2fd, 0x7, 0x2b, 0x2, 0x2, 0x2fc, 0x2fe, 
       0x5, 0x40, 0x21, 0x2, 0x2fd, 0x2fc, 0x3, 0x2, 0x2, 0x2, 0x2fd, 0x2fe, 
       0x3, 0x2, 0x2, 0x2, 0x2fe, 0x300, 0x3, 0x2, 0x2, 0x2, 0x2ff, 0x301, 
       0x5, 0x5c, 0x2f, 0x2, 0x300, 0x2ff, 0x3, 0x2, 0x2, 0x2, 0x300, 0x301, 
       0x3, 0x2, 0x2, 0x2, 0x301, 0x303, 0x3, 0x2, 0x2, 0x2, 0x302, 0x304, 
       0x5, 0x34, 0x1b, 0x2, 0x303, 0x302, 0x3, 0x2, 0x2, 0x2, 0x303, 0x304, 
       0x3, 0x2, 0x2, 0x2, 0x304, 0x306, 0x3, 0x2, 0x2, 0x2, 0x305, 0x307, 
       0x5, 0x64, 0x33, 0x2, 0x306, 0x305, 0x3, 0x2, 0x2, 0x2, 0x306, 0x307, 
       0x3, 0x2, 0x2, 0x2, 0x307, 0x309, 0x3, 0x2, 0x2, 0x2, 0x308, 0x2dd, 
       0x3, 0x2, 0x2, 0x2, 0x308, 0x2e8, 0x3, 0x2, 0x2, 0x2, 0x308, 0x2f8, 
       0x3, 0x2, 0x2, 0x2, 0x309, 0x3f, 0x3, 0x2, 0x2, 0x2, 0x30a, 0x30b, 
       0x7, 0x147, 0x2, 0x2, 0x30b, 0x41, 0x3, 0x2, 0x2, 0x2, 0x30c, 0x30d, 
       0x7, 0x2f, 0x2, 0x2, 0x30d, 0x310, 0x7, 0x36, 0x2, 0x2, 0x30e, 0x30f, 
       0x7, 0x41, 0x2, 0x2, 0x30f, 0x311, 0x5, 0x96, 0x4c, 0x2, 0x310, 0x30e, 
       0x3, 0x2, 0x2, 0x2, 0x310, 0x311, 0x3, 0x2, 0x2, 0x2, 0x311, 0x31c, 
       0x3, 0x2, 0x2, 0x2, 0x312, 0x314, 0x7, 0x2f, 0x2, 0x2, 0x313, 0x315, 
       0x7, 0xb4, 0x2, 0x2, 0x314, 0x313, 0x3, 0x2, 0x2, 0x2, 0x314, 0x315, 
       0x3, 0x2, 0x2, 0x2, 0x315, 0x316, 0x3, 0x2, 0x2, 0x2, 0x316, 0x319, 
       0x7, 0x35, 0x2, 0x2, 0x317, 0x318, 0x7, 0x41, 0x2, 0x2, 0x318, 0x31a, 
       0x5, 0x96, 0x4c, 0x2, 0x319, 0x317, 0x3, 0x2, 0x2, 0x2, 0x319, 0x31a, 
       0x3, 0x2, 0x2, 0x2, 0x31a, 0x31c, 0x3, 0x2, 0x2, 0x2, 0x31b, 0x30c, 
       0x3, 0x2, 0x2, 0x2, 0x31b, 0x312, 0x3, 0x2, 0x2, 0x2, 0x31c, 0x43, 
       0x3, 0x2, 0x2, 0x2, 0x31d, 0x31e, 0x7, 0x1a, 0x2, 0x2, 0x31e, 0x45, 
       0x3, 0x2, 0x2, 0x2, 0x31f, 0x324, 0x5, 0x4a, 0x26, 0x2, 0x320, 0x321, 
       0x7, 0x3, 0x2, 0x2, 0x321, 0x323, 0x5, 0x4a, 0x26, 0x2, 0x322, 0x320, 
       0x3, 0x2, 0x2, 0x2, 0x323, 0x326, 0x3, 0x2, 0x2, 0x2, 0x324, 0x322, 
       0x3, 0x2, 0x2, 0x2, 0x324, 0x325, 0x3, 0x2, 0x2, 0x2, 0x325, 0x330, 
       0x3, 0x2, 0x2, 0x2, 0x326, 0x324, 0x3, 0x2, 0x2, 0x2, 0x327, 0x32c, 
       0x5, 0x48, 0x25, 0x2, 0x328, 0x329, 0x7, 0x3, 0x2, 0x2, 0x329, 0x32b, 
       0x5, 0x48, 0x25, 0x2, 0x32a, 0x328, 0x3, 0x2, 0x2, 0x2, 0x32b, 0x32e, 
       0x3, 0x2, 0x2, 0x2, 0x32c, 0x32a, 0x3, 0x2, 0x2, 0x2, 0x32c, 0x32d, 
       0x3, 0x2, 0x2, 0x2, 0x32d, 0x330, 0x3, 0x2, 0x2, 0x2, 0x32e, 0x32c, 
       0x3, 0x2, 0x2, 0x2, 0x32f, 0x31f, 0x3, 0x2, 0x2, 0x2, 0x32f, 0x327, 
       0x3, 0x2, 0x2, 0x2, 0x330, 0x47, 0x3, 0x2, 0x2, 0x2, 0x331, 0x332, 
       0x5, 0x96, 0x4c, 0x2, 0x332, 0x333, 0x9, 0x8, 0x2, 0x2, 0x333, 0x334, 
       0x5, 0x4a, 0x26, 0x2, 0x334, 0x49, 0x3, 0x2, 0x2, 0x2, 0x335, 0x337, 
       0x5, 0x96, 0x4c, 0x2, 0x336, 0x338, 0x5, 0x4c, 0x27, 0x2, 0x337, 
       0x336, 0x3, 0x2, 0x2, 0x2, 0x337, 0x338, 0x3, 0x2, 0x2, 0x2, 0x338, 
       0x33e, 0x3, 0x2, 0x2, 0x2, 0x339, 0x33a, 0x7, 0x5, 0x2, 0x2, 0x33a, 
       0x33b, 0x5, 0x8, 0x5, 0x2, 0x33b, 0x33c, 0x7, 0x6, 0x2, 0x2, 0x33c, 
       0x33e, 0x3, 0x2, 0x2, 0x2, 0x33d, 0x335, 0x3, 0x2, 0x2, 0x2, 0x33d, 
       0x339, 0x3, 0x2, 0x2, 0x2, 0x33e, 0x4b, 0x3, 0x2, 0x2, 0x2, 0x33f, 
       0x342, 0x7, 0x7, 0x2, 0x2, 0x340, 0x343, 0x7, 0x14b, 0x2, 0x2, 0x341, 
       0x343, 0x5, 0x96, 0x4c, 0x2, 0x342, 0x340, 0x3, 0x2, 0x2, 0x2, 0x342, 
       0x341, 0x3, 0x2, 0x2, 0x2, 0x343, 0x344, 0x3, 0x2, 0x2, 0x2, 0x344, 
       0x345, 0x7, 0x8, 0x2, 0x2, 0x345, 0x4d, 0x3, 0x2, 0x2, 0x2, 0x346, 
       0x347, 0x5, 0x96, 0x4c, 0x2, 0x347, 0x348, 0x5, 0x50, 0x29, 0x2, 
       0x348, 0x4f, 0x3, 0x2, 0x2, 0x2, 0x349, 0x34a, 0x7, 0x133, 0x2, 0x2, 
       0x34a, 0x51, 0x3, 0x2, 0x2, 0x2, 0x34b, 0x34c, 0x7, 0x12a, 0x2, 0x2, 
       0x34c, 0x34e, 0x5, 0x56, 0x2c, 0x2, 0x34d, 0x34f, 0x5, 0x64, 0x33, 
       0x2, 0x34e, 0x34d, 0x3, 0x2, 0x2, 0x2, 0x34e, 0x34f, 0x3, 0x2, 0x2, 
       0x2, 0x34f, 0x352, 0x3, 0x2, 0x2, 0x2, 0x350, 0x351, 0x7, 0xf7, 0x2, 
       0x2, 0x351, 0x353, 0x5, 0x70, 0x39, 0x2, 0x352, 0x350, 0x3, 0x2, 
       0x2, 0x2, 0x352, 0x353, 0x3, 0x2, 0x2, 0x2, 0x353, 0x53, 0x3, 0x2, 
       0x2, 0x2, 0x354, 0x355, 0x7, 0x12a, 0x2, 0x2, 0x355, 0x357, 0x5, 
       0x56, 0x2c, 0x2, 0x356, 0x358, 0x5, 0x64, 0x33, 0x2, 0x357, 0x356, 
       0x3, 0x2, 0x2, 0x2, 0x357, 0x358, 0x3, 0x2, 0x2, 0x2, 0x358, 0x35b, 
       0x3, 0x2, 0x2, 0x2, 0x359, 0x35a, 0x7, 0xf7, 0x2, 0x2, 0x35a, 0x35c, 
       0x5, 0x76, 0x3c, 0x2, 0x35b, 0x359, 0x3, 0x2, 0x2, 0x2, 0x35b, 0x35c, 
       0x3, 0x2, 0x2, 0x2, 0x35c, 0x55, 0x3, 0x2, 0x2, 0x2, 0x35d, 0x362, 
       0x5, 0x96, 0x4c, 0x2, 0x35e, 0x35f, 0x7, 0x9, 0x2, 0x2, 0x35f, 0x361, 
       0x5, 0x96, 0x4c, 0x2, 0x360, 0x35e, 0x3, 0x2, 0x2, 0x2, 0x361, 0x364, 
       0x3, 0x2, 0x2, 0x2, 0x362, 0x360, 0x3, 0x2, 0x2, 0x2, 0x362, 0x363, 
       0x3, 0x2, 0x2, 0x2, 0x363, 0x57, 0x3, 0x2, 0x2, 0x2, 0x364, 0x362, 
       0x3, 0x2, 0x2, 0x2, 0x365, 0x366, 0x9, 0x9, 0x2, 0x2, 0x366, 0x36a, 
       0x7, 0xd8, 0x2, 0x2, 0x367, 0x368, 0x7, 0x14b, 0x2, 0x2, 0x368, 0x36a, 
       0x7, 0xf6, 0x2, 0x2, 0x369, 0x365, 0x3, 0x2, 0x2, 0x2, 0x369, 0x367, 
       0x3, 0x2, 0x2, 0x2, 0x36a, 0x59, 0x3, 0x2, 0x2, 0x2, 0x36b, 0x374, 
       0x7, 0x61, 0x2, 0x2, 0x36c, 0x374, 0x7, 0x9f, 0x2, 0x2, 0x36d, 0x36e, 
       0x7, 0xae, 0x2, 0x2, 0x36e, 0x374, 0x7, 0xcf, 0x2, 0x2, 0x36f, 0x370, 
       0x7, 0xef, 0x2, 0x2, 0x370, 0x374, 0x7, 0xcf, 0x2, 0x2, 0x371, 0x372, 
       0x7, 0x90, 0x2, 0x2, 0x372, 0x374, 0x7, 0xcf, 0x2, 0x2, 0x373, 0x36b, 
       0x3, 0x2, 0x2, 0x2, 0x373, 0x36c, 0x3, 0x2, 0x2, 0x2, 0x373, 0x36d, 
       0x3, 0x2, 0x2, 0x2, 0x373, 0x36f, 0x3, 0x2, 0x2, 0x2, 0x373, 0x371, 
       0x3, 0x2, 0x2, 0x2, 0x374, 0x5b, 0x3, 0x2, 0x2, 0x2, 0x375, 0x377, 
       0x5, 0x5e, 0x30, 0x2, 0x376, 0x375, 0x3, 0x2, 0x2, 0x2, 0x376, 0x377, 
       0x3, 0x2, 0x2, 0x2, 0x377, 0x378, 0x3, 0x2, 0x2, 0x2, 0x378, 0x379, 
       0x7, 0x21, 0x2, 0x2, 0x379, 0x37c, 0x5, 0x60, 0x31, 0x2, 0x37a, 0x37b, 
       0x7, 0x49, 0x2, 0x2, 0x37b, 0x37d, 0x5, 0x66, 0x34, 0x2, 0x37c, 0x37a, 
       0x3, 0x2, 0x2, 0x2, 0x37c, 0x37d, 0x3, 0x2, 0x2, 0x2, 0x37d, 0x380, 
       0x3, 0x2, 0x2, 0x2, 0x37e, 0x37f, 0x7, 0x18, 0x2, 0x2, 0x37f, 0x381, 
       0x5, 0x68, 0x35, 0x2, 0x380, 0x37e, 0x3, 0x2, 0x2, 0x2, 0x380, 0x381, 
       0x3, 0x2, 0x2, 0x2, 0x381, 0x38d, 0x3, 0x2, 0x2, 0x2, 0x382, 0x384, 
       0x5, 0x5e, 0x30, 0x2, 0x383, 0x382, 0x3, 0x2, 0x2, 0x2, 0x383, 0x384, 
       0x3, 0x2, 0x2, 0x2, 0x384, 0x385, 0x3, 0x2, 0x2, 0x2, 0x385, 0x386, 
       0x7, 0x21, 0x2, 0x2, 0x386, 0x387, 0x7, 0x49, 0x2, 0x2, 0x387, 0x38a, 
       0x5, 0x66, 0x34, 0x2, 0x388, 0x389, 0x7, 0x18, 0x2, 0x2, 0x389, 0x38b, 
       0x5, 0x68, 0x35, 0x2, 0x38a, 0x388, 0x3, 0x2, 0x2, 0x2, 0x38a, 0x38b, 
       0x3, 0x2, 0x2, 0x2, 0x38b, 0x38d, 0x3, 0x2, 0x2, 0x2, 0x38c, 0x376, 
       0x3, 0x2, 0x2, 0x2, 0x38c, 0x383, 0x3, 0x2, 0x2, 0x2, 0x38d, 0x5d, 
       0x3, 0x2, 0x2, 0x2, 0x38e, 0x38f, 0x9, 0xa, 0x2, 0x2, 0x38f, 0x5f, 
       0x3, 0x2, 0x2, 0x2, 0x390, 0x391, 0x8, 0x31, 0x1, 0x2, 0x391, 0x397, 
       0x5, 0x62, 0x32, 0x2, 0x392, 0x393, 0x7, 0x5, 0x2, 0x2, 0x393, 0x394, 
       0x5, 0x60, 0x31, 0x2, 0x394, 0x395, 0x7, 0x6, 0x2, 0x2, 0x395, 0x397, 
       0x3, 0x2, 0x2, 0x2, 0x396, 0x390, 0x3, 0x2, 0x2, 0x2, 0x396, 0x392, 
       0x3, 0x2, 0x2, 0x2, 0x397, 0x39d, 0x3, 0x2, 0x2, 0x2, 0x398, 0x399, 
       0xc, 0x3, 0x2, 0x2, 0x399, 0x39a, 0x9, 0xb, 0x2, 0x2, 0x39a, 0x39c, 
       0x5, 0x60, 0x31, 0x4, 0x39b, 0x398, 0x3, 0x2, 0x2, 0x2, 0x39c, 0x39f, 
       0x3, 0x2, 0x2, 0x2, 0x39d, 0x39b, 0x3, 0x2, 0x2, 0x2, 0x39d, 0x39e, 
       0x3, 0x2, 0x2, 0x2, 0x39e, 0x61, 0x3, 0x2, 0x2, 0x2, 0x39f, 0x39d, 
       0x3, 0x2, 0x2, 0x2, 0x3a0, 0x3a2, 0x7, 0x13d, 0x2, 0x2, 0x3a1, 0x3a0, 
       0x3, 0x2, 0x2, 0x2, 0x3a1, 0x3a2, 0x3, 0x2, 0x2, 0x2, 0x3a2, 0x3a3, 
       0x3, 0x2, 0x2, 0x2, 0x3a3, 0x3ab, 0x7, 0x14d, 0x2, 0x2, 0x3a4, 0x3a6, 
       0x7, 0x13d, 0x2, 0x2, 0x3a5, 0x3a4, 0x3, 0x2, 0x2, 0x2, 0x3a5, 0x3a6, 
       0x3, 0x2, 0x2, 0x2, 0x3a6, 0x3a7, 0x3, 0x2, 0x2, 0x2, 0x3a7, 0x3ab, 
       0x7, 0x14b, 0x2, 0x2, 0x3a8, 0x3ab, 0x7, 0x1f, 0x2, 0x2, 0x3a9, 0x3ab, 
       0x7, 0x20, 0x2, 0x2, 0x3aa, 0x3a1, 0x3, 0x2, 0x2, 0x2, 0x3aa, 0x3a5, 
       0x3, 0x2, 0x2, 0x2, 0x3aa, 0x3a8, 0x3, 0x2, 0x2, 0x2, 0x3aa, 0x3a9, 
       0x3, 0x2, 0x2, 0x2, 0x3ab, 0x63, 0x3, 0x2, 0x2, 0x2, 0x3ac, 0x3ad, 
       0x7, 0x1b, 0x2, 0x2, 0x3ad, 0x3b3, 0x5, 0x84, 0x43, 0x2, 0x3ae, 0x3b0, 
       0x7, 0x1b, 0x2, 0x2, 0x3af, 0x3ae, 0x3, 0x2, 0x2, 0x2, 0x3af, 0x3b0, 
       0x3, 0x2, 0x2, 0x2, 0x3b0, 0x3b1, 0x3, 0x2, 0x2, 0x2, 0x3b1, 0x3b3, 
       0x5, 0x82, 0x42, 0x2, 0x3b2, 0x3ac, 0x3, 0x2, 0x2, 0x2, 0x3b2, 0x3af, 
       0x3, 0x2, 0x2, 0x2, 0x3b3, 0x65, 0x3, 0x2, 0x2, 0x2, 0x3b4, 0x3b9, 
       0x5, 0x6c, 0x37, 0x2, 0x3b5, 0x3b6, 0x7, 0x3, 0x2, 0x2, 0x3b6, 0x3b8, 
       0x5, 0x6c, 0x37, 0x2, 0x3b7, 0x3b5, 0x3, 0x2, 0x2, 0x2, 0x3b8, 0x3bb, 
       0x3, 0x2, 0x2, 0x2, 0x3b9, 0x3b7, 0x3, 0x2, 0x2, 0x2, 0x3b9, 0x3ba, 
       0x3, 0x2, 0x2, 0x2, 0x3ba, 0x67, 0x3, 0x2, 0x2, 0x2, 0x3bb, 0x3b9, 
       0x3, 0x2, 0x2, 0x2, 0x3bc, 0x3c1, 0x5, 0x6a, 0x36, 0x2, 0x3bd, 0x3be, 
       0x7, 0x3, 0x2, 0x2, 0x3be, 0x3c0, 0x5, 0x6a, 0x36, 0x2, 0x3bf, 0x3bd, 
       0x3, 0x2, 0x2, 0x2, 0x3c0, 0x3c3, 0x3, 0x2, 0x2, 0x2, 0x3c1, 0x3bf, 
       0x3, 0x2, 0x2, 0x2, 0x3c1, 0x3c2, 0x3, 0x2, 0x2, 0x2, 0x3c2, 0x69, 
       0x3, 0x2, 0x2, 0x2, 0x3c3, 0x3c1, 0x3, 0x2, 0x2, 0x2, 0x3c4, 0x3c6, 
       0x5, 0x6c, 0x37, 0x2, 0x3c5, 0x3c7, 0x9, 0xc, 0x2, 0x2, 0x3c6, 0x3c5, 
       0x3, 0x2, 0x2, 0x2, 0x3c6, 0x3c7, 0x3, 0x2, 0x2, 0x2, 0x3c7, 0x6b, 
       0x3, 0x2, 0x2, 0x2, 0x3c8, 0x3c9, 0x5, 0x96, 0x4c, 0x2, 0x3c9, 0x6d, 
       0x3, 0x2, 0x2, 0x2, 0x3ca, 0x3cf, 0x5, 0x7e, 0x40, 0x2, 0x3cb, 0x3cc, 
       0x7, 0x3, 0x2, 0x2, 0x3cc, 0x3ce, 0x5, 0x7e, 0x40, 0x2, 0x3cd, 0x3cb, 
       0x3, 0x2, 0x2, 0x2, 0x3ce, 0x3d1, 0x3, 0x2, 0x2, 0x2, 0x3cf, 0x3cd, 
       0x3, 0x2, 0x2, 0x2, 0x3cf, 0x3d0, 0x3, 0x2, 0x2, 0x2, 0x3d0, 0x6f, 
       0x3, 0x2, 0x2, 0x2, 0x3d1, 0x3cf, 0x3, 0x2, 0x2, 0x2, 0x3d2, 0x3d7, 
       0x5, 0x72, 0x3a, 0x2, 0x3d3, 0x3d4, 0x7, 0x3, 0x2, 0x2, 0x3d4, 0x3d6, 
       0x5, 0x72, 0x3a, 0x2, 0x3d5, 0x3d3, 0x3, 0x2, 0x2, 0x2, 0x3d6, 0x3d9, 
       0x3, 0x2, 0x2, 0x2, 0x3d7, 0x3d5, 0x3, 0x2, 0x2, 0x2, 0x3d7, 0x3d8, 
       0x3, 0x2, 0x2, 0x2, 0x3d8, 0x3dd, 0x3, 0x2, 0x2, 0x2, 0x3d9, 0x3d7, 
       0x3, 0x2, 0x2, 0x2, 0x3da, 0x3dc, 0x5, 0x74, 0x3b, 0x2, 0x3db, 0x3da, 
       0x3, 0x2, 0x2, 0x2, 0x3dc, 0x3df, 0x3, 0x2, 0x2, 0x2, 0x3dd, 0x3db, 
       0x3, 0x2, 0x2, 0x2, 0x3dd, 0x3de, 0x3, 0x2, 0x2, 0x2, 0x3de, 0x71, 
       0x3, 0x2, 0x2, 0x2, 0x3df, 0x3dd, 0x3, 0x2, 0x2, 0x2, 0x3e0, 0x3e3, 
       0x5, 0x78, 0x3d, 0x2, 0x3e1, 0x3e3, 0x7, 0x13e, 0x2, 0x2, 0x3e2, 
       0x3e0, 0x3, 0x2, 0x2, 0x2, 0x3e2, 0x3e1, 0x3, 0x2, 0x2, 0x2, 0x3e3, 
       0x73, 0x3, 0x2, 0x2, 0x2, 0x3e4, 0x3e5, 0x9, 0xd, 0x2, 0x2, 0x3e5, 
       0x3ea, 0x5, 0x7a, 0x3e, 0x2, 0x3e6, 0x3e7, 0x7, 0x3, 0x2, 0x2, 0x3e7, 
       0x3e9, 0x5, 0x7a, 0x3e, 0x2, 0x3e8, 0x3e6, 0x3, 0x2, 0x2, 0x2, 0x3e9, 
       0x3ec, 0x3, 0x2, 0x2, 0x2, 0x3ea, 0x3e8, 0x3, 0x2, 0x2, 0x2, 0x3ea, 
       0x3eb, 0x3, 0x2, 0x2, 0x2, 0x3eb, 0x3f0, 0x3, 0x2, 0x2, 0x2, 0x3ec, 
       0x3ea, 0x3, 0x2, 0x2, 0x2, 0x3ed, 0x3ee, 0x7, 0x13c, 0x2, 0x2, 0x3ee, 
       0x3f0, 0x5, 0x76, 0x3c, 0x2, 0x3ef, 0x3e4, 0x3, 0x2, 0x2, 0x2, 0x3ef, 
       0x3ed, 0x3, 0x2, 0x2, 0x2, 0x3f0, 0x75, 0x3, 0x2, 0x2, 0x2, 0x3f1, 
       0x3f6, 0x5, 0x78, 0x3d, 0x2, 0x3f2, 0x3f3, 0x7, 0x3, 0x2, 0x2, 0x3f3, 
       0x3f5, 0x5, 0x78, 0x3d, 0x2, 0x3f4, 0x3f2, 0x3, 0x2, 0x2, 0x2, 0x3f5, 
       0x3f8, 0x3, 0x2, 0x2, 0x2, 0x3f6, 0x3f4, 0x3, 0x2, 0x2, 0x2, 0x3f6, 
       0x3f7, 0x3, 0x2, 0x2, 0x2, 0x3f7, 0x77, 0x3, 0x2, 0x2, 0x2, 0x3f8, 
       0x3f6, 0x3, 0x2, 0x2, 0x2, 0x3f9, 0x3fa, 0x5, 0x7a, 0x3e, 0x2, 0x3fa, 
       0x3fb, 0x7, 0x4, 0x2, 0x2, 0x3fb, 0x3fc, 0x5, 0x7c, 0x3f, 0x2, 0x3fc, 
       0x79, 0x3, 0x2, 0x2, 0x2, 0x3fd, 0x3fe, 0x5, 0x96, 0x4c, 0x2, 0x3fe, 
       0x7b, 0x3, 0x2, 0x2, 0x2, 0x3ff, 0x409, 0x5, 0x96, 0x4c, 0x2, 0x400, 
       0x401, 0x7, 0x7, 0x2, 0x2, 0x401, 0x402, 0x5, 0x7c, 0x3f, 0x2, 0x402, 
       0x403, 0x7, 0x8, 0x2, 0x2, 0x403, 0x409, 0x3, 0x2, 0x2, 0x2, 0x404, 
       0x405, 0x7, 0xa, 0x2, 0x2, 0x405, 0x406, 0x5, 0x76, 0x3c, 0x2, 0x406, 
       0x407, 0x7, 0xb, 0x2, 0x2, 0x407, 0x409, 0x3, 0x2, 0x2, 0x2, 0x408, 
       0x3ff, 0x3, 0x2, 0x2, 0x2, 0x408, 0x400, 0x3, 0x2, 0x2, 0x2, 0x408, 
       0x404, 0x3, 0x2, 0x2, 0x2, 0x409, 0x7d, 0x3, 0x2, 0x2, 0x2, 0x40a, 
       0x40b, 0x5, 0x7a, 0x3e, 0x2, 0x40b, 0x40c, 0x7, 0x4, 0x2, 0x2, 0x40c, 
       0x40d, 0x5, 0x7a, 0x3e, 0x2, 0x40d, 0x7f, 0x3, 0x2, 0x2, 0x2, 0x40e, 
       0x40f, 0x5, 0x8c, 0x47, 0x2, 0x40f, 0x81, 0x3, 0x2, 0x2, 0x2, 0x410, 
       0x411, 0x7, 0xa, 0x2, 0x2, 0x411, 0x413, 0x5, 0x84, 0x43, 0x2, 0x412, 
       0x414, 0x7, 0x3, 0x2, 0x2, 0x413, 0x412, 0x3, 0x2, 0x2, 0x2, 0x413, 
       0x414, 0x3, 0x2, 0x2, 0x2, 0x414, 0x415, 0x3, 0x2, 0x2, 0x2, 0x415, 
       0x416, 0x7, 0xb, 0x2, 0x2, 0x416, 0x423, 0x3, 0x2, 0x2, 0x2, 0x417, 
       0x418, 0x7, 0xa, 0x2, 0x2, 0x418, 0x423, 0x7, 0xb, 0x2, 0x2, 0x419, 
       0x41a, 0x7, 0x5, 0x2, 0x2, 0x41a, 0x41c, 0x5, 0x84, 0x43, 0x2, 0x41b, 
       0x41d, 0x7, 0x3, 0x2, 0x2, 0x41c, 0x41b, 0x3, 0x2, 0x2, 0x2, 0x41c, 
       0x41d, 0x3, 0x2, 0x2, 0x2, 0x41d, 0x41e, 0x3, 0x2, 0x2, 0x2, 0x41e, 
       0x41f, 0x7, 0x6, 0x2, 0x2, 0x41f, 0x423, 0x3, 0x2, 0x2, 0x2, 0x420, 
       0x421, 0x7, 0x5, 0x2, 0x2, 0x421, 0x423, 0x7, 0x6, 0x2, 0x2, 0x422, 
       0x410, 0x3, 0x2, 0x2, 0x2, 0x422, 0x417, 0x3, 0x2, 0x2, 0x2, 0x422, 
       0x419, 0x3, 0x2, 0x2, 0x2, 0x422, 0x420, 0x3, 0x2, 0x2, 0x2, 0x423, 
       0x83, 0x3, 0x2, 0x2, 0x2, 0x424, 0x429, 0x5, 0x86, 0x44, 0x2, 0x425, 
       0x426, 0x7, 0x3, 0x2, 0x2, 0x426, 0x428, 0x5, 0x86, 0x44, 0x2, 0x427, 
       0x425, 0x3, 0x2, 0x2, 0x2, 0x428, 0x42b, 0x3, 0x2, 0x2, 0x2, 0x429, 
       0x427, 0x3, 0x2, 0x2, 0x2, 0x429, 0x42a, 0x3, 0x2, 0x2, 0x2, 0x42a, 
       0x85, 0x3, 0x2, 0x2, 0x2, 0x42b, 0x429, 0x3, 0x2, 0x2, 0x2, 0x42c, 
       0x42d, 0x5, 0x88, 0x45, 0x2, 0x42d, 0x42e, 0x9, 0x8, 0x2, 0x2, 0x42e, 
       0x42f, 0x5, 0x8c, 0x47, 0x2, 0x42f, 0x87, 0x3, 0x2, 0x2, 0x2, 0x430, 
       0x433, 0x5, 0x96, 0x4c, 0x2, 0x431, 0x433, 0x5, 0x90, 0x49, 0x2, 
       0x432, 0x430, 0x3, 0x2, 0x2, 0x2, 0x432, 0x431, 0x3, 0x2, 0x2, 0x2, 
       0x433, 0x89, 0x3, 0x2, 0x2, 0x2, 0x434, 0x435, 0x7, 0x7, 0x2, 0x2, 
       0x435, 0x43a, 0x5, 0x8c, 0x47, 0x2, 0x436, 0x437, 0x7, 0x3, 0x2, 
       0x2, 0x437, 0x439, 0x5, 0x8c, 0x47, 0x2, 0x438, 0x436, 0x3, 0x2, 
       0x2, 0x2, 0x439, 0x43c, 0x3, 0x2, 0x2, 0x2, 0x43a, 0x438, 0x3, 0x2, 
       0x2, 0x2, 0x43a, 0x43b, 0x3, 0x2, 0x2, 0x2, 0x43b, 0x43e, 0x3, 0x2, 
       0x2, 0x2, 0x43c, 0x43a, 0x3, 0x2, 0x2, 0x2, 0x43d, 0x43f, 0x7, 0x3, 
       0x2, 0x2, 0x43e, 0x43d, 0x3, 0x2, 0x2, 0x2, 0x43e, 0x43f, 0x3, 0x2, 
       0x2, 0x2, 0x43f, 0x440, 0x3, 0x2, 0x2, 0x2, 0x440, 0x441, 0x7, 0x8, 
       0x2, 0x2, 0x441, 0x445, 0x3, 0x2, 0x2, 0x2, 0x442, 0x443, 0x7, 0x7, 
       0x2, 0x2, 0x443, 0x445, 0x7, 0x8, 0x2, 0x2, 0x444, 0x434, 0x3, 0x2, 
       0x2, 0x2, 0x444, 0x442, 0x3, 0x2, 0x2, 0x2, 0x445, 0x8b, 0x3, 0x2, 
       0x2, 0x2, 0x446, 0x44d, 0x5, 0x90, 0x49, 0x2, 0x447, 0x44d, 0x5, 
       0x8e, 0x48, 0x2, 0x448, 0x44d, 0x5, 0x82, 0x42, 0x2, 0x449, 0x44d, 
       0x5, 0x8a, 0x46, 0x2, 0x44a, 0x44d, 0x5, 0x92, 0x4a, 0x2, 0x44b, 
       0x44d, 0x5, 0x94, 0x4b, 0x2, 0x44c, 0x446, 0x3, 0x2, 0x2, 0x2, 0x44c, 
       0x447, 0x3, 0x2, 0x2, 0x2, 0x44c, 0x448, 0x3, 0x2, 0x2, 0x2, 0x44c, 
       0x449, 0x3, 0x2, 0x2, 0x2, 0x44c, 0x44a, 0x3, 0x2, 0x2, 0x2, 0x44c, 
       0x44b, 0x3, 0x2, 0x2, 0x2, 0x44d, 0x8d, 0x3, 0x2, 0x2, 0x2, 0x44e, 
       0x44f, 0x5, 0x1a4, 0xd3, 0x2, 0x44f, 0x8f, 0x3, 0x2, 0x2, 0x2, 0x450, 
       0x451, 0x7, 0x147, 0x2, 0x2, 0x451, 0x91, 0x3, 0x2, 0x2, 0x2, 0x452, 
       0x453, 0x9, 0xe, 0x2, 0x2, 0x453, 0x93, 0x3, 0x2, 0x2, 0x2, 0x454, 
       0x455, 0x9, 0xf, 0x2, 0x2, 0x455, 0x95, 0x3, 0x2, 0x2, 0x2, 0x456, 
       0x457, 0x5, 0x19e, 0xd0, 0x2, 0x457, 0x97, 0x3, 0x2, 0x2, 0x2, 0x458, 
       0x45c, 0x5, 0xa6, 0x54, 0x2, 0x459, 0x45b, 0x7, 0xf, 0x2, 0x2, 0x45a, 
       0x459, 0x3, 0x2, 0x2, 0x2, 0x45b, 0x45e, 0x3, 0x2, 0x2, 0x2, 0x45c, 
       0x45a, 0x3, 0x2, 0x2, 0x2, 0x45c, 0x45d, 0x3, 0x2, 0x2, 0x2, 0x45d, 
       0x45f, 0x3, 0x2, 0x2, 0x2, 0x45e, 0x45c, 0x3, 0x2, 0x2, 0x2, 0x45f, 
       0x460, 0x7, 0x2, 0x2, 0x3, 0x460, 0x99, 0x3, 0x2, 0x2, 0x2, 0x461, 
       0x462, 0x5, 0x14a, 0xa6, 0x2, 0x462, 0x463, 0x7, 0x2, 0x2, 0x3, 0x463, 
       0x9b, 0x3, 0x2, 0x2, 0x2, 0x464, 0x465, 0x5, 0x146, 0xa4, 0x2, 0x465, 
       0x466, 0x7, 0x2, 0x2, 0x3, 0x466, 0x9d, 0x3, 0x2, 0x2, 0x2, 0x467, 
       0x468, 0x5, 0x144, 0xa3, 0x2, 0x468, 0x469, 0x7, 0x2, 0x2, 0x3, 0x469, 
       0x9f, 0x3, 0x2, 0x2, 0x2, 0x46a, 0x46b, 0x5, 0x148, 0xa5, 0x2, 0x46b, 
       0x46c, 0x7, 0x2, 0x2, 0x3, 0x46c, 0xa1, 0x3, 0x2, 0x2, 0x2, 0x46d, 
       0x46e, 0x5, 0x17a, 0xbe, 0x2, 0x46e, 0x46f, 0x7, 0x2, 0x2, 0x3, 0x46f, 
       0xa3, 0x3, 0x2, 0x2, 0x2, 0x470, 0x471, 0x5, 0x180, 0xc1, 0x2, 0x471, 
       0x472, 0x7, 0x2, 0x2, 0x3, 0x472, 0xa5, 0x3, 0x2, 0x2, 0x2, 0x473, 
       0x735, 0x5, 0xb6, 0x5c, 0x2, 0x474, 0x476, 0x5, 0xc6, 0x64, 0x2, 
       0x475, 0x474, 0x3, 0x2, 0x2, 0x2, 0x475, 0x476, 0x3, 0x2, 0x2, 0x2, 
       0x476, 0x477, 0x3, 0x2, 0x2, 0x2, 0x477, 0x735, 0x5, 0xe2, 0x72, 
       0x2, 0x478, 0x47a, 0x7, 0x128, 0x2, 0x2, 0x479, 0x47b, 0x7, 0xc0, 
       0x2, 0x2, 0x47a, 0x479, 0x3, 0x2, 0x2, 0x2, 0x47a, 0x47b, 0x3, 0x2, 
       0x2, 0x2, 0x47b, 0x47c, 0x3, 0x2, 0x2, 0x2, 0x47c, 0x735, 0x5, 0x144, 
       0xa3, 0x2, 0x47d, 0x47e, 0x7, 0x60, 0x2, 0x2, 0x47e, 0x482, 0x5, 
       0xc0, 0x61, 0x2, 0x47f, 0x480, 0x7, 0x99, 0x2, 0x2, 0x480, 0x481, 
       0x7, 0xc4, 0x2, 0x2, 0x481, 0x483, 0x7, 0x7e, 0x2, 0x2, 0x482, 0x47f, 
       0x3, 0x2, 0x2, 0x2, 0x482, 0x483, 0x3, 0x2, 0x2, 0x2, 0x483, 0x484, 
       0x3, 0x2, 0x2, 0x2, 0x484, 0x48c, 0x5, 0x144, 0xa3, 0x2, 0x485, 0x48b, 
       0x5, 0xb4, 0x5b, 0x2, 0x486, 0x48b, 0x5, 0xb2, 0x5a, 0x2, 0x487, 
       0x488, 0x7, 0x131, 0x2, 0x2, 0x488, 0x489, 0x9, 0x10, 0x2, 0x2, 0x489, 
       0x48b, 0x5, 0xce, 0x68, 0x2, 0x48a, 0x485, 0x3, 0x2, 0x2, 0x2, 0x48a, 
       0x486, 0x3, 0x2, 0x2, 0x2, 0x48a, 0x487, 0x3, 0x2, 0x2, 0x2, 0x48b, 
       0x48e, 0x3, 0x2, 0x2, 0x2, 0x48c, 0x48a, 0x3, 0x2, 0x2, 0x2, 0x48c, 
       0x48d, 0x3, 0x2, 0x2, 0x2, 0x48d, 0x735, 0x3, 0x2, 0x2, 0x2, 0x48e, 
       0x48c, 0x3, 0x2, 0x2, 0x2, 0x48f, 0x490, 0x7, 0x3a, 0x2, 0x2, 0x490, 
       0x491, 0x5, 0xc0, 0x61, 0x2, 0x491, 0x492, 0x5, 0x144, 0xa3, 0x2, 
       0x492, 0x493, 0x7, 0xff, 0x2, 0x2, 0x493, 0x494, 0x9, 0x10, 0x2, 
       0x2, 0x494, 0x495, 0x5, 0xce, 0x68, 0x2, 0x495, 0x735, 0x3, 0x2, 
       0x2, 0x2, 0x496, 0x497, 0x7, 0x3a, 0x2, 0x2, 0x497, 0x498, 0x5, 0xc0, 
       0x61, 0x2, 0x498, 0x499, 0x5, 0x144, 0xa3, 0x2, 0x499, 0x49a, 0x7, 
       0xff, 0x2, 0x2, 0x49a, 0x49b, 0x5, 0xb2, 0x5a, 0x2, 0x49b, 0x735, 
       0x3, 0x2, 0x2, 0x2, 0x49c, 0x49d, 0x7, 0x77, 0x2, 0x2, 0x49d, 0x4a0, 
       0x5, 0xc0, 0x61, 0x2, 0x49e, 0x49f, 0x7, 0x99, 0x2, 0x2, 0x49f, 0x4a1, 
       0x7, 0x7e, 0x2, 0x2, 0x4a0, 0x49e, 0x3, 0x2, 0x2, 0x2, 0x4a0, 0x4a1, 
       0x3, 0x2, 0x2, 0x2, 0x4a1, 0x4a2, 0x3, 0x2, 0x2, 0x2, 0x4a2, 0x4a4, 
       0x5, 0x144, 0xa3, 0x2, 0x4a3, 0x4a5, 0x9, 0x11, 0x2, 0x2, 0x4a4, 
       0x4a3, 0x3, 0x2, 0x2, 0x2, 0x4a4, 0x4a5, 0x3, 0x2, 0x2, 0x2, 0x4a5, 
       0x735, 0x3, 0x2, 0x2, 0x2, 0x4a6, 0x4a7, 0x7, 0x102, 0x2, 0x2, 0x4a7, 
       0x4aa, 0x9, 0x12, 0x2, 0x2, 0x4a8, 0x4a9, 0x9, 0x13, 0x2, 0x2, 0x4a9, 
       0x4ab, 0x5, 0x144, 0xa3, 0x2, 0x4aa, 0x4a8, 0x3, 0x2, 0x2, 0x2, 0x4aa, 
       0x4ab, 0x3, 0x2, 0x2, 0x2, 0x4ab, 0x4b0, 0x3, 0x2, 0x2, 0x2, 0x4ac, 
       0x4ae, 0x7, 0xaf, 0x2, 0x2, 0x4ad, 0x4ac, 0x3, 0x2, 0x2, 0x2, 0x4ad, 
       0x4ae, 0x3, 0x2, 0x2, 0x2, 0x4ae, 0x4af, 0x3, 0x2, 0x2, 0x2, 0x4af, 
       0x4b1, 0x7, 0x147, 0x2, 0x2, 0x4b0, 0x4ad, 0x3, 0x2, 0x2, 0x2, 0x4b0, 
       0x4b1, 0x3, 0x2, 0x2, 0x2, 0x4b1, 0x735, 0x3, 0x2, 0x2, 0x2, 0x4b2, 
       0x4b7, 0x5, 0xaa, 0x56, 0x2, 0x4b3, 0x4b4, 0x7, 0x5, 0x2, 0x2, 0x4b4, 
       0x4b5, 0x5, 0x180, 0xc1, 0x2, 0x4b5, 0x4b6, 0x7, 0x6, 0x2, 0x2, 0x4b6, 
       0x4b8, 0x3, 0x2, 0x2, 0x2, 0x4b7, 0x4b3, 0x3, 0x2, 0x2, 0x2, 0x4b7, 
       0x4b8, 0x3, 0x2, 0x2, 0x2, 0x4b8, 0x4b9, 0x3, 0x2, 0x2, 0x2, 0x4b9, 
       0x4ba, 0x5, 0xca, 0x66, 0x2, 0x4ba, 0x4bf, 0x5, 0xcc, 0x67, 0x2, 
       0x4bb, 0x4bd, 0x7, 0x41, 0x2, 0x2, 0x4bc, 0x4bb, 0x3, 0x2, 0x2, 0x2, 
       0x4bc, 0x4bd, 0x3, 0x2, 0x2, 0x2, 0x4bd, 0x4be, 0x3, 0x2, 0x2, 0x2, 
       0x4be, 0x4c0, 0x5, 0xb6, 0x5c, 0x2, 0x4bf, 0x4bc, 0x3, 0x2, 0x2, 
       0x2, 0x4bf, 0x4c0, 0x3, 0x2, 0x2, 0x2, 0x4c0, 0x735, 0x3, 0x2, 0x2, 
       0x2, 0x4c1, 0x4c6, 0x5, 0xaa, 0x56, 0x2, 0x4c2, 0x4c3, 0x7, 0x5, 
       0x2, 0x2, 0x4c3, 0x4c4, 0x5, 0x180, 0xc1, 0x2, 0x4c4, 0x4c5, 0x7, 
       0x6, 0x2, 0x2, 0x4c5, 0x4c7, 0x3, 0x2, 0x2, 0x2, 0x4c6, 0x4c2, 0x3, 
       0x2, 0x2, 0x2, 0x4c6, 0x4c7, 0x3, 0x2, 0x2, 0x2, 0x4c7, 0x4dd, 0x3, 
       0x2, 0x2, 0x2, 0x4c8, 0x4dc, 0x5, 0xb4, 0x5b, 0x2, 0x4c9, 0x4ca, 
       0x7, 0xd6, 0x2, 0x2, 0x4ca, 0x4cb, 0x7, 0x49, 0x2, 0x2, 0x4cb, 0x4cc, 
       0x7, 0x5, 0x2, 0x2, 0x4cc, 0x4cd, 0x5, 0x180, 0xc1, 0x2, 0x4cd, 0x4ce, 
       0x7, 0x6, 0x2, 0x2, 0x4ce, 0x4d3, 0x3, 0x2, 0x2, 0x2, 0x4cf, 0x4d0, 
       0x7, 0xd6, 0x2, 0x2, 0x4d0, 0x4d1, 0x7, 0x49, 0x2, 0x2, 0x4d1, 0x4d3, 
       0x5, 0x12c, 0x97, 0x2, 0x4d2, 0x4c9, 0x3, 0x2, 0x2, 0x2, 0x4d2, 0x4cf, 
       0x3, 0x2, 0x2, 0x2, 0x4d3, 0x4dc, 0x3, 0x2, 0x2, 0x2, 0x4d4, 0x4dc, 
       0x5, 0xae, 0x58, 0x2, 0x4d5, 0x4dc, 0x5, 0xb0, 0x59, 0x2, 0x4d6, 
       0x4dc, 0x5, 0x140, 0xa1, 0x2, 0x4d7, 0x4dc, 0x5, 0xda, 0x6e, 0x2, 
       0x4d8, 0x4dc, 0x5, 0xb2, 0x5a, 0x2, 0x4d9, 0x4da, 0x7, 0x111, 0x2, 
       0x2, 0x4da, 0x4dc, 0x5, 0xce, 0x68, 0x2, 0x4db, 0x4c8, 0x3, 0x2, 
       0x2, 0x2, 0x4db, 0x4d2, 0x3, 0x2, 0x2, 0x2, 0x4db, 0x4d4, 0x3, 0x2, 
       0x2, 0x2, 0x4db, 0x4d5, 0x3, 0x2, 0x2, 0x2, 0x4db, 0x4d6, 0x3, 0x2, 
       0x2, 0x2, 0x4db, 0x4d7, 0x3, 0x2, 0x2, 0x2, 0x4db, 0x4d8, 0x3, 0x2, 
       0x2, 0x2, 0x4db, 0x4d9, 0x3, 0x2, 0x2, 0x2, 0x4dc, 0x4df, 0x3, 0x2, 
       0x2, 0x2, 0x4dd, 0x4db, 0x3, 0x2, 0x2, 0x2, 0x4dd, 0x4de, 0x3, 0x2, 
       0x2, 0x2, 0x4de, 0x4e4, 0x3, 0x2, 0x2, 0x2, 0x4df, 0x4dd, 0x3, 0x2, 
       0x2, 0x2, 0x4e0, 0x4e2, 0x7, 0x41, 0x2, 0x2, 0x4e1, 0x4e0, 0x3, 0x2, 
       0x2, 0x2, 0x4e1, 0x4e2, 0x3, 0x2, 0x2, 0x2, 0x4e2, 0x4e3, 0x3, 0x2, 
       0x2, 0x2, 0x4e3, 0x4e5, 0x5, 0xb6, 0x5c, 0x2, 0x4e4, 0x4e1, 0x3, 
       0x2, 0x2, 0x2, 0x4e4, 0x4e5, 0x3, 0x2, 0x2, 0x2, 0x4e5, 0x735, 0x3, 
       0x2, 0x2, 0x2, 0x4e6, 0x4e7, 0x7, 0x60, 0x2, 0x2, 0x4e7, 0x4eb, 0x7, 
       0x10e, 0x2, 0x2, 0x4e8, 0x4e9, 0x7, 0x99, 0x2, 0x2, 0x4e9, 0x4ea, 
       0x7, 0xc4, 0x2, 0x2, 0x4ea, 0x4ec, 0x7, 0x7e, 0x2, 0x2, 0x4eb, 0x4e8, 
       0x3, 0x2, 0x2, 0x2, 0x4eb, 0x4ec, 0x3, 0x2, 0x2, 0x2, 0x4ec, 0x4ed, 
       0x3, 0x2, 0x2, 0x2, 0x4ed, 0x4ee, 0x5, 0x146, 0xa4, 0x2, 0x4ee, 0x4ef, 
       0x7, 0xaf, 0x2, 0x2, 0x4ef, 0x4f8, 0x5, 0x146, 0xa4, 0x2, 0x4f0, 
       0x4f7, 0x5, 0xca, 0x66, 0x2, 0x4f1, 0x4f7, 0x5, 0x140, 0xa1, 0x2, 
       0x4f2, 0x4f7, 0x5, 0xda, 0x6e, 0x2, 0x4f3, 0x4f7, 0x5, 0xb2, 0x5a, 
       0x2, 0x4f4, 0x4f5, 0x7, 0x111, 0x2, 0x2, 0x4f5, 0x4f7, 0x5, 0xce, 
       0x68, 0x2, 0x4f6, 0x4f0, 0x3, 0x2, 0x2, 0x2, 0x4f6, 0x4f1, 0x3, 0x2, 
       0x2, 0x2, 0x4f6, 0x4f2, 0x3, 0x2, 0x2, 0x2, 0x4f6, 0x4f3, 0x3, 0x2, 
       0x2, 0x2, 0x4f6, 0x4f4, 0x3, 0x2, 0x2, 0x2, 0x4f7, 0x4fa, 0x3, 0x2, 
       0x2, 0x2, 0x4f8, 0x4f6, 0x3, 0x2, 0x2, 0x2, 0x4f8, 0x4f9, 0x3, 0x2, 
       0x2, 0x2, 0x4f9, 0x735, 0x3, 0x2, 0x2, 0x2, 0x4fa, 0x4f8, 0x3, 0x2, 
       0x2, 0x2, 0x4fb, 0x500, 0x5, 0xac, 0x57, 0x2, 0x4fc, 0x4fd, 0x7, 
       0x5, 0x2, 0x2, 0x4fd, 0x4fe, 0x5, 0x180, 0xc1, 0x2, 0x4fe, 0x4ff, 
       0x7, 0x6, 0x2, 0x2, 0x4ff, 0x501, 0x3, 0x2, 0x2, 0x2, 0x500, 0x4fc, 
       0x3, 0x2, 0x2, 0x2, 0x500, 0x501, 0x3, 0x2, 0x2, 0x2, 0x501, 0x502, 
       0x3, 0x2, 0x2, 0x2, 0x502, 0x503, 0x5, 0xca, 0x66, 0x2, 0x503, 0x508, 
       0x5, 0xcc, 0x67, 0x2, 0x504, 0x506, 0x7, 0x41, 0x2, 0x2, 0x505, 0x504, 
       0x3, 0x2, 0x2, 0x2, 0x505, 0x506, 0x3, 0x2, 0x2, 0x2, 0x506, 0x507, 
       0x3, 0x2, 0x2, 0x2, 0x507, 0x509, 0x5, 0xb6, 0x5c, 0x2, 0x508, 0x505, 
       0x3, 0x2, 0x2, 0x2, 0x508, 0x509, 0x3, 0x2, 0x2, 0x2, 0x509, 0x735, 
       0x3, 0x2, 0x2, 0x2, 0x50a, 0x50b, 0x7, 0x3b, 0x2, 0x2, 0x50b, 0x50c, 
       0x7, 0x10e, 0x2, 0x2, 0x50c, 0x50e, 0x5, 0x144, 0xa3, 0x2, 0x50d, 
       0x50f, 0x5, 0xbc, 0x5f, 0x2, 0x50e, 0x50d, 0x3, 0x2, 0x2, 0x2, 0x50e, 
       0x50f, 0x3, 0x2, 0x2, 0x2, 0x50f, 0x510, 0x3, 0x2, 0x2, 0x2, 0x510, 
       0x511, 0x7, 0x5c, 0x2, 0x2, 0x511, 0x519, 0x7, 0x108, 0x2, 0x2, 0x512, 
       0x51a, 0x5, 0x19e, 0xd0, 0x2, 0x513, 0x514, 0x7, 0x8b, 0x2, 0x2, 
       0x514, 0x515, 0x7, 0x57, 0x2, 0x2, 0x515, 0x51a, 0x5, 0x12e, 0x98, 
       0x2, 0x516, 0x517, 0x7, 0x8b, 0x2, 0x2, 0x517, 0x518, 0x7, 0x39, 
       0x2, 0x2, 0x518, 0x51a, 0x7, 0x57, 0x2, 0x2, 0x519, 0x512, 0x3, 0x2, 
       0x2, 0x2, 0x519, 0x513, 0x3, 0x2, 0x2, 0x2, 0x519, 0x516, 0x3, 0x2, 
       0x2, 0x2, 0x519, 0x51a, 0x3, 0x2, 0x2, 0x2, 0x51a, 0x735, 0x3, 0x2, 
       0x2, 0x2, 0x51b, 0x51c, 0x7, 0x3a, 0x2, 0x2, 0x51c, 0x51d, 0x7, 0x10e, 
       0x2, 0x2, 0x51d, 0x51e, 0x5, 0x144, 0xa3, 0x2, 0x51e, 0x51f, 0x7, 
       0x37, 0x2, 0x2, 0x51f, 0x520, 0x9, 0x14, 0x2, 0x2, 0x520, 0x521, 
       0x5, 0x17c, 0xbf, 0x2, 0x521, 0x735, 0x3, 0x2, 0x2, 0x2, 0x522, 0x523, 
       0x7, 0x3a, 0x2, 0x2, 0x523, 0x524, 0x7, 0x10e, 0x2, 0x2, 0x524, 0x525, 
       0x5, 0x144, 0xa3, 0x2, 0x525, 0x526, 0x7, 0x37, 0x2, 0x2, 0x526, 
       0x527, 0x9, 0x14, 0x2, 0x2, 0x527, 0x528, 0x7, 0x5, 0x2, 0x2, 0x528, 
       0x529, 0x5, 0x17c, 0xbf, 0x2, 0x529, 0x52a, 0x7, 0x6, 0x2, 0x2, 0x52a, 
       0x735, 0x3, 0x2, 0x2, 0x2, 0x52b, 0x52c, 0x7, 0x3a, 0x2, 0x2, 0x52c, 
       0x52d, 0x7, 0x10e, 0x2, 0x2, 0x52d, 0x52e, 0x5, 0x144, 0xa3, 0x2, 
       0x52e, 0x52f, 0x7, 0xe9, 0x2, 0x2, 0x52f, 0x530, 0x7, 0x56, 0x2, 
       0x2, 0x530, 0x531, 0x5, 0x144, 0xa3, 0x2, 0x531, 0x532, 0x7, 0x115, 
       0x2, 0x2, 0x532, 0x533, 0x5, 0x19a, 0xce, 0x2, 0x533, 0x735, 0x3, 
       0x2, 0x2, 0x2, 0x534, 0x535, 0x7, 0x3a, 0x2, 0x2, 0x535, 0x536, 0x7, 
       0x10e, 0x2, 0x2, 0x536, 0x537, 0x5, 0x144, 0xa3, 0x2, 0x537, 0x538, 
       0x7, 0x77, 0x2, 0x2, 0x538, 0x539, 0x9, 0x14, 0x2, 0x2, 0x539, 0x53a, 
       0x7, 0x5, 0x2, 0x2, 0x53a, 0x53b, 0x5, 0x142, 0xa2, 0x2, 0x53b, 0x53c, 
       0x7, 0x6, 0x2, 0x2, 0x53c, 0x735, 0x3, 0x2, 0x2, 0x2, 0x53d, 0x53e, 
       0x7, 0x3a, 0x2, 0x2, 0x53e, 0x53f, 0x7, 0x10e, 0x2, 0x2, 0x53f, 0x540, 
       0x5, 0x144, 0xa3, 0x2, 0x540, 0x541, 0x7, 0x77, 0x2, 0x2, 0x541, 
       0x542, 0x9, 0x14, 0x2, 0x2, 0x542, 0x543, 0x5, 0x142, 0xa2, 0x2, 
       0x543, 0x735, 0x3, 0x2, 0x2, 0x2, 0x544, 0x545, 0x7, 0x3a, 0x2, 0x2, 
       0x545, 0x546, 0x9, 0x15, 0x2, 0x2, 0x546, 0x547, 0x5, 0x144, 0xa3, 
       0x2, 0x547, 0x548, 0x7, 0xe9, 0x2, 0x2, 0x548, 0x549, 0x7, 0x115, 
       0x2, 0x2, 0x549, 0x54a, 0x5, 0x144, 0xa3, 0x2, 0x54a, 0x735, 0x3, 
       0x2, 0x2, 0x2, 0x54b, 0x54c, 0x7, 0x3a, 0x2, 0x2, 0x54c, 0x54d, 0x9, 
       0x15, 0x2, 0x2, 0x54d, 0x54e, 0x5, 0x144, 0xa3, 0x2, 0x54e, 0x54f, 
       0x7, 0xff, 0x2, 0x2, 0x54f, 0x550, 0x7, 0x111, 0x2, 0x2, 0x550, 0x551, 
       0x5, 0xce, 0x68, 0x2, 0x551, 0x735, 0x3, 0x2, 0x2, 0x2, 0x552, 0x553, 
       0x7, 0x3a, 0x2, 0x2, 0x553, 0x554, 0x9, 0x15, 0x2, 0x2, 0x554, 0x555, 
       0x5, 0x144, 0xa3, 0x2, 0x555, 0x556, 0x7, 0x126, 0x2, 0x2, 0x556, 
       0x559, 0x7, 0x111, 0x2, 0x2, 0x557, 0x558, 0x7, 0x99, 0x2, 0x2, 0x558, 
       0x55a, 0x7, 0x7e, 0x2, 0x2, 0x559, 0x557, 0x3, 0x2, 0x2, 0x2, 0x559, 
       0x55a, 0x3, 0x2, 0x2, 0x2, 0x55a, 0x55b, 0x3, 0x2, 0x2, 0x2, 0x55b, 
       0x55c, 0x5, 0xce, 0x68, 0x2, 0x55c, 0x735, 0x3, 0x2, 0x2, 0x2, 0x55d, 
       0x55e, 0x7, 0x3a, 0x2, 0x2, 0x55e, 0x55f, 0x7, 0x10e, 0x2, 0x2, 0x55f, 
       0x560, 0x5, 0x144, 0xa3, 0x2, 0x560, 0x562, 0x9, 0x16, 0x2, 0x2, 
       0x561, 0x563, 0x7, 0x56, 0x2, 0x2, 0x562, 0x561, 0x3, 0x2, 0x2, 0x2, 
       0x562, 0x563, 0x3, 0x2, 0x2, 0x2, 0x563, 0x564, 0x3, 0x2, 0x2, 0x2, 
       0x564, 0x566, 0x5, 0x144, 0xa3, 0x2, 0x565, 0x567, 0x5, 0x1a6, 0xd4, 
       0x2, 0x566, 0x565, 0x3, 0x2, 0x2, 0x2, 0x566, 0x567, 0x3, 0x2, 0x2, 
       0x2, 0x567, 0x735, 0x3, 0x2, 0x2, 0x2, 0x568, 0x569, 0x7, 0x3a, 0x2, 
       0x2, 0x569, 0x56a, 0x7, 0x10e, 0x2, 0x2, 0x56a, 0x56c, 0x5, 0x144, 
       0xa3, 0x2, 0x56b, 0x56d, 0x5, 0xbc, 0x5f, 0x2, 0x56c, 0x56b, 0x3, 
       0x2, 0x2, 0x2, 0x56c, 0x56d, 0x3, 0x2, 0x2, 0x2, 0x56d, 0x56e, 0x3, 
       0x2, 0x2, 0x2, 0x56e, 0x570, 0x7, 0x4e, 0x2, 0x2, 0x56f, 0x571, 0x7, 
       0x56, 0x2, 0x2, 0x570, 0x56f, 0x3, 0x2, 0x2, 0x2, 0x570, 0x571, 0x3, 
       0x2, 0x2, 0x2, 0x571, 0x572, 0x3, 0x2, 0x2, 0x2, 0x572, 0x573, 0x5, 
       0x144, 0xa3, 0x2, 0x573, 0x575, 0x5, 0x182, 0xc2, 0x2, 0x574, 0x576, 
       0x5, 0x178, 0xbd, 0x2, 0x575, 0x574, 0x3, 0x2, 0x2, 0x2, 0x575, 0x576, 
       0x3, 0x2, 0x2, 0x2, 0x576, 0x735, 0x3, 0x2, 0x2, 0x2, 0x577, 0x578, 
       0x7, 0x3a, 0x2, 0x2, 0x578, 0x579, 0x7, 0x10e, 0x2, 0x2, 0x579, 0x57b, 
       0x5, 0x144, 0xa3, 0x2, 0x57a, 0x57c, 0x5, 0xbc, 0x5f, 0x2, 0x57b, 
       0x57a, 0x3, 0x2, 0x2, 0x2, 0x57b, 0x57c, 0x3, 0x2, 0x2, 0x2, 0x57c, 
       0x57d, 0x3, 0x2, 0x2, 0x2, 0x57d, 0x57e, 0x7, 0xeb, 0x2, 0x2, 0x57e, 
       0x57f, 0x7, 0x57, 0x2, 0x2, 0x57f, 0x580, 0x7, 0x5, 0x2, 0x2, 0x580, 
       0x581, 0x5, 0x17c, 0xbf, 0x2, 0x581, 0x582, 0x7, 0x6, 0x2, 0x2, 0x582, 
       0x735, 0x3, 0x2, 0x2, 0x2, 0x583, 0x584, 0x7, 0x3a, 0x2, 0x2, 0x584, 
       0x585, 0x7, 0x10e, 0x2, 0x2, 0x585, 0x587, 0x5, 0x144, 0xa3, 0x2, 
       0x586, 0x588, 0x5, 0xbc, 0x5f, 0x2, 0x587, 0x586, 0x3, 0x2, 0x2, 
       0x2, 0x587, 0x588, 0x3, 0x2, 0x2, 0x2, 0x588, 0x589, 0x3, 0x2, 0x2, 
       0x2, 0x589, 0x58a, 0x7, 0xff, 0x2, 0x2, 0x58a, 0x58b, 0x7, 0xfc, 
       0x2, 0x2, 0x58b, 0x58f, 0x7, 0x147, 0x2, 0x2, 0x58c, 0x58d, 0x7, 
       0x131, 0x2, 0x2, 0x58d, 0x58e, 0x7, 0xfd, 0x2, 0x2, 0x58e, 0x590, 
       0x5, 0xce, 0x68, 0x2, 0x58f, 0x58c, 0x3, 0x2, 0x2, 0x2, 0x58f, 0x590, 
       0x3, 0x2, 0x2, 0x2, 0x590, 0x735, 0x3, 0x2, 0x2, 0x2, 0x591, 0x592, 
       0x7, 0x3a, 0x2, 0x2, 0x592, 0x593, 0x7, 0x10e, 0x2, 0x2, 0x593, 0x595, 
       0x5, 0x144, 0xa3, 0x2, 0x594, 0x596, 0x5, 0xbc, 0x5f, 0x2, 0x595, 
       0x594, 0x3, 0x2, 0x2, 0x2, 0x595, 0x596, 0x3, 0x2, 0x2, 0x2, 0x596, 
       0x597, 0x3, 0x2, 0x2, 0x2, 0x597, 0x598, 0x7, 0xff, 0x2, 0x2, 0x598, 
       0x599, 0x7, 0xfd, 0x2, 0x2, 0x599, 0x59a, 0x5, 0xce, 0x68, 0x2, 0x59a, 
       0x735, 0x3, 0x2, 0x2, 0x2, 0x59b, 0x59c, 0x7, 0x3a, 0x2, 0x2, 0x59c, 
       0x59d, 0x9, 0x15, 0x2, 0x2, 0x59d, 0x59e, 0x5, 0x144, 0xa3, 0x2, 
       0x59e, 0x5a2, 0x7, 0x37, 0x2, 0x2, 0x59f, 0x5a0, 0x7, 0x99, 0x2, 
       0x2, 0x5a0, 0x5a1, 0x7, 0xc4, 0x2, 0x2, 0x5a1, 0x5a3, 0x7, 0x7e, 
       0x2, 0x2, 0x5a2, 0x59f, 0x3, 0x2, 0x2, 0x2, 0x5a2, 0x5a3, 0x3, 0x2, 
       0x2, 0x2, 0x5a3, 0x5a5, 0x3, 0x2, 0x2, 0x2, 0x5a4, 0x5a6, 0x5, 0xba, 
       0x5e, 0x2, 0x5a5, 0x5a4, 0x3, 0x2, 0x2, 0x2, 0x5a6, 0x5a7, 0x3, 0x2, 
       0x2, 0x2, 0x5a7, 0x5a5, 0x3, 0x2, 0x2, 0x2, 0x5a7, 0x5a8, 0x3, 0x2, 
       0x2, 0x2, 0x5a8, 0x735, 0x3, 0x2, 0x2, 0x2, 0x5a9, 0x5aa, 0x7, 0x3a, 
       0x2, 0x2, 0x5aa, 0x5ab, 0x7, 0x10e, 0x2, 0x2, 0x5ab, 0x5ac, 0x5, 
       0x144, 0xa3, 0x2, 0x5ac, 0x5ad, 0x5, 0xbc, 0x5f, 0x2, 0x5ad, 0x5ae, 
       0x7, 0xe9, 0x2, 0x2, 0x5ae, 0x5af, 0x7, 0x115, 0x2, 0x2, 0x5af, 0x5b0, 
       0x5, 0xbc, 0x5f, 0x2, 0x5b0, 0x735, 0x3, 0x2, 0x2, 0x2, 0x5b1, 0x5b2, 
       0x7, 0x3a, 0x2, 0x2, 0x5b2, 0x5b3, 0x9, 0x15, 0x2, 0x2, 0x5b3, 0x5b4, 
       0x5, 0x144, 0xa3, 0x2, 0x5b4, 0x5b7, 0x7, 0x77, 0x2, 0x2, 0x5b5, 
       0x5b6, 0x7, 0x99, 0x2, 0x2, 0x5b6, 0x5b8, 0x7, 0x7e, 0x2, 0x2, 0x5b7, 
       0x5b5, 0x3, 0x2, 0x2, 0x2, 0x5b7, 0x5b8, 0x3, 0x2, 0x2, 0x2, 0x5b8, 
       0x5b9, 0x3, 0x2, 0x2, 0x2, 0x5b9, 0x5be, 0x5, 0xbc, 0x5f, 0x2, 0x5ba, 
       0x5bb, 0x7, 0x3, 0x2, 0x2, 0x5bb, 0x5bd, 0x5, 0xbc, 0x5f, 0x2, 0x5bc, 
       0x5ba, 0x3, 0x2, 0x2, 0x2, 0x5bd, 0x5c0, 0x3, 0x2, 0x2, 0x2, 0x5be, 
       0x5bc, 0x3, 0x2, 0x2, 0x2, 0x5be, 0x5bf, 0x3, 0x2, 0x2, 0x2, 0x5bf, 
       0x5c2, 0x3, 0x2, 0x2, 0x2, 0x5c0, 0x5be, 0x3, 0x2, 0x2, 0x2, 0x5c1, 
       0x5c3, 0x7, 0xe0, 0x2, 0x2, 0x5c2, 0x5c1, 0x3, 0x2, 0x2, 0x2, 0x5c2, 
       0x5c3, 0x3, 0x2, 0x2, 0x2, 0x5c3, 0x735, 0x3, 0x2, 0x2, 0x2, 0x5c4, 
       0x5c5, 0x7, 0x3a, 0x2, 0x2, 0x5c5, 0x5c6, 0x7, 0x10e, 0x2, 0x2, 0x5c6, 
       0x5c8, 0x5, 0x144, 0xa3, 0x2, 0x5c7, 0x5c9, 0x5, 0xbc, 0x5f, 0x2, 
       0x5c8, 0x5c7, 0x3, 0x2, 0x2, 0x2, 0x5c8, 0x5c9, 0x3, 0x2, 0x2, 0x2, 
       0x5c9, 0x5ca, 0x3, 0x2, 0x2, 0x2, 0x5ca, 0x5cb, 0x7, 0xff, 0x2, 0x2, 
       0x5cb, 0x5cc, 0x5, 0xb2, 0x5a, 0x2, 0x5cc, 0x735, 0x3, 0x2, 0x2, 
       0x2, 0x5cd, 0x5ce, 0x7, 0x3a, 0x2, 0x2, 0x5ce, 0x5cf, 0x7, 0x10e, 
       0x2, 0x2, 0x5cf, 0x5d0, 0x5, 0x144, 0xa3, 0x2, 0x5d0, 0x5d1, 0x7, 
       0xe5, 0x2, 0x2, 0x5d1, 0x5d2, 0x7, 0xd7, 0x2, 0x2, 0x5d2, 0x735, 
       0x3, 0x2, 0x2, 0x2, 0x5d3, 0x5d4, 0x7, 0x77, 0x2, 0x2, 0x5d4, 0x5d7, 
       0x7, 0x10e, 0x2, 0x2, 0x5d5, 0x5d6, 0x7, 0x99, 0x2, 0x2, 0x5d6, 0x5d8, 
       0x7, 0x7e, 0x2, 0x2, 0x5d7, 0x5d5, 0x3, 0x2, 0x2, 0x2, 0x5d7, 0x5d8, 
       0x3, 0x2, 0x2, 0x2, 0x5d8, 0x5d9, 0x3, 0x2, 0x2, 0x2, 0x5d9, 0x5db, 
       0x5, 0x144, 0xa3, 0x2, 0x5da, 0x5dc, 0x7, 0xe0, 0x2, 0x2, 0x5db, 
       0x5da, 0x3, 0x2, 0x2, 0x2, 0x5db, 0x5dc, 0x3, 0x2, 0x2, 0x2, 0x5dc, 
       0x735, 0x3, 0x2, 0x2, 0x2, 0x5dd, 0x5de, 0x7, 0x77, 0x2, 0x2, 0x5de, 
       0x5e1, 0x7, 0x12c, 0x2, 0x2, 0x5df, 0x5e0, 0x7, 0x99, 0x2, 0x2, 0x5e0, 
       0x5e2, 0x7, 0x7e, 0x2, 0x2, 0x5e1, 0x5df, 0x3, 0x2, 0x2, 0x2, 0x5e1, 
       0x5e2, 0x3, 0x2, 0x2, 0x2, 0x5e2, 0x5e3, 0x3, 0x2, 0x2, 0x2, 0x5e3, 
       0x735, 0x5, 0x144, 0xa3, 0x2, 0x5e4, 0x5e7, 0x7, 0x60, 0x2, 0x2, 
       0x5e5, 0x5e6, 0x7, 0xcc, 0x2, 0x2, 0x5e6, 0x5e8, 0x7, 0xeb, 0x2, 
       0x2, 0x5e7, 0x5e5, 0x3, 0x2, 0x2, 0x2, 0x5e7, 0x5e8, 0x3, 0x2, 0x2, 
       0x2, 0x5e8, 0x5ed, 0x3, 0x2, 0x2, 0x2, 0x5e9, 0x5eb, 0x7, 0x93, 0x2, 
       0x2, 0x5ea, 0x5e9, 0x3, 0x2, 0x2, 0x2, 0x5ea, 0x5eb, 0x3, 0x2, 0x2, 
       0x2, 0x5eb, 0x5ec, 0x3, 0x2, 0x2, 0x2, 0x5ec, 0x5ee, 0x7, 0x112, 
       0x2, 0x2, 0x5ed, 0x5ea, 0x3, 0x2, 0x2, 0x2, 0x5ed, 0x5ee, 0x3, 0x2, 
       0x2, 0x2, 0x5ee, 0x5ef, 0x3, 0x2, 0x2, 0x2, 0x5ef, 0x5f3, 0x7, 0x12c, 
       0x2, 0x2, 0x5f0, 0x5f1, 0x7, 0x99, 0x2, 0x2, 0x5f1, 0x5f2, 0x7, 0xc4, 
       0x2, 0x2, 0x5f2, 0x5f4, 0x7, 0x7e, 0x2, 0x2, 0x5f3, 0x5f0, 0x3, 0x2, 
       0x2, 0x2, 0x5f3, 0x5f4, 0x3, 0x2, 0x2, 0x2, 0x5f4, 0x5f5, 0x3, 0x2, 
       0x2, 0x2, 0x5f5, 0x5f7, 0x5, 0x144, 0xa3, 0x2, 0x5f6, 0x5f8, 0x5, 
       0x134, 0x9b, 0x2, 0x5f7, 0x5f6, 0x3, 0x2, 0x2, 0x2, 0x5f7, 0x5f8, 
       0x3, 0x2, 0x2, 0x2, 0x5f8, 0x601, 0x3, 0x2, 0x2, 0x2, 0x5f9, 0x600, 
       0x5, 0xb4, 0x5b, 0x2, 0x5fa, 0x5fb, 0x7, 0xd6, 0x2, 0x2, 0x5fb, 0x5fc, 
       0x7, 0xc8, 0x2, 0x2, 0x5fc, 0x600, 0x5, 0x12c, 0x97, 0x2, 0x5fd, 
       0x5fe, 0x7, 0x111, 0x2, 0x2, 0x5fe, 0x600, 0x5, 0xce, 0x68, 0x2, 
       0x5ff, 0x5f9, 0x3, 0x2, 0x2, 0x2, 0x5ff, 0x5fa, 0x3, 0x2, 0x2, 0x2, 
       0x5ff, 0x5fd, 0x3, 0x2, 0x2, 0x2, 0x600, 0x603, 0x3, 0x2, 0x2, 0x2, 
       0x601, 0x5ff, 0x3, 0x2, 0x2, 0x2, 0x601, 0x602, 0x3, 0x2, 0x2, 0x2, 
       0x602, 0x604, 0x3, 0x2, 0x2, 0x2, 0x603, 0x601, 0x3, 0x2, 0x2, 0x2, 
       0x604, 0x605, 0x7, 0x41, 0x2, 0x2, 0x605, 0x606, 0x5, 0xb6, 0x5c, 
       0x2, 0x606, 0x735, 0x3, 0x2, 0x2, 0x2, 0x607, 0x60a, 0x7, 0x60, 0x2, 
       0x2, 0x608, 0x609, 0x7, 0xcc, 0x2, 0x2, 0x609, 0x60b, 0x7, 0xeb, 
       0x2, 0x2, 0x60a, 0x608, 0x3, 0x2, 0x2, 0x2, 0x60a, 0x60b, 0x3, 0x2, 
       0x2, 0x2, 0x60b, 0x60d, 0x3, 0x2, 0x2, 0x2, 0x60c, 0x60e, 0x7, 0x93, 
       0x2, 0x2, 0x60d, 0x60c, 0x3, 0x2, 0x2, 0x2, 0x60d, 0x60e, 0x3, 0x2, 
       0x2, 0x2, 0x60e, 0x60f, 0x3, 0x2, 0x2, 0x2, 0x60f, 0x610, 0x7, 0x112, 
       0x2, 0x2, 0x610, 0x611, 0x7, 0x12c, 0x2, 0x2, 0x611, 0x616, 0x5, 
       0x146, 0xa4, 0x2, 0x612, 0x613, 0x7, 0x5, 0x2, 0x2, 0x613, 0x614, 
       0x5, 0x180, 0xc1, 0x2, 0x614, 0x615, 0x7, 0x6, 0x2, 0x2, 0x615, 0x617, 
       0x3, 0x2, 0x2, 0x2, 0x616, 0x612, 0x3, 0x2, 0x2, 0x2, 0x616, 0x617, 
       0x3, 0x2, 0x2, 0x2, 0x617, 0x618, 0x3, 0x2, 0x2, 0x2, 0x618, 0x61b, 
       0x5, 0xca, 0x66, 0x2, 0x619, 0x61a, 0x7, 0xcb, 0x2, 0x2, 0x61a, 0x61c, 
       0x5, 0xce, 0x68, 0x2, 0x61b, 0x619, 0x3, 0x2, 0x2, 0x2, 0x61b, 0x61c, 
       0x3, 0x2, 0x2, 0x2, 0x61c, 0x735, 0x3, 0x2, 0x2, 0x2, 0x61d, 0x61e, 
       0x7, 0x3a, 0x2, 0x2, 0x61e, 0x61f, 0x7, 0x12c, 0x2, 0x2, 0x61f, 0x621, 
       0x5, 0x144, 0xa3, 0x2, 0x620, 0x622, 0x7, 0x41, 0x2, 0x2, 0x621, 
       0x620, 0x3, 0x2, 0x2, 0x2, 0x621, 0x622, 0x3, 0x2, 0x2, 0x2, 0x622, 
       0x623, 0x3, 0x2, 0x2, 0x2, 0x623, 0x624, 0x5, 0xb6, 0x5c, 0x2, 0x624, 
       0x735, 0x3, 0x2, 0x2, 0x2, 0x625, 0x628, 0x7, 0x60, 0x2, 0x2, 0x626, 
       0x627, 0x7, 0xcc, 0x2, 0x2, 0x627, 0x629, 0x7, 0xeb, 0x2, 0x2, 0x628, 
       0x626, 0x3, 0x2, 0x2, 0x2, 0x628, 0x629, 0x3, 0x2, 0x2, 0x2, 0x629, 
       0x62b, 0x3, 0x2, 0x2, 0x2, 0x62a, 0x62c, 0x7, 0x112, 0x2, 0x2, 0x62b, 
       0x62a, 0x3, 0x2, 0x2, 0x2, 0x62b, 0x62c, 0x3, 0x2, 0x2, 0x2, 0x62c, 
       0x62d, 0x3, 0x2, 0x2, 0x2, 0x62d, 0x631, 0x7, 0x91, 0x2, 0x2, 0x62e, 
       0x62f, 0x7, 0x99, 0x2, 0x2, 0x62f, 0x630, 0x7, 0xc4, 0x2, 0x2, 0x630, 
       0x632, 0x7, 0x7e, 0x2, 0x2, 0x631, 0x62e, 0x3, 0x2, 0x2, 0x2, 0x631, 
       0x632, 0x3, 0x2, 0x2, 0x2, 0x632, 0x633, 0x3, 0x2, 0x2, 0x2, 0x633, 
       0x634, 0x5, 0x144, 0xa3, 0x2, 0x634, 0x635, 0x7, 0x41, 0x2, 0x2, 
       0x635, 0x63f, 0x7, 0x147, 0x2, 0x2, 0x636, 0x637, 0x7, 0x12a, 0x2, 
       0x2, 0x637, 0x63c, 0x5, 0xe0, 0x71, 0x2, 0x638, 0x639, 0x7, 0x3, 
       0x2, 0x2, 0x639, 0x63b, 0x5, 0xe0, 0x71, 0x2, 0x63a, 0x638, 0x3, 
       0x2, 0x2, 0x2, 0x63b, 0x63e, 0x3, 0x2, 0x2, 0x2, 0x63c, 0x63a, 0x3, 
       0x2, 0x2, 0x2, 0x63c, 0x63d, 0x3, 0x2, 0x2, 0x2, 0x63d, 0x640, 0x3, 
       0x2, 0x2, 0x2, 0x63e, 0x63c, 0x3, 0x2, 0x2, 0x2, 0x63f, 0x636, 0x3, 
       0x2, 0x2, 0x2, 0x63f, 0x640, 0x3, 0x2, 0x2, 0x2, 0x640, 0x735, 0x3, 
       0x2, 0x2, 0x2, 0x641, 0x643, 0x7, 0x77, 0x2, 0x2, 0x642, 0x644, 0x7, 
       0x112, 0x2, 0x2, 0x643, 0x642, 0x3, 0x2, 0x2, 0x2, 0x643, 0x644, 
       0x3, 0x2, 0x2, 0x2, 0x644, 0x645, 0x3, 0x2, 0x2, 0x2, 0x645, 0x648, 
       0x7, 0x91, 0x2, 0x2, 0x646, 0x647, 0x7, 0x99, 0x2, 0x2, 0x647, 0x649, 
       0x7, 0x7e, 0x2, 0x2, 0x648, 0x646, 0x3, 0x2, 0x2, 0x2, 0x648, 0x649, 
       0x3, 0x2, 0x2, 0x2, 0x649, 0x64a, 0x3, 0x2, 0x2, 0x2, 0x64a, 0x735, 
       0x5, 0x144, 0xa3, 0x2, 0x64b, 0x64d, 0x7, 0x7f, 0x2, 0x2, 0x64c, 
       0x64e, 0x9, 0x17, 0x2, 0x2, 0x64d, 0x64c, 0x3, 0x2, 0x2, 0x2, 0x64d, 
       0x64e, 0x3, 0x2, 0x2, 0x2, 0x64e, 0x64f, 0x3, 0x2, 0x2, 0x2, 0x64f, 
       0x735, 0x5, 0xa6, 0x54, 0x2, 0x650, 0x651, 0x7, 0x102, 0x2, 0x2, 
       0x651, 0x654, 0x7, 0x10f, 0x2, 0x2, 0x652, 0x653, 0x9, 0x13, 0x2, 
       0x2, 0x653, 0x655, 0x5, 0x144, 0xa3, 0x2, 0x654, 0x652, 0x3, 0x2, 
       0x2, 0x2, 0x654, 0x655, 0x3, 0x2, 0x2, 0x2, 0x655, 0x65a, 0x3, 0x2, 
       0x2, 0x2, 0x656, 0x658, 0x7, 0xaf, 0x2, 0x2, 0x657, 0x656, 0x3, 0x2, 
       0x2, 0x2, 0x657, 0x658, 0x3, 0x2, 0x2, 0x2, 0x658, 0x659, 0x3, 0x2, 
       0x2, 0x2, 0x659, 0x65b, 0x7, 0x147, 0x2, 0x2, 0x65a, 0x657, 0x3, 
       0x2, 0x2, 0x2, 0x65a, 0x65b, 0x3, 0x2, 0x2, 0x2, 0x65b, 0x735, 0x3, 
       0x2, 0x2, 0x2, 0x65c, 0x65d, 0x7, 0x102, 0x2, 0x2, 0x65d, 0x65e, 
       0x7, 0x10e, 0x2, 0x2, 0x65e, 0x661, 0x7, 0x81, 0x2, 0x2, 0x65f, 0x660, 
       0x9, 0x13, 0x2, 0x2, 0x660, 0x662, 0x5, 0x144, 0xa3, 0x2, 0x661, 
       0x65f, 0x3, 0x2, 0x2, 0x2, 0x661, 0x662, 0x3, 0x2, 0x2, 0x2, 0x662, 
       0x663, 0x3, 0x2, 0x2, 0x2, 0x663, 0x664, 0x7, 0xaf, 0x2, 0x2, 0x664, 
       0x666, 0x7, 0x147, 0x2, 0x2, 0x665, 0x667, 0x5, 0xbc, 0x5f, 0x2, 
       0x666, 0x665, 0x3, 0x2, 0x2, 0x2, 0x666, 0x667, 0x3, 0x2, 0x2, 0x2, 
       0x667, 0x735, 0x3, 0x2, 0x2, 0x2, 0x668, 0x669, 0x7, 0x102, 0x2, 
       0x2, 0x669, 0x66a, 0x7, 0x111, 0x2, 0x2, 0x66a, 0x66f, 0x5, 0x144, 
       0xa3, 0x2, 0x66b, 0x66c, 0x7, 0x5, 0x2, 0x2, 0x66c, 0x66d, 0x5, 0xd2, 
       0x6a, 0x2, 0x66d, 0x66e, 0x7, 0x6, 0x2, 0x2, 0x66e, 0x670, 0x3, 0x2, 
       0x2, 0x2, 0x66f, 0x66b, 0x3, 0x2, 0x2, 0x2, 0x66f, 0x670, 0x3, 0x2, 
       0x2, 0x2, 0x670, 0x735, 0x3, 0x2, 0x2, 0x2, 0x671, 0x672, 0x7, 0x102, 
       0x2, 0x2, 0x672, 0x673, 0x7, 0x57, 0x2, 0x2, 0x673, 0x674, 0x9, 0x13, 
       0x2, 0x2, 0x674, 0x677, 0x5, 0x144, 0xa3, 0x2, 0x675, 0x676, 0x9, 
       0x13, 0x2, 0x2, 0x676, 0x678, 0x5, 0x144, 0xa3, 0x2, 0x677, 0x675, 
       0x3, 0x2, 0x2, 0x2, 0x677, 0x678, 0x3, 0x2, 0x2, 0x2, 0x678, 0x735, 
       0x3, 0x2, 0x2, 0x2, 0x679, 0x67a, 0x7, 0x102, 0x2, 0x2, 0x67a, 0x67d, 
       0x7, 0x12d, 0x2, 0x2, 0x67b, 0x67c, 0x9, 0x13, 0x2, 0x2, 0x67c, 0x67e, 
       0x5, 0x144, 0xa3, 0x2, 0x67d, 0x67b, 0x3, 0x2, 0x2, 0x2, 0x67d, 0x67e, 
       0x3, 0x2, 0x2, 0x2, 0x67e, 0x683, 0x3, 0x2, 0x2, 0x2, 0x67f, 0x681, 
       0x7, 0xaf, 0x2, 0x2, 0x680, 0x67f, 0x3, 0x2, 0x2, 0x2, 0x680, 0x681, 
       0x3, 0x2, 0x2, 0x2, 0x681, 0x682, 0x3, 0x2, 0x2, 0x2, 0x682, 0x684, 
       0x7, 0x147, 0x2, 0x2, 0x683, 0x680, 0x3, 0x2, 0x2, 0x2, 0x683, 0x684, 
       0x3, 0x2, 0x2, 0x2, 0x684, 0x735, 0x3, 0x2, 0x2, 0x2, 0x685, 0x686, 
       0x7, 0x102, 0x2, 0x2, 0x686, 0x687, 0x7, 0xd7, 0x2, 0x2, 0x687, 0x689, 
       0x5, 0x144, 0xa3, 0x2, 0x688, 0x68a, 0x5, 0xbc, 0x5f, 0x2, 0x689, 
       0x688, 0x3, 0x2, 0x2, 0x2, 0x689, 0x68a, 0x3, 0x2, 0x2, 0x2, 0x68a, 
       0x735, 0x3, 0x2, 0x2, 0x2, 0x68b, 0x68d, 0x7, 0x102, 0x2, 0x2, 0x68c, 
       0x68e, 0x5, 0x19e, 0xd0, 0x2, 0x68d, 0x68c, 0x3, 0x2, 0x2, 0x2, 0x68d, 
       0x68e, 0x3, 0x2, 0x2, 0x2, 0x68e, 0x68f, 0x3, 0x2, 0x2, 0x2, 0x68f, 
       0x697, 0x7, 0x92, 0x2, 0x2, 0x690, 0x692, 0x7, 0xaf, 0x2, 0x2, 0x691, 
       0x690, 0x3, 0x2, 0x2, 0x2, 0x691, 0x692, 0x3, 0x2, 0x2, 0x2, 0x692, 
       0x695, 0x3, 0x2, 0x2, 0x2, 0x693, 0x696, 0x5, 0x144, 0xa3, 0x2, 0x694, 
       0x696, 0x7, 0x147, 0x2, 0x2, 0x695, 0x693, 0x3, 0x2, 0x2, 0x2, 0x695, 
       0x694, 0x3, 0x2, 0x2, 0x2, 0x696, 0x698, 0x3, 0x2, 0x2, 0x2, 0x697, 
       0x691, 0x3, 0x2, 0x2, 0x2, 0x697, 0x698, 0x3, 0x2, 0x2, 0x2, 0x698, 
       0x735, 0x3, 0x2, 0x2, 0x2, 0x699, 0x69a, 0x7, 0x102, 0x2, 0x2, 0x69a, 
       0x69b, 0x7, 0x60, 0x2, 0x2, 0x69b, 0x69c, 0x7, 0x10e, 0x2, 0x2, 0x69c, 
       0x69f, 0x5, 0x144, 0xa3, 0x2, 0x69d, 0x69e, 0x7, 0x41, 0x2, 0x2, 
       0x69e, 0x6a0, 0x7, 0xfc, 0x2, 0x2, 0x69f, 0x69d, 0x3, 0x2, 0x2, 0x2, 
       0x69f, 0x6a0, 0x3, 0x2, 0x2, 0x2, 0x6a0, 0x735, 0x3, 0x2, 0x2, 0x2, 
       0x6a1, 0x6a2, 0x7, 0x102, 0x2, 0x2, 0x6a2, 0x6a3, 0x7, 0x63, 0x2, 
       0x2, 0x6a3, 0x735, 0x7, 0xc0, 0x2, 0x2, 0x6a4, 0x6a5, 0x9, 0x18, 
       0x2, 0x2, 0x6a5, 0x6a7, 0x7, 0x91, 0x2, 0x2, 0x6a6, 0x6a8, 0x7, 0x81, 
       0x2, 0x2, 0x6a7, 0x6a6, 0x3, 0x2, 0x2, 0x2, 0x6a7, 0x6a8, 0x3, 0x2, 
       0x2, 0x2, 0x6a8, 0x6a9, 0x3, 0x2, 0x2, 0x2, 0x6a9, 0x735, 0x5, 0xc2, 
       0x62, 0x2, 0x6aa, 0x6ab, 0x9, 0x18, 0x2, 0x2, 0x6ab, 0x6ad, 0x5, 
       0xc0, 0x61, 0x2, 0x6ac, 0x6ae, 0x7, 0x81, 0x2, 0x2, 0x6ad, 0x6ac, 
       0x3, 0x2, 0x2, 0x2, 0x6ad, 0x6ae, 0x3, 0x2, 0x2, 0x2, 0x6ae, 0x6af, 
       0x3, 0x2, 0x2, 0x2, 0x6af, 0x6b0, 0x5, 0x144, 0xa3, 0x2, 0x6b0, 0x735, 
       0x3, 0x2, 0x2, 0x2, 0x6b1, 0x6b3, 0x9, 0x18, 0x2, 0x2, 0x6b2, 0x6b4, 
       0x7, 0x10e, 0x2, 0x2, 0x6b3, 0x6b2, 0x3, 0x2, 0x2, 0x2, 0x6b3, 0x6b4, 
       0x3, 0x2, 0x2, 0x2, 0x6b4, 0x6b6, 0x3, 0x2, 0x2, 0x2, 0x6b5, 0x6b7, 
       0x9, 0x19, 0x2, 0x2, 0x6b6, 0x6b5, 0x3, 0x2, 0x2, 0x2, 0x6b6, 0x6b7, 
       0x3, 0x2, 0x2, 0x2, 0x6b7, 0x6b8, 0x3, 0x2, 0x2, 0x2, 0x6b8, 0x6ba, 
       0x5, 0x144, 0xa3, 0x2, 0x6b9, 0x6bb, 0x5, 0xbc, 0x5f, 0x2, 0x6ba, 
       0x6b9, 0x3, 0x2, 0x2, 0x2, 0x6ba, 0x6bb, 0x3, 0x2, 0x2, 0x2, 0x6bb, 
       0x6bd, 0x3, 0x2, 0x2, 0x2, 0x6bc, 0x6be, 0x5, 0xc4, 0x63, 0x2, 0x6bd, 
       0x6bc, 0x3, 0x2, 0x2, 0x2, 0x6bd, 0x6be, 0x3, 0x2, 0x2, 0x2, 0x6be, 
       0x735, 0x3, 0x2, 0x2, 0x2, 0x6bf, 0x6c1, 0x9, 0x18, 0x2, 0x2, 0x6c0, 
       0x6c2, 0x7, 0xe1, 0x2, 0x2, 0x6c1, 0x6c0, 0x3, 0x2, 0x2, 0x2, 0x6c1, 
       0x6c2, 0x3, 0x2, 0x2, 0x2, 0x6c2, 0x6c3, 0x3, 0x2, 0x2, 0x2, 0x6c3, 
       0x735, 0x5, 0xb6, 0x5c, 0x2, 0x6c4, 0x6c5, 0x7, 0x58, 0x2, 0x2, 0x6c5, 
       0x6c6, 0x7, 0xc8, 0x2, 0x2, 0x6c6, 0x6c7, 0x5, 0xc0, 0x61, 0x2, 0x6c7, 
       0x6c8, 0x5, 0x144, 0xa3, 0x2, 0x6c8, 0x6c9, 0x7, 0xa6, 0x2, 0x2, 
       0x6c9, 0x6ca, 0x9, 0x1a, 0x2, 0x2, 0x6ca, 0x735, 0x3, 0x2, 0x2, 0x2, 
       0x6cb, 0x6cc, 0x7, 0x58, 0x2, 0x2, 0x6cc, 0x6cd, 0x7, 0xc8, 0x2, 
       0x2, 0x6cd, 0x6ce, 0x7, 0x10e, 0x2, 0x2, 0x6ce, 0x6cf, 0x5, 0x144, 
       0xa3, 0x2, 0x6cf, 0x6d0, 0x7, 0xa6, 0x2, 0x2, 0x6d0, 0x6d1, 0x9, 
       0x1a, 0x2, 0x2, 0x6d1, 0x735, 0x3, 0x2, 0x2, 0x2, 0x6d2, 0x6d3, 0x7, 
       0xe8, 0x2, 0x2, 0x6d3, 0x6d4, 0x7, 0x10e, 0x2, 0x2, 0x6d4, 0x735, 
       0x5, 0x144, 0xa3, 0x2, 0x6d5, 0x6dd, 0x7, 0xe8, 0x2, 0x2, 0x6d6, 
       0x6de, 0x7, 0x147, 0x2, 0x2, 0x6d7, 0x6d9, 0xb, 0x2, 0x2, 0x2, 0x6d8, 
       0x6d7, 0x3, 0x2, 0x2, 0x2, 0x6d9, 0x6dc, 0x3, 0x2, 0x2, 0x2, 0x6da, 
       0x6db, 0x3, 0x2, 0x2, 0x2, 0x6da, 0x6d8, 0x3, 0x2, 0x2, 0x2, 0x6db, 
       0x6de, 0x3, 0x2, 0x2, 0x2, 0x6dc, 0x6da, 0x3, 0x2, 0x2, 0x2, 0x6dd, 
       0x6d6, 0x3, 0x2, 0x2, 0x2, 0x6dd, 0x6da, 0x3, 0x2, 0x2, 0x2, 0x6de, 
       0x735, 0x3, 0x2, 0x2, 0x2, 0x6df, 0x6e1, 0x7, 0x4a, 0x2, 0x2, 0x6e0, 
       0x6e2, 0x7, 0xac, 0x2, 0x2, 0x6e1, 0x6e0, 0x3, 0x2, 0x2, 0x2, 0x6e1, 
       0x6e2, 0x3, 0x2, 0x2, 0x2, 0x6e2, 0x6e3, 0x3, 0x2, 0x2, 0x2, 0x6e3, 
       0x6e4, 0x7, 0x10e, 0x2, 0x2, 0x6e4, 0x6e7, 0x5, 0x144, 0xa3, 0x2, 
       0x6e5, 0x6e6, 0x7, 0xcb, 0x2, 0x2, 0x6e6, 0x6e8, 0x5, 0xce, 0x68, 
       0x2, 0x6e7, 0x6e5, 0x3, 0x2, 0x2, 0x2, 0x6e7, 0x6e8, 0x3, 0x2, 0x2, 
       0x2, 0x6e8, 0x6ed, 0x3, 0x2, 0x2, 0x2, 0x6e9, 0x6eb, 0x7, 0x41, 0x2, 
       0x2, 0x6ea, 0x6e9, 0x3, 0x2, 0x2, 0x2, 0x6ea, 0x6eb, 0x3, 0x2, 0x2, 
       0x2, 0x6eb, 0x6ec, 0x3, 0x2, 0x2, 0x2, 0x6ec, 0x6ee, 0x5, 0xb6, 0x5c, 
       0x2, 0x6ed, 0x6ea, 0x3, 0x2, 0x2, 0x2, 0x6ed, 0x6ee, 0x3, 0x2, 0x2, 
       0x2, 0x6ee, 0x735, 0x3, 0x2, 0x2, 0x2, 0x6ef, 0x6f0, 0x7, 0x121, 
       0x2, 0x2, 0x6f0, 0x6f3, 0x7, 0x10e, 0x2, 0x2, 0x6f1, 0x6f2, 0x7, 
       0x99, 0x2, 0x2, 0x6f2, 0x6f4, 0x7, 0x7e, 0x2, 0x2, 0x6f3, 0x6f1, 
       0x3, 0x2, 0x2, 0x2, 0x6f3, 0x6f4, 0x3, 0x2, 0x2, 0x2, 0x6f4, 0x6f5, 
       0x3, 0x2, 0x2, 0x2, 0x6f5, 0x735, 0x5, 0x144, 0xa3, 0x2, 0x6f6, 0x6f7, 
       0x7, 0x50, 0x2, 0x2, 0x6f7, 0x735, 0x7, 0x4a, 0x2, 0x2, 0x6f8, 0x6f9, 
       0x7, 0xb3, 0x2, 0x2, 0x6f9, 0x6fb, 0x7, 0x68, 0x2, 0x2, 0x6fa, 0x6fc, 
       0x7, 0xb4, 0x2, 0x2, 0x6fb, 0x6fa, 0x3, 0x2, 0x2, 0x2, 0x6fb, 0x6fc, 
       0x3, 0x2, 0x2, 0x2, 0x6fc, 0x6fd, 0x3, 0x2, 0x2, 0x2, 0x6fd, 0x6fe, 
       0x7, 0xa0, 0x2, 0x2, 0x6fe, 0x700, 0x7, 0x147, 0x2, 0x2, 0x6ff, 0x701, 
       0x7, 0xd4, 0x2, 0x2, 0x700, 0x6ff, 0x3, 0x2, 0x2, 0x2, 0x700, 0x701, 
       0x3, 0x2, 0x2, 0x2, 0x701, 0x702, 0x3, 0x2, 0x2, 0x2, 0x702, 0x703, 
       0x7, 0xa5, 0x2, 0x2, 0x703, 0x704, 0x7, 0x10e, 0x2, 0x2, 0x704, 0x706, 
       0x5, 0x144, 0xa3, 0x2, 0x705, 0x707, 0x5, 0xbc, 0x5f, 0x2, 0x706, 
       0x705, 0x3, 0x2, 0x2, 0x2, 0x706, 0x707, 0x3, 0x2, 0x2, 0x2, 0x707, 
       0x735, 0x3, 0x2, 0x2, 0x2, 0x708, 0x709, 0x7, 0x11d, 0x2, 0x2, 0x709, 
       0x70a, 0x7, 0x10e, 0x2, 0x2, 0x70a, 0x70c, 0x5, 0x144, 0xa3, 0x2, 
       0x70b, 0x70d, 0x5, 0xbc, 0x5f, 0x2, 0x70c, 0x70b, 0x3, 0x2, 0x2, 
       0x2, 0x70c, 0x70d, 0x3, 0x2, 0x2, 0x2, 0x70d, 0x735, 0x3, 0x2, 0x2, 
       0x2, 0x70e, 0x70f, 0x7, 0xbf, 0x2, 0x2, 0x70f, 0x710, 0x7, 0xea, 
       0x2, 0x2, 0x710, 0x711, 0x7, 0x10e, 0x2, 0x2, 0x711, 0x735, 0x5, 
       0x144, 0xa3, 0x2, 0x712, 0x713, 0x9, 0x1b, 0x2, 0x2, 0x713, 0x71b, 
       0x5, 0x19e, 0xd0, 0x2, 0x714, 0x71c, 0x7, 0x147, 0x2, 0x2, 0x715, 
       0x717, 0xb, 0x2, 0x2, 0x2, 0x716, 0x715, 0x3, 0x2, 0x2, 0x2, 0x717, 
       0x71a, 0x3, 0x2, 0x2, 0x2, 0x718, 0x719, 0x3, 0x2, 0x2, 0x2, 0x718, 
       0x716, 0x3, 0x2, 0x2, 0x2, 0x719, 0x71c, 0x3, 0x2, 0x2, 0x2, 0x71a, 
       0x718, 0x3, 0x2, 0x2, 0x2, 0x71b, 0x714, 0x3, 0x2, 0x2, 0x2, 0x71b, 
       0x718, 0x3, 0x2, 0x2, 0x2, 0x71c, 0x735, 0x3, 0x2, 0x2, 0x2, 0x71d, 
       0x71e, 0x7, 0xff, 0x2, 0x2, 0x71e, 0x722, 0x7, 0xf1, 0x2, 0x2, 0x71f, 
       0x721, 0xb, 0x2, 0x2, 0x2, 0x720, 0x71f, 0x3, 0x2, 0x2, 0x2, 0x721, 
       0x724, 0x3, 0x2, 0x2, 0x2, 0x722, 0x723, 0x3, 0x2, 0x2, 0x2, 0x722, 
       0x720, 0x3, 0x2, 0x2, 0x2, 0x723, 0x735, 0x3, 0x2, 0x2, 0x2, 0x724, 
       0x722, 0x3, 0x2, 0x2, 0x2, 0x725, 0x729, 0x7, 0xff, 0x2, 0x2, 0x726, 
       0x728, 0xb, 0x2, 0x2, 0x2, 0x727, 0x726, 0x3, 0x2, 0x2, 0x2, 0x728, 
       0x72b, 0x3, 0x2, 0x2, 0x2, 0x729, 0x72a, 0x3, 0x2, 0x2, 0x2, 0x729, 
       0x727, 0x3, 0x2, 0x2, 0x2, 0x72a, 0x735, 0x3, 0x2, 0x2, 0x2, 0x72b, 
       0x729, 0x3, 0x2, 0x2, 0x2, 0x72c, 0x735, 0x7, 0xec, 0x2, 0x2, 0x72d, 
       0x731, 0x5, 0xa8, 0x55, 0x2, 0x72e, 0x730, 0xb, 0x2, 0x2, 0x2, 0x72f, 
       0x72e, 0x3, 0x2, 0x2, 0x2, 0x730, 0x733, 0x3, 0x2, 0x2, 0x2, 0x731, 
       0x732, 0x3, 0x2, 0x2, 0x2, 0x731, 0x72f, 0x3, 0x2, 0x2, 0x2, 0x732, 
       0x735, 0x3, 0x2, 0x2, 0x2, 0x733, 0x731, 0x3, 0x2, 0x2, 0x2, 0x734, 
       0x473, 0x3, 0x2, 0x2, 0x2, 0x734, 0x475, 0x3, 0x2, 0x2, 0x2, 0x734, 
       0x478, 0x3, 0x2, 0x2, 0x2, 0x734, 0x47d, 0x3, 0x2, 0x2, 0x2, 0x734, 
       0x48f, 0x3, 0x2, 0x2, 0x2, 0x734, 0x496, 0x3, 0x2, 0x2, 0x2, 0x734, 
       0x49c, 0x3, 0x2, 0x2, 0x2, 0x734, 0x4a6, 0x3, 0x2, 0x2, 0x2, 0x734, 
       0x4b2, 0x3, 0x2, 0x2, 0x2, 0x734, 0x4c1, 0x3, 0x2, 0x2, 0x2, 0x734, 
       0x4e6, 0x3, 0x2, 0x2, 0x2, 0x734, 0x4fb, 0x3, 0x2, 0x2, 0x2, 0x734, 
       0x50a, 0x3, 0x2, 0x2, 0x2, 0x734, 0x51b, 0x3, 0x2, 0x2, 0x2, 0x734, 
       0x522, 0x3, 0x2, 0x2, 0x2, 0x734, 0x52b, 0x3, 0x2, 0x2, 0x2, 0x734, 
       0x534, 0x3, 0x2, 0x2, 0x2, 0x734, 0x53d, 0x3, 0x2, 0x2, 0x2, 0x734, 
       0x544, 0x3, 0x2, 0x2, 0x2, 0x734, 0x54b, 0x3, 0x2, 0x2, 0x2, 0x734, 
       0x552, 0x3, 0x2, 0x2, 0x2, 0x734, 0x55d, 0x3, 0x2, 0x2, 0x2, 0x734, 
       0x568, 0x3, 0x2, 0x2, 0x2, 0x734, 0x577, 0x3, 0x2, 0x2, 0x2, 0x734, 
       0x583, 0x3, 0x2, 0x2, 0x2, 0x734, 0x591, 0x3, 0x2, 0x2, 0x2, 0x734, 
       0x59b, 0x3, 0x2, 0x2, 0x2, 0x734, 0x5a9, 0x3, 0x2, 0x2, 0x2, 0x734, 
       0x5b1, 0x3, 0x2, 0x2, 0x2, 0x734, 0x5c4, 0x3, 0x2, 0x2, 0x2, 0x734, 
       0x5cd, 0x3, 0x2, 0x2, 0x2, 0x734, 0x5d3, 0x3, 0x2, 0x2, 0x2, 0x734, 
       0x5dd, 0x3, 0x2, 0x2, 0x2, 0x734, 0x5e4, 0x3, 0x2, 0x2, 0x2, 0x734, 
       0x607, 0x3, 0x2, 0x2, 0x2, 0x734, 0x61d, 0x3, 0x2, 0x2, 0x2, 0x734, 
       0x625, 0x3, 0x2, 0x2, 0x2, 0x734, 0x641, 0x3, 0x2, 0x2, 0x2, 0x734, 
       0x64b, 0x3, 0x2, 0x2, 0x2, 0x734, 0x650, 0x3, 0x2, 0x2, 0x2, 0x734, 
       0x65c, 0x3, 0x2, 0x2, 0x2, 0x734, 0x668, 0x3, 0x2, 0x2, 0x2, 0x734, 
       0x671, 0x3, 0x2, 0x2, 0x2, 0x734, 0x679, 0x3, 0x2, 0x2, 0x2, 0x734, 
       0x685, 0x3, 0x2, 0x2, 0x2, 0x734, 0x68b, 0x3, 0x2, 0x2, 0x2, 0x734, 
       0x699, 0x3, 0x2, 0x2, 0x2, 0x734, 0x6a1, 0x3, 0x2, 0x2, 0x2, 0x734, 
       0x6a4, 0x3, 0x2, 0x2, 0x2, 0x734, 0x6aa, 0x3, 0x2, 0x2, 0x2, 0x734, 
       0x6b1, 0x3, 0x2, 0x2, 0x2, 0x734, 0x6bf, 0x3, 0x2, 0x2, 0x2, 0x734, 
       0x6c4, 0x3, 0x2, 0x2, 0x2, 0x734, 0x6cb, 0x3, 0x2, 0x2, 0x2, 0x734, 
       0x6d2, 0x3, 0x2, 0x2, 0x2, 0x734, 0x6d5, 0x3, 0x2, 0x2, 0x2, 0x734, 
       0x6df, 0x3, 0x2, 0x2, 0x2, 0x734, 0x6ef, 0x3, 0x2, 0x2, 0x2, 0x734, 
       0x6f6, 0x3, 0x2, 0x2, 0x2, 0x734, 0x6f8, 0x3, 0x2, 0x2, 0x2, 0x734, 
       0x708, 0x3, 0x2, 0x2, 0x2, 0x734, 0x70e, 0x3, 0x2, 0x2, 0x2, 0x734, 
       0x712, 0x3, 0x2, 0x2, 0x2, 0x734, 0x71d, 0x3, 0x2, 0x2, 0x2, 0x734, 
       0x725, 0x3, 0x2, 0x2, 0x2, 0x734, 0x72c, 0x3, 0x2, 0x2, 0x2, 0x734, 
       0x72d, 0x3, 0x2, 0x2, 0x2, 0x735, 0xa7, 0x3, 0x2, 0x2, 0x2, 0x736, 
       0x737, 0x7, 0x60, 0x2, 0x2, 0x737, 0x7df, 0x7, 0xf1, 0x2, 0x2, 0x738, 
       0x739, 0x7, 0x77, 0x2, 0x2, 0x739, 0x7df, 0x7, 0xf1, 0x2, 0x2, 0x73a, 
       0x73c, 0x7, 0x94, 0x2, 0x2, 0x73b, 0x73d, 0x7, 0xf1, 0x2, 0x2, 0x73c, 
       0x73b, 0x3, 0x2, 0x2, 0x2, 0x73c, 0x73d, 0x3, 0x2, 0x2, 0x2, 0x73d, 
       0x7df, 0x3, 0x2, 0x2, 0x2, 0x73e, 0x740, 0x7, 0xee, 0x2, 0x2, 0x73f, 
       0x741, 0x7, 0xf1, 0x2, 0x2, 0x740, 0x73f, 0x3, 0x2, 0x2, 0x2, 0x740, 
       0x741, 0x3, 0x2, 0x2, 0x2, 0x741, 0x7df, 0x3, 0x2, 0x2, 0x2, 0x742, 
       0x743, 0x7, 0x102, 0x2, 0x2, 0x743, 0x7df, 0x7, 0x94, 0x2, 0x2, 0x744, 
       0x745, 0x7, 0x102, 0x2, 0x2, 0x745, 0x747, 0x7, 0xf1, 0x2, 0x2, 0x746, 
       0x748, 0x7, 0x94, 0x2, 0x2, 0x747, 0x746, 0x3, 0x2, 0x2, 0x2, 0x747, 
       0x748, 0x3, 0x2, 0x2, 0x2, 0x748, 0x7df, 0x3, 0x2, 0x2, 0x2, 0x749, 
       0x74a, 0x7, 0x102, 0x2, 0x2, 0x74a, 0x7df, 0x7, 0xde, 0x2, 0x2, 0x74b, 
       0x74c, 0x7, 0x102, 0x2, 0x2, 0x74c, 0x7df, 0x7, 0xf2, 0x2, 0x2, 0x74d, 
       0x74e, 0x7, 0x102, 0x2, 0x2, 0x74e, 0x74f, 0x7, 0x63, 0x2, 0x2, 0x74f, 
       0x7df, 0x7, 0xf2, 0x2, 0x2, 0x750, 0x751, 0x7, 0x80, 0x2, 0x2, 0x751, 
       0x7df, 0x7, 0x10e, 0x2, 0x2, 0x752, 0x753, 0x7, 0x9b, 0x2, 0x2, 0x753, 
       0x7df, 0x7, 0x10e, 0x2, 0x2, 0x754, 0x755, 0x7, 0x102, 0x2, 0x2, 
       0x755, 0x7df, 0x7, 0x5b, 0x2, 0x2, 0x756, 0x757, 0x7, 0x102, 0x2, 
       0x2, 0x757, 0x758, 0x7, 0x60, 0x2, 0x2, 0x758, 0x7df, 0x7, 0x10e, 
       0x2, 0x2, 0x759, 0x75a, 0x7, 0x102, 0x2, 0x2, 0x75a, 0x7df, 0x7, 
       0x119, 0x2, 0x2, 0x75b, 0x75c, 0x7, 0x102, 0x2, 0x2, 0x75c, 0x7df, 
       0x7, 0x9e, 0x2, 0x2, 0x75d, 0x75e, 0x7, 0x102, 0x2, 0x2, 0x75e, 0x7df, 
       0x7, 0xb7, 0x2, 0x2, 0x75f, 0x760, 0x7, 0x60, 0x2, 0x2, 0x760, 0x7df, 
       0x7, 0x9d, 0x2, 0x2, 0x761, 0x762, 0x7, 0x77, 0x2, 0x2, 0x762, 0x7df, 
       0x7, 0x9d, 0x2, 0x2, 0x763, 0x764, 0x7, 0x3a, 0x2, 0x2, 0x764, 0x7df, 
       0x7, 0x9d, 0x2, 0x2, 0x765, 0x766, 0x7, 0xb6, 0x2, 0x2, 0x766, 0x7df, 
       0x7, 0x10e, 0x2, 0x2, 0x767, 0x768, 0x7, 0xb6, 0x2, 0x2, 0x768, 0x7df, 
       0x7, 0x69, 0x2, 0x2, 0x769, 0x76a, 0x7, 0x125, 0x2, 0x2, 0x76a, 0x7df, 
       0x7, 0x10e, 0x2, 0x2, 0x76b, 0x76c, 0x7, 0x125, 0x2, 0x2, 0x76c, 
       0x7df, 0x7, 0x69, 0x2, 0x2, 0x76d, 0x76e, 0x7, 0x60, 0x2, 0x2, 0x76e, 
       0x76f, 0x7, 0x112, 0x2, 0x2, 0x76f, 0x7df, 0x7, 0xb9, 0x2, 0x2, 0x770, 
       0x771, 0x7, 0x77, 0x2, 0x2, 0x771, 0x772, 0x7, 0x112, 0x2, 0x2, 0x772, 
       0x7df, 0x7, 0xb9, 0x2, 0x2, 0x773, 0x774, 0x7, 0x3a, 0x2, 0x2, 0x774, 
       0x775, 0x7, 0x10e, 0x2, 0x2, 0x775, 0x776, 0x5, 0x146, 0xa4, 0x2, 
       0x776, 0x777, 0x7, 0xc4, 0x2, 0x2, 0x777, 0x778, 0x7, 0x52, 0x2, 
       0x2, 0x778, 0x7df, 0x3, 0x2, 0x2, 0x2, 0x779, 0x77a, 0x7, 0x3a, 0x2, 
       0x2, 0x77a, 0x77b, 0x7, 0x10e, 0x2, 0x2, 0x77b, 0x77c, 0x5, 0x146, 
       0xa4, 0x2, 0x77c, 0x77d, 0x7, 0x52, 0x2, 0x2, 0x77d, 0x77e, 0x7, 
       0x49, 0x2, 0x2, 0x77e, 0x7df, 0x3, 0x2, 0x2, 0x2, 0x77f, 0x780, 0x7, 
       0x3a, 0x2, 0x2, 0x780, 0x781, 0x7, 0x10e, 0x2, 0x2, 0x781, 0x782, 
       0x5, 0x146, 0xa4, 0x2, 0x782, 0x783, 0x7, 0xc4, 0x2, 0x2, 0x783, 
       0x784, 0x7, 0x106, 0x2, 0x2, 0x784, 0x7df, 0x3, 0x2, 0x2, 0x2, 0x785, 
       0x786, 0x7, 0x3a, 0x2, 0x2, 0x786, 0x787, 0x7, 0x10e, 0x2, 0x2, 0x787, 
       0x788, 0x5, 0x146, 0xa4, 0x2, 0x788, 0x789, 0x7, 0x103, 0x2, 0x2, 
       0x789, 0x78a, 0x7, 0x49, 0x2, 0x2, 0x78a, 0x7df, 0x3, 0x2, 0x2, 0x2, 
       0x78b, 0x78c, 0x7, 0x3a, 0x2, 0x2, 0x78c, 0x78d, 0x7, 0x10e, 0x2, 
       0x2, 0x78d, 0x78e, 0x5, 0x146, 0xa4, 0x2, 0x78e, 0x78f, 0x7, 0xc4, 
       0x2, 0x2, 0x78f, 0x790, 0x7, 0x103, 0x2, 0x2, 0x790, 0x7df, 0x3, 
       0x2, 0x2, 0x2, 0x791, 0x792, 0x7, 0x3a, 0x2, 0x2, 0x792, 0x793, 0x7, 
       0x10e, 0x2, 0x2, 0x793, 0x794, 0x5, 0x146, 0xa4, 0x2, 0x794, 0x795, 
       0x7, 0xc4, 0x2, 0x2, 0x795, 0x796, 0x7, 0x109, 0x2, 0x2, 0x796, 0x797, 
       0x7, 0x41, 0x2, 0x2, 0x797, 0x798, 0x7, 0x73, 0x2, 0x2, 0x798, 0x7df, 
       0x3, 0x2, 0x2, 0x2, 0x799, 0x79a, 0x7, 0x3a, 0x2, 0x2, 0x79a, 0x79b, 
       0x7, 0x10e, 0x2, 0x2, 0x79b, 0x79c, 0x5, 0x146, 0xa4, 0x2, 0x79c, 
       0x79d, 0x7, 0xff, 0x2, 0x2, 0x79d, 0x79e, 0x7, 0x103, 0x2, 0x2, 0x79e, 
       0x79f, 0x7, 0xb5, 0x2, 0x2, 0x79f, 0x7df, 0x3, 0x2, 0x2, 0x2, 0x7a0, 
       0x7a1, 0x7, 0x3a, 0x2, 0x2, 0x7a1, 0x7a2, 0x7, 0x10e, 0x2, 0x2, 0x7a2, 
       0x7a3, 0x5, 0x146, 0xa4, 0x2, 0x7a3, 0x7a4, 0x7, 0x7d, 0x2, 0x2, 
       0x7a4, 0x7a5, 0x7, 0xd5, 0x2, 0x2, 0x7a5, 0x7df, 0x3, 0x2, 0x2, 0x2, 
       0x7a6, 0x7a7, 0x7, 0x3a, 0x2, 0x2, 0x7a7, 0x7a8, 0x7, 0x10e, 0x2, 
       0x2, 0x7a8, 0x7a9, 0x5, 0x146, 0xa4, 0x2, 0x7a9, 0x7aa, 0x7, 0x3f, 
       0x2, 0x2, 0x7aa, 0x7ab, 0x7, 0xd5, 0x2, 0x2, 0x7ab, 0x7df, 0x3, 0x2, 
       0x2, 0x2, 0x7ac, 0x7ad, 0x7, 0x3a, 0x2, 0x2, 0x7ad, 0x7ae, 0x7, 0x10e, 
       0x2, 0x2, 0x7ae, 0x7af, 0x5, 0x146, 0xa4, 0x2, 0x7af, 0x7b0, 0x7, 
       0x11f, 0x2, 0x2, 0x7b0, 0x7b1, 0x7, 0xd5, 0x2, 0x2, 0x7b1, 0x7df, 
       0x3, 0x2, 0x2, 0x2, 0x7b2, 0x7b3, 0x7, 0x3a, 0x2, 0x2, 0x7b3, 0x7b4, 
       0x7, 0x10e, 0x2, 0x2, 0x7b4, 0x7b5, 0x5, 0x146, 0xa4, 0x2, 0x7b5, 
       0x7b6, 0x7, 0x116, 0x2, 0x2, 0x7b6, 0x7df, 0x3, 0x2, 0x2, 0x2, 0x7b7, 
       0x7b8, 0x7, 0x3a, 0x2, 0x2, 0x7b8, 0x7b9, 0x7, 0x10e, 0x2, 0x2, 0x7b9, 
       0x7bb, 0x5, 0x146, 0xa4, 0x2, 0x7ba, 0x7bc, 0x5, 0xbc, 0x5f, 0x2, 
       0x7bb, 0x7ba, 0x3, 0x2, 0x2, 0x2, 0x7bb, 0x7bc, 0x3, 0x2, 0x2, 0x2, 
       0x7bc, 0x7bd, 0x3, 0x2, 0x2, 0x2, 0x7bd, 0x7be, 0x7, 0x5a, 0x2, 0x2, 
       0x7be, 0x7df, 0x3, 0x2, 0x2, 0x2, 0x7bf, 0x7c0, 0x7, 0x3a, 0x2, 0x2, 
       0x7c0, 0x7c1, 0x7, 0x10e, 0x2, 0x2, 0x7c1, 0x7c3, 0x5, 0x146, 0xa4, 
       0x2, 0x7c2, 0x7c4, 0x5, 0xbc, 0x5f, 0x2, 0x7c3, 0x7c2, 0x3, 0x2, 
       0x2, 0x2, 0x7c3, 0x7c4, 0x3, 0x2, 0x2, 0x2, 0x7c4, 0x7c5, 0x3, 0x2, 
       0x2, 0x2, 0x7c5, 0x7c6, 0x7, 0x5d, 0x2, 0x2, 0x7c6, 0x7df, 0x3, 0x2, 
       0x2, 0x2, 0x7c7, 0x7c8, 0x7, 0x3a, 0x2, 0x2, 0x7c8, 0x7c9, 0x7, 0x10e, 
       0x2, 0x2, 0x7c9, 0x7cb, 0x5, 0x146, 0xa4, 0x2, 0x7ca, 0x7cc, 0x5, 
       0xbc, 0x5f, 0x2, 0x7cb, 0x7ca, 0x3, 0x2, 0x2, 0x2, 0x7cb, 0x7cc, 
       0x3, 0x2, 0x2, 0x2, 0x7cc, 0x7cd, 0x3, 0x2, 0x2, 0x2, 0x7cd, 0x7ce, 
       0x7, 0xff, 0x2, 0x2, 0x7ce, 0x7cf, 0x7, 0x88, 0x2, 0x2, 0x7cf, 0x7df, 
       0x3, 0x2, 0x2, 0x2, 0x7d0, 0x7d1, 0x7, 0x3a, 0x2, 0x2, 0x7d1, 0x7d2, 
       0x7, 0x10e, 0x2, 0x2, 0x7d2, 0x7d4, 0x5, 0x146, 0xa4, 0x2, 0x7d3, 
       0x7d5, 0x5, 0xbc, 0x5f, 0x2, 0x7d4, 0x7d3, 0x3, 0x2, 0x2, 0x2, 0x7d4, 
       0x7d5, 0x3, 0x2, 0x2, 0x2, 0x7d5, 0x7d6, 0x3, 0x2, 0x2, 0x2, 0x7d6, 
       0x7d7, 0x7, 0xeb, 0x2, 0x2, 0x7d7, 0x7d8, 0x7, 0x57, 0x2, 0x2, 0x7d8, 
       0x7df, 0x3, 0x2, 0x2, 0x2, 0x7d9, 0x7da, 0x7, 0x107, 0x2, 0x2, 0x7da, 
       0x7df, 0x7, 
  };
  static const uint16_t serializedATNSegment1[] = {
    0x118, 0x2, 0x2, 0x7db, 0x7df, 0x7, 0x59, 0x2, 0x2, 0x7dc, 0x7df, 0x7, 
       0xf3, 0x2, 0x2, 0x7dd, 0x7df, 0x7, 0x72, 0x2, 0x2, 0x7de, 0x736, 
       0x3, 0x2, 0x2, 0x2, 0x7de, 0x738, 0x3, 0x2, 0x2, 0x2, 0x7de, 0x73a, 
       0x3, 0x2, 0x2, 0x2, 0x7de, 0x73e, 0x3, 0x2, 0x2, 0x2, 0x7de, 0x742, 
       0x3, 0x2, 0x2, 0x2, 0x7de, 0x744, 0x3, 0x2, 0x2, 0x2, 0x7de, 0x749, 
       0x3, 0x2, 0x2, 0x2, 0x7de, 0x74b, 0x3, 0x2, 0x2, 0x2, 0x7de, 0x74d, 
       0x3, 0x2, 0x2, 0x2, 0x7de, 0x750, 0x3, 0x2, 0x2, 0x2, 0x7de, 0x752, 
       0x3, 0x2, 0x2, 0x2, 0x7de, 0x754, 0x3, 0x2, 0x2, 0x2, 0x7de, 0x756, 
       0x3, 0x2, 0x2, 0x2, 0x7de, 0x759, 0x3, 0x2, 0x2, 0x2, 0x7de, 0x75b, 
       0x3, 0x2, 0x2, 0x2, 0x7de, 0x75d, 0x3, 0x2, 0x2, 0x2, 0x7de, 0x75f, 
       0x3, 0x2, 0x2, 0x2, 0x7de, 0x761, 0x3, 0x2, 0x2, 0x2, 0x7de, 0x763, 
       0x3, 0x2, 0x2, 0x2, 0x7de, 0x765, 0x3, 0x2, 0x2, 0x2, 0x7de, 0x767, 
       0x3, 0x2, 0x2, 0x2, 0x7de, 0x769, 0x3, 0x2, 0x2, 0x2, 0x7de, 0x76b, 
       0x3, 0x2, 0x2, 0x2, 0x7de, 0x76d, 0x3, 0x2, 0x2, 0x2, 0x7de, 0x770, 
       0x3, 0x2, 0x2, 0x2, 0x7de, 0x773, 0x3, 0x2, 0x2, 0x2, 0x7de, 0x779, 
       0x3, 0x2, 0x2, 0x2, 0x7de, 0x77f, 0x3, 0x2, 0x2, 0x2, 0x7de, 0x785, 
       0x3, 0x2, 0x2, 0x2, 0x7de, 0x78b, 0x3, 0x2, 0x2, 0x2, 0x7de, 0x791, 
       0x3, 0x2, 0x2, 0x2, 0x7de, 0x799, 0x3, 0x2, 0x2, 0x2, 0x7de, 0x7a0, 
       0x3, 0x2, 0x2, 0x2, 0x7de, 0x7a6, 0x3, 0x2, 0x2, 0x2, 0x7de, 0x7ac, 
       0x3, 0x2, 0x2, 0x2, 0x7de, 0x7b2, 0x3, 0x2, 0x2, 0x2, 0x7de, 0x7b7, 
       0x3, 0x2, 0x2, 0x2, 0x7de, 0x7bf, 0x3, 0x2, 0x2, 0x2, 0x7de, 0x7c7, 
       0x3, 0x2, 0x2, 0x2, 0x7de, 0x7d0, 0x3, 0x2, 0x2, 0x2, 0x7de, 0x7d9, 
       0x3, 0x2, 0x2, 0x2, 0x7de, 0x7db, 0x3, 0x2, 0x2, 0x2, 0x7de, 0x7dc, 
       0x3, 0x2, 0x2, 0x2, 0x7de, 0x7dd, 0x3, 0x2, 0x2, 0x2, 0x7df, 0xa9, 
       0x3, 0x2, 0x2, 0x2, 0x7e0, 0x7e2, 0x7, 0x60, 0x2, 0x2, 0x7e1, 0x7e3, 
       0x7, 0x112, 0x2, 0x2, 0x7e2, 0x7e1, 0x3, 0x2, 0x2, 0x2, 0x7e2, 0x7e3, 
       0x3, 0x2, 0x2, 0x2, 0x7e3, 0x7e5, 0x3, 0x2, 0x2, 0x2, 0x7e4, 0x7e6, 
       0x7, 0x82, 0x2, 0x2, 0x7e5, 0x7e4, 0x3, 0x2, 0x2, 0x2, 0x7e5, 0x7e6, 
       0x3, 0x2, 0x2, 0x2, 0x7e6, 0x7e7, 0x3, 0x2, 0x2, 0x2, 0x7e7, 0x7eb, 
       0x7, 0x10e, 0x2, 0x2, 0x7e8, 0x7e9, 0x7, 0x99, 0x2, 0x2, 0x7e9, 0x7ea, 
       0x7, 0xc4, 0x2, 0x2, 0x7ea, 0x7ec, 0x7, 0x7e, 0x2, 0x2, 0x7eb, 0x7e8, 
       0x3, 0x2, 0x2, 0x2, 0x7eb, 0x7ec, 0x3, 0x2, 0x2, 0x2, 0x7ec, 0x7ed, 
       0x3, 0x2, 0x2, 0x2, 0x7ed, 0x7ee, 0x5, 0x144, 0xa3, 0x2, 0x7ee, 0xab, 
       0x3, 0x2, 0x2, 0x2, 0x7ef, 0x7f0, 0x7, 0x60, 0x2, 0x2, 0x7f0, 0x7f2, 
       0x7, 0xcc, 0x2, 0x2, 0x7f1, 0x7ef, 0x3, 0x2, 0x2, 0x2, 0x7f1, 0x7f2, 
       0x3, 0x2, 0x2, 0x2, 0x7f2, 0x7f3, 0x3, 0x2, 0x2, 0x2, 0x7f3, 0x7f4, 
       0x7, 0xeb, 0x2, 0x2, 0x7f4, 0x7f5, 0x7, 0x10e, 0x2, 0x2, 0x7f5, 0x7f6, 
       0x5, 0x144, 0xa3, 0x2, 0x7f6, 0xad, 0x3, 0x2, 0x2, 0x2, 0x7f7, 0x7f8, 
       0x7, 0x52, 0x2, 0x2, 0x7f8, 0x7f9, 0x7, 0x49, 0x2, 0x2, 0x7f9, 0x7fd, 
       0x5, 0x12c, 0x97, 0x2, 0x7fa, 0x7fb, 0x7, 0x106, 0x2, 0x2, 0x7fb, 
       0x7fc, 0x7, 0x49, 0x2, 0x2, 0x7fc, 0x7fe, 0x5, 0x130, 0x99, 0x2, 
       0x7fd, 0x7fa, 0x3, 0x2, 0x2, 0x2, 0x7fd, 0x7fe, 0x3, 0x2, 0x2, 0x2, 
       0x7fe, 0x7ff, 0x3, 0x2, 0x2, 0x2, 0x7ff, 0x800, 0x7, 0xa5, 0x2, 0x2, 
       0x800, 0x801, 0x7, 0x14b, 0x2, 0x2, 0x801, 0x802, 0x7, 0x48, 0x2, 
       0x2, 0x802, 0xaf, 0x3, 0x2, 0x2, 0x2, 0x803, 0x804, 0x7, 0x103, 0x2, 
       0x2, 0x804, 0x805, 0x7, 0x49, 0x2, 0x2, 0x805, 0x806, 0x5, 0x12c, 
       0x97, 0x2, 0x806, 0x809, 0x7, 0xc8, 0x2, 0x2, 0x807, 0x80a, 0x5, 
       0xd6, 0x6c, 0x2, 0x808, 0x80a, 0x5, 0xd8, 0x6d, 0x2, 0x809, 0x807, 
       0x3, 0x2, 0x2, 0x2, 0x809, 0x808, 0x3, 0x2, 0x2, 0x2, 0x80a, 0x80e, 
       0x3, 0x2, 0x2, 0x2, 0x80b, 0x80c, 0x7, 0x109, 0x2, 0x2, 0x80c, 0x80d, 
       0x7, 0x41, 0x2, 0x2, 0x80d, 0x80f, 0x7, 0x73, 0x2, 0x2, 0x80e, 0x80b, 
       0x3, 0x2, 0x2, 0x2, 0x80e, 0x80f, 0x3, 0x2, 0x2, 0x2, 0x80f, 0xb1, 
       0x3, 0x2, 0x2, 0x2, 0x810, 0x811, 0x7, 0xb5, 0x2, 0x2, 0x811, 0x812, 
       0x7, 0x147, 0x2, 0x2, 0x812, 0xb3, 0x3, 0x2, 0x2, 0x2, 0x813, 0x814, 
       0x7, 0x58, 0x2, 0x2, 0x814, 0x815, 0x7, 0x147, 0x2, 0x2, 0x815, 0xb5, 
       0x3, 0x2, 0x2, 0x2, 0x816, 0x818, 0x5, 0x32, 0x1a, 0x2, 0x817, 0x816, 
       0x3, 0x2, 0x2, 0x2, 0x817, 0x818, 0x3, 0x2, 0x2, 0x2, 0x818, 0x81a, 
       0x3, 0x2, 0x2, 0x2, 0x819, 0x81b, 0x5, 0xc6, 0x64, 0x2, 0x81a, 0x819, 
       0x3, 0x2, 0x2, 0x2, 0x81a, 0x81b, 0x3, 0x2, 0x2, 0x2, 0x81b, 0x81c, 
       0x3, 0x2, 0x2, 0x2, 0x81c, 0x81d, 0x5, 0xe8, 0x75, 0x2, 0x81d, 0x81e, 
       0x5, 0xe4, 0x73, 0x2, 0x81e, 0xb7, 0x3, 0x2, 0x2, 0x2, 0x81f, 0x820, 
       0x7, 0xa2, 0x2, 0x2, 0x820, 0x822, 0x7, 0xd4, 0x2, 0x2, 0x821, 0x823, 
       0x7, 0x10e, 0x2, 0x2, 0x822, 0x821, 0x3, 0x2, 0x2, 0x2, 0x822, 0x823, 
       0x3, 0x2, 0x2, 0x2, 0x823, 0x824, 0x3, 0x2, 0x2, 0x2, 0x824, 0x82b, 
       0x5, 0x144, 0xa3, 0x2, 0x825, 0x829, 0x5, 0xbc, 0x5f, 0x2, 0x826, 
       0x827, 0x7, 0x99, 0x2, 0x2, 0x827, 0x828, 0x7, 0xc4, 0x2, 0x2, 0x828, 
       0x82a, 0x7, 0x7e, 0x2, 0x2, 0x829, 0x826, 0x3, 0x2, 0x2, 0x2, 0x829, 
       0x82a, 0x3, 0x2, 0x2, 0x2, 0x82a, 0x82c, 0x3, 0x2, 0x2, 0x2, 0x82b, 
       0x825, 0x3, 0x2, 0x2, 0x2, 0x82b, 0x82c, 0x3, 0x2, 0x2, 0x2, 0x82c, 
       0x857, 0x3, 0x2, 0x2, 0x2, 0x82d, 0x82e, 0x7, 0xa2, 0x2, 0x2, 0x82e, 
       0x830, 0x7, 0xa5, 0x2, 0x2, 0x82f, 0x831, 0x7, 0x10e, 0x2, 0x2, 0x830, 
       0x82f, 0x3, 0x2, 0x2, 0x2, 0x830, 0x831, 0x3, 0x2, 0x2, 0x2, 0x831, 
       0x832, 0x3, 0x2, 0x2, 0x2, 0x832, 0x834, 0x5, 0x144, 0xa3, 0x2, 0x833, 
       0x835, 0x5, 0xbc, 0x5f, 0x2, 0x834, 0x833, 0x3, 0x2, 0x2, 0x2, 0x834, 
       0x835, 0x3, 0x2, 0x2, 0x2, 0x835, 0x839, 0x3, 0x2, 0x2, 0x2, 0x836, 
       0x837, 0x7, 0x99, 0x2, 0x2, 0x837, 0x838, 0x7, 0xc4, 0x2, 0x2, 0x838, 
       0x83a, 0x7, 0x7e, 0x2, 0x2, 0x839, 0x836, 0x3, 0x2, 0x2, 0x2, 0x839, 
       0x83a, 0x3, 0x2, 0x2, 0x2, 0x83a, 0x857, 0x3, 0x2, 0x2, 0x2, 0x83b, 
       0x83c, 0x7, 0xa2, 0x2, 0x2, 0x83c, 0x83e, 0x7, 0xd4, 0x2, 0x2, 0x83d, 
       0x83f, 0x7, 0xb4, 0x2, 0x2, 0x83e, 0x83d, 0x3, 0x2, 0x2, 0x2, 0x83e, 
       0x83f, 0x3, 0x2, 0x2, 0x2, 0x83f, 0x840, 0x3, 0x2, 0x2, 0x2, 0x840, 
       0x841, 0x7, 0x74, 0x2, 0x2, 0x841, 0x843, 0x7, 0x147, 0x2, 0x2, 0x842, 
       0x844, 0x5, 0x140, 0xa1, 0x2, 0x843, 0x842, 0x3, 0x2, 0x2, 0x2, 0x843, 
       0x844, 0x3, 0x2, 0x2, 0x2, 0x844, 0x846, 0x3, 0x2, 0x2, 0x2, 0x845, 
       0x847, 0x5, 0xda, 0x6e, 0x2, 0x846, 0x845, 0x3, 0x2, 0x2, 0x2, 0x846, 
       0x847, 0x3, 0x2, 0x2, 0x2, 0x847, 0x857, 0x3, 0x2, 0x2, 0x2, 0x848, 
       0x849, 0x7, 0xa2, 0x2, 0x2, 0x849, 0x84b, 0x7, 0xd4, 0x2, 0x2, 0x84a, 
       0x84c, 0x7, 0xb4, 0x2, 0x2, 0x84b, 0x84a, 0x3, 0x2, 0x2, 0x2, 0x84b, 
       0x84c, 0x3, 0x2, 0x2, 0x2, 0x84c, 0x84d, 0x3, 0x2, 0x2, 0x2, 0x84d, 
       0x84f, 0x7, 0x74, 0x2, 0x2, 0x84e, 0x850, 0x7, 0x147, 0x2, 0x2, 0x84f, 
       0x84e, 0x3, 0x2, 0x2, 0x2, 0x84f, 0x850, 0x3, 0x2, 0x2, 0x2, 0x850, 
       0x851, 0x3, 0x2, 0x2, 0x2, 0x851, 0x854, 0x5, 0xca, 0x66, 0x2, 0x852, 
       0x853, 0x7, 0xcb, 0x2, 0x2, 0x853, 0x855, 0x5, 0xce, 0x68, 0x2, 0x854, 
       0x852, 0x3, 0x2, 0x2, 0x2, 0x854, 0x855, 0x3, 0x2, 0x2, 0x2, 0x855, 
       0x857, 0x3, 0x2, 0x2, 0x2, 0x856, 0x81f, 0x3, 0x2, 0x2, 0x2, 0x856, 
       0x82d, 0x3, 0x2, 0x2, 0x2, 0x856, 0x83b, 0x3, 0x2, 0x2, 0x2, 0x856, 
       0x848, 0x3, 0x2, 0x2, 0x2, 0x857, 0xb9, 0x3, 0x2, 0x2, 0x2, 0x858, 
       0x85a, 0x5, 0xbc, 0x5f, 0x2, 0x859, 0x85b, 0x5, 0xb2, 0x5a, 0x2, 
       0x85a, 0x859, 0x3, 0x2, 0x2, 0x2, 0x85a, 0x85b, 0x3, 0x2, 0x2, 0x2, 
       0x85b, 0xbb, 0x3, 0x2, 0x2, 0x2, 0x85c, 0x85d, 0x7, 0xd5, 0x2, 0x2, 
       0x85d, 0x85e, 0x7, 0x5, 0x2, 0x2, 0x85e, 0x863, 0x5, 0xbe, 0x60, 
       0x2, 0x85f, 0x860, 0x7, 0x3, 0x2, 0x2, 0x860, 0x862, 0x5, 0xbe, 0x60, 
       0x2, 0x861, 0x85f, 0x3, 0x2, 0x2, 0x2, 0x862, 0x865, 0x3, 0x2, 0x2, 
       0x2, 0x863, 0x861, 0x3, 0x2, 0x2, 0x2, 0x863, 0x864, 0x3, 0x2, 0x2, 
       0x2, 0x864, 0x866, 0x3, 0x2, 0x2, 0x2, 0x865, 0x863, 0x3, 0x2, 0x2, 
       0x2, 0x866, 0x867, 0x7, 0x6, 0x2, 0x2, 0x867, 0xbd, 0x3, 0x2, 0x2, 
       0x2, 0x868, 0x86b, 0x5, 0x19e, 0xd0, 0x2, 0x869, 0x86a, 0x7, 0x133, 
       0x2, 0x2, 0x86a, 0x86c, 0x5, 0x15e, 0xb0, 0x2, 0x86b, 0x869, 0x3, 
       0x2, 0x2, 0x2, 0x86b, 0x86c, 0x3, 0x2, 0x2, 0x2, 0x86c, 0xbf, 0x3, 
       0x2, 0x2, 0x2, 0x86d, 0x86e, 0x9, 0x1c, 0x2, 0x2, 0x86e, 0xc1, 0x3, 
       0x2, 0x2, 0x2, 0x86f, 0x875, 0x5, 0x198, 0xcd, 0x2, 0x870, 0x875, 
       0x7, 0x147, 0x2, 0x2, 0x871, 0x875, 0x5, 0x160, 0xb1, 0x2, 0x872, 
       0x875, 0x5, 0x164, 0xb3, 0x2, 0x873, 0x875, 0x5, 0x166, 0xb4, 0x2, 
       0x874, 0x86f, 0x3, 0x2, 0x2, 0x2, 0x874, 0x870, 0x3, 0x2, 0x2, 0x2, 
       0x874, 0x871, 0x3, 0x2, 0x2, 0x2, 0x874, 0x872, 0x3, 0x2, 0x2, 0x2, 
       0x874, 0x873, 0x3, 0x2, 0x2, 0x2, 0x875, 0xc3, 0x3, 0x2, 0x2, 0x2, 
       0x876, 0x87b, 0x5, 0x19e, 0xd0, 0x2, 0x877, 0x878, 0x7, 0x9, 0x2, 
       0x2, 0x878, 0x87a, 0x5, 0x19e, 0xd0, 0x2, 0x879, 0x877, 0x3, 0x2, 
       0x2, 0x2, 0x87a, 0x87d, 0x3, 0x2, 0x2, 0x2, 0x87b, 0x879, 0x3, 0x2, 
       0x2, 0x2, 0x87b, 0x87c, 0x3, 0x2, 0x2, 0x2, 0x87c, 0xc5, 0x3, 0x2, 
       0x2, 0x2, 0x87d, 0x87b, 0x3, 0x2, 0x2, 0x2, 0x87e, 0x87f, 0x7, 0x131, 
       0x2, 0x2, 0x87f, 0x884, 0x5, 0xc8, 0x65, 0x2, 0x880, 0x881, 0x7, 
       0x3, 0x2, 0x2, 0x881, 0x883, 0x5, 0xc8, 0x65, 0x2, 0x882, 0x880, 
       0x3, 0x2, 0x2, 0x2, 0x883, 0x886, 0x3, 0x2, 0x2, 0x2, 0x884, 0x882, 
       0x3, 0x2, 0x2, 0x2, 0x884, 0x885, 0x3, 0x2, 0x2, 0x2, 0x885, 0xc7, 
       0x3, 0x2, 0x2, 0x2, 0x886, 0x884, 0x3, 0x2, 0x2, 0x2, 0x887, 0x889, 
       0x5, 0x19a, 0xce, 0x2, 0x888, 0x88a, 0x5, 0x12c, 0x97, 0x2, 0x889, 
       0x888, 0x3, 0x2, 0x2, 0x2, 0x889, 0x88a, 0x3, 0x2, 0x2, 0x2, 0x88a, 
       0x88c, 0x3, 0x2, 0x2, 0x2, 0x88b, 0x88d, 0x7, 0x41, 0x2, 0x2, 0x88c, 
       0x88b, 0x3, 0x2, 0x2, 0x2, 0x88c, 0x88d, 0x3, 0x2, 0x2, 0x2, 0x88d, 
       0x88e, 0x3, 0x2, 0x2, 0x2, 0x88e, 0x88f, 0x7, 0x5, 0x2, 0x2, 0x88f, 
       0x890, 0x5, 0xb6, 0x5c, 0x2, 0x890, 0x891, 0x7, 0x6, 0x2, 0x2, 0x891, 
       0xc9, 0x3, 0x2, 0x2, 0x2, 0x892, 0x893, 0x7, 0x12a, 0x2, 0x2, 0x893, 
       0x894, 0x5, 0x144, 0xa3, 0x2, 0x894, 0xcb, 0x3, 0x2, 0x2, 0x2, 0x895, 
       0x896, 0x7, 0xcb, 0x2, 0x2, 0x896, 0x8a0, 0x5, 0xce, 0x68, 0x2, 0x897, 
       0x898, 0x7, 0xd6, 0x2, 0x2, 0x898, 0x899, 0x7, 0x49, 0x2, 0x2, 0x899, 
       0x8a0, 0x5, 0x14e, 0xa8, 0x2, 0x89a, 0x8a0, 0x5, 0xae, 0x58, 0x2, 
       0x89b, 0x8a0, 0x5, 0xb2, 0x5a, 0x2, 0x89c, 0x8a0, 0x5, 0xb4, 0x5b, 
       0x2, 0x89d, 0x89e, 0x7, 0x111, 0x2, 0x2, 0x89e, 0x8a0, 0x5, 0xce, 
       0x68, 0x2, 0x89f, 0x895, 0x3, 0x2, 0x2, 0x2, 0x89f, 0x897, 0x3, 0x2, 
       0x2, 0x2, 0x89f, 0x89a, 0x3, 0x2, 0x2, 0x2, 0x89f, 0x89b, 0x3, 0x2, 
       0x2, 0x2, 0x89f, 0x89c, 0x3, 0x2, 0x2, 0x2, 0x89f, 0x89d, 0x3, 0x2, 
       0x2, 0x2, 0x8a0, 0x8a3, 0x3, 0x2, 0x2, 0x2, 0x8a1, 0x89f, 0x3, 0x2, 
       0x2, 0x2, 0x8a1, 0x8a2, 0x3, 0x2, 0x2, 0x2, 0x8a2, 0xcd, 0x3, 0x2, 
       0x2, 0x2, 0x8a3, 0x8a1, 0x3, 0x2, 0x2, 0x2, 0x8a4, 0x8a5, 0x7, 0x5, 
       0x2, 0x2, 0x8a5, 0x8aa, 0x5, 0xd0, 0x69, 0x2, 0x8a6, 0x8a7, 0x7, 
       0x3, 0x2, 0x2, 0x8a7, 0x8a9, 0x5, 0xd0, 0x69, 0x2, 0x8a8, 0x8a6, 
       0x3, 0x2, 0x2, 0x2, 0x8a9, 0x8ac, 0x3, 0x2, 0x2, 0x2, 0x8aa, 0x8a8, 
       0x3, 0x2, 0x2, 0x2, 0x8aa, 0x8ab, 0x3, 0x2, 0x2, 0x2, 0x8ab, 0x8ad, 
       0x3, 0x2, 0x2, 0x2, 0x8ac, 0x8aa, 0x3, 0x2, 0x2, 0x2, 0x8ad, 0x8ae, 
       0x7, 0x6, 0x2, 0x2, 0x8ae, 0xcf, 0x3, 0x2, 0x2, 0x2, 0x8af, 0x8b4, 
       0x5, 0xd2, 0x6a, 0x2, 0x8b0, 0x8b2, 0x7, 0x133, 0x2, 0x2, 0x8b1, 
       0x8b0, 0x3, 0x2, 0x2, 0x2, 0x8b1, 0x8b2, 0x3, 0x2, 0x2, 0x2, 0x8b2, 
       0x8b3, 0x3, 0x2, 0x2, 0x2, 0x8b3, 0x8b5, 0x5, 0xd4, 0x6b, 0x2, 0x8b4, 
       0x8b1, 0x3, 0x2, 0x2, 0x2, 0x8b4, 0x8b5, 0x3, 0x2, 0x2, 0x2, 0x8b5, 
       0xd1, 0x3, 0x2, 0x2, 0x2, 0x8b6, 0x8bb, 0x5, 0x19e, 0xd0, 0x2, 0x8b7, 
       0x8b8, 0x7, 0x9, 0x2, 0x2, 0x8b8, 0x8ba, 0x5, 0x19e, 0xd0, 0x2, 0x8b9, 
       0x8b7, 0x3, 0x2, 0x2, 0x2, 0x8ba, 0x8bd, 0x3, 0x2, 0x2, 0x2, 0x8bb, 
       0x8b9, 0x3, 0x2, 0x2, 0x2, 0x8bb, 0x8bc, 0x3, 0x2, 0x2, 0x2, 0x8bc, 
       0x8c0, 0x3, 0x2, 0x2, 0x2, 0x8bd, 0x8bb, 0x3, 0x2, 0x2, 0x2, 0x8be, 
       0x8c0, 0x7, 0x147, 0x2, 0x2, 0x8bf, 0x8b6, 0x3, 0x2, 0x2, 0x2, 0x8bf, 
       0x8be, 0x3, 0x2, 0x2, 0x2, 0x8c0, 0xd3, 0x3, 0x2, 0x2, 0x2, 0x8c1, 
       0x8c6, 0x7, 0x14b, 0x2, 0x2, 0x8c2, 0x8c6, 0x7, 0x14d, 0x2, 0x2, 
       0x8c3, 0x8c6, 0x5, 0x168, 0xb5, 0x2, 0x8c4, 0x8c6, 0x7, 0x147, 0x2, 
       0x2, 0x8c5, 0x8c1, 0x3, 0x2, 0x2, 0x2, 0x8c5, 0x8c2, 0x3, 0x2, 0x2, 
       0x2, 0x8c5, 0x8c3, 0x3, 0x2, 0x2, 0x2, 0x8c5, 0x8c4, 0x3, 0x2, 0x2, 
       0x2, 0x8c6, 0xd5, 0x3, 0x2, 0x2, 0x2, 0x8c7, 0x8c8, 0x7, 0x5, 0x2, 
       0x2, 0x8c8, 0x8cd, 0x5, 0x15e, 0xb0, 0x2, 0x8c9, 0x8ca, 0x7, 0x3, 
       0x2, 0x2, 0x8ca, 0x8cc, 0x5, 0x15e, 0xb0, 0x2, 0x8cb, 0x8c9, 0x3, 
       0x2, 0x2, 0x2, 0x8cc, 0x8cf, 0x3, 0x2, 0x2, 0x2, 0x8cd, 0x8cb, 0x3, 
       0x2, 0x2, 0x2, 0x8cd, 0x8ce, 0x3, 0x2, 0x2, 0x2, 0x8ce, 0x8d0, 0x3, 
       0x2, 0x2, 0x2, 0x8cf, 0x8cd, 0x3, 0x2, 0x2, 0x2, 0x8d0, 0x8d1, 0x7, 
       0x6, 0x2, 0x2, 0x8d1, 0xd7, 0x3, 0x2, 0x2, 0x2, 0x8d2, 0x8d3, 0x7, 
       0x5, 0x2, 0x2, 0x8d3, 0x8d8, 0x5, 0xd6, 0x6c, 0x2, 0x8d4, 0x8d5, 
       0x7, 0x3, 0x2, 0x2, 0x8d5, 0x8d7, 0x5, 0xd6, 0x6c, 0x2, 0x8d6, 0x8d4, 
       0x3, 0x2, 0x2, 0x2, 0x8d7, 0x8da, 0x3, 0x2, 0x2, 0x2, 0x8d8, 0x8d6, 
       0x3, 0x2, 0x2, 0x2, 0x8d8, 0x8d9, 0x3, 0x2, 0x2, 0x2, 0x8d9, 0x8db, 
       0x3, 0x2, 0x2, 0x2, 0x8da, 0x8d8, 0x3, 0x2, 0x2, 0x2, 0x8db, 0x8dc, 
       0x7, 0x6, 0x2, 0x2, 0x8dc, 0xd9, 0x3, 0x2, 0x2, 0x2, 0x8dd, 0x8de, 
       0x7, 0x109, 0x2, 0x2, 0x8de, 0x8df, 0x7, 0x41, 0x2, 0x2, 0x8df, 0x8e4, 
       0x5, 0xdc, 0x6f, 0x2, 0x8e0, 0x8e1, 0x7, 0x109, 0x2, 0x2, 0x8e1, 
       0x8e2, 0x7, 0x49, 0x2, 0x2, 0x8e2, 0x8e4, 0x5, 0xde, 0x70, 0x2, 0x8e3, 
       0x8dd, 0x3, 0x2, 0x2, 0x2, 0x8e3, 0x8e0, 0x3, 0x2, 0x2, 0x2, 0x8e4, 
       0xdb, 0x3, 0x2, 0x2, 0x2, 0x8e5, 0x8e6, 0x7, 0xa1, 0x2, 0x2, 0x8e6, 
       0x8e7, 0x7, 0x147, 0x2, 0x2, 0x8e7, 0x8e8, 0x7, 0xd0, 0x2, 0x2, 0x8e8, 
       0x8eb, 0x7, 0x147, 0x2, 0x2, 0x8e9, 0x8eb, 0x5, 0x19e, 0xd0, 0x2, 
       0x8ea, 0x8e5, 0x3, 0x2, 0x2, 0x2, 0x8ea, 0x8e9, 0x3, 0x2, 0x2, 0x2, 
       0x8eb, 0xdd, 0x3, 0x2, 0x2, 0x2, 0x8ec, 0x8f0, 0x7, 0x147, 0x2, 0x2, 
       0x8ed, 0x8ee, 0x7, 0x131, 0x2, 0x2, 0x8ee, 0x8ef, 0x7, 0xfd, 0x2, 
       0x2, 0x8ef, 0x8f1, 0x5, 0xce, 0x68, 0x2, 0x8f0, 0x8ed, 0x3, 0x2, 
       0x2, 0x2, 0x8f0, 0x8f1, 0x3, 0x2, 0x2, 0x2, 0x8f1, 0xdf, 0x3, 0x2, 
       0x2, 0x2, 0x8f2, 0x8f3, 0x5, 0x19e, 0xd0, 0x2, 0x8f3, 0x8f4, 0x7, 
       0x147, 0x2, 0x2, 0x8f4, 0xe1, 0x3, 0x2, 0x2, 0x2, 0x8f5, 0x8f6, 0x5, 
       0xb8, 0x5d, 0x2, 0x8f6, 0x8f7, 0x5, 0xe8, 0x75, 0x2, 0x8f7, 0x8f8, 
       0x5, 0xe4, 0x73, 0x2, 0x8f8, 0x929, 0x3, 0x2, 0x2, 0x2, 0x8f9, 0x8fb, 
       0x5, 0x110, 0x89, 0x2, 0x8fa, 0x8fc, 0x5, 0xe6, 0x74, 0x2, 0x8fb, 
       0x8fa, 0x3, 0x2, 0x2, 0x2, 0x8fc, 0x8fd, 0x3, 0x2, 0x2, 0x2, 0x8fd, 
       0x8fb, 0x3, 0x2, 0x2, 0x2, 0x8fd, 0x8fe, 0x3, 0x2, 0x2, 0x2, 0x8fe, 
       0x929, 0x3, 0x2, 0x2, 0x2, 0x8ff, 0x900, 0x7, 0x6e, 0x2, 0x2, 0x900, 
       0x901, 0x7, 0x8f, 0x2, 0x2, 0x901, 0x902, 0x5, 0x144, 0xa3, 0x2, 
       0x902, 0x904, 0x5, 0x13e, 0xa0, 0x2, 0x903, 0x905, 0x5, 0x108, 0x85, 
       0x2, 0x904, 0x903, 0x3, 0x2, 0x2, 0x2, 0x904, 0x905, 0x3, 0x2, 0x2, 
       0x2, 0x905, 0x929, 0x3, 0x2, 0x2, 0x2, 0x906, 0x907, 0x7, 0x127, 
       0x2, 0x2, 0x907, 0x908, 0x5, 0x144, 0xa3, 0x2, 0x908, 0x909, 0x5, 
       0x13e, 0xa0, 0x2, 0x909, 0x90b, 0x5, 0xfa, 0x7e, 0x2, 0x90a, 0x90c, 
       0x5, 0x108, 0x85, 0x2, 0x90b, 0x90a, 0x3, 0x2, 0x2, 0x2, 0x90b, 0x90c, 
       0x3, 0x2, 0x2, 0x2, 0x90c, 0x929, 0x3, 0x2, 0x2, 0x2, 0x90d, 0x90e, 
       0x7, 0xbc, 0x2, 0x2, 0x90e, 0x90f, 0x7, 0xa5, 0x2, 0x2, 0x90f, 0x910, 
       0x5, 0x144, 0xa3, 0x2, 0x910, 0x911, 0x5, 0x13e, 0xa0, 0x2, 0x911, 
       0x917, 0x7, 0x12a, 0x2, 0x2, 0x912, 0x918, 0x5, 0x144, 0xa3, 0x2, 
       0x913, 0x914, 0x7, 0x5, 0x2, 0x2, 0x914, 0x915, 0x5, 0xb6, 0x5c, 
       0x2, 0x915, 0x916, 0x7, 0x6, 0x2, 0x2, 0x916, 0x918, 0x3, 0x2, 0x2, 
       0x2, 0x917, 0x912, 0x3, 0x2, 0x2, 0x2, 0x917, 0x913, 0x3, 0x2, 0x2, 
       0x2, 0x918, 0x919, 0x3, 0x2, 0x2, 0x2, 0x919, 0x91a, 0x5, 0x13e, 
       0xa0, 0x2, 0x91a, 0x91b, 0x7, 0xc8, 0x2, 0x2, 0x91b, 0x91f, 0x5, 
       0x156, 0xac, 0x2, 0x91c, 0x91e, 0x5, 0xfc, 0x7f, 0x2, 0x91d, 0x91c, 
       0x3, 0x2, 0x2, 0x2, 0x91e, 0x921, 0x3, 0x2, 0x2, 0x2, 0x91f, 0x91d, 
       0x3, 0x2, 0x2, 0x2, 0x91f, 0x920, 0x3, 0x2, 0x2, 0x2, 0x920, 0x925, 
       0x3, 0x2, 0x2, 0x2, 0x921, 0x91f, 0x3, 0x2, 0x2, 0x2, 0x922, 0x924, 
       0x5, 0xfe, 0x80, 0x2, 0x923, 0x922, 0x3, 0x2, 0x2, 0x2, 0x924, 0x927, 
       0x3, 0x2, 0x2, 0x2, 0x925, 0x923, 0x3, 0x2, 0x2, 0x2, 0x925, 0x926, 
       0x3, 0x2, 0x2, 0x2, 0x926, 0x929, 0x3, 0x2, 0x2, 0x2, 0x927, 0x925, 
       0x3, 0x2, 0x2, 0x2, 0x928, 0x8f5, 0x3, 0x2, 0x2, 0x2, 0x928, 0x8f9, 
       0x3, 0x2, 0x2, 0x2, 0x928, 0x8ff, 0x3, 0x2, 0x2, 0x2, 0x928, 0x906, 
       0x3, 0x2, 0x2, 0x2, 0x928, 0x90d, 0x3, 0x2, 0x2, 0x2, 0x929, 0xe3, 
       0x3, 0x2, 0x2, 0x2, 0x92a, 0x92b, 0x7, 0xcd, 0x2, 0x2, 0x92b, 0x92c, 
       0x7, 0x49, 0x2, 0x2, 0x92c, 0x931, 0x5, 0xec, 0x77, 0x2, 0x92d, 0x92e, 
       0x7, 0x3, 0x2, 0x2, 0x92e, 0x930, 0x5, 0xec, 0x77, 0x2, 0x92f, 0x92d, 
       0x3, 0x2, 0x2, 0x2, 0x930, 0x933, 0x3, 0x2, 0x2, 0x2, 0x931, 0x92f, 
       0x3, 0x2, 0x2, 0x2, 0x931, 0x932, 0x3, 0x2, 0x2, 0x2, 0x932, 0x935, 
       0x3, 0x2, 0x2, 0x2, 0x933, 0x931, 0x3, 0x2, 0x2, 0x2, 0x934, 0x92a, 
       0x3, 0x2, 0x2, 0x2, 0x934, 0x935, 0x3, 0x2, 0x2, 0x2, 0x935, 0x940, 
       0x3, 0x2, 0x2, 0x2, 0x936, 0x937, 0x7, 0x51, 0x2, 0x2, 0x937, 0x938, 
       0x7, 0x49, 0x2, 0x2, 0x938, 0x93d, 0x5, 0x154, 0xab, 0x2, 0x939, 
       0x93a, 0x7, 0x3, 0x2, 0x2, 0x93a, 0x93c, 0x5, 0x154, 0xab, 0x2, 0x93b, 
       0x939, 0x3, 0x2, 0x2, 0x2, 0x93c, 0x93f, 0x3, 0x2, 0x2, 0x2, 0x93d, 
       0x93b, 0x3, 0x2, 0x2, 0x2, 0x93d, 0x93e, 0x3, 0x2, 0x2, 0x2, 0x93e, 
       0x941, 0x3, 0x2, 0x2, 0x2, 0x93f, 0x93d, 0x3, 0x2, 0x2, 0x2, 0x940, 
       0x936, 0x3, 0x2, 0x2, 0x2, 0x940, 0x941, 0x3, 0x2, 0x2, 0x2, 0x941, 
       0x94c, 0x3, 0x2, 0x2, 0x2, 0x942, 0x943, 0x7, 0x76, 0x2, 0x2, 0x943, 
       0x944, 0x7, 0x49, 0x2, 0x2, 0x944, 0x949, 0x5, 0x154, 0xab, 0x2, 
       0x945, 0x946, 0x7, 0x3, 0x2, 0x2, 0x946, 0x948, 0x5, 0x154, 0xab, 
       0x2, 0x947, 0x945, 0x3, 0x2, 0x2, 0x2, 0x948, 0x94b, 0x3, 0x2, 0x2, 
       0x2, 0x949, 0x947, 0x3, 0x2, 0x2, 0x2, 0x949, 0x94a, 0x3, 0x2, 0x2, 
       0x2, 0x94a, 0x94d, 0x3, 0x2, 0x2, 0x2, 0x94b, 0x949, 0x3, 0x2, 0x2, 
       0x2, 0x94c, 0x942, 0x3, 0x2, 0x2, 0x2, 0x94c, 0x94d, 0x3, 0x2, 0x2, 
       0x2, 0x94d, 0x958, 0x3, 0x2, 0x2, 0x2, 0x94e, 0x94f, 0x7, 0x105, 
       0x2, 0x2, 0x94f, 0x950, 0x7, 0x49, 0x2, 0x2, 0x950, 0x955, 0x5, 0xec, 
       0x77, 0x2, 0x951, 0x952, 0x7, 0x3, 0x2, 0x2, 0x952, 0x954, 0x5, 0xec, 
       0x77, 0x2, 0x953, 0x951, 0x3, 0x2, 0x2, 0x2, 0x954, 0x957, 0x3, 0x2, 
       0x2, 0x2, 0x955, 0x953, 0x3, 0x2, 0x2, 0x2, 0x955, 0x956, 0x3, 0x2, 
       0x2, 0x2, 0x956, 0x959, 0x3, 0x2, 0x2, 0x2, 0x957, 0x955, 0x3, 0x2, 
       0x2, 0x2, 0x958, 0x94e, 0x3, 0x2, 0x2, 0x2, 0x958, 0x959, 0x3, 0x2, 
       0x2, 0x2, 0x959, 0x95b, 0x3, 0x2, 0x2, 0x2, 0x95a, 0x95c, 0x5, 0x18a, 
       0xc6, 0x2, 0x95b, 0x95a, 0x3, 0x2, 0x2, 0x2, 0x95b, 0x95c, 0x3, 0x2, 
       0x2, 0x2, 0x95c, 0x962, 0x3, 0x2, 0x2, 0x2, 0x95d, 0x960, 0x7, 0xb0, 
       0x2, 0x2, 0x95e, 0x961, 0x7, 0x39, 0x2, 0x2, 0x95f, 0x961, 0x5, 0x154, 
       0xab, 0x2, 0x960, 0x95e, 0x3, 0x2, 0x2, 0x2, 0x960, 0x95f, 0x3, 0x2, 
       0x2, 0x2, 0x961, 0x963, 0x3, 0x2, 0x2, 0x2, 0x962, 0x95d, 0x3, 0x2, 
       0x2, 0x2, 0x962, 0x963, 0x3, 0x2, 0x2, 0x2, 0x963, 0xe5, 0x3, 0x2, 
       0x2, 0x2, 0x964, 0x965, 0x5, 0xb8, 0x5d, 0x2, 0x965, 0x966, 0x5, 
       0xf0, 0x79, 0x2, 0x966, 0xe7, 0x3, 0x2, 0x2, 0x2, 0x967, 0x968, 0x8, 
       0x75, 0x1, 0x2, 0x968, 0x96b, 0x5, 0xea, 0x76, 0x2, 0x969, 0x96b, 
       0x5, 0xa, 0x6, 0x2, 0x96a, 0x967, 0x3, 0x2, 0x2, 0x2, 0x96a, 0x969, 
       0x3, 0x2, 0x2, 0x2, 0x96b, 0x980, 0x3, 0x2, 0x2, 0x2, 0x96c, 0x96d, 
       0xc, 0x5, 0x2, 0x2, 0x96d, 0x96f, 0x9, 0x1d, 0x2, 0x2, 0x96e, 0x970, 
       0x5, 0x11e, 0x90, 0x2, 0x96f, 0x96e, 0x3, 0x2, 0x2, 0x2, 0x96f, 0x970, 
       0x3, 0x2, 0x2, 0x2, 0x970, 0x971, 0x3, 0x2, 0x2, 0x2, 0x971, 0x97f, 
       0x5, 0xe8, 0x75, 0x6, 0x972, 0x973, 0xc, 0x4, 0x2, 0x2, 0x973, 0x975, 
       0x7, 0xa3, 0x2, 0x2, 0x974, 0x976, 0x5, 0x11e, 0x90, 0x2, 0x975, 
       0x974, 0x3, 0x2, 0x2, 0x2, 0x975, 0x976, 0x3, 0x2, 0x2, 0x2, 0x976, 
       0x977, 0x3, 0x2, 0x2, 0x2, 0x977, 0x97f, 0x5, 0xe8, 0x75, 0x5, 0x978, 
       0x979, 0xc, 0x3, 0x2, 0x2, 0x979, 0x97b, 0x9, 0x1e, 0x2, 0x2, 0x97a, 
       0x97c, 0x5, 0x11e, 0x90, 0x2, 0x97b, 0x97a, 0x3, 0x2, 0x2, 0x2, 0x97b, 
       0x97c, 0x3, 0x2, 0x2, 0x2, 0x97c, 0x97d, 0x3, 0x2, 0x2, 0x2, 0x97d, 
       0x97f, 0x5, 0xe8, 0x75, 0x4, 0x97e, 0x96c, 0x3, 0x2, 0x2, 0x2, 0x97e, 
       0x972, 0x3, 0x2, 0x2, 0x2, 0x97e, 0x978, 0x3, 0x2, 0x2, 0x2, 0x97f, 
       0x982, 0x3, 0x2, 0x2, 0x2, 0x980, 0x97e, 0x3, 0x2, 0x2, 0x2, 0x980, 
       0x981, 0x3, 0x2, 0x2, 0x2, 0x981, 0xe9, 0x3, 0x2, 0x2, 0x2, 0x982, 
       0x980, 0x3, 0x2, 0x2, 0x2, 0x983, 0x989, 0x5, 0xf2, 0x7a, 0x2, 0x984, 
       0x989, 0x5, 0xee, 0x78, 0x2, 0x985, 0x986, 0x7, 0x10e, 0x2, 0x2, 
       0x986, 0x989, 0x5, 0x144, 0xa3, 0x2, 0x987, 0x989, 0x5, 0x13a, 0x9e, 
       0x2, 0x988, 0x983, 0x3, 0x2, 0x2, 0x2, 0x988, 0x984, 0x3, 0x2, 0x2, 
       0x2, 0x988, 0x985, 0x3, 0x2, 0x2, 0x2, 0x988, 0x987, 0x3, 0x2, 0x2, 
       0x2, 0x989, 0xeb, 0x3, 0x2, 0x2, 0x2, 0x98a, 0x98c, 0x5, 0x154, 0xab, 
       0x2, 0x98b, 0x98d, 0x9, 0xc, 0x2, 0x2, 0x98c, 0x98b, 0x3, 0x2, 0x2, 
       0x2, 0x98c, 0x98d, 0x3, 0x2, 0x2, 0x2, 0x98d, 0x990, 0x3, 0x2, 0x2, 
       0x2, 0x98e, 0x98f, 0x7, 0xc6, 0x2, 0x2, 0x98f, 0x991, 0x9, 0x5, 0x2, 
       0x2, 0x990, 0x98e, 0x3, 0x2, 0x2, 0x2, 0x990, 0x991, 0x3, 0x2, 0x2, 
       0x2, 0x991, 0xed, 0x3, 0x2, 0x2, 0x2, 0x992, 0x994, 0x5, 0x110, 0x89, 
       0x2, 0x993, 0x995, 0x5, 0xf0, 0x79, 0x2, 0x994, 0x993, 0x3, 0x2, 
       0x2, 0x2, 0x995, 0x996, 0x3, 0x2, 0x2, 0x2, 0x996, 0x994, 0x3, 0x2, 
       0x2, 0x2, 0x996, 0x997, 0x3, 0x2, 0x2, 0x2, 0x997, 0xef, 0x3, 0x2, 
       0x2, 0x2, 0x998, 0x99a, 0x5, 0xf6, 0x7c, 0x2, 0x999, 0x99b, 0x5, 
       0x108, 0x85, 0x2, 0x99a, 0x999, 0x3, 0x2, 0x2, 0x2, 0x99a, 0x99b, 
       0x3, 0x2, 0x2, 0x2, 0x99b, 0x99c, 0x3, 0x2, 0x2, 0x2, 0x99c, 0x99d, 
       0x5, 0xe4, 0x73, 0x2, 0x99d, 0x9b4, 0x3, 0x2, 0x2, 0x2, 0x99e, 0x9a2, 
       0x5, 0xf8, 0x7d, 0x2, 0x99f, 0x9a1, 0x5, 0x11c, 0x8f, 0x2, 0x9a0, 
       0x99f, 0x3, 0x2, 0x2, 0x2, 0x9a1, 0x9a4, 0x3, 0x2, 0x2, 0x2, 0x9a2, 
       0x9a0, 0x3, 0x2, 0x2, 0x2, 0x9a2, 0x9a3, 0x3, 0x2, 0x2, 0x2, 0x9a3, 
       0x9a6, 0x3, 0x2, 0x2, 0x2, 0x9a4, 0x9a2, 0x3, 0x2, 0x2, 0x2, 0x9a5, 
       0x9a7, 0x5, 0x108, 0x85, 0x2, 0x9a6, 0x9a5, 0x3, 0x2, 0x2, 0x2, 0x9a6, 
       0x9a7, 0x3, 0x2, 0x2, 0x2, 0x9a7, 0x9a9, 0x3, 0x2, 0x2, 0x2, 0x9a8, 
       0x9aa, 0x5, 0x112, 0x8a, 0x2, 0x9a9, 0x9a8, 0x3, 0x2, 0x2, 0x2, 0x9a9, 
       0x9aa, 0x3, 0x2, 0x2, 0x2, 0x9aa, 0x9ac, 0x3, 0x2, 0x2, 0x2, 0x9ab, 
       0x9ad, 0x5, 0x10a, 0x86, 0x2, 0x9ac, 0x9ab, 0x3, 0x2, 0x2, 0x2, 0x9ac, 
       0x9ad, 0x3, 0x2, 0x2, 0x2, 0x9ad, 0x9af, 0x3, 0x2, 0x2, 0x2, 0x9ae, 
       0x9b0, 0x5, 0x18a, 0xc6, 0x2, 0x9af, 0x9ae, 0x3, 0x2, 0x2, 0x2, 0x9af, 
       0x9b0, 0x3, 0x2, 0x2, 0x2, 0x9b0, 0x9b1, 0x3, 0x2, 0x2, 0x2, 0x9b1, 
       0x9b2, 0x5, 0xe4, 0x73, 0x2, 0x9b2, 0x9b4, 0x3, 0x2, 0x2, 0x2, 0x9b3, 
       0x998, 0x3, 0x2, 0x2, 0x2, 0x9b3, 0x99e, 0x3, 0x2, 0x2, 0x2, 0x9b4, 
       0xf1, 0x3, 0x2, 0x2, 0x2, 0x9b5, 0x9b6, 0x5, 0xf6, 0x7c, 0x2, 0x9b6, 
       0x9b8, 0x5, 0xf4, 0x7b, 0x2, 0x9b7, 0x9b9, 0x5, 0x108, 0x85, 0x2, 
       0x9b8, 0x9b7, 0x3, 0x2, 0x2, 0x2, 0x9b8, 0x9b9, 0x3, 0x2, 0x2, 0x2, 
       0x9b9, 0x9cf, 0x3, 0x2, 0x2, 0x2, 0x9ba, 0x9bb, 0x5, 0xf8, 0x7d, 
       0x2, 0x9bb, 0x9bf, 0x5, 0xf4, 0x7b, 0x2, 0x9bc, 0x9be, 0x5, 0x11c, 
       0x8f, 0x2, 0x9bd, 0x9bc, 0x3, 0x2, 0x2, 0x2, 0x9be, 0x9c1, 0x3, 0x2, 
       0x2, 0x2, 0x9bf, 0x9bd, 0x3, 0x2, 0x2, 0x2, 0x9bf, 0x9c0, 0x3, 0x2, 
       0x2, 0x2, 0x9c0, 0x9c3, 0x3, 0x2, 0x2, 0x2, 0x9c1, 0x9bf, 0x3, 0x2, 
       0x2, 0x2, 0x9c2, 0x9c4, 0x5, 0x108, 0x85, 0x2, 0x9c3, 0x9c2, 0x3, 
       0x2, 0x2, 0x2, 0x9c3, 0x9c4, 0x3, 0x2, 0x2, 0x2, 0x9c4, 0x9c6, 0x3, 
       0x2, 0x2, 0x2, 0x9c5, 0x9c7, 0x5, 0x112, 0x8a, 0x2, 0x9c6, 0x9c5, 
       0x3, 0x2, 0x2, 0x2, 0x9c6, 0x9c7, 0x3, 0x2, 0x2, 0x2, 0x9c7, 0x9c9, 
       0x3, 0x2, 0x2, 0x2, 0x9c8, 0x9ca, 0x5, 0x10a, 0x86, 0x2, 0x9c9, 0x9c8, 
       0x3, 0x2, 0x2, 0x2, 0x9c9, 0x9ca, 0x3, 0x2, 0x2, 0x2, 0x9ca, 0x9cc, 
       0x3, 0x2, 0x2, 0x2, 0x9cb, 0x9cd, 0x5, 0x18a, 0xc6, 0x2, 0x9cc, 0x9cb, 
       0x3, 0x2, 0x2, 0x2, 0x9cc, 0x9cd, 0x3, 0x2, 0x2, 0x2, 0x9cd, 0x9cf, 
       0x3, 0x2, 0x2, 0x2, 0x9ce, 0x9b5, 0x3, 0x2, 0x2, 0x2, 0x9ce, 0x9ba, 
       0x3, 0x2, 0x2, 0x2, 0x9cf, 0xf3, 0x3, 0x2, 0x2, 0x2, 0x9d0, 0x9d2, 
       0x5, 0x110, 0x89, 0x2, 0x9d1, 0x9d0, 0x3, 0x2, 0x2, 0x2, 0x9d1, 0x9d2, 
       0x3, 0x2, 0x2, 0x2, 0x9d2, 0xf5, 0x3, 0x2, 0x2, 0x2, 0x9d3, 0x9d4, 
       0x7, 0xf9, 0x2, 0x2, 0x9d4, 0x9d5, 0x7, 0x11a, 0x2, 0x2, 0x9d5, 0x9d6, 
       0x7, 0x5, 0x2, 0x2, 0x9d6, 0x9d7, 0x5, 0x14c, 0xa7, 0x2, 0x9d7, 0x9d8, 
       0x7, 0x6, 0x2, 0x2, 0x9d8, 0x9de, 0x3, 0x2, 0x2, 0x2, 0x9d9, 0x9da, 
       0x7, 0xba, 0x2, 0x2, 0x9da, 0x9de, 0x5, 0x14c, 0xa7, 0x2, 0x9db, 
       0x9dc, 0x7, 0xe6, 0x2, 0x2, 0x9dc, 0x9de, 0x5, 0x14c, 0xa7, 0x2, 
       0x9dd, 0x9d3, 0x3, 0x2, 0x2, 0x2, 0x9dd, 0x9d9, 0x3, 0x2, 0x2, 0x2, 
       0x9dd, 0x9db, 0x3, 0x2, 0x2, 0x2, 0x9de, 0x9e0, 0x3, 0x2, 0x2, 0x2, 
       0x9df, 0x9e1, 0x5, 0x140, 0xa1, 0x2, 0x9e0, 0x9df, 0x3, 0x2, 0x2, 
       0x2, 0x9e0, 0x9e1, 0x3, 0x2, 0x2, 0x2, 0x9e1, 0x9e4, 0x3, 0x2, 0x2, 
       0x2, 0x9e2, 0x9e3, 0x7, 0xe4, 0x2, 0x2, 0x9e3, 0x9e5, 0x7, 0x147, 
       0x2, 0x2, 0x9e4, 0x9e2, 0x3, 0x2, 0x2, 0x2, 0x9e4, 0x9e5, 0x3, 0x2, 
       0x2, 0x2, 0x9e5, 0x9e6, 0x3, 0x2, 0x2, 0x2, 0x9e6, 0x9e7, 0x7, 0x12a, 
       0x2, 0x2, 0x9e7, 0x9f4, 0x7, 0x147, 0x2, 0x2, 0x9e8, 0x9f2, 0x7, 
       0x41, 0x2, 0x2, 0x9e9, 0x9f3, 0x5, 0x12e, 0x98, 0x2, 0x9ea, 0x9f3, 
       0x5, 0x180, 0xc1, 0x2, 0x9eb, 0x9ee, 0x7, 0x5, 0x2, 0x2, 0x9ec, 0x9ef, 
       0x5, 0x12e, 0x98, 0x2, 0x9ed, 0x9ef, 0x5, 0x180, 0xc1, 0x2, 0x9ee, 
       0x9ec, 0x3, 0x2, 0x2, 0x2, 0x9ee, 0x9ed, 0x3, 0x2, 0x2, 0x2, 0x9ef, 
       0x9f0, 0x3, 0x2, 0x2, 0x2, 0x9f0, 0x9f1, 0x7, 0x6, 0x2, 0x2, 0x9f1, 
       0x9f3, 0x3, 0x2, 0x2, 0x2, 0x9f2, 0x9e9, 0x3, 0x2, 0x2, 0x2, 0x9f2, 
       0x9ea, 0x3, 0x2, 0x2, 0x2, 0x9f2, 0x9eb, 0x3, 0x2, 0x2, 0x2, 0x9f3, 
       0x9f5, 0x3, 0x2, 0x2, 0x2, 0x9f4, 0x9e8, 0x3, 0x2, 0x2, 0x2, 0x9f4, 
       0x9f5, 0x3, 0x2, 0x2, 0x2, 0x9f5, 0x9f7, 0x3, 0x2, 0x2, 0x2, 0x9f6, 
       0x9f8, 0x5, 0x140, 0xa1, 0x2, 0x9f7, 0x9f6, 0x3, 0x2, 0x2, 0x2, 0x9f7, 
       0x9f8, 0x3, 0x2, 0x2, 0x2, 0x9f8, 0x9fb, 0x3, 0x2, 0x2, 0x2, 0x9f9, 
       0x9fa, 0x7, 0xe3, 0x2, 0x2, 0x9fa, 0x9fc, 0x7, 0x147, 0x2, 0x2, 0x9fb, 
       0x9f9, 0x3, 0x2, 0x2, 0x2, 0x9fb, 0x9fc, 0x3, 0x2, 0x2, 0x2, 0x9fc, 
       0xf7, 0x3, 0x2, 0x2, 0x2, 0x9fd, 0xa01, 0x7, 0xf9, 0x2, 0x2, 0x9fe, 
       0xa00, 0x5, 0x10c, 0x87, 0x2, 0x9ff, 0x9fe, 0x3, 0x2, 0x2, 0x2, 0xa00, 
       0xa03, 0x3, 0x2, 0x2, 0x2, 0xa01, 0x9ff, 0x3, 0x2, 0x2, 0x2, 0xa01, 
       0xa02, 0x3, 0x2, 0x2, 0x2, 0xa02, 0xa05, 0x3, 0x2, 0x2, 0x2, 0xa03, 
       0xa01, 0x3, 0x2, 0x2, 0x2, 0xa04, 0xa06, 0x5, 0x11e, 0x90, 0x2, 0xa05, 
       0xa04, 0x3, 0x2, 0x2, 0x2, 0xa05, 0xa06, 0x3, 0x2, 0x2, 0x2, 0xa06, 
       0xa07, 0x3, 0x2, 0x2, 0x2, 0xa07, 0xa08, 0x5, 0x14c, 0xa7, 0x2, 0xa08, 
       0xf9, 0x3, 0x2, 0x2, 0x2, 0xa09, 0xa0a, 0x7, 0xff, 0x2, 0x2, 0xa0a, 
       0xa0b, 0x5, 0x104, 0x83, 0x2, 0xa0b, 0xfb, 0x3, 0x2, 0x2, 0x2, 0xa0c, 
       0xa0d, 0x7, 0x12e, 0x2, 0x2, 0xa0d, 0xa10, 0x7, 0xbb, 0x2, 0x2, 0xa0e, 
       0xa0f, 0x7, 0x3c, 0x2, 0x2, 0xa0f, 0xa11, 0x5, 0x156, 0xac, 0x2, 
       0xa10, 0xa0e, 0x3, 0x2, 0x2, 0x2, 0xa10, 0xa11, 0x3, 0x2, 0x2, 0x2, 
       0xa11, 0xa12, 0x3, 0x2, 0x2, 0x2, 0xa12, 0xa13, 0x7, 0x114, 0x2, 
       0x2, 0xa13, 0xa14, 0x5, 0x100, 0x81, 0x2, 0xa14, 0xfd, 0x3, 0x2, 
       0x2, 0x2, 0xa15, 0xa16, 0x7, 0x12e, 0x2, 0x2, 0xa16, 0xa17, 0x7, 
       0xc4, 0x2, 0x2, 0xa17, 0xa1a, 0x7, 0xbb, 0x2, 0x2, 0xa18, 0xa19, 
       0x7, 0x3c, 0x2, 0x2, 0xa19, 0xa1b, 0x5, 0x156, 0xac, 0x2, 0xa1a, 
       0xa18, 0x3, 0x2, 0x2, 0x2, 0xa1a, 0xa1b, 0x3, 0x2, 0x2, 0x2, 0xa1b, 
       0xa1c, 0x3, 0x2, 0x2, 0x2, 0xa1c, 0xa1d, 0x7, 0x114, 0x2, 0x2, 0xa1d, 
       0xa1e, 0x5, 0x102, 0x82, 0x2, 0xa1e, 0xff, 0x3, 0x2, 0x2, 0x2, 0xa1f, 
       0xa27, 0x7, 0x6e, 0x2, 0x2, 0xa20, 0xa21, 0x7, 0x127, 0x2, 0x2, 0xa21, 
       0xa22, 0x7, 0xff, 0x2, 0x2, 0xa22, 0xa27, 0x7, 0x13e, 0x2, 0x2, 0xa23, 
       0xa24, 0x7, 0x127, 0x2, 0x2, 0xa24, 0xa25, 0x7, 0xff, 0x2, 0x2, 0xa25, 
       0xa27, 0x5, 0x104, 0x83, 0x2, 0xa26, 0xa1f, 0x3, 0x2, 0x2, 0x2, 0xa26, 
       0xa20, 0x3, 0x2, 0x2, 0x2, 0xa26, 0xa23, 0x3, 0x2, 0x2, 0x2, 0xa27, 
       0x101, 0x3, 0x2, 0x2, 0x2, 0xa28, 0xa29, 0x7, 0xa2, 0x2, 0x2, 0xa29, 
       0xa3b, 0x7, 0x13e, 0x2, 0x2, 0xa2a, 0xa2b, 0x7, 0xa2, 0x2, 0x2, 0xa2b, 
       0xa2c, 0x7, 0x5, 0x2, 0x2, 0xa2c, 0xa2d, 0x5, 0x142, 0xa2, 0x2, 0xa2d, 
       0xa2e, 0x7, 0x6, 0x2, 0x2, 0xa2e, 0xa2f, 0x7, 0x12b, 0x2, 0x2, 0xa2f, 
       0xa30, 0x7, 0x5, 0x2, 0x2, 0xa30, 0xa35, 0x5, 0x154, 0xab, 0x2, 0xa31, 
       0xa32, 0x7, 0x3, 0x2, 0x2, 0xa32, 0xa34, 0x5, 0x154, 0xab, 0x2, 0xa33, 
       0xa31, 0x3, 0x2, 0x2, 0x2, 0xa34, 0xa37, 0x3, 0x2, 0x2, 0x2, 0xa35, 
       0xa33, 0x3, 0x2, 0x2, 0x2, 0xa35, 0xa36, 0x3, 0x2, 0x2, 0x2, 0xa36, 
       0xa38, 0x3, 0x2, 0x2, 0x2, 0xa37, 0xa35, 0x3, 0x2, 0x2, 0x2, 0xa38, 
       0xa39, 0x7, 0x6, 0x2, 0x2, 0xa39, 0xa3b, 0x3, 0x2, 0x2, 0x2, 0xa3a, 
       0xa28, 0x3, 0x2, 0x2, 0x2, 0xa3a, 0xa2a, 0x3, 0x2, 0x2, 0x2, 0xa3b, 
       0x103, 0x3, 0x2, 0x2, 0x2, 0xa3c, 0xa41, 0x5, 0x106, 0x84, 0x2, 0xa3d, 
       0xa3e, 0x7, 0x3, 0x2, 0x2, 0xa3e, 0xa40, 0x5, 0x106, 0x84, 0x2, 0xa3f, 
       0xa3d, 0x3, 0x2, 0x2, 0x2, 0xa40, 0xa43, 0x3, 0x2, 0x2, 0x2, 0xa41, 
       0xa3f, 0x3, 0x2, 0x2, 0x2, 0xa41, 0xa42, 0x3, 0x2, 0x2, 0x2, 0xa42, 
       0x105, 0x3, 0x2, 0x2, 0x2, 0xa43, 0xa41, 0x3, 0x2, 0x2, 0x2, 0xa44, 
       0xa45, 0x5, 0x144, 0xa3, 0x2, 0xa45, 0xa46, 0x7, 0x133, 0x2, 0x2, 
       0xa46, 0xa47, 0x5, 0x154, 0xab, 0x2, 0xa47, 0x107, 0x3, 0x2, 0x2, 
       0x2, 0xa48, 0xa49, 0x7, 0x12f, 0x2, 0x2, 0xa49, 0xa4a, 0x5, 0x156, 
       0xac, 0x2, 0xa4a, 0x109, 0x3, 0x2, 0x2, 0x2, 0xa4b, 0xa4c, 0x7, 0x97, 
       0x2, 0x2, 0xa4c, 0xa4d, 0x5, 0x156, 0xac, 0x2, 0xa4d, 0x10b, 0x3, 
       0x2, 0x2, 0x2, 0xa4e, 0xa4f, 0x7, 0x10, 0x2, 0x2, 0xa4f, 0xa56, 0x5, 
       0x10e, 0x88, 0x2, 0xa50, 0xa52, 0x7, 0x3, 0x2, 0x2, 0xa51, 0xa50, 
       0x3, 0x2, 0x2, 0x2, 0xa51, 0xa52, 0x3, 0x2, 0x2, 0x2, 0xa52, 0xa53, 
       0x3, 0x2, 0x2, 0x2, 0xa53, 0xa55, 0x5, 0x10e, 0x88, 0x2, 0xa54, 0xa51, 
       0x3, 0x2, 0x2, 0x2, 0xa55, 0xa58, 0x3, 0x2, 0x2, 0x2, 0xa56, 0xa54, 
       0x3, 0x2, 0x2, 0x2, 0xa56, 0xa57, 0x3, 0x2, 0x2, 0x2, 0xa57, 0xa59, 
       0x3, 0x2, 0x2, 0x2, 0xa58, 0xa56, 0x3, 0x2, 0x2, 0x2, 0xa59, 0xa5a, 
       0x7, 0x11, 0x2, 0x2, 0xa5a, 0x10d, 0x3, 0x2, 0x2, 0x2, 0xa5b, 0xa69, 
       0x5, 0x19e, 0xd0, 0x2, 0xa5c, 0xa5d, 0x5, 0x19e, 0xd0, 0x2, 0xa5d, 
       0xa5e, 0x7, 0x5, 0x2, 0x2, 0xa5e, 0xa63, 0x5, 0x15c, 0xaf, 0x2, 0xa5f, 
       0xa60, 0x7, 0x3, 0x2, 0x2, 0xa60, 0xa62, 0x5, 0x15c, 0xaf, 0x2, 0xa61, 
       0xa5f, 0x3, 0x2, 0x2, 0x2, 0xa62, 0xa65, 0x3, 0x2, 0x2, 0x2, 0xa63, 
       0xa61, 0x3, 0x2, 0x2, 0x2, 0xa63, 0xa64, 0x3, 0x2, 0x2, 0x2, 0xa64, 
       0xa66, 0x3, 0x2, 0x2, 0x2, 0xa65, 0xa63, 0x3, 0x2, 0x2, 0x2, 0xa66, 
       0xa67, 0x7, 0x6, 0x2, 0x2, 0xa67, 0xa69, 0x3, 0x2, 0x2, 0x2, 0xa68, 
       0xa5b, 0x3, 0x2, 0x2, 0x2, 0xa68, 0xa5c, 0x3, 0x2, 0x2, 0x2, 0xa69, 
       0x10f, 0x3, 0x2, 0x2, 0x2, 0xa6a, 0xa6b, 0x7, 0x8f, 0x2, 0x2, 0xa6b, 
       0xa70, 0x5, 0x120, 0x91, 0x2, 0xa6c, 0xa6d, 0x7, 0x3, 0x2, 0x2, 0xa6d, 
       0xa6f, 0x5, 0x120, 0x91, 0x2, 0xa6e, 0xa6c, 0x3, 0x2, 0x2, 0x2, 0xa6f, 
       0xa72, 0x3, 0x2, 0x2, 0x2, 0xa70, 0xa6e, 0x3, 0x2, 0x2, 0x2, 0xa70, 
       0xa71, 0x3, 0x2, 0x2, 0x2, 0xa71, 0xa76, 0x3, 0x2, 0x2, 0x2, 0xa72, 
       0xa70, 0x3, 0x2, 0x2, 0x2, 0xa73, 0xa75, 0x5, 0x11c, 0x8f, 0x2, 0xa74, 
       0xa73, 0x3, 0x2, 0x2, 0x2, 0xa75, 0xa78, 0x3, 0x2, 0x2, 0x2, 0xa76, 
       0xa74, 0x3, 0x2, 0x2, 0x2, 0xa76, 0xa77, 0x3, 0x2, 0x2, 0x2, 0xa77, 
       0xa7a, 0x3, 0x2, 0x2, 0x2, 0xa78, 0xa76, 0x3, 0x2, 0x2, 0x2, 0xa79, 
       0xa7b, 0x5, 0x116, 0x8c, 0x2, 0xa7a, 0xa79, 0x3, 0x2, 0x2, 0x2, 0xa7a, 
       0xa7b, 0x3, 0x2, 0x2, 0x2, 0xa7b, 0x111, 0x3, 0x2, 0x2, 0x2, 0xa7c, 
       0xa7d, 0x7, 0x95, 0x2, 0x2, 0xa7d, 0xa7e, 0x7, 0x49, 0x2, 0x2, 0xa7e, 
       0xa83, 0x5, 0x154, 0xab, 0x2, 0xa7f, 0xa80, 0x7, 0x3, 0x2, 0x2, 0xa80, 
       0xa82, 0x5, 0x154, 0xab, 0x2, 0xa81, 0xa7f, 0x3, 0x2, 0x2, 0x2, 0xa82, 
       0xa85, 0x3, 0x2, 0x2, 0x2, 0xa83, 0xa81, 0x3, 0x2, 0x2, 0x2, 0xa83, 
       0xa84, 0x3, 0x2, 0x2, 0x2, 0xa84, 0xa97, 0x3, 0x2, 0x2, 0x2, 0xa85, 
       0xa83, 0x3, 0x2, 0x2, 0x2, 0xa86, 0xa87, 0x7, 0x131, 0x2, 0x2, 0xa87, 
       0xa98, 0x7, 0xf4, 0x2, 0x2, 0xa88, 0xa89, 0x7, 0x131, 0x2, 0x2, 0xa89, 
       0xa98, 0x7, 0x62, 0x2, 0x2, 0xa8a, 0xa8b, 0x7, 0x96, 0x2, 0x2, 0xa8b, 
       0xa8c, 0x7, 0x101, 0x2, 0x2, 0xa8c, 0xa8d, 0x7, 0x5, 0x2, 0x2, 0xa8d, 
       0xa92, 0x5, 0x114, 0x8b, 0x2, 0xa8e, 0xa8f, 0x7, 0x3, 0x2, 0x2, 0xa8f, 
       0xa91, 0x5, 0x114, 0x8b, 0x2, 0xa90, 0xa8e, 0x3, 0x2, 0x2, 0x2, 0xa91, 
       0xa94, 0x3, 0x2, 0x2, 0x2, 0xa92, 0xa90, 0x3, 0x2, 0x2, 0x2, 0xa92, 
       0xa93, 0x3, 0x2, 0x2, 0x2, 0xa93, 0xa95, 0x3, 0x2, 0x2, 0x2, 0xa94, 
       0xa92, 0x3, 0x2, 0x2, 0x2, 0xa95, 0xa96, 0x7, 0x6, 0x2, 0x2, 0xa96, 
       0xa98, 0x3, 0x2, 0x2, 0x2, 0xa97, 0xa86, 0x3, 0x2, 0x2, 0x2, 0xa97, 
       0xa88, 0x3, 0x2, 0x2, 0x2, 0xa97, 0xa8a, 0x3, 0x2, 0x2, 0x2, 0xa97, 
       0xa98, 0x3, 0x2, 0x2, 0x2, 0xa98, 0xaa9, 0x3, 0x2, 0x2, 0x2, 0xa99, 
       0xa9a, 0x7, 0x95, 0x2, 0x2, 0xa9a, 0xa9b, 0x7, 0x49, 0x2, 0x2, 0xa9b, 
       0xa9c, 0x7, 0x96, 0x2, 0x2, 0xa9c, 0xa9d, 0x7, 0x101, 0x2, 0x2, 0xa9d, 
       0xa9e, 0x7, 0x5, 0x2, 0x2, 0xa9e, 0xaa3, 0x5, 0x114, 0x8b, 0x2, 0xa9f, 
       0xaa0, 0x7, 0x3, 0x2, 0x2, 0xaa0, 0xaa2, 0x5, 0x114, 0x8b, 0x2, 0xaa1, 
       0xa9f, 0x3, 0x2, 0x2, 0x2, 0xaa2, 0xaa5, 0x3, 0x2, 0x2, 0x2, 0xaa3, 
       0xaa1, 0x3, 0x2, 0x2, 0x2, 0xaa3, 0xaa4, 0x3, 0x2, 0x2, 0x2, 0xaa4, 
       0xaa6, 0x3, 0x2, 0x2, 0x2, 0xaa5, 0xaa3, 0x3, 0x2, 0x2, 0x2, 0xaa6, 
       0xaa7, 0x7, 0x6, 0x2, 0x2, 0xaa7, 0xaa9, 0x3, 0x2, 0x2, 0x2, 0xaa8, 
       0xa7c, 0x3, 0x2, 0x2, 0x2, 0xaa8, 0xa99, 0x3, 0x2, 0x2, 0x2, 0xaa9, 
       0x113, 0x3, 0x2, 0x2, 0x2, 0xaaa, 0xab3, 0x7, 0x5, 0x2, 0x2, 0xaab, 
       0xab0, 0x5, 0x154, 0xab, 0x2, 0xaac, 0xaad, 0x7, 0x3, 0x2, 0x2, 0xaad, 
       0xaaf, 0x5, 0x154, 0xab, 0x2, 0xaae, 0xaac, 0x3, 0x2, 0x2, 0x2, 0xaaf, 
       0xab2, 0x3, 0x2, 0x2, 0x2, 0xab0, 0xaae, 0x3, 0x2, 0x2, 0x2, 0xab0, 
       0xab1, 0x3, 0x2, 0x2, 0x2, 0xab1, 0xab4, 0x3, 0x2, 0x2, 0x2, 0xab2, 
       0xab0, 0x3, 0x2, 0x2, 0x2, 0xab3, 0xaab, 0x3, 0x2, 0x2, 0x2, 0xab3, 
       0xab4, 0x3, 0x2, 0x2, 0x2, 0xab4, 0xab5, 0x3, 0x2, 0x2, 0x2, 0xab5, 
       0xab8, 0x7, 0x6, 0x2, 0x2, 0xab6, 0xab8, 0x5, 0x154, 0xab, 0x2, 0xab7, 
       0xaaa, 0x3, 0x2, 0x2, 0x2, 0xab7, 0xab6, 0x3, 0x2, 0x2, 0x2, 0xab8, 
       0x115, 0x3, 0x2, 0x2, 0x2, 0xab9, 0xaba, 0x7, 0xd9, 0x2, 0x2, 0xaba, 
       0xabb, 0x7, 0x5, 0x2, 0x2, 0xabb, 0xabc, 0x5, 0x14c, 0xa7, 0x2, 0xabc, 
       0xabd, 0x7, 0x8b, 0x2, 0x2, 0xabd, 0xabe, 0x5, 0x118, 0x8d, 0x2, 
       0xabe, 0xabf, 0x7, 0x9c, 0x2, 0x2, 0xabf, 0xac0, 0x7, 0x5, 0x2, 0x2, 
       0xac0, 0xac5, 0x5, 0x11a, 0x8e, 0x2, 0xac1, 0xac2, 0x7, 0x3, 0x2, 
       0x2, 0xac2, 0xac4, 0x5, 0x11a, 0x8e, 0x2, 0xac3, 0xac1, 0x3, 0x2, 
       0x2, 0x2, 0xac4, 0xac7, 0x3, 0x2, 0x2, 0x2, 0xac5, 0xac3, 0x3, 0x2, 
       0x2, 0x2, 0xac5, 0xac6, 0x3, 0x2, 0x2, 0x2, 0xac6, 0xac8, 0x3, 0x2, 
       0x2, 0x2, 0xac7, 0xac5, 0x3, 0x2, 0x2, 0x2, 0xac8, 0xac9, 0x7, 0x6, 
       0x2, 0x2, 0xac9, 0xaca, 0x7, 0x6, 0x2, 0x2, 0xaca, 0x117, 0x3, 0x2, 
       0x2, 0x2, 0xacb, 0xad8, 0x5, 0x19e, 0xd0, 0x2, 0xacc, 0xacd, 0x7, 
       0x5, 0x2, 0x2, 0xacd, 0xad2, 0x5, 0x19e, 0xd0, 0x2, 0xace, 0xacf, 
       0x7, 0x3, 0x2, 0x2, 0xacf, 0xad1, 0x5, 0x19e, 0xd0, 0x2, 0xad0, 0xace, 
       0x3, 0x2, 0x2, 0x2, 0xad1, 0xad4, 0x3, 0x2, 0x2, 0x2, 0xad2, 0xad0, 
       0x3, 0x2, 0x2, 0x2, 0xad2, 0xad3, 0x3, 0x2, 0x2, 0x2, 0xad3, 0xad5, 
       0x3, 0x2, 0x2, 0x2, 0xad4, 0xad2, 0x3, 0x2, 0x2, 0x2, 0xad5, 0xad6, 
       0x7, 0x6, 0x2, 0x2, 0xad6, 0xad8, 0x3, 0x2, 0x2, 0x2, 0xad7, 0xacb, 
       0x3, 0x2, 0x2, 0x2, 0xad7, 0xacc, 0x3, 0x2, 0x2, 0x2, 0xad8, 0x119, 
       0x3, 0x2, 0x2, 0x2, 0xad9, 0xade, 0x5, 0x154, 0xab, 0x2, 0xada, 0xadc, 
       0x7, 0x41, 0x2, 0x2, 0xadb, 0xada, 0x3, 0x2, 0x2, 0x2, 0xadb, 0xadc, 
       0x3, 0x2, 0x2, 0x2, 0xadc, 0xadd, 0x3, 0x2, 0x2, 0x2, 0xadd, 0xadf, 
       0x5, 0x19e, 0xd0, 0x2, 0xade, 0xadb, 0x3, 0x2, 0x2, 0x2, 0xade, 0xadf, 
       0x3, 0x2, 0x2, 0x2, 0xadf, 0x11b, 0x3, 0x2, 0x2, 0x2, 0xae0, 0xae1, 
       0x7, 0xab, 0x2, 0x2, 0xae1, 0xae3, 0x7, 0x12c, 0x2, 0x2, 0xae2, 0xae4, 
       0x7, 0xcf, 0x2, 0x2, 0xae3, 0xae2, 0x3, 0x2, 0x2, 0x2, 0xae3, 0xae4, 
       0x3, 0x2, 0x2, 0x2, 0xae4, 0xae5, 0x3, 0x2, 0x2, 0x2, 0xae5, 0xae6, 
       0x5, 0x198, 0xcd, 0x2, 0xae6, 0xaef, 0x7, 0x5, 0x2, 0x2, 0xae7, 0xaec, 
       0x5, 0x154, 0xab, 0x2, 0xae8, 0xae9, 0x7, 0x3, 0x2, 0x2, 0xae9, 0xaeb, 
       0x5, 0x154, 0xab, 0x2, 0xaea, 0xae8, 0x3, 0x2, 0x2, 0x2, 0xaeb, 0xaee, 
       0x3, 0x2, 0x2, 0x2, 0xaec, 0xaea, 0x3, 0x2, 0x2, 0x2, 0xaec, 0xaed, 
       0x3, 0x2, 0x2, 0x2, 0xaed, 0xaf0, 0x3, 0x2, 0x2, 0x2, 0xaee, 0xaec, 
       0x3, 0x2, 0x2, 0x2, 0xaef, 0xae7, 0x3, 0x2, 0x2, 0x2, 0xaef, 0xaf0, 
       0x3, 0x2, 0x2, 0x2, 0xaf0, 0xaf1, 0x3, 0x2, 0x2, 0x2, 0xaf1, 0xaf2, 
       0x7, 0x6, 0x2, 0x2, 0xaf2, 0xafe, 0x5, 0x19e, 0xd0, 0x2, 0xaf3, 0xaf5, 
       0x7, 0x41, 0x2, 0x2, 0xaf4, 0xaf3, 0x3, 0x2, 0x2, 0x2, 0xaf4, 0xaf5, 
       0x3, 0x2, 0x2, 0x2, 0xaf5, 0xaf6, 0x3, 0x2, 0x2, 0x2, 0xaf6, 0xafb, 
       0x5, 0x19e, 0xd0, 0x2, 0xaf7, 0xaf8, 0x7, 0x3, 0x2, 0x2, 0xaf8, 0xafa, 
       0x5, 0x19e, 0xd0, 0x2, 0xaf9, 0xaf7, 0x3, 0x2, 0x2, 0x2, 0xafa, 0xafd, 
       0x3, 0x2, 0x2, 0x2, 0xafb, 0xaf9, 0x3, 0x2, 0x2, 0x2, 0xafb, 0xafc, 
       0x3, 0x2, 0x2, 0x2, 0xafc, 0xaff, 0x3, 0x2, 0x2, 0x2, 0xafd, 0xafb, 
       0x3, 0x2, 0x2, 0x2, 0xafe, 0xaf4, 0x3, 0x2, 0x2, 0x2, 0xafe, 0xaff, 
       0x3, 0x2, 0x2, 0x2, 0xaff, 0x11d, 0x3, 0x2, 0x2, 0x2, 0xb00, 0xb01, 
       0x9, 0x1f, 0x2, 0x2, 0xb01, 0x11f, 0x3, 0x2, 0x2, 0x2, 0xb02, 0xb06, 
       0x5, 0x138, 0x9d, 0x2, 0xb03, 0xb05, 0x5, 0x122, 0x92, 0x2, 0xb04, 
       0xb03, 0x3, 0x2, 0x2, 0x2, 0xb05, 0xb08, 0x3, 0x2, 0x2, 0x2, 0xb06, 
       0xb04, 0x3, 0x2, 0x2, 0x2, 0xb06, 0xb07, 0x3, 0x2, 0x2, 0x2, 0xb07, 
       0x121, 0x3, 0x2, 0x2, 0x2, 0xb08, 0xb06, 0x3, 0x2, 0x2, 0x2, 0xb09, 
       0xb0a, 0x5, 0x124, 0x93, 0x2, 0xb0a, 0xb0b, 0x7, 0xa8, 0x2, 0x2, 
       0xb0b, 0xb0d, 0x5, 0x138, 0x9d, 0x2, 0xb0c, 0xb0e, 0x5, 0x126, 0x94, 
       0x2, 0xb0d, 0xb0c, 0x3, 0x2, 0x2, 0x2, 0xb0d, 0xb0e, 0x3, 0x2, 0x2, 
       0x2, 0xb0e, 0xb15, 0x3, 0x2, 0x2, 0x2, 0xb0f, 0xb10, 0x7, 0xc2, 0x2, 
       0x2, 0xb10, 0xb11, 0x5, 0x124, 0x93, 0x2, 0xb11, 0xb12, 0x7, 0xa8, 
       0x2, 0x2, 0xb12, 0xb13, 0x5, 0x138, 0x9d, 0x2, 0xb13, 0xb15, 0x3, 
       0x2, 0x2, 0x2, 0xb14, 0xb09, 0x3, 0x2, 0x2, 0x2, 0xb14, 0xb0f, 0x3, 
       0x2, 0x2, 0x2, 0xb15, 0x123, 0x3, 0x2, 0x2, 0x2, 0xb16, 0xb18, 0x7, 
       0x9f, 0x2, 0x2, 0xb17, 0xb16, 0x3, 0x2, 0x2, 0x2, 0xb17, 0xb18, 0x3, 
       0x2, 0x2, 0x2, 0xb18, 0xb2f, 0x3, 0x2, 0x2, 0x2, 0xb19, 0xb2f, 0x7, 
       0x61, 0x2, 0x2, 0xb1a, 0xb1c, 0x7, 0xae, 0x2, 0x2, 0xb1b, 0xb1d, 
       0x7, 0xcf, 0x2, 0x2, 0xb1c, 0xb1b, 0x3, 0x2, 0x2, 0x2, 0xb1c, 0xb1d, 
       0x3, 0x2, 0x2, 0x2, 0xb1d, 0xb2f, 0x3, 0x2, 0x2, 0x2, 0xb1e, 0xb20, 
       0x7, 0xae, 0x2, 0x2, 0xb1f, 0xb1e, 0x3, 0x2, 0x2, 0x2, 0xb1f, 0xb20, 
       0x3, 0x2, 0x2, 0x2, 0xb20, 0xb21, 0x3, 0x2, 0x2, 0x2, 0xb21, 0xb2f, 
       0x7, 0xfa, 0x2, 0x2, 0xb22, 0xb24, 0x7, 0xef, 0x2, 0x2, 0xb23, 0xb25, 
       0x7, 0xcf, 0x2, 0x2, 0xb24, 0xb23, 0x3, 0x2, 0x2, 0x2, 0xb24, 0xb25, 
       0x3, 0x2, 0x2, 0x2, 0xb25, 0xb2f, 0x3, 0x2, 0x2, 0x2, 0xb26, 0xb28, 
       0x7, 0x90, 0x2, 0x2, 0xb27, 0xb29, 0x7, 0xcf, 0x2, 0x2, 0xb28, 0xb27, 
       0x3, 0x2, 0x2, 0x2, 0xb28, 0xb29, 0x3, 0x2, 0x2, 0x2, 0xb29, 0xb2f, 
       0x3, 0x2, 0x2, 0x2, 0xb2a, 0xb2c, 0x7, 0xae, 0x2, 0x2, 0xb2b, 0xb2a, 
       0x3, 0x2, 0x2, 0x2, 0xb2b, 0xb2c, 0x3, 0x2, 0x2, 0x2, 0xb2c, 0xb2d, 
       0x3, 0x2, 0x2, 0x2, 0xb2d, 0xb2f, 0x7, 0x3d, 0x2, 0x2, 0xb2e, 0xb17, 
       0x3, 0x2, 0x2, 0x2, 0xb2e, 0xb19, 0x3, 0x2, 0x2, 0x2, 0xb2e, 0xb1a, 
       0x3, 0x2, 0x2, 0x2, 0xb2e, 0xb1f, 0x3, 0x2, 0x2, 0x2, 0xb2e, 0xb22, 
       0x3, 0x2, 0x2, 0x2, 0xb2e, 0xb26, 0x3, 0x2, 0x2, 0x2, 0xb2e, 0xb2b, 
       0x3, 0x2, 0x2, 0x2, 0xb2f, 0x125, 0x3, 0x2, 0x2, 0x2, 0xb30, 0xb31, 
       0x7, 0xc8, 0x2, 0x2, 0xb31, 0xb35, 0x5, 0x156, 0xac, 0x2, 0xb32, 
       0xb33, 0x7, 0x12a, 0x2, 0x2, 0xb33, 0xb35, 0x5, 0x12c, 0x97, 0x2, 
       0xb34, 0xb30, 0x3, 0x2, 0x2, 0x2, 0xb34, 0xb32, 0x3, 0x2, 0x2, 0x2, 
       0xb35, 0x127, 0x3, 0x2, 0x2, 0x2, 0xb36, 0xb37, 0x7, 0x110, 0x2, 
       0x2, 0xb37, 0xb39, 0x7, 0x5, 0x2, 0x2, 0xb38, 0xb3a, 0x5, 0x12a, 
       0x96, 0x2, 0xb39, 0xb38, 0x3, 0x2, 0x2, 0x2, 0xb39, 0xb3a, 0x3, 0x2, 
       0x2, 0x2, 0xb3a, 0xb3b, 0x3, 0x2, 0x2, 0x2, 0xb3b, 0xb3c, 0x7, 0x6, 
       0x2, 0x2, 0xb3c, 0x129, 0x3, 0x2, 0x2, 0x2, 0xb3d, 0xb3f, 0x7, 0x13d, 
       0x2, 0x2, 0xb3e, 0xb3d, 0x3, 0x2, 0x2, 0x2, 0xb3e, 0xb3f, 0x3, 0x2, 
       0x2, 0x2, 0xb3f, 0xb40, 0x3, 0x2, 0x2, 0x2, 0xb40, 0xb41, 0x9, 0x9, 
       0x2, 0x2, 0xb41, 0xb56, 0x7, 0xd8, 0x2, 0x2, 0xb42, 0xb43, 0x5, 0x154, 
       0xab, 0x2, 0xb43, 0xb44, 0x7, 0xf6, 0x2, 0x2, 0xb44, 0xb56, 0x3, 
       0x2, 0x2, 0x2, 0xb45, 0xb46, 0x7, 0x47, 0x2, 0x2, 0xb46, 0xb47, 0x7, 
       0x14b, 0x2, 0x2, 0xb47, 0xb48, 0x7, 0xce, 0x2, 0x2, 0xb48, 0xb49, 
       0x7, 0xc7, 0x2, 0x2, 0xb49, 0xb52, 0x7, 0x14b, 0x2, 0x2, 0xb4a, 0xb50, 
       0x7, 0xc8, 0x2, 0x2, 0xb4b, 0xb51, 0x5, 0x19e, 0xd0, 0x2, 0xb4c, 
       0xb4d, 0x5, 0x198, 0xcd, 0x2, 0xb4d, 0xb4e, 0x7, 0x5, 0x2, 0x2, 0xb4e, 
       0xb4f, 0x7, 0x6, 0x2, 0x2, 0xb4f, 0xb51, 0x3, 0x2, 0x2, 0x2, 0xb50, 
       0xb4b, 0x3, 0x2, 0x2, 0x2, 0xb50, 0xb4c, 0x3, 0x2, 0x2, 0x2, 0xb51, 
       0xb53, 0x3, 0x2, 0x2, 0x2, 0xb52, 0xb4a, 0x3, 0x2, 0x2, 0x2, 0xb52, 
       0xb53, 0x3, 0x2, 0x2, 0x2, 0xb53, 0xb56, 0x3, 0x2, 0x2, 0x2, 0xb54, 
       0xb56, 0x5, 0x154, 0xab, 0x2, 0xb55, 0xb3e, 0x3, 0x2, 0x2, 0x2, 0xb55, 
       0xb42, 0x3, 0x2, 0x2, 0x2, 0xb55, 0xb45, 0x3, 0x2, 0x2, 0x2, 0xb55, 
       0xb54, 0x3, 0x2, 0x2, 0x2, 0xb56, 0x12b, 0x3, 0x2, 0x2, 0x2, 0xb57, 
       0xb58, 0x7, 0x5, 0x2, 0x2, 0xb58, 0xb59, 0x5, 0x12e, 0x98, 0x2, 0xb59, 
       0xb5a, 0x7, 0x6, 0x2, 0x2, 0xb5a, 0x12d, 0x3, 0x2, 0x2, 0x2, 0xb5b, 
       0xb60, 0x5, 0x19a, 0xce, 0x2, 0xb5c, 0xb5d, 0x7, 0x3, 0x2, 0x2, 0xb5d, 
       0xb5f, 0x5, 0x19a, 0xce, 0x2, 0xb5e, 0xb5c, 0x3, 0x2, 0x2, 0x2, 0xb5f, 
       0xb62, 0x3, 0x2, 0x2, 0x2, 0xb60, 0xb5e, 0x3, 0x2, 0x2, 0x2, 0xb60, 
       0xb61, 0x3, 0x2, 0x2, 0x2, 0xb61, 0x12f, 0x3, 0x2, 0x2, 0x2, 0xb62, 
       0xb60, 0x3, 0x2, 0x2, 0x2, 0xb63, 0xb64, 0x7, 0x5, 0x2, 0x2, 0xb64, 
       0xb69, 0x5, 0x132, 0x9a, 0x2, 0xb65, 0xb66, 0x7, 0x3, 0x2, 0x2, 0xb66, 
       0xb68, 0x5, 0x132, 0x9a, 0x2, 0xb67, 0xb65, 0x3, 0x2, 0x2, 0x2, 0xb68, 
       0xb6b, 0x3, 0x2, 0x2, 0x2, 0xb69, 0xb67, 0x3, 0x2, 0x2, 0x2, 0xb69, 
       0xb6a, 0x3, 0x2, 0x2, 0x2, 0xb6a, 0xb6c, 0x3, 0x2, 0x2, 0x2, 0xb6b, 
       0xb69, 0x3, 0x2, 0x2, 0x2, 0xb6c, 0xb6d, 0x7, 0x6, 0x2, 0x2, 0xb6d, 
       0x131, 0x3, 0x2, 0x2, 0x2, 0xb6e, 0xb70, 0x5, 0x19a, 0xce, 0x2, 0xb6f, 
       0xb71, 0x9, 0xc, 0x2, 0x2, 0xb70, 0xb6f, 0x3, 0x2, 0x2, 0x2, 0xb70, 
       0xb71, 0x3, 0x2, 0x2, 0x2, 0xb71, 0x133, 0x3, 0x2, 0x2, 0x2, 0xb72, 
       0xb73, 0x7, 0x5, 0x2, 0x2, 0xb73, 0xb78, 0x5, 0x136, 0x9c, 0x2, 0xb74, 
       0xb75, 0x7, 0x3, 0x2, 0x2, 0xb75, 0xb77, 0x5, 0x136, 0x9c, 0x2, 0xb76, 
       0xb74, 0x3, 0x2, 0x2, 0x2, 0xb77, 0xb7a, 0x3, 0x2, 0x2, 0x2, 0xb78, 
       0xb76, 0x3, 0x2, 0x2, 0x2, 0xb78, 0xb79, 0x3, 0x2, 0x2, 0x2, 0xb79, 
       0xb7b, 0x3, 0x2, 0x2, 0x2, 0xb7a, 0xb78, 0x3, 0x2, 0x2, 0x2, 0xb7b, 
       0xb7c, 0x7, 0x6, 0x2, 0x2, 0xb7c, 0x135, 0x3, 0x2, 0x2, 0x2, 0xb7d, 
       0xb7f, 0x5, 0x19e, 0xd0, 0x2, 0xb7e, 0xb80, 0x5, 0xb4, 0x5b, 0x2, 
       0xb7f, 0xb7e, 0x3, 0x2, 0x2, 0x2, 0xb7f, 0xb80, 0x3, 0x2, 0x2, 0x2, 
       0xb80, 0x137, 0x3, 0x2, 0x2, 0x2, 0xb81, 0xb83, 0x5, 0x144, 0xa3, 
       0x2, 0xb82, 0xb84, 0x5, 0x4c, 0x27, 0x2, 0xb83, 0xb82, 0x3, 0x2, 
       0x2, 0x2, 0xb83, 0xb84, 0x3, 0x2, 0x2, 0x2, 0xb84, 0xb86, 0x3, 0x2, 
       0x2, 0x2, 0xb85, 0xb87, 0x5, 0x128, 0x95, 0x2, 0xb86, 0xb85, 0x3, 
       0x2, 0x2, 0x2, 0xb86, 0xb87, 0x3, 0x2, 0x2, 0x2, 0xb87, 0xb88, 0x3, 
       0x2, 0x2, 0x2, 0xb88, 0xb89, 0x5, 0x13e, 0xa0, 0x2, 0xb89, 0xb9d, 
       0x3, 0x2, 0x2, 0x2, 0xb8a, 0xb8b, 0x7, 0x5, 0x2, 0x2, 0xb8b, 0xb8c, 
       0x5, 0xb6, 0x5c, 0x2, 0xb8c, 0xb8e, 0x7, 0x6, 0x2, 0x2, 0xb8d, 0xb8f, 
       0x5, 0x128, 0x95, 0x2, 0xb8e, 0xb8d, 0x3, 0x2, 0x2, 0x2, 0xb8e, 0xb8f, 
       0x3, 0x2, 0x2, 0x2, 0xb8f, 0xb90, 0x3, 0x2, 0x2, 0x2, 0xb90, 0xb91, 
       0x5, 0x13e, 0xa0, 0x2, 0xb91, 0xb9d, 0x3, 0x2, 0x2, 0x2, 0xb92, 0xb93, 
       0x7, 0x5, 0x2, 0x2, 0xb93, 0xb94, 0x5, 0x120, 0x91, 0x2, 0xb94, 0xb96, 
       0x7, 0x6, 0x2, 0x2, 0xb95, 0xb97, 0x5, 0x128, 0x95, 0x2, 0xb96, 0xb95, 
       0x3, 0x2, 0x2, 0x2, 0xb96, 0xb97, 0x3, 0x2, 0x2, 0x2, 0xb97, 0xb98, 
       0x3, 0x2, 0x2, 0x2, 0xb98, 0xb99, 0x5, 0x13e, 0xa0, 0x2, 0xb99, 0xb9d, 
       0x3, 0x2, 0x2, 0x2, 0xb9a, 0xb9d, 0x5, 0x13a, 0x9e, 0x2, 0xb9b, 0xb9d, 
       0x5, 0x13c, 0x9f, 0x2, 0xb9c, 0xb81, 0x3, 0x2, 0x2, 0x2, 0xb9c, 0xb8a, 
       0x3, 0x2, 0x2, 0x2, 0xb9c, 0xb92, 0x3, 0x2, 0x2, 0x2, 0xb9c, 0xb9a, 
       0x3, 0x2, 0x2, 0x2, 0xb9c, 0xb9b, 0x3, 0x2, 0x2, 0x2, 0xb9d, 0x139, 
       0x3, 0x2, 0x2, 0x2, 0xb9e, 0xb9f, 0x7, 0x12b, 0x2, 0x2, 0xb9f, 0xba4, 
       0x5, 0x154, 0xab, 0x2, 0xba0, 0xba1, 0x7, 0x3, 0x2, 0x2, 0xba1, 0xba3, 
       0x5, 0x154, 0xab, 0x2, 0xba2, 0xba0, 0x3, 0x2, 0x2, 0x2, 0xba3, 0xba6, 
       0x3, 0x2, 0x2, 0x2, 0xba4, 0xba2, 0x3, 0x2, 0x2, 0x2, 0xba4, 0xba5, 
       0x3, 0x2, 0x2, 0x2, 0xba5, 0xba7, 0x3, 0x2, 0x2, 0x2, 0xba6, 0xba4, 
       0x3, 0x2, 0x2, 0x2, 0xba7, 0xba8, 0x5, 0x13e, 0xa0, 0x2, 0xba8, 0x13b, 
       0x3, 0x2, 0x2, 0x2, 0xba9, 0xbaa, 0x5, 0x19a, 0xce, 0x2, 0xbaa, 0xbb3, 
       0x7, 0x5, 0x2, 0x2, 0xbab, 0xbb0, 0x5, 0x154, 0xab, 0x2, 0xbac, 0xbad, 
       0x7, 0x3, 0x2, 0x2, 0xbad, 0xbaf, 0x5, 0x154, 0xab, 0x2, 0xbae, 0xbac, 
       0x3, 0x2, 0x2, 0x2, 0xbaf, 0xbb2, 0x3, 0x2, 0x2, 0x2, 0xbb0, 0xbae, 
       0x3, 0x2, 0x2, 0x2, 0xbb0, 0xbb1, 0x3, 0x2, 0x2, 0x2, 0xbb1, 0xbb4, 
       0x3, 0x2, 0x2, 0x2, 0xbb2, 0xbb0, 0x3, 0x2, 0x2, 0x2, 0xbb3, 0xbab, 
       0x3, 0x2, 0x2, 0x2, 0xbb3, 0xbb4, 0x3, 0x2, 0x2, 0x2, 0xbb4, 0xbb5, 
       0x3, 0x2, 0x2, 0x2, 0xbb5, 0xbb6, 0x7, 0x6, 0x2, 0x2, 0xbb6, 0xbb7, 
       0x5, 0x13e, 0xa0, 0x2, 0xbb7, 0x13d, 0x3, 0x2, 0x2, 0x2, 0xbb8, 0xbba, 
       0x7, 0x41, 0x2, 0x2, 0xbb9, 0xbb8, 0x3, 0x2, 0x2, 0x2, 0xbb9, 0xbba, 
       0x3, 0x2, 0x2, 0x2, 0xbba, 0xbbb, 0x3, 0x2, 0x2, 0x2, 0xbbb, 0xbbd, 
       0x5, 0x1a0, 0xd1, 0x2, 0xbbc, 0xbbe, 0x5, 0x12c, 0x97, 0x2, 0xbbd, 
       0xbbc, 0x3, 0x2, 0x2, 0x2, 0xbbd, 0xbbe, 0x3, 0x2, 0x2, 0x2, 0xbbe, 
       0xbc0, 0x3, 0x2, 0x2, 0x2, 0xbbf, 0xbb9, 0x3, 0x2, 0x2, 0x2, 0xbbf, 
       0xbc0, 0x3, 0x2, 0x2, 0x2, 0xbc0, 0x13f, 0x3, 0x2, 0x2, 0x2, 0xbc1, 
       0xbc2, 0x7, 0xf5, 0x2, 0x2, 0xbc2, 0xbc3, 0x7, 0x8d, 0x2, 0x2, 0xbc3, 
       0xbc4, 0x7, 0xfc, 0x2, 0x2, 0xbc4, 0xbc8, 0x7, 0x147, 0x2, 0x2, 0xbc5, 
       0xbc6, 0x7, 0x131, 0x2, 0x2, 0xbc6, 0xbc7, 0x7, 0xfd, 0x2, 0x2, 0xbc7, 
       0xbc9, 0x5, 0xce, 0x68, 0x2, 0xbc8, 0xbc5, 0x3, 0x2, 0x2, 0x2, 0xbc8, 
       0xbc9, 0x3, 0x2, 0x2, 0x2, 0xbc9, 0xbf3, 0x3, 0x2, 0x2, 0x2, 0xbca, 
       0xbcb, 0x7, 0xf5, 0x2, 0x2, 0xbcb, 0xbcc, 0x7, 0x8d, 0x2, 0x2, 0xbcc, 
       0xbd6, 0x7, 0x6f, 0x2, 0x2, 0xbcd, 0xbce, 0x7, 0x86, 0x2, 0x2, 0xbce, 
       0xbcf, 0x7, 0x113, 0x2, 0x2, 0xbcf, 0xbd0, 0x7, 0x49, 0x2, 0x2, 0xbd0, 
       0xbd4, 0x7, 0x147, 0x2, 0x2, 0xbd1, 0xbd2, 0x7, 0x7b, 0x2, 0x2, 0xbd2, 
       0xbd3, 0x7, 0x49, 0x2, 0x2, 0xbd3, 0xbd5, 0x7, 0x147, 0x2, 0x2, 0xbd4, 
       0xbd1, 0x3, 0x2, 0x2, 0x2, 0xbd4, 0xbd5, 0x3, 0x2, 0x2, 0x2, 0xbd5, 
       0xbd7, 0x3, 0x2, 0x2, 0x2, 0xbd6, 0xbcd, 0x3, 0x2, 0x2, 0x2, 0xbd6, 
       0xbd7, 0x3, 0x2, 0x2, 0x2, 0xbd7, 0xbdd, 0x3, 0x2, 0x2, 0x2, 0xbd8, 
       0xbd9, 0x7, 0x55, 0x2, 0x2, 0xbd9, 0xbda, 0x7, 0xa7, 0x2, 0x2, 0xbda, 
       0xbdb, 0x7, 0x113, 0x2, 0x2, 0xbdb, 0xbdc, 0x7, 0x49, 0x2, 0x2, 0xbdc, 
       0xbde, 0x7, 0x147, 0x2, 0x2, 0xbdd, 0xbd8, 0x3, 0x2, 0x2, 0x2, 0xbdd, 
       0xbde, 0x3, 0x2, 0x2, 0x2, 0xbde, 0xbe4, 0x3, 0x2, 0x2, 0x2, 0xbdf, 
       0xbe0, 0x7, 0xba, 0x2, 0x2, 0xbe0, 0xbe1, 0x7, 0xa9, 0x2, 0x2, 0xbe1, 
       0xbe2, 0x7, 0x113, 0x2, 0x2, 0xbe2, 0xbe3, 0x7, 0x49, 0x2, 0x2, 0xbe3, 
       0xbe5, 0x7, 0x147, 0x2, 0x2, 0xbe4, 0xbdf, 0x3, 0x2, 0x2, 0x2, 0xbe4, 
       0xbe5, 0x3, 0x2, 0x2, 0x2, 0xbe5, 0xbea, 0x3, 0x2, 0x2, 0x2, 0xbe6, 
       0xbe7, 0x7, 0xb1, 0x2, 0x2, 0xbe7, 0xbe8, 0x7, 0x113, 0x2, 0x2, 0xbe8, 
       0xbe9, 0x7, 0x49, 0x2, 0x2, 0xbe9, 0xbeb, 0x7, 0x147, 0x2, 0x2, 0xbea, 
       0xbe6, 0x3, 0x2, 0x2, 0x2, 0xbea, 0xbeb, 0x3, 0x2, 0x2, 0x2, 0xbeb, 
       0xbf0, 0x3, 0x2, 0x2, 0x2, 0xbec, 0xbed, 0x7, 0xc5, 0x2, 0x2, 0xbed, 
       0xbee, 0x7, 0x6d, 0x2, 0x2, 0xbee, 0xbef, 0x7, 0x41, 0x2, 0x2, 0xbef, 
       0xbf1, 0x7, 0x147, 0x2, 0x2, 0xbf0, 0xbec, 0x3, 0x2, 0x2, 0x2, 0xbf0, 
       0xbf1, 0x3, 0x2, 0x2, 0x2, 0xbf1, 0xbf3, 0x3, 0x2, 0x2, 0x2, 0xbf2, 
       0xbc1, 0x3, 0x2, 0x2, 0x2, 0xbf2, 0xbca, 0x3, 0x2, 0x2, 0x2, 0xbf3, 
       0x141, 0x3, 0x2, 0x2, 0x2, 0xbf4, 0xbf9, 0x5, 0x144, 0xa3, 0x2, 0xbf5, 
       0xbf6, 0x7, 0x3, 0x2, 0x2, 0xbf6, 0xbf8, 0x5, 0x144, 0xa3, 0x2, 0xbf7, 
       0xbf5, 0x3, 0x2, 0x2, 0x2, 0xbf8, 0xbfb, 0x3, 0x2, 0x2, 0x2, 0xbf9, 
       0xbf7, 0x3, 0x2, 0x2, 0x2, 0xbf9, 0xbfa, 0x3, 0x2, 0x2, 0x2, 0xbfa, 
       0x143, 0x3, 0x2, 0x2, 0x2, 0xbfb, 0xbf9, 0x3, 0x2, 0x2, 0x2, 0xbfc, 
       0xc01, 0x5, 0x19a, 0xce, 0x2, 0xbfd, 0xbfe, 0x7, 0x9, 0x2, 0x2, 0xbfe, 
       0xc00, 0x5, 0x19a, 0xce, 0x2, 0xbff, 0xbfd, 0x3, 0x2, 0x2, 0x2, 0xc00, 
       0xc03, 0x3, 0x2, 0x2, 0x2, 0xc01, 0xbff, 0x3, 0x2, 0x2, 0x2, 0xc01, 
       0xc02, 0x3, 0x2, 0x2, 0x2, 0xc02, 0x145, 0x3, 0x2, 0x2, 0x2, 0xc03, 
       0xc01, 0x3, 0x2, 0x2, 0x2, 0xc04, 0xc05, 0x5, 0x19a, 0xce, 0x2, 0xc05, 
       0xc06, 0x7, 0x9, 0x2, 0x2, 0xc06, 0xc08, 0x3, 0x2, 0x2, 0x2, 0xc07, 
       0xc04, 0x3, 0x2, 0x2, 0x2, 0xc07, 0xc08, 0x3, 0x2, 0x2, 0x2, 0xc08, 
       0xc09, 0x3, 0x2, 0x2, 0x2, 0xc09, 0xc0a, 0x5, 0x19a, 0xce, 0x2, 0xc0a, 
       0x147, 0x3, 0x2, 0x2, 0x2, 0xc0b, 0xc0c, 0x5, 0x19a, 0xce, 0x2, 0xc0c, 
       0xc0d, 0x7, 0x9, 0x2, 0x2, 0xc0d, 0xc0f, 0x3, 0x2, 0x2, 0x2, 0xc0e, 
       0xc0b, 0x3, 0x2, 0x2, 0x2, 0xc0e, 0xc0f, 0x3, 0x2, 0x2, 0x2, 0xc0f, 
       0xc10, 0x3, 0x2, 0x2, 0x2, 0xc10, 0xc11, 0x5, 0x19a, 0xce, 0x2, 0xc11, 
       0x149, 0x3, 0x2, 0x2, 0x2, 0xc12, 0xc1a, 0x5, 0x154, 0xab, 0x2, 0xc13, 
       0xc15, 0x7, 0x41, 0x2, 0x2, 0xc14, 0xc13, 0x3, 0x2, 0x2, 0x2, 0xc14, 
       0xc15, 0x3, 0x2, 0x2, 0x2, 0xc15, 0xc18, 0x3, 0x2, 0x2, 0x2, 0xc16, 
       0xc19, 0x5, 0x19a, 0xce, 0x2, 0xc17, 0xc19, 0x5, 0x12c, 0x97, 0x2, 
       0xc18, 0xc16, 0x3, 0x2, 0x2, 0x2, 0xc18, 0xc17, 0x3, 0x2, 0x2, 0x2, 
       0xc19, 0xc1b, 0x3, 0x2, 0x2, 0x2, 0xc1a, 0xc14, 0x3, 0x2, 0x2, 0x2, 
       0xc1a, 0xc1b, 0x3, 0x2, 0x2, 0x2, 0xc1b, 0x14b, 0x3, 0x2, 0x2, 0x2, 
       0xc1c, 0xc21, 0x5, 0x14a, 0xa6, 0x2, 0xc1d, 0xc1e, 0x7, 0x3, 0x2, 
       0x2, 0xc1e, 0xc20, 0x5, 0x14a, 0xa6, 0x2, 0xc1f, 0xc1d, 0x3, 0x2, 
       0x2, 0x2, 0xc20, 0xc23, 0x3, 0x2, 0x2, 0x2, 0xc21, 0xc1f, 0x3, 0x2, 
       0x2, 0x2, 0xc21, 0xc22, 0x3, 0x2, 0x2, 0x2, 0xc22, 0x14d, 0x3, 0x2, 
       0x2, 0x2, 0xc23, 0xc21, 0x3, 0x2, 0x2, 0x2, 0xc24, 0xc25, 0x7, 0x5, 
       0x2, 0x2, 0xc25, 0xc2a, 0x5, 0x150, 0xa9, 0x2, 0xc26, 0xc27, 0x7, 
       0x3, 0x2, 0x2, 0xc27, 0xc29, 0x5, 0x150, 0xa9, 0x2, 0xc28, 0xc26, 
       0x3, 0x2, 0x2, 0x2, 0xc29, 0xc2c, 0x3, 0x2, 0x2, 0x2, 0xc2a, 0xc28, 
       0x3, 0x2, 0x2, 0x2, 0xc2a, 0xc2b, 0x3, 0x2, 0x2, 0x2, 0xc2b, 0xc2d, 
       0x3, 0x2, 0x2, 0x2, 0xc2c, 0xc2a, 0x3, 0x2, 0x2, 0x2, 0xc2d, 0xc2e, 
       0x7, 0x6, 0x2, 0x2, 0xc2e, 0x14f, 0x3, 0x2, 0x2, 0x2, 0xc2f, 0xc3d, 
       0x5, 0x198, 0xcd, 0x2, 0xc30, 0xc31, 0x5, 0x19e, 0xd0, 0x2, 0xc31, 
       0xc32, 0x7, 0x5, 0x2, 0x2, 0xc32, 0xc37, 0x5, 0x152, 0xaa, 0x2, 0xc33, 
       0xc34, 0x7, 0x3, 0x2, 0x2, 0xc34, 0xc36, 0x5, 0x152, 0xaa, 0x2, 0xc35, 
       0xc33, 0x3, 0x2, 0x2, 0x2, 0xc36, 0xc39, 0x3, 0x2, 0x2, 0x2, 0xc37, 
       0xc35, 0x3, 0x2, 0x2, 0x2, 0xc37, 0xc38, 0x3, 0x2, 0x2, 0x2, 0xc38, 
       0xc3a, 0x3, 0x2, 0x2, 0x2, 0xc39, 0xc37, 0x3, 0x2, 0x2, 0x2, 0xc3a, 
       0xc3b, 0x7, 0x6, 0x2, 0x2, 0xc3b, 0xc3d, 0x3, 0x2, 0x2, 0x2, 0xc3c, 
       0xc2f, 0x3, 0x2, 0x2, 0x2, 0xc3c, 0xc30, 0x3, 0x2, 0x2, 0x2, 0xc3d, 
       0x151, 0x3, 0x2, 0x2, 0x2, 0xc3e, 0xc41, 0x5, 0x198, 0xcd, 0x2, 0xc3f, 
       0xc41, 0x5, 0x15e, 0xb0, 0x2, 0xc40, 0xc3e, 0x3, 0x2, 0x2, 0x2, 0xc40, 
       0xc3f, 0x3, 0x2, 0x2, 0x2, 0xc41, 0x153, 0x3, 0x2, 0x2, 0x2, 0xc42, 
       0xc43, 0x5, 0x156, 0xac, 0x2, 0xc43, 0x155, 0x3, 0x2, 0x2, 0x2, 0xc44, 
       0xc45, 0x8, 0xac, 0x1, 0x2, 0xc45, 0xc46, 0x7, 0xc4, 0x2, 0x2, 0xc46, 
       0xc51, 0x5, 0x156, 0xac, 0x7, 0xc47, 0xc48, 0x7, 0x7e, 0x2, 0x2, 
       0xc48, 0xc49, 0x7, 0x5, 0x2, 0x2, 0xc49, 0xc4a, 0x5, 0xb6, 0x5c, 
       0x2, 0xc4a, 0xc4b, 0x7, 0x6, 0x2, 0x2, 0xc4b, 0xc51, 0x3, 0x2, 0x2, 
       0x2, 0xc4c, 0xc4e, 0x5, 0x15a, 0xae, 0x2, 0xc4d, 0xc4f, 0x5, 0x158, 
       0xad, 0x2, 0xc4e, 0xc4d, 0x3, 0x2, 0x2, 0x2, 0xc4e, 0xc4f, 0x3, 0x2, 
       0x2, 0x2, 0xc4f, 0xc51, 0x3, 0x2, 0x2, 0x2, 0xc50, 0xc44, 0x3, 0x2, 
       0x2, 0x2, 0xc50, 0xc47, 0x3, 0x2, 0x2, 0x2, 0xc50, 0xc4c, 0x3, 0x2, 
       0x2, 0x2, 0xc51, 0xc5a, 0x3, 0x2, 0x2, 0x2, 0xc52, 0xc53, 0xc, 0x4, 
       0x2, 0x2, 0xc53, 0xc54, 0x7, 0x3c, 0x2, 0x2, 0xc54, 0xc59, 0x5, 0x156, 
       0xac, 0x5, 0xc55, 0xc56, 0xc, 0x3, 0x2, 0x2, 0xc56, 0xc57, 0x7, 0xcc, 
       0x2, 0x2, 0xc57, 0xc59, 0x5, 0x156, 0xac, 0x4, 0xc58, 0xc52, 0x3, 
       0x2, 0x2, 0x2, 0xc58, 0xc55, 0x3, 0x2, 0x2, 0x2, 0xc59, 0xc5c, 0x3, 
       0x2, 0x2, 0x2, 0xc5a, 0xc58, 0x3, 0x2, 0x2, 0x2, 0xc5a, 0xc5b, 0x3, 
       0x2, 0x2, 0x2, 0xc5b, 0x157, 0x3, 0x2, 0x2, 0x2, 0xc5c, 0xc5a, 0x3, 
       0x2, 0x2, 0x2, 0xc5d, 0xc5f, 0x7, 0xc4, 0x2, 0x2, 0xc5e, 0xc5d, 0x3, 
       0x2, 0x2, 0x2, 0xc5e, 0xc5f, 0x3, 0x2, 0x2, 0x2, 0xc5f, 0xc60, 0x3, 
       0x2, 0x2, 0x2, 0xc60, 0xc61, 0x7, 0x45, 0x2, 0x2, 0xc61, 0xc62, 0x5, 
       0x15a, 0xae, 0x2, 0xc62, 0xc63, 0x7, 0x3c, 0x2, 0x2, 0xc63, 0xc64, 
       0x5, 0x15a, 0xae, 0x2, 0xc64, 0xcb0, 0x3, 0x2, 0x2, 0x2, 0xc65, 0xc67, 
       0x7, 0xc4, 0x2, 0x2, 0xc66, 0xc65, 0x3, 0x2, 0x2, 0x2, 0xc66, 0xc67, 
       0x3, 0x2, 0x2, 0x2, 0xc67, 0xc68, 0x3, 0x2, 0x2, 0x2, 0xc68, 0xc69, 
       0x7, 0x9c, 0x2, 0x2, 0xc69, 0xc6a, 0x7, 0x5, 0x2, 0x2, 0xc6a, 0xc6f, 
       0x5, 0x154, 0xab, 0x2, 0xc6b, 0xc6c, 0x7, 0x3, 0x2, 0x2, 0xc6c, 0xc6e, 
       0x5, 0x154, 0xab, 0x2, 0xc6d, 0xc6b, 0x3, 0x2, 0x2, 0x2, 0xc6e, 0xc71, 
       0x3, 0x2, 0x2, 0x2, 0xc6f, 0xc6d, 0x3, 0x2, 0x2, 0x2, 0xc6f, 0xc70, 
       0x3, 0x2, 0x2, 0x2, 0xc70, 0xc72, 0x3, 0x2, 0x2, 0x2, 0xc71, 0xc6f, 
       0x3, 0x2, 0x2, 0x2, 0xc72, 0xc73, 0x7, 0x6, 0x2, 0x2, 0xc73, 0xcb0, 
       0x3, 0x2, 0x2, 0x2, 0xc74, 0xc76, 0x7, 0xc4, 0x2, 0x2, 0xc75, 0xc74, 
       0x3, 0x2, 0x2, 0x2, 0xc75, 0xc76, 0x3, 0x2, 0x2, 0x2, 0xc76, 0xc77, 
       0x3, 0x2, 0x2, 0x2, 0xc77, 0xc78, 0x7, 0x9c, 0x2, 0x2, 0xc78, 0xc79, 
       0x7, 0x5, 0x2, 0x2, 0xc79, 0xc7a, 0x5, 0xb6, 0x5c, 0x2, 0xc7a, 0xc7b, 
       0x7, 0x6, 0x2, 0x2, 0xc7b, 0xcb0, 0x3, 0x2, 0x2, 0x2, 0xc7c, 0xc7e, 
       0x7, 0xc4, 0x2, 0x2, 0xc7d, 0xc7c, 0x3, 0x2, 0x2, 0x2, 0xc7d, 0xc7e, 
       0x3, 0x2, 0x2, 0x2, 0xc7e, 0xc7f, 0x3, 0x2, 0x2, 0x2, 0xc7f, 0xc80, 
       0x7, 0xf0, 0x2, 0x2, 0xc80, 0xcb0, 0x5, 0x15a, 0xae, 0x2, 0xc81, 
       0xc83, 0x7, 0xc4, 0x2, 0x2, 0xc82, 0xc81, 0x3, 0x2, 0x2, 0x2, 0xc82, 
       0xc83, 0x3, 0x2, 0x2, 0x2, 0xc83, 0xc84, 0x3, 0x2, 0x2, 0x2, 0xc84, 
       0xc85, 0x7, 0xaf, 0x2, 0x2, 0xc85, 0xc93, 0x9, 0x20, 0x2, 0x2, 0xc86, 
       0xc87, 0x7, 0x5, 0x2, 0x2, 0xc87, 0xc94, 0x7, 0x6, 0x2, 0x2, 0xc88, 
       0xc89, 0x7, 0x5, 0x2, 0x2, 0xc89, 0xc8e, 0x5, 0x154, 0xab, 0x2, 0xc8a, 
       0xc8b, 0x7, 0x3, 0x2, 0x2, 0xc8b, 0xc8d, 0x5, 0x154, 0xab, 0x2, 0xc8c, 
       0xc8a, 0x3, 0x2, 0x2, 0x2, 0xc8d, 0xc90, 0x3, 0x2, 0x2, 0x2, 0xc8e, 
       0xc8c, 0x3, 0x2, 0x2, 0x2, 0xc8e, 0xc8f, 0x3, 0x2, 0x2, 0x2, 0xc8f, 
       0xc91, 0x3, 0x2, 0x2, 0x2, 0xc90, 0xc8e, 0x3, 0x2, 0x2, 0x2, 0xc91, 
       0xc92, 0x7, 0x6, 0x2, 0x2, 0xc92, 0xc94, 0x3, 0x2, 0x2, 0x2, 0xc93, 
       0xc86, 0x3, 0x2, 0x2, 0x2, 0xc93, 0xc88, 0x3, 0x2, 0x2, 0x2, 0xc94, 
       0xcb0, 0x3, 0x2, 0x2, 0x2, 0xc95, 0xc97, 0x7, 0xc4, 0x2, 0x2, 0xc96, 
       0xc95, 0x3, 0x2, 0x2, 0x2, 0xc96, 0xc97, 0x3, 0x2, 0x2, 0x2, 0xc97, 
       0xc98, 0x3, 0x2, 0x2, 0x2, 0xc98, 0xc99, 0x7, 0xaf, 0x2, 0x2, 0xc99, 
       0xc9c, 0x5, 0x15a, 0xae, 0x2, 0xc9a, 0xc9b, 0x7, 0x7a, 0x2, 0x2, 
       0xc9b, 0xc9d, 0x7, 0x147, 0x2, 0x2, 0xc9c, 0xc9a, 0x3, 0x2, 0x2, 
       0x2, 0xc9c, 0xc9d, 0x3, 0x2, 0x2, 0x2, 0xc9d, 0xcb0, 0x3, 0x2, 0x2, 
       0x2, 0xc9e, 0xca0, 0x7, 0xa6, 0x2, 0x2, 0xc9f, 0xca1, 0x7, 0xc4, 
       0x2, 0x2, 0xca0, 0xc9f, 0x3, 0x2, 0x2, 0x2, 0xca0, 0xca1, 0x3, 0x2, 
       0x2, 0x2, 0xca1, 0xca2, 0x3, 0x2, 0x2, 0x2, 0xca2, 0xcb0, 0x7, 0xc5, 
       0x2, 0x2, 0xca3, 0xca5, 0x7, 0xa6, 0x2, 0x2, 0xca4, 0xca6, 0x7, 0xc4, 
       0x2, 0x2, 0xca5, 0xca4, 0x3, 0x2, 0x2, 0x2, 0xca5, 0xca6, 0x3, 0x2, 
       0x2, 0x2, 0xca6, 0xca7, 0x3, 0x2, 0x2, 0x2, 0xca7, 0xcb0, 0x9, 0x21, 
       0x2, 0x2, 0xca8, 0xcaa, 0x7, 0xa6, 0x2, 0x2, 0xca9, 0xcab, 0x7, 0xc4, 
       0x2, 0x2, 0xcaa, 0xca9, 0x3, 0x2, 0x2, 0x2, 0xcaa, 0xcab, 0x3, 0x2, 
       0x2, 0x2, 0xcab, 0xcac, 0x3, 0x2, 0x2, 0x2, 0xcac, 0xcad, 0x7, 0x75, 
       0x2, 0x2, 0xcad, 0xcae, 0x7, 0x8f, 0x2, 0x2, 0xcae, 0xcb0, 0x5, 0x15a, 
       0xae, 0x2, 0xcaf, 0xc5e, 0x3, 0x2, 0x2, 0x2, 0xcaf, 0xc66, 0x3, 0x2, 
       0x2, 0x2, 0xcaf, 0xc75, 0x3, 0x2, 0x2, 0x2, 0xcaf, 0xc7d, 0x3, 0x2, 
       0x2, 0x2, 0xcaf, 0xc82, 0x3, 0x2, 0x2, 0x2, 0xcaf, 0xc96, 0x3, 0x2, 
       0x2, 0x2, 0xcaf, 0xc9e, 0x3, 0x2, 0x2, 0x2, 0xcaf, 0xca3, 0x3, 0x2, 
       0x2, 0x2, 0xcaf, 0xca8, 0x3, 0x2, 0x2, 0x2, 0xcb0, 0x159, 0x3, 0x2, 
       0x2, 0x2, 0xcb1, 0xcb2, 0x8, 0xae, 0x1, 0x2, 0xcb2, 0xcb6, 0x5, 0x15c, 
       0xaf, 0x2, 0xcb3, 0xcb4, 0x9, 0x22, 0x2, 0x2, 0xcb4, 0xcb6, 0x5, 
       0x15a, 0xae, 0x9, 0xcb5, 0xcb1, 0x3, 0x2, 0x2, 0x2, 0xcb5, 0xcb3, 
       0x3, 0x2, 0x2, 0x2, 0xcb6, 0xccc, 0x3, 0x2, 0x2, 0x2, 0xcb7, 0xcb8, 
       0xc, 0x8, 0x2, 0x2, 0xcb8, 0xcb9, 0x9, 0x23, 0x2, 0x2, 0xcb9, 0xccb, 
       0x5, 0x15a, 0xae, 0x9, 0xcba, 0xcbb, 0xc, 0x7, 0x2, 0x2, 0xcbb, 0xcbc, 
       0x9, 0x24, 0x2, 0x2, 0xcbc, 0xccb, 0x5, 0x15a, 0xae, 0x8, 0xcbd, 
       0xcbe, 0xc, 0x6, 0x2, 0x2, 0xcbe, 0xcbf, 0x7, 0x143, 0x2, 0x2, 0xcbf, 
       0xccb, 0x5, 0x15a, 0xae, 0x7, 0xcc0, 0xcc1, 0xc, 0x5, 0x2, 0x2, 0xcc1, 
       0xcc2, 0x7, 0x146, 0x2, 0x2, 0xcc2, 0xccb, 0x5, 0x15a, 0xae, 0x6, 
       0xcc3, 0xcc4, 0xc, 0x4, 0x2, 0x2, 0xcc4, 0xcc5, 0x7, 0x144, 0x2, 
       0x2, 0xcc5, 0xccb, 0x5, 0x15a, 0xae, 0x5, 0xcc6, 0xcc7, 0xc, 0x3, 
       0x2, 0x2, 0xcc7, 0xcc8, 0x5, 0x160, 0xb1, 0x2, 0xcc8, 0xcc9, 0x5, 
       0x15a, 0xae, 0x4, 0xcc9, 0xccb, 0x3, 0x2, 0x2, 0x2, 0xcca, 0xcb7, 
       0x3, 0x2, 0x2, 0x2, 0xcca, 0xcba, 0x3, 0x2, 0x2, 0x2, 0xcca, 0xcbd, 
       0x3, 0x2, 0x2, 0x2, 0xcca, 0xcc0, 0x3, 0x2, 0x2, 0x2, 0xcca, 0xcc3, 
       0x3, 0x2, 0x2, 0x2, 0xcca, 0xcc6, 0x3, 0x2, 0x2, 0x2, 0xccb, 0xcce, 
       0x3, 0x2, 0x2, 0x2, 0xccc, 0xcca, 0x3, 0x2, 0x2, 0x2, 0xccc, 0xccd, 
       0x3, 0x2, 0x2, 0x2, 0xccd, 0x15b, 0x3, 0x2, 0x2, 0x2, 0xcce, 0xccc, 
       0x3, 0x2, 0x2, 0x2, 0xccf, 0xcd0, 0x8, 0xaf, 0x1, 0x2, 0xcd0, 0xd88, 
       0x9, 0x25, 0x2, 0x2, 0xcd1, 0xcd3, 0x7, 0x4c, 0x2, 0x2, 0xcd2, 0xcd4, 
       0x5, 0x188, 0xc5, 0x2, 0xcd3, 0xcd2, 0x3, 0x2, 0x2, 0x2, 0xcd4, 0xcd5, 
       0x3, 0x2, 0x2, 0x2, 0xcd5, 0xcd3, 0x3, 0x2, 0x2, 0x2, 0xcd5, 0xcd6, 
       0x3, 0x2, 0x2, 0x2, 0xcd6, 0xcd9, 0x3, 0x2, 0x2, 0x2, 0xcd7, 0xcd8, 
       0x7, 0x78, 0x2, 0x2, 0xcd8, 0xcda, 0x5, 0x154, 0xab, 0x2, 0xcd9, 
       0xcd7, 0x3, 0x2, 0x2, 0x2, 0xcd9, 0xcda, 0x3, 0x2, 0x2, 0x2, 0xcda, 
       0xcdb, 0x3, 0x2, 0x2, 0x2, 0xcdb, 0xcdc, 0x7, 0x79, 0x2, 0x2, 0xcdc, 
       0xd88, 0x3, 0x2, 0x2, 0x2, 0xcdd, 0xcde, 0x7, 0x4c, 0x2, 0x2, 0xcde, 
       0xce0, 0x5, 0x154, 0xab, 0x2, 0xcdf, 0xce1, 0x5, 0x188, 0xc5, 0x2, 
       0xce0, 0xcdf, 0x3, 0x2, 0x2, 0x2, 0xce1, 0xce2, 0x3, 0x2, 0x2, 0x2, 
       0xce2, 0xce0, 0x3, 0x2, 0x2, 0x2, 0xce2, 0xce3, 0x3, 0x2, 0x2, 0x2, 
       0xce3, 0xce6, 0x3, 0x2, 0x2, 0x2, 0xce4, 0xce5, 0x7, 0x78, 0x2, 0x2, 
       0xce5, 0xce7, 0x5, 0x154, 0xab, 0x2, 0xce6, 0xce4, 0x3, 0x2, 0x2, 
       0x2, 0xce6, 0xce7, 0x3, 0x2, 0x2, 0x2, 0xce7, 0xce8, 0x3, 0x2, 0x2, 
       0x2, 0xce8, 0xce9, 0x7, 0x79, 0x2, 0x2, 0xce9, 0xd88, 0x3, 0x2, 0x2, 
       0x2, 0xcea, 0xceb, 0x7, 0x4d, 0x2, 0x2, 0xceb, 0xcec, 0x7, 0x5, 0x2, 
       0x2, 0xcec, 0xced, 0x5, 0x154, 0xab, 0x2, 0xced, 0xcee, 0x7, 0x41, 
       0x2, 0x2, 0xcee, 0xcef, 0x5, 0x17a, 0xbe, 0x2, 0xcef, 0xcf0, 0x7, 
       0x6, 0x2, 0x2, 0xcf0, 0xd88, 0x3, 0x2, 0x2, 0x2, 0xcf1, 0xcf2, 0x7, 
       0x10b, 0x2, 0x2, 0xcf2, 0xcfb, 0x7, 0x5, 0x2, 0x2, 0xcf3, 0xcf8, 
       0x5, 0x14a, 0xa6, 0x2, 0xcf4, 0xcf5, 0x7, 0x3, 0x2, 0x2, 0xcf5, 0xcf7, 
       0x5, 0x14a, 0xa6, 0x2, 0xcf6, 0xcf4, 0x3, 0x2, 0x2, 0x2, 0xcf7, 0xcfa, 
       0x3, 0x2, 0x2, 0x2, 0xcf8, 0xcf6, 0x3, 0x2, 0x2, 0x2, 0xcf8, 0xcf9, 
       0x3, 0x2, 0x2, 0x2, 0xcf9, 0xcfc, 0x3, 0x2, 0x2, 0x2, 0xcfa, 0xcf8, 
       0x3, 0x2, 0x2, 0x2, 0xcfb, 0xcf3, 0x3, 0x2, 0x2, 0x2, 0xcfb, 0xcfc, 
       0x3, 0x2, 0x2, 0x2, 0xcfc, 0xcfd, 0x3, 0x2, 0x2, 0x2, 0xcfd, 0xd88, 
       0x7, 0x6, 0x2, 0x2, 0xcfe, 0xcff, 0x7, 0x89, 0x2, 0x2, 0xcff, 0xd00, 
       0x7, 0x5, 0x2, 0x2, 0xd00, 0xd03, 0x5, 0x154, 0xab, 0x2, 0xd01, 0xd02, 
       0x7, 0x9a, 0x2, 0x2, 0xd02, 0xd04, 0x7, 0xc6, 0x2, 0x2, 0xd03, 0xd01, 
       0x3, 0x2, 0x2, 0x2, 0xd03, 0xd04, 0x3, 0x2, 0x2, 0x2, 0xd04, 0xd05, 
       0x3, 0x2, 0x2, 0x2, 0xd05, 0xd06, 0x7, 0x6, 0x2, 0x2, 0xd06, 0xd88, 
       0x3, 0x2, 0x2, 0x2, 0xd07, 0xd08, 0x7, 0xaa, 0x2, 0x2, 0xd08, 0xd09, 
       0x7, 0x5, 0x2, 0x2, 0xd09, 0xd0c, 0x5, 0x154, 0xab, 0x2, 0xd0a, 0xd0b, 
       0x7, 0x9a, 0x2, 0x2, 0xd0b, 0xd0d, 0x7, 0xc6, 0x2, 0x2, 0xd0c, 0xd0a, 
       0x3, 0x2, 0x2, 0x2, 0xd0c, 0xd0d, 0x3, 0x2, 0x2, 0x2, 0xd0d, 0xd0e, 
       0x3, 0x2, 0x2, 0x2, 0xd0e, 0xd0f, 0x7, 0x6, 0x2, 0x2, 0xd0f, 0xd88, 
       0x3, 0x2, 0x2, 0x2, 0xd10, 0xd11, 0x7, 0xdb, 0x2, 0x2, 0xd11, 0xd12, 
       0x7, 0x5, 0x2, 0x2, 0xd12, 0xd13, 0x5, 0x15a, 0xae, 0x2, 0xd13, 0xd14, 
       0x7, 0x9c, 0x2, 0x2, 0xd14, 0xd15, 0x5, 0x15a, 0xae, 0x2, 0xd15, 
       0xd16, 0x7, 0x6, 0x2, 0x2, 0xd16, 0xd88, 0x3, 0x2, 0x2, 0x2, 0xd17, 
       0xd88, 0x5, 0x15e, 0xb0, 0x2, 0xd18, 0xd88, 0x7, 0x13e, 0x2, 0x2, 
       0xd19, 0xd1a, 0x5, 0x198, 0xcd, 0x2, 0xd1a, 0xd1b, 0x7, 0x9, 0x2, 
       0x2, 0xd1b, 0xd1c, 0x7, 0x13e, 0x2, 0x2, 0xd1c, 0xd88, 0x3, 0x2, 
       0x2, 0x2, 0xd1d, 0xd1e, 0x7, 0x5, 0x2, 0x2, 0xd1e, 0xd21, 0x5, 0x14a, 
       0xa6, 0x2, 0xd1f, 0xd20, 0x7, 0x3, 0x2, 0x2, 0xd20, 0xd22, 0x5, 0x14a, 
       0xa6, 0x2, 0xd21, 0xd1f, 0x3, 0x2, 0x2, 0x2, 0xd22, 0xd23, 0x3, 0x2, 
       0x2, 0x2, 0xd23, 0xd21, 0x3, 0x2, 0x2, 0x2, 0xd23, 0xd24, 0x3, 0x2, 
       0x2, 0x2, 0xd24, 0xd25, 0x3, 0x2, 0x2, 0x2, 0xd25, 0xd26, 0x7, 0x6, 
       0x2, 0x2, 0xd26, 0xd88, 0x3, 0x2, 0x2, 0x2, 0xd27, 0xd28, 0x7, 0x5, 
       0x2, 0x2, 0xd28, 0xd29, 0x5, 0xb6, 0x5c, 0x2, 0xd29, 0xd2a, 0x7, 
       0x6, 0x2, 0x2, 0xd2a, 0xd88, 0x3, 0x2, 0x2, 0x2, 0xd2b, 0xd2c, 0x5, 
       0x196, 0xcc, 0x2, 0xd2c, 0xd38, 0x7, 0x5, 0x2, 0x2, 0xd2d, 0xd2f, 
       0x5, 0x11e, 0x90, 0x2, 0xd2e, 0xd2d, 0x3, 0x2, 0x2, 0x2, 0xd2e, 0xd2f, 
       0x3, 0x2, 0x2, 0x2, 0xd2f, 0xd30, 0x3, 0x2, 0x2, 0x2, 0xd30, 0xd35, 
       0x5, 0x154, 0xab, 0x2, 0xd31, 0xd32, 0x7, 0x3, 0x2, 0x2, 0xd32, 0xd34, 
       0x5, 0x154, 0xab, 0x2, 0xd33, 0xd31, 0x3, 0x2, 0x2, 0x2, 0xd34, 0xd37, 
       0x3, 0x2, 0x2, 0x2, 0xd35, 0xd33, 0x3, 0x2, 0x2, 0x2, 0xd35, 0xd36, 
       0x3, 0x2, 0x2, 0x2, 0xd36, 0xd39, 0x3, 0x2, 0x2, 0x2, 0xd37, 0xd35, 
       0x3, 0x2, 0x2, 0x2, 0xd38, 0xd2e, 0x3, 0x2, 0x2, 0x2, 0xd38, 0xd39, 
       0x3, 0x2, 0x2, 0x2, 0xd39, 0xd3a, 0x3, 0x2, 0x2, 0x2, 0xd3a, 0xd41, 
       0x7, 0x6, 0x2, 0x2, 0xd3b, 0xd3c, 0x7, 0x87, 0x2, 0x2, 0xd3c, 0xd3d, 
       0x7, 0x5, 0x2, 0x2, 0xd3d, 0xd3e, 0x7, 0x12f, 0x2, 0x2, 0xd3e, 0xd3f, 
       0x5, 0x156, 0xac, 0x2, 0xd3f, 0xd40, 0x7, 0x6, 0x2, 0x2, 0xd40, 0xd42, 
       0x3, 0x2, 0x2, 0x2, 0xd41, 0xd3b, 0x3, 0x2, 0x2, 0x2, 0xd41, 0xd42, 
       0x3, 0x2, 0x2, 0x2, 0xd42, 0xd45, 0x3, 0x2, 0x2, 0x2, 0xd43, 0xd44, 
       0x7, 0xd1, 0x2, 0x2, 0xd44, 0xd46, 0x5, 0x18e, 0xc8, 0x2, 0xd45, 
       0xd43, 0x3, 0x2, 0x2, 0x2, 0xd45, 0xd46, 0x3, 0x2, 0x2, 0x2, 0xd46, 
       0xd88, 0x3, 0x2, 0x2, 0x2, 0xd47, 0xd48, 0x5, 0x19e, 0xd0, 0x2, 0xd48, 
       0xd49, 0x7, 0x12, 0x2, 0x2, 0xd49, 0xd4a, 0x5, 0x154, 0xab, 0x2, 
       0xd4a, 0xd88, 0x3, 0x2, 0x2, 0x2, 0xd4b, 0xd4c, 0x7, 0x5, 0x2, 0x2, 
       0xd4c, 0xd4f, 0x5, 0x19e, 0xd0, 0x2, 0xd4d, 0xd4e, 0x7, 0x3, 0x2, 
       0x2, 0xd4e, 0xd50, 0x5, 0x19e, 0xd0, 0x2, 0xd4f, 0xd4d, 0x3, 0x2, 
       0x2, 0x2, 0xd50, 0xd51, 0x3, 0x2, 0x2, 0x2, 0xd51, 0xd4f, 0x3, 0x2, 
       0x2, 0x2, 0xd51, 0xd52, 0x3, 0x2, 0x2, 0x2, 0xd52, 0xd53, 0x3, 0x2, 
       0x2, 0x2, 0xd53, 0xd54, 0x7, 0x6, 0x2, 0x2, 0xd54, 0xd55, 0x7, 0x12, 
       0x2, 0x2, 0xd55, 0xd56, 0x5, 0x154, 0xab, 0x2, 0xd56, 0xd88, 0x3, 
       0x2, 0x2, 0x2, 0xd57, 0xd88, 0x5, 0x19e, 0xd0, 0x2, 0xd58, 0xd59, 
       0x7, 0x5, 0x2, 0x2, 0xd59, 0xd5a, 0x5, 0x154, 0xab, 0x2, 0xd5a, 0xd5b, 
       0x7, 0x6, 0x2, 0x2, 0xd5b, 0xd88, 0x3, 0x2, 0x2, 0x2, 0xd5c, 0xd5d, 
       0x7, 0x83, 0x2, 0x2, 0xd5d, 0xd5e, 0x7, 0x5, 0x2, 0x2, 0xd5e, 0xd5f, 
       0x5, 0x19e, 0xd0, 0x2, 0xd5f, 0xd60, 0x7, 0x8f, 0x2, 0x2, 0xd60, 
       0xd61, 0x5, 0x15a, 0xae, 0x2, 0xd61, 0xd62, 0x7, 0x6, 0x2, 0x2, 0xd62, 
       0xd88, 0x3, 0x2, 0x2, 0x2, 0xd63, 0xd64, 0x9, 0x26, 0x2, 0x2, 0xd64, 
       0xd65, 0x7, 0x5, 0x2, 0x2, 0xd65, 0xd66, 0x5, 0x15a, 0xae, 0x2, 0xd66, 
       0xd67, 0x9, 0x27, 0x2, 0x2, 0xd67, 0xd6a, 0x5, 0x15a, 0xae, 0x2, 
       0xd68, 0xd69, 0x9, 0x28, 0x2, 0x2, 0xd69, 0xd6b, 0x5, 0x15a, 0xae, 
       0x2, 0xd6a, 0xd68, 0x3, 0x2, 0x2, 0x2, 0xd6a, 0xd6b, 0x3, 0x2, 0x2, 
       0x2, 0xd6b, 0xd6c, 0x3, 0x2, 0x2, 0x2, 0xd6c, 0xd6d, 0x7, 0x6, 0x2, 
       0x2, 0xd6d, 0xd88, 0x3, 0x2, 0x2, 0x2, 0xd6e, 0xd6f, 0x7, 0x11b, 
       0x2, 0x2, 0xd6f, 0xd71, 0x7, 0x5, 0x2, 0x2, 0xd70, 0xd72, 0x9, 0x29, 
       0x2, 0x2, 0xd71, 0xd70, 0x3, 0x2, 0x2, 0x2, 0xd71, 0xd72, 0x3, 0x2, 
       0x2, 0x2, 0xd72, 0xd74, 0x3, 0x2, 0x2, 0x2, 0xd73, 0xd75, 0x5, 0x15a, 
       0xae, 0x2, 0xd74, 0xd73, 0x3, 0x2, 0x2, 0x2, 0xd74, 0xd75, 0x3, 0x2, 
       0x2, 0x2, 0xd75, 0xd76, 0x3, 0x2, 0x2, 0x2, 0xd76, 0xd77, 0x7, 0x8f, 
       0x2, 0x2, 0xd77, 0xd78, 0x5, 0x15a, 0xae, 0x2, 0xd78, 0xd79, 0x7, 
       0x6, 0x2, 0x2, 0xd79, 0xd88, 0x3, 0x2, 0x2, 0x2, 0xd7a, 0xd7b, 0x7, 
       0xd3, 0x2, 0x2, 0xd7b, 0xd7c, 0x7, 0x5, 0x2, 0x2, 0xd7c, 0xd7d, 0x5, 
       0x15a, 0xae, 0x2, 0xd7d, 0xd7e, 0x7, 0xda, 0x2, 0x2, 0xd7e, 0xd7f, 
       0x5, 0x15a, 0xae, 0x2, 0xd7f, 0xd80, 0x7, 0x8f, 0x2, 0x2, 0xd80, 
       0xd83, 0x5, 0x15a, 0xae, 0x2, 0xd81, 0xd82, 0x7, 0x8b, 0x2, 0x2, 
       0xd82, 0xd84, 0x5, 0x15a, 0xae, 0x2, 0xd83, 0xd81, 0x3, 0x2, 0x2, 
       0x2, 0xd83, 0xd84, 0x3, 0x2, 0x2, 0x2, 0xd84, 0xd85, 0x3, 0x2, 0x2, 
       0x2, 0xd85, 0xd86, 0x7, 0x6, 0x2, 0x2, 0xd86, 0xd88, 0x3, 0x2, 0x2, 
       0x2, 0xd87, 0xccf, 0x3, 0x2, 0x2, 0x2, 0xd87, 0xcd1, 0x3, 0x2, 0x2, 
       0x2, 0xd87, 0xcdd, 0x3, 0x2, 0x2, 0x2, 0xd87, 0xcea, 0x3, 0x2, 0x2, 
       0x2, 0xd87, 0xcf1, 0x3, 0x2, 0x2, 0x2, 0xd87, 0xcfe, 0x3, 0x2, 0x2, 
       0x2, 0xd87, 0xd07, 0x3, 0x2, 0x2, 0x2, 0xd87, 0xd10, 0x3, 0x2, 0x2, 
       0x2, 0xd87, 0xd17, 0x3, 0x2, 0x2, 0x2, 0xd87, 0xd18, 0x3, 0x2, 0x2, 
       0x2, 0xd87, 0xd19, 0x3, 0x2, 0x2, 0x2, 0xd87, 0xd1d, 0x3, 0x2, 0x2, 
       0x2, 0xd87, 0xd27, 0x3, 0x2, 0x2, 0x2, 0xd87, 0xd2b, 0x3, 0x2, 0x2, 
       0x2, 0xd87, 0xd47, 0x3, 0x2, 0x2, 0x2, 0xd87, 0xd4b, 0x3, 0x2, 0x2, 
       0x2, 0xd87, 0xd57, 0x3, 0x2, 0x2, 0x2, 0xd87, 0xd58, 0x3, 0x2, 0x2, 
       0x2, 0xd87, 0xd5c, 0x3, 0x2, 0x2, 0x2, 0xd87, 0xd63, 0x3, 0x2, 0x2, 
       0x2, 0xd87, 0xd6e, 0x3, 0x2, 0x2, 0x2, 0xd87, 0xd7a, 0x3, 0x2, 0x2, 
       0x2, 0xd88, 0xd93, 0x3, 0x2, 0x2, 0x2, 0xd89, 0xd8a, 0xc, 0xa, 0x2, 
       0x2, 0xd8a, 0xd8b, 0x7, 0x7, 0x2, 0x2, 0xd8b, 0xd8c, 0x5, 0x15a, 
       0xae, 0x2, 0xd8c, 0xd8d, 0x7, 0x8, 0x2, 0x2, 0xd8d, 0xd92, 0x3, 0x2, 
       0x2, 0x2, 0xd8e, 0xd8f, 0xc, 0x8, 0x2, 0x2, 0xd8f, 0xd90, 0x7, 0x9, 
       0x2, 0x2, 0xd90, 0xd92, 0x5, 0x19e, 0xd0, 0x2, 0xd91, 0xd89, 0x3, 
       0x2, 0x2, 0x2, 0xd91, 0xd8e, 0x3, 0x2, 0x2, 0x2, 0xd92, 0xd95, 0x3, 
       0x2, 0x2, 0x2, 0xd93, 0xd91, 0x3, 0x2, 0x2, 0x2, 0xd93, 0xd94, 0x3, 
       0x2, 0x2, 0x2, 0xd94, 0x15d, 0x3, 0x2, 0x2, 0x2, 0xd95, 0xd93, 0x3, 
       0x2, 0x2, 0x2, 0xd96, 0xda3, 0x7, 0xc5, 0x2, 0x2, 0xd97, 0xda3, 0x5, 
       0x16a, 0xb6, 0x2, 0xd98, 0xd99, 0x5, 0x19e, 0xd0, 0x2, 0xd99, 0xd9a, 
       0x7, 0x147, 0x2, 0x2, 0xd9a, 0xda3, 0x3, 0x2, 0x2, 0x2, 0xd9b, 0xda3, 
       0x5, 0x1a4, 0xd3, 0x2, 0xd9c, 0xda3, 0x5, 0x168, 0xb5, 0x2, 0xd9d, 
       0xd9f, 0x7, 0x147, 0x2, 0x2, 0xd9e, 0xd9d, 0x3, 0x2, 0x2, 0x2, 0xd9f, 
       0xda0, 0x3, 0x2, 0x2, 0x2, 0xda0, 0xd9e, 0x3, 0x2, 0x2, 0x2, 0xda0, 
       0xda1, 0x3, 0x2, 0x2, 0x2, 0xda1, 0xda3, 0x3, 0x2, 0x2, 0x2, 0xda2, 
       0xd96, 0x3, 0x2, 0x2, 0x2, 0xda2, 0xd97, 0x3, 0x2, 0x2, 0x2, 0xda2, 
       0xd98, 0x3, 0x2, 0x2, 0x2, 0xda2, 0xd9b, 0x3, 0x2, 0x2, 0x2, 0xda2, 
       0xd9c, 0x3, 0x2, 0x2, 0x2, 0xda2, 0xd9e, 0x3, 0x2, 0x2, 0x2, 0xda3, 
       0x15f, 0x3, 0x2, 0x2, 0x2, 0xda4, 0xdad, 0x5, 0x162, 0xb2, 0x2, 0xda5, 
       0xdad, 0x7, 0x136, 0x2, 0x2, 0xda6, 0xdad, 0x7, 0x137, 0x2, 0x2, 
       0xda7, 0xdad, 0x7, 0x138, 0x2, 0x2, 0xda8, 0xdad, 0x7, 0x139, 0x2, 
       0x2, 0xda9, 0xdad, 0x7, 0x13a, 0x2, 0x2, 0xdaa, 0xdad, 0x7, 0x13b, 
       0x2, 0x2, 0xdab, 0xdad, 0x7, 0x135, 0x2, 0x2, 0xdac, 0xda4, 0x3, 
       0x2, 0x2, 0x2, 0xdac, 0xda5, 0x3, 0x2, 0x2, 0x2, 0xdac, 0xda6, 0x3, 
       0x2, 0x2, 0x2, 0xdac, 0xda7, 0x3, 0x2, 0x2, 0x2, 0xdac, 0xda8, 0x3, 
       0x2, 0x2, 0x2, 0xdac, 0xda9, 0x3, 0x2, 0x2, 0x2, 0xdac, 0xdaa, 0x3, 
       0x2, 0x2, 0x2, 0xdac, 0xdab, 0x3, 0x2, 0x2, 0x2, 0xdad, 0x161, 0x3, 
       0x2, 0x2, 0x2, 0xdae, 0xdaf, 0x9, 0x2a, 0x2, 0x2, 0xdaf, 0x163, 0x3, 
       0x2, 0x2, 0x2, 0xdb0, 0xdb1, 0x9, 0x2b, 0x2, 0x2, 0xdb1, 0x165, 0x3, 
       0x2, 0x2, 0x2, 0xdb2, 0xdb3, 0x9, 0x2c, 0x2, 0x2, 0xdb3, 0x167, 0x3, 
       0x2, 0x2, 0x2, 0xdb4, 0xdb5, 0x9, 0x2d, 0x2, 0x2, 0xdb5, 0x169, 0x3, 
       0x2, 0x2, 0x2, 0xdb6, 0xdb9, 0x7, 0xa4, 0x2, 0x2, 0xdb7, 0xdba, 0x5, 
       0x16c, 0xb7, 0x2, 0xdb8, 0xdba, 0x5, 0x170, 0xb9, 0x2, 0xdb9, 0xdb7, 
       0x3, 0x2, 0x2, 0x2, 0xdb9, 0xdb8, 0x3, 0x2, 0x2, 0x2, 0xdb9, 0xdba, 
       0x3, 0x2, 0x2, 0x2, 0xdba, 0x16b, 0x3, 0x2, 0x2, 0x2, 0xdbb, 0xdbd, 
       0x5, 0x16e, 0xb8, 0x2, 0xdbc, 0xdbe, 0x5, 0x172, 0xba, 0x2, 0xdbd, 
       0xdbc, 0x3, 0x2, 0x2, 0x2, 0xdbd, 0xdbe, 0x3, 0x2, 0x2, 0x2, 0xdbe, 
       0x16d, 0x3, 0x2, 0x2, 0x2, 0xdbf, 0xdc0, 0x5, 0x174, 0xbb, 0x2, 0xdc0, 
       0xdc1, 0x5, 0x176, 0xbc, 0x2, 0xdc1, 0xdc3, 0x3, 0x2, 0x2, 0x2, 0xdc2, 
       0xdbf, 0x3, 0x2, 0x2, 0x2, 0xdc3, 0xdc4, 0x3, 0x2, 0x2, 0x2, 0xdc4, 
       0xdc2, 0x3, 0x2, 0x2, 0x2, 0xdc4, 0xdc5, 0x3, 0x2, 0x2, 0x2, 0xdc5, 
       0x16f, 0x3, 0x2, 0x2, 0x2, 0xdc6, 0xdc9, 0x5, 0x172, 0xba, 0x2, 0xdc7, 
       0xdca, 0x5, 0x16e, 0xb8, 0x2, 0xdc8, 0xdca, 0x5, 0x172, 0xba, 0x2, 
       0xdc9, 0xdc7, 0x3, 0x2, 0x2, 0x2, 0xdc9, 0xdc8, 0x3, 0x2, 0x2, 0x2, 
       0xdc9, 0xdca, 0x3, 0x2, 0x2, 0x2, 0xdca, 0x171, 0x3, 0x2, 0x2, 0x2, 
       0xdcb, 0xdcc, 0x5, 0x174, 0xbb, 0x2, 0xdcc, 0xdcd, 0x5, 0x176, 0xbc, 
       0x2, 0xdcd, 0xdce, 0x7, 0x115, 0x2, 0x2, 0xdce, 0xdcf, 0x5, 0x176, 
       0xbc, 0x2, 0xdcf, 0x173, 0x3, 0x2, 0x2, 0x2, 0xdd0, 0xdd2, 0x9, 0x2e, 
       0x2, 0x2, 0xdd1, 0xdd0, 0x3, 0x2, 0x2, 0x2, 0xdd1, 0xdd2, 0x3, 0x2, 
       0x2, 0x2, 0xdd2, 0xdd3, 0x3, 0x2, 0x2, 0x2, 0xdd3, 0xdd6, 0x9, 0x9, 
       0x2, 0x2, 0xdd4, 0xdd6, 0x7, 0x147, 0x2, 0x2, 0xdd5, 0xdd1, 0x3, 
       0x2, 0x2, 0x2, 0xdd5, 0xdd4, 0x3, 0x2, 0x2, 0x2, 0xdd6, 0x175, 0x3, 
       0x2, 0x2, 0x2, 0xdd7, 0xddf, 0x7, 0x6b, 0x2, 0x2, 0xdd8, 0xddf, 0x7, 
       0x98, 0x2, 0x2, 0xdd9, 0xddf, 0x7, 0xbd, 0x2, 0x2, 0xdda, 0xddf, 
       0x7, 0xbe, 0x2, 0x2, 0xddb, 0xddf, 0x7, 0xf8, 0x2, 0x2, 0xddc, 0xddf, 
       0x7, 0x132, 0x2, 0x2, 0xddd, 0xddf, 0x5, 0x19e, 0xd0, 0x2, 0xdde, 
       0xdd7, 0x3, 0x2, 0x2, 0x2, 0xdde, 0xdd8, 0x3, 0x2, 0x2, 0x2, 0xdde, 
       0xdd9, 0x3, 0x2, 0x2, 0x2, 0xdde, 0xdda, 0x3, 0x2, 0x2, 0x2, 0xdde, 
       0xddb, 0x3, 0x2, 0x2, 0x2, 0xdde, 0xddc, 0x3, 0x2, 0x2, 0x2, 0xdde, 
       0xddd, 0x3, 0x2, 0x2, 0x2, 0xddf, 0x177, 0x3, 0x2, 0x2, 0x2, 0xde0, 
       0xde4, 0x7, 0x89, 0x2, 0x2, 0xde1, 0xde2, 0x7, 0x38, 0x2, 0x2, 0xde2, 
       0xde4, 0x5, 0x19a, 0xce, 0x2, 0xde3, 0xde0, 0x3, 0x2, 0x2, 0x2, 0xde3, 
       0xde1, 0x3, 0x2, 0x2, 0x2, 0xde4, 0x179, 0x3, 0x2, 0x2, 0x2, 0xde5, 
       0xde6, 0x7, 0x40, 0x2, 0x2, 0xde6, 0xde7, 0x7, 0x138, 0x2, 0x2, 0xde7, 
       0xde8, 0x5, 0x17a, 0xbe, 0x2, 0xde8, 0xde9, 0x7, 0x13a, 0x2, 0x2, 
       0xde9, 0xe08, 0x3, 0x2, 0x2, 0x2, 0xdea, 0xdeb, 0x7, 0xba, 0x2, 0x2, 
       0xdeb, 0xdec, 0x7, 0x138, 0x2, 0x2, 0xdec, 0xded, 0x5, 0x17a, 0xbe, 
       0x2, 0xded, 0xdee, 0x7, 0x3, 0x2, 0x2, 0xdee, 0xdef, 0x5, 0x17a, 
       0xbe, 0x2, 0xdef, 0xdf0, 0x7, 0x13a, 0x2, 0x2, 0xdf0, 0xe08, 0x3, 
       0x2, 0x2, 0x2, 0xdf1, 0xdf8, 0x7, 0x10b, 0x2, 0x2, 0xdf2, 0xdf4, 
       0x7, 0x138, 0x2, 0x2, 0xdf3, 0xdf5, 0x5, 0x184, 0xc3, 0x2, 0xdf4, 
       0xdf3, 0x3, 0x2, 0x2, 0x2, 0xdf4, 0xdf5, 0x3, 0x2, 0x2, 0x2, 0xdf5, 
       0xdf6, 0x3, 0x2, 0x2, 0x2, 0xdf6, 0xdf9, 0x7, 0x13a, 0x2, 0x2, 0xdf7, 
       0xdf9, 0x7, 0x136, 0x2, 0x2, 0xdf8, 0xdf2, 0x3, 0x2, 0x2, 0x2, 0xdf8, 
       0xdf7, 0x3, 0x2, 0x2, 0x2, 0xdf9, 0xe08, 0x3, 0x2, 0x2, 0x2, 0xdfa, 
       0xe05, 0x5, 0x19e, 0xd0, 0x2, 0xdfb, 0xdfc, 0x7, 0x5, 0x2, 0x2, 0xdfc, 
       0xe01, 0x7, 0x14b, 0x2, 0x2, 0xdfd, 0xdfe, 0x7, 0x3, 0x2, 0x2, 0xdfe, 
       0xe00, 0x7, 0x14b, 0x2, 0x2, 0xdff, 0xdfd, 0x3, 0x2, 0x2, 0x2, 0xe00, 
       0xe03, 0x3, 0x2, 0x2, 0x2, 0xe01, 0xdff, 0x3, 0x2, 0x2, 0x2, 0xe01, 
       0xe02, 0x3, 0x2, 0x2, 0x2, 0xe02, 0xe04, 0x3, 0x2, 0x2, 0x2, 0xe03, 
       0xe01, 0x3, 0x2, 0x2, 0x2, 0xe04, 0xe06, 0x7, 0x6, 0x2, 0x2, 0xe05, 
       0xdfb, 0x3, 0x2, 0x2, 0x2, 0xe05, 0xe06, 0x3, 0x2, 0x2, 0x2, 0xe06, 
       0xe08, 0x3, 0x2, 0x2, 0x2, 0xe07, 0xde5, 0x3, 0x2, 0x2, 0x2, 0xe07, 
       0xdea, 0x3, 0x2, 0x2, 0x2, 0xe07, 0xdf1, 0x3, 0x2, 0x2, 0x2, 0xe07, 
       0xdfa, 0x3, 0x2, 0x2, 0x2, 0xe08, 0x17b, 0x3, 0x2, 0x2, 0x2, 0xe09, 
       0xe0e, 0x5, 0x17e, 0xc0, 0x2, 0xe0a, 0xe0b, 0x7, 0x3, 0x2, 0x2, 0xe0b, 
       0xe0d, 0x5, 0x17e, 0xc0, 0x2, 0xe0c, 0xe0a, 0x3, 0x2, 0x2, 0x2, 0xe0d, 
       0xe10, 0x3, 0x2, 0x2, 0x2, 0xe0e, 0xe0c, 0x3, 0x2, 0x2, 0x2, 0xe0e, 
       0xe0f, 0x3, 0x2, 0x2, 0x2, 0xe0f, 0x17d, 0x3, 0x2, 0x2, 0x2, 0xe10, 
       0xe0e, 0x3, 0x2, 0x2, 0x2, 0xe11, 0xe12, 0x5, 0x144, 0xa3, 0x2, 0xe12, 
       0xe15, 0x5, 0x17a, 0xbe, 0x2, 0xe13, 0xe14, 0x7, 0xc4, 0x2, 0x2, 
       0xe14, 0xe16, 0x7, 0xc5, 0x2, 0x2, 0xe15, 0xe13, 0x3, 0x2, 0x2, 0x2, 
       0xe15, 0xe16, 0x3, 0x2, 0x2, 0x2, 0xe16, 0xe18, 0x3, 0x2, 0x2, 0x2, 
       0xe17, 0xe19, 0x5, 0xb4, 0x5b, 0x2, 0xe18, 0xe17, 0x3, 0x2, 0x2, 
       0x2, 0xe18, 0xe19, 0x3, 0x2, 0x2, 0x2, 0xe19, 0xe1b, 0x3, 0x2, 0x2, 
       0x2, 0xe1a, 0xe1c, 0x5, 0x178, 0xbd, 0x2, 0xe1b, 0xe1a, 0x3, 0x2, 
       0x2, 0x2, 0xe1b, 0xe1c, 0x3, 0x2, 0x2, 0x2, 0xe1c, 0x17f, 0x3, 0x2, 
       0x2, 0x2, 0xe1d, 0xe22, 0x5, 0x182, 0xc2, 0x2, 0xe1e, 0xe1f, 0x7, 
       0x3, 0x2, 0x2, 0xe1f, 0xe21, 0x5, 0x182, 0xc2, 0x2, 0xe20, 0xe1e, 
       0x3, 0x2, 0x2, 0x2, 0xe21, 0xe24, 0x3, 0x2, 0x2, 0x2, 0xe22, 0xe20, 
       0x3, 0x2, 0x2, 0x2, 0xe22, 0xe23, 0x3, 0x2, 0x2, 0x2, 0xe23, 0x181, 
       0x3, 0x2, 0x2, 0x2, 0xe24, 0xe22, 0x3, 0x2, 0x2, 0x2, 0xe25, 0xe26, 
       0x5, 0x19a, 0xce, 0x2, 0xe26, 0xe29, 0x5, 0x17a, 0xbe, 0x2, 0xe27, 
       0xe28, 0x7, 0xc4, 0x2, 0x2, 0xe28, 0xe2a, 0x7, 0xc5, 0x2, 0x2, 0xe29, 
       0xe27, 0x3, 0x2, 0x2, 0x2, 0xe29, 0xe2a, 0x3, 0x2, 0x2, 0x2, 0xe2a, 
       0xe2c, 0x3, 0x2, 0x2, 0x2, 0xe2b, 0xe2d, 0x5, 0xb4, 0x5b, 0x2, 0xe2c, 
       0xe2b, 0x3, 0x2, 0x2, 0x2, 0xe2c, 0xe2d, 0x3, 0x2, 0x2, 0x2, 0xe2d, 
       0x183, 0x3, 0x2, 0x2, 0x2, 0xe2e, 0xe33, 0x5, 0x186, 0xc4, 0x2, 0xe2f, 
       0xe30, 0x7, 0x3, 0x2, 0x2, 0xe30, 0xe32, 0x5, 0x186, 0xc4, 0x2, 0xe31, 
       0xe2f, 0x3, 0x2, 0x2, 0x2, 0xe32, 0xe35, 0x3, 0x2, 0x2, 0x2, 0xe33, 
       0xe31, 0x3, 0x2, 0x2, 0x2, 0xe33, 0xe34, 0x3, 0x2, 0x2, 0x2, 0xe34, 
       0x185, 0x3, 0x2, 0x2, 0x2, 0xe35, 0xe33, 0x3, 0x2, 0x2, 0x2, 0xe36, 
       0xe37, 0x5, 0x19e, 0xd0, 0x2, 0xe37, 0xe38, 0x7, 0x4, 0x2, 0x2, 0xe38, 
       0xe3b, 0x5, 0x17a, 0xbe, 0x2, 0xe39, 0xe3a, 0x7, 0xc4, 0x2, 0x2, 
       0xe3a, 0xe3c, 0x7, 0xc5, 0x2, 0x2, 0xe3b, 0xe39, 0x3, 0x2, 0x2, 0x2, 
       0xe3b, 0xe3c, 0x3, 0x2, 0x2, 0x2, 0xe3c, 0xe3e, 0x3, 0x2, 0x2, 0x2, 
       0xe3d, 0xe3f, 0x5, 0xb4, 0x5b, 0x2, 0xe3e, 0xe3d, 0x3, 0x2, 0x2, 
       0x2, 0xe3e, 0xe3f, 0x3, 0x2, 0x2, 0x2, 0xe3f, 0x187, 0x3, 0x2, 0x2, 
       0x2, 0xe40, 0xe41, 0x7, 0x12e, 0x2, 0x2, 0xe41, 0xe42, 0x5, 0x154, 
       0xab, 0x2, 0xe42, 0xe43, 0x7, 0x114, 0x2, 0x2, 0xe43, 0xe44, 0x5, 
       0x154, 0xab, 0x2, 0xe44, 0x189, 0x3, 0x2, 0x2, 0x2, 0xe45, 0xe46, 
       0x7, 0x130, 0x2, 0x2, 0xe46, 0xe4b, 0x5, 0x18c, 0xc7, 0x2, 0xe47, 
       0xe48, 0x7, 0x3, 0x2, 0x2, 0xe48, 0xe4a, 0x5, 0x18c, 0xc7, 0x2, 0xe49, 
       0xe47, 0x3, 0x2, 0x2, 0x2, 0xe4a, 0xe4d, 0x3, 0x2, 0x2, 0x2, 0xe4b, 
       0xe49, 0x3, 0x2, 0x2, 0x2, 0xe4b, 0xe4c, 0x3, 0x2, 0x2, 0x2, 0xe4c, 
       0x18b, 0x3, 0x2, 0x2, 0x2, 0xe4d, 0xe4b, 0x3, 0x2, 0x2, 0x2, 0xe4e, 
       0xe4f, 0x5, 0x19a, 0xce, 0x2, 0xe4f, 0xe50, 0x7, 0x41, 0x2, 0x2, 
       0xe50, 0xe51, 0x5, 0x18e, 0xc8, 0x2, 0xe51, 0x18d, 0x3, 0x2, 0x2, 
       0x2, 0xe52, 0xe81, 0x5, 0x19a, 0xce, 0x2, 0xe53, 0xe54, 0x7, 0x5, 
       0x2, 0x2, 0xe54, 0xe55, 0x5, 0x19a, 0xce, 0x2, 0xe55, 0xe56, 0x7, 
       0x6, 0x2, 0x2, 0xe56, 0xe81, 0x3, 0x2, 0x2, 0x2, 0xe57, 0xe7a, 0x7, 
       0x5, 0x2, 0x2, 0xe58, 0xe59, 0x7, 0x51, 0x2, 0x2, 0xe59, 0xe5a, 0x7, 
       0x49, 0x2, 0x2, 0xe5a, 0xe5f, 0x5, 0x154, 0xab, 0x2, 0xe5b, 0xe5c, 
       0x7, 0x3, 0x2, 0x2, 0xe5c, 0xe5e, 0x5, 0x154, 0xab, 0x2, 0xe5d, 0xe5b, 
       0x3, 0x2, 0x2, 0x2, 0xe5e, 0xe61, 0x3, 0x2, 0x2, 0x2, 0xe5f, 0xe5d, 
       0x3, 0x2, 0x2, 0x2, 0xe5f, 0xe60, 0x3, 0x2, 0x2, 0x2, 0xe60, 0xe7b, 
       0x3, 0x2, 0x2, 0x2, 0xe61, 0xe5f, 0x3, 0x2, 0x2, 0x2, 0xe62, 0xe63, 
       0x9, 0x2f, 0x2, 0x2, 0xe63, 0xe64, 0x7, 0x49, 0x2, 0x2, 0xe64, 0xe69, 
       0x5, 0x154, 0xab, 0x2, 0xe65, 0xe66, 0x7, 0x3, 0x2, 0x2, 0xe66, 0xe68, 
       0x5, 0x154, 0xab, 0x2, 0xe67, 0xe65, 0x3, 0x2, 0x2, 0x2, 0xe68, 0xe6b, 
       0x3, 0x2, 0x2, 0x2, 0xe69, 0xe67, 0x3, 0x2, 0x2, 0x2, 0xe69, 0xe6a, 
       0x3, 0x2, 0x2, 0x2, 0xe6a, 0xe6d, 0x3, 0x2, 0x2, 0x2, 0xe6b, 0xe69, 
       0x3, 0x2, 0x2, 0x2, 0xe6c, 0xe62, 0x3, 0x2, 0x2, 0x2, 0xe6c, 0xe6d, 
       0x3, 0x2, 0x2, 0x2, 0xe6d, 0xe78, 0x3, 0x2, 0x2, 0x2, 0xe6e, 0xe6f, 
       0x9, 0x30, 0x2, 0x2, 0xe6f, 0xe70, 0x7, 0x49, 0x2, 0x2, 0xe70, 0xe75, 
       0x5, 0xec, 0x77, 0x2, 0xe71, 0xe72, 0x7, 0x3, 0x2, 0x2, 0xe72, 0xe74, 
       0x5, 0xec, 0x77, 0x2, 0xe73, 0xe71, 0x3, 0x2, 0x2, 0x2, 0xe74, 0xe77, 
       0x3, 0x2, 0x2, 0x2, 0xe75, 0xe73, 0x3, 0x2, 0x2, 0x2, 0xe75, 0xe76, 
       0x3, 0x2, 0x2, 0x2, 0xe76, 0xe79, 0x3, 0x2, 0x2, 0x2, 0xe77, 0xe75, 
       0x3, 0x2, 0x2, 0x2, 0xe78, 0xe6e, 0x3, 0x2, 0x2, 0x2, 0xe78, 0xe79, 
       0x3, 0x2, 0x2, 0x2, 0xe79, 0xe7b, 0x3, 0x2, 0x2, 0x2, 0xe7a, 0xe58, 
       0x3, 0x2, 0x2, 0x2, 0xe7a, 0xe6c, 0x3, 0x2, 0x2, 0x2, 0xe7b, 0xe7d, 
       0x3, 0x2, 0x2, 0x2, 0xe7c, 0xe7e, 0x5, 0x190, 0xc9, 0x2, 0xe7d, 0xe7c, 
       0x3, 0x2, 0x2, 0x2, 0xe7d, 0xe7e, 0x3, 0x2, 0x2, 0x2, 0xe7e, 0xe7f, 
       0x3, 0x2, 0x2, 0x2, 0xe7f, 0xe81, 0x7, 0x6, 0x2, 0x2, 0xe80, 0xe52, 
       0x3, 0x2, 0x2, 0x2, 0xe80, 0xe53, 0x3, 0x2, 0x2, 0x2, 0xe80, 0xe57, 
       0x3, 0x2, 0x2, 0x2, 0xe81, 0x18f, 0x3, 0x2, 0x2, 0x2, 0xe82, 0xe83, 
       0x7, 0xe2, 0x2, 0x2, 0xe83, 0xe93, 0x5, 0x192, 0xca, 0x2, 0xe84, 
       0xe85, 0x7, 0xf6, 0x2, 0x2, 0xe85, 0xe93, 0x5, 0x192, 0xca, 0x2, 
       0xe86, 0xe87, 0x7, 0xe2, 0x2, 0x2, 0xe87, 0xe88, 0x7, 0x45, 0x2, 
       0x2, 0xe88, 0xe89, 0x5, 0x192, 0xca, 0x2, 0xe89, 0xe8a, 0x7, 0x3c, 
       0x2, 0x2, 0xe8a, 0xe8b, 0x5, 0x192, 0xca, 0x2, 0xe8b, 0xe93, 0x3, 
       0x2, 0x2, 0x2, 0xe8c, 0xe8d, 0x7, 0xf6, 0x2, 0x2, 0xe8d, 0xe8e, 0x7, 
       0x45, 0x2, 0x2, 0xe8e, 0xe8f, 0x5, 0x192, 0xca, 0x2, 0xe8f, 0xe90, 
       0x7, 0x3c, 0x2, 0x2, 0xe90, 0xe91, 0x5, 0x192, 0xca, 0x2, 0xe91, 
       0xe93, 0x3, 0x2, 0x2, 0x2, 0xe92, 0xe82, 0x3, 0x2, 0x2, 0x2, 0xe92, 
       0xe84, 0x3, 0x2, 0x2, 0x2, 0xe92, 0xe86, 0x3, 0x2, 0x2, 0x2, 0xe92, 
       0xe8c, 0x3, 0x2, 0x2, 0x2, 0xe93, 0x191, 0x3, 0x2, 0x2, 0x2, 0xe94, 
       0xe95, 0x7, 0x120, 0x2, 0x2, 0xe95, 0xe9c, 0x9, 0x31, 0x2, 0x2, 0xe96, 
       0xe97, 0x7, 0x63, 0x2, 0x2, 0xe97, 0xe9c, 0x7, 0xf5, 0x2, 0x2, 0xe98, 
       0xe99, 0x5, 0x154, 0xab, 0x2, 0xe99, 0xe9a, 0x9, 0x31, 0x2, 0x2, 
       0xe9a, 0xe9c, 0x3, 0x2, 0x2, 0x2, 0xe9b, 0xe94, 0x3, 0x2, 0x2, 0x2, 
       0xe9b, 0xe96, 0x3, 0x2, 0x2, 0x2, 0xe9b, 0xe98, 0x3, 0x2, 0x2, 0x2, 
       0xe9c, 0x193, 0x3, 0x2, 0x2, 0x2, 0xe9d, 0xea2, 0x5, 0x198, 0xcd, 
       0x2, 0xe9e, 0xe9f, 0x7, 0x3, 0x2, 0x2, 0xe9f, 0xea1, 0x5, 0x198, 
       0xcd, 0x2, 0xea0, 0xe9e, 0x3, 0x2, 0x2, 0x2, 0xea1, 0xea4, 0x3, 0x2, 
       0x2, 0x2, 0xea2, 0xea0, 0x3, 0x2, 0x2, 0x2, 0xea2, 0xea3, 0x3, 0x2, 
       0x2, 0x2, 0xea3, 0x195, 0x3, 0x2, 0x2, 0x2, 0xea4, 0xea2, 0x3, 0x2, 
       0x2, 0x2, 0xea5, 0xeaa, 0x5, 0x198, 0xcd, 0x2, 0xea6, 0xeaa, 0x7, 
       0x87, 0x2, 0x2, 0xea7, 0xeaa, 0x7, 0xae, 0x2, 0x2, 0xea8, 0xeaa, 
       0x7, 0xef, 0x2, 0x2, 0xea9, 0xea5, 0x3, 0x2, 0x2, 0x2, 0xea9, 0xea6, 
       0x3, 0x2, 0x2, 0x2, 0xea9, 0xea7, 0x3, 0x2, 0x2, 0x2, 0xea9, 0xea8, 
       0x3, 0x2, 0x2, 0x2, 0xeaa, 0x197, 0x3, 0x2, 0x2, 0x2, 0xeab, 0xeb0, 
       0x5, 0x19e, 0xd0, 0x2, 0xeac, 0xead, 0x7, 0x9, 0x2, 0x2, 0xead, 0xeaf, 
       0x5, 0x19e, 0xd0, 0x2, 0xeae, 0xeac, 0x3, 0x2, 0x2, 0x2, 0xeaf, 0xeb2, 
       0x3, 0x2, 0x2, 0x2, 0xeb0, 0xeae, 0x3, 0x2, 0x2, 0x2, 0xeb0, 0xeb1, 
       0x3, 0x2, 0x2, 0x2, 0xeb1, 0x199, 0x3, 0x2, 0x2, 0x2, 0xeb2, 0xeb0, 
       0x3, 0x2, 0x2, 0x2, 0xeb3, 0xeb4, 0x5, 0x19e, 0xd0, 0x2, 0xeb4, 0x19b, 
       0x3, 0x2, 0x2, 0x2, 0xeb5, 0xeb6, 0x7, 0x13d, 0x2, 0x2, 0xeb6, 0xeb8, 
       0x5, 0x19e, 0xd0, 0x2, 0xeb7, 0xeb5, 0x3, 0x2, 0x2, 0x2, 0xeb8, 0xeb9, 
       0x3, 0x2, 0x2, 0x2, 0xeb9, 0xeb7, 0x3, 0x2, 0x2, 0x2, 0xeb9, 0xeba, 
       0x3, 0x2, 0x2, 0x2, 0xeba, 0x19d, 0x3, 0x2, 0x2, 0x2, 0xebb, 0xebe, 
       0x5, 0x1a0, 0xd1, 0x2, 0xebc, 0xebe, 0x5, 0x1aa, 0xd6, 0x2, 0xebd, 
       0xebb, 0x3, 0x2, 0x2, 0x2, 0xebd, 0xebc, 0x3, 0x2, 0x2, 0x2, 0xebe, 
       0x19f, 0x3, 0x2, 0x2, 0x2, 0xebf, 0xec3, 0x7, 0x150, 0x2, 0x2, 0xec0, 
       0xec3, 0x5, 0x1a2, 0xd2, 0x2, 0xec1, 0xec3, 0x5, 0x1ac, 0xd7, 0x2, 
       0xec2, 0xebf, 0x3, 0x2, 0x2, 0x2, 0xec2, 0xec0, 0x3, 0x2, 0x2, 0x2, 
       0xec2, 0xec1, 0x3, 0x2, 0x2, 0x2, 0xec3, 0x1a1, 0x3, 0x2, 0x2, 0x2, 
       0xec4, 0xec5, 0x7, 0x151, 0x2, 0x2, 0xec5, 0x1a3, 0x3, 0x2, 0x2, 
       0x2, 0xec6, 0xec8, 0x7, 0x13d, 0x2, 0x2, 0xec7, 0xec6, 0x3, 0x2, 
       0x2, 0x2, 0xec7, 0xec8, 0x3, 0x2, 0x2, 0x2, 0xec8, 0xec9, 0x3, 0x2, 
       0x2, 0x2, 0xec9, 0xeeb, 0x7, 0x14c, 0x2, 0x2, 0xeca, 0xecc, 0x7, 
       0x13d, 0x2, 0x2, 0xecb, 0xeca, 0x3, 0x2, 0x2, 0x2, 0xecb, 0xecc, 
       0x3, 0x2, 0x2, 0x2, 0xecc, 0xecd, 0x3, 0x2, 0x2, 0x2, 0xecd, 0xeeb, 
       0x7, 0x14d, 0x2, 0x2, 0xece, 0xed0, 0x7, 0x13d, 0x2, 0x2, 0xecf, 
       0xece, 0x3, 0x2, 0x2, 0x2, 0xecf, 0xed0, 0x3, 0x2, 0x2, 0x2, 0xed0, 
       0xed1, 0x3, 0x2, 0x2, 0x2, 0xed1, 0xeeb, 0x9, 0x32, 0x2, 0x2, 0xed2, 
       0xed4, 0x7, 0x13d, 0x2, 0x2, 0xed3, 0xed2, 0x3, 0x2, 0x2, 0x2, 0xed3, 
       0xed4, 0x3, 0x2, 0x2, 0x2, 0xed4, 0xed5, 0x3, 0x2, 0x2, 0x2, 0xed5, 
       0xeeb, 0x7, 0x14b, 0x2, 0x2, 0xed6, 0xed8, 0x7, 0x13d, 0x2, 0x2, 
       0xed7, 0xed6, 0x3, 0x2, 0x2, 0x2, 0xed7, 0xed8, 0x3, 0x2, 0x2, 0x2, 
       0xed8, 0xed9, 0x3, 0x2, 0x2, 0x2, 0xed9, 0xeeb, 0x7, 0x148, 0x2, 
       0x2, 0xeda, 0xedc, 0x7, 0x13d, 0x2, 0x2, 0xedb, 0xeda, 0x3, 0x2, 
       0x2, 0x2, 0xedb, 0xedc, 0x3, 0x2, 0x2, 0x2, 0xedc, 0xedd, 0x3, 0x2, 
       0x2, 0x2, 0xedd, 0xeeb, 0x7, 0x149, 0x2, 0x2, 0xede, 0xee0, 0x7, 
       0x13d, 0x2, 0x2, 0xedf, 0xede, 0x3, 0x2, 0x2, 0x2, 0xedf, 0xee0, 
       0x3, 0x2, 0x2, 0x2, 0xee0, 0xee1, 0x3, 0x2, 0x2, 0x2, 0xee1, 0xeeb, 
       0x7, 0x14a, 0x2, 0x2, 0xee2, 0xee4, 0x7, 0x13d, 0x2, 0x2, 0xee3, 
       0xee2, 0x3, 0x2, 0x2, 0x2, 0xee3, 0xee4, 0x3, 0x2, 0x2, 0x2, 0xee4, 
       0xee5, 0x3, 0x2, 0x2, 0x2, 0xee5, 0xeeb, 0x7, 0x14e, 0x2, 0x2, 0xee6, 
       0xee8, 0x7, 0x13d, 0x2, 0x2, 0xee7, 0xee6, 0x3, 0x2, 0x2, 0x2, 0xee7, 
       0xee8, 0x3, 0x2, 0x2, 0x2, 0xee8, 0xee9, 0x3, 0x2, 0x2, 0x2, 0xee9, 
       0xeeb, 0x7, 0x14f, 0x2, 0x2, 0xeea, 0xec7, 0x3, 0x2, 0x2, 0x2, 0xeea, 
       0xecb, 0x3, 0x2, 0x2, 0x2, 0xeea, 0xecf, 0x3, 0x2, 0x2, 0x2, 0xeea, 
       0xed3, 0x3, 0x2, 0x2, 0x2, 0xeea, 0xed7, 0x3, 0x2, 0x2, 0x2, 0xeea, 
       0xedb, 0x3, 0x2, 0x2, 0x2, 0xeea, 0xedf, 0x3, 0x2, 0x2, 0x2, 0xeea, 
       0xee3, 0x3, 0x2, 0x2, 0x2, 0xeea, 0xee7, 0x3, 0x2, 0x2, 0x2, 0xeeb, 
       0x1a5, 0x3, 0x2, 0x2, 0x2, 0xeec, 0xeed, 0x7, 0x11e, 0x2, 0x2, 0xeed, 
       0xef4, 0x5, 0x17a, 0xbe, 0x2, 0xeee, 0xef4, 0x5, 0xb4, 0x5b, 0x2, 
       0xeef, 0xef4, 0x5, 0x178, 0xbd, 0x2, 0xef0, 0xef1, 0x9, 0x33, 0x2, 
       0x2, 0xef1, 0xef2, 0x7, 0xc4, 0x2, 0x2, 0xef2, 0xef4, 0x7, 0xc5, 
       0x2, 0x2, 0xef3, 0xeec, 0x3, 0x2, 0x2, 0x2, 0xef3, 0xeee, 0x3, 0x2, 
       0x2, 0x2, 0xef3, 0xeef, 0x3, 0x2, 0x2, 0x2, 0xef3, 0xef0, 0x3, 0x2, 
       0x2, 0x2, 0xef4, 0x1a7, 0x3, 0x2, 0x2, 0x2, 0xef5, 0xef6, 0x9, 0x34, 
       0x2, 0x2, 0xef6, 0x1a9, 0x3, 0x2, 0x2, 0x2, 0xef7, 0xef8, 0x9, 0x35, 
       0x2, 0x2, 0xef8, 0x1ab, 0x3, 0x2, 0x2, 0x2, 0xef9, 0xefa, 0x9, 0x36, 
       0x2, 0x2, 0xefa, 0x1ad, 0x3, 0x2, 0x2, 0x2, 0x208, 0x1b1, 0x1be, 
       0x1c1, 0x1c5, 0x1c8, 0x1cb, 0x1db, 0x1df, 0x1e2, 0x1e7, 0x1eb, 0x1ee, 
       0x1f6, 0x1f9, 0x1fd, 0x200, 0x204, 0x20b, 0x212, 0x219, 0x21d, 0x226, 
       0x22a, 0x231, 0x235, 0x23a, 0x23e, 0x243, 0x247, 0x24c, 0x250, 0x255, 
       0x259, 0x25d, 0x264, 0x26c, 0x270, 0x274, 0x278, 0x27b, 0x280, 0x287, 
       0x28a, 0x28e, 0x292, 0x295, 0x299, 0x29b, 0x29f, 0x2a2, 0x2a6, 0x2a9, 
       0x2ad, 0x2b1, 0x2b4, 0x2b9, 0x2bd, 0x2c0, 0x2c4, 0x2c9, 0x2ce, 0x2d4, 
       0x2dd, 0x2e2, 0x2e5, 0x2e8, 0x2eb, 0x2ef, 0x2f2, 0x2f5, 0x2f8, 0x2fd, 
       0x300, 0x303, 0x306, 0x308, 0x310, 0x314, 0x319, 0x31b, 0x324, 0x32c, 
       0x32f, 0x337, 0x33d, 0x342, 0x34e, 0x352, 0x357, 0x35b, 0x362, 0x369, 
       0x373, 0x376, 0x37c, 0x380, 0x383, 0x38a, 0x38c, 0x396, 0x39d, 0x3a1, 
       0x3a5, 0x3aa, 0x3af, 0x3b2, 0x3b9, 0x3c1, 0x3c6, 0x3cf, 0x3d7, 0x3dd, 
       0x3e2, 0x3ea, 0x3ef, 0x3f6, 0x408, 0x413, 0x41c, 0x422, 0x429, 0x432, 
       0x43a, 0x43e, 0x444, 0x44c, 0x45c, 0x475, 0x47a, 0x482, 0x48a, 0x48c, 
       0x4a0, 0x4a4, 0x4aa, 0x4ad, 0x4b0, 0x4b7, 0x4bc, 0x4bf, 0x4c6, 0x4d2, 
       0x4db, 0x4dd, 0x4e1, 0x4e4, 0x4eb, 0x4f6, 0x4f8, 0x500, 0x505, 0x508, 
       0x50e, 0x519, 0x559, 0x562, 0x566, 0x56c, 0x570, 0x575, 0x57b, 0x587, 
       0x58f, 0x595, 0x5a2, 0x5a7, 0x5b7, 0x5be, 0x5c2, 0x5c8, 0x5d7, 0x5db, 
       0x5e1, 0x5e7, 0x5ea, 0x5ed, 0x5f3, 0x5f7, 0x5ff, 0x601, 0x60a, 0x60d, 
       0x616, 0x61b, 0x621, 0x628, 0x62b, 0x631, 0x63c, 0x63f, 0x643, 0x648, 
       0x64d, 0x654, 0x657, 0x65a, 0x661, 0x666, 0x66f, 0x677, 0x67d, 0x680, 
       0x683, 0x689, 0x68d, 0x691, 0x695, 0x697, 0x69f, 0x6a7, 0x6ad, 0x6b3, 
       0x6b6, 0x6ba, 0x6bd, 0x6c1, 0x6da, 0x6dd, 0x6e1, 0x6e7, 0x6ea, 0x6ed, 
       0x6f3, 0x6fb, 0x700, 0x706, 0x70c, 0x718, 0x71b, 0x722, 0x729, 0x731, 
       0x734, 0x73c, 0x740, 0x747, 0x7bb, 0x7c3, 0x7cb, 0x7d4, 0x7de, 0x7e2, 
       0x7e5, 0x7eb, 0x7f1, 0x7fd, 0x809, 0x80e, 0x817, 0x81a, 0x822, 0x829, 
       0x82b, 0x830, 0x834, 0x839, 0x83e, 0x843, 0x846, 0x84b, 0x84f, 0x854, 
       0x856, 0x85a, 0x863, 0x86b, 0x874, 0x87b, 0x884, 0x889, 0x88c, 0x89f, 
       0x8a1, 0x8aa, 0x8b1, 0x8b4, 0x8bb, 0x8bf, 0x8c5, 0x8cd, 0x8d8, 0x8e3, 
       0x8ea, 0x8f0, 0x8fd, 0x904, 0x90b, 0x917, 0x91f, 0x925, 0x928, 0x931, 
       0x934, 0x93d, 0x940, 0x949, 0x94c, 0x955, 0x958, 0x95b, 0x960, 0x962, 
       0x96a, 0x96f, 0x975, 0x97b, 0x97e, 0x980, 0x988, 0x98c, 0x990, 0x996, 
       0x99a, 0x9a2, 0x9a6, 0x9a9, 0x9ac, 0x9af, 0x9b3, 0x9b8, 0x9bf, 0x9c3, 
       0x9c6, 0x9c9, 0x9cc, 0x9ce, 0x9d1, 0x9dd, 0x9e0, 0x9e4, 0x9ee, 0x9f2, 
       0x9f4, 0x9f7, 0x9fb, 0xa01, 0xa05, 0xa10, 0xa1a, 0xa26, 0xa35, 0xa3a, 
       0xa41, 0xa51, 0xa56, 0xa63, 0xa68, 0xa70, 0xa76, 0xa7a, 0xa83, 0xa92, 
       0xa97, 0xaa3, 0xaa8, 0xab0, 0xab3, 0xab7, 0xac5, 0xad2, 0xad7, 0xadb, 
       0xade, 0xae3, 0xaec, 0xaef, 0xaf4, 0xafb, 0xafe, 0xb06, 0xb0d, 0xb14, 
       0xb17, 0xb1c, 0xb1f, 0xb24, 0xb28, 0xb2b, 0xb2e, 0xb34, 0xb39, 0xb3e, 
       0xb50, 0xb52, 0xb55, 0xb60, 0xb69, 0xb70, 0xb78, 0xb7f, 0xb83, 0xb86, 
       0xb8e, 0xb96, 0xb9c, 0xba4, 0xbb0, 0xbb3, 0xbb9, 0xbbd, 0xbbf, 0xbc8, 
       0xbd4, 0xbd6, 0xbdd, 0xbe4, 0xbea, 0xbf0, 0xbf2, 0xbf9, 0xc01, 0xc07, 
       0xc0e, 0xc14, 0xc18, 0xc1a, 0xc21, 0xc2a, 0xc37, 0xc3c, 0xc40, 0xc4e, 
       0xc50, 0xc58, 0xc5a, 0xc5e, 0xc66, 0xc6f, 0xc75, 0xc7d, 0xc82, 0xc8e, 
       0xc93, 0xc96, 0xc9c, 0xca0, 0xca5, 0xcaa, 0xcaf, 0xcb5, 0xcca, 0xccc, 
       0xcd5, 0xcd9, 0xce2, 0xce6, 0xcf8, 0xcfb, 0xd03, 0xd0c, 0xd23, 0xd2e, 
       0xd35, 0xd38, 0xd41, 0xd45, 0xd51, 0xd6a, 0xd71, 0xd74, 0xd83, 0xd87, 
       0xd91, 0xd93, 0xda0, 0xda2, 0xdac, 0xdb9, 0xdbd, 0xdc4, 0xdc9, 0xdd1, 
       0xdd5, 0xdde, 0xde3, 0xdf4, 0xdf8, 0xe01, 0xe05, 0xe07, 0xe0e, 0xe15, 
       0xe18, 0xe1b, 0xe22, 0xe29, 0xe2c, 0xe33, 0xe3b, 0xe3e, 0xe4b, 0xe5f, 
       0xe69, 0xe6c, 0xe75, 0xe78, 0xe7a, 0xe7d, 0xe80, 0xe92, 0xe9b, 0xea2, 
       0xea9, 0xeb0, 0xeb9, 0xebd, 0xec2, 0xec7, 0xecb, 0xecf, 0xed3, 0xed7, 
       0xedb, 0xedf, 0xee3, 0xee7, 0xeea, 0xef3, 
  };

  _serializedATN.insert(_serializedATN.end(), serializedATNSegment0,
    serializedATNSegment0 + sizeof(serializedATNSegment0) / sizeof(serializedATNSegment0[0]));
  _serializedATN.insert(_serializedATN.end(), serializedATNSegment1,
    serializedATNSegment1 + sizeof(serializedATNSegment1) / sizeof(serializedATNSegment1[0]));


  atn::ATNDeserializer deserializer;
  _atn = deserializer.deserialize(_serializedATN);

  size_t count = _atn.getNumberOfDecisions();
  _decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    _decisionToDFA.emplace_back(_atn.getDecisionState(i), i);
  }
}

fugue_sqlParser::Initializer fugue_sqlParser::_init;
